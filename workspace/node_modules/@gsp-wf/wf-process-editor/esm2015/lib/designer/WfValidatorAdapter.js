/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ParallelGateway } from "@edp-pmf/bpmn-model";
import { ProcessHeader, Component, StartMode, ToolTime, UserActivity, OperationActivity, AutoActivity, MessageActivity, CallActivitySubProcess, IntermediateCatchEventImpl, NotifyActivity } from "@gsp-wf/wf-process-model";
import { WfDesignerUtils } from "./WfDesignerUtils";
export class WfValidatorAdapter {
    constructor() {
    }
    /**
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    static validator(bpmnModel, scene) {
        // 校验节点标识是否合规
        /** @type {?} */
        const resActList = this.validateActivityList(bpmnModel);
        if (!resActList.valid) {
            return resActList;
        }
        // 校验流程变量
        /** @type {?} */
        const resProcVars = this.validatePrcoessVaris(bpmnModel);
        if (!resProcVars.valid) {
            return resProcVars;
        }
        /** @type {?} */
        const warningList = this.warningValidator(bpmnModel, scene);
        return {
            valid: true,
            warningList: warningList,
        };
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    static warningValidator(bpmnModel, scene) {
        /** @type {?} */
        let warningList = new Array();
        // 校验并行网关是否成对出现
        this.validateParallelGateway(bpmnModel, warningList);
        // 校验流程构件
        this.validateProcCmps(bpmnModel, scene, warningList);
        // 校验审批活动、人工操作参与者
        this.validateApprovalPerformers(bpmnModel, warningList);
        return warningList;
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @param {?} warningList
     * @return {?}
     */
    static validateProcCmps(bpmnModel, scene, warningList) {
        if (scene === 'inSuite') {
            return;
        }
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        /** @type {?} */
        const processHeader = extendElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof ProcessHeader));
        if (!processHeader) {
            console.error(this.localePipe.instant('validate.noProcessHeader'));
            return;
        }
        /** @type {?} */
        const procCmps = extendElements.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof Component));
        if (!procCmps || procCmps.length === 0) {
            /** @type {?} */
            const tip = {
                id: 'lackCmp',
                title: this.localePipe.instant('validate.cmpsEmpty'),
                msg: this.localePipe.instant('validate.cmpsEmptyMsg'),
                type: 'processWarning'
            };
            warningList.push(tip);
            return;
        }
        // 启用方式为直接方式时
        if (((/** @type {?} */ (processHeader))).startMode === StartMode.DIRECT) {
            // 直接启用方式时不允许存在共享的构件
            /** @type {?} */
            const pfCmps = procCmps.filter((/**
             * @param {?} p
             * @return {?}
             */
            (p) => WfDesignerUtils.isPfComponent(p.MetadataId)));
            if (pfCmps && pfCmps.length > 0) {
                /** @type {?} */
                let pfCmpsName = '';
                for (const cmp of pfCmps) {
                    pfCmpsName = pfCmpsName.concat(`${((/** @type {?} */ (cmp))).Name}, `);
                }
                pfCmpsName = pfCmpsName.slice(0, pfCmpsName.length - 1);
                /** @type {?} */
                const tip = {
                    id: 'directProcessWithPFCmp',
                    title: this.localePipe.instant('validate.directNoPf'),
                    msg: this.localePipe.instant('validate.directNoPfMsg') + `${pfCmpsName} `,
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === ToolTime.LOADDATA))) {
                /** @type {?} */
                const tip = {
                    id: 'lackLoadDataCmp',
                    title: this.localePipe.instant('validate.noLoadDataCmp'),
                    msg: this.localePipe.instant('validate.noLoadDataCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === ToolTime.PROCESSINSTANCE_STARTED))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessStartCmp',
                    title: this.localePipe.instant('validate.noStartCmp'),
                    msg: this.localePipe.instant('validate.noStartCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === ToolTime.PROCESSINSTANCE_COMPLETED))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessCompleteCmp',
                    title: this.localePipe.instant('validate.lackProcessCompleteCmp'),
                    msg: this.localePipe.instant('validate.lackProcessCompleteCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => ((/** @type {?} */ (c.Time))) === 'PROCESSINSTANCE_ABORTED'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessAbortCmp',
                    title: this.localePipe.instant('validate.lackProcessAbortCmp'),
                    msg: this.localePipe.instant('validate.lackProcessAbortCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === 'PROCESSINSTANCE_CANCELED'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessCancelCmp',
                    title: this.localePipe.instant('validate.lackProcessCancelCmp'),
                    msg: this.localePipe.instant('validate.lackProcessCancelCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === 'PROCESSINSTANCE_ROLLBACK'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessBackCmp',
                    title: this.localePipe.instant('validate.lackProcessBackCmp'),
                    msg: this.localePipe.instant('validate.lackProcessBackCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === 'PROCESSINSTANCE_RESUBMIT'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessReStartCmp',
                    title: this.localePipe.instant('validate.lackProcessReStartCmp'),
                    msg: this.localePipe.instant('validate.lackProcessReStartCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
        }
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    static validateParallelGateway(bpmnModel, warningList) {
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        let parallelGatewayCount = 0;
        for (const k in flowElements) {
            if (flowElements[k] instanceof ParallelGateway) {
                parallelGatewayCount++;
            }
        }
        if (parallelGatewayCount % 2 !== 0) {
            /** @type {?} */
            const tip = {
                id: 'parallelGatewayCheck',
                title: this.localePipe.instant('validate.parallelGatewayCheck'),
                msg: this.localePipe.instant('validate.parallelGatewayCheckMsg'),
                type: 'processWarning'
            };
            warningList.push(tip);
        }
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    static validateApprovalPerformers(bpmnModel, warningList) {
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        let count = 0;
        for (const k in flowElements) {
            /** @type {?} */
            const act = flowElements[k];
            if (act instanceof UserActivity || act instanceof OperationActivity) {
                /** @type {?} */
                const roles = act.GetResourceRoles();
                if (roles.length == 0 && (!act.AssignPerformerConfig || !act.AssignPerformerConfig.AllowGlobalAssign)) {
                    /** @type {?} */
                    const tip = {
                        id: 'approvalPerformerCheck' + count,
                        title: `【${flowElements[k].Name}】` + this.localePipe.instant('validate.approvalPerformerCheck'),
                        msg: ``,
                        type: 'processWarning'
                    };
                    warningList.push(tip);
                    count++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    static validatePrcoessVaris(bpmnModel) {
        /** @type {?} */
        const objects = bpmnModel.DefaultProcess.GetDataObjects();
        /** @type {?} */
        let procVaris = new Array();
        if (objects && objects.length > 0) {
            procVaris = objects.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o.DataType.Category !== 'CustomType')).map((/**
             * @param {?} o
             * @return {?}
             */
            o => o.Name));
        }
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        for (const k in flowElements) {
            if (flowElements[k] instanceof UserActivity ||
                flowElements[k] instanceof OperationActivity ||
                flowElements[k] instanceof AutoActivity ||
                flowElements[k] instanceof MessageActivity ||
                flowElements[k] instanceof CallActivitySubProcess ||
                flowElements[k] instanceof IntermediateCatchEventImpl ||
                flowElements[k] instanceof NotifyActivity) {
                /** @type {?} */
                const variSets = ((/** @type {?} */ (flowElements[k]))).variableSettings;
                if (variSets) {
                    for (const v of variSets) {
                        if (!procVaris.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p === v.variableCode))) {
                            return {
                                valid: false,
                                type: 'message',
                                level: 'warning',
                                message: `【${flowElements[k].Name}】` + this.localePipe.instant('validate.noVariable1')
                                    + `【${v.variableName}】` + this.localePipe.instant('validate.noVariable2')
                            };
                        }
                    }
                }
            }
        }
        return {
            valid: true,
        };
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    static validateActivityList(bpmnModel) {
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        const resActId = this.validateActivityId(flowElements);
        if (!resActId.valid) {
            return resActId;
        }
        /** @type {?} */
        const resActName = this.validateActivityName(flowElements);
        if (!resActName.valid) {
            return resActName;
        }
        return {
            valid: true,
        };
    }
    /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    static validateActivityId(flowElements) {
        for (const k in flowElements) {
            switch (flowElements[k].ClrTypeID) {
                case 'wf.StartActivity':
                    /** @type {?} */
                    const startActivity = (/** @type {?} */ (flowElements[k]));
                    if (!startActivity.Id.startsWith('startActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${startActivity.Name}` + this.localePipe.instant('validate.noStartActivity')
                        };
                    }
                    break;
                case 'bpmn.ExclusiveGateway':
                    /** @type {?} */
                    const exclusiveGateway = (/** @type {?} */ (flowElements[k]));
                    if (!exclusiveGateway.Id.startsWith('ExclusiveGateway')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${exclusiveGateway.Name}` + this.localePipe.instant('validate.noExclusiveGateway')
                        };
                    }
                    break;
                case 'bpmn.ParallelGateway':
                    /** @type {?} */
                    const parallelGateway = (/** @type {?} */ (flowElements[k]));
                    if (!parallelGateway.Id.startsWith('ParallelGateway')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${parallelGateway.Name}` + this.localePipe.instant('validate.noParallelGateway')
                        };
                    }
                    break;
                case 'wf.UserActivity':
                    /** @type {?} */
                    const userActivity = (/** @type {?} */ (flowElements[k]));
                    if (!userActivity.Id.startsWith('UserActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${userActivity.Name}` + this.localePipe.instant('validate.noUserActivity')
                        };
                    }
                    break;
                case 'wf.OperationActivity':
                    /** @type {?} */
                    const operationActivity = (/** @type {?} */ (flowElements[k]));
                    if (!operationActivity.Id.startsWith('UserActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${operationActivity.Name}` + this.localePipe.instant('validate.noOperationActivity')
                        };
                    }
                    break;
                case 'wf.NotifyActivity':
                    /** @type {?} */
                    const notifyActivity = (/** @type {?} */ (flowElements[k]));
                    if (!notifyActivity.Id.startsWith('NotifyActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${notifyActivity.Name}` + this.localePipe.instant('validate.noNotifyActivity')
                        };
                    }
                    break;
                case 'wf.CallActivitySubProcess':
                    /** @type {?} */
                    const callActivitySubProcess = (/** @type {?} */ (flowElements[k]));
                    if (!callActivitySubProcess.Id.startsWith('CallActivitySubProcess')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${callActivitySubProcess.Name}` + this.localePipe.instant('validate.noCallActivitySubProcess')
                        };
                    }
                    break;
                case 'wf.AutoActivity':
                    /** @type {?} */
                    const autoActivity = (/** @type {?} */ (flowElements[k]));
                    if (!autoActivity.Id.startsWith('autoActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${autoActivity.Name}` + this.localePipe.instant('validate.noAutoActivity')
                        };
                    }
                    break;
                case 'wf.IntermediateCatchEventImpl':
                    /** @type {?} */
                    const intermediateCatchEventImpl = (/** @type {?} */ (flowElements[k]));
                    if (!intermediateCatchEventImpl.Id.startsWith('IntermediateCatchEvent')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${intermediateCatchEventImpl.Name}` + this.localePipe.instant('validate.noIntermediateCatchEvent')
                        };
                    }
                    break;
                case 'wf.MessageActivity':
                    /** @type {?} */
                    const messageActivity = (/** @type {?} */ (flowElements[k]));
                    if (!messageActivity.Id.startsWith('MessageActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${messageActivity.Name}` + this.localePipe.instant('validate.noMessageActivity')
                        };
                    }
                    break;
                case 'wf.AifCreationBillActivity':
                    /** @type {?} */
                    const aifCreationBillActivity = (/** @type {?} */ (flowElements[k]));
                    if (!aifCreationBillActivity.Id.startsWith('AifCreationBillActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${aifCreationBillActivity.Name}` + this.localePipe.instant('validate.noAifCreationBillActivity')
                        };
                    }
                    break;
                case 'bpmn.EndEvent':
                    /** @type {?} */
                    const endEvent = (/** @type {?} */ (flowElements[k]));
                    if (!endEvent.Id.startsWith('EndEvent')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${endEvent.Name}` + this.localePipe.instant('validate.noEndEvent')
                        };
                    }
                    break;
            }
        }
        return {
            valid: true,
        };
    }
    /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    static validateActivityName(flowElements) {
        for (const k in flowElements) {
            /** @type {?} */
            const flowNode = flowElements[k];
            switch (flowNode.ClrTypeID) {
                case "wf.StartActivity":
                case "bpmn.ExclusiveGateway":
                case "bpmn.ParallelGateway":
                case "wf.UserActivity":
                case "wf.OperationActivity":
                case "wf.NotifyActivity":
                case "wf.CallActivitySubProcess":
                case "wf.AutoActivity":
                case "wf.IntermediateCatchEventImpl":
                case "wf.MessageActivity":
                case "wf.AifCreationBillActivity":
                case "bpmn.EndEvent":
                    if (flowNode.Name == null || flowNode.Name == "") {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.mark') +
                                `${flowNode.Id}` + this.localePipe.instant('validate.noFlowNodeChsName')
                        };
                    }
                    if (new Blob([flowNode.Name]).size > 128) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${flowNode.Name}` + this.localePipe.instant('validate.nameExceedsLengthLimit')
                        };
                    }
                    break;
            }
            ;
        }
        return {
            valid: true,
        };
    }
}
WfValidatorAdapter.localePipe = null;
if (false) {
    /** @type {?} */
    WfValidatorAdapter.localePipe;
}
//# sourceMappingURL=data:application/json;base64,