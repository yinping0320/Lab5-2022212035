/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Graph } from "@edp-pmf/grapheditor";
import { FlowNodeState } from "@edp-pmf/bpmn-model";
import { mxConstants, mxUtils } from "@edp-pmf/mxgraph-ts";
import { WfProcessCell } from "./wf-cell/WfProcessCell";
/**
 * 工作流画布类
 */
export class WfGraph extends Graph {
    /**
     * @param {?} editorUi
     * @param {?=} container
     * @param {?=} model
     * @param {?=} renderHint
     * @param {?=} stylesheet
     * @param {?=} themes
     */
    constructor(editorUi, container, model, renderHint, stylesheet, themes) {
        super(editorUi, container, model, renderHint, stylesheet, themes);
        this.localePipe = null;
        /**
         * 流程元素实例
         */
        this.processCell = new WfProcessCell();
    }
    /**
     * @param {?} cells
     * @param {?} sender
     * @param {?} eventObject
     * @return {?}
     */
    bpmnCellsSelectionChanged(cells, sender, eventObject) {
        super.bpmnCellsSelectionChanged(cells, sender, eventObject);
        // 修改选中节点样式
        /** @type {?} */
        const selected = (/** @type {?} */ (this.getSelectionCells()));
        /** @type {?} */
        const all = (/** @type {?} */ (this.getChildVertices(this.getDefaultParent())));
        all.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            if (selected.includes(c) && c.imgUrls && c.imgUrls[FlowNodeState.Selected]) {
                c.setStyle(mxUtils.setStyle(c.getStyle(), mxConstants.STYLE_IMAGE, c.imgUrls[FlowNodeState.Selected]));
            }
            else {
                c.setStyle(mxUtils.setStyle(c.getStyle(), mxConstants.STYLE_IMAGE, c.imgUrls[FlowNodeState.Default]));
            }
            this.refresh(c);
        }));
    }
    /**
     * 重写创建流程元素实例方法
     * @param {?} bpmnModel
     * @return {?}
     */
    createProcessCell(bpmnModel) {
        /** @type {?} */
        const processCell = new WfProcessCell();
        processCell.process = bpmnModel.DefaultProcess;
        processCell.plane = bpmnModel.DefaultDiagram.BpmnPlane;
        processCell.editorUi = this.editorUi;
        return processCell;
    }
    /**
     * 给定新流程信息创建BpmnModel
     * @param {?} newProcInfo
     * @param {?} bizCmps
     * @return {?}
     */
    createBpmnModelWithProcInfo(newProcInfo, bizCmps) {
        /** @type {?} */
        const bpmnModel = this.createBpmnModel();
        this.bpmnModel = bpmnModel;
        this.processCell = this.createProcessCell(this.bpmnModel);
        if (this.editorUi.langCode === 'zh-CHS') {
            this.bpmnModel.DefaultProcess.Name = newProcInfo.name || bpmnModel.DefaultProcess.Name;
        }
        this.bpmnModel.DefaultProcess.NameLanguage = {
            [this.editorUi.langCode]: newProcInfo.name || bpmnModel.DefaultProcess.Name,
        };
        //设置流程Header(业务对象ID、流程分类ID)
        this.processCell.setProcessHeader(newProcInfo.ffId, newProcInfo.bizObjId, newProcInfo.ffName, (/** @type {?} */ (newProcInfo.startMode)));
        // 基于流程分类绑定参数，流程构件，流程表单
        this.processCell.updateFlowFormInfo(newProcInfo.formalParameters, newProcInfo.processBizComponnets, newProcInfo.executeForms, newProcInfo.customizeActions, bizCmps);
        this.processCell.modifyProcessTitleExpression(newProcInfo.processDescription);
    }
    /**
     * @return {?}
     */
    setDefaultStyles() {
        super.setDefaultStyles();
        /** @type {?} */
        const styleSheet = this.getStylesheet();
        // 连线样式默认为正交
        /** @type {?} */
        const edgeStyle = styleSheet.getDefaultEdgeStyle();
        edgeStyle[mxConstants.STYLE_ROUNDED] = 1;
    }
}
if (false) {
    /** @type {?} */
    WfGraph.prototype.localePipe;
    /** @type {?} */
    WfGraph.prototype.editorUi;
    /**
     * 流程元素实例
     * @type {?}
     */
    WfGraph.prototype.processCell;
}
//# sourceMappingURL=data:application/json;base64,