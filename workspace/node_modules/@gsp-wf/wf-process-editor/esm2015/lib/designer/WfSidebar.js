/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Sidebar, BpmnCellHelper } from "@edp-pmf/grapheditor";
import { UserActivity } from "@gsp-wf/wf-process-model";
import { mxGeometry, mxResources } from "@edp-pmf/mxgraph-ts";
import { WfConstants } from "./WfConstants";
export class WfSidebar extends Sidebar {
    constructor() {
        super(...arguments);
        this.bizActivities = [];
    }
    /**
     * 添加业务活动面板
     * @param {?} bizActivities
     * @return {?}
     */
    addBizActPalette(bizActivities) {
        //如果添加了业务活动面板，需要先移除
        if (this.palettes["bizactivitylib"]) {
            this.container.removeChild(this.palettes["bizactivitylib"][0]);
            this.container.removeChild(this.palettes["bizactivitylib"][1]);
            delete this.palettes["bizactivitylib"];
        }
        this.bizActivities = bizActivities;
        /** @type {?} */
        let bizActFactories = new Array();
        //添加业务活动
        this.bizActivities && this.bizActivities.forEach((/**
         * @param {?} activity
         * @return {?}
         */
        (activity) => {
            /** @type {?} */
            const style = 'image=' + WfConstants.IMAGE_PATH + '/bizActivity.png;';
            /** @type {?} */
            const cell = (/** @type {?} */ (BpmnCellHelper.generate(UserActivity.Clr_Type_ID, undefined, new mxGeometry(0, 0, this.defaultImageWidth, this.defaultImageHeight), style)));
            cell.name = activity.name;
            cell.bizActivity = activity;
            bizActFactories.push(this.createItemFactory([cell], cell.name, this.defaultImageWidth, this.defaultImageHeight));
        }));
        if (bizActFactories.length > 0) {
            this.addPaletteFunctions('bizactivitylib', mxResources.get('bizactivitylib'), true, bizActFactories);
        }
    }
}
if (false) {
    /** @type {?} */
    WfSidebar.prototype.bizActivities;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ZTaWRlYmFyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9kZXNpZ25lci9XZlNpZGViYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUErQixNQUFNLHNCQUFzQixDQUFDO0FBQzVGLE9BQU8sRUFBZSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFxQyxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVDLE1BQU0sT0FBTyxTQUFVLFNBQVEsT0FBTztJQUF0Qzs7UUFDSSxrQkFBYSxHQUFrQixFQUFFLENBQUM7SUE0QnRDLENBQUM7Ozs7OztJQXZCRyxnQkFBZ0IsQ0FBQyxhQUE0QjtRQUN6QyxtQkFBbUI7UUFDbkIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDMUM7UUFDRCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQzs7WUFDL0IsZUFBZSxHQUFHLElBQUksS0FBSyxFQUEyQjtRQUMxRCxRQUFRO1FBQ1IsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLFFBQXFCLEVBQUUsRUFBRTs7a0JBQ2pFLEtBQUssR0FBRyxRQUFRLEdBQUcsV0FBVyxDQUFDLFVBQVUsR0FBRyxtQkFBbUI7O2tCQUMvRCxJQUFJLEdBQUcsbUJBQUEsY0FBYyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBb0I7WUFDM0ssSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO1lBRTVCLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUNySCxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDekc7SUFDTCxDQUFDO0NBQ0o7OztJQTVCRyxrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWRlYmFyLCBCcG1uQ2VsbEhlbHBlciwgR3JhcGgsIFBtZkV2ZW50cywgSUVkaXRvclVpIH0gZnJvbSBcIkBlZHAtcG1mL2dyYXBoZWRpdG9yXCI7XHJcbmltcG9ydCB7IEJpekFjdGl2aXR5LCBVc2VyQWN0aXZpdHkgfSBmcm9tIFwiQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsXCI7XHJcbmltcG9ydCB7IG14R2VvbWV0cnksIE14R3JhcGhOUywgbXhFdmVudCwgbXhFdmVudE9iamVjdCwgbXhSZXNvdXJjZXMgfSBmcm9tIFwiQGVkcC1wbWYvbXhncmFwaC10c1wiO1xyXG5pbXBvcnQgeyBVc2VyQWN0aXZpdHlDZWxsIH0gZnJvbSBcIi4vd2YtY2VsbC9Vc2VyQWN0aXZpdHlDZWxsXCI7XHJcbmltcG9ydCB7IFdmQ29uc3RhbnRzIH0gZnJvbSBcIi4vV2ZDb25zdGFudHNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBXZlNpZGViYXIgZXh0ZW5kcyBTaWRlYmFyIHtcclxuICAgIGJpekFjdGl2aXRpZXM6IEJpekFjdGl2aXR5W10gPSBbXTtcclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5Lia5Yqh5rS75Yqo6Z2i5p2/XHJcbiAgICAgKiBAcGFyYW0gYml6QWN0aXZpdGllcyBcclxuICAgICAqL1xyXG4gICAgYWRkQml6QWN0UGFsZXR0ZShiaXpBY3Rpdml0aWVzOiBCaXpBY3Rpdml0eVtdKTogdm9pZCB7XHJcbiAgICAgICAgLy/lpoLmnpzmt7vliqDkuobkuJrliqHmtLvliqjpnaLmnb/vvIzpnIDopoHlhYjnp7vpmaRcclxuICAgICAgICBpZiAodGhpcy5wYWxldHRlc1tcImJpemFjdGl2aXR5bGliXCJdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMucGFsZXR0ZXNbXCJiaXphY3Rpdml0eWxpYlwiXVswXSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMucGFsZXR0ZXNbXCJiaXphY3Rpdml0eWxpYlwiXVsxXSk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBhbGV0dGVzW1wiYml6YWN0aXZpdHlsaWJcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYml6QWN0aXZpdGllcyA9IGJpekFjdGl2aXRpZXM7XHJcbiAgICAgICAgbGV0IGJpekFjdEZhY3RvcmllcyA9IG5ldyBBcnJheTwoKSA9PiBIVE1MQW5jaG9yRWxlbWVudD4oKTtcclxuICAgICAgICAvL+a3u+WKoOS4muWKoea0u+WKqFxyXG4gICAgICAgIHRoaXMuYml6QWN0aXZpdGllcyAmJiB0aGlzLmJpekFjdGl2aXRpZXMuZm9yRWFjaCgoYWN0aXZpdHk6IEJpekFjdGl2aXR5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gJ2ltYWdlPScgKyBXZkNvbnN0YW50cy5JTUFHRV9QQVRIICsgJy9iaXpBY3Rpdml0eS5wbmc7JztcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IEJwbW5DZWxsSGVscGVyLmdlbmVyYXRlKFVzZXJBY3Rpdml0eS5DbHJfVHlwZV9JRCwgdW5kZWZpbmVkLCBuZXcgbXhHZW9tZXRyeSgwLCAwLCB0aGlzLmRlZmF1bHRJbWFnZVdpZHRoLCB0aGlzLmRlZmF1bHRJbWFnZUhlaWdodCksIHN0eWxlKSBhcyBVc2VyQWN0aXZpdHlDZWxsO1xyXG4gICAgICAgICAgICBjZWxsLm5hbWUgPSBhY3Rpdml0eS5uYW1lO1xyXG4gICAgICAgICAgICBjZWxsLmJpekFjdGl2aXR5ID0gYWN0aXZpdHk7XHJcblxyXG4gICAgICAgICAgICBiaXpBY3RGYWN0b3JpZXMucHVzaCh0aGlzLmNyZWF0ZUl0ZW1GYWN0b3J5KFtjZWxsXSwgY2VsbC5uYW1lLCB0aGlzLmRlZmF1bHRJbWFnZVdpZHRoLCB0aGlzLmRlZmF1bHRJbWFnZUhlaWdodCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoYml6QWN0RmFjdG9yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRQYWxldHRlRnVuY3Rpb25zKCdiaXphY3Rpdml0eWxpYicsICBteFJlc291cmNlcy5nZXQoJ2JpemFjdGl2aXR5bGliJyksIHRydWUsIGJpekFjdEZhY3Rvcmllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19