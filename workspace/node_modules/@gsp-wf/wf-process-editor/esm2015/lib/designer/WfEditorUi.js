/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EditorUi, ActionKeys, ToolboxGroup, ToolboxItem } from "@edp-pmf/grapheditor";
import { WfGraph } from "./WfGraph";
import { ProcessHeader, UserActivity, OperationActivity } from "@gsp-wf/wf-process-model";
import { WfSidebar } from "./WfSidebar";
import { WfConstants } from "./WfConstants";
import { mxEvent, mxResources } from "@edp-pmf/mxgraph-ts";
import { UserActivityPropertyKeys } from "./wf-cell/property-keys/UserActivityPropertyKeys";
import { WfExclusiveGatewayCell } from "./wf-cell/WfExclusiveGatewayCell";
import { AifCreationBillActivityCell } from "./wf-cell/AifCreationBillActivityCell";
import { AutoActivityCell } from "./wf-cell/AutoActivityCell";
import { CallActivitySubProcessCell } from "./wf-cell/CallActivitySubProcessCell";
import { IntermediateCatchEventImplCell } from "./wf-cell/IntermediateCatchEventImplCell";
import { MessageActivityCell } from "./wf-cell/MessageActivityCell";
import { NotifyActivityCell } from "./wf-cell/NotifyActivityCell";
import { OperationActivityCell } from "./wf-cell/OperationActivityCell";
import { StartActivityCell } from "./wf-cell/StartActivityCell";
import { UserActivityCell } from "./wf-cell/UserActivityCell";
import { WfParallelGatewayCell } from "./wf-cell/WfParallelGatewayCell";
import { WfEndEventCell } from "./wf-cell/WfEndEventCell";
import { WfInclusiveGatewayCell } from "./wf-cell/WfInclusiveGatewayCell";
import { BatchSetPropertiesComponent } from "../views/batch-set-properties/batch-set-properties.component";
export class WfEditorUi extends EditorUi {
    /**
     * @param {?} time
     * @param {?} action
     * @param {?=} container
     * @param {?=} injector
     * @param {?=} modalService
     * @param {?=} resolver
     * @param {?=} eventSource
     * @param {?=} importLinks
     */
    constructor(time, action, container, injector, modalService, resolver, eventSource, importLinks = true) {
        super(container, eventSource, importLinks);
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.generalConfig = {
            enableTransfer: true,
            enableNotify: false,
            enableAddSignBehind: false,
            enableAddSignFront: false,
        };
        /** @type {?} */
        let rootPath = '';
        try {
            rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
        mxResources.add(rootPath + "/platform/runtime/common/web/@gsp-wf/wf-process-editor/resources/wf-process-editor");
        this.showToolbar = false;
        this.time = time;
        this.action = action;
    }
    /**
     * @return {?}
     */
    createActions() {
        /** @type {?} */
        const actions = super.createActions();
        // 只有设计时编辑状态下才启用删除动作
        if (!(this.action === 'edit' && this.time !== 'rt')) {
            /** @type {?} */
            const deleteAction = actions.getAction(ActionKeys.pmf_delete);
            deleteAction.isEnabled = (/**
             * @return {?}
             */
            () => false);
        }
        return actions;
    }
    /**
     * @return {?}
     */
    createToolbox() {
        /** @type {?} */
        const toolbox = super.createToolbox();
        /** @type {?} */
        const g1 = new ToolboxGroup();
        g1.name = mxResources.get('basicElements');
        g1.items.push(new ToolboxItem(StartActivityCell.CLR_TYPE_ID), new ToolboxItem(WfExclusiveGatewayCell.CLR_TYPE_ID), new ToolboxItem(WfParallelGatewayCell.CLR_TYPE_ID), 
        // 暂时隐藏包容网关
        new ToolboxItem(WfInclusiveGatewayCell.CLR_TYPE_ID), new ToolboxItem(UserActivityCell.CLR_TYPE_ID), new ToolboxItem(OperationActivityCell.CLR_TYPE_ID), new ToolboxItem(NotifyActivityCell.CLR_TYPE_ID), new ToolboxItem(CallActivitySubProcessCell.CLR_TYPE_ID), new ToolboxItem(AutoActivityCell.CLR_TYPE_ID), new ToolboxItem(IntermediateCatchEventImplCell.CLR_TYPE_ID), new ToolboxItem(MessageActivityCell.CLR_TYPE_ID), new ToolboxItem(AifCreationBillActivityCell.CLR_TYPE_ID), new ToolboxItem(WfEndEventCell.CLR_TYPE_ID));
        toolbox.groups = [g1];
        return toolbox;
    }
    /**
     * @return {?}
     */
    createGraphInstance() {
        /** @type {?} */
        const graph = new WfGraph(this, this.diagramContainer);
        if (this.action === 'view' || this.time === 'rt' || this.action === 'assignView') {
            graph.setCellsLocked(true);
        }
        else {
            graph.setDropEnabled(true);
            graph.setConnectable(true);
        }
        //TODO：右键查看只显示在审批节点上
        graph.popupMenuHandler.autoExpand = true;
        graph.popupMenuHandler.factoryMethod = (/**
         * @param {?} menu
         * @param {?} cell
         * @param {?} evt
         * @return {?}
         */
        (menu, cell, evt) => {
            /** @type {?} */
            const actList = graph.getChildCells(graph.getDefaultParent());
            if (cell != null
                && cell.clrTypeId.indexOf('wf.UserActivity') > -1
                && actList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === cell.getId())) > -1) {
                menu.addItem('批量复制属性', null, (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const compFactory = this.resolver.resolveComponentFactory(BatchSetPropertiesComponent);
                    /** @type {?} */
                    const compRef = compFactory.create(this.injector);
                    compRef.instance.activityModel = cell.flowElement;
                    /** @type {?} */
                    const modalConfig = {
                        title: '批量复制属性',
                        width: 512,
                        height: 465,
                        showButtons: true,
                        buttons: compRef.instance.footer
                    };
                    /** @type {?} */
                    const dialog = this.modalService.show(compRef, modalConfig);
                    compRef.instance.cancel.subscribe((/**
                     * @param {?} $event
                     * @return {?}
                     */
                    $event => dialog.close()));
                    compRef.instance.submit.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        dialog.close();
                    }));
                }));
            }
        });
        return graph;
    }
    /**
     * @return {?}
     */
    createSidebar() {
        return new WfSidebar(this, this.sidebarContainer);
    }
    /**
     * @return {?}
     */
    show() {
        super.show();
        if (this.action === 'view' || this.action === 'assignView') {
            /** @type {?} */
            const span = this.createSpan('');
            span.style.fontSize = '14px';
            span.style.color = 'white';
            span.style.borderRadius = '20px';
            span.style.padding = '4px 20px';
            span.style.background = 'rgb(199, 194, 187)';
            /** @type {?} */
            const v = document.createTextNode(mxResources.get('readOnly'));
            span.appendChild(v);
            /** @type {?} */
            const d = this.createDiv('');
            d.style.position = 'absolute';
            d.style.top = '10px';
            d.style.right = '10px';
            d.style.zIndex = "2";
            d.appendChild(span);
            this.container.appendChild(d);
        }
        /** @type {?} */
        const buttonIn = document.createElement('a');
        buttonIn.setAttribute('href', 'javascript:void(0);');
        /** @type {?} */
        let buttonInImg = document.createElement('img');
        buttonIn.style.marginRight = '10px';
        buttonInImg.src = WfConstants.IMAGE_PATH + '/zoomIn.svg';
        buttonInImg.style.display = "inline-block";
        buttonInImg.style.verticalAlign = "middle";
        buttonIn.appendChild(buttonInImg);
        mxEvent.addListener(buttonIn, 'click', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.actions.getAction(ActionKeys.pmf_zoomIn).execute(evt);
        }));
        /** @type {?} */
        const buttonOut = document.createElement('a');
        buttonOut.setAttribute('href', 'javascript:void(0);');
        /** @type {?} */
        let buttonOutImg = document.createElement('img');
        buttonOutImg.src = WfConstants.IMAGE_PATH + '/zoomOut.svg';
        buttonOutImg.style.display = "inline-block";
        buttonOutImg.style.verticalAlign = "middle";
        buttonOut.appendChild(buttonOutImg);
        mxEvent.addListener(buttonOut, 'click', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.actions.getAction(ActionKeys.pmf_zoomOut).execute(evt);
        }));
        /** @type {?} */
        const zoomBar = this.createDiv('zoomBar');
        zoomBar.style.position = 'absolute';
        zoomBar.style.zIndex = "2";
        /** @type {?} */
        let t = 10;
        if (this.showMenubar) {
            t += this.menubarHeight;
        }
        if (this.showToolbar) {
            t += this.toolbarHeight;
        }
        zoomBar.style.top = t + 'px';
        zoomBar.style.left = (this.showSidebar ? this.sidebarSplitPosition + this.sidebarSplitSize : 0) + 10 + "px";
        zoomBar.appendChild(buttonIn);
        zoomBar.appendChild(buttonOut);
        this.container.appendChild(zoomBar);
        this.zoomBar = zoomBar;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    sidebarSplitOnChange(value) {
        super.sidebarSplitOnChange(value);
        // 分割条移动后更新缩放条位置
        if (this.zoomBar) {
            this.zoomBar.style.left = (this.showSidebar ? this.sidebarSplitPosition + this.sidebarSplitSize : 0) + 10 + "px";
        }
    }
    /**
     * 创建带指定样式类的span
     * @param {?} classname
     * @return {?}
     */
    createSpan(classname) {
        /** @type {?} */
        let elt = document.createElement('span');
        elt.className = classname;
        return elt;
    }
    /**
     * 加载业务活动
     * @param {?} bizActivities
     * @return {?}
     */
    loadBizActivities(bizActivities) {
        this.sidebar && this.sidebar.addBizActPalette(bizActivities);
    }
    /**
     * 批量复制属性
     * @param {?} obj
     * @return {?}
     */
    batchCopyProperty(obj) {
        // 放弃不需要的参数
        /** @type {?} */
        const ids = obj.value.targetNodeID;
        obj.propertyValue = obj.value.messageNotice;
        // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
        obj.propertyID = UserActivityPropertyKeys.messageNotice;
        for (const id of ids) {
            /** @type {?} */
            const cell = this.graph.getCellByFlowElementId(id);
            if (cell) {
                cell.updateProps(obj);
                this.graph.refresh();
            }
        }
    }
    /**
     * 批量设置属性
     * @param {?} obj
     * @return {?}
     */
    batchSetProperty(obj) {
        for (const v of obj) {
            switch (v.type) {
                case 'addSignfront':
                    /** @type {?} */
                    const afId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.AddSignFrontAble;
                    for (const id of afId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                case 'addSignBehind':
                    /** @type {?} */
                    const abId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.AddSignBehindAble;
                    for (const id of abId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                case 'transfer':
                    /** @type {?} */
                    const trId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.transferScope;
                    for (const id of trId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                case 'notify':
                    /** @type {?} */
                    const ntId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.NotifyAble;
                    for (const id of ntId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                // 驳回规则需要特殊处理：子流程和信号的赋简版
                case 'backWardRule':
                    /** @type {?} */
                    const bwId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.BackWardRule;
                    for (const id of bwId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
            }
        }
    }
    /**
     * 创建新流程
     * @param {?} newProcInfo
     * @param {?=} bizCmps
     * @return {?}
     */
    createBpmnModel(newProcInfo, bizCmps) {
        this.graph.createBpmnModelWithProcInfo(newProcInfo, bizCmps);
    }
    /**
     * 打开流程
     * @param {?} content
     * @return {?}
     */
    openBpmnModel(content) {
        this.graph.loadBpmnModel(content);
    }
    /**
     * 获取属性配置，刷新属性框
     * @param {?} obj
     * @return {?}
     */
    refreshProperty(obj) {
        /** @type {?} */
        const cell = this.graph.getCellByFlowElementId(obj.Id);
        return this.getFarrisPropConfig([cell]);
    }
    /**
     * 获取用户活动
     * @return {?}
     */
    getActivities() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === UserActivity.Clr_Type_ID
                || flowElt.ClrTypeID === OperationActivity.Clr_Type_ID) {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取结束事件
     * @return {?}
     */
    getEndEvents() {
        /** @type {?} */
        const userActArray = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'bpmn.EndEvent' || flowElt.ClrTypeID === UserActivity.Clr_Type_ID
                || flowElt.ClrTypeID === OperationActivity.Clr_Type_ID) {
                userActArray.push(flowElt);
            }
        }));
        return userActArray;
    }
    /**
     * 获取知会事件
     * @return {?}
     */
    getNotifyEvents() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'wf.NotifyActivity') {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取消息事件
     * @return {?}
     */
    getMessageEvents() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'bpmn.MessageEvent') {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取子流程和信号捕获节点
     * @return {?}
     */
    getSubAndCatchEvents() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'wf.CallActivitySubProcess' ||
                flowElt.ClrTypeID === 'wf.IntermediateCatchEventImpl') {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取启动方式
     * @return {?}
     */
    getStartMode() {
        /** @type {?} */
        let startMode = null;
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (extendElements.length > 0) {
            for (const e of extendElements) {
                if (e instanceof ProcessHeader) {
                    startMode = e.startMode;
                }
            }
        }
        return startMode;
    }
}
if (false) {
    /** @type {?} */
    WfEditorUi.prototype.editor;
    /** @type {?} */
    WfEditorUi.prototype.graph;
    /** @type {?} */
    WfEditorUi.prototype.sidebar;
    /** @type {?} */
    WfEditorUi.prototype.time;
    /** @type {?} */
    WfEditorUi.prototype.bizCategoryId;
    /** @type {?} */
    WfEditorUi.prototype.action;
    /** @type {?} */
    WfEditorUi.prototype.mode;
    /** @type {?} */
    WfEditorUi.prototype.scene;
    /** @type {?} */
    WfEditorUi.prototype.procType;
    /** @type {?} */
    WfEditorUi.prototype.procExtProps;
    /** @type {?} */
    WfEditorUi.prototype.formFormats;
    /** @type {?} */
    WfEditorUi.prototype.generalConfig;
    /** @type {?} */
    WfEditorUi.prototype.zoomBar;
    /**
     * @type {?}
     * @private
     */
    WfEditorUi.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WfEditorUi.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    WfEditorUi.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,