/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Injector, ComponentFactoryResolver, HostBinding, Output, EventEmitter, TemplateRef, ViewContainerRef, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { ProcessTime } from './model/process-time';
import { ProcessDesignerUIState } from './app/process-designer.uistate';
import { ProcessDesignerViewModel } from './app/process-designer.viewmodel';
import { ExecuteFormModel, TerminalType } from './views/execute-forms/entities/execute-form.entity';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDesignerDataService } from './domain/process-designer.dataservice';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { WFFlowElementsViewModel } from './app/wf-flowElements.viewModel';
import { PropertyPanelComponent, ShowMode } from '@farris/ide-property-panel';
import { SignRuleComponent } from './views/sign-rule/sign-rule.component';
import { ProcessInfo } from './model/process-info';
import { RTProcessInfo } from './model/rt-process-info';
import { forkJoin, of } from 'rxjs';
import { AuditEvent } from './domain/entities/audit-processDef-info';
import { NoteComponent } from './views/note/note.component';
import { ProcessDeUtil } from './domain/process-de-util';
import { EventBusService } from './views/shared/event-bus.service';
import { VerifyDetailService } from '@farris/ui-verify-detail';
import { AssignScopeComponent } from './views/assign-scope/assign-scope.component';
import { WfEditorUi } from './designer/WfEditorUi';
import { PmfEvents } from "@edp-pmf/grapheditor";
import { BpmnModel } from "@edp-pmf/bpmn-model";
import { mxEvent } from "@edp-pmf/mxgraph-ts";
import { WfValidatorAdapter } from "./designer/WfValidatorAdapter";
import { ProcessHeader, StartMode } from "@gsp-wf/wf-process-model";
import { EventBusKeys } from './model/event-bus-keys';
import { ProcessPropertyKeys } from './designer/wf-cell/property-keys/ProcessPropertyKeys';
import { UserActivityPropertyKeys } from './designer/wf-cell/property-keys/UserActivityPropertyKeys';
import { MessageActivityPropertyKeys } from './designer/wf-cell/property-keys/MessageActivityPropertyKeys';
import { NotifyActivityPropertyKeys } from './designer/wf-cell/property-keys/NotifyActivityPropertyKeys';
import { delay, switchMap } from 'rxjs/operators';
import { WF_LANG_RESOURCES, WfLocalePipe } from './i18n/pipe/wf-process-editor-locale.pipe';
import { WF_PROCESS_EDITOR_LANG_RESOURCES } from './i18n/assets/lang.resource';
import { BatchSetPropertiesComponent } from './views/batch-set-properties/batch-set-properties.component';
const ɵ0 = WF_PROCESS_EDITOR_LANG_RESOURCES;
export class WfProcessEditorComponent {
    /**
     * @param {?} uiState
     * @param {?} viewModel
     * @param {?} service
     * @param {?} loadService
     * @param {?} notify
     * @param {?} message
     * @param {?} activity
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} eventBus
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uiState, viewModel, service, loadService, notify, message, activity, injector, modalService, resolver, eventBus, cdr, localeId, resources, localePipe) {
        this.uiState = uiState;
        this.viewModel = viewModel;
        this.service = service;
        this.loadService = loadService;
        this.notify = notify;
        this.message = message;
        this.activity = activity;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.eventBus = eventBus;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.flag = true;
        this.cls = 'farris-main-area flex-column';
        this.action = 'edit';
        this.mode = 'general';
        this.procType = "wf";
        this.close = new EventEmitter();
        this.errorList = [];
        this.tabTypeList = [
            {
                id: 'processWarning',
                type: 'processWarning',
                title: this.localePipe.instant("processEditor.tip"),
                iconCls: 'f-icon-default',
                iconStyle: 'color:#f49730;'
            }
        ];
        this.panelWidth = 330;
        this.propertyPanelResizable = true;
        this.rightPanelWidth = 330; // 右侧面板宽度
        // localeId: string = "zh-CHS";
        /**
         * 界面是否发生变化标志，修改属性、移动节点等均会将此值设为true
         */
        this.changedFlag = false;
        this.showModelButton = false;
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.cdr = this.cdr || this.injector.get(ChangeDetectorRef, null);
        this.verifySer = this.injector.get(VerifyDetailService);
        this.localeId = this.injector.get(LOCALE_ID, null) || this.localeId;
        WfValidatorAdapter.localePipe = this.localePipe;
        forkJoin(this.uiState.getEnableAdminOrgAut(), this.uiState.getEnableFlowFormAut()).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            this.uiState.enableAdminOrgAut = re[0];
            this.uiState.enableFlowFormAut = re[1];
            if (!this.uiState.enableAdminOrgAut) {
                this.uiState.getAdministratorInfo();
            }
        }));
    }
    /**
     * @param {?} t
     * @return {?}
     */
    set time(t) {
        this._time = t;
        this.uiState.time = t;
    }
    /**
     * @return {?}
     */
    get time() {
        return this._time;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set scene(v) {
        this.uiState.scene = v;
    }
    /**
     * @return {?}
     */
    get scene() {
        return this.uiState.scene;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.procNameTitle = this.processInfo ? this.processInfo.processName : this.rtProcessInfo.procName;
        if (this.rtProcessInfo && this.rtProcessInfo.rtProcDefId) {
            this.uiState.procDefId = this.rtProcessInfo.rtProcDefId;
        }
        this.addEventBusListener();
        this.uiState.initUIState();
        this.showLoading();
        this.addPropertyChangedHandler();
        // 获取消息列表
        this.uiState.getMessageChannels();
        focus();
        document.body.addEventListener('keydown', (/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            if (!this.showModelButton && n.shiftKey && 'Slash' === n.code) {
                this.showModelButton = true;
                this.notify.success(this.localePipe.transform("processEditor.showButton"));
                this.viewProcModel();
            }
        }));
        this.cdr && this.cdr.detectChanges();
        this.createEditorUi();
    }
    /**
     * @return {?}
     */
    createEditorUi() {
        this.service.getGeneralConfig().subscribe((/**
         * @param {?} generalConfig
         * @return {?}
         */
        (generalConfig) => {
            /** @type {?} */
            const processCategoryId = this._time === ProcessTime.rt ? this.rtProcessInfo.flowFormId : this.processInfo.flowFormId;
            this.viewModel.getProcessCategory(processCategoryId).subscribe((/**
             * @param {?} procCategory
             * @return {?}
             */
            (procCategory) => {
                /** @type {?} */
                const bizCategoryId = this._time === ProcessTime.dt ? procCategory.businessObjectId : undefined;
                this.service.getFormFormat(bizCategoryId).pipe(switchMap((/**
                 * @param {?} formFormats
                 * @return {?}
                 */
                (formFormats) => {
                    this.cdr && this.cdr.detectChanges();
                    this.editorUi = new WfEditorUi(this._time, this.action, this.editorUiContainerER.nativeElement, this.injector, this.modalService, this.resolver);
                    this.editorUi.multiLangEnabled = true;
                    this.editorUi.langCode = this.localeId;
                    this.editorUi.bizCategoryId = bizCategoryId;
                    this.editorUi.mode = this.mode;
                    this.editorUi.scene = this.uiState.scene;
                    this.editorUi.procType = this.procType;
                    this.editorUi.generalConfig = generalConfig;
                    this.editorUi.formFormats = formFormats;
                    return of({});
                })))
                    // 2023-5-30 为了解决网络较差场景下的加载问题修改了加载顺序
                    .pipe(delay(200))
                    .subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.openProcContent();
                }));
            }));
        }));
    }
    /**
     * @param {?} editorUi
     * @return {?}
     */
    addEditorUiListeners(editorUi) {
        editorUi.addListener(PmfEvents.ShowProperty, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            /** @type {?} */
            const cells = evt.getProperty("cells");
            this.viewModel.setProperty(this.editorUi.getFarrisPropConfig(cells));
        }));
        // 工具箱节点拖动至画布后更新
        editorUi.graph.addListener(PmfEvents.CellsInserted, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            this.uiState.getUserActList(this.editorUi.getActivities());
            this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
            this.uiState.getEndEventList(this.editorUi.getEndEvents());
        }));
        // 删除节点时触发更新
        editorUi.graph.addListener(mxEvent.CELLS_REMOVED, (/**
         * @return {?}
         */
        () => {
            this.uiState.getUserActList(this.editorUi.getActivities());
            this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
            this.uiState.getEndEventList(this.editorUi.getEndEvents());
        }));
    }
    /**
     * 添加事件总线监听
     * @private
     * @return {?}
     */
    addEventBusListener() {
        this.eventBus.on(EventBusKeys.batchCopyProperty, (/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                this.editorUi.batchCopyProperty(data);
            }
        }));
        this.eventBus.on(EventBusKeys.batchSetProperty, (/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                this.editorUi.batchSetProperty(data);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    addPropertyChangedHandler() {
        this.propertyPanel.propertyChanged.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty(data);
        }));
        this.propertyPanel.submitModal.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty(data.changeObject, data.parameters);
        }));
        return false; // 防止冒泡
    }
    /**
     * 更新属性
     * @private
     * @param {?} data
     * @param {?=} parameters
     * @return {?}
     */
    updateChangeProperty(data, parameters = null) {
        // 更新界面变更状态
        this.changedFlag = false;
        data.Id = this.uiState.propertyData.Id;
        if (parameters) {
            data.parameters = parameters;
        }
        switch (data.propertyID) {
            case ProcessPropertyKeys.EntryForm:
                this.bindEntryFormInfo(data);
                break;
            case UserActivityPropertyKeys.ApprovalItems:
                this.editorUi.updateProperty(data);
                this.activity.buildCounterSignVariables(data.propertyValue);
                break;
            case UserActivityPropertyKeys.CompleteStrategy:
                this.beforeCompleteStrategyChange(data).subscribe((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => {
                    if (b) {
                        this.editorUi.updateProperty(data);
                        this.completeStrategyChanged(data.propertyValue);
                    }
                    this.viewModel.setProperty(this.editorUi.refreshProperty(data));
                }));
                break;
            // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
            // case UserActivityPropertyKeys.otherAssignNodes:
            // case StartActivityPropertyKeys.otherAssignNodes:
            //   if (data.propertyValue) {
            //     this.editorUi.updateProperty(data);
            //     this.OtherAssignNodesChanged(data);
            //   } else {
            //     this.editorUi.updateProperty(data);
            //   }
            //   break;
            case UserActivityPropertyKeys.SignRule:
                this.editorUi.updateProperty(data);
                break;
            // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
            case ProcessPropertyKeys.messageNotice: // 消息通知
            case UserActivityPropertyKeys.messageNotice: // 消息通知
            case MessageActivityPropertyKeys.messageNotice: // 消息通知
            case NotifyActivityPropertyKeys.messageNotice: // 消息通知
                if (data.propertyValue.isBatchCopy) { // 是否是消息通知属性批量复制
                    this.editorUi.batchCopyProperty(data);
                    break;
                }
                this.editorUi.updateProperty(data);
                break;
            case ProcessPropertyKeys.startMode:
                this.updateStartMode(data);
                break;
            default:
                this.editorUi.updateProperty(data);
                break;
        }
        this.uiState.getUserActList(this.editorUi.getActivities());
        this.uiState.getEndEventList(this.editorUi.getEndEvents());
        this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
        this.uiState.getStartMode(this.editorUi.getStartMode());
        if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
            this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
        }
        else {
            this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => this.uiState.subProcessElementContext.some((/**
             * @param {?} y
             * @return {?}
             */
            y => y.key != x.key))));
        }
        this.viewModel.setProperty(this.editorUi.refreshProperty(data));
    }
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @private
     * @param {?} data
     * @return {?}
     */
    bindEntryFormInfo(data) {
        /** @type {?} */
        const flowformId = data.propertyValue.id;
        if (flowformId) {
            this.viewModel.getFlowFormInfoById(flowformId).subscribe((/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                data.flowForm = info.flowForm;
                data.formalParameters = info.formalParameters;
                data.processBizComponnets = info.bizComponents;
                data.executeForms = [];
                info.excuteForms.forEach((/**
                 * @param {?} form
                 * @return {?}
                 */
                form => {
                    if (form.isDefault) {
                        // 流程绑定默认单据
                        /** @type {?} */
                        const executeForms = this.ConvertExecuteForm(form);
                        data.executeForms = data.executeForms.concat(executeForms);
                    }
                }));
                data.customizeActions = info.customizeActions.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.isAll === true)).map((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => ({
                    id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                    actualParameters: a.actualParameters.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => ({
                        Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                    })))
                })));
                // 加载业务活动面板
                this.editorUi.loadBizActivities(info.bizActivities || []);
                this.service.getBizCmp().subscribe((/**
                 * @param {?} cmps
                 * @return {?}
                 */
                (cmps) => {
                    data.bizCmps = cmps;
                    this.editorUi.updateProperty(data);
                    this.uiState.getUserActList(this.editorUi.getActivities());
                    this.uiState.getEndEventList(this.editorUi.getEndEvents());
                    this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
                    this.uiState.getStartMode(this.editorUi.getStartMode());
                    if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
                    }
                    else {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => this.uiState.subProcessElementContext.some((/**
                         * @param {?} y
                         * @return {?}
                         */
                        y => y.key != x.key))));
                    }
                    this.viewModel.setProperty(this.editorUi.refreshProperty(data));
                }));
            }));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updateStartMode(data) {
        /** @type {?} */
        const bpmnModel = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            /** @type {?} */
            const procHeader = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof ProcessHeader))));
            /** @type {?} */
            let flowFormKey = procHeader[0].BizDefKey;
            this.service.getAllBizCmp(flowFormKey).subscribe((/**
             * @param {?} allBizCmps
             * @return {?}
             */
            (allBizCmps) => {
                this.service.getBizCmp().subscribe((/**
                 * @param {?} bizCmps
                 * @return {?}
                 */
                (bizCmps) => {
                    data.allBizCmps = allBizCmps;
                    data.bizCmps = bizCmps;
                    this.editorUi.updateProperty(data);
                    this.uiState.getUserActList(this.editorUi.getActivities());
                    this.uiState.getEndEventList(this.editorUi.getEndEvents());
                    this.uiState.getStartMode(this.editorUi.getStartMode());
                    if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
                    }
                    else {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => this.uiState.subProcessElementContext.some((/**
                         * @param {?} y
                         * @return {?}
                         */
                        y => y.key != x.key))));
                    }
                    this.viewModel.setProperty(this.editorUi.refreshProperty(data));
                }));
            }));
        }
    }
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    note(record) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(NoteComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.record = record;
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("processEditor.changeRecord"),
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            // 更新流程记录
            this.editorUi.graph.bpmnModel.DefaultProcess.Documentation = data;
            dialog.close();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    openProcContent() {
        if (this.time === ProcessTime.dt) {
            if (this.processInfo) {
                if (this.processInfo.processKey === EventBusKeys.new && this.processInfo.flowFormId) {
                    this.openNewProcess(this.processInfo.flowFormId);
                }
                else {
                    // TODO：首先获取流程分类信息，确保流程分类和流程构件获取到（会稍微影响设计器打开速度）
                    this.viewModel.getFlowFormInfoById(this.processInfo.flowFormId).subscribe((/**
                     * @param {?} info
                     * @return {?}
                     */
                    (info) => {
                        this.editorUi.loadBizActivities(info.bizActivities || []);
                        this.getProcContent(this.processInfo.processKey).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            this.uiState.content = this.checkModelContent(JSON.stringify(re));
                            this.openProcess(this.uiState.content);
                        }));
                    }));
                }
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.noDtInfo"));
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (this.rtProcessInfo) {
                this.viewModel.getFlowFormInfoById(this.rtProcessInfo.flowFormId).subscribe((/**
                 * @param {?} info
                 * @return {?}
                 */
                (info) => {
                    this.editorUi.loadBizActivities(info.bizActivities || []);
                    this.getProcContent(this.rtProcessInfo.rtProcDefId).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    re => {
                        this.uiState.content = this.checkModelContent(JSON.stringify(re));
                        this.openProcess(this.uiState.content);
                    }));
                }));
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.noRtInfo"));
            }
        }
    }
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @param {?} ffId 流程分类ID
     * @return {?}
     */
    openNewProcess(ffId) {
        this.viewModel.getFlowFormInfoById(ffId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            /** @type {?} */
            const processBizComponnets = info.bizComponents;
            /** @type {?} */
            const customizeActions = info.customizeActions.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.isAll === true)).map((/**
             * @param {?} a
             * @return {?}
             */
            a => ({
                id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                actualParameters: a.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                })))
            })));
            /** @type {?} */
            let executeForms = [];
            info.excuteForms.forEach((/**
             * @param {?} form
             * @return {?}
             */
            form => {
                if (form.isDefault) {
                    // 流程绑定默认单据
                    /** @type {?} */
                    const forms = this.ConvertExecuteForm(form);
                    executeForms = executeForms.concat(forms);
                }
            }));
            // 如果不存在表单定义，需要去表单格式列表取一下
            if (executeForms.length === 0
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === TerminalType.PC)) === -1
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === TerminalType.MOBILE)) === -1) {
                this.viewModel.getFormFormatsByBizCategory().subscribe((/**
                 * @param {?} formFormats
                 * @return {?}
                 */
                (formFormats) => {
                    if (formFormats && formFormats.length > 0) {
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.TerminalType === TerminalType.PC)) === -1) {
                            /** @type {?} */
                            const formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            f => f.terminal === 'PC' && f.status === 0))[0];
                            if (formFormat) {
                                executeForms.push(this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.TerminalType === TerminalType.MOBILE)) === -1) {
                            /** @type {?} */
                            const formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            f => f.terminal === 'Mobile' && f.status === 0))[0];
                            if (formFormat) {
                                executeForms.push(this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                    }
                    /** @type {?} */
                    const newProcInfo = {
                        name: this.processInfo.processName,
                        bizObjId: this.processInfo.bizObjId,
                        ffId: ffId,
                        ffName: this.processInfo.flowFormName,
                        startMode: this.processInfo.startMode,
                        formalParameters: info.formalParameters,
                        processBizComponnets: processBizComponnets,
                        executeForms: executeForms,
                        customizeActions: customizeActions,
                        processDescription: info.flowForm.processDescription,
                    };
                    this.createBpmnModel(info.bizActivities || [], newProcInfo);
                }));
            }
            else {
                /** @type {?} */
                const newProcInfo = {
                    name: this.processInfo.processName,
                    bizObjId: this.processInfo.bizObjId,
                    ffId: ffId,
                    ffName: this.processInfo.flowFormName,
                    startMode: this.processInfo.startMode,
                    formalParameters: info.formalParameters,
                    processBizComponnets: processBizComponnets,
                    executeForms: executeForms,
                    customizeActions: customizeActions,
                    processDescription: info.flowForm.processDescription,
                };
                this.createBpmnModel(info.bizActivities || [], newProcInfo);
            }
        }));
    }
    /**
     * @param {?} bizActivities
     * @param {?} newProcInfo
     * @return {?}
     */
    createBpmnModel(bizActivities, newProcInfo) {
        this.service.getBizCmp().subscribe((/**
         * @param {?} cmps
         * @return {?}
         */
        (cmps) => {
            // 2023-5-30 为了解决网络较差场景下的加载问题修改了加载顺序 先加载数据再showeditorUi
            this.editorUi.show();
            this.addEditorUiListeners(this.editorUi);
            this.editorUi.loadBizActivities(bizActivities || []);
            this.editorUi.createBpmnModel(newProcInfo, cmps);
            this.service.getProcExtendProperty(newProcInfo.BizDefKey, newProcInfo.startMode, this.editorUi.bizCategoryId).subscribe((/**
             * @param {?} property
             * @return {?}
             */
            (property) => {
                /** @type {?} */
                const props = [];
                property.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    if ((p.bizCategoryId || p.bizDefKey) && ((p.bizCategoryId.indexOf(this.editorUi.bizCategoryId) != -1 || p.bizCategoryId === '*') ||
                        (p.bizDefKey.indexOf(newProcInfo.BizDefKey) != -1 || p.bizDefKey === '*')) &&
                        (p.startMode.indexOf(newProcInfo.startMode) != -1 || p.startMode === '*')) {
                        props.push(p);
                    }
                }));
                this.editorUi.procExtProps = props;
                if (this.flag) {
                    this.flag = false;
                    this.closeLoading();
                }
                // 显示流程属性
                this.viewModel.initProcessProperty(this.editorUi.getFarrisPropConfig());
                // 获取启动方式
                this.uiState.getStartMode(this.editorUi.getStartMode());
                if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                    this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
                }
                else {
                    this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => this.uiState.subProcessElementContext.some((/**
                     * @param {?} y
                     * @return {?}
                     */
                    y => y.key != x.key))));
                }
                this.uiState.bpmnModel = this.editorUi.graph.bpmnModel;
                this.addGraphModelChangedListener();
            }));
        }));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    openProcess(content) {
        // 取ProcessHeader
        /** @type {?} */
        const model = new BpmnModel();
        model.LoadFromJson(content);
        /** @type {?} */
        const processHeader = ((/** @type {?} */ (model.DefaultProcess.GetExtensionElements().filter((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof ProcessHeader))[0])));
        this.service.getProcExtendProperty(processHeader.BizDefKey, processHeader.startMode, this.editorUi.bizCategoryId).subscribe((/**
         * @param {?} property
         * @return {?}
         */
        (property) => {
            /** @type {?} */
            const props = [];
            property.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                if ((p.bizCategoryId || p.bizDefKey) && ((p.bizCategoryId.indexOf(this.editorUi.bizCategoryId) != -1 || p.bizCategoryId === '*') ||
                    (p.bizDefKey.indexOf(processHeader.BizDefKey) != -1 || p.bizDefKey === '*')) &&
                    (p.startMode.indexOf(processHeader.startMode) != -1 || p.startMode === '*')) {
                    props.push(p);
                }
            }));
            this.editorUi.procExtProps = props;
            // 2023-5-30 为了解决网络较差场景下的加载问题修改了加载顺序 先加载数据再showeditorUi
            this.editorUi.show();
            this.addEditorUiListeners(this.editorUi);
            this.editorUi.openBpmnModel(content);
            if (this.flag) {
                this.flag = false;
                this.closeLoading();
            }
            // 显示流程属性
            this.viewModel.initProcessProperty(this.editorUi.getFarrisPropConfig());
            // 打开时获取所有活动节点信息
            this.uiState.getUserActList(this.editorUi.getActivities());
            // 打开时获取所有结束节点信息
            this.uiState.getEndEventList(this.editorUi.getEndEvents());
            // 打开时获取所有知会节点信息
            this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
            // 打开时获取所有消息节点信息
            this.uiState.getMessageEventList(this.editorUi.getMessageEvents());
            // 打开时获取所有子流程和信号捕获节点信息
            this.uiState.getSubAndCatchEventsList(this.editorUi.getSubAndCatchEvents());
            this.uiState.bpmnModel = this.editorUi.graph.bpmnModel;
            // 获取启动方式
            this.uiState.getStartMode(this.editorUi.getStartMode());
            if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
            }
            else {
                this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => this.uiState.subProcessElementContext.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key != x.key))));
            }
            this.addGraphModelChangedListener();
        }));
    }
    /**
     * 添加graph model监听器，有变化则将changedFlag
     * @return {?}
     */
    addGraphModelChangedListener() {
        // 监听画布变化，更新界面变更状态
        /** @type {?} */
        const changedListener = (/**
         * @return {?}
         */
        () => {
            this.changedFlag = false;
        });
        this.editorUi.graph.model.addListener(mxEvent.CHANGE, changedListener);
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    showTip(data) {
        if (data.type === 'message') {
            switch (data.level) {
                case 'warning':
                    this.message.warning(data.message);
                    break;
                case 'error':
                    this.message.error(data.message);
                    break;
                case 'question':
                    this.message.question(data.message, (/**
                     * @return {?}
                     */
                    () => {
                        this.questionOKHandle(data);
                    }));
                    break;
                default:
                    this.message.info(data.message);
                    break;
            }
        }
        else if (data.type === 'notify') {
            switch (data.level) {
                case 'warning':
                    this.notify.warning(data.message);
                    break;
                case 'error':
                    this.notify.error(data.message);
                    break;
                default:
                    this.notify.info(data.message);
                    break;
            }
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    showVerify(data) {
        this.errorList = data;
        this.createValidationTips();
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    questionOKHandle(data) {
        switch (data.action) {
        }
    }
    /**
     * 获取流程上下文
     * @param {?} id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     * @return {?}
     */
    getProcContent(id) {
        if (id) {
            if (this.time === ProcessTime.dt) {
                return this.service.getProcContentbyKey(id);
            }
            else if (this.time === ProcessTime.rt) {
                return this.service.getRTProcContentbyId(id);
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.wrongMoment"));
            }
        }
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    save(content) {
        this.uiState.content = content;
        this.showLoading();
        /** @type {?} */
        const process = JSON.parse(this.uiState.content);
        this.saveHttp().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.closeLoading();
            // 2023-6-13 保存后同步流程名称到标题栏
            this.procNameTitle = process.DefaultProcess.Name;
            this.notify.success((/** @type {?} */ ({
                title: this.localePipe.transform("processEditor.prompted"),
                msg: this.localePipe.transform("processEditor.saveSuccess"),
                timeout: 3000
            })));
            if (this.time === ProcessTime.dt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, true, process.DefaultProcess.Key);
            }
            else if (this.time === ProcessTime.rt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, true, process.DefaultProcess.Key);
            }
            // 重置界面变更状态
            this.changedFlag = false;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.closeLoading();
            this.notify.error((/** @type {?} */ ({
                title: this.localePipe.transform("processEditor.prompted"),
                msg: error.error.Message,
                timeout: 3000
            })));
            if (this.time === ProcessTime.dt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, false, process.DefaultProcess.Key);
            }
            else if (this.time === ProcessTime.rt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, false, process.DefaultProcess.Key);
            }
        }));
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    release(content) {
        this.uiState.content = content;
        this.showLoading();
        this.uiState.getReleaseConfig().subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            if (config.currentValue === 'true') {
                // 展示发布前审批页面，同时保存，记审计
                this.viewModel.saveProcess(this.uiState.content, this.processInfo, 1).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                (re) => {
                    this.viewModel.getProcDefsByKey(JSON.parse(content).DefaultProcess.Key).subscribe((/**
                     * @param {?} ProcDefs
                     * @return {?}
                     */
                    (ProcDefs) => {
                        /** @type {?} */
                        const maxVersion = Math.max.apply(Math, ProcDefs.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            return item.version << 0;
                        })));
                        // 展示发布前审批页面，同时保存，记审计
                        this.viewModel.releaseProcess(content, maxVersion === -Infinity ? 1 : maxVersion);
                        this.closeLoading();
                    }));
                }));
                this.notify.success((/** @type {?} */ ({
                    title: this.localePipe.transform("processEditor.prompted"),
                    msg: this.localePipe.transform("processEditor.waitReview"),
                    timeout: 3000
                })));
                /** @type {?} */
                const process = JSON.parse(this.uiState.content);
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, true, process.DefaultProcess.Key);
            }
            else {
                this.viewModel.deployProcess(this.uiState.content).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.closeLoading();
                    this.viewModel.saveProcess(this.uiState.content, this.processInfo, 0).subscribe((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => { }));
                    this.notify.success((/** @type {?} */ ({
                        title: this.localePipe.transform("processEditor.prompted"),
                        msg: this.localePipe.transform("processEditor.successPublish"),
                        timeout: 3000
                    })));
                    /** @type {?} */
                    const process = JSON.parse(this.uiState.content);
                    this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, true, process.DefaultProcess.Key);
                }), (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.closeLoading();
                    this.notify.error((/** @type {?} */ ({
                        title: this.localePipe.transform("processEditor.prompted"),
                        msg: this.localePipe.transform("processEditor.publishFail") + `${e.error.Message}`,
                        timeout: 3000
                    })));
                    /** @type {?} */
                    const process = JSON.parse(this.uiState.content);
                    this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, false, process.DefaultProcess.Key);
                }));
            }
        }));
    }
    /**
     * 保存流程定义（设计时+运行时）
     * @private
     * @return {?}
     */
    saveHttp() {
        if (this.uiState.content) {
            if (this.time === ProcessTime.dt) {
                return this.viewModel.saveProcess(this.uiState.content, this.processInfo, 1);
            }
            else if (this.time === ProcessTime.rt) {
                return this.viewModel.saveRTProcess(this.uiState.content, this.rtProcessInfo.rtProcDefId);
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.wrongMoment"));
            }
        }
    }
    /**
     * @return {?}
     */
    showLoading() {
        this.loadService.show({ container: 'body', message: '', type: 1 });
    }
    /**
     * @return {?}
     */
    closeLoading() {
        this.loadService.close();
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    ConvertExecuteForm(form) {
        /** @type {?} */
        const executeForms = new Array();
        if (form.terminal === 'web,app') {
            /** @type {?} */
            const webForm = new ExecuteFormModel();
            webForm.ComponentId = form.appId;
            webForm.formFormatId = form.formFormatId;
            webForm.FormType = form.formType;
            webForm.Name = form.name;
            webForm.TerminalType = TerminalType.PC;
            if (form.actualParameters && form.actualParameters.length > 0) {
                webForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code,
                    Value: p.value
                })));
            }
            executeForms.push(webForm);
            /** @type {?} */
            const appForm = new ExecuteFormModel();
            appForm.ComponentId = form.appId;
            appForm.formFormatId = form.formFormatId;
            appForm.FormType = form.formType;
            appForm.Name = form.name;
            appForm.TerminalType = TerminalType.MOBILE;
            if (form.actualParameters && form.actualParameters.length > 0) {
                appForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => ({
                    Name: p.code,
                    Tag: p.valueType ? p.valueType : ProcessDeUtil.initVariableType(p.value),
                    Value: p.value
                })));
            }
            executeForms.push(appForm);
        }
        else {
            /** @type {?} */
            const executeForm = new ExecuteFormModel();
            executeForm.ComponentId = form.appId;
            executeForm.formFormatId = form.formFormatId;
            executeForm.FormType = form.formType;
            executeForm.Name = form.name;
            switch (form.terminal) {
                case 'web':
                    executeForm.TerminalType = TerminalType.PC;
                    break;
                case 'app':
                    executeForm.TerminalType = TerminalType.MOBILE;
                    break;
            }
            if (form.actualParameters && form.actualParameters.length > 0) {
                executeForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => ({
                    Name: p.code,
                    Tag: p.valueType ? p.valueType : ProcessDeUtil.initVariableType(p.value),
                    Value: p.value
                })));
            }
            executeForms.push(executeForm);
        }
        return executeForms;
    }
    /**
     * @private
     * @param {?} formformat
     * @return {?}
     */
    formFormat2ExecuteForm(formformat) {
        /** @type {?} */
        const form = new ExecuteFormModel();
        form.Id = ProcessDeUtil.GenerateElementId();
        form.ComponentId = null;
        form.formFormatId = formformat.id;
        form.FormType = '0';
        form.Name = formformat.name;
        switch (formformat.terminal) {
            case 'PC':
                form.TerminalType = TerminalType.PC;
                break;
            case 'Mobile':
                form.TerminalType = TerminalType.MOBILE;
                break;
        }
        if (formformat.urlParameters && formformat.urlParameters.length > 0) {
            form.ActualParameters = formformat.urlParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            p => ({
                Name: p.code,
                Tag: p.valueType ? p.valueType : ProcessDeUtil.initVariableType(p.value),
                Value: p.value
            })));
        }
        return form;
    }
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    completeStrategyChanged(strategy) {
        if (strategy !== this.uiState.completeIterator[0].key) {
            // 参与者存在自动审批的情况下，不允许修改完成策略为会签规则
            // if (this.uiState.propertyData.ParticipantSchemes
            //   && this.uiState.propertyData.ParticipantSchemes.options
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers.length > 0) {
            //   return;
            // } else {
            // 会签规则不存在，即由抢占模式，变为会签时
            if (!this.uiState.propertyData.SignRule) {
                // 会签是自动弹出会签规则编辑
                /** @type {?} */
                const compFactory = this.resolver.resolveComponentFactory(SignRuleComponent);
                /** @type {?} */
                const compRef = compFactory.create(this.injector);
                compRef.instance.value = [];
                // compRef.instance.counterSignVariables = this.uiState.counterSignVariables || [];
                // compRef.instance.approvalItems = this.uiState.approvalItems || [];
                /** @type {?} */
                const modalConfig = Object.assign(compRef.instance.modalConfig, { buttons: compRef.instance.modalFooter });
                /** @type {?} */
                const dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModal.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                $event => dialog.close()));
                compRef.instance.submitModal.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.updateChangeProperty({
                        categoryId: 'performerProperty',
                        propertyID: UserActivityPropertyKeys.SignRule,
                        propertyValue: data.value
                    });
                    dialog.close();
                }));
            }
            // 会签规则下，驳回规则约束
            if (((/** @type {?} */ (this.uiState.propertyData.BackWardRule))).SelectTargetAble === true) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.message.warning(this.localePipe.transform("processEditor.policyConflict"));
                }), 500);
            }
            // }
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    OtherAssignNodesChanged(data) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AssignScopeComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        let location;
        if (data.Id.indexOf('startActivity') > -1) {
            location = 'startActivity';
        }
        else {
            location = 'userActivity';
        }
        if (location === 'startActivity') {
            compRef.instance.value = [];
            /** @type {?} */
            const activities = this.uiState.userActList.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.Id !== this.uiState.propertyData.Id
                && a.AssignmentStrategy === 'ASSIGN'
                && a.AssignPerformerConfig
                && a.AssignPerformerConfig.Operator === 'procInstCreator'));
            if (activities && activities.length > 0) {
                compRef.instance.value = activities.map((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id));
            }
            else {
                compRef.instance.value = new Array();
            }
        }
        else {
            compRef.instance.value = [];
        }
        compRef.instance.location = location;
        /** @type {?} */
        const modalConfig = Object.assign(compRef.instance.modalConfig, { buttons: compRef.instance.modalFooter });
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModal.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submitModal.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty({
                categoryId: location = 'startActivity' ? 'activityConfig' : 'approvalProperty',
                // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
                propertyID: UserActivityPropertyKeys.otherAssignActivities,
                propertyValue: data.value
            });
            dialog.close();
        }));
    }
    /**
     * 完成策略调整校验
     * @private
     * @param {?} data
     * @return {?}
     */
    beforeCompleteStrategyChange(data) {
        if (this.time === ProcessTime.rt) {
            return this.viewModel.beforeCompleteStrategyChange(data, this.rtProcessInfo);
        }
        else {
            return of(true);
        }
    }
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     * @private
     * @param {?} content
     * @return {?}
     */
    checkModelContent(content) {
        /** @type {?} */
        const process = JSON.parse(content);
        /** @type {?} */
        const modelBizDefKey = process.DefaultProcess.extensionElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey;
        if (this.time === ProcessTime.dt) {
            if (modelBizDefKey === this.processInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey = this.processInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (modelBizDefKey === this.rtProcessInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey = this.rtProcessInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showModeChange(event) {
        const { mode = ShowMode.panel, wideWidth = 330, smallWidth = 41 } = event || {};
        if (mode === ShowMode.panel) {
            this.panelWidth = wideWidth;
            this.rightPanelWidth = wideWidth;
        }
        else if (mode === ShowMode.sidebar) {
            this.panelWidth = smallWidth;
            this.rightPanelWidth = smallWidth;
        }
    }
    /**
     * @return {?}
     */
    saveProc() {
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        this.save(model.ConvertToJson());
    }
    /**
     * @return {?}
     */
    saveAs() {
        if (!(this.uiState.enableAdminOrgAut || ((this.uiState.isAdministratorConfig &&
            this.uiState.administrator !== null) || (!this.uiState.isAdministratorConfig)))) {
            this.message.info(this.localePipe.transform("processEditor.noPermissionToSave"));
            return;
        }
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        /** @type {?} */
        const process = new BpmnModel();
        process.LoadFromJson(model.ConvertToJson());
        process.DefaultProcess.Key = ProcessDeUtil.GenerateElementId();
        process.DefaultProcess.Id = ProcessDeUtil.GenerateElementId();
        process.DefaultDiagram.BpmnPlane.BpmnElementId = process.DefaultProcess.Id;
        this.viewModel.saveAsProcess(process, this.processInfo);
    }
    /**
     * @return {?}
     */
    releaseProc() {
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        this.release(model.ConvertToJson());
    }
    /**
     * @return {?}
     */
    sync() {
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        this.viewModel.syncDtProcess(model.ConvertToJson(), this.rtProcessInfo);
    }
    /**
     * @return {?}
     */
    procRecord() {
        /** @type {?} */
        const record = this.editorUi.graph.bpmnModel.DefaultProcess.Documentation;
        this.note(record);
    }
    /**
     * @return {?}
     */
    batchSet() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(BatchSetPropertiesComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: '批量设置',
            width: 512,
            height: 565,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            dialog.close();
        }));
    }
    /**
     * @return {?}
     */
    closeProc() {
        // 如果界面发生变化，增加确认框提示，无变化则直接关闭
        if (this.changedFlag) {
            this.message.confirm(this.localePipe.transform("processEditor.closeProc1"), this.localePipe.transform("processEditor.closeProc2")).subscribe((/**
             * @param {?} f
             * @return {?}
             */
            (f) => {
                if (f) {
                    this.close.emit();
                }
            }));
        }
        else {
            this.close.emit();
        }
    }
    /**
     * @return {?}
     */
    viewProcModel() {
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("processEditor.viewModel"),
            width: 800,
            height: 520,
            showButtons: false
        };
        // 模型自动复制到剪贴板
        this.notify.success(this.localePipe.transform("processEditor.copied"));
        this.copy(this.editorUi.graph.bpmnModel.ConvertToJson());
        this.modalService.show(this.editorUi.graph.bpmnModel.ConvertToJson(), modalConfig);
    }
    /**
     * 左右拖动后事件，event.size.width是左侧面板的宽度
     * @param {?} event
     * @return {?}
     */
    rzStop(event) {
        this.panelWidth = event.size.width;
        this.editorUi && this.editorUi.graph.refresh();
    }
    // 展示表单验证组件，用于构件校验
    /**
     * @return {?}
     */
    createValidationTips() {
        this.verifySer.clear();
        this.verifyContainer = this.verifySer.createVerify({
            parent: this.contentEl,
            verifyList: this.errorList,
            verifyType: this.tabTypeList,
            showList: true,
            showType: 'processWarning',
            verifyResultTipsTmpl: this.tipsTmpl // 提示模板
        });
        this.listclick = this.verifyContainer.validatorClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            console.log(e);
        }));
        this.showchange = this.verifyContainer.listshowChange.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            console.log(e);
        }));
    }
    /**
     * @return {?}
     */
    clearValidationTips() {
        this.errorList = [];
        if (this.verifySer) {
            this.verifySer.clear();
        }
    }
    /**
     * @param {?} text
     * @return {?}
     */
    copy(text) {
        /** @type {?} */
        const el = document.createElement('input');
        el.setAttribute('value', text);
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    }
}
WfProcessEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-process-editor',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header mt-1\">\r\n    <nav class=\"f-page-header-base py-0\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-manage\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">{{procNameTitle}}</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <ng-container *ngIf=\"action==='edit'&&time==='dt'\">\r\n          <button class=\"btn btn-primary btn-lg mr-2\" (click)=\"saveProc()\">{{ 'processEditor.button.saveProc' | wfLocale }}</button>\r\n          <button class=\"btn btn-secondary mr-2\" (click)=\"releaseProc()\">{{ 'processEditor.button.releaseProc' | wfLocale }}</button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"action==='edit'&&time==='rt'\">\r\n          <button class=\"btn btn-primary btn-lg mr-2\" (click)=\"saveProc()\">{{ 'processEditor.button.saveProc' | wfLocale }}</button>\r\n          <button class=\"btn btn-secondary mr-2\" (click)=\"sync()\">{{ 'processEditor.button.sync' | wfLocale }}</button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"time==='dt'&&action!='assignView'\">\r\n          <button class=\"btn btn-secondary btn-lg mr-2\" (click)=\"saveAs()\">{{ 'processEditor.button.saveAs' | wfLocale }}</button>\r\n        </ng-container>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"procRecord()\">{{ 'processEditor.button.procRecord' | wfLocale }}</button>\r\n        <ng-container *ngIf=\"showModelButton\">\r\n          <button class=\"btn btn-secondary mr-2\" (click)=\"viewProcModel()\">{{ 'processEditor.button.viewProcModel' | wfLocale }}</button>\r\n          </ng-container>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"closeProc()\">{{ 'processEditor.button.closeProc' | wfLocale }}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main\">\r\n    <div class=\"f-utils-flex-column h-100\">\r\n      <div class=\"flex-auto d-flex flex-fill flex-row\" style=\"position:relative; overflow: hidden\">\r\n        <farris-splitter style=\"display: flex; flex-grow: 1\">\r\n          <farris-splitter-pane style=\"display: flex; flex-grow: 1\" id=\"gspWfDesignerPane\">\r\n            <div class=\"flex-grow-1 h-100\">\r\n              <div style=\"position: relative; height: 100%; width: 100%;\">\r\n                <div id=\"editorUiContainer\" class=\"editorUiContainer geEditor\" #editorUiContainer>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </farris-splitter-pane>\r\n          <farris-splitter-pane class=\"f-page-content-main f-component-splitter-pane\" style=\"margin: 0 0 0 10px\"\r\n            ngResizable [rzHandles]=\"'w'\" [ngStyle]=\"{ width: rightPanelWidth + 'px' }\" (rzStop)=\"rzStop($event)\"\r\n            [relatedIframeParent]=\"'#gspWfDesignerPane'\">\r\n            <div class=\"h-100 d-flex flex-column\">\r\n              <div class=\"f-utils-fill-flex-column\">\r\n                <app-property-panel #propertyPanel [(propertyConfig)]=\"uiState.propertyConfig\"\r\n                  [(propertyData)]=\"uiState.propertyData\" [enableChangeMode]=\"true\" [showCloseBtn]=\"false\"\r\n                  isWhiteTheme=\"true\" (showModeChange)=\"showModeChange($event)\" style=\"height:100%;width:100%;\">\r\n                </app-property-panel>\r\n              </div>\r\n            </div>\r\n          </farris-splitter-pane>\r\n        </farris-splitter>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #tipsTmpl let-datas>\r\n  <span class=\"f-icon f-icon-question\" style=\"font-size:14px;\"></span>{{datas[0]['list'].length}}\r\n</ng-template>\r\n",
                providers: [
                    { provide: WF_LANG_RESOURCES, useValue: ɵ0 },
                    WfLocalePipe,
                ],
                styles: [`
    .bpmn-designer {
      height: 100%;
      min-height: 400px;
      width: 100%;
    }`]
            }] }
];
/** @nocollapse */
WfProcessEditorComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerViewModel },
    { type: ProcessDesignerDataService },
    { type: LoadingService },
    { type: NotifyService },
    { type: MessagerService },
    { type: WFFlowElementsViewModel },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: EventBusService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
WfProcessEditorComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    time: [{ type: Input }],
    processInfo: [{ type: Input }],
    rtProcessInfo: [{ type: Input }],
    action: [{ type: Input }],
    mode: [{ type: Input }],
    scene: [{ type: Input }],
    procType: [{ type: Input }],
    close: [{ type: Output }],
    propertyPanel: [{ type: ViewChild, args: ['propertyPanel',] }],
    tipsTmpl: [{ type: ViewChild, args: ['tipsTmpl',] }],
    iframe: [{ type: ViewChild, args: ['iframe',] }],
    contentEl: [{ type: ViewChild, args: ['content',] }],
    editorUiContainerER: [{ type: ViewChild, args: ["editorUiContainer",] }],
    editorUiContainerVCR: [{ type: ViewChild, args: ["editorUiContainer", { read: ViewContainerRef },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.flag;
    /** @type {?} */
    WfProcessEditorComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype._time;
    /** @type {?} */
    WfProcessEditorComponent.prototype.processInfo;
    /** @type {?} */
    WfProcessEditorComponent.prototype.rtProcessInfo;
    /** @type {?} */
    WfProcessEditorComponent.prototype.action;
    /** @type {?} */
    WfProcessEditorComponent.prototype.mode;
    /** @type {?} */
    WfProcessEditorComponent.prototype.procType;
    /** @type {?} */
    WfProcessEditorComponent.prototype.close;
    /** @type {?} */
    WfProcessEditorComponent.prototype.propertyPanel;
    /** @type {?} */
    WfProcessEditorComponent.prototype.tipsTmpl;
    /** @type {?} */
    WfProcessEditorComponent.prototype.iframe;
    /** @type {?} */
    WfProcessEditorComponent.prototype.errorList;
    /** @type {?} */
    WfProcessEditorComponent.prototype.tabTypeList;
    /** @type {?} */
    WfProcessEditorComponent.prototype.contentEl;
    /** @type {?} */
    WfProcessEditorComponent.prototype.verifyContainer;
    /** @type {?} */
    WfProcessEditorComponent.prototype.listclick;
    /** @type {?} */
    WfProcessEditorComponent.prototype.showchange;
    /** @type {?} */
    WfProcessEditorComponent.prototype.panelWidth;
    /** @type {?} */
    WfProcessEditorComponent.prototype.propertyPanelResizable;
    /** @type {?} */
    WfProcessEditorComponent.prototype.rightPanelWidth;
    /** @type {?} */
    WfProcessEditorComponent.prototype.clientWidth;
    /** @type {?} */
    WfProcessEditorComponent.prototype.widthAfterResized;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.verifySer;
    /** @type {?} */
    WfProcessEditorComponent.prototype.procNameTitle;
    /** @type {?} */
    WfProcessEditorComponent.prototype.editorUiContainerER;
    /** @type {?} */
    WfProcessEditorComponent.prototype.editorUiContainerVCR;
    /** @type {?} */
    WfProcessEditorComponent.prototype.editorUi;
    /**
     * 界面是否发生变化标志，修改属性、移动节点等均会将此值设为true
     * @type {?}
     */
    WfProcessEditorComponent.prototype.changedFlag;
    /** @type {?} */
    WfProcessEditorComponent.prototype.showModelButton;
    /** @type {?} */
    WfProcessEditorComponent.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.viewModel;
    /** @type {?} */
    WfProcessEditorComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.activity;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.eventBus;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.localePipe;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,