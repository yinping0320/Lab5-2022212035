/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { BillTypeHelpComponent } from '../bill-type-help/bill-type-help/bill-type-help.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var VoConfigComponent = /** @class */ (function () {
    function VoConfigComponent(messager, notify, modal, framework, router, activatedRoute, loading, cfr, inj, cdr, localeId, resources, localePipe) {
        this.messager = messager;
        this.notify = notify;
        this.modal = modal;
        this.framework = framework;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform("component.voConfig.documentInfo"),
            width: 500,
            height: 240,
            showButtons: true
        };
        this.entity = {};
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(VoConfigComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.entity = data || {};
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.clickOk = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = { value: this.entity, parameters: null };
        this.submitModal.emit(obj);
    };
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.selectVo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.cfr.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.inj);
        compRef.instance.typeList = 'GSPViewModel';
        // 元数据选择器bizTypeId表示业务种类Id
        compRef.instance.bizTypeId = this.editorParams && this.editorParams.bizTypeId;
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        function (metadata4RefDto) {
            _this.clearVo();
            /** @type {?} */
            var voDto = metadata4RefDto.metadata;
            /** @type {?} */
            var vo = JSON.parse(voDto.content);
            _this.entity.currentVoId = vo.ID;
            _this.entity.currentVoName = vo.Name;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            // todo 确定异常结构, 目前采用兼容取值方式
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            _this.clearVo();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform("component.voConfig.viewModelSelection"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modal.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.clearVo = /**
     * @return {?}
     */
    function () {
        this.entity.currentVoId = undefined;
        this.entity.currentVoName = undefined;
    };
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.selectDocuType = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var cmpF = this.cfr.resolveComponentFactory(BillTypeHelpComponent);
        /** @type {?} */
        var cmpR = cmpF.create(this.inj, []);
        cmpR.instance.docuTypeId = this.entity.currentDocumentTypeId;
        /** @type {?} */
        var buttons = [];
        buttons.push({
            text: this.localePipe.transform("component.voConfig.cancel"),
            cls: "btn btn-secondary",
            handle: (/**
             * @return {?}
             */
            function () {
                bsModal && bsModal.close();
            })
        });
        buttons.push({
            text: this.localePipe.transform("component.voConfig.clickOk"),
            cls: "btn btn-primary",
            handle: (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var docuType = cmpR.instance.getSelectedDocuType();
                if (docuType == null) {
                    _this.notify.warning(_this.localePipe.transform("component.voConfig.selectOne"));
                    return;
                }
                _this.entity.currentDocumentTypeId = docuType.id;
                _this.entity.currentDocumentTypeName = docuType.name;
                bsModal && bsModal.close();
            })
        });
        /** @type {?} */
        var bsModal = this.modal.show(cmpR, {
            title: this.localePipe.transform("component.voConfig.documentTypeSelect"),
            height: 573,
            width: 930,
            buttons: buttons,
            showMaxButton: false,
        });
    };
    /**
     * @return {?}
     */
    VoConfigComponent.prototype.clearDocuType = /**
     * @return {?}
     */
    function () {
        this.entity.currentDocumentTypeId = undefined;
        this.entity.currentDocumentTypeName = undefined;
    };
    VoConfigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-vo-config',
                    template: "<div class=\"f-page f-page-card f-page-is-mainsubcard\" id=\"bif-manager-list\">\r\n  <div class=\"f-page-main\" id=\"page-main\" style=\"overflow-y: auto;\">\r\n    <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.voConfig.viewModel' | wfLocale}}\" for=\"vo\">\r\n              <span class=\"farris-label-text\">{{'component.voConfig.viewModel' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"vo\" [ngModel]=\"entity&&entity.currentVoName\" [editable]=\"false\" [enableClear]=\"false\"\r\n                (clickHandle)=\"selectVo()\" (clear)=\"clearVo()\" [groupText]=\"groupIcon\" placeholder=\"{{'component.voConfig.placeholder' | wfLocale}}\">\r\n              </input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.voConfig.documenttype' | wfLocale}}\" for=\"vo\">\r\n              <span class=\"farris-label-text\">{{'component.voConfig.documenttype' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"vo\" [ngModel]=\"entity&&entity.currentDocumentTypeName\" [editable]=\"false\"\r\n                [enableClear]=\"false\" (clickHandle)=\"selectDocuType()\" (clear)=\"clearDocuType()\" [groupText]=\"groupIcon\"\r\n                placeholder=\"{{'component.voConfig.placeholder' | wfLocale}}\">\r\n              </input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.voConfig.cancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">{{'component.voConfig.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ]
                }] }
    ];
    /** @nocollapse */
    VoConfigComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService },
        { type: BsModalService },
        { type: FrameworkService },
        { type: Router },
        { type: ActivatedRoute },
        { type: LoadingService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    VoConfigComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return VoConfigComponent;
}());
export { VoConfigComponent };
if (false) {
    /** @type {?} */
    VoConfigComponent.prototype.groupIcon;
    /** @type {?} */
    VoConfigComponent.prototype.closeModal;
    /** @type {?} */
    VoConfigComponent.prototype.submitModal;
    /** @type {?} */
    VoConfigComponent.prototype.editorParams;
    /** @type {?} */
    VoConfigComponent.prototype.modalFooter;
    /** @type {?} */
    VoConfigComponent.prototype.modalConfig;
    /** @type {?} */
    VoConfigComponent.prototype.entity;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.modal;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.framework;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.inj;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.localePipe;
}
var VoConfigConverter = /** @class */ (function () {
    function VoConfigConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    VoConfigConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.currentVoId) {
            return data.currentVoName || data.currentVoId || this.localePipe.transform("component.voConfig.set");
        }
        return this.localePipe.transform("component.voConfig.notSet");
    };
    return VoConfigConverter;
}());
export { VoConfigConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VoConfigConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm8tY29uZmlnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3Mvdm8tY29uZmlnL3ZvLWNvbmZpZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsd0JBQXdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBVSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0wsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEQsT0FBTyxFQUFtQix5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQVVoRztJQW1DRSwyQkFDVSxRQUF5QixFQUN6QixNQUFxQixFQUNyQixLQUFxQixFQUNyQixTQUEyQixFQUMzQixNQUFjLEVBQ2QsY0FBOEIsRUFDOUIsT0FBdUIsRUFDdkIsR0FBNkIsRUFDN0IsR0FBYSxFQUNELEdBQXNCLEVBQ2YsUUFBZ0IsRUFDUixTQUFjLEVBQzdC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Ozs7OztJQUMzQyxzQ0FBaUQ7Ozs7O0lBQ2pELHVDQUE0Qzs7QUF3R2hEO0lBQ0UsMkJBQ1UsVUFBd0I7UUFBeEIsZUFBVSxHQUFWLFVBQVUsQ0FBYztJQUM5QixDQUFDOzs7OztJQUVMLHFDQUFTOzs7O0lBQVQsVUFBVSxJQUFjO1FBQ3RCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUN0RztRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBWEQsSUFXQzs7Ozs7OztJQVRHLHVDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIEluamVjdG9yLCBJbnB1dCwgTE9DQUxFX0lELCBPbkluaXQsIE9wdGlvbmFsLCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFR5cGVDb252ZXJ0ZXIgfSBmcm9tICdAZmFycmlzL2lkZS1wcm9wZXJ0eS1wYW5lbCc7XHJcbmltcG9ydCB7IExvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IEdTUFZpZXdNb2RlbCB9IGZyb20gJ0Bnc3AtYmVmL2dzcC12by1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IE1ldGFkYXRhNFJlZkR0bywgU2VsZWN0TWV0YWRhdGFSVENvbXBvbmVudCB9IGZyb20gJ0Bnc3AtbGNtL21ldGFkYXRhcnQtc2VsZWN0b3InO1xyXG5pbXBvcnQgeyBGcmFtZXdvcmtTZXJ2aWNlIH0gZnJvbSAnQGdzcC1zeXMvcnRmLWNvbW1vbic7XHJcbmltcG9ydCB7IEJpbGxUeXBlSGVscENvbXBvbmVudCB9IGZyb20gJy4uL2JpbGwtdHlwZS1oZWxwL2JpbGwtdHlwZS1oZWxwL2JpbGwtdHlwZS1oZWxwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFdGX0xBTkdfUkVTT1VSQ0VTLCBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi8uLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5pbXBvcnQgeyBXRl9QUk9DRVNTX0VESVRPUl9MQU5HX1JFU09VUkNFUyB9IGZyb20gJy4uLy4uL2kxOG4vYXNzZXRzL2xhbmcucmVzb3VyY2UnO1xyXG5cclxudHlwZSBWb0NvbmZpZyA9IHtcclxuICBjdXJyZW50Vm9JZD86IHN0cmluZztcclxuICBjdXJyZW50Vm9OYW1lPzogc3RyaW5nO1xyXG4gIGN1cnJlbnREb2N1bWVudFR5cGVJZD86IHN0cmluZztcclxuICBjdXJyZW50RG9jdW1lbnRUeXBlTmFtZT86IHN0cmluZztcclxufTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbGliLXZvLWNvbmZpZycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3ZvLWNvbmZpZy5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgICBXZkxvY2FsZVBpcGUsXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVm9Db25maWdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIHJlYWRvbmx5IGdyb3VwSWNvbiA9ICc8aSBjbGFzcz1cImYtaWNvbiBmLWljb24tbG9va3VwXCI+PC9pPic7XHJcblxyXG4gIEBPdXRwdXQoKSBjbG9zZU1vZGFsID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHN1Ym1pdE1vZGFsID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IHZhbHVlKGRhdGE6IFZvQ29uZmlnKSB7XHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICB0aGlzLmVudGl0eSA9IGRhdGEgfHwge307XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBlZGl0b3JQYXJhbXM6IHtcclxuICAgIGJpelR5cGVJZD86IHN0cmluZ1xyXG4gIH0gPSB7fTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnaWNvblNlbGVjdEZvb3RlcicpIG1vZGFsRm9vdGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIG1vZGFsQ29uZmlnID0ge1xyXG4gICAgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb21wb25lbnQudm9Db25maWcuZG9jdW1lbnRJbmZvXCIpLFxyXG4gICAgd2lkdGg6IDUwMCxcclxuICAgIGhlaWdodDogMjQwLFxyXG4gICAgc2hvd0J1dHRvbnM6IHRydWVcclxuICB9O1xyXG5cclxuICBlbnRpdHk6IFZvQ29uZmlnID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBtZXNzYWdlcjogTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBub3RpZnk6IE5vdGlmeVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG1vZGFsOiBCc01vZGFsU2VydmljZSxcclxuICAgIHByaXZhdGUgZnJhbWV3b3JrOiBGcmFtZXdvcmtTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nOiBMb2FkaW5nU2VydmljZSxcclxuICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcml2YXRlIGluajogSW5qZWN0b3IsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgQEluamVjdChXRl9MQU5HX1JFU09VUkNFUykgcHJpdmF0ZSByZXNvdXJjZXM6IGFueSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbG9jYWxlUGlwZTogV2ZMb2NhbGVQaXBlLFxyXG4gICkge1xyXG4gICAgdGhpcy5sb2NhbGVQaXBlID0gdGhpcy5sb2NhbGVQaXBlIHx8IG5ldyBXZkxvY2FsZVBpcGUobG9jYWxlSWQsIHJlc291cmNlcyk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIGNsaWNrT2soKSB7XHJcbiAgICBjb25zdCBvYmogPSB7IHZhbHVlOiB0aGlzLmVudGl0eSwgcGFyYW1ldGVyczogbnVsbCB9O1xyXG4gICAgdGhpcy5zdWJtaXRNb2RhbC5lbWl0KG9iaik7XHJcbiAgfVxyXG5cclxuICBjbGlja0NhbmNlbCgpIHtcclxuICAgIHRoaXMuY2xvc2VNb2RhbC5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RWbygpIHtcclxuICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoU2VsZWN0TWV0YWRhdGFSVENvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjb21wUmVmID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qKTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UudHlwZUxpc3QgPSAnR1NQVmlld01vZGVsJztcclxuICAgIC8vIOWFg+aVsOaNrumAieaLqeWZqGJpelR5cGVJZOihqOekuuS4muWKoeenjeexu0lkXHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmJpelR5cGVJZCA9IHRoaXMuZWRpdG9yUGFyYW1zICYmIHRoaXMuZWRpdG9yUGFyYW1zLmJpelR5cGVJZDtcclxuXHJcbiAgICBjb21wUmVmLmluc3RhbmNlLnNlbGVjdGVkTWV0YWRhdGEuc3Vic2NyaWJlKFxyXG4gICAgICAobWV0YWRhdGE0UmVmRHRvOiBNZXRhZGF0YTRSZWZEdG8pID0+IHtcclxuICAgICAgICB0aGlzLmNsZWFyVm8oKTtcclxuICAgICAgICBjb25zdCB2b0R0byA9IG1ldGFkYXRhNFJlZkR0by5tZXRhZGF0YTtcclxuICAgICAgICBjb25zdCB2bzogR1NQVmlld01vZGVsID0gSlNPTi5wYXJzZSh2b0R0by5jb250ZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbnRpdHkuY3VycmVudFZvSWQgPSB2by5JRDtcclxuICAgICAgICB0aGlzLmVudGl0eS5jdXJyZW50Vm9OYW1lID0gdm8uTmFtZTtcclxuICAgICAgfSxcclxuICAgICAgKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAvLyB0b2RvIOehruWumuW8guW4uOe7k+aehCwg55uu5YmN6YeH55So5YW85a655Y+W5YC85pa55byPXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlci5lcnJvcihlcnIuZXJyb3IgPT0gbnVsbCA/IGVyci5tZXNzYWdlIDogKGVyci5lcnJvci5NZXNzYWdlIHx8IGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlKSk7XHJcbiAgICAgICAgdGhpcy5jbGVhclZvKCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbW9kYWxDb25maWcgPSB7XHJcbiAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLnZpZXdNb2RlbFNlbGVjdGlvblwiKSxcclxuICAgICAgd2lkdGg6IDkzMCxcclxuICAgICAgaGVpZ2h0OiA1NzMsXHJcbiAgICAgIHNob3dCdXR0b25zOiBmYWxzZVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMubW9kYWwuc2hvdyhjb21wUmVmLCBtb2RhbENvbmZpZyk7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmNsb3NlTW9kYWxFbWl0dGVyLnN1YnNjcmliZSgkZXZlbnQgPT4gZGlhbG9nLmNsb3NlKCkpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJWbygpIHtcclxuICAgIHRoaXMuZW50aXR5LmN1cnJlbnRWb0lkID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5lbnRpdHkuY3VycmVudFZvTmFtZSA9IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIHNlbGVjdERvY3VUeXBlKCkge1xyXG4gICAgY29uc3QgY21wRiA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEJpbGxUeXBlSGVscENvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjbXBSID0gY21wRi5jcmVhdGUodGhpcy5pbmosIFtdKTtcclxuICAgIGNtcFIuaW5zdGFuY2UuZG9jdVR5cGVJZCA9IHRoaXMuZW50aXR5LmN1cnJlbnREb2N1bWVudFR5cGVJZDtcclxuXHJcbiAgICBjb25zdCBidXR0b25zID0gW107XHJcbiAgICBidXR0b25zLnB1c2goXHJcbiAgICAgIHtcclxuICAgICAgICB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLmNhbmNlbFwiKSxcclxuICAgICAgICBjbHM6IFwiYnRuIGJ0bi1zZWNvbmRhcnlcIixcclxuICAgICAgICBoYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgIGJzTW9kYWwgJiYgYnNNb2RhbC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBidXR0b25zLnB1c2goXHJcbiAgICAgIHtcclxuICAgICAgICB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLmNsaWNrT2tcIiksXHJcbiAgICAgICAgY2xzOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgIGhhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZG9jdVR5cGUgPSBjbXBSLmluc3RhbmNlLmdldFNlbGVjdGVkRG9jdVR5cGUoKTtcclxuICAgICAgICAgIGlmIChkb2N1VHlwZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5Lndhcm5pbmcodGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImNvbXBvbmVudC52b0NvbmZpZy5zZWxlY3RPbmVcIikpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmVudGl0eS5jdXJyZW50RG9jdW1lbnRUeXBlSWQgPSBkb2N1VHlwZS5pZDtcclxuICAgICAgICAgIHRoaXMuZW50aXR5LmN1cnJlbnREb2N1bWVudFR5cGVOYW1lID0gZG9jdVR5cGUubmFtZTtcclxuICAgICAgICAgIGJzTW9kYWwgJiYgYnNNb2RhbC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgYnNNb2RhbCA9IHRoaXMubW9kYWwuc2hvdyhjbXBSLCB7XHJcbiAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLmRvY3VtZW50VHlwZVNlbGVjdFwiKSxcclxuICAgICAgaGVpZ2h0OiA1NzMsXHJcbiAgICAgIHdpZHRoOiA5MzAsXHJcbiAgICAgIGJ1dHRvbnM6IGJ1dHRvbnMsXHJcbiAgICAgIHNob3dNYXhCdXR0b246IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjbGVhckRvY3VUeXBlKCkge1xyXG4gICAgdGhpcy5lbnRpdHkuY3VycmVudERvY3VtZW50VHlwZUlkID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5lbnRpdHkuY3VycmVudERvY3VtZW50VHlwZU5hbWUgPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVm9Db25maWdDb252ZXJ0ZXIgaW1wbGVtZW50cyBUeXBlQ29udmVydGVyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbG9jYWxlUGlwZTogV2ZMb2NhbGVQaXBlXHJcbiAgKSB7IH1cclxuXHJcbiAgY29udmVydFRvKGRhdGE6IFZvQ29uZmlnKTogc3RyaW5nIHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEuY3VycmVudFZvSWQpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuY3VycmVudFZvTmFtZSB8fCBkYXRhLmN1cnJlbnRWb0lkIHx8IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb21wb25lbnQudm9Db25maWcuc2V0XCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb21wb25lbnQudm9Db25maWcubm90U2V0XCIpO1xyXG4gIH1cclxufVxyXG4iXX0=