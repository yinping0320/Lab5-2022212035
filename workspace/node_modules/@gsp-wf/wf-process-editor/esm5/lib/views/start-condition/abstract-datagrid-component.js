/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @abstract
 */
var /**
 * @abstract
 */
AbstractDatagridComponent = /** @class */ (function () {
    function AbstractDatagridComponent(messager, notify, metadataService, modalService, localePipe, injector, resolver, cdf) {
        this.messager = messager;
        this.notify = notify;
        this.metadataService = metadataService;
        this.modalService = modalService;
        this.localePipe = localePipe;
        this.injector = injector;
        this.resolver = resolver;
        this.cdf = cdf;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.toolbarData = [
            {
                id: 'btn-add',
                text: this.localePipe.instant("add"),
                class: 'btn btn-secondary',
                disabled: false
            },
            {
                id: 'btn-remove',
                text: this.localePipe.instant("remove"),
                class: 'btn btn-secondary',
                disabled: false
            },
        ];
        this.dgIdField = "id";
        this.editingRowId = null;
    }
    Object.defineProperty(AbstractDatagridComponent.prototype, "dgTotal", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dgData.length || 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} args
     * @return {?}
     */
    AbstractDatagridComponent.prototype.toolbarClickHandler = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        switch (args.id) {
            case 'btn-add':
                this.add();
                break;
            case 'btn-remove':
                this.remove(null);
                break;
        }
    };
    /**
     * 开始行编辑
     * @param ctx
     */
    /**
     * 开始行编辑
     * @param {?=} ctx
     * @return {?}
     */
    AbstractDatagridComponent.prototype.startRowEdit = /**
     * 开始行编辑
     * @param {?=} ctx
     * @return {?}
     */
    function (ctx) {
        this.dg.editRow(ctx.rowData.id);
        this.editingRowId = ctx.rowData.id;
        this.cdf.detectChanges();
        return false;
    };
    /**
     * 取消行编辑
     * @param ctx
     */
    /**
     * 取消行编辑
     * @param {?=} ctx
     * @return {?}
     */
    AbstractDatagridComponent.prototype.cancelRowEdit = /**
     * 取消行编辑
     * @param {?=} ctx
     * @return {?}
     */
    function (ctx) {
        this.dg.cancelEdit(ctx.rowData.id);
        this.editingRowId = null;
        this.cdf.detectChanges();
        return false;
    };
    /**
     * 结束行编辑
     * @param ctx
     */
    /**
     * 结束行编辑
     * @param {?=} ctx
     * @return {?}
     */
    AbstractDatagridComponent.prototype.endRowEdit = /**
     * 结束行编辑
     * @param {?=} ctx
     * @return {?}
     */
    function (ctx) {
        this.dg.endRowEdit();
        this.editingRowId = null;
        this.cdf.detectChanges();
        return false;
    };
    /**
     * 行删除
     * @param ctx
     */
    /**
     * 行删除
     * @param {?} evt
     * @param {?=} ctx
     * @return {?}
     */
    AbstractDatagridComponent.prototype.remove = /**
     * 行删除
     * @param {?} evt
     * @param {?=} ctx
     * @return {?}
     */
    function (evt, ctx) {
        var e_1, _a;
        /** @type {?} */
        var ids = [];
        if (ctx == null) {
            // 批量删除
            this.dg.checkeds.forEach((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                ids.push(it.id);
            }));
        }
        else {
            // 行内删除
            ids.push(ctx.rowData.id);
        }
        if (ids.length == 0) {
            this.notify.warning(this.localePipe.instant("pleaseSelectOneItemAtLeast"));
            if (evt != null) {
                evt.stopPropagation();
            }
            return false;
        }
        try {
            for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                var id = ids_1_1.value;
                this.dg.deleteRow(id);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.dgData = this.dg.data;
        if (this.editingRowId != null) {
            if (ids.includes(this.editingRowId)) {
                this.editingRowId = null;
            }
            else {
                this.dg.editRow(this.editingRowId);
            }
        }
        this.cdf.detectChanges();
        if (evt != null) {
            evt.stopPropagation();
        }
        return false;
    };
    /**
     * 行移动
     * @param ctx datagrid上下文
     * @param direction -1: 上移， 1：下移
     */
    /**
     * 行移动
     * @param {?} evt
     * @param {?} ctx datagrid上下文
     * @param {?} direction -1: 上移， 1：下移
     * @return {?}
     */
    AbstractDatagridComponent.prototype.rowMove = /**
     * 行移动
     * @param {?} evt
     * @param {?} ctx datagrid上下文
     * @param {?} direction -1: 上移， 1：下移
     * @return {?}
     */
    function (evt, ctx, direction) {
        // const arr = dg.data;
        /** @type {?} */
        var arr = this.dgData;
        /** @type {?} */
        var index = this.findIndex(arr, ctx.rowData.id);
        if (index == -1 || (direction == 1 && index == arr.length - 1) || (direction == -1 && index == 0)) {
            return;
        }
        arr[index] = [arr[index + direction], arr[index + direction] = arr[index]][0];
        this.dgData = tslib_1.__spread(this.dgData);
        this.cdf.detectChanges();
        if (evt != null) {
            evt.stopPropagation();
        }
        return false;
    };
    /**
     * 查找数组中指定id的元素下标
     * @param arr 数组
     * @param id 数组唯一标识
     * @returns 元素下标
     */
    /**
     * 查找数组中指定id的元素下标
     * @protected
     * @param {?} arr 数组
     * @param {?} id 数组唯一标识
     * @return {?} 元素下标
     */
    AbstractDatagridComponent.prototype.findIndex = /**
     * 查找数组中指定id的元素下标
     * @protected
     * @param {?} arr 数组
     * @param {?} id 数组唯一标识
     * @return {?} 元素下标
     */
    function (arr, id) {
        /** @type {?} */
        var index = -1;
        for (var i = 0; i < arr.length; i++) {
            /** @type {?} */
            var elt = arr[i];
            if (elt.id == id) {
                index = i;
                break;
            }
        }
        return index;
    };
    return AbstractDatagridComponent;
}());
/**
 * @abstract
 */
export { AbstractDatagridComponent };
if (false) {
    /** @type {?} */
    AbstractDatagridComponent.prototype.groupIcon;
    /** @type {?} */
    AbstractDatagridComponent.prototype.toolbar;
    /** @type {?} */
    AbstractDatagridComponent.prototype.toolbarData;
    /** @type {?} */
    AbstractDatagridComponent.prototype.dg;
    /** @type {?} */
    AbstractDatagridComponent.prototype.dgIdField;
    /** @type {?} */
    AbstractDatagridComponent.prototype.dgColumns;
    /** @type {?} */
    AbstractDatagridComponent.prototype.dgIsEnabledStateCell;
    /** @type {?} */
    AbstractDatagridComponent.prototype.dgOpCell;
    /** @type {?} */
    AbstractDatagridComponent.prototype.editingRowId;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.metadataService;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.localePipe;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.resolver;
    /**
     * @type {?}
     * @protected
     */
    AbstractDatagridComponent.prototype.cdf;
    /**
     * @abstract
     * @return {?}
     */
    AbstractDatagridComponent.prototype.dgData = function () { };
    /**
     * @abstract
     * @param {?} arr
     * @return {?}
     */
    AbstractDatagridComponent.prototype.dgData = function (arr) { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractDatagridComponent.prototype.ngOnInit = function () { };
    /**
     * 新增行
     * @abstract
     * @return {?}
     */
    AbstractDatagridComponent.prototype.add = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractDatagridComponent.prototype.load = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractDatagridComponent.prototype.configDgColumns = function () { };
}
//# sourceMappingURL=data:application/json;base64,