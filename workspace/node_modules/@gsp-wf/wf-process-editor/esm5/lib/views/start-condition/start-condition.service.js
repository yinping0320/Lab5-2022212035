/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { ConditionEntity, ConditionType } from "@edp-bif/common-api";
var StartConditionService = /** @class */ (function () {
    function StartConditionService() {
    }
    /**
     * @return {?}
     */
    StartConditionService.prototype.createConditionEntity = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var entity = new ConditionEntity();
        entity.id = this.generateGUID();
        entity.isEnabled = true;
        entity.type = ConditionType.COMPONENT;
        return entity;
    };
    /**
     * @return {?}
     */
    StartConditionService.prototype.generateGUID = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var d = new Date().getTime();
        /** @type {?} */
        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            /** @type {?} */
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        }));
        return guid;
    };
    StartConditionService.decorators = [
        { type: Injectable }
    ];
    return StartConditionService;
}());
export { StartConditionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtY29uZGl0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3N0YXJ0LWNvbmRpdGlvbi9zdGFydC1jb25kaXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJFO0lBQUE7SUFvQkEsQ0FBQzs7OztJQWxCRyxxREFBcUI7OztJQUFyQjs7WUFDVSxNQUFNLEdBQUcsSUFBSSxlQUFlLEVBQUU7UUFDcEMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDeEIsTUFBTSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1FBQ3RDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7SUFFRCw0Q0FBWTs7O0lBQVo7O1lBQ1EsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFOztZQUN4QixJQUFJLEdBQUcsc0NBQXNDLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7UUFBRSxVQUFDLENBQUM7O2dCQUM3RCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO1lBQ3pDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsQ0FBQyxFQUFDO1FBRUYsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Z0JBbkJKLFVBQVU7O0lBb0JYLDRCQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FuQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvbkVudGl0eSwgQ29uZGl0aW9uVHlwZSB9IGZyb20gXCJAZWRwLWJpZi9jb21tb24tYXBpXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdGFydENvbmRpdGlvblNlcnZpY2Uge1xyXG4gICAgY3JlYXRlQ29uZGl0aW9uRW50aXR5KCk6IENvbmRpdGlvbkVudGl0eSB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5ID0gbmV3IENvbmRpdGlvbkVudGl0eSgpO1xyXG4gICAgICAgIGVudGl0eS5pZCA9IHRoaXMuZ2VuZXJhdGVHVUlEKCk7XHJcbiAgICAgICAgZW50aXR5LmlzRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgZW50aXR5LnR5cGUgPSBDb25kaXRpb25UeXBlLkNPTVBPTkVOVDtcclxuICAgICAgICByZXR1cm4gZW50aXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlR1VJRCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgbGV0IGd1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByID0gKGQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xyXG4gICAgICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGMgPT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KSkudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZ3VpZDtcclxuICAgIH1cclxufSJdfQ==