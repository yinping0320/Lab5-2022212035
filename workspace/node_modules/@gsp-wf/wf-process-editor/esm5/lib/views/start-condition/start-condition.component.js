/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Output, TemplateRef, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BpmnModelJsonHelper, ComponentConditionContent, ConditionEntity, ConditionType, ExpressionConditionContent } from '@edp-bif/common-api';
import { DatagridComponent } from '@farris/ui-datagrid';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { GSPMetadataRTService, SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { of } from 'rxjs';
import { AifLocalePipe, BIF_LANG_RESOURCES } from '../aif-ui-common/pipe/aif-ui-common-locale.pipe';
import { StartConditionService } from './start-condition.service';
import { DataEntityService } from '@gsp-svc/data-entity-adapter';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { AbstractDatagridComponent } from './abstract-datagrid-component';
import { LANG_RESOURCES } from './i18n/lang.resource';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
var ɵ0 = LANG_RESOURCES;
var StartConditionComponent = /** @class */ (function (_super) {
    tslib_1.__extends(StartConditionComponent, _super);
    function StartConditionComponent(startConditionService, designerState, metadata, expr, des, messager, notify, modal, framework, router, activatedRoute, loading, localeId, localePipe, cfr, cdf, inj) {
        var _this = _super.call(this, messager, notify, metadata, modal, localePipe, inj, cfr, cdf) || this;
        _this.startConditionService = startConditionService;
        _this.designerState = designerState;
        _this.metadata = metadata;
        _this.expr = expr;
        _this.des = des;
        _this.messager = messager;
        _this.notify = notify;
        _this.modal = modal;
        _this.framework = framework;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.loading = loading;
        _this.localePipe = localePipe;
        _this.cfr = cfr;
        _this.cdf = cdf;
        _this.inj = inj;
        _this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        _this.closeModal = new EventEmitter();
        _this.submitModal = new EventEmitter();
        _this.editorParams = {};
        _this.modalConfig = {
            title: '启动条件',
            width: 900,
            height: 400,
            showButtons: true,
            showHeader: false
        };
        _this.dgIdField = "id";
        _this.designedConditionEntities = new Array();
        _this.editingRowId = null;
        _this.canEdit = true;
        _this.beforeEdit = (/**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // console.log('Before Edit', args);
            return of(true);
        });
        _this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {...?} args
         * @return {?}
         */
        function (rowIndex, rowData) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            if (rowData.component && rowData.component.compMetadataId) {
                return of(true);
            }
            else if (rowData.expression && rowData.expression.exprContent) {
                return of(true);
            }
            else {
                _this.notify.warning(_this.localePipe.instant("eventRouterConditionsContentCantBeEmpty"));
                return of(false);
            }
        });
        return _this;
    }
    Object.defineProperty(StartConditionComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = data ? data : '[]';
            /** @type {?} */
            var conditionEntities = data ? [] : BpmnModelJsonHelper.FromJson(data, ConditionEntity);
            this.designedConditionEntities = conditionEntities.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var entity = {
                    id: item.id,
                    isEnabled: item.isEnabled,
                    name: item.name,
                    type: item.type,
                    remarks: item.remarks,
                    component: {},
                    expression: {},
                };
                if (entity.type == ConditionType.COMPONENT) {
                    /** @type {?} */
                    var compCondCont = new ComponentConditionContent();
                    compCondCont.LoadFromJson(item.content);
                    entity.component.compId = compCondCont.componentId;
                    entity.component.compMetadataId = compCondCont.componentMetadataId;
                    entity.component.compName = compCondCont.name;
                    entity.displayedContent = entity.component.compName;
                }
                else if (entity.type == ConditionType.EXPRESSION) {
                    /** @type {?} */
                    var exprContent = new ExpressionConditionContent();
                    exprContent.LoadFromJson(item.content);
                    entity.expression.exprContent = exprContent.expressionContent;
                    entity.displayedContent = entity.expression.exprContent;
                }
                else {
                }
                return entity;
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StartConditionComponent.prototype, "dgData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.designedConditionEntities;
        },
        set: /**
         * @param {?} arr
         * @return {?}
         */
        function (arr) {
            this.designedConditionEntities = arr;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StartConditionComponent.prototype, "dgTotal", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dgData.length || 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.configDgColumns();
    };
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.clickOk = /**
     * @return {?}
     */
    function () {
        if (this.dg.isEditing() || this.editingRowId != null) {
            return;
        }
        /** @type {?} */
        var conditionEntities = this.designedConditionEntities.map((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            /** @type {?} */
            var item = new ConditionEntity();
            item.id = entity.id;
            item.isEnabled = entity.isEnabled;
            item.name = entity.name;
            item.type = entity.type;
            item.remarks = entity.remarks;
            if (entity.type == ConditionType.COMPONENT) {
                /** @type {?} */
                var compCondCont = new ComponentConditionContent();
                compCondCont.name = entity.component.compName;
                compCondCont.componentId = entity.component.compId;
                compCondCont.componentMetadataId = entity.component.compMetadataId;
                item.content = compCondCont.ConvertToJson();
            }
            else if (entity.type == ConditionType.EXPRESSION) {
                /** @type {?} */
                var exprContent = new ExpressionConditionContent();
                exprContent.expressionContent = entity.expression.exprContent;
                item.content = exprContent.ConvertToJson();
            }
            else {
            }
            return item;
        }));
        /** @type {?} */
        var val = BpmnModelJsonHelper.ToJson(conditionEntities);
        /** @type {?} */
        var obj = { value: val, parameters: null };
        this.submitModal.emit(obj);
    };
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {?} args
     * @return {?}
     */
    StartConditionComponent.prototype.toolbarClickHandler = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        switch (args.id) {
            case 'btn-add':
                this.add();
                break;
            case 'btn-remove':
                this.remove(null);
                break;
        }
    };
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dg.isEditing() == false || this.dg.isEditing() == null) {
            /** @type {?} */
            var newItem_1 = this.startConditionService.createConditionEntity();
            /** @type {?} */
            var newEntity = {
                id: newItem_1.id,
                name: newItem_1.name,
                type: newItem_1.type,
                isEnabled: newItem_1.isEnabled,
                remarks: newItem_1.remarks,
                component: {},
                expression: {},
            };
            this.dgData = tslib_1.__spread(this.dgData, [newEntity]);
            this.cdf.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.dg.editRow(newItem_1.id);
                _this.editingRowId = newItem_1.id;
            }), 0);
        }
        else {
            this.notify.warning(this.localePipe.instant("pleaseEndCurrentRowEditing"));
        }
    };
    /**
     * 行删除
     * @param ctx
     */
    /**
     * 行删除
     * @param {?} evt
     * @param {?=} ctx
     * @return {?}
     */
    StartConditionComponent.prototype.remove = /**
     * 行删除
     * @param {?} evt
     * @param {?=} ctx
     * @return {?}
     */
    function (evt, ctx) {
        var e_1, _a;
        /** @type {?} */
        var ids = [];
        if (ctx == null) {
            // 批量删除
            this.dg.checkeds.forEach((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                ids.push(it.id);
            }));
        }
        else {
            // 行内删除
            ids.push(ctx.rowData.id);
        }
        if (ids.length == 0) {
            this.notify.warning(this.localePipe.instant("pleaseSelectOneItemAtLeast"));
            if (evt != null) {
                evt.stopPropagation();
            }
            return false;
        }
        try {
            for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                var id = ids_1_1.value;
                this.dg.deleteRow(id);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.dgData = this.dg.data;
        if (this.editingRowId != null) {
            if (ids.includes(this.editingRowId)) {
                this.editingRowId = null;
            }
            else {
                this.dg.editRow(this.editingRowId);
            }
        }
        this.cdf.detectChanges();
        if (evt != null) {
            evt.stopPropagation();
        }
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    StartConditionComponent.prototype.selectContent = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        switch (e.form.value.type) {
            case ConditionType.COMPONENT:
                this.selectCommonComp(e);
                break;
            case ConditionType.EXPRESSION:
                this.showExpression(e);
                break;
            // case ConditionType.FULL_EXPRESSION:
            //   this.showExpression(e);
            //   break;
            // case ConditionType.INCREMENTAL_EXPRESSION:
            //   this.showExpression(e);
            //   break;
            case ConditionType.VOACTION:
                this.selectVOAction(e);
                break;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    StartConditionComponent.prototype.selectCommonComp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var compFactory = this.cfr.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.inj);
        compRef.instance.typeList = "CommonComponent";
        // compRef.instance.boId = `${this.processContent.upBillBoId},${this.processContent.downBillBoId}`;
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        function (metadata4RefDto) {
            /** @type {?} */
            var content = new ComponentConditionContent();
            /** @type {?} */
            var metadata = metadata4RefDto.metadata;
            /** @type {?} */
            var entity = e.form.bindingData;
            entity.component.compName = metadata.name;
            entity.component.compMetadataId = metadata.id;
            /** @type {?} */
            var metadataContent = JSON.parse(metadata.content);
            entity.component.compId = metadataContent.id || metadataContent.Id || metadataContent.ID || metadata.id;
            entity.displayedContent = entity.component.compName;
            e.formControl.setValue(entity.displayedContent);
            e.instance.cd.detectChanges();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.instant("commonComponentMetadataSelector"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modal.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    StartConditionComponent.prototype.selectVOAction = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    /**
     * @param {?} e
     * @return {?}
     */
    StartConditionComponent.prototype.showExpression = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_2, _a, e_3, _b;
        // this.expr.clearContext();
        /** @type {?} */
        var context = new Array();
        if (this.designerState.subActivityContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _c = tslib_1.__values(this.designerState.subActivityContext), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var variable = _d.value;
                    _loop_1(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_b = context_1.return)) _b.call(context_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        this.expr.addExpressionText(e.formControl.value);
        this.configExpressionExpendFuncs();
        /** @type {?} */
        var schema$ = this.des.getSchemaById(this.editorParams.voId);
        schema$.subscribe((/**
         * @param {?} schema
         * @return {?}
         */
        function (schema) {
            _this.expr.addNewSchema(schema.name, schema);
            _this.expr.addInjectedEntity(schema.entityTypes[0].code, schema.name, schema.entityTypes[0].code, InjectedType.EntityType);
            _this.expr.buildExpression(!_this.canEdit).then((/**
             * @param {?} expressioninfo
             * @return {?}
             */
            function (expressioninfo) {
                /** @type {?} */
                var content = new ExpressionConditionContent();
                /** @type {?} */
                var temp = expressioninfo;
                /** @type {?} */
                var entity = e.form.bindingData;
                entity.expression.exprContent = temp;
                entity.displayedContent = entity.expression.exprContent;
                e.formControl.setValue(entity.displayedContent);
                e.instance.cd.detectChanges();
                //点击确定后，去除表达式里面的新增的上下文变量
                if (context.length > 0) {
                    _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) { return !context.some((/**
                     * @param {?} y
                     * @return {?}
                     */
                    function (y) { return y.key === x.key; })); }));
                }
            }));
        }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    StartConditionComponent.prototype.clearContent = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var entity = e.form.bindingData;
        entity.displayedContent = null;
        //构件
        entity.component.compName = null;
        entity.component.compMetadataId = null;
        entity.component.compId = null;
        //表达式
        entity.expression.exprContent = null;
        //VO动作
        e.formControl.setValue(null);
        e.instance.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.configDgColumns = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dgColumns = [
            // { field: 'id', title: this.localePipeService.instant("id"), width: 160 },
            {
                field: 'isEnabled', title: this.localePipe.instant("isEnabled"), width: 100, template: this.dgIsEnabledStateCell,
            },
            {
                field: 'type', title: this.localePipe.instant("type"), width: 120,
                editor: {
                    type: EditorTypes.SELECT,
                    options: {
                        idField: "value",
                        valueField: 'value',
                        textField: 'text',
                        data: [
                            // { value: ConditionType.VOACTION, text: this.localePipeService.instant("billAction") },
                            // { value: ConditionType.EXPRESSION, text: this.localePipe.instant("expression") },
                            { value: ConditionType.COMPONENT, text: this.localePipe.instant("commonComponent") },
                        ]
                    },
                    validators: [
                        { type: 'required', messager: this.localePipe.instant("typeMustNotBeNull") },
                    ]
                },
                validators: [
                    { type: 'required' },
                ],
                formatter: (/**
                 * @param {?} value
                 * @param {?} rowData
                 * @param {?} rowIndex
                 * @return {?}
                 */
                function (value, rowData, rowIndex) {
                    switch (value) {
                        case ConditionType.COMPONENT:
                            return _this.localePipe.instant("commonComponent");
                        case ConditionType.EXPRESSION:
                            return _this.localePipe.instant("expression");
                        // case ConditionType.FULL_EXPRESSION:
                        //   return this.localePipe.instant("fullExpression");
                        // case ConditionType.INCREMENTAL_EXPRESSION:
                        //   return this.localePipe.instant("incrementalExpression");
                        case ConditionType.VOACTION:
                            return _this.localePipe.instant("billAction");
                        default:
                            return "Unknown";
                    }
                })
            },
            {
                field: "displayedContent", title: this.localePipe.instant("content"), width: 200,
                editor: {
                    type: EditorTypes.INPUTGROUP,
                    options: {
                        groupText: this.groupIcon,
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.selectContent(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.clearContent(e);
                        }),
                    },
                    validators: [
                        { type: 'required', messager: this.localePipe.instant("contentMustNotBeNull") }
                    ]
                },
                validators: [
                    { type: 'required' },
                ],
            },
            {
                field: 'remarks', title: this.localePipe.instant("description"), width: 200,
                editor: {
                    type: EditorTypes.TEXTAREA, options: {},
                }
            },
            { field: null, title: this.localePipe.instant("operation"), width: 250, template: this.dgOpCell, halign: 'center', align: 'center' },
        ];
    };
    /**
     * @param {?} param
     * @return {?}
     */
    StartConditionComponent.prototype.beginEdit = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        // console.log('Begin Edit', param);
        this.editingRowId = param.rowData.id;
        /** @type {?} */
        var editors = param.gridInstance.getEditors();
        /** @type {?} */
        var select = editors[0];
        select.instance.formControl.valueChanges.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (select.instance.dr.form.bindingData.type != val) {
                select.instance.group.bindingData.displayedContent = null;
                select.instance.group.controls.displayedContent.setValue(null);
                select.instance.group.bindingData.remarks = null;
                select.instance.group.controls.remarks.setValue(null);
                select.instance.dr.cd.detectChanges();
            }
        }));
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    StartConditionComponent.prototype.endEdit = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // console.log('End Edit', args);
        this.editingRowId = null;
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    StartConditionComponent.prototype.cancelEdited = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // console.log('取消编辑', args);
        this.editingRowId = null;
    };
    /**
     * @return {?}
     */
    StartConditionComponent.prototype.configExpressionExpendFuncs = /**
     * @return {?}
     */
    function () {
        // let changeDetails: VarEntity =
        // {
        //   key: "changeDetails",
        //   name: "业务实体变更集列表",
        //   description: "业务实体变更集列表"
        // }
        // this.expr.addContext(changeDetails);
    };
    StartConditionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-start-condition',
                    template: "<div class=\"f-page f-page-is-managelist p-2\">\r\n  <div class=\"f-page-header-base\" style=\"min-height: unset;\">\r\n    <div class=\"f-title\">\r\n      <span class=\"f-title-icon f-text-orna-param\">\r\n        <i class=\"f-icon f-icon-clock\"></i>\r\n      </span>\r\n      <h4 class=\"f-title-text\" style=\"font-size: 1rem;\">\r\n        {{ 'startCondition' | aifLocale }}\r\n      </h4>\r\n    </div>\r\n    <f-response-toolbar class=\"f-toolbar\" #toolbar [datas]=\"toolbarData\" (rtClickEvent)=\"toolbarClickHandler($event)\"\r\n      [style.display]=\"canEdit==false?'none':null\">\r\n    </f-response-toolbar>\r\n  </div>\r\n  <div class=\"f-utils-fill-flex-column\">\r\n    <farris-datagrid #dg=\"datagrid\" [columns]=\"dgColumns\" [data]=\"dgData\" [editable]=\"canEdit\" [editMode]=\"'row'\"\r\n      [idField]=\"dgIdField\" [showLineNumber]=\"true\" [striped]=\"false\" [showBorder]=\"true\" [pagination]=\"false\"\r\n      [showAllCheckbox]=\"true\" [selectOnCheck]=\"false\" [checkOnSelect]=\"false\" [onlySelectSelf]=\"true\"\r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [keepSelect]=\"true\" [fitColumns]=\"true\" [fit]=\"true\"\r\n      [virtualized]=\"false\" [clickToEdit]=\"false\" [beforeEdit]=\"beforeEdit\" (beginEdit)=\"beginEdit($event)\"\r\n      [afterEdit]=\"afterEdit\" (endEdit)=\"endEdit($event)\" (cancelEdited)=\"cancelEdited($event)\">\r\n    </farris-datagrid>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #dgIsEnabledStateCell let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"line-height: 100%;\">\r\n    <farris-switch checked id=\"isEnabled\" [disabled]=\"!canEdit\" checkedLabel=\"{{'yes'|aifLocale}}\"\r\n      uncheckedLabel=\"{{'no'|aifLocale}}\" [(ngModel)]=\"ctx.rowData.isEnabled\"></farris-switch>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #dgOpCell let-ctx>\r\n  <ng-container\r\n    *ngIf=\"dg.isEditing()!=false&&dg.isEditing()!=null&&dg.selectedRow.id==ctx.rowData.id; else elseTemplate\">\r\n    <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"endRowEdit(ctx)\" title=\"{{'confirm'|aifLocale}}\">\r\n      <span class=\"f-icon f-icon-check\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n        style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n    </button>\r\n  </ng-container>\r\n  <ng-template #elseTemplate>\r\n    <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"startRowEdit(ctx)\" title=\"{{'edit'|aifLocale}}\">\r\n      <span class=\"f-icon f-icon-edit-button\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n        style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n    </button>\r\n  </ng-template>\r\n  <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"rowMove($event, ctx, -1)\"\r\n    title=\"{{'moveUp'|aifLocale}}\">\r\n    <span class=\"f-icon f-icon-arrow-seek-up\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n      style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n  </button>\r\n  <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"rowMove($event, ctx, 1)\"\r\n    title=\"{{'moveDown'|aifLocale}}\">\r\n    <span class=\"f-icon f-icon-arrow-seek-down\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n      style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n  </button>\r\n  <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"remove($event, ctx)\" title=\"{{'remove'|aifLocale}}\">\r\n    <span class=\"f-icon f-icon-delete\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n      style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n  </button>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">\u786E\u5B9A</button>\r\n</ng-template>\r\n",
                    providers: [
                        { provide: BIF_LANG_RESOURCES, useValue: ɵ0 },
                        AifLocalePipe,
                        StartConditionService,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    StartConditionComponent.ctorParameters = function () { return [
        { type: StartConditionService },
        { type: ProcessDesignerUIState },
        { type: GSPMetadataRTService },
        { type: ExpressionService },
        { type: DataEntityService },
        { type: MessagerService },
        { type: NotifyService },
        { type: BsModalService },
        { type: FrameworkService },
        { type: Router },
        { type: ActivatedRoute },
        { type: LoadingService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: AifLocalePipe },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    StartConditionComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        dg: [{ type: ViewChild, args: ["dg",] }],
        dgIsEnabledStateCell: [{ type: ViewChild, args: ["dgIsEnabledStateCell",] }],
        dgOpCell: [{ type: ViewChild, args: ["dgOpCell",] }]
    };
    return StartConditionComponent;
}(AbstractDatagridComponent));
export { StartConditionComponent };
if (false) {
    /** @type {?} */
    StartConditionComponent.prototype.groupIcon;
    /** @type {?} */
    StartConditionComponent.prototype.closeModal;
    /** @type {?} */
    StartConditionComponent.prototype.submitModal;
    /** @type {?} */
    StartConditionComponent.prototype.editorParams;
    /** @type {?} */
    StartConditionComponent.prototype.modalFooter;
    /** @type {?} */
    StartConditionComponent.prototype.modalConfig;
    /** @type {?} */
    StartConditionComponent.prototype.dg;
    /** @type {?} */
    StartConditionComponent.prototype.dgIdField;
    /** @type {?} */
    StartConditionComponent.prototype.dgColumns;
    /** @type {?} */
    StartConditionComponent.prototype.designedConditionEntities;
    /** @type {?} */
    StartConditionComponent.prototype.dgIsEnabledStateCell;
    /** @type {?} */
    StartConditionComponent.prototype.dgOpCell;
    /** @type {?} */
    StartConditionComponent.prototype.editingRowId;
    /** @type {?} */
    StartConditionComponent.prototype.canEdit;
    /** @type {?} */
    StartConditionComponent.prototype.beforeEdit;
    /** @type {?} */
    StartConditionComponent.prototype.afterEdit;
    /** @type {?} */
    StartConditionComponent.prototype.startConditionService;
    /**
     * @type {?}
     * @private
     */
    StartConditionComponent.prototype.designerState;
    /** @type {?} */
    StartConditionComponent.prototype.metadata;
    /** @type {?} */
    StartConditionComponent.prototype.expr;
    /** @type {?} */
    StartConditionComponent.prototype.des;
    /** @type {?} */
    StartConditionComponent.prototype.messager;
    /** @type {?} */
    StartConditionComponent.prototype.notify;
    /** @type {?} */
    StartConditionComponent.prototype.modal;
    /** @type {?} */
    StartConditionComponent.prototype.framework;
    /** @type {?} */
    StartConditionComponent.prototype.router;
    /** @type {?} */
    StartConditionComponent.prototype.activatedRoute;
    /** @type {?} */
    StartConditionComponent.prototype.loading;
    /** @type {?} */
    StartConditionComponent.prototype.localePipe;
    /** @type {?} */
    StartConditionComponent.prototype.cfr;
    /** @type {?} */
    StartConditionComponent.prototype.cdf;
    /** @type {?} */
    StartConditionComponent.prototype.inj;
}
var StartConditionConverter = /** @class */ (function () {
    function StartConditionConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    StartConditionConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.StartCondition) {
            return '（已设置）';
        }
        return '（未设置）';
    };
    return StartConditionConverter;
}());
export { StartConditionConverter };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,