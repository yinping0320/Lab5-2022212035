/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef, HostBinding, Output, EventEmitter, Input, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ApprovalPivotConfig } from './approval-pivot-config';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType, ExprEditMode } from '@gsp-svc/expression';
import { ApprovalPivot } from './approval-pivot';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var ApprovalPivotComponent = /** @class */ (function () {
    function ApprovalPivotComponent(designerUIState, expr, message, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.config = new ApprovalPivotConfig();
        this.typeList = [
            { value: 'REMIND', text: this.localePipe.transform('component.approvalPivot.remind') }
        ];
        this.columns = [
            {
                field: 'type', width: 80, title: this.localePipe.transform('component.approvalPivot.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.typeList }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.typeList, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'condition', width: 120, title: this.localePipe.transform('component.approvalPivot.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            },
            {
                field: 'title', width: 80, title: this.localePipe.transform('component.approvalPivot.title'),
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }, {
                field: 'description', width: 100, title: this.localePipe.transform('component.approvalPivot.description'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.approvalPivot.approvalPivot'),
            width: 800,
            height: 480,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(ApprovalPivotComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var e_1, _a;
            this.config.localePipe = this.localePipe;
            if (data) {
                this.config.enable = data.enable;
                this.config.title = data.title;
                this.config.expand = data.expand;
                if (data.approvalPivots && data.approvalPivots.length > 0) {
                    try {
                        for (var _b = tslib_1.__values(data.approvalPivots), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var a = _c.value;
                            /** @type {?} */
                            var approvalPivot = new ApprovalPivot();
                            approvalPivot.type = a.type;
                            approvalPivot.title = a.title;
                            approvalPivot.description = a.description;
                            if (a.condition) {
                                if (typeof (a.condition) === 'string') {
                                    approvalPivot.condition = a.condition;
                                }
                                else {
                                    approvalPivot.condition = a.condition._value;
                                }
                            }
                            this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var approvalPivot = new ApprovalPivot();
        this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedRow = this.grid.selectedRow;
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.approvalPivot.selectedRow'));
            return;
        }
        this.config.approvalPivots = this.config.approvalPivots.filter((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.id !== selectedRow.id; }));
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (!this.config.title && this.config.enable) {
            this.message.info(this.localePipe.transform('component.approvalPivot.configTitle'));
            return;
        }
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.config, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    ApprovalPivotComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        return true;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ApprovalPivotComponent.prototype.editConditon = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
        /** @type {?} */
        var context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _g = tslib_1.__values(this.designerUIState.subActivityContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = tslib_1.__values(this.designerUIState.activityComponentContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional);
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    ApprovalPivotComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-approval-pivot',
                    template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.approvalPivot.approvalPivot'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"wf-process-pivot\">\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.enable'|wfLocale}}</span>\r\n          <farris-switch [(ngModel)]=\"config.enable\" name=\"enable\"></farris-switch>\r\n        </div>\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.expand'|wfLocale}}</span>\r\n          <farris-switch [(ngModel)]=\"config.expand\" name=\"expand\" [disabled]=\"!config.enable\"></farris-switch>\r\n        </div>\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.showTitle'|wfLocale}}</span>\r\n          <div class=\"farris-input-wrap\">\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"config.title\" name=\"title\" [readonly]=\"!config.enable\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" mainTitle=\"{{'component.approvalPivot.list'|wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-link pr-2 mr-2\" (click)=\"add()\" [disabled]=\"!config.enable\">{{'component.approvalPivot.add'|wfLocale}}</button>\r\n        <button class=\"btn btn-link mr-0\" (click)=\"delete()\" [disabled]=\"!config.enable\">{{'component.approvalPivot.delete'|wfLocale}}</button>\r\n      </ng-template>\r\n      <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"config.approvalPivots\" #grid [idField]=\"'id'\" [showLineNumber]=\"true\"\r\n        [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n        [multiSelect]=\"false\" [disabled]=\"!config.enable\">\r\n      </farris-datagrid>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.approvalPivot.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.approvalPivot.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [".wf-process-pivot{display:flex;align-items:center;margin-bottom:20px}.wf-process-pivot-actions{display:flex;padding-left:30px;align-items:center}.wf-process-pivot-actions-text{padding-right:10px}"]
                }] }
    ];
    /** @nocollapse */
    ApprovalPivotComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: MessagerService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    ApprovalPivotComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        value: [{ type: Input }]
    };
    return ApprovalPivotComponent;
}());
export { ApprovalPivotComponent };
if (false) {
    /** @type {?} */
    ApprovalPivotComponent.prototype.cls;
    /** @type {?} */
    ApprovalPivotComponent.prototype.closeModal;
    /** @type {?} */
    ApprovalPivotComponent.prototype.submitModal;
    /** @type {?} */
    ApprovalPivotComponent.prototype.modalFooter;
    /** @type {?} */
    ApprovalPivotComponent.prototype.grid;
    /** @type {?} */
    ApprovalPivotComponent.prototype.config;
    /** @type {?} */
    ApprovalPivotComponent.prototype.typeList;
    /** @type {?} */
    ApprovalPivotComponent.prototype.columns;
    /** @type {?} */
    ApprovalPivotComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.localePipe;
}
var ApprovalPivotConverter = /** @class */ (function () {
    function ApprovalPivotConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ApprovalPivotConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.enable) {
            return this.localePipe.transform('component.approvalPivot.set');
        }
        else {
            return this.localePipe.transform('component.approvalPivot.notSet');
        }
    };
    return ApprovalPivotConverter;
}());
export { ApprovalPivotConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,