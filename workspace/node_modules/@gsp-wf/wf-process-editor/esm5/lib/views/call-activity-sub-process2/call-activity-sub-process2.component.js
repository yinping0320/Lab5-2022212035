/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { CallActivitySubProcess } from '../call-activity-sub-process/call-activity-sub-process.entity';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { FarrisRadioGroupComponent } from '@farris/ui-forms';
import { ProcessListHelpComponent } from '../../views/aif-process-list-help/components/process-list-help/process-list-help.component';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { SubProcessType } from '../call-activity-sub-process/SubProcessType';
import { BillSourceType } from '../call-activity-sub-process/BillSourceType';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var CallActivitySubProcess2Component = /** @class */ (function () {
    function CallActivitySubProcess2Component(notify, modalService, message, util, http, designerState, expr, cfr, inj, cdr, localeId, resources, localePipe) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.subProcess.subProcessSet'),
            width: 600,
            height: 342,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.subProcessType = SubProcessType;
        this.billSourceType = BillSourceType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: this.localePipe.transform('component.subProcess.specified') },
            { value: "Dynamic", name: this.localePipe.transform('component.subProcess.dynamic') },
        ];
        this.radioGroupBillSourceData = [
            { value: BillSourceType.InheritParent, name: this.localePipe.transform('component.subProcess.inheritParent') },
            { value: BillSourceType.AutoCreation, name: this.localePipe.transform('component.subProcess.autoCreation') },
            { value: BillSourceType.VariablesExpression, name: this.localePipe.transform('component.subProcess.variablesExpression') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(CallActivitySubProcess2Component.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v) {
                this.callActivitySubProcess = v;
                // 为子流程类型赋值
                if (this.callActivitySubProcess.calledElement == null || this.callActivitySubProcess.calledElement == "") {
                    if (this.callActivitySubProcess.calledBizDefKey == null || this.callActivitySubProcess.calledBizDefKey == "") {
                        this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                    }
                    else {
                        this.callActivitySubProcess.subProcessType = SubProcessType.Dynamic;
                    }
                }
                else {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                }
                // 为单据来源类型赋值
                if (this.callActivitySubProcess.inheritBizDataId === true) {
                    this.callActivitySubProcess.billSourceType = BillSourceType.InheritParent;
                }
                else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === false) {
                    this.callActivitySubProcess.billSourceType = BillSourceType.VariablesExpression;
                }
                else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === true) {
                    this.callActivitySubProcess.billSourceType = BillSourceType.AutoCreation;
                }
                this.getProcessDefKey(this.callActivitySubProcess.calledElement);
                this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
                this.getAifProcessName(this.callActivitySubProcess.aifProcessCode);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.processConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.procDefKey;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.processTypeChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.callActivitySubProcess.calledBizDefKey = null;
            this.callActivitySubProcess.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.callActivitySubProcess.calledElement = null;
            this.callActivitySubProcess.calledElementName = null;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.billSourceChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
        if (val == BillSourceType.InheritParent) {
            this.callActivitySubProcess.inheritBizDataId = true;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
        else if (val == BillSourceType.AutoCreation) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = true;
        }
        else if (val == BillSourceType.VariablesExpression) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.selectProcess = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.openProcHelp().subscribe((/**
         * @param {?} rte
         * @return {?}
         */
        function (rte) {
            if (rte == null) {
                _this.notify.warning(_this.localePipe.transform('component.subProcess.rteNull'));
                return;
            }
            _this.callActivitySubProcess.aifProcessCode = rte.code;
            _this.callActivitySubProcess.aifProcessName = rte.name;
        }));
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clearProcess = /**
     * @return {?}
     */
    function () {
        this.callActivitySubProcess.aifProcessCode = null;
        this.callActivitySubProcess.aifProcessName = null;
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.openProcHelp = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cmpF = this.cfr.resolveComponentFactory(ProcessListHelpComponent);
        /** @type {?} */
        var cmpR = cmpF.create(this.inj, []);
        cmpR.instance.editorParams = this.editorParams;
        /** @type {?} */
        var modalRef = this.modalService.show(cmpR, {
            title: this.localePipe.transform('component.subProcess.orderProcess'),
            width: 1250,
            height: 500,
            resizable: true,
            buttons: [
                {
                    text: this.localePipe.transform('component.subProcess.clickOk'),
                    cls: "btn btn-primary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        cmpR.instance.clickOk(evt);
                        modalRef.close();
                    })
                },
                {
                    text: this.localePipe.transform('component.subProcess.clickCancel'),
                    cls: "btn btn-secondary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        cmpR.instance.clickCancel(evt);
                        modalRef.close();
                    })
                }
            ],
            closed: (/**
             * @return {?}
             */
            function () {
                modalRef.dialog.destroy();
            })
        });
        cmpR.instance.modalRef = modalRef;
        return cmpR.instance.procEmitter.asObservable();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clearProcessDef = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.flowFormConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clearFlowForm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.setBizDataId = /**
     * @return {?}
     */
    function () {
        this.showExprHelp();
    };
    /**
     * @private
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.showExprHelp = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _d = tslib_1.__values(this.designerState.schemas), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var schema = _e.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            try {
                for (var _f = tslib_1.__values(this.designerState.subActivityContext), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var variable = _g.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_c = context_1.return)) _c.call(context_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.callActivitySubProcess.bizDataId = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.valueChange = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.useAutoCreationData && !this.callActivitySubProcess.bizDataId) {
            this.message.warning(this.localePipe.transform('component.subProcess.inheritBizDataId'));
            return false;
        }
        return true;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.getProcessDefKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getProcessDefinitionWebApi();
        if (key) {
            url += "/procDefKey/" + key;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.getFlowForm = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getFlowFormWebApi();
        if (id) {
            url += "/" + id;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    };
    /**
     * @param {?} code
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.getAifProcessName = /**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        var _this = this;
        if (code != null && code != "") {
            this.http.request("GET", "/api/runtime/aif/v1.0/rtbillcreationprocess/getname/" + code, { responseType: 'text' }).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.callActivitySubProcess.aifProcessName = res;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                if (err.error && typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    _this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }), 300);
                throw err;
            }));
        }
    };
    CallActivitySubProcess2Component.decorators = [
        { type: Component, args: [{
                    selector: 'lib-call-activity-sub-process2',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section my-2 mx-3 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <section>\r\n      <div class=\"f-utils-fill-flex-column h-100\" style=\"margin-top: 15px;\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.radioGroupProcessType' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Dynamic\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.flowForm' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.flowForm' | wfLocale}}\" [sourceType]=\"'flowform'\"\r\n                    [displayTxt]=\"callActivitySubProcess.calledBizDefName\" (afterConfirm)=\"flowFormConfirm($event)\"\r\n                    (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Specified\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.processDef' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.processDef' | wfLocale}}\" [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section class=\"\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.radioGroupBillSource' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupBillSourceData\" (changeValue)=\"billSourceChange($event)\">\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.AutoCreation\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.autoCreationProcess' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess&&callActivitySubProcess.aifProcessName\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectProcess()\" [groupText]=\"groupIcon\" (clear)=\"clearProcess()\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.VariablesExpression\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.bizDataId' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess.bizDataId\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\" [editable]=\"false\"\r\n                    (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.subProcess.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.subProcess.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ]
                }] }
    ];
    /** @nocollapse */
    CallActivitySubProcess2Component.ctorParameters = function () { return [
        { type: NotifyService },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    CallActivitySubProcess2Component.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        editorParams: [{ type: Input }],
        value: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }],
        radioGroupBillSource: [{ type: ViewChild, args: ["radioGroupBillSource",] }]
    };
    return CallActivitySubProcess2Component;
}());
export { CallActivitySubProcess2Component };
if (false) {
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.cls;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.editorParams;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.closeModal;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.submitModal;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.modalFooter;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.modalConfig;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.callActivitySubProcess;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.groupIcon;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.subProcessType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.billSourceType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupProcessType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupProcessTypeData;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupBillSource;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupBillSourceData;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.message;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.util;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.inj;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.localePipe;
}
var CallActivitySubProcess2Converter = /** @class */ (function () {
    function CallActivitySubProcess2Converter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    CallActivitySubProcess2Converter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return this.localePipe.transform("component.subProcess.set");
        }
        return this.localePipe.transform("component.subProcess.notSet");
    };
    return CallActivitySubProcess2Converter;
}());
export { CallActivitySubProcess2Converter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Converter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,