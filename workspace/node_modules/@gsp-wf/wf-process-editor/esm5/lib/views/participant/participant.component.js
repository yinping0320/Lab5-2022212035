/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { FDropdownDirective } from '@farris/ui-dropdown';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { PerformerEditComponent } from '../performer/views/performer-edit/performer-edit.component';
import { AssignConfig } from './assign-config';
import { ComponentParticipant, OrganizationParticipant, ParticipantInfo } from './participant.info';
import { ParticipantUIState } from './participant.uistate';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var ParticipantComponent = /** @class */ (function () {
    function ParticipantComponent(designerUIState, uistate, resolver, injector, modalService, message, expr, http, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.designerUIState = designerUIState;
        this.uistate = uistate;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.nodeType = 'notifyActivity';
        this.isClose = true;
        this.participant = new ParticipantInfo();
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.type = 'humanPerformer';
        this.assignStrategyList = [
            { value: 'ALL', name: this.localePipe.transform('component.participant.all') },
            { value: 'ASSIGN', name: this.localePipe.transform('component.participant.assign') },
            { value: 'CLAIM', name: this.localePipe.transform('component.participant.claim') }
        ];
        this.operatorCollection = [
            { text: this.localePipe.transform('component.participant.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.participant.procInstCreator'), value: 'procInstCreator' }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.participant.participantSet'),
            width: 900,
            height: 662,
            showButtons: true
        };
        this.columns = [
            {
                field: 'order', width: 25, title: this.localePipe.transform('component.participant.order'),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
            }, {
                field: 'type', width: 50, title: this.localePipe.transform('component.participant.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            }, {
                field: 'performerName', width: 50, title: this.localePipe.transform('component.participant.performerName'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return d.performerName;
                        case 'wf.VariableParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.PositionParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.ComponentParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.ReportingLineParticipantExpression':
                            return ((/** @type {?} */ (d))).reportingLineDefName + '-' + ((/** @type {?} */ (d))).dimension;
                        case 'wf.MatrixParticipantExpression':
                            return ((/** @type {?} */ (d))).matrixDefName + '-' + ((/** @type {?} */ (d))).dataFieldAlias;
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName;
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'description', width: 100, title: this.localePipe.transform('component.participant.description'), showTips: true,
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return _this.getUserPerformerDescription(d);
                        case 'wf.VariableParticipantExpression':
                            return _this.getVariablePerformerDescription(d);
                        case 'wf.PositionParticipantExpression':
                            return _this.getPositionPerformerDescription(d);
                        case 'wf.ComponentParticipantExpression':
                            return _this.getComponentPerformerDescription(d);
                        case 'wf.ReportingLineParticipantExpression':
                            return _this.getReportingLinePerformerDescription(d);
                        case 'wf.MatrixParticipantExpression':
                            return _this.getMatrixPerformerDescription(d);
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName + '，且' + (((/** @type {?} */ (d))).includeChildren ? '包含下级' : '不包含下级');
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'condition', width: 60, title: this.localePipe.transform('component.participant.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    Object.defineProperty(ParticipantComponent.prototype, "value", {
        set: /**
         * @param {?} participant
         * @return {?}
         */
        function (participant) {
            var e_1, _a, e_2, _b;
            this.participant = JSON.parse(JSON.stringify(participant));
            if (!this.participant.assignStrategy.assignConfig) {
                this.participant.assignStrategy.assignConfig = new AssignConfig();
            }
            this.preAssignStrategy = participant.assignStrategy.assignStrategy;
            if (this.participant.humanPerformerList
                && this.participant.humanPerformerList.length > 0) {
                if (Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.order; })))) === 0) {
                    /** @type {?} */
                    var index = 1;
                    try {
                        for (var _c = tslib_1.__values(this.participant.humanPerformerList), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var humanPerformer = _d.value;
                            humanPerformer.order = index;
                            index++;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                this.participant.humanPerformerList = this.participant.humanPerformerList.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) { return a.order - b.order; }));
            }
            if (this.participant.potentialOwnerList
                && this.participant.potentialOwnerList.length > 0) {
                if (Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.order; })))) === 0) {
                    /** @type {?} */
                    var index = 1;
                    try {
                        for (var _e = tslib_1.__values(this.participant.potentialOwnerList), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var potentialOwner = _f.value;
                            potentialOwner.order = index;
                            index++;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                this.participant.potentialOwnerList = this.participant.potentialOwnerList.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) { return a.order - b.order; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.nodeType = this.editorParams.nodeType;
    };
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.humanPerformerGrid.endCellEdit();
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.endCellEdit();
        }
        /** @type {?} */
        var object = {
            value: this.participant, parameters: null
        };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ParticipantComponent.prototype.assignStrategyChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (this.preAssignStrategy !== 'ASSIGN' && data === 'ASSIGN' && this.participant.humanPerformerList.length > 0) {
            if (!this.participant.assignStrategy.assignConfig) {
                this.participant.assignStrategy.assignConfig = new AssignConfig();
            }
            this.message.question(this.localePipe.transform('component.participant.dataMovement1'), (/**
             * @return {?}
             */
            function () {
                _this.humanPerformerCopyToPotentialOwner();
            }));
        }
        else if (this.preAssignStrategy === 'ASSIGN' && data !== 'ASSIGN' && this.participant.potentialOwnerList.length > 0) {
            this.message.question(this.localePipe.transform('component.participant.dataMovement2'), (/**
             * @return {?}
             */
            function () {
                _this.potentialOwnerCopyToHumanPerformer();
            }));
        }
        this.preAssignStrategy = data;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ParticipantComponent.prototype.switchChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            this.clearPerformer('potentialOwner');
        }
    };
    /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    ParticipantComponent.prototype.addPerformer = /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    function (performerType, type) {
        this.editState = 'new';
        this.type = type;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.performerType = performerType;
        /** @type {?} */
        var boxsize = this.attributeBoxSize(performerType);
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.participant.participantSelection'),
            width: boxsize.width,
            height: boxsize.height,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
        this.dropDownEl.close();
        if (this.dropDownE2) {
            this.dropDownE2.close();
        }
    };
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.editOK = /**
     * @return {?}
     */
    function () {
        var e_3, _a, e_4, _b;
        this.isClose = true;
        if (this.compRef) {
            /** @type {?} */
            var re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                try {
                    for (var _c = tslib_1.__values(re.userPerformers), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var p = _d.value;
                        this.addUserPerformer(p);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            if (re.variable && re.variable !== null && re.variable.performerId) {
                this.addvariablePerformer(re.variable);
            }
            // 2023-7-28 组织岗支持多选
            if (re.positions && re.positions.length > 0) {
                this.addPositionPerformer(re.positions);
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                this.addComponentPerformer(re.component);
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                this.addReportingLinePerformer(re.reportingLine);
            }
            if (re.matrix && re.matrix.matrixDefId) {
                this.addMatrixPerformer(re.matrix);
            }
            if (re.activityExecutorPerformers && re.activityExecutorPerformers.length > 0) {
                try {
                    for (var _e = tslib_1.__values(re.activityExecutorPerformers), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var a = _f.value;
                        this.addActivityExecutorPerformer(a);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            if (re.organizationParticipant) {
                this.addOrganizationParticipant(re.organizationParticipant);
            }
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
        // 编辑完成后刷新两个组件
        this.humanPerformerGrid.refresh();
        this.potentialOwnerGrid.refresh();
    };
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    ParticipantComponent.prototype.addUserPerformer = /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    function (userPerformer) {
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            var i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId)); }));
            if (i > -1) {
                // this.participant.humanPerformerList[i] = userPerformer;
            }
            else {
                if (this.editState === 'edit') {
                    this.removeHumanPerformer();
                }
                /** @type {?} */
                var index = void 0;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.humanPerformerList.push(userPerformer);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId)); }));
            if (i > -1) {
                // this.participant.potentialOwnerList[i] = userPerformer;
            }
            else {
                if (this.editState === 'edit') {
                    this.removePotentialOwner();
                }
                /** @type {?} */
                var index = void 0;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.potentialOwnerList.push(userPerformer);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    ParticipantComponent.prototype.addvariablePerformer = /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    function (variable) {
        /** @type {?} */
        var v = variable;
        if (!v || !v.varValue) {
            this.message.info(this.localePipe.transform('component.participant.selectProcessVariables'));
            this.isClose = false;
        }
        else if (!v.varType) {
            this.message.info(this.localePipe.transform('component.participant.selectVariableValueType'));
            this.isClose = false;
        }
        else if (!v.relation) {
            this.message.info(this.localePipe.transform('component.participant.selectRelation'));
            this.isClose = false;
        }
        else {
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                var i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId)); }));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removeHumanPerformer();
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        function (h) { return h.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.humanPerformerList.push(variable);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                var i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId)); }));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removePotentialOwner();
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.potentialOwnerList.push(variable);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    ParticipantComponent.prototype.addPositionPerformer = /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    function (positions) {
        var e_5, _a;
        var _loop_1 = function (position) {
            if (!position.performerId) {
                this_1.message.info(this_1.localePipe.transform('component.participant.selectPosition'));
                this_1.isClose = false;
            }
            else {
                if ((!position.orgType || position.orgType == null) && (position.isRequired && position.positionType === '1')) {
                    this_1.message.info(this_1.localePipe.transform('component.participant.selectOrgType'));
                    this_1.isClose = false;
                }
                else if ((!position.orgId || position.orgId == null) && (position.isRequired && position.positionType === '1')) {
                    this_1.message.info(this_1.localePipe.transform('component.participant.orgFill'));
                    this_1.isClose = false;
                }
                else {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    if (this_1.type === 'humanPerformer') {
                        /** @type {?} */
                        var i = this_1.participant.humanPerformerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            var p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this_1.participant.humanPerformerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            var index = void 0;
                            if (this_1.participant.humanPerformerList.length > 0) {
                                index = Math.max.apply(Math, tslib_1.__spread(this_1.participant.humanPerformerList.map((/**
                                 * @param {?} h
                                 * @return {?}
                                 */
                                function (h) { return h.order; })))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this_1.participant.humanPerformerList.push(position);
                        }
                        this_1.humanPerformerGrid.loadData(this_1.participant.humanPerformerList);
                    }
                    else if (this_1.type === 'potentialOwner') {
                        /** @type {?} */
                        var i = this_1.participant.potentialOwnerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            var p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this_1.participant.potentialOwnerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            var index = void 0;
                            if (this_1.participant.potentialOwnerList.length > 0) {
                                index = Math.max.apply(Math, tslib_1.__spread(this_1.participant.potentialOwnerList.map((/**
                                 * @param {?} p
                                 * @return {?}
                                 */
                                function (p) { return p.order; })))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this_1.participant.potentialOwnerList.push(position);
                        }
                        this_1.potentialOwnerGrid.loadData(this_1.participant.potentialOwnerList);
                    }
                }
            }
        };
        var this_1 = this;
        try {
            for (var positions_1 = tslib_1.__values(positions), positions_1_1 = positions_1.next(); !positions_1_1.done; positions_1_1 = positions_1.next()) {
                var position = positions_1_1.value;
                _loop_1(position);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (positions_1_1 && !positions_1_1.done && (_a = positions_1.return)) _a.call(positions_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    ParticipantComponent.prototype.addComponentPerformer = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var cmp = new ComponentParticipant();
        cmp.id = component.id;
        cmp.metadataId = component.metadataId;
        cmp.methodCode = component.methodCode;
        cmp.methodName = component.methodName;
        cmp.name = component.name;
        cmp.actualParameters = component.actualParameters;
        cmp.type = 'wf.ComponentParticipantExpression';
        cmp.condition = component.condition;
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            var i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.id === cmp.id; }));
            if (i > -1) {
                this.participant.humanPerformerList[i] = cmp;
            }
            else {
                /** @type {?} */
                var index = void 0;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.humanPerformerList.push(cmp);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.id === cmp.id; }));
            if (i > -1) {
                this.participant.potentialOwnerList[i] = cmp;
            }
            else {
                /** @type {?} */
                var index = void 0;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.potentialOwnerList.push(cmp);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    ParticipantComponent.prototype.addReportingLinePerformer = /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    function (reportingLine) {
        var e_6, _a, e_7, _b;
        if (reportingLine.reportingReferObject === 'dept' && !reportingLine.refOrgId) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refOrgIdNotNull'));
        }
        else if (reportingLine.reportingReferObject !== 'dept' && !reportingLine.refUserId && !reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refUserIdNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                var i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === reportingLine.id; }));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    var reportingLines = this.participant.humanPerformerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.type === 'wf.ReportingLineParticipantExpression'; }));
                    try {
                        for (var reportingLines_1 = tslib_1.__values(reportingLines), reportingLines_1_1 = reportingLines_1.next(); !reportingLines_1_1.done; reportingLines_1_1 = reportingLines_1.next()) {
                            var r = reportingLines_1_1.value;
                            /** @type {?} */
                            var reportingLineData = (/** @type {?} */ (r));
                            if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                                reportingLineData.dimension === reportingLine.dimension &&
                                reportingLineData.refUserId === reportingLine.refUserId &&
                                reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                                reportingLineData.refOrgId === reportingLine.refOrgId) {
                                this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                                return;
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (reportingLines_1_1 && !reportingLines_1_1.done && (_a = reportingLines_1.return)) _a.call(reportingLines_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        function (h) { return h.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.humanPerformerList.push(reportingLine);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                var i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === reportingLine.id; }));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    var reportingLines = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.type === 'wf.ReportingLineParticipantExpression'; }));
                    try {
                        for (var reportingLines_2 = tslib_1.__values(reportingLines), reportingLines_2_1 = reportingLines_2.next(); !reportingLines_2_1.done; reportingLines_2_1 = reportingLines_2.next()) {
                            var r = reportingLines_2_1.value;
                            /** @type {?} */
                            var reportingLineData = (/** @type {?} */ (r));
                            if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                                reportingLineData.dimension === reportingLine.dimension &&
                                reportingLineData.refUserId === reportingLine.refUserId &&
                                reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                                reportingLineData.refOrgId === reportingLine.refOrgId) {
                                this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                                return;
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (reportingLines_2_1 && !reportingLines_2_1.done && (_b = reportingLines_2.return)) _b.call(reportingLines_2);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.potentialOwnerList.push(reportingLine);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    ParticipantComponent.prototype.addMatrixPerformer = /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    function (matrix) {
        var e_8, _a, e_9, _b;
        if (!matrix.conditionField1 && !matrix.conditionField2 && !matrix.conditionField3) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.atLeastOneCondition'));
        }
        else if (!matrix.dataFieldAlias) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.dataFieldAliasNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                var i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === matrix.id; }));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    var matrixParticipants = this.participant.humanPerformerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.type === 'wf.MatrixParticipantExpression'; }));
                    try {
                        for (var matrixParticipants_1 = tslib_1.__values(matrixParticipants), matrixParticipants_1_1 = matrixParticipants_1.next(); !matrixParticipants_1_1.done; matrixParticipants_1_1 = matrixParticipants_1.next()) {
                            var m = matrixParticipants_1_1.value;
                            /** @type {?} */
                            var matrixData = (/** @type {?} */ (m));
                            if (matrixData.matrixDefId === matrix.matrixDefId &&
                                matrixData.conditionField1 === matrix.conditionField1 &&
                                matrixData.conditionField2 === matrix.conditionField2 &&
                                matrixData.conditionField3 === matrix.conditionField3 &&
                                matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                                this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                                return;
                            }
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (matrixParticipants_1_1 && !matrixParticipants_1_1.done && (_a = matrixParticipants_1.return)) _a.call(matrixParticipants_1);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        function (h) { return h.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.humanPerformerList.push(matrix);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                var i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === matrix.id; }));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    var matrixParticipants = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.type === 'wf.MatrixParticipantExpression'; }));
                    try {
                        for (var matrixParticipants_2 = tslib_1.__values(matrixParticipants), matrixParticipants_2_1 = matrixParticipants_2.next(); !matrixParticipants_2_1.done; matrixParticipants_2_1 = matrixParticipants_2.next()) {
                            var m = matrixParticipants_2_1.value;
                            /** @type {?} */
                            var matrixData = (/** @type {?} */ (m));
                            if (matrixData.matrixDefId === matrix.matrixDefId &&
                                matrixData.conditionField1 === matrix.conditionField1 &&
                                matrixData.conditionField2 === matrix.conditionField2 &&
                                matrixData.conditionField3 === matrix.conditionField3 &&
                                matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                                this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                                return;
                            }
                        }
                    }
                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                    finally {
                        try {
                            if (matrixParticipants_2_1 && !matrixParticipants_2_1.done && (_b = matrixParticipants_2.return)) _b.call(matrixParticipants_2);
                        }
                        finally { if (e_9) throw e_9.error; }
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.potentialOwnerList.push(matrix);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    ParticipantComponent.prototype.addActivityExecutorPerformer = /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    function (activityExecutor) {
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            var i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId)); }));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removeHumanPerformer(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                var index = void 0;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.humanPerformerList.push(activityExecutor);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId)); }));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removePotentialOwner(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                var index = void 0;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.potentialOwnerList.push(activityExecutor);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @private
     * @param {?} organization
     * @return {?}
     */
    ParticipantComponent.prototype.addOrganizationParticipant = /**
     * @private
     * @param {?} organization
     * @return {?}
     */
    function (organization) {
        /** @type {?} */
        var organizationParticipant = new OrganizationParticipant();
        organizationParticipant.id = organization.id || ProcessDeUtil.GenerateElementId();
        organizationParticipant.type = 'wf.OrganizationParticipantExpression';
        organizationParticipant.condition = organization.condition;
        organizationParticipant.name = organization.name;
        organizationParticipant.actionScope = organization.actionScope;
        organizationParticipant.organizationLevel = organization.organizationLevel;
        organizationParticipant.organizationId = organization.organizationId;
        organizationParticipant.organizationCode = organization.organizationCode;
        organizationParticipant.organizationName = organization.organizationName;
        organizationParticipant.includeChildren = organization.includeChildren;
        organizationParticipant.parentsUntil = organization.parentsUntil;
        organizationParticipant.tag = organization.tag;
        if (this.type === 'humanPerformer') {
            this.participant.humanPerformerList = this.participant.humanPerformerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.type !== 'wf.OrganizationParticipantExpression'; }));
            /** @type {?} */
            var index = void 0;
            if (this.participant.humanPerformerList.length > 0) {
                index = Math.max.apply(Math, tslib_1.__spread(this.participant.humanPerformerList.map((/**
                 * @param {?} h
                 * @return {?}
                 */
                function (h) { return h.order; })))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.humanPerformerList.push(organizationParticipant);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.type !== 'wf.OrganizationParticipantExpression'; }));
            /** @type {?} */
            var index = void 0;
            if (this.participant.potentialOwnerList.length > 0) {
                index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.order; })))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.potentialOwnerList.push(organizationParticipant);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.editCancel = /**
     * @return {?}
     */
    function () {
        if (this.editDialog) {
            this.editDialog.close();
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ParticipantComponent.prototype.editPerformer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        this.editState = 'edit';
        this.type = type;
        /** @type {?} */
        var selectedRow;
        if (type === 'humanPerformer') {
            selectedRow = this.humanPerformerGrid.selectedRow;
        }
        else if (type === 'potentialOwner') {
            selectedRow = this.potentialOwnerGrid.selectedRow;
        }
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.participant.selectPerformer'));
            return;
        }
        /** @type {?} */
        var curPerformer = selectedRow.data;
        if (curPerformer) {
            /** @type {?} */
            var boxsize = this.attributeBoxSize(curPerformer.type);
            /** @type {?} */
            var modalConfig_1 = {
                title: this.localePipe.transform('component.participant.participantSelection'),
                width: boxsize.width,
                height: boxsize.height,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            this.compRef.instance.performerType = curPerformer.type;
            this.compRef.instance.editState = this.editState;
            switch (curPerformer.type) {
                case 'wf.PositionParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.UserParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.VariableParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.VariableParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    var url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + ((/** @type {?} */ (curPerformer))).reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (!res) {
                            _this.message.error(_this.localePipe.transform('component.participant.definitionDeleted'));
                            if (type === 'humanPerformer') {
                                _this.removeHumanPerformer();
                            }
                            else if (type === 'potentialOwner') {
                                _this.removePotentialOwner();
                            }
                        }
                        else {
                            _this.editDialog = _this.modalService.show(_this.compRef, modalConfig_1);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    var urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + ((/** @type {?} */ (curPerformer))).matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (!res) {
                            _this.message.error(_this.localePipe.transform('component.participant.matrixDeleted'));
                            if (type === 'humanPerformer') {
                                _this.removeHumanPerformer();
                            }
                            else if (type === 'potentialOwner') {
                                _this.removePotentialOwner();
                            }
                        }
                        else {
                            _this.editDialog = _this.modalService.show(_this.compRef, modalConfig_1);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ActivityExecutorParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.OrganizationParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.OrganizationParticipantExpression',
                        value: curPerformer
                    };
                    break;
            }
            if (curPerformer.type !== 'wf.ReportingLineParticipantExpression' &&
                curPerformer.type !== 'wf.MatrixParticipantExpression') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig_1);
            }
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ParticipantComponent.prototype.removePerformer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        if (type === 'humanPerformer') {
            if (this.humanPerformerGrid.selectedRow) {
                this.humanPerformerGrid.endCellEdit();
                /** @type {?} */
                var index = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === _this.humanPerformerGrid.selectedRow.data.id; }));
                this.participant.humanPerformerList.splice(index, 1);
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
        else if (type === 'potentialOwner') {
            if (this.potentialOwnerGrid.selectedRow) {
                this.potentialOwnerGrid.endCellEdit();
                /** @type {?} */
                var index = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === _this.potentialOwnerGrid.selectedRow.data.id; }));
                this.participant.potentialOwnerList.splice(index, 1);
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ParticipantComponent.prototype.clearPerformer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'humanPerformer') {
            this.participant.humanPerformerList = new Array();
        }
        else if (type === 'potentialOwner') {
            this.participant.potentialOwnerList = new Array();
        }
        this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ParticipantComponent.prototype.moveUp = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'humanPerformer') {
            /** @type {?} */
            var selectedRow = this.humanPerformerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            var performer_1 = selectedRow.data;
            /** @type {?} */
            var i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === performer_1.id; }));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            var index = this.participant.humanPerformerList[i].order;
            this.participant.humanPerformerList[i].order = this.participant.humanPerformerList[i - 1].order;
            this.participant.humanPerformerList[i - 1].order = index;
            this.swapArray(this.participant.humanPerformerList, i, i - 1);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            this.humanPerformerGrid.selectRow(performer_1.id, true);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            var performer_2 = selectedRow.data;
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === performer_2.id; }));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            var index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i - 1].order;
            this.participant.potentialOwnerList[i - 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i - 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer_2.id, true);
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ParticipantComponent.prototype.moveDown = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'humanPerformer') {
            /** @type {?} */
            var selectedRow = this.humanPerformerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            var performer_3 = selectedRow.data;
            /** @type {?} */
            var i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === performer_3.id; }));
            if (i === this.participant.humanPerformerList.length - 1) {
                return;
            }
            /** @type {?} */
            var index = this.participant.humanPerformerList[i].order;
            this.participant.humanPerformerList[i].order = this.participant.humanPerformerList[i + 1].order;
            this.participant.humanPerformerList[i + 1].order = index;
            this.swapArray(this.participant.humanPerformerList, i, i + 1);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            this.humanPerformerGrid.selectRow(performer_3.id, true);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            var performer_4 = selectedRow.data;
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === performer_4.id; }));
            if (i === this.participant.potentialOwnerList.length - 1) {
                return;
            }
            /** @type {?} */
            var index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i + 1].order;
            this.participant.potentialOwnerList[i + 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i + 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer_4.id, true);
        }
    };
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    ParticipantComponent.prototype.swapArray = /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    function (arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    };
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.removeHumanPerformer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.humanPerformerGrid.selectedRow) {
            this.humanPerformerGrid.endCellEdit();
            /** @type {?} */
            var i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.id === _this.humanPerformerGrid.selectedRow.data.id; }));
            this.participant.humanPerformerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectDefaultHandler'));
        }
    };
    /**
     * @return {?}
     */
    ParticipantComponent.prototype.removePotentialOwner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.potentialOwnerGrid.selectedRow) {
            this.potentialOwnerGrid.endCellEdit();
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.id === _this.potentialOwnerGrid.selectedRow.data.id; }));
            this.participant.potentialOwnerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectpotentialtHandler'));
        }
    };
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    ParticipantComponent.prototype.getUserPerformerDescription = /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    function (userPerformer) {
        if (userPerformer.tag === 'expression') {
            return userPerformer.performerId;
        }
        else {
            if (userPerformer.orgName) {
                return this.localePipe.transform('component.participant.org') + userPerformer.orgName;
            }
            else {
                return '';
            }
        }
    };
    /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    ParticipantComponent.prototype.getVariablePerformerDescription = /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    function (variablePerformer) {
        if (variablePerformer.tag === 'expression') {
            return variablePerformer.varValue;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ParticipantComponent.prototype.getPositionPerformerDescription = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.designerUIState.scene === 'inSuite') {
            return null;
        }
        if (position.positionType === '1') {
            if (position.orgId) {
                return this.localePipe.transform('component.participant.positionType1') + position.orgId;
            }
            else {
                return this.localePipe.transform('component.participant.positionType2');
            }
        }
        else if (position.positionType === '0') {
            return this.localePipe.transform('component.participant.positionType3');
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    ParticipantComponent.prototype.getComponentPerformerDescription = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var des = this.localePipe.transform('component.participant.comp') + position.name
            + this.localePipe.transform('component.participant.parameters');
        if (position.actualParameters && position.actualParameters.length > 0) {
            position.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                des += p.code + "\uFF1A" + p.value + "\uFF0C";
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    };
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    ParticipantComponent.prototype.getReportingLinePerformerDescription = /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    function (reportingLine) {
        /** @type {?} */
        var description = '';
        if (reportingLine.refUserId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refUserId;
        }
        if (reportingLine.refEmployeeId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refEmployeeId;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += "\uFF0C";
            }
            if (reportingLine.refEmployeeId) {
                description += "\uFF0C";
            }
            description += this.localePipe.transform('component.participant.referenceOrganization') + reportingLine.refOrgId;
        }
        return description;
    };
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    ParticipantComponent.prototype.getMatrixPerformerDescription = /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    function (matrix) {
        /** @type {?} */
        var description = '';
        if (matrix.conditionField1) {
            description += this.localePipe.transform('component.participant.condition1') + matrix.conditionFieldText1 + "\uFF0C";
        }
        if (matrix.conditionField2) {
            description += this.localePipe.transform('component.participant.condition2') + matrix.conditionFieldText2 + "\uFF0C";
        }
        if (matrix.conditionField3) {
            description += this.localePipe.transform('component.participant.condition3') + matrix.conditionFieldText3 + "\uFF0C";
        }
        if (matrix.dataFieldAlias) {
            description += this.localePipe.transform('component.participant.data') + matrix.dataFieldAlias + "\uFF0C";
        }
        return description.slice(0, description.length - 1);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ParticipantComponent.prototype.editConditon = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // this.expr.clearContext();
        var _this = this;
        var e_10, _a, e_11, _b, e_12, _c, e_13, _d;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_10) throw e_10.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _g = tslib_1.__values(this.designerUIState.subActivityContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    _loop_2(variable);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = tslib_1.__values(this.designerUIState.activityComponentContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_3(variable);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            if (_this.humanPerformerGrid && _this.humanPerformerGrid.selectedRow && _this.humanPerformerGrid.selectedRow.data) {
                /** @type {?} */
                var temp = _this.participant.humanPerformerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                function (h) { return h.id === _this.humanPerformerGrid.selectedRow.data.id; }));
                temp.condition = cond;
            }
            if (_this.potentialOwnerGrid && _this.potentialOwnerGrid.selectedRow && _this.potentialOwnerGrid.selectedRow.data) {
                /** @type {?} */
                var temp = _this.participant.potentialOwnerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                function (h) { return h.id === _this.potentialOwnerGrid.selectedRow.data.id; }));
                temp.condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ParticipantComponent.prototype.humanPerformerCopyToPotentialOwner = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        if (this.participant.humanPerformerList && this.participant.humanPerformerList.length > 0) {
            if (!this.participant.potentialOwnerList) {
                this.participant.potentialOwnerList = new Array();
            }
            (_a = this.participant.potentialOwnerList).push.apply(_a, tslib_1.__spread(this.participant.humanPerformerList));
            this.participant.humanPerformerList = new Array();
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            if (this.potentialOwnerGrid) {
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ParticipantComponent.prototype.potentialOwnerCopyToHumanPerformer = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        if (this.participant.potentialOwnerList && this.participant.potentialOwnerList.length > 0) {
            if (!this.participant.humanPerformerList) {
                this.participant.humanPerformerList = new Array();
            }
            /** @type {?} */
            var performers = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.type !== 'wf.OrganizationParticipantExpression'; }));
            if (performers && performers.length > 0) {
                // 此处直接push会导致order重复,需要重新排序
                (_a = this.participant.humanPerformerList).push.apply(_a, tslib_1.__spread(performers));
                this.participant.humanPerformerList.forEach((/**
                 * @param {?} human
                 * @param {?} index
                 * @return {?}
                 */
                function (human, index) {
                    human.order = index + 1;
                }));
                this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.type === 'wf.OrganizationParticipantExpression'; }));
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
                if (this.potentialOwnerGrid) {
                    this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ParticipantComponent.prototype.GetOrganizationType = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return ({ value: d.id, text: d.name }); })); }));
    };
    // 构造不同参与者选择界面的尺寸 2023-7-5
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    ParticipantComponent.prototype.attributeBoxSize = 
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    function (boxType) {
        /** @type {?} */
        var boxsize = {
            width: 760,
            height: 512
        };
        switch (boxType) {
            case 'wf.PositionParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 455;
                return boxsize;
            case 'wf.UserParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
            case 'wf.VariableParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 420;
                return boxsize;
                ;
            case 'wf.ReportingLineParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;
                ;
            case 'wf.MatrixParticipantExpression':
                boxsize.width = 780;
                boxsize.height = 420;
                return boxsize;
                ;
            case 'wf.ComponentParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;
                ;
            case 'wf.ActivityExecutorParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
                ;
            case 'wf.OrganizationParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 360;
                return boxsize;
                ;
        }
    };
    ParticipantComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-participant',
                    template: "<div class=\"f-page f-utils-overflow-xhya\">\r\n  <div class=\"f-page-main d-flex flex-column farris-overflow-y-auto\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section *ngIf=\"nodeType === 'userActivity'\" class=\"pt-0 f-section-form f-section-in-mainsubcard mb-1\" [showHeader]=\"false\" >\r\n      <div class=\"f-form-layout farris-form f-form-lable-auto farris-form-controls-inline\">\r\n        <div class=\"col-12 farris-group-wrap\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{'component.participant.allocationPolicy'|wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <farris-radiogroup [(ngModel)]=\"participant.assignStrategy.assignStrategy\" [data]=\"assignStrategyList\" name=\"assignStrategy\"\r\n                [horizontal]=\"true\" (changeValue)=\"assignStrategyChange($event)\">\r\n              </farris-radiogroup>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section *ngIf=\"nodeType === 'userActivity' && participant.assignStrategy.assignStrategy==='ASSIGN'\" class=\"pt-0 f-section-form f-section-in-mainsubcard\" [showHeader]=\"false\">\r\n      <div class=\"f-form-layout farris-form f-form-lable-auto farris-form-controls-inline\">\r\n        <div class=\"col-12 px-0 d-flex\">\r\n          <div class=\"col-4 farris-group-wrap\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.operator'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-combo-list [(ngModel)]=\"participant.assignStrategy.assignConfig.operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                  [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                  [panelHeight]=\"60\">\r\n                </farris-combo-list>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-auto farris-group-wrap f-form-label-xl\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.multiSelect'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-switch size=\"small\" [(ngModel)]=\"participant.assignStrategy.assignConfig.multiSelect\" name=\"multiSelect\">\r\n                </farris-switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-auto farris-group-wrap f-form-label-el\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.necessary'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-switch size=\"small\" [(ngModel)]=\"participant.assignStrategy.assignConfig.necessary\" name=\"necessary\">\r\n                </farris-switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <div class=\"d-flex flex-column\" [ngStyle]=\"{'height':nodeType === 'notifyActivity'? '470px': participant.assignStrategy.assignStrategy==='ASSIGN' ? '220px':'470px'}\">\r\n      <farris-section class=\"pt-0 f-section-grid\" [mainTitle]=\"nodeType === 'notifyActivity' ? ('component.participant.notifyRecipient' | wfLocale) : ('component.participant.defaultHandler' | wfLocale)\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\" style=\"overflow: initial;\">\r\n      <ng-template farrisSectionToolbar>\r\n        <div class=\"btn-group mr-2\"  fDropdown #dropdownEl=\"fDropdown\" [autoRectify]=\"true\">\r\n          <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n            {{'component.participant.new'|wfLocale}}\r\n          </farris-button>\r\n          <div class=\"dropdown-menu\" fDropdownMenu>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression' ,'humanPerformer')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','humanPerformer')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','humanPerformer')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','humanPerformer')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','humanPerformer')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','humanPerformer')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','humanPerformer')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n          </div>\r\n        </div>\r\n        <farris-button  [type]=\"'link'\" (click)=\"editPerformer('humanPerformer')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"removePerformer('humanPerformer')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('humanPerformer')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"moveUp('humanPerformer')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"moveDown('humanPerformer')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill\">\r\n        <farris-datagrid #humanPerformerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.humanPerformerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n          [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n          [multiSelect]=\"false\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n    </div>\r\n    <div *ngIf=\"nodeType === 'userActivity' && participant.assignStrategy.assignStrategy==='ASSIGN'\" class=\"d-flex flex-column\" style=\"height: 220px;\">\r\n      <farris-section class=\"pt-0 f-section-grid\" mainTitle=\"{{'component.participant.alternativeHandler'|wfLocale}}\" [enableAccordion]=\"''\"\r\n        [enableMaximize]=\"false\" [fill]=\"true\" style=\"overflow: initial;\">\r\n      <ng-template farrisSectionHeader>\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{'component.participant.alternativeHandler'|wfLocale}}</h4>\r\n        </div>\r\n        <label class=\"col-form-label mr-2 mb-0\">\r\n          <span class=\"farris-label-text\">{{'component.participant.isAllScope'|wfLocale}}</span>\r\n        </label>\r\n        <farris-switch size=\"small\" [(ngModel)]=\"participant.isAllScope\" name=\"isAllScope\" (valueChange)=\"switchChange($event)\">\r\n        </farris-switch>\r\n        <div class=\"f-toolbar\" [ngStyle]=\"{'visibility' : participant.isAllScope ? 'hidden' : 'visible'}\">\r\n          <div class=\"btn-group mr-2\"  fDropdown #dropdownE2=\"fDropdown\" [autoRectify]=\"true\">\r\n            <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n              {{'component.participant.new'|wfLocale}}\r\n            </farris-button>\r\n            <div class=\"dropdown-menu\" fDropdownMenu>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression','potentialOwner')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','potentialOwner')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','potentialOwner')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','potentialOwner')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','potentialOwner')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','potentialOwner')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','potentialOwner')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.OrganizationParticipantExpression','potentialOwner')\"><span>{{'component.participant.organization'|wfLocale}}\r\n              </span></li>\r\n            </div>\r\n          </div>\r\n          <farris-button  [type]=\"'link'\" (click)=\"editPerformer('potentialOwner')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"removePerformer('potentialOwner')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('potentialOwner')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveUp('potentialOwner')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveDown('potentialOwner')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n        </div>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill\">\r\n        <farris-datagrid #potentialOwnerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.potentialOwnerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n          [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n          [multiSelect]=\"false\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n    </div>\r\n  </section>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        ParticipantUIState,
                        WfLocalePipe
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ParticipantComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ParticipantUIState },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ExpressionService },
        { type: HttpService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    ParticipantComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        dropDownEl: [{ type: ViewChild, args: ['dropdownEl',] }],
        dropDownE2: [{ type: ViewChild, args: ['dropdownE2',] }],
        editFooter: [{ type: ViewChild, args: ['editFooter',] }],
        humanPerformerGrid: [{ type: ViewChild, args: ['humanPerformerGrid',] }],
        potentialOwnerGrid: [{ type: ViewChild, args: ['potentialOwnerGrid',] }],
        editorParams: [{ type: Input }],
        value: [{ type: Input }]
    };
    return ParticipantComponent;
}());
export { ParticipantComponent };
if (false) {
    /** @type {?} */
    ParticipantComponent.prototype.closeModal;
    /** @type {?} */
    ParticipantComponent.prototype.submitModal;
    /** @type {?} */
    ParticipantComponent.prototype.modalFooter;
    /** @type {?} */
    ParticipantComponent.prototype.dropDownEl;
    /** @type {?} */
    ParticipantComponent.prototype.dropDownE2;
    /** @type {?} */
    ParticipantComponent.prototype.editFooter;
    /** @type {?} */
    ParticipantComponent.prototype.humanPerformerGrid;
    /** @type {?} */
    ParticipantComponent.prototype.potentialOwnerGrid;
    /** @type {?} */
    ParticipantComponent.prototype.editorParams;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.preAssignStrategy;
    /** @type {?} */
    ParticipantComponent.prototype.nodeType;
    /** @type {?} */
    ParticipantComponent.prototype.editDialog;
    /** @type {?} */
    ParticipantComponent.prototype.compRef;
    /** @type {?} */
    ParticipantComponent.prototype.isClose;
    /** @type {?} */
    ParticipantComponent.prototype.participant;
    /** @type {?} */
    ParticipantComponent.prototype.editState;
    /** @type {?} */
    ParticipantComponent.prototype.type;
    /** @type {?} */
    ParticipantComponent.prototype.assignStrategyList;
    /** @type {?} */
    ParticipantComponent.prototype.operatorCollection;
    /** @type {?} */
    ParticipantComponent.prototype.modalConfig;
    /** @type {?} */
    ParticipantComponent.prototype.columns;
    /** @type {?} */
    ParticipantComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.localePipe;
}
var ParticipantConverter = /** @class */ (function () {
    function ParticipantConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ParticipantConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.humanPerformerList && data.humanPerformerList.length > 0) {
            return this.localePipe.transform("component.participant.set");
        }
        if (data && data.potentialOwnerList && data.potentialOwnerList.length > 0) {
            return this.localePipe.transform("component.participant.set");
        }
        if (data && data.isAllScope) {
            return this.localePipe.transform("component.participant.set");
        }
        return this.localePipe.transform("component.participant.notSet");
    };
    return ParticipantConverter;
}());
export { ParticipantConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParticipantConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,