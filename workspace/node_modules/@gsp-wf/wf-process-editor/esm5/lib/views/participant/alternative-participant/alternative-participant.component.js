/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { FDropdownDirective } from '@farris/ui-dropdown';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { ProcessDeUtil } from '../../../domain/process-de-util';
import { PerformerEditComponent } from '../../performer/views/performer-edit/performer-edit.component';
import { ComponentParticipant, OrganizationParticipant, ParticipantInfo } from '../participant.info';
import { ParticipantUIState } from '../participant.uistate';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
var AlternativeParticipantComponent = /** @class */ (function () {
    function AlternativeParticipantComponent(designerUIState, uistate, resolver, injector, modalService, message, expr, http, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.designerUIState = designerUIState;
        this.uistate = uistate;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.nodeType = 'notifyActivity';
        this.isClose = true;
        this.participant = new ParticipantInfo();
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.type = 'potentialOwner';
        this.operatorCollection = [
            { text: this.localePipe.transform('component.participant.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.participant.procInstCreator'), value: 'procInstCreator' }
        ];
        this.columns = [
            {
                field: 'order', width: 25, title: this.localePipe.transform('component.participant.order'),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
            }, {
                field: 'type', width: 50, title: this.localePipe.transform('component.participant.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            }, {
                field: 'performerName', width: 50, title: this.localePipe.transform('component.participant.performerName'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return d.performerName;
                        case 'wf.VariableParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.PositionParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.ComponentParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.ReportingLineParticipantExpression':
                            return ((/** @type {?} */ (d))).reportingLineDefName + '-' + ((/** @type {?} */ (d))).dimension;
                        case 'wf.MatrixParticipantExpression':
                            return ((/** @type {?} */ (d))).matrixDefName + '-' + ((/** @type {?} */ (d))).dataFieldAlias;
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName;
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'description', width: 100, title: this.localePipe.transform('component.participant.description'), showTips: true,
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return _this.getUserPerformerDescription(d);
                        case 'wf.VariableParticipantExpression':
                            return _this.getVariablePerformerDescription(d);
                        case 'wf.PositionParticipantExpression':
                            return _this.getPositionPerformerDescription(d);
                        case 'wf.ComponentParticipantExpression':
                            return _this.getComponentPerformerDescription(d);
                        case 'wf.ReportingLineParticipantExpression':
                            return _this.getReportingLinePerformerDescription(d);
                        case 'wf.MatrixParticipantExpression':
                            return _this.getMatrixPerformerDescription(d);
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName + '，且' + (((/** @type {?} */ (d))).includeChildren ? '包含下级' : '不包含下级');
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'condition', width: 60, title: this.localePipe.transform('component.participant.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    /**
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.nodeType = this.editorParams.nodeType;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.switchChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            this.clearPerformer('potentialOwner');
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.assignStrategyChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        // this.preAssignStrategy = data;
        if (data === 'ALL') {
            this.participant.isAllScope = true;
            this.clearPerformer('potentialOwner');
        }
        else {
            this.participant.isAllScope = false;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.isEnable = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            this.participant.isAllScope = true;
            this.clearPerformer('potentialOwner');
        }
        else {
            this.participant.isAllScope = false;
        }
    };
    /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addPerformer = /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    function (performerType, type) {
        this.editState = 'new';
        this.type = type;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.performerType = performerType;
        /** @type {?} */
        var boxsize = this.attributeBoxSize(performerType);
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.participant.participantSelection'),
            width: boxsize.width,
            height: boxsize.height,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
        // this.dropDownEl.close();
        if (this.dropDownE2) {
            this.dropDownE2.close();
        }
    };
    /**
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.editOK = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b;
        this.isClose = true;
        if (this.compRef) {
            /** @type {?} */
            var re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                try {
                    for (var _c = tslib_1.__values(re.userPerformers), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var p = _d.value;
                        this.addUserPerformer(p);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (re.variable && re.variable !== null && re.variable.performerId) {
                this.addvariablePerformer(re.variable);
            }
            // 2023-7-28 组织岗支持多选
            if (re.positions && re.positions.length > 0) {
                this.addPositionPerformer(re.positions);
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                this.addComponentPerformer(re.component);
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                this.addReportingLinePerformer(re.reportingLine);
            }
            if (re.matrix && re.matrix.matrixDefId) {
                this.addMatrixPerformer(re.matrix);
            }
            if (re.activityExecutorPerformers && re.activityExecutorPerformers.length > 0) {
                try {
                    for (var _e = tslib_1.__values(re.activityExecutorPerformers), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var a = _f.value;
                        this.addActivityExecutorPerformer(a);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (re.organizationParticipant) {
                this.addOrganizationParticipant(re.organizationParticipant);
            }
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
        // 编辑完成后刷新两个组件
        // this.humanPerformerGrid.refresh();
        this.potentialOwnerGrid.refresh();
    };
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addUserPerformer = /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    function (userPerformer) {
        if (this.type === 'potentialOwner') {
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId)); }));
            if (i > -1) {
                // this.participant.potentialOwnerList[i] = userPerformer;
            }
            else {
                if (this.editState === 'edit') {
                    this.removePotentialOwner();
                }
                /** @type {?} */
                var index = void 0;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.potentialOwnerList.push(userPerformer);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addvariablePerformer = /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    function (variable) {
        /** @type {?} */
        var v = variable;
        if (!v || !v.varValue) {
            this.message.info(this.localePipe.transform('component.participant.selectProcessVariables'));
            this.isClose = false;
        }
        else if (!v.varType) {
            this.message.info(this.localePipe.transform('component.participant.selectVariableValueType'));
            this.isClose = false;
        }
        else if (!v.relation) {
            this.message.info(this.localePipe.transform('component.participant.selectRelation'));
            this.isClose = false;
        }
        else {
            if (this.type === 'potentialOwner') {
                /** @type {?} */
                var i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId)); }));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removePotentialOwner();
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.potentialOwnerList.push(variable);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addPositionPerformer = /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    function (positions) {
        var e_3, _a;
        var _loop_1 = function (position) {
            if (!position.performerId) {
                this_1.message.info(this_1.localePipe.transform('component.participant.selectPosition'));
                this_1.isClose = false;
            }
            else {
                if ((!position.orgType || position.orgType == null) && (position.isRequired && position.positionType === '1')) {
                    this_1.message.info(this_1.localePipe.transform('component.participant.selectOrgType'));
                    this_1.isClose = false;
                }
                else if ((!position.orgId || position.orgId == null) && (position.isRequired && position.positionType === '1')) {
                    this_1.message.info(this_1.localePipe.transform('component.participant.orgFill'));
                    this_1.isClose = false;
                }
                else {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    if (this_1.type === 'potentialOwner') {
                        /** @type {?} */
                        var i = this_1.participant.potentialOwnerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            var p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this_1.participant.potentialOwnerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            var index = void 0;
                            if (this_1.participant.potentialOwnerList.length > 0) {
                                index = Math.max.apply(Math, tslib_1.__spread(this_1.participant.potentialOwnerList.map((/**
                                 * @param {?} p
                                 * @return {?}
                                 */
                                function (p) { return p.order; })))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this_1.participant.potentialOwnerList.push(position);
                        }
                        this_1.potentialOwnerGrid.loadData(this_1.participant.potentialOwnerList);
                    }
                }
            }
        };
        var this_1 = this;
        try {
            for (var positions_1 = tslib_1.__values(positions), positions_1_1 = positions_1.next(); !positions_1_1.done; positions_1_1 = positions_1.next()) {
                var position = positions_1_1.value;
                _loop_1(position);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (positions_1_1 && !positions_1_1.done && (_a = positions_1.return)) _a.call(positions_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addComponentPerformer = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var cmp = new ComponentParticipant();
        cmp.id = component.id;
        cmp.metadataId = component.metadataId;
        cmp.methodCode = component.methodCode;
        cmp.methodName = component.methodName;
        cmp.name = component.name;
        cmp.actualParameters = component.actualParameters;
        cmp.type = 'wf.ComponentParticipantExpression';
        cmp.condition = component.condition;
        if (this.type === 'potentialOwner') {
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.id === cmp.id; }));
            if (i > -1) {
                this.participant.potentialOwnerList[i] = cmp;
            }
            else {
                /** @type {?} */
                var index = void 0;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.potentialOwnerList.push(cmp);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addReportingLinePerformer = /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    function (reportingLine) {
        var e_4, _a;
        if (reportingLine.reportingReferObject === 'dept' && !reportingLine.refOrgId) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refOrgIdNotNull'));
        }
        else if (reportingLine.reportingReferObject !== 'dept' && !reportingLine.refUserId && !reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refUserIdNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'potentialOwner') {
                /** @type {?} */
                var i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === reportingLine.id; }));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    var reportingLines = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.type === 'wf.ReportingLineParticipantExpression'; }));
                    try {
                        for (var reportingLines_1 = tslib_1.__values(reportingLines), reportingLines_1_1 = reportingLines_1.next(); !reportingLines_1_1.done; reportingLines_1_1 = reportingLines_1.next()) {
                            var r = reportingLines_1_1.value;
                            /** @type {?} */
                            var reportingLineData = (/** @type {?} */ (r));
                            if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                                reportingLineData.dimension === reportingLine.dimension &&
                                reportingLineData.refUserId === reportingLine.refUserId &&
                                reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                                reportingLineData.refOrgId === reportingLine.refOrgId) {
                                this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                                return;
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (reportingLines_1_1 && !reportingLines_1_1.done && (_a = reportingLines_1.return)) _a.call(reportingLines_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.potentialOwnerList.push(reportingLine);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addMatrixPerformer = /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    function (matrix) {
        var e_5, _a;
        if (!matrix.conditionField1 && !matrix.conditionField2 && !matrix.conditionField3) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.atLeastOneCondition'));
        }
        else if (!matrix.dataFieldAlias) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.dataFieldAliasNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'potentialOwner') {
                /** @type {?} */
                var i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === matrix.id; }));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    var matrixParticipants = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) { return h.type === 'wf.MatrixParticipantExpression'; }));
                    try {
                        for (var matrixParticipants_1 = tslib_1.__values(matrixParticipants), matrixParticipants_1_1 = matrixParticipants_1.next(); !matrixParticipants_1_1.done; matrixParticipants_1_1 = matrixParticipants_1.next()) {
                            var m = matrixParticipants_1_1.value;
                            /** @type {?} */
                            var matrixData = (/** @type {?} */ (m));
                            if (matrixData.matrixDefId === matrix.matrixDefId &&
                                matrixData.conditionField1 === matrix.conditionField1 &&
                                matrixData.conditionField2 === matrix.conditionField2 &&
                                matrixData.conditionField3 === matrix.conditionField3 &&
                                matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                                this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                                return;
                            }
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (matrixParticipants_1_1 && !matrixParticipants_1_1.done && (_a = matrixParticipants_1.return)) _a.call(matrixParticipants_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                    /** @type {?} */
                    var index = void 0;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.order; })))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.potentialOwnerList.push(matrix);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    };
    /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addActivityExecutorPerformer = /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    function (activityExecutor) {
        if (this.type === 'potentialOwner') {
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId)); }));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removePotentialOwner(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                var index = void 0;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.order; })))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.potentialOwnerList.push(activityExecutor);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @param {?} organization
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.addOrganizationParticipant = /**
     * @param {?} organization
     * @return {?}
     */
    function (organization) {
        /** @type {?} */
        var organizationParticipant = new OrganizationParticipant();
        organizationParticipant.id = organization.id || ProcessDeUtil.GenerateElementId();
        organizationParticipant.type = 'wf.OrganizationParticipantExpression';
        organizationParticipant.condition = organization.condition;
        organizationParticipant.name = organization.name;
        organizationParticipant.actionScope = organization.actionScope;
        organizationParticipant.organizationLevel = organization.organizationLevel;
        organizationParticipant.organizationId = organization.organizationId;
        organizationParticipant.organizationCode = organization.organizationCode;
        organizationParticipant.organizationName = organization.organizationName;
        organizationParticipant.includeChildren = organization.includeChildren;
        organizationParticipant.parentsUntil = organization.parentsUntil;
        organizationParticipant.tag = organization.tag;
        if (this.type === 'potentialOwner') {
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.type !== 'wf.OrganizationParticipantExpression'; }));
            /** @type {?} */
            var index = void 0;
            if (this.participant.potentialOwnerList.length > 0) {
                index = Math.max.apply(Math, tslib_1.__spread(this.participant.potentialOwnerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.order; })))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.potentialOwnerList.push(organizationParticipant);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.editCancel = /**
     * @return {?}
     */
    function () {
        if (this.editDialog) {
            this.editDialog.close();
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.editPerformer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        this.editState = 'edit';
        this.type = type;
        /** @type {?} */
        var selectedRow;
        if (type === 'potentialOwner') {
            selectedRow = this.potentialOwnerGrid.selectedRow;
        }
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.participant.selectPerformer'));
            return;
        }
        /** @type {?} */
        var curPerformer = selectedRow.data;
        if (curPerformer) {
            /** @type {?} */
            var boxsize = this.attributeBoxSize(curPerformer.type);
            /** @type {?} */
            var modalConfig_1 = {
                title: this.localePipe.transform('component.participant.participantSelection'),
                width: boxsize.width,
                height: boxsize.height,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            this.compRef.instance.performerType = curPerformer.type;
            this.compRef.instance.editState = this.editState;
            switch (curPerformer.type) {
                case 'wf.PositionParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.UserParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.VariableParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.VariableParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    var url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + ((/** @type {?} */ (curPerformer))).reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (!res) {
                            _this.message.error(_this.localePipe.transform('component.participant.definitionDeleted'));
                            if (type === 'potentialOwner') {
                                _this.removePotentialOwner();
                            }
                        }
                        else {
                            _this.editDialog = _this.modalService.show(_this.compRef, modalConfig_1);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    var urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + ((/** @type {?} */ (curPerformer))).matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (!res) {
                            _this.message.error(_this.localePipe.transform('component.participant.matrixDeleted'));
                            if (type === 'potentialOwner') {
                                _this.removePotentialOwner();
                            }
                        }
                        else {
                            _this.editDialog = _this.modalService.show(_this.compRef, modalConfig_1);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ActivityExecutorParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.OrganizationParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.OrganizationParticipantExpression',
                        value: curPerformer
                    };
                    break;
            }
            if (curPerformer.type !== 'wf.ReportingLineParticipantExpression' &&
                curPerformer.type !== 'wf.MatrixParticipantExpression') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig_1);
            }
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.removePerformer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        if (type === 'potentialOwner') {
            if (this.potentialOwnerGrid.selectedRow) {
                this.potentialOwnerGrid.endCellEdit();
                /** @type {?} */
                var index = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === _this.potentialOwnerGrid.selectedRow.data.id; }));
                this.participant.potentialOwnerList.splice(index, 1);
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.clearPerformer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'potentialOwner') {
            this.participant.potentialOwnerList = new Array();
        }
        // this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.moveUp = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'potentialOwner') {
            /** @type {?} */
            var selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            var performer_1 = selectedRow.data;
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === performer_1.id; }));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            var index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i - 1].order;
            this.participant.potentialOwnerList[i - 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i - 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer_1.id, true);
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.moveDown = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'potentialOwner') {
            /** @type {?} */
            var selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            var performer_2 = selectedRow.data;
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === performer_2.id; }));
            if (i === this.participant.potentialOwnerList.length - 1) {
                return;
            }
            /** @type {?} */
            var index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i + 1].order;
            this.participant.potentialOwnerList[i + 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i + 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer_2.id, true);
        }
    };
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.swapArray = /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    function (arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    };
    /**
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.removePotentialOwner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.potentialOwnerGrid.selectedRow) {
            this.potentialOwnerGrid.endCellEdit();
            /** @type {?} */
            var i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.id === _this.potentialOwnerGrid.selectedRow.data.id; }));
            this.participant.potentialOwnerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectpotentialtHandler'));
        }
    };
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.getUserPerformerDescription = /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    function (userPerformer) {
        if (userPerformer.tag === 'expression') {
            return userPerformer.performerId;
        }
        else {
            if (userPerformer.orgName) {
                return this.localePipe.transform('component.participant.org') + userPerformer.orgName;
            }
            else {
                return '';
            }
        }
    };
    /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.getVariablePerformerDescription = /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    function (variablePerformer) {
        if (variablePerformer.tag === 'expression') {
            return variablePerformer.varValue;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.getPositionPerformerDescription = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.designerUIState.scene === 'inSuite') {
            return null;
        }
        if (position.positionType === '1') {
            if (position.orgId) {
                return this.localePipe.transform('component.participant.positionType1') + position.orgId;
            }
            else {
                return this.localePipe.transform('component.participant.positionType2');
            }
        }
        else if (position.positionType === '0') {
            return this.localePipe.transform('component.participant.positionType3');
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.getComponentPerformerDescription = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var des = this.localePipe.transform('component.participant.comp') + position.name
            + this.localePipe.transform('component.participant.parameters');
        if (position.actualParameters && position.actualParameters.length > 0) {
            position.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                des += p.code + "\uFF1A" + p.value + "\uFF0C";
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    };
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.getReportingLinePerformerDescription = /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    function (reportingLine) {
        /** @type {?} */
        var description = '';
        if (reportingLine.refUserId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refUserId;
        }
        if (reportingLine.refEmployeeId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refEmployeeId;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += "\uFF0C";
            }
            if (reportingLine.refEmployeeId) {
                description += "\uFF0C";
            }
            description += this.localePipe.transform('component.participant.referenceOrganization') + reportingLine.refOrgId;
        }
        return description;
    };
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.getMatrixPerformerDescription = /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    function (matrix) {
        /** @type {?} */
        var description = '';
        if (matrix.conditionField1) {
            description += this.localePipe.transform('component.participant.condition1') + matrix.conditionFieldText1 + "\uFF0C";
        }
        if (matrix.conditionField2) {
            description += this.localePipe.transform('component.participant.condition2') + matrix.conditionFieldText2 + "\uFF0C";
        }
        if (matrix.conditionField3) {
            description += this.localePipe.transform('component.participant.condition3') + matrix.conditionFieldText3 + "\uFF0C";
        }
        if (matrix.dataFieldAlias) {
            description += this.localePipe.transform('component.participant.data') + matrix.dataFieldAlias + "\uFF0C";
        }
        return description.slice(0, description.length - 1);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.editConditon = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_6, _a, e_7, _b, e_8, _c, e_9, _d;
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _g = tslib_1.__values(this.designerUIState.subActivityContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    _loop_2(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = tslib_1.__values(this.designerUIState.activityComponentContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_3(variable);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            if (_this.potentialOwnerGrid && _this.potentialOwnerGrid.selectedRow && _this.potentialOwnerGrid.selectedRow.data) {
                /** @type {?} */
                var temp = _this.participant.potentialOwnerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                function (h) { return h.id === _this.potentialOwnerGrid.selectedRow.data.id; }));
                temp.condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.GetOrganizationType = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return ({ value: d.id, text: d.name }); })); }));
    };
    // 构造不同参与者选择界面的尺寸 2023-7-5
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    AlternativeParticipantComponent.prototype.attributeBoxSize = 
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    function (boxType) {
        /** @type {?} */
        var boxsize = {
            width: 760,
            height: 512
        };
        switch (boxType) {
            case 'wf.PositionParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 455;
                return boxsize;
            case 'wf.UserParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
            case 'wf.VariableParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 420;
                return boxsize;
                ;
            case 'wf.ReportingLineParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;
                ;
            case 'wf.MatrixParticipantExpression':
                boxsize.width = 780;
                boxsize.height = 420;
                return boxsize;
                ;
            case 'wf.ComponentParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;
                ;
            case 'wf.ActivityExecutorParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
                ;
            case 'wf.OrganizationParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 360;
                return boxsize;
                ;
        }
    };
    AlternativeParticipantComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wf-alternative-participant',
                    template: "<div class=\"f-page-main d-flex flex-column farris-overflow-y-auto farris-overflow-x-auto\" style=\"height: 300px\">\r\n  <div class=\"f-page-header\">\r\n    <div class=\"farris-group-wrap\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\" style=\"width: 4.9rem\">\r\n          <span class=\"farris-label-text\">{{'component.orgPotentialOwner.limit'|wfLocale}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap ml-1\">\r\n          <farris-switch [(ngModel)]=\"participant.isAllScope\" name=\"enable\" (valueChange)=\"isEnable($event)\"></farris-switch>\r\n        </div>\r\n        <div class=\"f-toolbar last-div farris-form-controls-inline\" [ngStyle]=\"{'visibility' : participant.isAllScope ? 'visible' : 'hidden'}\">\r\n          <div class=\"btn-group mr-2\"  fDropdown #dropdownE2=\"fDropdown\" [autoRectify]=\"true\">\r\n            <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n              {{'component.participant.new'|wfLocale}}\r\n            </farris-button>\r\n            <div class=\"dropdown-menu\" fDropdownMenu>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression','potentialOwner')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','potentialOwner')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','potentialOwner')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','potentialOwner')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','potentialOwner')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','potentialOwner')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','potentialOwner')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.OrganizationParticipantExpression','potentialOwner')\"><span>{{'component.participant.organization'|wfLocale}}\r\n              </span></li>\r\n            </div>\r\n          </div>\r\n          <farris-button  [type]=\"'link'\" (click)=\"editPerformer('potentialOwner')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"removePerformer('potentialOwner')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('potentialOwner')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveUp('potentialOwner')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveDown('potentialOwner')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"f-utils-fill farris-overflow-y-auto\">\r\n    <farris-datagrid #potentialOwnerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.potentialOwnerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n      [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n      [multiSelect]=\"false\">\r\n    </farris-datagrid>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        ParticipantUIState,
                        WfLocalePipe
                    ],
                    styles: [".container{display:flex;justify-content:space-between}.last-div{margin-left:auto}"]
                }] }
    ];
    /** @nocollapse */
    AlternativeParticipantComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ParticipantUIState },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ExpressionService },
        { type: HttpService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    AlternativeParticipantComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        dropDownE2: [{ type: ViewChild, args: ['dropdownE2',] }],
        editFooter: [{ type: ViewChild, args: ['editFooter',] }],
        potentialOwnerGrid: [{ type: ViewChild, args: ['potentialOwnerGrid',] }],
        editorParams: [{ type: Input }]
    };
    return AlternativeParticipantComponent;
}());
export { AlternativeParticipantComponent };
if (false) {
    /** @type {?} */
    AlternativeParticipantComponent.prototype.closeModal;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.submitModal;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.modalFooter;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.dropDownE2;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.editFooter;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.potentialOwnerGrid;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.editorParams;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.nodeType;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.editDialog;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.compRef;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.isClose;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.participant;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.editState;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.type;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.operatorCollection;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.columns;
    /** @type {?} */
    AlternativeParticipantComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    AlternativeParticipantComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,