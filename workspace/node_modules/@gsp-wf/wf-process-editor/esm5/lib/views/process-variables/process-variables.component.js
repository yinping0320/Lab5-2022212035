/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, EventEmitter, Output, Input, ViewChild, TemplateRef, Injector, ComponentFactoryResolver, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { ProcessVariable } from './process-variable.entity';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ConstantEditComponent } from '../variable-setting/views/constant-edit/constant-edit.component';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ComponentEditComponent } from '../variable-setting/views/component-edit/component-edit.component';
import { of } from 'rxjs';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var ProcessVariablesComponent = /** @class */ (function () {
    function ProcessVariablesComponent(message, resolver, injector, modalService, uistate, expr, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.uistate = uistate;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.variableSetting = false;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.variableSetEmitter = new EventEmitter();
        this.value = new Array();
        this.selectedValue = new Array();
        this.editorParams = {};
        this.basicTypes = [
            { value: 'String', text: this.localePipe.transform('component.processVariables.string') },
            { value: 'Integer', text: this.localePipe.transform('component.processVariables.integer') },
            { value: 'Decimal', text: this.localePipe.transform('component.processVariables.decimal') },
            { value: 'Boolean', text: this.localePipe.transform('component.processVariables.boolean') },
        ];
        this.tags = [
            { value: 'constant', text: this.localePipe.transform('component.processVariables.constant') },
            { value: 'expression', text: this.localePipe.transform('component.processVariables.expression') },
            { value: 'component', text: this.localePipe.transform('component.processVariables.component') }
        ];
        this.columns = [
            {
                field: 'name', width: 80, title: this.localePipe.transform('component.processVariables.name'), sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'documentation', width: 80, title: this.localePipe.transform('component.processVariables.documentation'), sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'basicType', width: 60, title: this.localePipe.transform('component.processVariables.basicType'), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'description', width: 100, title: this.localePipe.transform('component.processVariables.description'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'tag', width: 60, title: this.localePipe.transform('component.processVariables.tag'), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto',
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                }
            }, {
                field: 'valueText', width: 120, title: this.localePipe.transform('component.processVariables.valueText'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.processVariables.processVariables'),
            width: 1070,
            height: 510,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            var column = param.column;
            if (column.field === 'valueText') {
                if (!((/** @type {?} */ (rowData))).tag) {
                    return of(false);
                }
                if (((/** @type {?} */ (rowData))).tag === _this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.variableSetting) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== 'tag'
                && c.field !== 'valueText' && c.field !== 'description'; }));
        }
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var variable = new ProcessVariable();
        this.value = this.value.concat([variable]);
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info(this.localePipe.transform('component.processVariables.notSelected'));
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v.id !== selected.data.id; }));
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.variableSetting) {
            /** @type {?} */
            var selecteds = this.grid.checkeds;
            if (selecteds.length > 0) {
                if (this.varValidator()) {
                    this.variableSetEmitter.emit(selecteds);
                }
            }
            else {
                this.message.info(this.localePipe.transform('component.processVariables.notSelected'));
            }
        }
        else {
            this.grid.endCellEdit();
            if (this.validator()) {
                /** @type {?} */
                var object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessVariablesComponent.prototype.endEdit = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.valueEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[0].value:
                this.editConstant(e);
                break;
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editConstant = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ConstantEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = data.value;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.processVariables.constant'),
            width: 340,
            height: 280,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editExpression = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c;
        // this.expr.clearContext();
        /** @type {?} */
        var data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _d = tslib_1.__values(this.uistate.schemas), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var schema = _e.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _f = tslib_1.__values(this.uistate.subActivityContext), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var variable = _g.value;
                    _loop_1(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_c = context_1.return)) _c.call(context_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            e.form.bindingData.value = re;
            e.form.value.value = re;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editComponent = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            e.form.bindingData.value = re.Id;
            e.form.value.value = re.Id;
            e.form.value.component = re;
            e.form.bindingData.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.processVariables.component'),
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @return {?}
     */
    ProcessVariablesComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_4, _a;
        try {
            for (var _b = tslib_1.__values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (!item.name) {
                    this.message.warning(this.localePipe.transform('component.processVariables.variableNumberEmpty'));
                    return false;
                }
                if (!item.documentation) {
                    this.message.warning(this.localePipe.transform('component.processVariables.variableNameEmpty'));
                    return false;
                }
                if (!this.IsMatchVariableNameRules(item.name)) {
                    this.message.warning(this.localePipe.transform('component.processVariables.variableNumberNotStandard'));
                    return false;
                }
                if (item.value && !item.tag) {
                    this.message.warning(this.localePipe.transform('component.processVariables.tagNotEmpty'));
                    return false;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (this.value.length > 1) {
            for (var i = 0; i < this.value.length; i++) {
                /** @type {?} */
                var code1 = this.value[i].name;
                for (var j = i + 1; j < this.value.length; j++) {
                    /** @type {?} */
                    var code2 = this.value[j].name;
                    if (code1 === code2) {
                        this.message.warning(this.localePipe.transform('component.processVariables.codeDuplicates'));
                        return false;
                    }
                }
            }
        }
        return true;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    ProcessVariablesComponent.prototype.IsMatchVariableNameRules = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;
        if (Regx.test(str)) {
            return true;
        }
        else {
            return false;
        }
    };
    // 变量赋值专用校验
    // 变量赋值专用校验
    /**
     * @private
     * @return {?}
     */
    ProcessVariablesComponent.prototype.varValidator = 
    // 变量赋值专用校验
    /**
     * @private
     * @return {?}
     */
    function () {
        var e_5, _a;
        var _loop_2 = function (item) {
            if (this_1.selectedValue.length && this_1.selectedValue.length > 0) {
                if (this_1.selectedValue.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v.variableCode === item.data.name; })).length > 0) {
                    this_1.message.warning(this_1.localePipe.transform('component.processVariables.alreadyExists'));
                    return { value: false };
                }
            }
        };
        var this_1 = this;
        try {
            for (var _b = tslib_1.__values(this.grid.checkeds), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                var state_1 = _loop_2(item);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return true;
    };
    ProcessVariablesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-process-variables',
                    template: "<div class=\"f-page\">\r\n  <div *ngIf=\"!variableSetting\" class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"delete()\">{{'component.processVariables.delete' | wfLocale}}</button>\r\n        <button class=\"btn btn-primary\" (click)=\"add()\">{{'component.processVariables.add' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"!variableSetting\" [editMode]=\"'cell'\" [pagination]=\"false\" (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\"\r\n        [showCheckbox]=\"variableSetting\" [multiSelect]=\"variableSetting\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"variableSetting\"\r\n        [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.processVariables.number' | wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.processVariables.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.processVariables.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessVariablesComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    ProcessVariablesComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        variableSetting: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        variableSetEmitter: [{ type: Output }],
        value: [{ type: Input }],
        selectedValue: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return ProcessVariablesComponent;
}());
export { ProcessVariablesComponent };
if (false) {
    /** @type {?} */
    ProcessVariablesComponent.prototype.cls;
    /** @type {?} */
    ProcessVariablesComponent.prototype.variableSetting;
    /** @type {?} */
    ProcessVariablesComponent.prototype.closeModal;
    /** @type {?} */
    ProcessVariablesComponent.prototype.submitModal;
    /** @type {?} */
    ProcessVariablesComponent.prototype.variableSetEmitter;
    /** @type {?} */
    ProcessVariablesComponent.prototype.value;
    /** @type {?} */
    ProcessVariablesComponent.prototype.selectedValue;
    /** @type {?} */
    ProcessVariablesComponent.prototype.editorParams;
    /** @type {?} */
    ProcessVariablesComponent.prototype.modalFooter;
    /** @type {?} */
    ProcessVariablesComponent.prototype.grid;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.basicTypes;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.tags;
    /** @type {?} */
    ProcessVariablesComponent.prototype.columns;
    /** @type {?} */
    ProcessVariablesComponent.prototype.modalConfig;
    /** @type {?} */
    ProcessVariablesComponent.prototype.beforeEdit;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.localePipe;
}
var ProcessVariablesConverter = /** @class */ (function () {
    function ProcessVariablesConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessVariablesConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.processVariables.set");
        }
        else {
            return this.localePipe.transform("component.processVariables.notSet");
        }
    };
    return ProcessVariablesConverter;
}());
export { ProcessVariablesConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,