/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { HttpService, SessionService } from "@ecp-caf/caf-common";
import { NotifyService } from "@farris/ui-notify";
import { BusinessObjectRtService } from "@gsp-lcm/bo-rt-service";
import { TranslateService } from "@ngx-translate/core";
import { map } from "rxjs/operators";
import { DocuTypeHelperEntity } from "./entity/DocuTypeHelperEntity";
var BillTypeHelpService = /** @class */ (function () {
    function BillTypeHelpService(boRtService, httpClient, httpService, sessionService, notify, translate) {
        this.boRtService = boRtService;
        this.httpClient = httpClient;
        this.httpService = httpService;
        this.sessionService = sessionService;
        this.notify = notify;
        this.translate = translate;
        this.documentTypeUrl = "/api/runtime/aif/v1.0/documenttype";
    }
    /**
     * @return {?}
     */
    BillTypeHelpService.prototype.findDocumentTypeEntites = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var body = {};
        return this.httpService.post(this.documentTypeUrl + "/docutypehelper", body).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.map((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                /** @type {?} */
                var e = new DocuTypeHelperEntity();
                e.LoadFromJsonObject(it);
                return e;
            }));
        })));
    };
    BillTypeHelpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BillTypeHelpService.ctorParameters = function () { return [
        { type: BusinessObjectRtService },
        { type: HttpService },
        { type: HttpService },
        { type: SessionService },
        { type: NotifyService },
        { type: TranslateService }
    ]; };
    return BillTypeHelpService;
}());
export { BillTypeHelpService };
if (false) {
    /** @type {?} */
    BillTypeHelpService.prototype.documentTypeUrl;
    /** @type {?} */
    BillTypeHelpService.prototype.boRtService;
    /** @type {?} */
    BillTypeHelpService.prototype.httpClient;
    /** @type {?} */
    BillTypeHelpService.prototype.httpService;
    /** @type {?} */
    BillTypeHelpService.prototype.sessionService;
    /** @type {?} */
    BillTypeHelpService.prototype.notify;
    /** @type {?} */
    BillTypeHelpService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10eXBlLWhlbHAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvYmlsbC10eXBlLWhlbHAvYmlsbC10eXBlLWhlbHAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFckU7SUFJSSw2QkFDVyxXQUFvQyxFQUNwQyxVQUF1QixFQUN2QixXQUF3QixFQUN4QixjQUE4QixFQUM5QixNQUFxQixFQUNyQixTQUEyQjtRQUwzQixnQkFBVyxHQUFYLFdBQVcsQ0FBeUI7UUFDcEMsZUFBVSxHQUFWLFVBQVUsQ0FBYTtRQUN2QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUNyQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQVJ0QyxvQkFBZSxHQUFHLG9DQUFvQyxDQUFDO0lBVXZELENBQUM7Ozs7SUFFRCxxREFBdUI7OztJQUF2Qjs7WUFDVSxJQUFJLEdBQUcsRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUksSUFBSSxDQUFDLGVBQWUsb0JBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUM3RSxHQUFHOzs7O1FBQ0MsVUFBQyxHQUFRO1lBQ0wsT0FBTyxHQUFHLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsRUFBRTs7b0JBQ1AsQ0FBQyxHQUFHLElBQUksb0JBQW9CLEVBQUU7Z0JBQ3BDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDekIsT0FBTyxDQUFDLENBQUM7WUFDYixDQUFDLEVBQUMsQ0FBQztRQUNQLENBQUMsRUFDSixDQUNKLENBQUM7SUFDTixDQUFDOztnQkEzQkosVUFBVTs7OztnQkFMRix1QkFBdUI7Z0JBRnZCLFdBQVc7Z0JBQVgsV0FBVztnQkFBRSxjQUFjO2dCQUMzQixhQUFhO2dCQUViLGdCQUFnQjs7SUFnQ3pCLDBCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0EzQlksbUJBQW1COzs7SUFDNUIsOENBQXVEOztJQUduRCwwQ0FBMkM7O0lBQzNDLHlDQUE4Qjs7SUFDOUIsMENBQStCOztJQUMvQiw2Q0FBcUM7O0lBQ3JDLHFDQUE0Qjs7SUFDNUIsd0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlLCBTZXNzaW9uU2VydmljZSB9IGZyb20gXCJAZWNwLWNhZi9jYWYtY29tbW9uXCI7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy91aS1ub3RpZnlcIjtcclxuaW1wb3J0IHsgQnVzaW5lc3NPYmplY3RSdFNlcnZpY2UgfSBmcm9tIFwiQGdzcC1sY20vYm8tcnQtc2VydmljZVwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSBcIkBuZ3gtdHJhbnNsYXRlL2NvcmVcIjtcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IERvY3VUeXBlSGVscGVyRW50aXR5IH0gZnJvbSBcIi4vZW50aXR5L0RvY3VUeXBlSGVscGVyRW50aXR5XCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCaWxsVHlwZUhlbHBTZXJ2aWNlIHtcclxuICAgIGRvY3VtZW50VHlwZVVybCA9IFwiL2FwaS9ydW50aW1lL2FpZi92MS4wL2RvY3VtZW50dHlwZVwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBib1J0U2VydmljZTogQnVzaW5lc3NPYmplY3RSdFNlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIGh0dHBDbGllbnQ6IEh0dHBTZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyBodHRwU2VydmljZTogSHR0cFNlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSxcclxuICAgICAgICBwdWJsaWMgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kRG9jdW1lbnRUeXBlRW50aXRlcygpIHtcclxuICAgICAgICBjb25zdCBib2R5ID0ge307XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFNlcnZpY2UucG9zdChgJHt0aGlzLmRvY3VtZW50VHlwZVVybH0vZG9jdXR5cGVoZWxwZXJgLCBib2R5KS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoXHJcbiAgICAgICAgICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLm1hcChpdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgRG9jdVR5cGVIZWxwZXJFbnRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5Mb2FkRnJvbUpzb25PYmplY3QoaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iXX0=