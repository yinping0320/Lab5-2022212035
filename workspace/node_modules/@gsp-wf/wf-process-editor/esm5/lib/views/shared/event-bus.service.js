/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { map, filter } from 'rxjs/operators';
/**
 * @record
 */
export function EventBusMessage() { }
if (false) {
    /** @type {?} */
    EventBusMessage.prototype.channel;
    /** @type {?} */
    EventBusMessage.prototype.payload;
}
var EventBusService1 = /** @class */ (function () {
    function EventBusService1() {
        var _this = this;
        this.listen = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this.next = (/**
             * @param {?} payload
             * @return {?}
             */
            function (payload) { return observer.next(payload); });
            return (/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return _; } /* nothing to clean */);
        }));
        this.channelEmmiter = this.channelEmmiter.bind(this);
        this.emit = this.emit.bind(this);
    }
    /**
     * @return {?}
     */
    EventBusService1.prototype.allChannels = /**
     * @return {?}
     */
    function () {
        return this.listen;
    };
    /**
     * @param {?} channelName
     * @return {?}
     */
    EventBusService1.prototype.channel = /**
     * @param {?} channelName
     * @return {?}
     */
    function (channelName) {
        return this.listen
            .pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.channel === channelName; })), map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.payload; })));
    };
    /**
     * @param {?} channelName
     * @return {?}
     */
    EventBusService1.prototype.channelEmmiter = /**
     * @param {?} channelName
     * @return {?}
     */
    function (channelName) {
        var _this = this;
        console.log('made listener for', channelName);
        return (/**
         * @param {?} payload
         * @return {?}
         */
        function (payload) {
            _this.emit({ channel: channelName, payload: payload });
        });
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    EventBusService1.prototype.emit = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var channel = _a.channel, payload = _a.payload;
        console.log('emit', channel);
        this.next({ channel: channel, payload: payload });
    };
    EventBusService1.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EventBusService1.ctorParameters = function () { return []; };
    return EventBusService1;
}());
export { EventBusService1 };
if (false) {
    /** @type {?} */
    EventBusService1.prototype.listen;
    /**
     * @type {?}
     * @private
     */
    EventBusService1.prototype.next;
}
/**
 * Global EventEmitter
 * @template Events
 */
var EventBusService = /** @class */ (function () {
    function EventBusService() {
        /**
         * Map event name to Subject
         */
        this._subjects = new Map();
    }
    /**
     *
     * @param eventName
     * @param handler
     * @returns
     */
    /**
     *
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventBusService.prototype.on = /**
     *
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (eventName, handler) {
        var _this = this;
        if (!this._subjects.has(eventName)) {
            this._subjects.set(eventName, new Subject());
        }
        /** @type {?} */
        var _subject = this._subjects.get(eventName);
        /** @type {?} */
        var subscription = _subject.subscribe(handler);
        return {
            unsubscribe: (/**
             * @return {?}
             */
            function () {
                subscription.unsubscribe();
                if (_subject.observers.length > 0) {
                    _this._subjects.delete(eventName);
                }
            })
        };
    };
    /**
     *
     * @param eventName
     * @param data
     */
    /**
     *
     * @param {?} eventName
     * @param {?} data
     * @return {?}
     */
    EventBusService.prototype.emit = /**
     *
     * @param {?} eventName
     * @param {?} data
     * @return {?}
     */
    function (eventName, data) {
        if (this._subjects.has(eventName)) {
            this._subjects.get(eventName).next(data);
        }
    };
    /**
     * Destory all subscription and clear the map
     */
    /**
     * Destory all subscription and clear the map
     * @return {?}
     */
    EventBusService.prototype.destroy = /**
     * Destory all subscription and clear the map
     * @return {?}
     */
    function () {
        this._subjects.forEach((/**
         * @param {?} subject
         * @param {?} _
         * @return {?}
         */
        function (subject, _) {
            subject.unsubscribe();
        }));
        this._subjects.clear();
    };
    EventBusService.decorators = [
        { type: Injectable }
    ];
    return EventBusService;
}());
export { EventBusService };
if (false) {
    /**
     * Map event name to Subject
     * @type {?}
     * @private
     */
    EventBusService.prototype._subjects;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtYnVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3NoYXJlZC9ldmVudC1idXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRzdDLHFDQUdDOzs7SUFGRyxrQ0FBZ0I7O0lBQ2hCLGtDQUFpQjs7QUFHckI7SUFLSTtRQUFBLGlCQU9DO1FBTkcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFVBQVU7Ozs7UUFBQyxVQUFBLFFBQVE7WUFDakMsS0FBSSxDQUFDLElBQUk7Ozs7WUFBRyxVQUFDLE9BQWdCLElBQUssT0FBQSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUF0QixDQUFzQixDQUFBLENBQUM7WUFDekQ7Ozs7WUFBTyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsc0JBQXNCLEVBQUM7UUFDekMsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7OztJQUVELHNDQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDOzs7OztJQUVELGtDQUFPOzs7O0lBQVAsVUFBUSxXQUFtQjtRQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxPQUFPLEtBQUssV0FBVyxFQUF6QixDQUF5QixFQUFDLEVBQ3hDLEdBQUc7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxPQUFPLEVBQVQsQ0FBUyxFQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVELHlDQUFjOzs7O0lBQWQsVUFBZSxXQUFXO1FBQTFCLGlCQUtDO1FBSkcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5Qzs7OztRQUFPLFVBQUMsT0FBZ0I7WUFDcEIsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELENBQUMsRUFBQztJQUNOLENBQUM7Ozs7O0lBRUQsK0JBQUk7Ozs7SUFBSixVQUFLLEVBQXFDO1lBQW5DLG9CQUFPLEVBQUUsb0JBQU87UUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sU0FBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDOztnQkFsQ0osVUFBVTs7OztJQW1DWCx1QkFBQztDQUFBLEFBbkNELElBbUNDO1NBbENZLGdCQUFnQjs7O0lBQ3pCLGtDQUFtQzs7Ozs7SUFFbkMsZ0NBQWE7Ozs7OztBQW9DakI7SUFBQTs7OztRQUdZLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztJQTRDeEQsQ0FBQztJQTFDRzs7Ozs7T0FLRzs7Ozs7OztJQUNILDRCQUFFOzs7Ozs7SUFBRixVQUFHLFNBQWlCLEVBQUUsT0FBMkI7UUFBakQsaUJBY0M7UUFiRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNoRDs7WUFDSyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDOztZQUN4QyxZQUFZLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDaEQsT0FBTztZQUNILFdBQVc7OztZQUFFO2dCQUNULFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQy9CLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNwQztZQUNMLENBQUMsQ0FBQTtTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILDhCQUFJOzs7Ozs7SUFBSixVQUFLLFNBQWlCLEVBQUUsSUFBSTtRQUN4QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxpQ0FBTzs7OztJQUFQO1FBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsT0FBTyxFQUFFLENBQUM7WUFDOUIsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDOztnQkE5Q0osVUFBVTs7SUErQ1gsc0JBQUM7Q0FBQSxBQS9DRCxJQStDQztTQTlDWSxlQUFlOzs7Ozs7O0lBRXhCLG9DQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xyXG5pbXBvcnQgeyBtYXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCB0eXBlIFBheWxvYWQgPSBhbnk7XHJcbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRCdXNNZXNzYWdlIHtcclxuICAgIGNoYW5uZWw6IHN0cmluZztcclxuICAgIHBheWxvYWQ6IFBheWxvYWQ7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzU2VydmljZTEge1xyXG4gICAgcHVibGljIGxpc3RlbjogT2JzZXJ2YWJsZTxQYXlsb2FkPjtcclxuXHJcbiAgICBwcml2YXRlIG5leHQ7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbiA9IG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0ID0gKHBheWxvYWQ6IFBheWxvYWQpID0+IG9ic2VydmVyLm5leHQocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfID0+IF8gLyogbm90aGluZyB0byBjbGVhbiAqLztcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNoYW5uZWxFbW1pdGVyID0gdGhpcy5jaGFubmVsRW1taXRlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZW1pdCA9IHRoaXMuZW1pdC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFsbENoYW5uZWxzKCk6IE9ic2VydmFibGU8RXZlbnRCdXNNZXNzYWdlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5uZWwoY2hhbm5lbE5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8UGF5bG9hZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlblxyXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoZSA9PiBlLmNoYW5uZWwgPT09IGNoYW5uZWxOYW1lKSxcclxuICAgICAgICAgICAgICAgIG1hcChlID0+IGUucGF5bG9hZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5uZWxFbW1pdGVyKGNoYW5uZWxOYW1lKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21hZGUgbGlzdGVuZXIgZm9yJywgY2hhbm5lbE5hbWUpO1xyXG4gICAgICAgIHJldHVybiAocGF5bG9hZDogUGF5bG9hZCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoeyBjaGFubmVsOiBjaGFubmVsTmFtZSwgcGF5bG9hZCB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGVtaXQoeyBjaGFubmVsLCBwYXlsb2FkIH06IEV2ZW50QnVzTWVzc2FnZSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdlbWl0JywgY2hhbm5lbCk7XHJcbiAgICAgICAgdGhpcy5uZXh0KHsgY2hhbm5lbCwgcGF5bG9hZCB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdsb2JhbCBFdmVudEVtaXR0ZXJcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzU2VydmljZTxFdmVudHMgPSBhbnk+IHtcclxuICAgIC8qKiBNYXAgZXZlbnQgbmFtZSB0byBTdWJqZWN0ICAqL1xyXG4gICAgcHJpdmF0ZSBfc3ViamVjdHMgPSBuZXcgTWFwPEV2ZW50cywgU3ViamVjdDxhbnk+PigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudE5hbWVcclxuICAgICAqIEBwYXJhbSBoYW5kbGVyXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBvbihldmVudE5hbWU6IEV2ZW50cywgaGFuZGxlcjogKGRhdGE6IGFueSkgPT4gYW55KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zdWJqZWN0cy5oYXMoZXZlbnROYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJqZWN0cy5zZXQoZXZlbnROYW1lLCBuZXcgU3ViamVjdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgX3N1YmplY3QgPSB0aGlzLl9zdWJqZWN0cy5nZXQoZXZlbnROYW1lKTtcclxuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBfc3ViamVjdC5zdWJzY3JpYmUoaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF9zdWJqZWN0Lm9ic2VydmVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ViamVjdHMuZGVsZXRlKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudE5hbWVcclxuICAgICAqIEBwYXJhbSBkYXRhXHJcbiAgICAgKi9cclxuICAgIGVtaXQoZXZlbnROYW1lOiBFdmVudHMsIGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3ViamVjdHMuaGFzKGV2ZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3ViamVjdHMuZ2V0KGV2ZW50TmFtZSkubmV4dChkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0b3J5IGFsbCBzdWJzY3JpcHRpb24gYW5kIGNsZWFyIHRoZSBtYXBcclxuICAgICAqL1xyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLl9zdWJqZWN0cy5mb3JFYWNoKChzdWJqZWN0LCBfKSA9PiB7XHJcbiAgICAgICAgICAgIHN1YmplY3QudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9zdWJqZWN0cy5jbGVhcigpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=