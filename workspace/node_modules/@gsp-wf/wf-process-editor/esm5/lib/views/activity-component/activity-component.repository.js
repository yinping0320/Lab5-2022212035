/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActivityComponentUIState } from './activity-component.uistate';
import { HttpService } from '@ecp-caf/caf-common';
import { BizComponentEntity, OwnerType } from '../../domain/entities/biz-component.entity';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { Subject } from 'rxjs';
import { ProcessDeUtil } from '../../domain/process-de-util';
var ActivityComponentRepository = /** @class */ (function () {
    function ActivityComponentRepository(uistate, util, http, designerState) {
        this.uistate = uistate;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.subject = new Subject();
    }
    /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    ActivityComponentRepository.prototype.loadComponents = /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    function (flowFormId, bizActId) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getBizComponentsWebApi();
        if (bizActId) {
            url += "/query?param=" + encodeURIComponent("{\"flowFormKey\":\"" + flowFormId + "\",\"owner\":\"" + bizActId + "\",\"ownerType\":\"Activity\"}");
        }
        else {
            this.uistate.allComponents = [];
            return;
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.uistate.allComponents = data.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.ownerType === OwnerType.Activity; }));
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ActivityComponentRepository.prototype.removeComponent = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            this.uistate.components = this.uistate.components.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id !== id; }));
        }
    };
    /**
     * @param {?} cpt
     * @return {?}
     */
    ActivityComponentRepository.prototype.addComponent = /**
     * @param {?} cpt
     * @return {?}
     */
    function (cpt) {
        if (cpt) {
            /** @type {?} */
            var component = new BizComponentEntity(cpt.name, cpt.id, cpt.operations[0].code);
            component.id = ProcessDeUtil.GenerateElementId();
            component.actualParameters = this.bindParas(cpt);
            console.log(cpt);
            console.log(component.actualParameters);
            if (component.metadataId === '7433df25-9260-4c24-86f0-9da3e89450fb' ||
                component.metadataId === 'd0783800-ed60-488c-b053-8806a15947fe' ||
                component.metadataId === 'b89e9b9a-2e2d-4bd0-b354-187219544d34' ||
                component.metadataId === 'a8b8f7a4-49ae-4b7d-88d2-b3772b9d0ae5') {
                component.scopeType = 'ExternalProcess';
            }
            else {
                component.scopeType = 'DirectStart';
            }
            this.uistate.components.push(component);
            this.subject.next(component);
        }
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    ActivityComponentRepository.prototype.bindParas = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({ code: p.code, name: p.name, value: '' }); }));
            }
        }
        return parameters;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ActivityComponentRepository.prototype.assignParameterValue = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                var v = _this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key.indexOf('metadataId') > -1; }))[0].key;
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"" + v + "\\\")\"}" };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                var v = _this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key.indexOf('schemaId') > -1; }))[0].key;
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"" + v + "\\\")\"}" };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"dataId\\\")\"}" };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"procInstId\\\")\"}" };
            }
            else {
                return { code: p.code, name: p.name, value: '' };
            }
        }));
    };
    /**
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    ActivityComponentRepository.prototype.swapArray = /**
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    function (arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    };
    // 获取是否预制了外部流程构件
    // 获取是否预制了外部流程构件
    /**
     * @param {?} hander
     * @return {?}
     */
    ActivityComponentRepository.prototype.getBizCmp = 
    // 获取是否预制了外部流程构件
    /**
     * @param {?} hander
     * @return {?}
     */
    function (hander) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/bizComponent?flowFormKey=*&owner=*&ownerType=Process";
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            hander(data);
        }));
    };
    ActivityComponentRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActivityComponentRepository.ctorParameters = function () { return [
        { type: ActivityComponentUIState },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState }
    ]; };
    return ActivityComponentRepository;
}());
export { ActivityComponentRepository };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.defaultProcessComponentIds;
    /** @type {?} */
    ActivityComponentRepository.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.designerState;
}
//# sourceMappingURL=data:application/json;base64,