/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Inject, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
var VariableGridComponent = /** @class */ (function () {
    function VariableGridComponent(cdr, localeId, resources, localePipe) {
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cancel = new EventEmitter();
        this.submit = new EventEmitter();
        this.data = [];
        this.columns = [
            { field: 'key', width: 50, title: this.localePipe.transform('component.executeForms.key') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.executeForms.name') }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    VariableGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    VariableGridComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedRow = this.grid.selectedRow;
        console.log(selectedRow);
        if (!selectedRow) {
            this.submit.next(null);
        }
        else {
            this.submit.next(selectedRow.data);
        }
    };
    /**
     * @return {?}
     */
    VariableGridComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.next();
    };
    VariableGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-variable-grid',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'key'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.executeForms.lineNumber' | wfLocale}}\"\r\n         [lineNumberWidth]=\"50\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    VariableGridComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    VariableGridComponent.propDecorators = {
        grid: [{ type: ViewChild, args: [DatagridComponent,] }],
        buttonRef: [{ type: ViewChild, args: ['buttonRef',] }],
        cancel: [{ type: Output }],
        submit: [{ type: Output }]
    };
    return VariableGridComponent;
}());
export { VariableGridComponent };
if (false) {
    /** @type {?} */
    VariableGridComponent.prototype.grid;
    /** @type {?} */
    VariableGridComponent.prototype.buttonRef;
    /** @type {?} */
    VariableGridComponent.prototype.cancel;
    /** @type {?} */
    VariableGridComponent.prototype.submit;
    /** @type {?} */
    VariableGridComponent.prototype.data;
    /** @type {?} */
    VariableGridComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    VariableGridComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    VariableGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    VariableGridComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    VariableGridComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGUtZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL2V4ZWN1dGUtZm9ybXMvdmFyaWFibGUtZ3JpZC92YXJpYWJsZS1ncmlkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBVSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEosT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBR25HO0lBc0JFLCtCQUNzQixHQUFzQixFQUNmLFFBQWdCLEVBQ1IsU0FBYyxFQUM3QixVQUF3QjtRQUh4QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUNmLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDUixjQUFTLEdBQVQsU0FBUyxDQUFLO1FBQzdCLGVBQVUsR0FBVixVQUFVLENBQWM7UUFkcEMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDakMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFM0MsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUVWLFlBQU8sR0FBRztZQUNSLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFDO1lBQzFGLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFDO1NBQzdGLENBQUM7UUFRQSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Ozs7SUFFRix3Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsdUNBQU87OztJQUFQOztZQUNRLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hCO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDOzs7O0lBRUQsMkNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDOztnQkE5Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLHM3QkFBNkM7b0JBRTdDLFNBQVMsRUFBRTt3QkFDUixZQUFZO3FCQUNkOztpQkFDRjs7OztnQkFaUSxpQkFBaUIsdUJBNEJyQixRQUFROzZDQUNSLE1BQU0sU0FBQyxTQUFTO2dEQUNoQixNQUFNLFNBQUMsaUJBQWlCO2dCQTVCRCxZQUFZLHVCQTZCbkMsUUFBUTs7O3VCQWhCVixTQUFTLFNBQUMsaUJBQWlCOzRCQUMzQixTQUFTLFNBQUMsV0FBVzt5QkFDckIsTUFBTTt5QkFDTixNQUFNOztJQWtDVCw0QkFBQztDQUFBLEFBL0NELElBK0NDO1NBdkNZLHFCQUFxQjs7O0lBRWhDLHFDQUFzRDs7SUFDdEQsMENBQW9EOztJQUNwRCx1Q0FBMkM7O0lBQzNDLHVDQUEyQzs7SUFFM0MscUNBQVU7O0lBRVYsd0NBR0U7Ozs7O0lBR0Esb0NBQTBDOzs7OztJQUMxQyx5Q0FBMkM7Ozs7O0lBQzNDLDBDQUFpRDs7Ozs7SUFDakQsMkNBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIExPQ0FMRV9JRCwgT25Jbml0LCBPcHRpb25hbCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IFdGX0xBTkdfUkVTT1VSQ0VTLCBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi8uLi8uLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5pbXBvcnQgeyBXRl9QUk9DRVNTX0VESVRPUl9MQU5HX1JFU09VUkNFUyB9IGZyb20gJy4uLy4uLy4uL2kxOG4vYXNzZXRzL2xhbmcucmVzb3VyY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdsaWItdmFyaWFibGUtZ3JpZCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3ZhcmlhYmxlLWdyaWQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3ZhcmlhYmxlLWdyaWQuY29tcG9uZW50LnNjc3MnXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgICBXZkxvY2FsZVBpcGUsXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVmFyaWFibGVHcmlkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQFZpZXdDaGlsZChEYXRhZ3JpZENvbXBvbmVudCkgZ3JpZDogRGF0YWdyaWRDb21wb25lbnQ7XHJcbiAgQFZpZXdDaGlsZCgnYnV0dG9uUmVmJykgYnV0dG9uUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBPdXRwdXQoKSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgc3VibWl0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIGRhdGEgPSBbXTtcclxuXHJcbiAgY29sdW1ucyA9IFtcclxuICAgIHsgZmllbGQ6ICdrZXknLCB3aWR0aDogNTAsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZXhlY3V0ZUZvcm1zLmtleScpfSxcclxuICAgIHsgZmllbGQ6ICduYW1lJywgd2lkdGg6IDUwLCB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmV4ZWN1dGVGb3Jtcy5uYW1lJyl9XHJcbiAgXTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgQEluamVjdChXRl9MQU5HX1JFU09VUkNFUykgcHJpdmF0ZSByZXNvdXJjZXM6IGFueSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbG9jYWxlUGlwZTogV2ZMb2NhbGVQaXBlLFxyXG4gICkge1xyXG4gICAgdGhpcy5sb2NhbGVQaXBlID0gdGhpcy5sb2NhbGVQaXBlIHx8IG5ldyBXZkxvY2FsZVBpcGUobG9jYWxlSWQsIHJlc291cmNlcyk7XHJcbiAgIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBjbGlja09LKCkge1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRSb3cgPSB0aGlzLmdyaWQuc2VsZWN0ZWRSb3c7XHJcbiAgICBjb25zb2xlLmxvZyhzZWxlY3RlZFJvdyk7XHJcbiAgICBpZiAoIXNlbGVjdGVkUm93KSB7XHJcbiAgICAgIHRoaXMuc3VibWl0Lm5leHQobnVsbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN1Ym1pdC5uZXh0KHNlbGVjdGVkUm93LmRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tDYW5jZWwoKSB7XHJcbiAgICB0aGlzLmNhbmNlbC5uZXh0KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==