/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ViewContainerRef, Injector, ComponentFactoryResolver, TemplateRef, Input } from '@angular/core';
import { FormFormatConfigComponent } from '../form-format-config/form-format-config.component';
import { HttpService } from '@ecp-caf/caf-common';
var FormConfigContainerComponent = /** @class */ (function () {
    function FormConfigContainerComponent(injector, cfr, http) {
        this.injector = injector;
        this.cfr = cfr;
        this.http = http;
        this.showMethodTab = true;
    }
    /**
     * @return {?}
     */
    FormConfigContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.showComponentRef();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormConfigContainerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['formFormatId'] && changes['formFormatId'].currentValue) {
            this.showComponentRef();
        }
        else { // 功能菜单时
            this.componentRef = this.createWFComponentRef();
            this.componentRef.instance.formFormatId = null;
            this.componentRef.instance.formatConfigId = null;
            this.componentRef.instance.showMethodTab = this.showMethodTab;
            this.container.clear();
            this.container.insert(this.componentRef.hostView);
        }
    };
    /**
     * @return {?}
     */
    FormConfigContainerComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        return this.componentRef.instance.submit();
    };
    /**
     * @private
     * @return {?}
     */
    FormConfigContainerComponent.prototype.showComponentRef = /**
     * @private
     * @return {?}
     */
    function () {
        this.componentRef = this.createWFComponentRef();
        this.componentRef.instance.formFormatId = this.formFormatId;
        this.componentRef.instance.formatConfigId = this.formatConfigId;
        this.componentRef.instance.showMethodTab = this.showMethodTab;
        this.container.clear();
        this.container.insert(this.componentRef.hostView);
        // if (this.formFormatId) {
        // this.getFormFormatType().subscribe((re: FormFormatType) => {
        // if (re.code === 'wf') {
        // } else {
        //   System.import(re.customImpl)
        //     .then((moduleFactorys: any) => {
        //       const moduleFactory: any = Object.values(moduleFactorys)[0];
        //       const moduleRef = moduleFactory.create(this.injector);
        //       this.componentRef = moduleRef.instance.createCustomComponentRef(this.injector);
        //       this.componentRef.instance.formFormatId = this.formFormatId;
        //       this.componentRef.instance.formatConfigId = this.formatConfigId;
        //       this.componentRef.instance.showMethodTab = this.showMethodTab;
        //       this.container.clear();
        //       this.container.insert(this.componentRef.hostView);
        //     });
        // }
        // });
        // }
    };
    /**
     * @private
     * @return {?}
     */
    FormConfigContainerComponent.prototype.createWFComponentRef = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cmpF = this.cfr.resolveComponentFactory(FormFormatConfigComponent);
        /** @type {?} */
        var cmpR = cmpF.create(this.injector);
        return cmpR;
    };
    /**
     * @private
     * @return {?}
     */
    FormConfigContainerComponent.prototype.getFormFormatType = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.formFormatId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormatType/formFormat?formFormat=" + this.formFormatId;
            return this.http.get(url);
        }
    };
    FormConfigContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-form-config-container',
                    template: "<ng-container #container></ng-container>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormConfigContainerComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: HttpService }
    ]; };
    FormConfigContainerComponent.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        formFormatId: [{ type: Input }],
        formatConfigId: [{ type: Input }],
        showMethodTab: [{ type: Input }]
    };
    return FormConfigContainerComponent;
}());
export { FormConfigContainerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.componentRef;
    /** @type {?} */
    FormConfigContainerComponent.prototype.container;
    /** @type {?} */
    FormConfigContainerComponent.prototype.modalFooter;
    /** @type {?} */
    FormConfigContainerComponent.prototype.formFormatId;
    /** @type {?} */
    FormConfigContainerComponent.prototype.formatConfigId;
    /** @type {?} */
    FormConfigContainerComponent.prototype.showMethodTab;
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,