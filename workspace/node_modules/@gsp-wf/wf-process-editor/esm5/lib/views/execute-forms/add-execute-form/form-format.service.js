/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
var FormFormatService = /** @class */ (function () {
    function FormFormatService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    FormFormatService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = JSON.parse(params.searchValue);
        /** @type {?} */
        var terminal = customData.tab === 'web' ? 'PC' : 'Mobile';
        /** @type {?} */
        var query = '?param=';
        /** @type {?} */
        var filter = "{\"terminal\":\"" + terminal + "\"";
        if (searchValue.searchValue) {
            if (searchValue.searchField === '*') {
                filter += ",\"allColumns\":\"" + searchValue.searchValue + "\"";
            }
            else {
                filter += ",\"" + searchValue.searchField + "\":\"" + searchValue.searchValue + "\"";
            }
        }
        filter += '}';
        filter = encodeURIComponent(filter);
        query += (filter + ("&pageNum=" + index + "&pageSize=" + size));
        url += query;
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { return ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }); })));
    };
    FormFormatService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormFormatService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return FormFormatService;
}());
export { FormFormatService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormFormatService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1mb3JtYXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvZXhlY3V0ZS1mb3Jtcy9hZGQtZXhlY3V0ZS1mb3JtL2Zvcm0tZm9ybWF0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQztJQUVJLDJCQUNZLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFFN0IsQ0FBQzs7Ozs7O0lBQ0QsbUNBQU87Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsTUFBcUI7O1lBQ2hDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVTs7WUFDOUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQzs7WUFDN0IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRTs7WUFDNUIsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQzs7WUFDNUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVE7O1lBQ3ZELEtBQUssR0FBRyxTQUFTOztZQUNqQixNQUFNLEdBQUcscUJBQWdCLFFBQVEsT0FBRztRQUN4QyxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUU7WUFDekIsSUFBSSxXQUFXLENBQUMsV0FBVyxLQUFLLEdBQUcsRUFBRTtnQkFDakMsTUFBTSxJQUFJLHVCQUFrQixXQUFXLENBQUMsV0FBVyxPQUFHLENBQUM7YUFDMUQ7aUJBQU07Z0JBQ0gsTUFBTSxJQUFJLFFBQUssV0FBVyxDQUFDLFdBQVcsYUFBTSxXQUFXLENBQUMsV0FBVyxPQUFHLENBQUM7YUFDMUU7U0FDSjtRQUNELE1BQU0sSUFBSSxHQUFHLENBQUM7UUFDZCxNQUFNLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsS0FBSyxJQUFJLENBQUMsTUFBTSxJQUFHLGNBQVksS0FBSyxrQkFBYSxJQUFNLENBQUEsQ0FBQyxDQUFDO1FBQ3pELEdBQUcsSUFBSSxLQUFLLENBQUM7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsR0FBRzs7OztRQUFDLFVBQUMsRUFBTyxJQUFLLE9BQUEsQ0FBQztZQUNkLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTztZQUNqQixLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWE7WUFDdkIsUUFBUSxFQUFFO2dCQUNOLFNBQVMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDO2dCQUNyQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRO2dCQUM5QixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO2dCQUMvQixXQUFXLEVBQUUsSUFBSTthQUNwQjtTQUNKLENBQUMsRUFUZSxDQVNmLEVBQUMsQ0FDTixDQUFDO0lBQ04sQ0FBQzs7Z0JBckNKLFVBQVU7Ozs7Z0JBSkYsV0FBVzs7SUEwQ3BCLHdCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0FyQ1ksaUJBQWlCOzs7Ozs7SUFFdEIsaUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUxvb2t1cEh0dHBTZXJ2aWNlLCBSZW1vdGVQYXJhbXMsIExvb2t1cEdyaWRSZXN1bHQgfSBmcm9tICdAZmFycmlzL3VpLWxvb2t1cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRm9ybUZvcm1hdFNlcnZpY2UgaW1wbGVtZW50cyBJTG9va3VwSHR0cFNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZSxcclxuICAgICkge1xyXG4gICAgfVxyXG4gICAgZ2V0RGF0YSh1cmw6IHN0cmluZywgcGFyYW1zPzogUmVtb3RlUGFyYW1zKTogT2JzZXJ2YWJsZTxMb29rdXBHcmlkUmVzdWx0PiB7XHJcbiAgICAgICAgY29uc3QgY3VzdG9tRGF0YSA9IHBhcmFtcy5jdXN0b21EYXRhO1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFyYW1zLnBhZ2VJbmRleCB8fCAxO1xyXG4gICAgICAgIGNvbnN0IHNpemUgPSBwYXJhbXMucGFnZVNpemUgfHwgMjA7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBKU09OLnBhcnNlKHBhcmFtcy5zZWFyY2hWYWx1ZSk7XHJcbiAgICAgICAgY29uc3QgdGVybWluYWwgPSBjdXN0b21EYXRhLnRhYiA9PT0gJ3dlYicgPyAnUEMnIDogJ01vYmlsZSc7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gJz9wYXJhbT0nO1xyXG4gICAgICAgIGxldCBmaWx0ZXIgPSBge1widGVybWluYWxcIjpcIiR7dGVybWluYWx9XCJgO1xyXG4gICAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoc2VhcmNoVmFsdWUuc2VhcmNoRmllbGQgPT09ICcqJykge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyICs9IGAsXCJhbGxDb2x1bW5zXCI6XCIke3NlYXJjaFZhbHVlLnNlYXJjaFZhbHVlfVwiYDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlciArPSBgLFwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hGaWVsZH1cIjpcIiR7c2VhcmNoVmFsdWUuc2VhcmNoVmFsdWV9XCJgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbHRlciArPSAnfSc7XHJcbiAgICAgICAgZmlsdGVyID0gZW5jb2RlVVJJQ29tcG9uZW50KGZpbHRlcik7XHJcbiAgICAgICAgcXVlcnkgKz0gKGZpbHRlciArIGAmcGFnZU51bT0ke2luZGV4fSZwYWdlU2l6ZT0ke3NpemV9YCk7XHJcbiAgICAgICAgdXJsICs9IHF1ZXJ5O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkucGlwZShcclxuICAgICAgICAgICAgbWFwKChyZTogYW55KSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgaXRlbXM6IHJlLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICB0b3RhbDogcmUudG90YWxFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgIHBhZ2VJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZUluZGV4OiByZS5wYWdlYWJsZS5wYWdlTnVtYmVyICsgMSxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogcmUucGFnZWFibGUucGFnZVNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZUxpc3Q6IFsyMCwgNDAsIDYwLCA4MCwgMTAwXSxcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVQYWdlcjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=