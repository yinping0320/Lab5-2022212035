/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, Input, ViewChild, EventEmitter, TemplateRef, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var EntryFormEditorComponent = /** @class */ (function () {
    function EntryFormEditorComponent(http, message, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.entryFormEditor.flowForm'),
            width: 760,
            height: 506,
            showButtons: true
        };
        this.columns = [
            { title: this.localePipe.transform('component.entryFormEditor.code'), field: 'code', width: 100, sortable: true },
            { title: this.localePipe.transform('component.entryFormEditor.name'), field: 'name', width: 100, sortable: true },
            { title: this.localePipe.transform('component.entryFormEditor.base'), field: 'base', width: 60,
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.entryFormEditor.extend'), falseText: this.localePipe.transform('component.entryFormEditor.foundation') } } }
        ];
        this.data = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(EntryFormEditorComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.flowFormId = data.id;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getBaseAndExtendFlowForm();
    };
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (!this.grid.selectedRow) {
            this.message.info(this.localePipe.transform('component.entryFormEditor.selectedRow'));
            return;
        }
        /** @type {?} */
        var object = { value: this.grid.selectedRow.data, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    EntryFormEditorComponent.prototype.getBaseAndExtendFlowForm = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.flowFormId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/flowForm/" + this.flowFormId + "/baseAndExtend";
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (re && re.length > 0) {
                    _this.data = re;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.grid.selectRow(_this.flowFormId, true);
                    }), 0);
                }
                else {
                    _this.message.info(_this.localePipe.transform('component.entryFormEditor.absent'));
                }
            }));
        }
    };
    EntryFormEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-entry-form-editor',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;margin-left: 6px;margin-right: 6px;\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.entryFormEditor.lineNumber' | wfLocale}}\"\r\n         [lineNumberWidth]=\"50\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.entryFormEditor.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.entryFormEditor.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    EntryFormEditorComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: MessagerService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    EntryFormEditorComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        editorParams: [{ type: Input }]
    };
    return EntryFormEditorComponent;
}());
export { EntryFormEditorComponent };
if (false) {
    /** @type {?} */
    EntryFormEditorComponent.prototype.closeModal;
    /** @type {?} */
    EntryFormEditorComponent.prototype.submitModal;
    /** @type {?} */
    EntryFormEditorComponent.prototype.modalFooter;
    /** @type {?} */
    EntryFormEditorComponent.prototype.grid;
    /** @type {?} */
    EntryFormEditorComponent.prototype.editorParams;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.flowFormId;
    /** @type {?} */
    EntryFormEditorComponent.prototype.modalConfig;
    /** @type {?} */
    EntryFormEditorComponent.prototype.columns;
    /** @type {?} */
    EntryFormEditorComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.localePipe;
}
var FlowFormConverter = /** @class */ (function () {
    function FlowFormConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    FlowFormConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return data.name;
        }
    };
    return FlowFormConverter;
}());
export { FlowFormConverter };
//# sourceMappingURL=data:application/json;base64,