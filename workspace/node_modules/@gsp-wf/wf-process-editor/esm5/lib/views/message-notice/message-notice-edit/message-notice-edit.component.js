/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, TemplateRef, Output, EventEmitter, ComponentFactoryResolver, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { MessageNotice } from '../message-notice';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { MessageReceiver } from '../message-receiver';
import { BsModalService } from '@farris/ui-modal';
import { ActivityListComponent } from '../../activity-list/activity-list.component';
import { HttpService } from '@ecp-caf/caf-common';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { PositionPerformerComponent } from '../../performer/views/position-performer/position-performer.component';
import { SmsMessageTemplateComponent } from '../../sms-message-template/sms-message-template.component';
import { SmsMessageTemplate } from '../../sms-message-template/sms-message-template';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
var MessageNoticeEditComponent = /** @class */ (function () {
    function MessageNoticeEditComponent(message, uistate, expr, resolver, injector, modalService, designerUIState, http, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.designerUIState = designerUIState;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.exprAble = false;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this._location = 'activity';
        this.messageNotice = new MessageNotice();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return ({ value: m.code, name: m.name }); }));
        this.receiverVariables = [
            { value: 'workItemParticipant', name: this.localePipe.transform('component.messageNoticeEdit.workItemParticipant') }
        ];
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.messageNoticeEdit.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.messageNoticeEdit.administrative_organization'), value: 'Administrative_organization' }
        ];
        this.sendTimes = [];
        this.bindingData = {};
        this.receiverTypes = [
            { value: 'processParticipant', text: this.localePipe.transform('component.MessageNotice.processParticipant') },
            { value: 'variableParticipant', text: this.localePipe.transform('component.MessageNotice.variableParticipant') },
            { value: 'userParticipant', text: this.localePipe.transform('component.MessageNotice.userParticipant') },
            { value: 'positionParticipant', text: this.localePipe.transform('component.MessageNotice.positionParticipant') },
        ];
        this.processParticipantTypes = [
            { value: 'procInstCreator', text: this.localePipe.transform('component.MessageNotice.procInstCreator') },
            { value: 'workItemParticipant', text: this.localePipe.transform('component.MessageNotice.workItemParticipant') },
            { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.MessageNotice.activityExecutorParticipant') },
        ];
        this.userTypeButtonNeedShow = false; // 用户类型单选按钮是否需要显示
        this.hasSmsTemplate = false;
        this.disableAdd = (/**
         * @return {?}
         */
        function () {
            if (_this.messageNotice.sendTime === 'WORKITEM_CREATED' && _this.messageNotice.receivers.filter((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.type; })).length > 0) {
                return true;
            }
            else {
                return false;
            }
        });
        // 由于需要实现国际化，此处定义不能提取；
        this.processSendTime = [
            { value: 'PROCESSINSTANCE_COMPLETED', text: this.localePipe.transform('component.MessageNotice.procComplete') },
            { value: 'PROCESSINSTANCE_ABORTED', text: this.localePipe.transform('component.MessageNotice.procAborted') },
            { value: 'PROCESSINSTANCE_ROLLBACK', text: this.localePipe.transform('component.MessageNotice.procRollBack') }
        ];
        this.ReceiverType = [
            { value: 'processParticipant', text: this.localePipe.transform('component.MessageNotice.processParticipant') },
            { value: 'variableParticipant', text: this.localePipe.transform('component.MessageNotice.variableParticipant') },
            { value: 'userParticipant', text: this.localePipe.transform('component.MessageNotice.userParticipant') },
            { value: 'positionParticipant', text: this.localePipe.transform('component.MessageNotice.positionParticipant') },
        ];
        this.activitySendTime = [
            { value: 'WORKITEM_CREATED', text: this.localePipe.transform('component.MessageNotice.workCreated') },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform('component.MessageNotice.actComplete') },
            { value: 'ACTIVITY_ABORTED', text: this.localePipe.transform('component.MessageNotice.actAborted') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(MessageNoticeEditComponent.prototype, "location", {
        get: /**
         * @return {?}
         */
        function () {
            return this._location;
        },
        set: /**
         * @param {?} l
         * @return {?}
         */
        function (l) {
            this._location = l;
            if (this.location !== 'activity') {
                this.processParticipantTypes = [
                    { value: 'procInstCreator', text: this.localePipe.transform('component.messageNoticeEdit.procInstCreator') },
                    { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.messageNoticeEdit.activityExecutorParticipant') }
                ];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessageNoticeEditComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.messageNotice;
        },
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            // 深拷贝处理messageNotice 2022-12-1
            /** @type {?} */
            var jsonMessageNotice = JSON.stringify(Object.assign({}, m));
            this.messageNotice = JSON.parse(jsonMessageNotice);
            this.exprAble = this.messageNotice.subject.charAt(0) === '{';
            if (this.hasSmsMessage(this.messageNotice.sendType)) {
                this.hasSmsTemplate = true;
                if (!this.messageNotice.smsMessageTemplate) {
                    this.messageNotice.smsMessageTemplate = new SmsMessageTemplate();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.location === 'activity') {
            this.sendTimes = this.activitySendTime;
            if (this.messageNotice.sendTime === this.activitySendTime[0].value) {
                this.receiverTypes = [
                    { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') }
                ];
                this.processParticipantTypes = [
                    { value: 'workItemParticipant', text: this.localePipe.transform('component.messageNoticeEdit.workItemReceiveParticipant') }
                ];
            }
            else {
                this.receiverTypes = [
                    { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') },
                    { value: 'variableParticipant', text: this.localePipe.transform('component.messageNoticeEdit.variableParticipant') },
                    { value: 'userParticipant', text: this.localePipe.transform('component.messageNoticeEdit.userParticipant') },
                    { value: 'positionParticipant', text: this.localePipe.transform('component.messageNoticeEdit.positionParticipant') },
                ];
                this.processParticipantTypes = [
                    { value: 'procInstCreator', text: this.localePipe.transform('component.messageNoticeEdit.procInstCreator') },
                    { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.messageNoticeEdit.activityExecutorParticipant') }
                ];
            }
        }
        else {
            this.sendTimes = this.processSendTime;
        }
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.hasAdminOrg = data;
            // inSuite场景，变量参与者场景下显示用户类型
            if (_this.designerUIState.scene === 'inSuite') {
                _this.userTypeButtonNeedShow = true;
            }
            else {
                _this.userTypeButtonNeedShow = data;
            }
            if (!_this.userTypeButtonNeedShow) {
                _this.variableOrgTypes = [{ name: _this.localePipe.transform('component.messageNoticeEdit.sys'), value: 'Sys' }];
            }
        }));
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.SmsTemplate) {
            this.SmsTemplate.endGridEdit();
        }
        this.setReceiver();
        if (this.hasSmsTemplate) {
            this.messageNotice.smsMessageTemplate = this.SmsTemplate.smsMessageTemplate;
            if (this.messageNotice.smsMessageTemplate.smsMessageVariables && this.messageNotice.smsMessageTemplate.smsMessageVariables.length > 0) {
                this.messageNotice.smsMessageTemplate.smsMessageVariables = this.messageNotice.smsMessageTemplate.smsMessageVariables.filter((/**
                 * @param {?} variable
                 * @return {?}
                 */
                function (variable) { return variable.code; }));
            }
        }
        else {
            this.messageNotice.smsMessageTemplate = null;
        }
        if (this.validator()) {
            this.submitEmitter.emit(this.messageNotice);
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.sendTimeChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_1, _a;
        if (data.data.value === this.activitySendTime[0].value) {
            /** @type {?} */
            var messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'workItemParticipant';
            this.messageNotice.receivers = [messageReceiver];
            this.receiverTypes = [
                { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') }
            ];
            this.processParticipantTypes = [
                { value: 'workItemParticipant', text: this.localePipe.transform('component.messageNoticeEdit.workItemParticipant') }
            ];
        }
        else {
            try {
                for (var _b = tslib_1.__values(this.messageNotice.receivers), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var r = _c.value;
                    if (r.type === 'processParticipant' && r.processParticipant === 'workItemParticipant') {
                        r.processParticipant = 'procInstCreator';
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.receiverTypes = [
                { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') },
                { value: 'variableParticipant', text: this.localePipe.transform('component.messageNoticeEdit.variableParticipant') },
                { value: 'userParticipant', text: this.localePipe.transform('component.messageNoticeEdit.userParticipant') },
                { value: 'positionParticipant', text: this.localePipe.transform('component.messageNoticeEdit.positionParticipant') },
            ];
            this.processParticipantTypes = [
                { value: 'procInstCreator', text: this.localePipe.transform('component.messageNoticeEdit.procInstCreator') },
                { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.messageNoticeEdit.activityExecutorParticipant') }
            ];
        }
    };
    /**
     * @param {?} sendType
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.sendTypeChange = /**
     * @param {?} sendType
     * @return {?}
     */
    function (sendType) {
        if (this.hasSmsMessage(sendType)) {
            this.hasSmsTemplate = true;
            if (!this.messageNotice.smsMessageTemplate) {
                this.messageNotice.smsMessageTemplate = new SmsMessageTemplate();
            }
        }
        else {
            this.hasSmsTemplate = false;
            this.messageNotice.smsMessageTemplate = null;
        }
    };
    /**
     * @private
     * @param {?} sendType
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.hasSmsMessage = /**
     * @private
     * @param {?} sendType
     * @return {?}
     */
    function (sendType) {
        var _this = this;
        if (sendType) {
            /** @type {?} */
            var sendTypeList = sendType.split(',');
            /** @type {?} */
            var messageChannel = sendTypeList.find((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return _this.uistate.messageChannels.find((/**
             * @param {?} channel
             * @return {?}
             */
            function (channel) { return channel.code == val && channel.channelType == 'Sms'; })); }));
            if (messageChannel) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.usersSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_2, _a, e_3, _b;
        this.messageNotice.receivers[this.index].userIds = '';
        this.messageNotice.receivers[this.index].userNames = '';
        if (data && data.length > 0) {
            /** @type {?} */
            var userIds = '';
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var d = data_1_1.value;
                    userIds += d.id + ',';
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (userIds) {
                this.messageNotice.receivers[this.index].userIds = userIds.substring(0, userIds.length - 1);
            }
            /** @type {?} */
            var userNames = '';
            try {
                for (var data_2 = tslib_1.__values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                    var d = data_2_1.value;
                    userNames += d.name + ',';
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (data_2_1 && !data_2_1.done && (_b = data_2.return)) _b.call(data_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (userNames) {
                this.messageNotice.receivers[this.index].userNames = userNames.substring(0, userNames.length - 1);
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clearUsers = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.messageNotice.receivers[index].userIds = '';
        this.messageNotice.receivers[index].userNames = '';
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clearPosition = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.messageNotice.receivers[index].positionId = '';
        this.messageNotice.receivers[index].positionName = '';
        this.messageNotice.receivers[index].positionType = '';
        this.messageNotice.receivers[index].orgId = '';
        this.messageNotice.receivers[index].orgType = '';
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clearActivityExecutor = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.messageNotice.receivers[index].activityDefId = '';
        this.messageNotice.receivers[index].activityDefName = '';
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clearVariableParticipant = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.messageNotice.receivers[index].variableParticipant = '';
        this.messageNotice.receivers[index].variableName = '';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.changeValue = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.bindingData = {};
    };
    /**
     * @private
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.setReceiver = /**
     * @private
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_4, _a;
        if (!this.messageNotice.sendType) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.sendType'));
            return false;
        }
        //去除消息模板编号校验
        // if (this.hasSmsTemplate) {
        //   if (!this.messageNotice.smsMessageTemplate) {
        //     this.message.info(this.localePipe.transform('component.messageNoticeEdit.smsMessageTemplate'));
        //     return;
        //   }
        //   if (!this.messageNotice.smsMessageTemplate.code) {
        //     this.message.info(this.localePipe.transform('component.messageNoticeEdit.smsMessageTemplateCode'));
        //     return;
        //   }
        // }
        if (this.location !== 'messageActivity' && !this.messageNotice.sendTime) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.sendTime'));
            return false;
        }
        if (!this.messageNotice.subject) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.subject'));
            return false;
        }
        if (!this.messageNotice.content) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.content'));
            return false;
        }
        this.messageNotice.receivers = this.messageNotice.receivers.filter((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.type; }));
        if (!this.messageNotice.receivers || this.messageNotice.receivers.length === 0) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.receivers'));
            return false;
        }
        else {
            try {
                for (var _b = tslib_1.__values(this.messageNotice.receivers), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var r = _c.value;
                    switch (r.type) {
                        case 'processParticipant':
                            if (!r.processParticipant) {
                                this.message.info(this.localePipe.transform('component.messageNoticeEdit.processParticipantNotNull'));
                                return false;
                            }
                            else if (r.processParticipant === 'activityExecutorParticipant' && !r.activityDefId) {
                                this.message.info(this.localePipe.transform('component.messageNoticeEdit.activityDefIdNotNull'));
                                return false;
                            }
                            break;
                        case 'variableParticipant':
                            if (!r.variableParticipant) {
                                this.message.info(this.localePipe.transform('component.messageNoticeEdit.variableParticipantNotNull'));
                                return false;
                            }
                            if (!r.orgType) {
                                this.message.info(this.localePipe.transform('component.messageNoticeEdit.orgType'));
                                return false;
                            }
                            break;
                        case 'userParticipant':
                            if (!r.userIds) {
                                this.message.info(this.localePipe.transform('component.messageNoticeEdit.userIds'));
                                return false;
                            }
                            break;
                        case 'positionParticipant':
                            if (!r.positionId) {
                                this.message.info(this.localePipe.transform('component.messageNoticeEdit.positionId'));
                                return false;
                            }
                            break;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        return true;
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.addReceiver = /**
     * @return {?}
     */
    function () {
        if (this.disableAdd()) {
            return;
        }
        /** @type {?} */
        var receivers = this.messageNotice.receivers.filter((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.type; }));
        if (receivers && receivers.length > 0) {
            /** @type {?} */
            var userParticipant = new MessageReceiver();
            userParticipant.type = 'userParticipant';
            this.messageNotice.receivers = this.messageNotice.receivers.concat([userParticipant]);
        }
        else {
            if (this.location !== 'activity') {
                /** @type {?} */
                var procInstCreator = new MessageReceiver();
                procInstCreator.type = 'processParticipant';
                procInstCreator.processParticipant = 'procInstCreator';
                this.messageNotice.receivers = this.messageNotice.receivers.concat([procInstCreator]);
            }
            else {
                /** @type {?} */
                var workItemParticipant = new MessageReceiver();
                workItemParticipant.type = 'processParticipant';
                workItemParticipant.processParticipant = 'workItemParticipant';
                this.messageNotice.receivers = this.messageNotice.receivers.concat([workItemParticipant]);
            }
        }
    };
    /**
     * @param {?} activityDefId
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.selectActivityExecutorParticipant = /**
     * @param {?} activityDefId
     * @param {?} index
     * @return {?}
     */
    function (activityDefId, index) {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ActivityListComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            var e_5, _a;
            /** @type {?} */
            var acticity = re.shift();
            _this.messageNotice.receivers[index].activityDefId = acticity.id;
            _this.messageNotice.receivers[index].activityDefName = acticity.data.Name;
            if (re && re.length > 0) {
                try {
                    for (var re_1 = tslib_1.__values(re), re_1_1 = re_1.next(); !re_1_1.done; re_1_1 = re_1.next()) {
                        var a = re_1_1.value;
                        /** @type {?} */
                        var receiver = new MessageReceiver();
                        receiver.type = 'processParticipant';
                        receiver.processParticipant = 'activityExecutorParticipant';
                        receiver.activityDefId = a.id;
                        receiver.activityDefName = a.data.Name;
                        _this.messageNotice.receivers = _this.messageNotice.receivers.concat([receiver]);
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (re_1_1 && !re_1_1.done && (_a = re_1.return)) _a.call(re_1);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.messageNoticeEdit.activityList'),
            width: 490,
            height: 490,
            showButtons: true,
            buttons: compRef.instance.buttonRef
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @param {?} variableParticipant
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.selectVariableParticipant = /**
     * @param {?} variableParticipant
     * @param {?} index
     * @return {?}
     */
    function (variableParticipant, index) {
        var _this = this;
        var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
        /** @type {?} */
        var context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _f = tslib_1.__values(this.designerUIState.schemas), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var schema = _g.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                }
                finally { if (e_6) throw e_6.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            try {
                for (var _h = tslib_1.__values(this.designerUIState.participantContext), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var variable = _j.value;
                    context.push(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _k = tslib_1.__values(this.designerUIState.processVariableContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    _loop_1(variable);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = tslib_1.__values(this.designerUIState.subActivityContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_2(variable);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_e = context_1.return)) _e.call(context_1);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (variableParticipant) {
            this.expr.addExpressionText(variableParticipant);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.messageNotice.receivers[index].variableParticipant = expressioninfo;
            _this.messageNotice.receivers[index].variableName = _this.variableParticipantName(expressioninfo);
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @param {?} receiver
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.selectUserParticipant = /**
     * @param {?} receiver
     * @param {?} index
     * @return {?}
     */
    function (receiver, index) {
        var _this = this;
        this.index = index;
        this.bindingData = {};
        if (receiver.userIds && receiver.userIds.length > 0) {
            this.bindingData.id = receiver.userIds;
            this.bindingData.name = receiver.userNames;
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.userHelp.showHelp();
        }), 0);
    };
    /**
     * @param {?} receiver
     * @param {?} index
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.selectPositionParticipant = /**
     * @param {?} receiver
     * @param {?} index
     * @return {?}
     */
    function (receiver, index) {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(PositionPerformerComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.showCondition = false;
        compRef.instance.position.performerId = this.messageNotice.receivers[index].positionId;
        compRef.instance.position.performerName = this.messageNotice.receivers[index].positionName;
        compRef.instance.position.positionType = this.messageNotice.receivers[index].positionType;
        compRef.instance.position.orgId = this.messageNotice.receivers[index].orgId;
        compRef.instance.position.orgType = this.messageNotice.receivers[index].orgType;
        if (compRef.instance.position.positionType === '0') {
            compRef.instance.newFilter = { positionType: '0' };
        }
        else {
            compRef.instance.newFilter = { positionType: '1' };
        }
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (re.performerId) {
                _this.messageNotice.receivers[index].positionId = re.performerId;
                _this.messageNotice.receivers[index].positionName = re.performerName;
                _this.messageNotice.receivers[index].positionType = re.positionType;
                _this.messageNotice.receivers[index].orgId = re.orgId;
                _this.messageNotice.receivers[index].orgType = re.orgType;
            }
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.messageNoticeEdit.position'),
            width: 700,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.buttonRef
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.titleExpr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showTitleHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.contentExpr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showContentHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.showContentHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var context = this.showExpr();
        if (this.messageNotice.content && this.messageNotice.content.length > 0) {
            this.expr.addExpressionText(this.messageNotice.content);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            _this.messageNotice.content = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.showTitleHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (this.messageNotice.subject && this.messageNotice.subject.charAt(0) !== '{') {
            this.messageNotice.subject = '';
        }
        /** @type {?} */
        var context = this.showExpr();
        if (this.messageNotice.subject && this.messageNotice.subject.length > 0) {
            this.expr.addExpressionText(this.messageNotice.subject);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            _this.messageNotice.subject = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.showExpr = /**
     * @return {?}
     */
    function () {
        var e_11, _a, e_12, _b, e_13, _c, e_14, _d, e_15, _e;
        /** @type {?} */
        var context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _f = tslib_1.__values(this.uistate.schemas), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var schema = _g.value;
                    // this.expr.addCommonObject(co);
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                }
                finally { if (e_11) throw e_11.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        if (this.uistate.procInstContext.length > 0) {
            try {
                for (var _h = tslib_1.__values(this.uistate.procInstContext), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var variable = _j.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        if (this.uistate.subActivityContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _k = tslib_1.__values(this.uistate.subActivityContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    _loop_3(variable);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = tslib_1.__values(this.uistate.processVariableContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_4(variable);
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                }
                finally { if (e_14) throw e_14.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_2 = tslib_1.__values(context), context_2_1 = context_2.next(); !context_2_1.done; context_2_1 = context_2.next()) {
                    var v = context_2_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (context_2_1 && !context_2_1.done && (_e = context_2.return)) _e.call(context_2);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
        return context;
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.tranExpr = /**
     * @return {?}
     */
    function () {
        this.messageNotice.subject = '';
    };
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.variableParticipantName = /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    function (expr) {
        var e_16, _a, e_17, _b;
        try {
            for (var _c = tslib_1.__values(this.designerUIState.participantContext), _d = _c.next(); !_d.done; _d = _c.next()) {
                var c = _d.value;
                if (expr.indexOf(c.key) > -1) {
                    return c.name;
                }
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_16) throw e_16.error; }
        }
        try {
            for (var _e = tslib_1.__values(this.designerUIState.processVariableContext), _f = _e.next(); !_f.done; _f = _e.next()) {
                var c = _f.value;
                if (expr.indexOf(c.key) > -1) {
                    return c.name;
                }
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_17) throw e_17.error; }
        }
        return JSON.parse(expr).expr;
    };
    MessageNoticeEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-message-notice-edit',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"f-form-layout farris-form  farris-form-controls-inline f-form-label-sm\">\r\n              <div *ngIf=\"location!=='messageActivity'\" class=\"col-12 col-md-6 mt-3\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.MessageNotice.sendTime'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-combo-list [(ngModel)]=\"messageNotice.sendTime\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                        [enableClear]=\"false\" [data]=\"sendTimes\" name=\"sendTime\" [editable]=\"false\"\r\n                        (selectChange)=\"sendTimeChange($event)\">\r\n                      </farris-combo-list>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.messSendType'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"messageNotice.sendType\" name=\"sendType\"\r\n                        [horizontal]=\"true\" [data]=\"typeGroup\" (changeValue)=\"sendTypeChange($event)\">\r\n                      </farris-checkboxgroup>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-8 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.messSubject'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\" *ngIf=\"!exprAble; else disabled\">\r\n                      <input class=\"form-control\" type=\"text\" value=\"subject\" [(ngModel)]=\"messageNotice.subject\"\r\n                        name=\"subject\" />\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                    <ng-template #disabled>\r\n                      <div class=\"farris-input-wrap ml-1\">\r\n                        <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                          [(value)]=\"messageNotice.subject\" (clickHandle)=\"titleExpr($event)\">\r\n                        </input-group>\r\n                      </div>\r\n                    </ng-template>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-4 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.enable'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <farris-switch [(ngModel)]=\"exprAble\" name=\"enable\" (click)=\"tranExpr()\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.messContent'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                        [(value)]=\"messageNotice.content\" (clickHandle)=\"contentExpr($event)\">\r\n                      </input-group>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.recipient'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <div class=\"text-right mb-2\">\r\n                        <farris-button [type]=\"'link'\" (click)=\"addReceiver()\" [disabled]=\"disableAdd()\">\r\n                          <span class=\"f-icon f-icon-add\"></span>\r\n                          {{'component.messageNoticeEdit.addReceiver'|wfLocale}}</farris-button>\r\n                      </div>\r\n                      <div *ngFor=\"let receiver of messageNotice.receivers; let i=index\" class=\"col-12 d-flex px-0\">\r\n                        <div class=\"farris-group-wrap col-4 pl-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list [(ngModel)]=\"receiver.type\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                [enableClear]=\"true\" [data]=\"receiverTypes\" [name]=\"'receiverType'+i\"\r\n                                [editable]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='processParticipant'\" class=\"farris-group-wrap col-4 pl-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list [(ngModel)]=\"receiver.processParticipant\" [idField]=\"'value'\"\r\n                                [textField]=\"'text'\" [enableClear]=\"false\" [data]=\"processParticipantTypes\"\r\n                                [name]=\"'processParticipantType'+i\" [editable]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          *ngIf=\"receiver.type==='processParticipant' && receiver.processParticipant==='activityExecutorParticipant'\"\r\n                          class=\"farris-group-wrap col-4 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [enableClear]=\"true\" (clear)=\"clearActivityExecutor(i)\"\r\n                                [(value)]=\"receiver.activityDefName\"\r\n                                (clickHandle)=\"selectActivityExecutorParticipant(receiver.activityDefId, i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='variableParticipant'\" class=\"farris-group-wrap col-5 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [enableClear]=\"true\" (clear)=\"clearVariableParticipant(i)\"\r\n                                [(value)]=\"receiver.variableName\"\r\n                                (clickHandle)=\"selectVariableParticipant(receiver.variableParticipant, i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='variableParticipant'\" class=\"farris-group-wrap col-3 px-0 pl-3\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list [(ngModel)]=\"receiver.orgType\" [idField]=\"'value'\" [textField]=\"'name'\"\r\n                                [enableClear]=\"false\" [data]=\"variableOrgTypes\" [name]=\"'variableParticipantOrgType'+i\"\r\n                                [editable]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='userParticipant'\" class=\"farris-group-wrap col-8 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [(value)]=\"receiver.userNames\" (clickHandle)=\"selectUserParticipant(receiver, i)\"\r\n                                (clear)=\"clearUsers(i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='positionParticipant'\" class=\"farris-group-wrap col-8 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [enableClear]=\"true\" (clear)=\"clearPosition(i)\"\r\n                                [value]=\"receiver.positionId?('component.messageNoticeEdit.posi'|wfLocale)+receiver.positionName+'\uFF1B'+(receiver.orgId?(('component.messageNoticeEdit.organization'|wfLocale))+receiver.orgId:''):''\"\r\n                                (clickHandle)=\"selectPositionParticipant(receiver, i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <lib-sms-message-template *ngIf=\"hasSmsTemplate\" [smsMessageTemplate]=\"this.messageNotice.smsMessageTemplate\"></lib-sms-message-template>\r\n          </form>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.messageNoticeEdit.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.messageNoticeEdit.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<sys-farris-grid-lookup #userHelp style=\"display: none;\" [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\"\r\n  [pagination]=\"true\" [pageSize]=\"20\" title=\"{{'component.messageNoticeEdit.sys'|wfLocale}}\" [sourceType]=\"'user'\" (afterConfirm)=\"usersSelect($event)\"\r\n  [bindingData]=\"bindingData\" [filter]=\"{notGetCurrentUser:false, notGetStopUser: true}\" [typeMode]=\"1\"\r\n  [required]=\"false\">\r\n</sys-farris-grid-lookup>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [".help-tip{text-align:center;background-color:#bcdbea;border-radius:50%;width:20px;height:20px;font-size:6px;cursor:default}"]
                }] }
    ];
    /** @nocollapse */
    MessageNoticeEditComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: ProcessDesignerUIState },
        { type: HttpService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    MessageNoticeEditComponent.propDecorators = {
        footer: [{ type: ViewChild, args: ['footer',] }],
        SmsTemplate: [{ type: ViewChild, args: [SmsMessageTemplateComponent,] }],
        closeEmitter: [{ type: Output }],
        submitEmitter: [{ type: Output }],
        userHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
        location: [{ type: Input }],
        value: [{ type: Input }]
    };
    return MessageNoticeEditComponent;
}());
export { MessageNoticeEditComponent };
if (false) {
    /** @type {?} */
    MessageNoticeEditComponent.prototype.groupIcon2;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.exprAble;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.footer;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.SmsTemplate;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.closeEmitter;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.submitEmitter;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.userHelp;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype._location;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.messageNotice;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.typeGroup;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.receiverVariables;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.variableOrgTypes;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.sendTimes;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.receiverVari;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.bindingData;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.index;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.receiverTypes;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.processParticipantTypes;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.userTypeButtonNeedShow;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.hasAdminOrg;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.hasSmsTemplate;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.disableAdd;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.processSendTime;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.ReceiverType;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.activitySendTime;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,