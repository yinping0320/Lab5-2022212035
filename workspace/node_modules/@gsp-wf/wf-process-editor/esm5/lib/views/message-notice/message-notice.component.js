/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, EventEmitter, Output, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { MessageNotice } from './message-notice';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { MessageNoticeEditComponent } from './message-notice-edit/message-notice-edit.component';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { MessageNoticeCopyComponent } from './message-notice-copy/message-notice-copy.component';
import { ProcessDesignerViewModel } from '../../app/process-designer.viewmodel';
import { HttpService } from '@ecp-caf/caf-common';
import { MessageReceiver } from './message-receiver';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var MessageNoticeComponent = /** @class */ (function () {
    function MessageNoticeComponent(resolver, injector, modalService, message, uistate, viewModel, http, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.viewModel = viewModel;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.notify'),
            width: 760,
            height: 480,
            showButtons: true
        };
        this.messageNotices = new Array();
        this.columns = [];
        this.location = 'activity';
        this.processSendTime = [
            { value: 'PROCESSINSTANCE_COMPLETED', text: this.localePipe.transform('component.MessageNotice.procComplete') },
            { value: 'PROCESSINSTANCE_ABORTED', text: this.localePipe.transform('component.MessageNotice.procAborted') },
            { value: 'PROCESSINSTANCE_ROLLBACK', text: this.localePipe.transform('component.MessageNotice.procRollBack') }
        ];
        this.activitySendTime = [
            { value: 'WORKITEM_CREATED', text: this.localePipe.transform('component.MessageNotice.workCreated') },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform('component.MessageNotice.actComplete') },
            { value: 'ACTIVITY_ABORTED', text: this.localePipe.transform('component.MessageNotice.actAborted') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    Object.defineProperty(MessageNoticeComponent.prototype, "value", {
        set: /**
         * @param {?} notices
         * @return {?}
         */
        function (notices) {
            if (notices && notices.length > 0) {
                this.messageNotices = notices.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ({
                    id: ProcessDeUtil.GenerateElementId(),
                    content: n.content,
                    sendTime: n.sendTime,
                    sendType: n.sendType,
                    subject: n.subject,
                    receiver: n.receiver,
                    receiverText: n.receiverText,
                    receivers: n.receivers ? n.receivers : new Array(),
                    smsMessageTemplate: n.smsMessageTemplate
                }); }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.location = this.editorParams.location;
        this.columns = [
            {
                field: 'subject', width: 100, title: this.localePipe.transform('component.MessageNotice.subject'),
            }, {
                field: 'content', width: 150, title: this.localePipe.transform('component.MessageNotice.content'), showTips: true,
            }, {
                field: 'sendTime', width: 100, title: this.localePipe.transform('component.MessageNotice.sendTime'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.location === 'process' ? this.processSendTime : this.activitySendTime }
                },
            }, {
                field: 'sendType', width: 100, title: this.localePipe.transform('component.MessageNotice.sendType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'name', data: this.uistate.messageChannels.map((/**
                         * @param {?} m
                         * @return {?}
                         */
                        function (m) { return ({ value: m.code, name: m.name }); })) }
                },
            }, {
                field: 'receiverText', width: 120, title: this.localePipe.transform('component.MessageNotice.receiverText'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    var e_1, _a;
                    /** @type {?} */
                    var receiverText = '';
                    if (d.receivers && d.receivers.length > 0) {
                        try {
                            for (var _b = tslib_1.__values(d.receivers), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var receiver = _c.value;
                                if (receiver.type === 'processParticipant') {
                                    if (receiver.processParticipant === 'procInstCreator') {
                                        receiverText += _this.localePipe.transform('component.MessageNotice.procInstCreator');
                                    }
                                    else if (receiver.processParticipant === 'workItemParticipant') {
                                        receiverText += _this.localePipe.transform('component.MessageNotice.workItemParticipant');
                                    }
                                    else if (receiver.processParticipant === 'activityExecutorParticipant') {
                                        receiverText += (receiver.activityDefName + '，');
                                    }
                                }
                                else if (receiver.type === 'userParticipant') {
                                    receiverText += (receiver.userNames + '，');
                                }
                                else if (receiver.type === 'variableParticipant') {
                                    receiverText += (receiver.variableName + '，');
                                }
                                else if (receiver.type === 'positionParticipant') {
                                    receiverText += (receiver.positionName + '，');
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    if (receiverText) {
                        receiverText = receiverText.substring(0, receiverText.length - 1);
                    }
                    return receiverText;
                }),
            }
        ];
        if (this.location === 'messageActivity') {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== 'sendTime'; }));
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        /** @type {?} */
        var messageNotice = new MessageNotice();
        if (this.location === 'activity') {
            messageNotice.sendTime = 'WORKITEM_CREATED';
            /** @type {?} */
            var messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'workItemParticipant';
            messageNotice.receivers = [messageReceiver];
        }
        else if (this.location === 'process') {
            messageNotice.sendTime = 'PROCESSINSTANCE_COMPLETED';
            /** @type {?} */
            var messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'procInstCreator';
            messageNotice.receivers = [messageReceiver];
        }
        else if (this.location === 'messageActivity') {
            /** @type {?} */
            var messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'procInstCreator';
            messageNotice.receivers = [messageReceiver];
        }
        compRef.instance.value = messageNotice;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageNotices = _this.messageNotices.concat([re]);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.messageSet'),
            width: 760,
            height: 480,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.edit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.grid.selectedRow) {
            this.message.info(this.localePipe.transform('component.MessageNotice.selectedRow'));
            return;
        }
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        compRef.instance.value = this.grid.selectedRow.data;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageNotices = _this.messageNotices.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (m.id === re.id) {
                    return re;
                }
                return m;
            }));
            _this.grid.unSelectRow(_this.grid.selectedRow.data.id, true);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.messageSet'),
            width: 760,
            height: 480,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.batchCopy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.messageNotices) {
            this.message.info(this.localePipe.transform('component.MessageNotice.noCopy'));
            return;
        }
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeCopyComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.messageNotices = this.messageNotices;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.viewModel.copy(ResourceKeys.batchCopyProperty, data);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.batchCopy'),
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info(this.localePipe.transform('component.MessageNotice.selectedRow'));
            return;
        }
        this.messageNotices = this.messageNotices.filter((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.id !== selected.id; }));
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var object = { value: this.messageNotices, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    MessageNoticeComponent.prototype.GetOrganizationType = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.uistate.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return ({ value: d.id, text: d.name }); })); }));
    };
    MessageNoticeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-message-notice',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">{{'component.MessageNotice.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"edit()\">{{'component.MessageNotice.edit' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" [disabled]=\"location!=='activity'\" (click)=\"batchCopy()\">{{'component.MessageNotice.batchCopy' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.MessageNotice.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <farris-datagrid #grid [data]=\"messageNotices\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"false\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.MessageNotice.lineNumber'|wfLocale}}\" [lineNumberWidth]=\"50\"\r\n        [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.MessageNotice.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.MessageNotice.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MessageNoticeComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDesignerUIState },
        { type: ProcessDesignerViewModel },
        { type: HttpService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    MessageNoticeComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return MessageNoticeComponent;
}());
export { MessageNoticeComponent };
if (false) {
    /** @type {?} */
    MessageNoticeComponent.prototype.cls;
    /** @type {?} */
    MessageNoticeComponent.prototype.closeModal;
    /** @type {?} */
    MessageNoticeComponent.prototype.submitModal;
    /** @type {?} */
    MessageNoticeComponent.prototype.editorParams;
    /** @type {?} */
    MessageNoticeComponent.prototype.modalFooter;
    /** @type {?} */
    MessageNoticeComponent.prototype.grid;
    /** @type {?} */
    MessageNoticeComponent.prototype.modalConfig;
    /** @type {?} */
    MessageNoticeComponent.prototype.messageNotices;
    /** @type {?} */
    MessageNoticeComponent.prototype.columns;
    /** @type {?} */
    MessageNoticeComponent.prototype.location;
    /** @type {?} */
    MessageNoticeComponent.prototype.processSendTime;
    /** @type {?} */
    MessageNoticeComponent.prototype.activitySendTime;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.viewModel;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.localePipe;
}
/** @enum {string} */
var ResourceKeys = {
    batchCopyProperty: 'batchCopyProperty',
};
export { ResourceKeys };
var MessageNoticeConverter = /** @class */ (function () {
    function MessageNoticeConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.MessageNotice.set");
        }
        else {
            return this.localePipe.transform("component.MessageNotice.notSet");
        }
    };
    return MessageNoticeConverter;
}());
export { MessageNoticeConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MessageNoticeConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,