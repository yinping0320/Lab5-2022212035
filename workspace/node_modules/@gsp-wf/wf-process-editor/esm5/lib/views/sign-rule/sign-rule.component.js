/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { SignRuleEntity } from './entites/sign-rule.entity';
import { DialogComponent } from '@farris/ui-dialog';
import { ExprEditMode, ExpressionService } from '@gsp-svc/expression';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { of } from 'rxjs';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { BpmnModelHelper } from '@edp-pmf/bpmn-model';
import { Condition, CounterSignRule } from '@gsp-wf/wf-process-model';
var SignRuleComponent = /** @class */ (function () {
    function SignRuleComponent(formBuilder, message, exprService, designerUIState, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.formBuilder = formBuilder;
        this.message = message;
        this.exprService = exprService;
        this.designerUIState = designerUIState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.signRule.countersignRules'),
            width: 800,
            height: 520,
            showButtons: true
        };
        this.editCondition = false;
        this.data = [];
        this.calculationMethods = [
            { text: this.localePipe.transform('component.signRule.byNumber'), value: 'byNumber' },
            { text: this.localePipe.transform('component.signRule.byProportion'), value: 'byProportion' },
            { text: this.localePipe.transform('component.signRule.customConditions'), value: 'null' },
        ];
        this.counterSignVariables = [];
        this.bpmnModel = this.designerUIState.bpmnModel;
        /**
         * **** 审批项帮助参数 ********************************************************
         */
        this.approvalCols = [{ title: this.localePipe.transform('component.signRule.value'), field: 'value', width: 80 },
            { title: this.localePipe.transform('component.signRule.text'), field: 'text', width: 90 }];
        this.approvalItems = [];
        this.approvalItems1 = [
            { value: 'Forward', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.forward') },
            { value: 'Backward', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.backward') },
            { value: 'Abort', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.abort') }
        ];
        /**
         * ********************************
         */
        this.columns = [
            { field: 'conclusionName', width: 25, title: this.localePipe.transform('component.signRule.conclusionName') },
            { field: 'conclusionValue', width: 25, title: this.localePipe.transform('component.signRule.conclusionValue') },
            { field: 'calculateType', width: 40, title: this.localePipe.transform('component.signRule.calculateType'),
                formatter: { type: 'enum', options: { valueField: 'value', textField: 'text', data: this.calculationMethods } },
                editor: { type: EditorTypes.COMBOLIST, options: { valueField: 'value', textField: 'text', data: this.calculationMethods, idField: 'value', panelHeight: 'auto' } }
            },
            { field: 'conditionValue', width: 25, title: this.localePipe.transform('component.signRule.conditionValue'),
                editor: { type: EditorTypes.NUMBERBOX, options: {} },
                formatter: { type: 'number', options: { precision: 0, min: 0 } }
            },
            { field: 'waitAllVotes', width: 35, title: this.localePipe.transform('component.signRule.waitAllVotes'),
                editor: { type: EditorTypes.SWITCH, options: {} },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.signRule.yes'), falseText: this.localePipe.transform('component.signRule.no') } }
            },
            { field: 'completionCondition', width: 50, title: this.localePipe.transform('component.signRule.customConditions'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        /**
         * 结束编辑前事件
         */
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            _this.preValue = JSON.parse(JSON.stringify(rowData));
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(SignRuleComponent.prototype, "value", {
        //会签规则打开页面
        set: 
        //会签规则打开页面
        /**
         * @param {?} rules
         * @return {?}
         */
        function (rules) {
            var e_1, _a;
            if (rules && rules.length > 0) {
                try {
                    for (var rules_1 = tslib_1.__values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                        var rule = rules_1_1.value;
                        /** @type {?} */
                        var val = new SignRuleEntity();
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = rule.ConclusionValue;
                        val.conclusionName = rule.ConclusionName;
                        val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                        val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                        val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                        val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition._value : null;
                        this.data.push(val);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else { // 如果模型上没有会签规则，自动带入所有的审批选项
                this.deleteRow();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SignRuleComponent.prototype, "value1", {
        //多实例打开完成规则页面
        set: 
        //多实例打开完成规则页面
        /**
         * @param {?} rules
         * @return {?}
         */
        function (rules) {
            var e_2, _a;
            this.editCondition = true;
            if (rules && rules.length > 0) {
                try {
                    for (var rules_2 = tslib_1.__values(rules), rules_2_1 = rules_2.next(); !rules_2_1.done; rules_2_1 = rules_2.next()) {
                        var rule = rules_2_1.value;
                        /** @type {?} */
                        var val = new SignRuleEntity();
                        val.id = BpmnModelHelper.GenerateElementId();
                        val.conclusionValue = rule.ConclusionValue;
                        // val.conclusionName = rule.conclusionName;
                        val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                        val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                        val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                        val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition.Value : null;
                        this.data.push(val);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (rules_2_1 && !rules_2_1.done && (_a = rules_2.return)) _a.call(rules_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                this.data = this.setName1(this.data);
            }
            else { // 如果模型上没有会签规则，自动带入所有的审批选项
                this.deleteRow1();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.counterSignVariables = this.designerUIState.counterSignVariables || [];
        this.approvalItems = this.designerUIState.approvalItems || [];
    };
    // 重置动作
    // 重置动作
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.deleteRow = 
    // 重置动作
    /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        this.data = [];
        /** @type {?} */
        var ruleItems = this.designerUIState.approvalItems || [];
        if (ruleItems && ruleItems.length > 0) {
            try {
                for (var ruleItems_1 = tslib_1.__values(ruleItems), ruleItems_1_1 = ruleItems_1.next(); !ruleItems_1_1.done; ruleItems_1_1 = ruleItems_1.next()) {
                    var ruleItem = ruleItems_1_1.value;
                    /** @type {?} */
                    var val = new SignRuleEntity();
                    if (ruleItem.value === 'Pass') {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'byProportion';
                        val.conditionValue = '100';
                        val.waitAllVotes = true;
                    }
                    else if (ruleItem.value === 'Back') {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'byNumber';
                        val.conditionValue = '1';
                        val.waitAllVotes = true;
                    }
                    else {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'null';
                        val.conditionValue = '0';
                        val.waitAllVotes = true;
                    }
                    this.data.push(val);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (ruleItems_1_1 && !ruleItems_1_1.done && (_a = ruleItems_1.return)) _a.call(ruleItems_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    // 重置动作
    // 重置动作
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.deleteRow1 = 
    // 重置动作
    /**
     * @return {?}
     */
    function () {
        var e_4, _a;
        this.data = [];
        if (this.approvalItems1 && this.approvalItems1.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.approvalItems1), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var ruleItem = _c.value;
                    /** @type {?} */
                    var val = new SignRuleEntity();
                    if (ruleItem.value === 'Forward') {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'byProportion';
                        val.conditionValue = '100';
                        val.waitAllVotes = true;
                    }
                    else if (ruleItem.value === 'Backward' || ruleItem.value === 'Abort') {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'byNumber';
                        val.conditionValue = '1';
                        val.waitAllVotes = true;
                    }
                    else {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'null';
                        val.conditionValue = '0';
                        val.waitAllVotes = true;
                    }
                    this.data.push(val);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    // 给个名字
    // 给个名字
    /**
     * @param {?} signRuleEntity
     * @return {?}
     */
    SignRuleComponent.prototype.setName1 = 
    // 给个名字
    /**
     * @param {?} signRuleEntity
     * @return {?}
     */
    function (signRuleEntity) {
        if (signRuleEntity && signRuleEntity.length > 0) {
            for (var i = 0; i < signRuleEntity.length; i++) {
                if (signRuleEntity[i].conclusionValue === 'Forward') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.forward');
                }
                else if (signRuleEntity[i].conclusionValue === 'Backward') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.backward');
                }
                else if (signRuleEntity[i].conclusionValue === 'Abort') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.abort');
                }
            }
        }
        return signRuleEntity;
    };
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning(this.localePipe.transform('component.signRule.notEmpty'));
        }
        else {
            /** @type {?} */
            var object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.clickOK1 = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning(this.localePipe.transform('component.signRule.notEmpty'));
        }
        else {
            /** @type {?} */
            var counterSignRules_1 = new Array();
            this.data.forEach((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                /** @type {?} */
                var counterSignRule = new CounterSignRule(_this.bpmnModel);
                counterSignRule.CalculateType = d.calculateType;
                counterSignRule.ConclusionValue = d.conclusionValue;
                counterSignRule.ConditionValue = d.conditionValue;
                counterSignRule.WaitAllVotes = d.waitAllVotes;
                counterSignRule.CompletionCondition = new Condition(_this.bpmnModel);
                counterSignRule.CompletionCondition.Value = d.completionCondition;
                counterSignRules_1.push(counterSignRule);
            }));
            // let counterSignRules = new CounterSignRule(this.bpmnModel);
            this.submitModal.emit(counterSignRules_1);
        }
    };
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SignRuleComponent.prototype.editConditon = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_5, _a, e_6, _b, e_7, _c, e_8, _d, e_9, _e;
        // this.exprService.clearContext();
        /** @type {?} */
        var context = new Array();
        if (this.editCondition) {
            if (this.designerUIState.multiCounterSignVariables.length > 0) {
                var _loop_1 = function (variable) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.key === variable.key; }))) {
                        context.push(variable);
                    }
                };
                try {
                    for (var _f = tslib_1.__values(this.designerUIState.multiCounterSignVariables), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var variable = _g.value;
                        _loop_1(variable);
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
            if (context.length > 0) {
                try {
                    for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                        var v = context_1_1.value;
                        this.exprService.addContext(v);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (context_1_1 && !context_1_1.done && (_b = context_1.return)) _b.call(context_1);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
        else {
            if (this.counterSignVariables && this.counterSignVariables.length > 0) {
                var _loop_2 = function (variable) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.key === variable.key; }))) {
                        context.push(variable);
                    }
                };
                try {
                    for (var _h = tslib_1.__values(this.counterSignVariables), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var variable = _j.value;
                        _loop_2(variable);
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
            if (this.designerUIState.subActivityContext.length > 0) {
                var _loop_3 = function (variable) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.key === variable.key; }))) {
                        context.push(variable);
                    }
                };
                try {
                    for (var _k = tslib_1.__values(this.designerUIState.subActivityContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                        var variable = _l.value;
                        _loop_3(variable);
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_l && !_l.done && (_d = _k.return)) _d.call(_k);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
            if (context.length > 0) {
                try {
                    for (var context_2 = tslib_1.__values(context), context_2_1 = context_2.next(); !context_2_1.done; context_2_1 = context_2.next()) {
                        var v = context_2_1.value;
                        this.exprService.addContext(v);
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (context_2_1 && !context_2_1.done && (_e = context_2.return)) _e.call(context_2);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版（会签规则需要上下文变量）
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.exprService.exprEntity.contextEntities = _this.exprService.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * 选中审批项
     */
    /**
     * 选中审批项
     * @return {?}
     */
    SignRuleComponent.prototype.approvalSelect = /**
     * 选中审批项
     * @return {?}
     */
    function () {
        var e_10, _a;
        /** @type {?} */
        var selections = this.apvlItemsGrid.checkeds;
        if (selections && selections.length > 0) {
            try {
                for (var selections_1 = tslib_1.__values(selections), selections_1_1 = selections_1.next(); !selections_1_1.done; selections_1_1 = selections_1.next()) {
                    var selection = selections_1_1.value;
                    /** @type {?} */
                    var signRule = new SignRuleEntity();
                    signRule.id = ProcessDeUtil.GenerateElementId();
                    signRule.conclusionValue = selection.data.value;
                    signRule.conclusionName = selection.data.text;
                    this.data.push(signRule);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (selections_1_1 && !selections_1_1.done && (_a = selections_1.return)) _a.call(selections_1);
                }
                finally { if (e_10) throw e_10.error; }
            }
            this.grid.loadData(this.data);
            this.apvlItemDialog.close();
        }
        else {
            this.message.info(this.localePipe.transform('component.signRule.pleaseSelect'));
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SignRuleComponent.prototype.endEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.curValue = e.rowData;
        // 自定义会签规则和预置会签规则互斥
        if (this.preValue.completionCondition !== this.curValue.completionCondition &&
            !(this.isEmpty(this.preValue.completionCondition) && this.isEmpty(this.curValue.completionCondition))) {
            this.data[e.rowIndex].calculateType = 'null',
                this.data[e.rowIndex].conditionValue = '0';
            this.data[e.rowIndex].waitAllVotes = false;
        }
        else if (this.preValue.calculateType !== this.curValue.calculateType ||
            this.preValue.conditionValue !== this.curValue.conditionValue ||
            this.preValue.waitAllVotes !== this.curValue.waitAllVotes) {
            this.data[e.rowIndex].completionCondition = null;
        }
        if (e.column.field === 'conditionValue' && this.data[e.rowIndex].calculateType === 'byProportion'
            && Number.parseInt(e.value) > 100) {
            this.message.info(this.localePipe.transform('component.signRule.maxConditionValue'));
            this.data[e.rowIndex].conditionValue = '100';
        }
        else if (e.column.field === 'conditionValue' && Number.parseInt(e.value) < 0) {
            this.message.info(this.localePipe.transform('component.signRule.minConditionValue'));
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if ((e.column.field === 'calculateType' || e.column.field === 'conditionValue') && (this.data[e.rowIndex].calculateType === 'oneVote' ||
            this.data[e.rowIndex].calculateType === 'fullVote') && Number.parseInt(this.data[e.rowIndex].conditionValue) !== 0) {
            this.message.info(this.localePipe.transform('component.signRule.noConditional'));
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if (e.column.field === 'calculateType' && this.data[e.rowIndex].calculateType === 'byProportion' &&
            Number.parseInt(this.data[e.rowIndex].conditionValue) > 100) {
            this.message.info(this.localePipe.transform('component.signRule.maxConditionValue'));
            this.data[e.rowIndex].conditionValue = '100';
        }
    };
    /**
     * @param {?} s
     * @return {?}
     */
    SignRuleComponent.prototype.isEmpty = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        if (!s || s.length == 0) {
            return true;
        }
        else {
            return false;
        }
    };
    SignRuleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-sign-rule',
                    template: "  <div class=\"f-page\">\r\n    <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n        <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n          [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n          [multiSelect]=\"false\" [afterEdit]='afterEdit' (endEdit)=\"endEdit($event)\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </div>\r\n  </div>\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow()\">{{'component.signRule.deleteRow' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #iconSelectFooter1>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow1()\">{{'component.signRule.deleteRow' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK1()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<farris-dialog #approvalItemDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.signRule.approvalOptions'| wfLocale}}\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n      <farris-datagrid #approvalTable [columns]=\"approvalCols\" [data]=\"approvalItems\" [idField]=\"'value'\"\r\n        [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\"\r\n        [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n      </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"approvalItemDialog.close()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3 mx-2\" (click)=\"approvalSelect()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SignRuleComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MessagerService },
        { type: ExpressionService },
        { type: ProcessDesignerUIState },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    SignRuleComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        value1: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        modalFooter1: [{ type: ViewChild, args: ['iconSelectFooter1',] }],
        apvlItemsGrid: [{ type: ViewChild, args: ['approvalTable',] }],
        apvlItemDialog: [{ type: ViewChild, args: ['approvalItemDialog',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return SignRuleComponent;
}());
export { SignRuleComponent };
if (false) {
    /** @type {?} */
    SignRuleComponent.prototype.cls;
    /** @type {?} */
    SignRuleComponent.prototype.closeModal;
    /** @type {?} */
    SignRuleComponent.prototype.submitModal;
    /** @type {?} */
    SignRuleComponent.prototype.editorParams;
    /** @type {?} */
    SignRuleComponent.prototype.modalFooter;
    /** @type {?} */
    SignRuleComponent.prototype.modalFooter1;
    /** @type {?} */
    SignRuleComponent.prototype.apvlItemsGrid;
    /** @type {?} */
    SignRuleComponent.prototype.apvlItemDialog;
    /** @type {?} */
    SignRuleComponent.prototype.grid;
    /** @type {?} */
    SignRuleComponent.prototype.modalConfig;
    /** @type {?} */
    SignRuleComponent.prototype.editCondition;
    /** @type {?} */
    SignRuleComponent.prototype.data;
    /** @type {?} */
    SignRuleComponent.prototype.calculationMethods;
    /** @type {?} */
    SignRuleComponent.prototype.counterSignVariables;
    /** @type {?} */
    SignRuleComponent.prototype.bpmnModel;
    /**
     * **** 审批项帮助参数 ********************************************************
     * @type {?}
     */
    SignRuleComponent.prototype.approvalCols;
    /** @type {?} */
    SignRuleComponent.prototype.approvalItems;
    /** @type {?} */
    SignRuleComponent.prototype.approvalItems1;
    /**
     * ********************************
     * @type {?}
     */
    SignRuleComponent.prototype.columns;
    /** @type {?} */
    SignRuleComponent.prototype.preValue;
    /** @type {?} */
    SignRuleComponent.prototype.curValue;
    /**
     * 结束编辑前事件
     * @type {?}
     */
    SignRuleComponent.prototype.afterEdit;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.exprService;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.localePipe;
}
var SignRuleConverter = /** @class */ (function () {
    function SignRuleConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    SignRuleConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        // 会签规则只要启用就有默认值，所以始终置为'已设置';
        return this.localePipe.transform("component.signRule.set");
    };
    return SignRuleConverter;
}());
export { SignRuleConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SignRuleConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,