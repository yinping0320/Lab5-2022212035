/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { of } from 'rxjs';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { SessionService } from '@ecp-caf/caf-common';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { BsModalService } from '@farris/ui-modal';
import { BizComponentEntity } from '../../domain/entities/biz-component.entity';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var EditComponentParameterComponent = /** @class */ (function () {
    function EditComponentParameterComponent(designerState, expr, resolver, injector, sessionSrc, componentService, modalService, message, cd, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.componentService = componentService;
        this.modalService = modalService;
        this.message = message;
        this.cd = cd;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.paramColumns = [];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.executionTimingList = new Array();
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    ;
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.paramColumns = [
            { field: 'code', width: 50, title: this.localePipe.transform('component.editComponentParameter.code') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.editComponentParameter.name') },
            {
                field: 'required', width: 50, title: this.localePipe.transform('component.editComponentParameter.required'), formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    if (v) {
                        return _this.localePipe.transform('component.editComponentParameter.yes');
                    }
                    else {
                        return _this.localePipe.transform('component.editComponentParameter.no');
                    }
                })
            },
            {
                field: 'value', width: 100, title: this.localePipe.transform('component.editComponentParameter.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        // setTimeout(() => {
        //   this.cd.detectChanges();
        // },0 )
    };
    /**
     * @param {?} e
     * @return {?}
     */
    EditComponentParameterComponent.prototype.showExprHelp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        /** @type {?} */
        var context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.designerState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _g = tslib_1.__values(this.designerState.subActivityContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    _loop_1(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.location === 'activity') {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = tslib_1.__values(this.designerState.activityComponentContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_2(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.expr.exprEntity.contextEntities = _this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    /**
     * 取数构件帮助new
     */
    /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    EditComponentParameterComponent.prototype.openComponentSelectorNew = /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    function (metadataId, sessionId) {
        var _this = this;
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        function (selectorResult) {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    /** @type {?} */
                    var component = new BizComponentEntity(result.name, result.id, result.operations[0].code);
                    component.id = ProcessDeUtil.GenerateElementId();
                    component.actualParameters = _this.bindParas(result);
                    if (component.metadataId === '7433df25-9260-4c24-86f0-9da3e89450fb' ||
                        component.metadataId === 'd0783800-ed60-488c-b053-8806a15947fe' ||
                        component.metadataId === 'b89e9b9a-2e2d-4bd0-b354-187219544d34' ||
                        component.metadataId === 'a8b8f7a4-49ae-4b7d-88d2-b3772b9d0ae5') {
                        component.scopeType = 'ExternalProcess';
                    }
                    else {
                        component.scopeType = 'DirectStart';
                    }
                    _this.curComponent = component;
                    _this.cd.detectChanges();
                }
            }));
        }));
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    EditComponentParameterComponent.prototype.bindParas = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({ code: p.code, name: p.name, value: '', required: p.code.toLowerCase() === 'wfcontext' ? false : p.required }); }));
            }
        }
        return parameters;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    EditComponentParameterComponent.prototype.assignParameterValue = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                var v = _this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key.indexOf('metadataId') > -1; }))[0].key;
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"" + v + "\\\")\"}", required: true };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                var v = _this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key.indexOf('schemaId') > -1; }))[0].key;
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"" + v + "\\\")\"}", required: true };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"dataId\\\")\"}", required: true };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"procInstId\\\")\"}", required: true };
            }
            else {
                return { code: p.code, name: p.name, value: '', required: true };
            }
        }));
    };
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.componentSelect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            try {
                /** @type {?} */
                var meta = $event.metadata;
                _this.openComponentSelectorNew(meta.id, _this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error(_this.localePipe.transform('component.editComponentParameter.openComponentFail') + $event);
            }
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform('component.editComponentParameter.componentSelection'),
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.endCellEdit = /**
     * @return {?}
     */
    function () {
        this.paramlist.endCellEdit();
    };
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.editOK = /**
     * @return {?}
     */
    function () {
        // 结束构件参数编辑状态
        this.endCellEdit();
        if (this.validator()) {
            this.submitEmitter.emit(this.curComponent);
        }
    };
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.editCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    /**
     * @return {?}
     */
    EditComponentParameterComponent.prototype.validator = /**
     * @return {?}
     */
    function () {
        var e_5, _a;
        if (!this.curComponent || !this.curComponent.metadataId || !this.curComponent.methodCode) {
            this.message.info(this.localePipe.transform('component.editComponentParameter.curComponent'));
            return false;
        }
        else if (this.location !== 'autoActivity' && !this.curComponent.executionTime) {
            this.message.info(this.localePipe.transform('component.editComponentParameter.executionTime'));
            return false;
        }
        else {
            /** @type {?} */
            var codeList = '';
            try {
                for (var _b = tslib_1.__values(this.curComponent.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var param = _c.value;
                    if (param.required && !param.value) {
                        codeList = codeList + ("\uFF0C" + param.code);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            if (codeList.length > 0) {
                codeList = codeList.slice(1, codeList.length);
                this.message.info(this.localePipe.transform('component.editComponentParameter.para') + '【' + codeList + this.localePipe.transform('component.editComponentParameter.paraRequired'));
                return false;
            }
        }
        return true;
    };
    EditComponentParameterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-edit-component-parameter',
                    template: "<div *ngIf=\"curComponent\" class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n    <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n      <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n        <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n          <div class=\"farris-group-wrap mx-3\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-info text-danger\">*</span>\r\n                <span class=\"farris-label-text\">{{'component.editComponentParameter.componentSelection' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap ml-2\">\r\n                <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" name=\"method\" [showButtonWhenDisabled]=\"false\"\r\n                [enableClear]=\"false\" [editable]=\"false\" (clickHandle)=\"componentSelect()\" [groupText]=\"groupIcon\" [(ngModel)]=\"curComponent.name\" [disabled]=\"editState==='edit'\"></input-group>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"location!=='autoActivity'\">\r\n          <div class=\"farris-form-controls-inline farris-form-auto\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.editComponentParameter.execuTime' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <farris-combo-list name=\"executionTime\" [idField]=\"'value'\" [(ngModel)]=\"curComponent.executionTime\"\r\n                    [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"executionTimingList\" [panelHeight]=\"'auto'\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </form>\r\n    <ng-container>\r\n      <farris-tabs class=\"f-utils-fill pr-2 pl-2\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n        <farris-tab title=\"{{'component.editComponentParameter.parameterList'|wfLocale}}\" [id]=\"'parameters'\">\r\n          <ng-template #content>\r\n            <div class=\"f-utils-fill-flex-column h-100\">\r\n              <farris-datagrid #paramlist [data]=\"curComponent.actualParameters\" [columns]=\"paramColumns\"\r\n                [idField]=\"'code'\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [afterEdit]=\"paramAfterEdit\"\r\n                [closeOtherGridEditor]=\"true\">\r\n              </farris-datagrid>\r\n            </div>\r\n          </ng-template>\r\n        </farris-tab>\r\n      </farris-tabs>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.editComponentParameter.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.editComponentParameter.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    EditComponentParameterComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: SessionService },
        { type: CommonComponentUiRTService },
        { type: BsModalService },
        { type: MessagerService },
        { type: ChangeDetectorRef },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    EditComponentParameterComponent.propDecorators = {
        editState: [{ type: Input }],
        closeEmitter: [{ type: Output }],
        submitEmitter: [{ type: Output }],
        paramlist: [{ type: ViewChild, args: ['paramlist',] }],
        editFooter: [{ type: ViewChild, args: ['editFooter',] }],
        curComponent: [{ type: Input }]
    };
    return EditComponentParameterComponent;
}());
export { EditComponentParameterComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.defaultProcessComponentIds;
    /** @type {?} */
    EditComponentParameterComponent.prototype.editState;
    /** @type {?} */
    EditComponentParameterComponent.prototype.closeEmitter;
    /** @type {?} */
    EditComponentParameterComponent.prototype.submitEmitter;
    /** @type {?} */
    EditComponentParameterComponent.prototype.paramlist;
    /** @type {?} */
    EditComponentParameterComponent.prototype.editFooter;
    /** @type {?} */
    EditComponentParameterComponent.prototype.paramColumns;
    /** @type {?} */
    EditComponentParameterComponent.prototype.location;
    /** @type {?} */
    EditComponentParameterComponent.prototype.groupIcon;
    /** @type {?} */
    EditComponentParameterComponent.prototype.executionTimingList;
    /** @type {?} */
    EditComponentParameterComponent.prototype.canEdit;
    /** @type {?} */
    EditComponentParameterComponent.prototype.curComponent;
    /** @type {?} */
    EditComponentParameterComponent.prototype.paramAfterEdit;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.sessionSrc;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.componentService;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.message;
    /** @type {?} */
    EditComponentParameterComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.localePipe;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1jb21wb25lbnQtcGFyYW1ldGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvZWRpdC1jb21wb25lbnQtcGFyYW1ldGVyL2VkaXQtY29tcG9uZW50LXBhcmFtZXRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWlCLGlCQUFpQixFQUFFLFNBQVMsRUFBRSx3QkFBd0IsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFVLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxTSxPQUFPLEVBQWMsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFhLE1BQU0scUJBQXFCLENBQUM7QUFDL0YsT0FBTyxFQUFnQyx5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsMEJBQTBCLEVBQWtCLE1BQU0sa0JBQWtCLENBQUM7QUFFOUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUc3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlC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QlEsc0JBQXNCO2dCQUNSLGlCQUFpQjtnQkFKYyx3QkFBd0I7Z0JBQXdCLFFBQVE7Z0JBTXJHLGNBQWM7Z0JBQ2QsMEJBQTBCO2dCQUUxQixjQUFjO2dCQUtkLGVBQWU7Z0JBZEEsaUJBQWlCO2dCQUFqQixpQkFBaUIsdUJBbURwQyxRQUFROzZDQUNSLE1BQU0sU0FBQyxTQUFTO2dEQUNoQixNQUFNLFNBQUMsaUJBQWlCO2dCQXRDRCxZQUFZLHVCQXVDbkMsUUFBUTs7OzRCQTFCVixLQUFLOytCQUNMLE1BQU07Z0NBQ04sTUFBTTs0QkFDTixTQUFTLFNBQUMsV0FBVzs2QkFDckIsU0FBUyxTQUFDLFlBQVk7K0JBT3RCLEtBQUs7O0lBOE5SLHNDQUFDO0NBQUEsQUFuUEQsSUFtUEM7U0EzT1ksK0JBQStCOzs7Ozs7SUFDMUMscUVBQXNIOztJQUN0SCxvREFBMkI7O0lBQzNCLHVEQUFpRDs7SUFDakQsd0RBQWtEOztJQUNsRCxvREFBcUQ7O0lBQ3JELHFEQUFzRDs7SUFDdEQsdURBQWtCOztJQUNsQixtREFBa0Q7O0lBRWxELG9EQUFtRDs7SUFDbkQsOERBQWtDOztJQUNsQyxrREFBaUI7O0lBQ2pCLHVEQUNpQzs7SUFvTGpDLHlEQUVDOzs7OztJQXBMQyx3REFBNkM7Ozs7O0lBQzdDLCtDQUErQjs7Ozs7SUFDL0IsbURBQTBDOzs7OztJQUMxQyxtREFBMEI7Ozs7O0lBQzFCLHFEQUFrQzs7Ozs7SUFDbEMsMkRBQW9EOzs7OztJQUNwRCx1REFBb0M7Ozs7O0lBQ3BDLGtEQUFnQzs7SUFDaEMsNkNBQTRCOzs7OztJQUM1Qiw4Q0FBMEM7Ozs7O0lBQzFDLG1EQUEyQzs7Ozs7SUFDM0Msb0RBQWlEOzs7OztJQUNqRCxxREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbmplY3RvciwgSW5wdXQsIExPQ0FMRV9JRCwgT25Jbml0LCBPcHRpb25hbCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFDb2x1bW4sIERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuLi8uLi9hcHAvcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgRXhwckVkaXRNb2RlLCBFeHByZXNzaW9uU2VydmljZSwgSW5qZWN0ZWRUeXBlLCBWYXJFbnRpdHkgfSBmcm9tICdAZ3NwLXN2Yy9leHByZXNzaW9uJztcclxuaW1wb3J0IHsgTWV0YWRhdGE0UmVmRHRvLCBNZXRhZGF0YUR0bywgU2VsZWN0TWV0YWRhdGFSVENvbXBvbmVudCB9IGZyb20gJ0Bnc3AtbGNtL21ldGFkYXRhcnQtc2VsZWN0b3InO1xyXG5pbXBvcnQgeyBTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBDb21tb25Db21wb25lbnRVaVJUU2VydmljZSwgU2VsZWN0b3JSZXN1bHQgfSBmcm9tICdAZ3NwLWNtcC9jY21wLXVpJztcclxuaW1wb3J0IHsgR3NwQ29tcG9uZW50IH0gZnJvbSAnQGdzcC1jbXAvY29tbW9uLWNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IEJpekNvbXBvbmVudEVudGl0eSB9IGZyb20gJy4uLy4uL2RvbWFpbi9lbnRpdGllcy9iaXotY29tcG9uZW50LmVudGl0eSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZVV0aWwgfSBmcm9tICcuLi8uLi9kb21haW4vcHJvY2Vzcy1kZS11dGlsJztcclxuaW1wb3J0IHsgQWN0dWFsUGFyYW1ldGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL2VudGl0aWVzL2FjdHVhbC1wYXJhbWV0ZXInO1xyXG5pbXBvcnQgeyBQYXJhbWV0ZXIgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IFdGX0xBTkdfUkVTT1VSQ0VTLCBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi8uLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5pbXBvcnQgeyBXRl9QUk9DRVNTX0VESVRPUl9MQU5HX1JFU09VUkNFUyB9IGZyb20gJy4uLy4uL2kxOG4vYXNzZXRzL2xhbmcucmVzb3VyY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdsaWItZWRpdC1jb21wb25lbnQtcGFyYW1ldGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZWRpdC1jb21wb25lbnQtcGFyYW1ldGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9lZGl0LWNvbXBvbmVudC1wYXJhbWV0ZXIuY29tcG9uZW50LmNzcyddLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgIFdmTG9jYWxlUGlwZSxcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFZGl0Q29tcG9uZW50UGFyYW1ldGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICBwcml2YXRlIGRlZmF1bHRQcm9jZXNzQ29tcG9uZW50SWRzID0gWyc1ODYzYzhhOC1lMGE3LTQxMzctYThiMi00YzA1ZTQyYjNiNzMnLCAnYmU3ODFiYTEtYTg4Yi00YmI4LTljODgtMmUyYTI3YTkyMjZlJ107XHJcbiAgQElucHV0KCkgZWRpdFN0YXRlOiBzdHJpbmc7XHJcbiAgQE91dHB1dCgpIGNsb3NlRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBzdWJtaXRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQFZpZXdDaGlsZCgncGFyYW1saXN0JykgcGFyYW1saXN0OiBEYXRhZ3JpZENvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKCdlZGl0Rm9vdGVyJykgZWRpdEZvb3RlcjogVGVtcGxhdGVSZWY8YW55PjtcclxuICBwYXJhbUNvbHVtbnMgPSBbXTtcclxuICBsb2NhdGlvbjogJ2FjdGl2aXR5JyB8ICdwcm9jZXNzJyB8ICdhdXRvQWN0aXZpdHknO1xyXG5cclxuICBncm91cEljb24gPSAnPGkgY2xhc3M9XCJmLWljb24gZi1pY29uLWxvb2t1cFwiPjwvaT4nO1xyXG4gIGV4ZWN1dGlvblRpbWluZ0xpc3QgPSBuZXcgQXJyYXkoKTs7XHJcbiAgY2FuRWRpdDogYm9vbGVhbjtcclxuICBASW5wdXQoKVxyXG4gIGN1ckNvbXBvbmVudDogQml6Q29tcG9uZW50RW50aXR5O1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBkZXNpZ25lclN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlLFxyXG4gICAgcHJpdmF0ZSBleHByOiBFeHByZXNzaW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBzZXNzaW9uU3JjOiBTZXNzaW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgY29tcG9uZW50U2VydmljZTogQ29tbW9uQ29tcG9uZW50VWlSVFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG1lc3NhZ2U6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgQEluamVjdChXRl9MQU5HX1JFU09VUkNFUykgcHJpdmF0ZSByZXNvdXJjZXM6IGFueSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbG9jYWxlUGlwZTogV2ZMb2NhbGVQaXBlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmxvY2FsZVBpcGUgPSB0aGlzLmxvY2FsZVBpcGUgfHwgbmV3IFdmTG9jYWxlUGlwZShsb2NhbGVJZCwgcmVzb3VyY2VzKTtcclxuICAgfVxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICB9XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnBhcmFtQ29sdW1ucyA9IFtcclxuICAgICAgeyBmaWVsZDogJ2NvZGUnLCB3aWR0aDogNTAsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZWRpdENvbXBvbmVudFBhcmFtZXRlci5jb2RlJykgfSxcclxuICAgICAgeyBmaWVsZDogJ25hbWUnLCB3aWR0aDogNTAsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZWRpdENvbXBvbmVudFBhcmFtZXRlci5uYW1lJykgfSxcclxuICAgICAge1xyXG4gICAgICAgIGZpZWxkOiAncmVxdWlyZWQnLCB3aWR0aDogNTAsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZWRpdENvbXBvbmVudFBhcmFtZXRlci5yZXF1aXJlZCcpLCBmb3JtYXR0ZXI6ICh2LCBkLCBpKSA9PiB7XHJcbiAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmVkaXRDb21wb25lbnRQYXJhbWV0ZXIueWVzJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmVkaXRDb21wb25lbnRQYXJhbWV0ZXIubm8nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBmaWVsZDogJ3ZhbHVlJywgd2lkdGg6IDEwMCwgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lZGl0Q29tcG9uZW50UGFyYW1ldGVyLnZhbHVlJyksXHJcbiAgICAgICAgZWRpdG9yOiB7XHJcbiAgICAgICAgICB0eXBlOiAnaW5wdXQtZ3JvdXAnLFxyXG4gICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBncm91cFRleHQ6ICc8aSBjbGFzcz1cImYtaWNvbiBmLWljb24tbG9va3VwXCI+PC9pPicsXHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xpY2tIYW5kbGU6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgZS5mb3JtQ29udHJvbC5zZXRWYWx1ZShlLmluc3RhbmNlLnZhbHVlID8gZS5pbnN0YW5jZS52YWx1ZSA6ICcnKTtcclxuICAgICAgICAgICAgICB0aGlzLnNob3dFeHBySGVscChlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xlYXI6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsZWFyJywgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAvLyAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgLy8gfSwwIClcclxuICB9XHJcbiAgc2hvd0V4cHJIZWxwKGU6IGFueSkge1xyXG4gICAgbGV0IGNvbnRleHQgPSBuZXcgQXJyYXk8VmFyRW50aXR5PigpO1xyXG4gICAgLy8gaWYodGhpcy5leHByLmV4cHJFbnRpdHkuY29udGV4dEVudGl0aWVzLmZpbmQoeCA9PiB4LmtleSA9PT0gJ0N1cnJlbnRMYW5ndWFnZScpKSB7XHJcbiAgICAvLyAgIGNvbnRleHQucHVzaCh0aGlzLmV4cHIuZXhwckVudGl0eS5jb250ZXh0RW50aXRpZXMuZmluZCh4ID0+IHgua2V5ID09PSAnQ3VycmVudExhbmd1YWdlJykpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gdGhpcy5leHByLmNsZWFyQ29udGV4dCgpO1xyXG4gICAgaWYgKHRoaXMuZGVzaWduZXJTdGF0ZS5zY2hlbWFzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCBzY2hlbWEgb2YgdGhpcy5kZXNpZ25lclN0YXRlLnNjaGVtYXMpIHtcclxuICAgICAgICB0aGlzLmV4cHIuYWRkU2NoZW1hKCdTY2hlbWEnLCBzY2hlbWEpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLmRlc2lnbmVyU3RhdGUuc2NoZW1hc1swXS5lbnRpdHlUeXBlcyAmJiB0aGlzLmRlc2lnbmVyU3RhdGUuc2NoZW1hc1swXS5lbnRpdHlUeXBlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5VHlwZSA9IHRoaXMuZGVzaWduZXJTdGF0ZS5zY2hlbWFzWzBdLmVudGl0eVR5cGVzWzBdO1xyXG4gICAgICAgIHRoaXMuZXhwci5hZGRJbmplY3RlZEVudGl0eShlbnRpdHlUeXBlLm5hbWUsICdTY2hlbWEnLFxyXG4gICAgICAgICAgZW50aXR5VHlwZS5uYW1lLCBJbmplY3RlZFR5cGUuRW50aXR5VHlwZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRleHQgPSB0aGlzLmRlc2lnbmVyU3RhdGUuYWRkQ29udGV4dChjb250ZXh0KTtcclxuICAgIGlmICh0aGlzLmRlc2lnbmVyU3RhdGUuc3ViQWN0aXZpdHlDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLmRlc2lnbmVyU3RhdGUuc3ViQWN0aXZpdHlDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKCFjb250ZXh0LnNvbWUoYyA9PiBjLmtleSA9PT0gdmFyaWFibGUua2V5KSkge1xyXG4gICAgICAgICAgY29udGV4dC5wdXNoKHZhcmlhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLmxvY2F0aW9uID09PSAnYWN0aXZpdHknKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdmFyaWFibGUgb2YgdGhpcy5kZXNpZ25lclN0YXRlLmFjdGl2aXR5Q29tcG9uZW50Q29udGV4dCkge1xyXG4gICAgICAgIGlmICghY29udGV4dC5zb21lKGMgPT4gYy5rZXkgPT09IHZhcmlhYmxlLmtleSkpIHtcclxuICAgICAgICAgIGNvbnRleHQucHVzaCh2YXJpYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoY29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdiBvZiBjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5leHByLmFkZENvbnRleHQodik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuZXhwci5zZXRFZGl0UGF0dGVybihFeHByRWRpdE1vZGUuQWR2YW5jZWQpOyAvLyDpu5jorqTmiZPlvIDpq5jnuqfooajovr7lvI/nvJbovpHlmahcclxuICAgIHRoaXMuZXhwci5hZGRFeHByZXNzaW9uVGV4dChlLmluc3RhbmNlLnZhbHVlKTtcclxuICAgIHRoaXMuZXhwci5idWlsZEV4cHJlc3Npb24oKS50aGVuKChleHByZXNzaW9uaW5mbzogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGUuZm9ybUNvbnRyb2wuc2V0VmFsdWUoZXhwcmVzc2lvbmluZm8pO1xyXG4gICAgICBlLmluc3RhbmNlLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgLy/ngrnlh7vnoa7lrprlkI7vvIzljrvpmaTooajovr7lvI/ph4zpnaLnmoTmlrDlop7nmoTkuIrkuIvmloflj5jph49cclxuICAgICAgaWYoY29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdGhpcy5leHByLmV4cHJFbnRpdHkuY29udGV4dEVudGl0aWVzID0gdGhpcy5leHByLmV4cHJFbnRpdHkuY29udGV4dEVudGl0aWVzLmZpbHRlcih4ID0+ICFjb250ZXh0LnNvbWUoeSA9PiB5LmtleSA9PT0geC5rZXkpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWPluaVsOaehOS7tuW4ruWKqW5ld1xyXG4gICAqL1xyXG4gIG9wZW5Db21wb25lbnRTZWxlY3Rvck5ldyhtZXRhZGF0YUlkOiBzdHJpbmcsIHNlc3Npb25JZDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNvbXBvbmVudFNlcnZpY2Uub3BlblNlbGVjdG9yKG1ldGFkYXRhSWQsIHNlc3Npb25JZCkuc3Vic2NyaWJlKFxyXG4gICAgICAoc2VsZWN0b3JSZXN1bHQ6IFNlbGVjdG9yUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgc2VsZWN0b3JSZXN1bHQuY29uZmlybUV2ZW50LnN1YnNjcmliZShcclxuICAgICAgICAgIChyZXN1bHQ6IEdzcENvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gbmV3IEJpekNvbXBvbmVudEVudGl0eShyZXN1bHQubmFtZSwgcmVzdWx0LmlkLCByZXN1bHQub3BlcmF0aW9uc1swXS5jb2RlKTtcclxuICAgICAgICAgICAgICBjb21wb25lbnQuaWQgPSBQcm9jZXNzRGVVdGlsLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgICAgICAgY29tcG9uZW50LmFjdHVhbFBhcmFtZXRlcnMgPSB0aGlzLmJpbmRQYXJhcyhyZXN1bHQpO1xyXG4gICAgICAgICAgICAgIGlmIChjb21wb25lbnQubWV0YWRhdGFJZCA9PT0gJzc0MzNkZjI1LTkyNjAtNGMyNC04NmYwLTlkYTNlODk0NTBmYicgfHxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5tZXRhZGF0YUlkID09PSAnZDA3ODM4MDAtZWQ2MC00ODhjLWIwNTMtODgwNmExNTk0N2ZlJyB8fFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50Lm1ldGFkYXRhSWQgPT09ICdiODllOWI5YS0yZTJkLTRiZDAtYjM1NC0xODcyMTk1NDRkMzQnIHx8XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQubWV0YWRhdGFJZCA9PT0gJ2E4YjhmN2E0LTQ5YWUtNGI3ZC04OGQyLWIzNzcyYjlkMGFlNScpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY29wZVR5cGUgPSAnRXh0ZXJuYWxQcm9jZXNzJztcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnNjb3BlVHlwZSA9ICdEaXJlY3RTdGFydCc7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRoaXMuY3VyQ29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgYmluZFBhcmFzKGNvbXBvbmVudDogR3NwQ29tcG9uZW50KTogQWN0dWFsUGFyYW1ldGVyW10ge1xyXG4gICAgbGV0IHBhcmFtZXRlcnMgPSBbXTtcclxuXHJcbiAgICBpZiAoY29tcG9uZW50Lm9wZXJhdGlvbnNbMF0ucGFyYW1ldGVycyAmJiBjb21wb25lbnQub3BlcmF0aW9uc1swXS5wYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgaWYgKHRoaXMuZGVmYXVsdFByb2Nlc3NDb21wb25lbnRJZHMuaW5kZXhPZihjb21wb25lbnQuaWQpID4gLTEpIHtcclxuICAgICAgICBwYXJhbWV0ZXJzID0gdGhpcy5hc3NpZ25QYXJhbWV0ZXJWYWx1ZShjb21wb25lbnQub3BlcmF0aW9uc1swXS5wYXJhbWV0ZXJzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJhbWV0ZXJzID0gY29tcG9uZW50Lm9wZXJhdGlvbnNbMF0ucGFyYW1ldGVycy5tYXAocCA9PiAoeyBjb2RlOiBwLmNvZGUsIG5hbWU6IHAubmFtZSwgdmFsdWU6ICcnLCByZXF1aXJlZDogcC5jb2RlLnRvTG93ZXJDYXNlKCkgPT09J3dmY29udGV4dCc/IGZhbHNlIDogcC5yZXF1aXJlZCB9KSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbWV0ZXJzO1xyXG4gIH1cclxuICBwcml2YXRlIGFzc2lnblBhcmFtZXRlclZhbHVlKHBhcmFtczogUGFyYW1ldGVyW10pOiBBY3R1YWxQYXJhbWV0ZXJbXSB7XHJcbiAgICByZXR1cm4gcGFyYW1zLm1hcChwID0+IHtcclxuICAgICAgaWYgKHAuY29kZS5pbmRleE9mKCdiZUlkJykgPiAtMSkge1xyXG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmRlc2lnbmVyU3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dC5maWx0ZXIoYyA9PiBjLmtleS5pbmRleE9mKCdtZXRhZGF0YUlkJykgPiAtMSlbMF0ua2V5O1xyXG4gICAgICAgIHJldHVybiB7IGNvZGU6IHAuY29kZSwgbmFtZTogcC5uYW1lLCB2YWx1ZTogYHtcImV4cHJcIjpcIkRlZmF1bHRGdW5jdGlvbi5HZXRDb250ZXh0UGFyYW1ldGVyKFxcXFxcIiR7dn1cXFxcXCIpXCJ9YCwgcmVxdWlyZWQ6IHRydWV9O1xyXG4gICAgICB9IGVsc2UgaWYgKHAuY29kZS5pbmRleE9mKCdub2RlSWQnKSA+IC0xKSB7XHJcbiAgICAgICAgY29uc3QgdiA9IHRoaXMuZGVzaWduZXJTdGF0ZS5mb3JtYWxQYXJhbWV0ZXJDb250ZXh0LmZpbHRlcihjID0+IGMua2V5LmluZGV4T2YoJ3NjaGVtYUlkJykgPiAtMSlbMF0ua2V5O1xyXG4gICAgICAgIHJldHVybiB7IGNvZGU6IHAuY29kZSwgbmFtZTogcC5uYW1lLCB2YWx1ZTogYHtcImV4cHJcIjpcIkRlZmF1bHRGdW5jdGlvbi5HZXRDb250ZXh0UGFyYW1ldGVyKFxcXFxcIiR7dn1cXFxcXCIpXCJ9YCwgcmVxdWlyZWQ6IHRydWUgfTtcclxuICAgICAgfSBlbHNlIGlmIChwLmNvZGUuaW5kZXhPZignZGF0YUlkJykgPiAtMSkge1xyXG4gICAgICAgIHJldHVybiB7IGNvZGU6IHAuY29kZSwgbmFtZTogcC5uYW1lLCB2YWx1ZTogYHtcImV4cHJcIjpcIkRlZmF1bHRGdW5jdGlvbi5HZXRDb250ZXh0UGFyYW1ldGVyKFxcXFxcImRhdGFJZFxcXFxcIilcIn1gLCByZXF1aXJlZDogdHJ1ZSB9O1xyXG4gICAgICB9IGVsc2UgaWYgKHAuY29kZS5pbmRleE9mKCdwcm9jSW5zdElkJykgPiAtMSkge1xyXG4gICAgICAgIHJldHVybiB7IGNvZGU6IHAuY29kZSwgbmFtZTogcC5uYW1lLCB2YWx1ZTogYHtcImV4cHJcIjpcIkRlZmF1bHRGdW5jdGlvbi5HZXRDb250ZXh0UGFyYW1ldGVyKFxcXFxcInByb2NJbnN0SWRcXFxcXCIpXCJ9YCwgcmVxdWlyZWQ6IHRydWUgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4geyBjb2RlOiBwLmNvZGUsIG5hbWU6IHAubmFtZSwgdmFsdWU6ICcnLCByZXF1aXJlZDogdHJ1ZSB9O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgY29tcG9uZW50U2VsZWN0KCkge1xyXG4gICAgY29uc3QgY29tcEZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFNlbGVjdE1ldGFkYXRhUlRDb21wb25lbnQpO1xyXG4gICAgY29uc3QgY29tcFJlZiA9IGNvbXBGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UudHlwZUxpc3QgPSAnV2ViU2VydmljZUNvbXBvbmVudCc7IC8vIOebruWJjeWPquiDveagueaNruWFg+aVsOaNruexu+Wei+i/h+a7pO+8jOWQjue7rea3u+WKoOagh+etvui/h+a7pFxyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5zZWxlY3RlZE1ldGFkYXRhLnN1YnNjcmliZSgoJGV2ZW50OiBNZXRhZGF0YTRSZWZEdG8pID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBtZXRhOiBNZXRhZGF0YUR0byA9ICRldmVudC5tZXRhZGF0YTtcclxuICAgICAgICB0aGlzLm9wZW5Db21wb25lbnRTZWxlY3Rvck5ldyhtZXRhLmlkLCB0aGlzLnNlc3Npb25TcmMuZ2V0VXNlclNlc3Npb25JZCgpKTtcclxuICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJyRldmVudCcsICRldmVudCk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lZGl0Q29tcG9uZW50UGFyYW1ldGVyLm9wZW5Db21wb25lbnRGYWlsJykgKyAkZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG1vZGFsQ29uZmlnID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmVkaXRDb21wb25lbnRQYXJhbWV0ZXIuY29tcG9uZW50U2VsZWN0aW9uJyksXHJcbiAgICAgIHdpZHRoOiA5ODAsXHJcbiAgICAgIGhlaWdodDogNTQ4LFxyXG4gICAgICBzaG93QnV0dG9uczogZmFsc2VcclxuICAgIH07XHJcbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNvbXBSZWYsIG1vZGFsQ29uZmlnKTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UuY2xvc2VNb2RhbEVtaXR0ZXIuc3Vic2NyaWJlKCRldmVudCA9PiBkaWFsb2cuY2xvc2UoKSk7XHJcbiAgfVxyXG4gIHBhcmFtQWZ0ZXJFZGl0ID0gKHJvd0luZGV4OiBudW1iZXIsIHJvd0RhdGE6IGFueSwgY29sdW1uPzogRGF0YUNvbHVtbikgPT4ge1xyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICBlbmRDZWxsRWRpdCgpIHtcclxuICAgIHRoaXMucGFyYW1saXN0LmVuZENlbGxFZGl0KCk7XHJcbiAgfVxyXG5cclxuICBlZGl0T0soKSB7XHJcbiAgICAvLyDnu5PmnZ/mnoTku7blj4LmlbDnvJbovpHnirbmgIFcclxuICAgIHRoaXMuZW5kQ2VsbEVkaXQoKTtcclxuICAgIGlmICh0aGlzLnZhbGlkYXRvcigpKSB7XHJcbiAgICAgIHRoaXMuc3VibWl0RW1pdHRlci5lbWl0KHRoaXMuY3VyQ29tcG9uZW50KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVkaXRDYW5jZWwoKSB7XHJcbiAgICB0aGlzLmNsb3NlRW1pdHRlci5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0b3IoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMuY3VyQ29tcG9uZW50IHx8ICF0aGlzLmN1ckNvbXBvbmVudC5tZXRhZGF0YUlkIHx8ICF0aGlzLmN1ckNvbXBvbmVudC5tZXRob2RDb2RlKSB7XHJcbiAgICAgIHRoaXMubWVzc2FnZS5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lZGl0Q29tcG9uZW50UGFyYW1ldGVyLmN1ckNvbXBvbmVudCcpKTtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubG9jYXRpb24gIT09ICdhdXRvQWN0aXZpdHknICYmICF0aGlzLmN1ckNvbXBvbmVudC5leGVjdXRpb25UaW1lKSB7XHJcbiAgICAgIHRoaXMubWVzc2FnZS5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lZGl0Q29tcG9uZW50UGFyYW1ldGVyLmV4ZWN1dGlvblRpbWUnKSk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBjb2RlTGlzdCA9ICcnO1xyXG4gICAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIHRoaXMuY3VyQ29tcG9uZW50LmFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICBpZiAocGFyYW0ucmVxdWlyZWQgJiYgIXBhcmFtLnZhbHVlKSB7XHJcbiAgICAgICAgICBjb2RlTGlzdCA9IGNvZGVMaXN0ICsgYO+8jCR7cGFyYW0uY29kZX1gO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoY29kZUxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvZGVMaXN0ID0gY29kZUxpc3Quc2xpY2UoMSwgY29kZUxpc3QubGVuZ3RoKVxyXG4gICAgICAgIHRoaXMubWVzc2FnZS5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lZGl0Q29tcG9uZW50UGFyYW1ldGVyLnBhcmEnKSArICfjgJAnICsgY29kZUxpc3QgKyB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZWRpdENvbXBvbmVudFBhcmFtZXRlci5wYXJhUmVxdWlyZWQnKSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbn1cclxuIl19