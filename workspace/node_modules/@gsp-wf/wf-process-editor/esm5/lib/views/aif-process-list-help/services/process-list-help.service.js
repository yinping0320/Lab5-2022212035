/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
import { FrameworkService, AppService } from '@gsp-sys/rtf-common';
import { BifMonitorConstant } from '../entity/BifMonitorConstant';
import { RtBillProcessListResult } from '../entity/RtBillProcessListResult';
import { RtShowEntity } from '../entity/RtShowEntity';
var ProcessListHelpService = /** @class */ (function () {
    function ProcessListHelpService(appService, frameworkService, httpService) {
        this.appService = appService;
        this.frameworkService = frameworkService;
        this.httpService = httpService;
        this.baseUrl = "/api/runtime/aif/v1.0/rtbillprocess";
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    ProcessListHelpService.prototype.openBifManagerApp = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        /** @type {?} */
        var map = new Map();
        map.set("id", entity.id);
        map.set("type", entity.bifMetadataType);
        map.set("srcFuncId", BifMonitorConstant.bifDiagnostorFuncId);
        /** @type {?} */
        var opt = {
            funcId: BifMonitorConstant.bifManagerFuncId,
            appId: BifMonitorConstant.bifMonitorAppId,
            appEntrance: BifMonitorConstant.bifManagerAppEntrance,
            appType: "menu",
            entityParams: {},
            queryStringParams: map,
            tabId: entity.id,
            tabName: entity.name
        };
        this.frameworkService.openMenu(opt);
    };
    /**
     * @param {?} args
     * @return {?}
     */
    ProcessListHelpService.prototype.getDatagridData = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var data$ = null;
        //有业务种类参数时不分页
        if (args.bizType != null) {
            data$ = this.httpService.post(this.baseUrl + "/getpatch", body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var listRes = new RtBillProcessListResult();
                listRes.entities = res.map((/**
                 * @param {?} elt
                 * @return {?}
                 */
                function (elt) {
                    /** @type {?} */
                    var e = new RtShowEntity();
                    e.LoadFromJsonObject(elt);
                    return e;
                }));
                return listRes;
            })));
        }
        else {
            data$ = this.httpService.post(this.baseUrl + "/getpagedpatch", body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var listRes = new RtBillProcessListResult();
                listRes.LoadFromJsonObject(res);
                return listRes;
            })));
        }
    };
    /**
     * 根据流程编号查询流程名称
     * @param code
     * @returns
     */
    /**
     * 根据流程编号查询流程名称
     * @param {?} code
     * @return {?}
     */
    ProcessListHelpService.prototype.getProcessNameByCode = /**
     * 根据流程编号查询流程名称
     * @param {?} code
     * @return {?}
     */
    function (code) {
        return this.httpService.request("GET", "/api/runtime/aif/v1.0/rtbillcreationprocess/getname/" + code, { responseType: 'text' });
    };
    ProcessListHelpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessListHelpService.ctorParameters = function () { return [
        { type: AppService },
        { type: FrameworkService },
        { type: HttpService }
    ]; };
    return ProcessListHelpService;
}());
export { ProcessListHelpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0LWhlbHAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvYWlmLXByb2Nlc3MtbGlzdC1oZWxwL3NlcnZpY2VzL3Byb2Nlc3MtbGlzdC1oZWxwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXREO0lBSUUsZ0NBQ1UsVUFBc0IsRUFDdEIsZ0JBQWtDLEVBQ2xDLFdBQXdCO1FBRnhCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUxqQixZQUFPLEdBQUcscUNBQXFDLENBQUM7SUFPakUsQ0FBQzs7Ozs7SUFFTSxrREFBaUI7Ozs7SUFBeEIsVUFBeUIsTUFBcUI7O1lBQ3RDLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7O1lBQ3ZELEdBQUcsR0FBZTtZQUN0QixNQUFNLEVBQUUsa0JBQWtCLENBQUMsZ0JBQWdCO1lBQzNDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxlQUFlO1lBQ3pDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxxQkFBcUI7WUFDckQsT0FBTyxFQUFFLE1BQU07WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixpQkFBaUIsRUFBRSxHQUFHO1lBQ3RCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUk7U0FDckI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBRU0sZ0RBQWU7Ozs7SUFBdEIsVUFBdUIsSUFBZ0M7O1lBQy9DLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFOztZQUM3QixLQUFLLEdBQW9CLElBQUk7UUFDakMsYUFBYTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDeEIsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFJLElBQUksQ0FBQyxPQUFPLGNBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsR0FBRzs7OztZQUNELFVBQUMsR0FBUTs7b0JBQ0QsT0FBTyxHQUFHLElBQUksdUJBQXVCLEVBQUU7Z0JBQzdDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUc7Ozs7Z0JBQUMsVUFBQSxHQUFHOzt3QkFDdEIsQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFO29CQUM1QixDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzFCLE9BQU8sQ0FBQyxDQUFDO2dCQUNYLENBQUMsRUFBQyxDQUFDO2dCQUNILE9BQU8sT0FBTyxDQUFDO1lBQ2pCLENBQUMsRUFDRixDQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFJLElBQUksQ0FBQyxPQUFPLG1CQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDZixHQUFHOzs7O1lBQ0QsVUFBQyxHQUFROztvQkFDRCxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsRUFBRTtnQkFDN0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLE9BQU8sQ0FBQztZQUNqQixDQUFDLEVBQ0YsQ0FDRixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0kscURBQW9COzs7OztJQUEzQixVQUE0QixJQUFZO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLHlEQUF1RCxJQUFNLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNsSSxDQUFDOztnQkFyRUYsVUFBVTs7OztnQkFQNEIsVUFBVTtnQkFBNUIsZ0JBQWdCO2dCQUg1QixXQUFXOztJQWdGcEIsNkJBQUM7Q0FBQSxBQXRFRCxJQXNFQztTQXJFWSxzQkFBc0I7Ozs7OztJQUNqQyx5Q0FBaUU7Ozs7O0lBRy9ELDRDQUE4Qjs7Ozs7SUFDOUIsa0RBQTBDOzs7OztJQUMxQyw2Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBBcHBPcHRpb25zLCBGcmFtZXdvcmtTZXJ2aWNlLCBBcHBTZXJ2aWNlIH0gZnJvbSAnQGdzcC1zeXMvcnRmLWNvbW1vbic7XHJcbmltcG9ydCB7IElSdFNob3dFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvSVJ0U2hvd0VudGl0eSc7XHJcbmltcG9ydCB7IEJpZk1vbml0b3JDb25zdGFudCB9IGZyb20gJy4uL2VudGl0eS9CaWZNb25pdG9yQ29uc3RhbnQnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRmlsdGVyQ29uZGl0aW9uQXJncyB9IGZyb20gJy4uL2VudGl0eS9Qcm9jZXNzRmlsdGVyQ29uZGl0aW9uQXJncyc7XHJcbmltcG9ydCB7IFJ0QmlsbFByb2Nlc3NMaXN0UmVzdWx0IH0gZnJvbSAnLi4vZW50aXR5L1J0QmlsbFByb2Nlc3NMaXN0UmVzdWx0JztcclxuaW1wb3J0IHsgUnRTaG93RW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L1J0U2hvd0VudGl0eSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzTGlzdEhlbHBTZXJ2aWNlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGJhc2VVcmwgPSBcIi9hcGkvcnVudGltZS9haWYvdjEuMC9ydGJpbGxwcm9jZXNzXCI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBhcHBTZXJ2aWNlOiBBcHBTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBmcmFtZXdvcmtTZXJ2aWNlOiBGcmFtZXdvcmtTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBodHRwU2VydmljZTogSHR0cFNlcnZpY2UsXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3BlbkJpZk1hbmFnZXJBcHAoZW50aXR5OiBJUnRTaG93RW50aXR5KSB7XHJcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XHJcbiAgICBtYXAuc2V0KFwiaWRcIiwgZW50aXR5LmlkKTtcclxuICAgIG1hcC5zZXQoXCJ0eXBlXCIsIGVudGl0eS5iaWZNZXRhZGF0YVR5cGUpO1xyXG4gICAgbWFwLnNldChcInNyY0Z1bmNJZFwiLCBCaWZNb25pdG9yQ29uc3RhbnQuYmlmRGlhZ25vc3RvckZ1bmNJZCk7XHJcbiAgICBjb25zdCBvcHQ6IEFwcE9wdGlvbnMgPSB7XHJcbiAgICAgIGZ1bmNJZDogQmlmTW9uaXRvckNvbnN0YW50LmJpZk1hbmFnZXJGdW5jSWQsXHJcbiAgICAgIGFwcElkOiBCaWZNb25pdG9yQ29uc3RhbnQuYmlmTW9uaXRvckFwcElkLFxyXG4gICAgICBhcHBFbnRyYW5jZTogQmlmTW9uaXRvckNvbnN0YW50LmJpZk1hbmFnZXJBcHBFbnRyYW5jZSxcclxuICAgICAgYXBwVHlwZTogXCJtZW51XCIsXHJcbiAgICAgIGVudGl0eVBhcmFtczoge30sXHJcbiAgICAgIHF1ZXJ5U3RyaW5nUGFyYW1zOiBtYXAsXHJcbiAgICAgIHRhYklkOiBlbnRpdHkuaWQsXHJcbiAgICAgIHRhYk5hbWU6IGVudGl0eS5uYW1lXHJcbiAgICB9O1xyXG4gICAgdGhpcy5mcmFtZXdvcmtTZXJ2aWNlLm9wZW5NZW51KG9wdCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGF0YWdyaWREYXRhKGFyZ3M6IFByb2Nlc3NGaWx0ZXJDb25kaXRpb25BcmdzKTogT2JzZXJ2YWJsZTxSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdD4ge1xyXG4gICAgY29uc3QgYm9keSA9IGFyZ3MuQ29udmVydFRvSnNvbigpO1xyXG4gICAgbGV0IGRhdGEkOiBPYnNlcnZhYmxlPGFueT4gPSBudWxsO1xyXG4gICAgLy/mnInkuJrliqHnp43nsbvlj4LmlbDml7bkuI3liIbpobVcclxuICAgIGlmIChhcmdzLmJpelR5cGUgIT0gbnVsbCkge1xyXG4gICAgICBkYXRhJCA9IHRoaXMuaHR0cFNlcnZpY2UucG9zdChgJHt0aGlzLmJhc2VVcmx9L2dldHBhdGNoYCwgYm9keSk7XHJcbiAgICAgIHJldHVybiBkYXRhJC5waXBlKFxyXG4gICAgICAgIG1hcChcclxuICAgICAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0UmVzID0gbmV3IFJ0QmlsbFByb2Nlc3NMaXN0UmVzdWx0KCk7XHJcbiAgICAgICAgICAgIGxpc3RSZXMuZW50aXRpZXMgPSByZXMubWFwKGVsdCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBSdFNob3dFbnRpdHkoKTtcclxuICAgICAgICAgICAgICBlLkxvYWRGcm9tSnNvbk9iamVjdChlbHQpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGxpc3RSZXM7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGF0YSQgPSB0aGlzLmh0dHBTZXJ2aWNlLnBvc3QoYCR7dGhpcy5iYXNlVXJsfS9nZXRwYWdlZHBhdGNoYCwgYm9keSk7XHJcbiAgICAgIHJldHVybiBkYXRhJC5waXBlKFxyXG4gICAgICAgIG1hcChcclxuICAgICAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0UmVzID0gbmV3IFJ0QmlsbFByb2Nlc3NMaXN0UmVzdWx0KCk7XHJcbiAgICAgICAgICAgIGxpc3RSZXMuTG9hZEZyb21Kc29uT2JqZWN0KHJlcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBsaXN0UmVzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrua1geeoi+e8luWPt+afpeivoua1geeoi+WQjeensFxyXG4gICAqIEBwYXJhbSBjb2RlXHJcbiAgICogQHJldHVybnNcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJvY2Vzc05hbWVCeUNvZGUoY29kZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBTZXJ2aWNlLnJlcXVlc3QoXCJHRVRcIiwgYC9hcGkvcnVudGltZS9haWYvdjEuMC9ydGJpbGxjcmVhdGlvbnByb2Nlc3MvZ2V0bmFtZS8ke2NvZGV9YCwgeyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KTtcclxuICB9XHJcbn1cclxuIl19