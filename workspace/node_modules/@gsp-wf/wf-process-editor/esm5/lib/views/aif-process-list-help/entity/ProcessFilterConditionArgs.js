/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper, JsonConvertableImpl, TextValue } from '@edp-bif/common-api';
var ProcessFilterConditionArgs = /** @class */ (function (_super) {
    tslib_1.__extends(ProcessFilterConditionArgs, _super);
    function ProcessFilterConditionArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    ProcessFilterConditionArgs.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.name = null;
        this.upBillVoId = null;
        this.downBillVoId = null;
        this.isEnabled = null;
        this.billProcessType = null;
        this.sysInit = null;
        this.bizType = null;
        this.orderByCode = null;
        this.orderByName = null;
        this.OrderByLastModifiedTime = null;
        this.pageSize = 0;
        this.pageIndex = 0;
    };
    /**
     * @return {?}
     */
    ProcessFilterConditionArgs.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoId", this.upBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoId", this.downBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "billProcessType", this.billProcessType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizType", this.bizType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orderByCode", this.orderByCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orderByName", this.orderByName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "OrderByLastModifiedTime", this.OrderByLastModifiedTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageSize", this.pageSize);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageIndex", this.pageIndex);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessFilterConditionArgs.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.name = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "name", TextValue);
        this.upBillVoId = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "upBillVoId", TextValue);
        this.downBillVoId = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "downBillVoId", TextValue);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "isEnabled", TextValue);
        this.billProcessType = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "billProcessType", TextValue);
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "sysInit", TextValue);
        this.bizType = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "bizType", TextValue);
        this.orderByCode = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "orderByCode", TextValue);
        this.orderByName = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "orderByName", TextValue);
        this.OrderByLastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "OrderByLastModifiedTime", TextValue);
        this.pageSize = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageSize");
        this.pageIndex = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageIndex");
    };
    return ProcessFilterConditionArgs;
}(JsonConvertableImpl));
export { ProcessFilterConditionArgs };
if (false) {
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.name;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.upBillVoId;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.downBillVoId;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.isEnabled;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.billProcessType;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.sysInit;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.bizType;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.orderByCode;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.orderByName;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.OrderByLastModifiedTime;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.pageSize;
    /** @type {?} */
    ProcessFilterConditionArgs.prototype.pageIndex;
}
//# sourceMappingURL=data:application/json;base64,