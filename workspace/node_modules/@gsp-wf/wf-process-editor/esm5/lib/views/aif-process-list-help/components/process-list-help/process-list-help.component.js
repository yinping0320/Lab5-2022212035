/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef, EventEmitter, Inject, LOCALE_ID, Output, Input } from '@angular/core';
import { ProcessListHelpService } from '../../services/process-list-help.service';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { Router, ActivatedRoute } from '@angular/router';
import { LoadingService } from '@farris/ui-loading';
import { of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { BifMetadataType } from '../../entity/BifMetadataType';
import { ProcessFilterConditionArgs } from '../../entity/ProcessFilterConditionArgs';
import { TextValue } from '@edp-bif/common-api';
import { OrderByDirection } from '../../entity/OrderByDirection';
import { DatagridComponent } from '@farris/ui-datagrid';
import { AifLocalePipe, BIF_LANG_RESOURCES } from '../../../aif-ui-common/pipe/aif-ui-common-locale.pipe';
import { AIF_PROCESS_LIST_HELP_LANG_RESOURCES } from '../../i18n/lang.resource';
var ɵ0 = AIF_PROCESS_LIST_HELP_LANG_RESOURCES;
var ProcessListHelpComponent = /** @class */ (function () {
    function ProcessListHelpComponent(procHelpService, messager, notify, modalService, frameworkService, router, activatedRoute, loading, localeId, localePipe) {
        this.procHelpService = procHelpService;
        this.messager = messager;
        this.notify = notify;
        this.modalService = modalService;
        this.frameworkService = frameworkService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform("creationProcess"),
            width: 1250,
            height: 500,
            showButtons: true
        };
        this.procEmitter = new EventEmitter();
        this.ttIdField = "id";
        this.ttData = [];
        this.ttColumns = [];
        this.cascadeCheck = false;
        this.cascadeDown = false;
        this.cascadeUp = false;
        this.defaultPageSize = 30;
        this.pageList = [this.defaultPageSize, 50, 100, 200, 500];
        /**
         * 已设置流程
         */
        this.setProcess = {
            showText: ""
        };
        this.queryParam = this.createDefaultQueryParam();
    }
    Object.defineProperty(ProcessListHelpComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.processCode = data;
                this.setProcess.code = this.processCode;
                this.setProcess.showText = this.processCode;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ProcessListHelpComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.configTtColumns();
        // if (this.editorParams && this.editorParams.bizTypeId) {
        //   this.queryParam.filterArgs.bizType = new TextValue();
        //   this.queryParam.filterArgs.bizType.value = this.editorParams.bizTypeId;
        //   this.queryParam.filterArgs.bizType.hasValue = true;
        // }
        if (this.processCode != null) {
            this.procHelpService.getProcessNameByCode(this.processCode).subscribe((/**
             * @param {?} processName
             * @return {?}
             */
            function (processName) {
                _this.setProcess.name = processName;
                if (_this.setProcess.name) {
                    _this.setProcess.showText = _this.setProcess.name + "(" + _this.setProcess.code + ")";
                }
                else {
                    _this.setProcess.showText = _this.setProcess.code;
                }
            }));
        }
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.ttData && _this.ttData.length > 0) {
                    /** @type {?} */
                    var proc = _this.processCode != null ? _this.ttData.find((/**
                     * @param {?} it
                     * @return {?}
                     */
                    function (it) { return it.code == _this.processCode; })) : _this.ttData[0];
                    proc && _this.tt.selectRow(proc.id);
                }
            }), 300);
        }));
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickOk = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        if (this.tt.selectedRow == null) {
            this.notify.warning(this.localePipe.transform("pleaseSelectOneItemOnly"));
            return;
        }
        this.procEmitter.emit(this.tt.selectedRow.data);
        /** @type {?} */
        var object = { value: this.tt.selectedRow.data.code, parameters: null };
        this.submitModal.emit(object);
        this.modalRef && this.modalRef.close();
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickCancel = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        this.procEmitter.complete();
        this.closeModal.emit();
        this.modalRef && this.modalRef.close();
    };
    /**
     * @param {?} param
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onSearch = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.queryParam = param;
        console.log(this.queryParam);
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            _this.tt.clearCheckeds();
            _this.tt.clearSelections();
        }));
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickNameCell = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        this.procHelpService.openBifManagerApp(ctx.rowData);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onPageSizeChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        // console.log('PageSize Changed:', $event);
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds, true);
                _this.tt.refresh();
            }), 0);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        // console.log('PageNumber Changed:', $event);
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageIndex = $event.pageIndex - 1;
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds, true);
                _this.tt.refresh();
            }), 0);
        }));
    };
    /**
     * @param {?} pageInfo
     * @return {?}
     */
    ProcessListHelpComponent.prototype.pageChangeHandler = /**
     * @param {?} pageInfo
     * @return {?}
     */
    function (pageInfo) {
        var _this = this;
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageIndex = pageInfo.pageIndex - 1;
        this.queryParam.filterArgs.pageSize = pageInfo.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds, true);
                _this.tt.refresh();
            }), 0);
        }));
    };
    /**
     * @param {?} size
     * @return {?}
     */
    ProcessListHelpComponent.prototype.pageSizeChangeHandler = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        var _this = this;
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageSize = size;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds, true);
                _this.tt.refresh();
            }), 0);
        }));
    };
    /**
     * @return {?}
     */
    ProcessListHelpComponent.prototype.removeSetProcess = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @param {?} args
     * @return {?}
     */
    ProcessListHelpComponent.prototype.loadItems = /**
     * @private
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var loadingComp = this.loading.show({ message: this.localePipe.transform("loading") });
        return this.procHelpService.getDatagridData(args).pipe(switchMap((/**
         * @param {?} listRes
         * @return {?}
         */
        function (listRes) {
            _this.ttData = tslib_1.__spread(listRes.entities);
            //更新分页信息
            _this.tt.setPageIndex(listRes.pageIndex + 1);
            _this.tt.total = listRes.totalCount;
            _this.tt.pageSize = listRes.pageSize;
            // this.page.setCurrentPage(this.paginationId, listRes.pageIndex + 1);
            // this.page.setItemsPerPage(this.paginationId, listRes.pageSize);
            // this.page.setTotalItems(this.paginationId, listRes.totalCount);
            loadingComp.close();
            return of(listRes);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            loadingComp.close();
            setTimeout((/**
             * @return {?}
             */
            function () {
                //todo 确定异常结构, 目前采用兼容取值方式
                _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }), 300);
            throw err;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    ProcessListHelpComponent.prototype.configTtColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ttColumns = [
            // {
            //   field: "isEnabled", title: this.localePipe.transform("enabledState"), width: 100, sortable: false,
            //   formatter: (value: boolean, rowData, rowIndex) => {
            //     if (value == true) {
            //       return this.localePipe.transform("enabled");
            //     } else if (value == false) {
            //       return this.localePipe.transform("disabled");
            //     } else {
            //       return "-";
            //     }
            //   }
            // },
            { field: "code", title: this.localePipe.transform("code"), width: 120, sortable: true },
            {
                field: "name", title: this.localePipe.transform("name"), width: 250, sortable: true,
                template: this.nameCellTemp,
            },
            { field: "upBillVoName", title: this.localePipe.transform("upBill"), width: 120, sortable: true },
            { field: "downBillVoName", title: this.localePipe.transform("downBill"), width: 120, sortable: true },
            // {
            //   field: "bifMetadataType", title: this.localePipe.transform("processType"), width: 120, sortable: false,
            //   formatter: (value: BifMetadataType, rowData, rowIndex) => {
            //     if (value == BifMetadataType.BifCreationProcess) {
            //       return this.localePipe.transform("creation");
            //     } else if (value == BifMetadataType.BifWritebackProcess) {
            //       return this.localePipe.transform("writeback");
            //     } else {
            //       return "-";
            //     }
            //   }
            // },
            {
                field: "sysInit", title: this.localePipe.transform("sysInit"), width: 80, sortable: false,
                formatter: (/**
                 * @param {?} value
                 * @param {?} rowData
                 * @param {?} rowIndex
                 * @return {?}
                 */
                function (value, rowData, rowIndex) {
                    if (value == true) {
                        return _this.localePipe.transform("yes");
                    }
                    else if (value == false) {
                        return _this.localePipe.transform("no");
                    }
                    else {
                        return "-";
                    }
                })
            },
        ];
    };
    /**
     * @private
     * @return {?}
     */
    ProcessListHelpComponent.prototype.createDefaultQueryParam = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var queryParam = {
            filterArgs: new ProcessFilterConditionArgs(),
            filterArgsExt: {}
        };
        queryParam.filterArgs.pageSize = this.defaultPageSize;
        queryParam.filterArgs.pageIndex = 0;
        queryParam.filterArgs.OrderByLastModifiedTime = new TextValue();
        queryParam.filterArgs.OrderByLastModifiedTime.value = OrderByDirection.Desc;
        queryParam.filterArgs.OrderByLastModifiedTime.hasValue = true;
        queryParam.filterArgs.billProcessType = new TextValue();
        queryParam.filterArgs.billProcessType.value = BifMetadataType.BifCreationProcess;
        queryParam.filterArgs.billProcessType.hasValue = true;
        queryParam.filterArgs.isEnabled = new TextValue();
        queryParam.filterArgs.isEnabled.value = "true";
        queryParam.filterArgs.isEnabled.hasValue = true;
        return queryParam;
    };
    ProcessListHelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-process-list-help',
                    template: "<div class=\"f-page f-page-is-managelist\" id=\"bif-manager-list\">\r\n  <app-proc-help-query-solution id=\"query-solution\" #querySolution [(queryParam)]=\"queryParam\"\r\n    (onSearch)=\"onSearch($event)\">\r\n  </app-proc-help-query-solution>\r\n\r\n  <div class=\"f-page-main\" id=\"page-main\">\r\n    <div *ngIf=\"setProcess&&setProcess.code\" class=\"d-flex px-2\" style=\"line-height: 32px; height: 32px;\">\r\n      <div>\r\n        {{\"setProcess\" | aifLocale}}\r\n      </div>\r\n      <div class=\"farris-tags\">\r\n        <ul class=\"farris-tags-item-container\">\r\n          <li class=\"farris-tag-item farris-tag-item-info\">\r\n            <span class=\"tag-box\">\r\n              {{setProcess&&setProcess.showText}}\r\n            </span>\r\n            <span *ngIf=\"false\" class=\"tag-delete\" (click)=\"removeSetProcess()\">\r\n              <i class=\"f-icon f-icon-close\"></i>\r\n            </span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"f-utils-fill-flex-column\">\r\n      <farris-datagrid id=\"tt\" #tt [data]=\"ttData\" [columns]=\"ttColumns\" [idField]=\"ttIdField\" [multiSelect]=\"true\"\r\n        [showCheckbox]=\"false\" [showAllCheckbox]=\"false\" [onlySelectSelf]=\"true\" [keepSelect]=\"true\"\r\n        [selectOnCheck]=\"true\" [checkOnSelect]=\"false\" [showHeader]=\"true\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [pagination]=\"true\" [showPageList]=\"true\" [pageSize]=\"defaultPageSize\" [pageList]=\"pageList\"\r\n        (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\" [remoteSort]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #nameCellTemp let-ctx>\r\n  <a href=\"javascript: void(0);\" (click)=\"clickNameCell(ctx)\">{{ctx?.rowData?.name}}</a>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\r\n    {{'clickCancel' | aifLocale}}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">\r\n    {{'clickOk' | aifLocale}}\r\n  </button>\r\n</ng-template>\r\n",
                    providers: [
                        { provide: BIF_LANG_RESOURCES, useValue: ɵ0 },
                        AifLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessListHelpComponent.ctorParameters = function () { return [
        { type: ProcessListHelpService },
        { type: MessagerService },
        { type: NotifyService },
        { type: BsModalService },
        { type: FrameworkService },
        { type: Router },
        { type: ActivatedRoute },
        { type: LoadingService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: AifLocalePipe }
    ]; };
    ProcessListHelpComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        tt: [{ type: ViewChild, args: ["tt",] }],
        nameCellTemp: [{ type: ViewChild, args: ['nameCellTemp',] }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return ProcessListHelpComponent;
}());
export { ProcessListHelpComponent };
if (false) {
    /** @type {?} */
    ProcessListHelpComponent.prototype.closeModal;
    /** @type {?} */
    ProcessListHelpComponent.prototype.submitModal;
    /** @type {?} */
    ProcessListHelpComponent.prototype.editorParams;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.processCode;
    /** @type {?} */
    ProcessListHelpComponent.prototype.modalConfig;
    /** @type {?} */
    ProcessListHelpComponent.prototype.procEmitter;
    /** @type {?} */
    ProcessListHelpComponent.prototype.queryParam;
    /** @type {?} */
    ProcessListHelpComponent.prototype.tt;
    /** @type {?} */
    ProcessListHelpComponent.prototype.ttIdField;
    /** @type {?} */
    ProcessListHelpComponent.prototype.ttData;
    /** @type {?} */
    ProcessListHelpComponent.prototype.ttColumns;
    /** @type {?} */
    ProcessListHelpComponent.prototype.cascadeCheck;
    /** @type {?} */
    ProcessListHelpComponent.prototype.cascadeDown;
    /** @type {?} */
    ProcessListHelpComponent.prototype.cascadeUp;
    /** @type {?} */
    ProcessListHelpComponent.prototype.nameCellTemp;
    /** @type {?} */
    ProcessListHelpComponent.prototype.modalFooter;
    /** @type {?} */
    ProcessListHelpComponent.prototype.modalRef;
    /** @type {?} */
    ProcessListHelpComponent.prototype.defaultPageSize;
    /** @type {?} */
    ProcessListHelpComponent.prototype.pageList;
    /**
     * 已设置流程
     * @type {?}
     */
    ProcessListHelpComponent.prototype.setProcess;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.procHelpService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.localePipe;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,