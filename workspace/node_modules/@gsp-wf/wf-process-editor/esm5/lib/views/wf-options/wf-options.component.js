/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { FarrisRadioGroupComponent } from '@farris/ui-forms';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { ExpressionService } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { SubProcessType } from '../call-activity-sub-process/SubProcessType';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
var WfOptionsComponent = /** @class */ (function () {
    function WfOptionsComponent(notify, modalService, message, util, http, designerState, expr, cfr, inj, cdr, localeId, resources, localePipe) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform("component.optins.wfOptions"),
            width: 500,
            height: 240,
            showButtons: true
        };
        this.subProcessType = SubProcessType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: this.localePipe.transform("component.optins.specified") },
            { value: "Dynamic", name: this.localePipe.transform("component.optins.dynamic") },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(WfOptionsComponent.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v) {
                this.entity = v;
                // 为子流程类型赋值
                if (this.entity.calledElement == null || this.entity.calledElement == "") {
                    if (this.entity.calledBizDefKey == null || this.entity.calledBizDefKey == "") {
                        this.entity.subProcessType = SubProcessType.Specified;
                    }
                    else {
                        this.entity.subProcessType = SubProcessType.Dynamic;
                    }
                }
                else {
                    this.entity.subProcessType = SubProcessType.Specified;
                }
                this.getProcessDefKey(this.entity.calledElement);
                this.getFlowForm(this.entity.calledBizDefKey);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    WfOptionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    WfOptionsComponent.prototype.clickOk = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = { value: this.entity, parameters: null };
        this.submitModal.emit(obj);
    };
    /**
     * @return {?}
     */
    WfOptionsComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} val
     * @return {?}
     */
    WfOptionsComponent.prototype.processTypeChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.entity.calledBizDefKey = null;
            this.entity.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.entity.calledElement = null;
            this.entity.calledElementName = null;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    WfOptionsComponent.prototype.processConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.entity.calledElement = args.procDefKey;
            this.entity.calledElementName = args.name;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    WfOptionsComponent.prototype.clearProcessDef = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.entity.calledElement = '';
        this.entity.calledElementName = '';
    };
    /**
     * @param {?} args
     * @return {?}
     */
    WfOptionsComponent.prototype.flowFormConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.entity.calledBizDefKey = args.id;
            this.entity.calledBizDefName = args.name;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    WfOptionsComponent.prototype.clearFlowForm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.entity.calledBizDefKey = '';
        this.entity.calledBizDefName = '';
    };
    /**
     * @param {?} key
     * @return {?}
     */
    WfOptionsComponent.prototype.getProcessDefKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getProcessDefinitionWebApi();
        if (key) {
            url += "/procDefKey/" + key;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.entity.calledElementName = re.name;
            }));
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WfOptionsComponent.prototype.getFlowForm = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getFlowFormWebApi();
        if (id) {
            url += "/" + id;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.entity.calledBizDefName = re.name;
            }));
        }
    };
    WfOptionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-wf-options',
                    template: "<div class=\"f-page f-page-card f-page-is-mainsubcard\" id=\"bif-manager-list\">\r\n  <div class=\"f-page-main\" id=\"page-main\" style=\"overflow-y: auto;\">\r\n    <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.optins.subProcessType' | wfLocale}}\" for=\"processType\">\r\n              <span class=\"farris-label-text\">{{'component.optins.processType' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <farris-radiogroup #radioGroupProcessType [(ngModel)]=\"entity&&entity.subProcessType\" [horizontal]=\"false\"\r\n                [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n              </farris-radiogroup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\" *ngIf=\"entity&&entity.subProcessType&&entity.subProcessType==subProcessType.Dynamic\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.optins.bizDef' | wfLocale}}\" for=\"calledBizDefKey\">\r\n              <span class=\"farris-label-text\">{{'component.optins.bizDef' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <wf-bizprocess-lookup title=\"{{'component.optins.bizDef' | wfLocale}}\" [sourceType]=\"'flowform'\" [displayTxt]=\"entity.calledBizDefName\"\r\n                (afterConfirm)=\"flowFormConfirm($event)\" (clear)=\"clearFlowForm($event)\">\r\n              </wf-bizprocess-lookup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\" *ngIf=\"entity&&entity.subProcessType&&entity.subProcessType==subProcessType.Specified\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.optins.procDef' | wfLocale}}\" for=\"calledElement\">\r\n              <span class=\"farris-label-text\">{{'component.optins.procDef' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <wf-bizprocess-lookup title=\"{{'component.optins.procDef' | wfLocale}}\" [displayTxt]=\"entity.calledElementName\"\r\n                (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n              </wf-bizprocess-lookup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.optins.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">{{'component.optins.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                    providers: [
                        WfLocalePipe,
                    ]
                }] }
    ];
    /** @nocollapse */
    WfOptionsComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    WfOptionsComponent.propDecorators = {
        editorParams: [{ type: Input }],
        value: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }]
    };
    return WfOptionsComponent;
}());
export { WfOptionsComponent };
if (false) {
    /** @type {?} */
    WfOptionsComponent.prototype.editorParams;
    /** @type {?} */
    WfOptionsComponent.prototype.closeModal;
    /** @type {?} */
    WfOptionsComponent.prototype.submitModal;
    /** @type {?} */
    WfOptionsComponent.prototype.modalFooter;
    /** @type {?} */
    WfOptionsComponent.prototype.modalConfig;
    /** @type {?} */
    WfOptionsComponent.prototype.subProcessType;
    /** @type {?} */
    WfOptionsComponent.prototype.entity;
    /** @type {?} */
    WfOptionsComponent.prototype.radioGroupProcessType;
    /** @type {?} */
    WfOptionsComponent.prototype.radioGroupProcessTypeData;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.util;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.inj;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    WfOptionsComponent.prototype.localePipe;
}
var WfOptionsConverter = /** @class */ (function () {
    function WfOptionsConverter(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    WfOptionsConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return this.localePipe.transform("component.optins.set");
        }
        return this.localePipe.transform("component.optins.notSet");
    };
    return WfOptionsConverter;
}());
export { WfOptionsConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WfOptionsConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,