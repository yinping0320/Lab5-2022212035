/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { DisplayInfor, OtherAssignActivityNodeInfo } from './other-assign-activity-node-info';
import { DialogComponent } from '@farris/ui-dialog';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
var AssignScopeComponent = /** @class */ (function () {
    function AssignScopeComponent(uistate, message, exprService, cdr, localeId, resources, localePipe) {
        var _this = this;
        this.uistate = uistate;
        this.message = message;
        this.exprService = exprService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.items = new Array();
        this.listItems = new Array();
        this.modalConfig = {
            title: this.localePipe.transform('component.assignScope.assignScopeList'),
            width: 600,
            height: 520,
            showButtons: true
        };
        this.cols = [
            { title: this.localePipe.transform('component.assignScope.name'), field: 'name', width: 80 },
            { title: 'ID', field: 'activityDefinitionId', width: 100 },
            { title: this.localePipe.transform('component.assignScope.required'), field: 'required', width: 50,
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.assignScope.yes'), falseText: this.localePipe.transform('component.assignScope.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            { title: this.localePipe.transform('component.assignScope.condition'), field: 'condition', width: 70,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.nodeCols = [
            { title: this.localePipe.transform('component.assignScope.name'), field: 'Name', width: 100, filter: true },
            { title: 'ID', field: 'Id', width: 100, filter: true },
        ];
        // otherAssignActivities = new Array();
        this.otherAssignActivityNodeInfos = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    Object.defineProperty(AssignScopeComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            if (data && data.length > 0) {
                // this.otherAssignActivities = [...data];
                data.forEach((/**
                 * @param {?} data1
                 * @return {?}
                 */
                function (data1) {
                    /** @type {?} */
                    var otherAssignActivityNodeInfo = new OtherAssignActivityNodeInfo(data1.activityDefinitionId, data1.condition ? data1.condition.Value : data1.condition, data1.required);
                    _this.otherAssignActivityNodeInfos.push(otherAssignActivityNodeInfo);
                }));
                this.otherAssignActivityNodeInfos.forEach((/**
                 * @param {?} other
                 * @return {?}
                 */
                function (other) {
                    /** @type {?} */
                    var displayInfo = new DisplayInfor(null, other.activityDefinitionId);
                    displayInfo.required = other.required;
                    if (other.condition) {
                        displayInfo.condition = other.condition.Value;
                    }
                    // displayInfo.name = this.items.find(item => item.Id === displayInfo.activityDefinitionId).Name;
                    _this.listItems.push(displayInfo);
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a, e_2, _b;
        if (!this.location) {
            this.location = this.editorParams.location;
        }
        /** @type {?} */
        var activities = new Array();
        if (this.location === 'startActivity') {
            activities = tslib_1.__spread(this.uistate.userActList.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.Id !== _this.uistate.propertyData.Id
                && a.AssignmentStrategy === 'ASSIGN'
                && a.AssignPerformerConfig
                && a.AssignPerformerConfig.Operator === 'procInstCreator'; })));
        }
        else {
            activities = tslib_1.__spread(this.uistate.userActList.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.Id !== _this.uistate.propertyData.Id && a.AssignmentStrategy === 'ASSIGN'; })));
        }
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            var _loop_1 = function (other) {
                /** @type {?} */
                var activity = activities.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.Id === other.activityDefinitionId; }));
                if (activity) {
                    this_1.items = this_1.items.concat([activity]);
                }
            };
            var this_1 = this;
            try {
                for (var _c = tslib_1.__values(this.otherAssignActivityNodeInfos), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var other = _d.value;
                    _loop_1(other);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var _loop_2 = function (activity) {
                if (this_2.items.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.Id === activity.Id; })) === -1) {
                    this_2.items = this_2.items.concat([activity]);
                }
            };
            var this_2 = this;
            try {
                for (var activities_1 = tslib_1.__values(activities), activities_1_1 = activities_1.next(); !activities_1_1.done; activities_1_1 = activities_1.next()) {
                    var activity = activities_1_1.value;
                    _loop_2(activity);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (activities_1_1 && !activities_1_1.done && (_b = activities_1.return)) _b.call(activities_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else {
            this.items = activities;
        }
        this.listItems.forEach((/**
         * @param {?} listItem
         * @return {?}
         */
        function (listItem) {
            listItem.name = _this.items.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.Id === listItem.activityDefinitionId; })).Name;
        }));
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.otherAssignActivityNodeInfos), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var other = _c.value;
                    this.grid.checkRow(other.activityDefinitionId);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            var i = this.listItems.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.activityDefinitionId === _this.grid.selectedRow.data.activityDefinitionId; }));
            this.listItems.splice(i, 1);
            this.grid.loadData(this.listItems);
        }
        else {
            this.message.info(this.localePipe.transform('component.assignScope.deleteRow'));
        }
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.moveUp = /**
     * @return {?}
     */
    function () {
        if (!this.curActivity) {
            this.message.info(this.localePipe.transform('component.assignScope.curActivity'));
            return;
        }
        /** @type {?} */
        var curCmpId = this.curActivity.activityDefinitionId;
        /** @type {?} */
        var i = this.listItems.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.activityDefinitionId === curCmpId; }));
        if (i === 0) {
            return;
        }
        this.swapArray(this.listItems, i, i - 1);
        this.grid.loadData(this.listItems);
        this.grid.selectRow(curCmpId, true);
        // const selectedRow = this.grid.selectedRow;
        // debugger;
        // if (!selectedRow) {
        //   this.message.info('尚未选中行');
        //   return;
        // }
        // if (selectedRow.index === 0) {
        //   return;
        // }
        // this.swapArray(this.items, selectedRow.index, selectedRow.index - 1);
        // this.grid.loadData(this.items);
        // this.grid.selectRow(selectedRow.id, true);
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.moveDown = /**
     * @return {?}
     */
    function () {
        if (!this.curActivity) {
            this.message.info(this.localePipe.transform('component.assignScope.curActivity'));
            return;
        }
        /** @type {?} */
        var curCmpId = this.curActivity.activityDefinitionId;
        /** @type {?} */
        var i = this.listItems.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.activityDefinitionId === curCmpId; }));
        if (i === this.listItems.length - 1) {
            return;
        }
        this.swapArray(this.listItems, i, i + 1);
        this.grid.loadData(this.listItems);
        this.grid.selectRow(curCmpId, true);
        // const selectedRow = this.grid.selectedRow;
        // if (!selectedRow) {
        //   this.message.info('尚未选中行');
        //   return;
        // }
        // if (selectedRow.index === this.items.length - 1) {
        //   return;
        // }
        // this.swapArray(this.items, selectedRow.index, selectedRow.index + 1);
        // this.grid.loadData(this.items);
        // this.grid.selectRow(selectedRow.id, true);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AssignScopeComponent.prototype.selectionChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.curActivity = data.data;
    };
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    AssignScopeComponent.prototype.swapArray = /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    function (arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        var e_4, _a;
        this.otherAssignActivityNodeInfos = new Array();
        try {
            for (var _b = tslib_1.__values(this.listItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.otherAssignActivityNodeInfos.push(new OtherAssignActivityNodeInfo(item.activityDefinitionId, item.condition, item.required));
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        /** @type {?} */
        var object = { value: this.otherAssignActivityNodeInfos, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.actionsSelect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selections = this.actionsTable1.checkeds;
        if (selections && selections.length > 0) {
            selections.forEach((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                /** @type {?} */
                var item = new DisplayInfor(action.data.Name, action.data.Id);
                /** @type {?} */
                var index = _this.listItems.findIndex((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.activityDefinitionId === action.data.Id; }));
                if (index > -1) {
                    _this.listItems.splice(index, 1);
                }
                _this.listItems.push(item);
            }));
            this.grid.loadData(this.listItems);
        }
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable1.clearCheckeds(true);
        this.actionsDialog1.close();
    };
    /**
     * @return {?}
     */
    AssignScopeComponent.prototype.SelectCancel = /**
     * @return {?}
     */
    function () {
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable1.clearCheckeds(true);
        this.actionsDialog1.close();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    AssignScopeComponent.prototype.editConditon = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_5, _a, e_6, _b, e_7, _c, e_8, _d;
        /** @type {?} */
        var context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.uistate.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.exprService.addSchema('Schema', schema);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.exprService.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _g = tslib_1.__values(this.uistate.subActivityContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    _loop_3(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.uistate.activityComponentContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = tslib_1.__values(this.uistate.activityComponentContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_4(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.exprService.addContext(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Conditional);
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                _this.exprService.exprEntity.contextEntities = _this.exprService.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                function (y) { return y.key === x.key; })); }));
            }
        }));
    };
    AssignScopeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-assign-scope',
                    template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" mainTitle=\"{{'component.assignScope.set'|wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"actionsDialog1.show()\">{{'component.assignScope.add'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"delete()\">{{'component.assignScope.delete'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"moveUp()\">{{'component.assignScope.moveUp'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"moveDown()\">{{'component.assignScope.moveDown'|wfLocale}}</button>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"cols\" [data]=\"listItems\" #grid [idField]=\"'activityDefinitionId'\" [showLineNumber]=\"true\"\r\n          [striped]=\"true\" [multiSelect]=\"true\" [editMode]=\"'cell'\"\r\n          [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"  [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\"\r\n          (selectChanged)=\"selectionChange($event)\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.assignScope.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.assignScope.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"SelectCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"actionsSelect()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #actionsDialog1 [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title='\u8282\u70B9\u5217\u8868'>\r\n  <!-- 2023-6-1 \u89E3\u51B3\u5BA1\u6279\u52A8\u4F5C\u5F39\u7A97\u53CC\u6EDA\u52A8\u6761\u7684\u95EE\u9898 -->\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-hidden h-100\" style=\"margin-left: 8px;margin-right: 8px;\">\r\n    <farris-datagrid #actionsTable1 [columns]=\"nodeCols\" [data]=\"items\"\r\n      [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' \r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"true\" [striped]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n",
                    providers: [
                        WfLocalePipe,
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AssignScopeComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: MessagerService },
        { type: ExpressionService },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
        { type: WfLocalePipe, decorators: [{ type: Optional }] }
    ]; };
    AssignScopeComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        actionsTable1: [{ type: ViewChild, args: ['actionsTable1',] }],
        actionsDialog1: [{ type: ViewChild, args: ['actionsDialog1',] }],
        editorParams: [{ type: Input }],
        value: [{ type: Input }]
    };
    return AssignScopeComponent;
}());
export { AssignScopeComponent };
if (false) {
    /** @type {?} */
    AssignScopeComponent.prototype.closeModal;
    /** @type {?} */
    AssignScopeComponent.prototype.submitModal;
    /** @type {?} */
    AssignScopeComponent.prototype.modalFooter;
    /** @type {?} */
    AssignScopeComponent.prototype.grid;
    /** @type {?} */
    AssignScopeComponent.prototype.actionsTable1;
    /** @type {?} */
    AssignScopeComponent.prototype.actionsDialog1;
    /** @type {?} */
    AssignScopeComponent.prototype.editorParams;
    /** @type {?} */
    AssignScopeComponent.prototype.location;
    /** @type {?} */
    AssignScopeComponent.prototype.items;
    /** @type {?} */
    AssignScopeComponent.prototype.listItems;
    /** @type {?} */
    AssignScopeComponent.prototype.modalConfig;
    /** @type {?} */
    AssignScopeComponent.prototype.cols;
    /** @type {?} */
    AssignScopeComponent.prototype.nodeCols;
    /** @type {?} */
    AssignScopeComponent.prototype.otherAssignActivityNodeInfos;
    /** @type {?} */
    AssignScopeComponent.prototype.curActivity;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.exprService;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.localePipe;
}
var AssignScopeConverter = /** @class */ (function () {
    function AssignScopeConverter(uistate, localePipe) {
        this.uistate = uistate;
        this.localePipe = localePipe;
        this.actList = new Array();
        this.actList = tslib_1.__spread(this.uistate.userActList.filter((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.AssignmentStrategy === 'ASSIGN'; })));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    AssignScopeConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.assignScope.set");
        }
        else {
            return this.localePipe.transform("component.assignScope.notSet");
        }
    };
    return AssignScopeConverter;
}());
export { AssignScopeConverter };
if (false) {
    /** @type {?} */
    AssignScopeConverter.prototype.actList;
    /**
     * @type {?}
     * @private
     */
    AssignScopeConverter.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    AssignScopeConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,