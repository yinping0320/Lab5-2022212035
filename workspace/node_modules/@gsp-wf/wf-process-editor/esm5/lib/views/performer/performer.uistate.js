/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
var PerformerUIState = /** @class */ (function () {
    function PerformerUIState(uiState) {
        this.uiState = uiState;
        this.performersList = [];
        this.typeCollection = [
            { text: '用户', value: 'wf.UserParticipantExpression' },
            { text: '变量参与者', value: 'wf.VariableParticipantExpression' },
            { text: '岗位', value: 'wf.PositionParticipantExpression' },
            { text: '构件参与者', value: 'wf.ComponentParticipantExpression' },
            { text: '汇报关系', value: 'wf.ReportingLineParticipantExpression' },
            { text: '矩阵', value: 'wf.MatrixParticipantExpression' },
            { text: '历史活动办理人', value: 'wf.ActivityExecutorParticipantExpression' },
            { text: '单位/部门', value: 'wf.OrganizationParticipantExpression' }
        ];
        this.performerInfo = {
            performers: [],
            variablePerformers: [],
            components: [],
            reportingLines: [],
            matrixParticipants: [],
            activityExecutors: [],
            organizationParticipants: [],
            options: null,
            isAllScope: false
        };
        if (this.uiState.scene === 'inSuite') {
            this.typeCollection = [
                { text: '用户', value: 'wf.UserParticipantExpression' },
                { text: '变量参与者', value: 'wf.VariableParticipantExpression' },
                { text: '角色', value: 'wf.PositionParticipantExpression' },
                { text: '构件参与者', value: 'wf.ComponentParticipantExpression' },
                { text: '汇报关系', value: 'wf.ReportingLineParticipantExpression' },
                { text: '矩阵', value: 'wf.MatrixParticipantExpression' },
                { text: '历史活动办理人', value: 'wf.ActivityExecutorParticipantExpression' },
                { text: '单位/部门', value: 'wf.OrganizationParticipantExpression' }
            ];
        }
        else {
            this.typeCollection = [
                { text: '用户', value: 'wf.UserParticipantExpression' },
                { text: '变量参与者', value: 'wf.VariableParticipantExpression' },
                { text: '岗位', value: 'wf.PositionParticipantExpression' },
                { text: '构件参与者', value: 'wf.ComponentParticipantExpression' },
                { text: '汇报关系', value: 'wf.ReportingLineParticipantExpression' },
                { text: '矩阵', value: 'wf.MatrixParticipantExpression' },
                { text: '历史活动办理人', value: 'wf.ActivityExecutorParticipantExpression' },
                { text: '单位/部门', value: 'wf.OrganizationParticipantExpression' }
            ];
        }
    }
    /**
     * @return {?}
     */
    PerformerUIState.prototype.clearPerformer = /**
     * @return {?}
     */
    function () {
        this.performerInfo.performers = new Array();
        this.performerInfo.components = new Array();
        this.performerInfo.reportingLines = new Array();
        this.performerInfo.matrixParticipants = new Array();
        this.performerInfo.activityExecutors = new Array();
        this.performerInfo.organizationParticipants = new Array();
        this.performersList = new Array();
    };
    PerformerUIState.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PerformerUIState.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return PerformerUIState;
}());
export { PerformerUIState };
if (false) {
    /** @type {?} */
    PerformerUIState.prototype.performersList;
    /** @type {?} */
    PerformerUIState.prototype.curPerformer;
    /** @type {?} */
    PerformerUIState.prototype.typeCollection;
    /** @type {?} */
    PerformerUIState.prototype.performerInfo;
    /**
     * @type {?}
     * @private
     */
    PerformerUIState.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,