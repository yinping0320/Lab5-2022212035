/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
var WfReportDefHelpService = /** @class */ (function () {
    function WfReportDefHelpService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    WfReportDefHelpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var e_1, _a;
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            var query = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    query += "\"codeOrNameLike\":\"" + searchValue.searchValue + "\",";
                }
                else {
                    query += "\"" + searchValue.searchField + "\":\"" + searchValue.searchValue + "\",";
                }
            }
            if (customData.filter) {
                /** @type {?} */
                var keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    try {
                        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                            var key = keys_1_1.value;
                            if (customData.filter[key]) {
                                query += "\"" + key + "\":\"" + customData.filter[key] + "\",";
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            if (query.substr(query.length - 1, 1) === ',') {
                query = query.substring(0, query.length - 1);
            }
            query += '}';
            query = encodeURIComponent(query);
            query += "&pageIndex=" + index + "&pageSize=" + size;
            url += '?pageFilter=' + query;
        }
        else {
            url += "?pageIndex=" + index + "&pageSize=" + size;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { return ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }); })));
    };
    WfReportDefHelpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WfReportDefHelpService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return WfReportDefHelpService;
}());
export { WfReportDefHelpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WfReportDefHelpService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtcmVwb3J0LWRlZi1oZWxwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3BlcmZvcm1lci92aWV3cy9yZXBvcnRpbmctbGluZS9zZXJ2aWNlL3dmLXJlcG9ydC1kZWYtaGVscC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDO0lBR0UsZ0NBQ1UsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUUzQixDQUFDOzs7Ozs7SUFFRCx3Q0FBTzs7Ozs7SUFBUCxVQUFRLEdBQVcsRUFBRSxNQUFxQjs7O1lBQ2xDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVTs7WUFDOUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQzs7WUFDN0IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRTs7WUFDNUIsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxJQUFJLFdBQVcsQ0FBQyxXQUFXLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTs7Z0JBQzVDLEtBQUssR0FBRyxHQUFHO1lBQ2YsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFO2dCQUMzQixJQUFJLFdBQVcsQ0FBQyxXQUFXLEtBQUssR0FBRyxFQUFFO29CQUNuQyxLQUFLLElBQUksMEJBQXFCLFdBQVcsQ0FBQyxXQUFXLFFBQUksQ0FBQztpQkFDM0Q7cUJBQU07b0JBQ0wsS0FBSyxJQUFJLE9BQUksV0FBVyxDQUFDLFdBQVcsYUFBTSxXQUFXLENBQUMsV0FBVyxRQUFJLENBQUM7aUJBQ3ZFO2FBQ0Y7WUFDRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7O29CQUNmLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7Z0JBQzNDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOzt3QkFDM0IsS0FBa0IsSUFBQSxTQUFBLGlCQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTs0QkFBbkIsSUFBTSxHQUFHLGlCQUFBOzRCQUNaLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQ0FDMUIsS0FBSyxJQUFJLE9BQUksR0FBRyxhQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQUksQ0FBQzs2QkFDbEQ7eUJBQ0Y7Ozs7Ozs7OztpQkFDRjthQUNGO1lBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtnQkFDN0MsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDOUM7WUFDRCxLQUFLLElBQUksR0FBRyxDQUFDO1lBQ2IsS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLEtBQUssSUFBSSxnQkFBYyxLQUFLLGtCQUFhLElBQU0sQ0FBQztZQUNoRCxHQUFHLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztTQUMvQjthQUFNO1lBQ0wsR0FBRyxJQUFJLGdCQUFjLEtBQUssa0JBQWEsSUFBTSxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUc7Ozs7UUFBQyxVQUFDLEVBQU8sSUFBSyxPQUFBLENBQUM7WUFDaEIsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPO1lBQ2pCLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYTtZQUN2QixRQUFRLEVBQUU7Z0JBQ1IsU0FBUyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUM7Z0JBQ3JDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVE7Z0JBQzlCLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUM7Z0JBQy9CLFdBQVcsRUFBRSxJQUFJO2FBQ2xCO1NBQ0YsQ0FBQyxFQVRlLENBU2YsRUFBQyxDQUNKLENBQUM7SUFDSixDQUFDOztnQkF0REYsVUFBVTs7OztnQkFKRixXQUFXOztJQTJEcEIsNkJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXREWSxzQkFBc0I7Ozs7OztJQUcvQixzQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTG9va3VwSHR0cFNlcnZpY2UsIFJlbW90ZVBhcmFtcywgTG9va3VwR3JpZFJlc3VsdCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXZlJlcG9ydERlZkhlbHBTZXJ2aWNlIGltcGxlbWVudHMgSUxvb2t1cEh0dHBTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhKHVybDogc3RyaW5nLCBwYXJhbXM/OiBSZW1vdGVQYXJhbXMpOiBPYnNlcnZhYmxlPExvb2t1cEdyaWRSZXN1bHQ+IHtcclxuICAgIGNvbnN0IGN1c3RvbURhdGEgPSBwYXJhbXMuY3VzdG9tRGF0YTtcclxuICAgIGNvbnN0IGluZGV4ID0gcGFyYW1zLnBhZ2VJbmRleCB8fCAxO1xyXG4gICAgY29uc3Qgc2l6ZSA9IHBhcmFtcy5wYWdlU2l6ZSB8fCAyMDtcclxuICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gSlNPTi5wYXJzZShwYXJhbXMuc2VhcmNoVmFsdWUpO1xyXG4gICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaFZhbHVlIHx8IGN1c3RvbURhdGEuZmlsdGVyKSB7XHJcbiAgICAgIGxldCBxdWVyeSA9ICd7JztcclxuICAgICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaEZpZWxkID09PSAnKicpIHtcclxuICAgICAgICAgIHF1ZXJ5ICs9IGBcImNvZGVPck5hbWVMaWtlXCI6XCIke3NlYXJjaFZhbHVlLnNlYXJjaFZhbHVlfVwiLGA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHF1ZXJ5ICs9IGBcIiR7c2VhcmNoVmFsdWUuc2VhcmNoRmllbGR9XCI6XCIke3NlYXJjaFZhbHVlLnNlYXJjaFZhbHVlfVwiLGA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChjdXN0b21EYXRhLmZpbHRlcikge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXN0b21EYXRhLmZpbHRlcik7XHJcbiAgICAgICAgaWYgKGtleXMgJiYga2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgIGlmIChjdXN0b21EYXRhLmZpbHRlcltrZXldKSB7XHJcbiAgICAgICAgICAgICAgcXVlcnkgKz0gYFwiJHtrZXl9XCI6XCIke2N1c3RvbURhdGEuZmlsdGVyW2tleV19XCIsYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAocXVlcnkuc3Vic3RyKHF1ZXJ5Lmxlbmd0aCAtIDEsIDEpID09PSAnLCcpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnN1YnN0cmluZygwLCBxdWVyeS5sZW5ndGggLSAxKTtcclxuICAgICAgfVxyXG4gICAgICBxdWVyeSArPSAnfSc7XHJcbiAgICAgIHF1ZXJ5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KTtcclxuICAgICAgcXVlcnkgKz0gYCZwYWdlSW5kZXg9JHtpbmRleH0mcGFnZVNpemU9JHtzaXplfWA7XHJcbiAgICAgIHVybCArPSAnP3BhZ2VGaWx0ZXI9JyArIHF1ZXJ5O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdXJsICs9IGA/cGFnZUluZGV4PSR7aW5kZXh9JnBhZ2VTaXplPSR7c2l6ZX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKFxyXG4gICAgICBtYXAoKHJlOiBhbnkpID0+ICh7XHJcbiAgICAgICAgaXRlbXM6IHJlLmNvbnRlbnQsXHJcbiAgICAgICAgdG90YWw6IHJlLnRvdGFsRWxlbWVudHMsXHJcbiAgICAgICAgcGFnZUluZm86IHtcclxuICAgICAgICAgIHBhZ2VJbmRleDogcmUucGFnZWFibGUucGFnZU51bWJlciArIDEsXHJcbiAgICAgICAgICBwYWdlU2l6ZTogcmUucGFnZWFibGUucGFnZVNpemUsXHJcbiAgICAgICAgICBwYWdlTGlzdDogWzIwLCA0MCwgNjAsIDgwLCAxMDBdLFxyXG4gICAgICAgICAgZW5hYmxlUGFnZXI6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0pKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19