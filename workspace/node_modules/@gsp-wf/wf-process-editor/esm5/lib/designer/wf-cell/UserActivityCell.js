/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, Expression, FlowNodeState, MultiInstanceLoopCharacteristics } from "@edp-pmf/bpmn-model";
import { OtherAssignNodes, UserActivity, OperationActivity, StartActivity, UrgeHandleRule, ApprovalPivot, ApprovalPivotConfig, ImageSettings, CheckCondition, VariableSetting, CustomizeAction, TimeLimitControl, TitleExpression, JumpScope, BackWardRule, CounterSignRule, ParticipantSetting, AssignPerformerConfig, Component, ConclusionItem, ExecuteWorkItemMode, WorkFlowAction, DisplayTerminal, AssignmentStrategy, TimeLimitControlInfo, SendMessageExpireOperation, SendMessageExpireOperationInfo, AutoHandleExpireOperation, AutoHandleExpireOperationInfo, ExtendProperty, MessageNotice, ActionScope, Condition, ExecuteForm, PotentialOwnerImpl, HumanPerformerImpl, OrganizationParticipantExpression, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, ParticipantExpression, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, ActualParameter, SmsMessageTemplate, SmsMessageVariable, OtherAssignActivityNodeInfo, OrganizationLevel, SemanticExpression } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { AssignConfig } from "../entity/AssignConfig";
import { AssignStrategy } from "../entity/AssignStrategy";
import { OrganizationParticipant } from "../entity/OrganizationParticipant";
import { WfConstants } from "../WfConstants";
import { UserActivityPropertyKeys } from "./property-keys/UserActivityPropertyKeys";
import { WfDesignerUtils } from "../WfDesignerUtils";
import { ActionOrganizationScopeDesign, OrganizationPotentialOwner } from "../../views/organization-potential-owner/actionOrganizationScope";
// import { ParticipantInfo } from "../../views/participant/participant.info";
import { ParticipantInfo } from "../entity";
/**
 * 审批活动节点
 */
var UserActivityCell = /** @class */ (function (_super) {
    tslib_1.__extends(UserActivityCell, _super);
    function UserActivityCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = UserActivityCell.CLR_TYPE_ID;
        _this.name = "审批";
        _this.nameLanguage = {
            "zh-CHS": "审批",
            "zh-CHT": "審批",
            "en": "Approve",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/approval.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/approval_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    UserActivityCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        /** @type {?} */
        var editorUi = this.editorUi;
        /** @type {?} */
        var bpmnModel = editorUi.graph.bpmnModel;
        flowNode.Id = "UserActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.transferAble = editorUi.generalConfig.enableTransfer;
            flowNode.AddSignBehindAble = editorUi.generalConfig.enableAddSignBehind;
            flowNode.AddSignFrontAble = editorUi.generalConfig.enableAddSignFront;
            flowNode.NotifyAble = editorUi.generalConfig.enableNotify;
            if (this.bizActivity) {
                /** @type {?} */
                var bizActivity = this.bizActivity;
                flowNode.BizActivityID = bizActivity.id;
                flowNode.BizActivityName = bizActivity.name;
                flowNode.Tools = [];
                try {
                    for (var _c = tslib_1.__values(bizActivity.bizComponents), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var c = _d.value;
                        /** @type {?} */
                        var tool = new Component(flowNode.Model);
                        tool.Id = c.id;
                        tool.Name = c.name;
                        tool.Time = c.executionTime;
                        // TODO 写死了构件类型
                        tool.ComponentType = 'CommonComponent';
                        tool.MetadataId = c.metadataId;
                        tool.MethodCode = c.methodCode;
                        tool.ActualParameters = [];
                        if (c.actualParameters && ((/** @type {?} */ (c.actualParameters))).length > 0) {
                            try {
                                for (var _e = tslib_1.__values(((/** @type {?} */ (c.actualParameters)))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var a = _f.value;
                                    /** @type {?} */
                                    var parameter = new ActualParameter(bpmnModel, a.code, a.value);
                                    tool.ActualParameters.push(parameter);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        flowNode.Tools.push(tool);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                flowNode.setBizConclusions(bpmnModel, bizActivity.bizActions);
            }
            else {
                flowNode.BizActivityID = "";
                flowNode.initConclusions(bpmnModel);
            }
        }
        return flowNode;
    };
    /**
     * @return {?}
     */
    UserActivityCell.prototype.createDiagramElement = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.bizActivity != null) {
            this.imgUrls = (_a = {},
                _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/bizActivity.png",
                _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/bizActivity_select.svg",
                _a);
        }
        /** @type {?} */
        var shape = _super.prototype.createDiagramElement.call(this);
        return shape;
    };
    /**
     * @return {?}
     */
    UserActivityCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        return this.getFarrisPropConfigByIsOperation();
    };
    /**
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.getFarrisPropConfigByIsOperation = /**
     * @param {?=} isOperation
     * @return {?}
     */
    function (isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        var e_3, _a, e_4, _b, e_5, _c;
        /** @type {?} */
        var editorUi = this.editorUi;
        /** @type {?} */
        var extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        var userAct = this.flowElement;
        /** @type {?} */
        var basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: UserActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: UserActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: UserActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true },
            { propertyID: UserActivityPropertyKeys.wf_TitleExpression, propertyName: mxResources.get('wfTitleExpression'), propertyType: 'modal' },
        ];
        /** @type {?} */
        var performerProperty = new ElementPropertyConfig();
        performerProperty.categoryId = 'performerProperty';
        performerProperty.categoryName = mxResources.get('participant');
        performerProperty.tabId = 'basic';
        performerProperty.tabName = mxResources.get('basicAttributes');
        performerProperty.properties = [
            { propertyID: UserActivityPropertyKeys.ParticipantSchemes, propertyName: mxResources.get('participantSchemes'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.ParticipantOptions, propertyName: mxResources.get('participantOptions'), propertyType: 'modal' },
        ];
        // if (userAct.AssignmentStrategy !== AssignmentStrategy.ASSIGN) {
        //     performerProperty.properties.push(
        //         { propertyID: UserActivityPropertyKeys.AssignStrategy, propertyName: '分配策略', propertyType: 'modal' }
        //     );
        // } else {
        //     performerProperty.properties = performerProperty.properties.concat(
        //         [{ propertyID: UserActivityPropertyKeys.AssignStrategy, propertyName: '分配策略', propertyType: 'modal' },
        //         { propertyID: UserActivityPropertyKeys.AssignPerformer, propertyName: '备选办理人', propertyType: 'modal' }]);
        // }
        if (!isOperation) {
            if (userAct.ExecuteWorkItemMode === ExecuteWorkItemMode.Preempt) {
                performerProperty.properties.push({ propertyID: UserActivityPropertyKeys.CompleteStrategy, propertyName: mxResources.get('completeStrategy'), propertyType: 'select' });
                propertyData[UserActivityPropertyKeys.CompleteStrategy] = userAct.ExecuteWorkItemMode;
            }
            else {
                performerProperty.properties = performerProperty.properties.concat([
                    { propertyID: UserActivityPropertyKeys.CompleteStrategy, propertyName: mxResources.get('completeStrategy'), propertyType: 'select' },
                    { propertyID: UserActivityPropertyKeys.SignRule, propertyName: mxResources.get('signRule'), propertyType: 'modal' },
                ]);
                propertyData[UserActivityPropertyKeys.CompleteStrategy] = userAct.ExecuteWorkItemMode;
                propertyData[UserActivityPropertyKeys.SignRule] = userAct.CounterSignRules;
            }
        }
        /** @type {?} */
        var approvalProperty = new ElementPropertyConfig();
        approvalProperty.categoryId = 'approvalProperty';
        approvalProperty.categoryName = mxResources.get('operationsManage');
        approvalProperty.tabId = 'approvalProperty';
        approvalProperty.tabName = mxResources.get('operationsConfig');
        approvalProperty.properties = [
            { propertyID: UserActivityPropertyKeys.ApprovalItems, propertyName: mxResources.get('approvalItems'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.wf_CustomizeAction, propertyName: mxResources.get('wfCustomizeAction'), propertyType: 'modal' },
        ];
        // 审批活动节点含“驳回”审批动作时，属性框支持驳回规则属性
        if (userAct.Conclusions && this.isBackConclusionExist(userAct.Conclusions)) {
            approvalProperty.properties.push({ propertyID: UserActivityPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' });
            propertyData[UserActivityPropertyKeys.BackWardRule] = userAct.BackWardRule;
        }
        approvalProperty.properties = approvalProperty.properties.concat([
            { propertyID: UserActivityPropertyKeys.Retrievable, propertyName: mxResources.get('retrievable'), propertyType: 'select' },
        ]);
        if (!isOperation) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.AddSignFrontAble, propertyName: mxResources.get('addSignFrontAble'), propertyType: 'modal' },
                { propertyID: UserActivityPropertyKeys.AddSignBehindAble, propertyName: mxResources.get('addSignBehindAble'), propertyType: 'modal' },
            ]);
        }
        if (editorUi.generalConfig.enableTransfer) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.transferScope, propertyName: mxResources.get('transferScope'), propertyType: 'modal' },
            ]);
        }
        approvalProperty.properties = approvalProperty.properties.concat([
            { propertyID: UserActivityPropertyKeys.NotifyAble, propertyName: mxResources.get('notifyAble'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.urgeHandleRule, propertyName: mxResources.get('urgeHandleRule'), propertyType: 'modal' }
        ]);
        if (userAct.SelectTargetAble) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
                { propertyID: UserActivityPropertyKeys.JumpScope, propertyName: mxResources.get('jumpScope'), propertyType: 'modal' },
            ]);
            propertyData[UserActivityPropertyKeys.SelectTargetAble] = userAct.SelectTargetAble;
            propertyData[UserActivityPropertyKeys.JumpScope] = userAct.JumpScope;
        }
        else {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
            ]);
            propertyData[UserActivityPropertyKeys.SelectTargetAble] = userAct.SelectTargetAble;
        }
        if (userAct.otherAssignNodes) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' },
                // { propertyID: UserActivityPropertyKeys.otherAssignActivities, propertyName: mxResources.get('otherAssignActivities'), propertyType: 'modal' },
                { propertyID: UserActivityPropertyKeys.otherAssignActivityNodeInfos, propertyName: mxResources.get('otherAssignActivityNodeInfos'), propertyType: 'modal' },
            ]);
            propertyData[UserActivityPropertyKeys.otherAssignNodes] = true;
            // propertyData[UserActivityPropertyKeys.otherAssignActivities] = userAct.otherAssignNodes.otherAssignActivities;
            propertyData[UserActivityPropertyKeys.otherAssignActivityNodeInfos] = userAct.otherAssignNodes.otherAssignActivityNodeInfos || userAct.otherAssignNodes.otherAssignActivityNodeInfos;
            if (userAct.otherAssignNodes.otherAssignActivities) {
                userAct.otherAssignNodes.otherAssignActivities = null;
            }
        }
        else {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' }
            ]);
            propertyData[UserActivityPropertyKeys.otherAssignNodes] = false;
        }
        /** @type {?} */
        var eventListeners = new ElementPropertyConfig();
        eventListeners.categoryId = 'eventListeners'; // 活动选项（表单定义+活动构件）
        eventListeners.categoryName = mxResources.get('eventListeners');
        eventListeners.tabId = 'advanced';
        eventListeners.tabName = mxResources.get('advancedAttributes');
        eventListeners.properties = [
            { propertyID: UserActivityPropertyKeys.Tools, propertyName: mxResources.get('tools'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.checkConditions, propertyName: mxResources.get('checkConditions'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        /** @type {?} */
        var ApprovalSettings = new ElementPropertyConfig();
        ApprovalSettings.categoryId = 'ApprovalSettings'; // 活动选项（表单定义+活动构件）
        ApprovalSettings.categoryName = mxResources.get('approvalSettings');
        ApprovalSettings.tabId = 'advanced';
        ApprovalSettings.tabName = mxResources.get('advancedAttributes');
        ApprovalSettings.properties = [
            { propertyID: UserActivityPropertyKeys.anonymousSet, propertyName: mxResources.get('anonymousSet'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.approvalPivotConfig, propertyName: mxResources.get('approvalPivotConfig'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.imageSettings, propertyName: mxResources.get('imageSettings'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.MultiInstanceLoopCharacteristics, propertyName: mxResources.get('multiInstanceLoopCharacteristics'), propertyType: 'modal' }
        ];
        propertyData[UserActivityPropertyKeys.MultiInstanceLoopCharacteristics] = userAct.LoopCharacteristics;
        /** @type {?} */
        var taskTimeliness = new ElementPropertyConfig();
        taskTimeliness.categoryId = 'taskTimeliness'; // 活动选项（表单定义+活动构件）
        taskTimeliness.categoryName = mxResources.get('taskTimeliness');
        taskTimeliness.tabId = 'advanced';
        taskTimeliness.tabName = mxResources.get('advancedAttributes');
        taskTimeliness.properties = [
            { propertyID: UserActivityPropertyKeys.timeLimitControl, propertyName: mxResources.get('timeLimitControl'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
        ];
        /** @type {?} */
        var formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: UserActivityPropertyKeys.DisplayTerminal, propertyName: mxResources.get('displayTerminal'), propertyType: 'select' },
            { propertyID: UserActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        var groupList = new Array();
        try {
            for (var extendList_1 = tslib_1.__values(extendList), extendList_1_1 = extendList_1.next(); !extendList_1_1.done; extendList_1_1 = extendList_1.next()) {
                var extend = extendList_1_1.value;
                if (!extend.parentId) {
                    /** @type {?} */
                    var group = { parent: extend, childs: new Array() };
                    try {
                        for (var extendList_2 = tslib_1.__values(extendList), extendList_2_1 = extendList_2.next(); !extendList_2_1.done; extendList_2_1 = extendList_2.next()) {
                            var e = extendList_2_1.value;
                            if (e.parentId === extend.id) {
                                group.childs.push(e);
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (extendList_2_1 && !extendList_2_1.done && (_b = extendList_2.return)) _b.call(extendList_2);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    groupList.push(group);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (extendList_1_1 && !extendList_1_1.done && (_a = extendList_1.return)) _a.call(extendList_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            var ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            try {
                for (var groupList_1 = tslib_1.__values(groupList), groupList_1_1 = groupList_1.next(); !groupList_1_1.done; groupList_1_1 = groupList_1.next()) {
                    var g = groupList_1_1.value;
                    ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (groupList_1_1 && !groupList_1_1.done && (_c = groupList_1.return)) _c.call(groupList_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
            this.setPropertyData(userAct, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, eventListeners, taskTimeliness, ApprovalSettings, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            this.setPropertyData(userAct, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, eventListeners, taskTimeliness, ApprovalSettings],
                propertyData: propertyData
            };
        }
    };
    /**
     * 判断是否存在反向流程动作
     * @param conclusions
     */
    /**
     * 判断是否存在反向流程动作
     * @param {?} conclusions
     * @return {?}
     */
    UserActivityCell.prototype.isBackConclusionExist = /**
     * 判断是否存在反向流程动作
     * @param {?} conclusions
     * @return {?}
     */
    function (conclusions) {
        var e_6, _a;
        try {
            for (var conclusions_1 = tslib_1.__values(conclusions), conclusions_1_1 = conclusions_1.next(); !conclusions_1_1.done; conclusions_1_1 = conclusions_1.next()) {
                var conclusion = conclusions_1_1.value;
                if (conclusion.WorkFlowAction === WorkFlowAction.Backward) {
                    return true;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (conclusions_1_1 && !conclusions_1_1.done && (_a = conclusions_1.return)) _a.call(conclusions_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return false;
    };
    /**
     * 组织UserActivity的属性值propertyData
     * @param act
     * @param propertyData
     */
    /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?} groupList
     * @return {?}
     */
    UserActivityCell.prototype.setPropertyData = /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?} groupList
     * @return {?}
     */
    function (act, propertyData, groupList) {
        var e_7, _a;
        propertyData[UserActivityPropertyKeys.Id] = act.Id;
        propertyData[UserActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[UserActivityPropertyKeys.Name] = act.Name;
        propertyData[UserActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        //活动传递bizActivityId
        propertyData[UserActivityPropertyKeys.BizActivityID] = act.BizActivityID;
        // 变量设置+流程变量
        propertyData[UserActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        propertyData[UserActivityPropertyKeys.ParticipantSchemes] = this.getParticipantInfo(act);
        propertyData[UserActivityPropertyKeys.ParticipantOptions] = this.getParticipantOptions(act);
        // if (userAct.AssignmentStrategy === AssignmentStrategy.ASSIGN) {
        //     propertyData[UserActivityPropertyKeys.AssignPerformer] = this.getPotentialOwnerImpl(userAct);
        // }
        propertyData[UserActivityPropertyKeys.ApprovalItems] = act.Conclusions;
        propertyData[UserActivityPropertyKeys.Tools] = PropertyHelper.getBizComponentList((/** @type {?} */ (act.Tools)));
        propertyData[UserActivityPropertyKeys.wf_CustomizeAction] = act.customizeActions || [];
        propertyData[UserActivityPropertyKeys.AssignStrategy] = this.getAssignStrategy(act);
        propertyData[UserActivityPropertyKeys.Retrievable] = act.Retrievable;
        propertyData[UserActivityPropertyKeys.SelectBranch] = act.SelectBranch;
        propertyData[UserActivityPropertyKeys.AddSignFrontAble] = this.getSignFrontInfo(act);
        propertyData[UserActivityPropertyKeys.AddSignBehindAble] = this.getSignBehindInfo(act);
        propertyData[UserActivityPropertyKeys.transferScope] = this.getTransferScopeInfo(act);
        propertyData[UserActivityPropertyKeys.NotifyAble] = this.getNotifyAble(act);
        propertyData[UserActivityPropertyKeys.timeLimitControl] = this.getTimeLimitInfo(act);
        propertyData[UserActivityPropertyKeys.wf_TitleExpression] = act.taskTitle ? (act.taskTitle.valueLanguage ? act.taskTitle.valueLanguage : act.taskTitle.value) : '';
        propertyData[UserActivityPropertyKeys.anonymousSet] = {
            isAnonymity: act.anonymous,
            anonymous: act.anonymousText
        };
        propertyData[UserActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        // 影像设置
        propertyData[UserActivityPropertyKeys.imageSettings] = act.imageSettings;
        propertyData[UserActivityPropertyKeys.wf_ExecuteForms_PC] =
            act.ExecuteForms ? act.ExecuteForms.find((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType === 'PC'; })) : null;
        propertyData[UserActivityPropertyKeys.wf_ExecuteForms_Mobile] =
            act.ExecuteForms ? act.ExecuteForms.find((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType === 'MOBILE'; })) : null;
        propertyData[UserActivityPropertyKeys.approvalPivotConfig] = act.approvalPivotConfig;
        propertyData[UserActivityPropertyKeys.DisplayTerminal] = act.DisplayTerminal ? act.DisplayTerminal : DisplayTerminal.ALL;
        propertyData[UserActivityPropertyKeys.urgeHandleRule] = this.getUrgeHandleRule(act);
        try {
            for (var groupList_2 = tslib_1.__values(groupList), groupList_2_1 = groupList_2.next(); !groupList_2_1.done; groupList_2_1 = groupList_2.next()) {
                var g = groupList_2_1.value;
                // 取回模型上的value值给到扩展属性组件里
                if (act.extendProperties && act.extendProperties.length > 0) {
                    g.childs.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    function (a, b) {
                        return a.sortOrder - b.sortOrder;
                    })).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        act.extendProperties.forEach((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            if (e.key == d.code) {
                                d.value = e.value;
                            }
                        }));
                    }));
                }
                propertyData[g.parent.id] = g.childs;
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (groupList_2_1 && !groupList_2_1.done && (_a = groupList_2.return)) _a.call(groupList_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
        propertyData[UserActivityPropertyKeys.checkConditions] = this.getCheckConditions(act);
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getParticipantInfo = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var partiInfo = new ParticipantInfo();
        partiInfo.assignStrategy.assignStrategy = userActivity.AssignmentStrategy;
        /** @type {?} */
        var roles = (/** @type {?} */ (userActivity.GetResourceRoles().filter((/**
         * @param {?} role
         * @return {?}
         */
        function (role) { return role instanceof HumanPerformerImpl; }))));
        partiInfo.humanPerformerList = PropertyHelper.getPerformerList(roles);
        if (userActivity.AssignmentStrategy === AssignmentStrategy.ASSIGN) {
            if (userActivity.AssignPerformerConfig) {
                /** @type {?} */
                var assignConfig = new AssignConfig();
                assignConfig.operator = userActivity.AssignPerformerConfig.Operator;
                assignConfig.multiSelect = userActivity.AssignPerformerConfig.MultiSelect;
                assignConfig.necessary = userActivity.AssignPerformerConfig.Necessary;
                partiInfo.assignStrategy.assignConfig = assignConfig;
                partiInfo.isAllScope = userActivity.AssignPerformerConfig.AllowGlobalAssign;
            }
            /** @type {?} */
            var roles_1 = (/** @type {?} */ (userActivity.GetResourceRoles().filter((/**
             * @param {?} role
             * @return {?}
             */
            function (role) { return role instanceof PotentialOwnerImpl; }))));
            partiInfo.potentialOwnerList = PropertyHelper.getPerformerList(roles_1);
        }
        return partiInfo;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getParticipantOptions = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var options = {};
        if (userActivity.ParticipantSetting != null) {
            options.ExclusionPerformers = userActivity.ParticipantSetting.ExclusionPerformers;
            options.NoPerformerStrategy = userActivity.ParticipantSetting.NoPerformerStrategy;
            options.HistoricFirst = userActivity.ParticipantSetting.HistoricFirst;
            options.automaticPerformers = userActivity.ParticipantSetting.automaticPerformers;
        }
        return options;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getAssignStrategy = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var assignStrategy = new AssignStrategy();
        assignStrategy.assignStrategy = userActivity.AssignmentStrategy;
        if (userActivity.AssignPerformerConfig) {
            /** @type {?} */
            var assignConfig = new AssignConfig();
            assignConfig.operator = userActivity.AssignPerformerConfig.Operator;
            assignConfig.multiSelect = userActivity.AssignPerformerConfig.MultiSelect;
            assignConfig.necessary = userActivity.AssignPerformerConfig.Necessary;
            assignStrategy.assignConfig = assignConfig;
        }
        return assignStrategy;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getSignFrontInfo = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var signFrontTest = new ActionOrganizationScopeDesign();
        signFrontTest.action = (/** @type {?} */ (ActionScope.AddSignFront));
        if (userActivity.AddSignFrontAble) {
            signFrontTest.enable = true;
            /** @type {?} */
            var roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.actionScope === ActionScope.AddSignFront; }));
            /** @type {?} */
            var res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order; }));
            /** @type {?} */
            var list = [];
            if (res) {
                /** @type {?} */
                var organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            signFrontTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                signFrontTest.scope.participantInfo = new ParticipantInfo();
                signFrontTest.scope.participantInfo.potentialOwnerList = list;
                signFrontTest.scope.participantInfo.isAllScope = true;
            }
            else {
                signFrontTest.scope.participantInfo = new ParticipantInfo();
                signFrontTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            signFrontTest.enable = false;
        }
        return signFrontTest;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getSignBehindInfo = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var signBehindTest = new ActionOrganizationScopeDesign();
        signBehindTest.action = (/** @type {?} */ (ActionScope.AddSignBehind));
        if (userActivity.AddSignBehindAble) {
            signBehindTest.enable = true;
            /** @type {?} */
            var roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.actionScope === ActionScope.AddSignBehind; }));
            /** @type {?} */
            var res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order; }));
            /** @type {?} */
            var list = [];
            if (res) {
                /** @type {?} */
                var organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            signBehindTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                signBehindTest.scope.participantInfo = new ParticipantInfo();
                signBehindTest.scope.participantInfo.potentialOwnerList = list;
                signBehindTest.scope.participantInfo.isAllScope = true;
            }
            else {
                signBehindTest.scope.participantInfo = new ParticipantInfo();
                signBehindTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            signBehindTest.enable = false;
        }
        return signBehindTest;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getTransferScopeInfo = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var transferScopeTest = new ActionOrganizationScopeDesign();
        transferScopeTest.action = (/** @type {?} */ (ActionScope.Transfer));
        if (userActivity.transferAble) {
            transferScopeTest.enable = true;
            /** @type {?} */
            var roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.actionScope === ActionScope.Transfer; }));
            /** @type {?} */
            var res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order; }));
            /** @type {?} */
            var list = [];
            if (res) {
                /** @type {?} */
                var organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            transferScopeTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                transferScopeTest.scope.participantInfo = new ParticipantInfo();
                transferScopeTest.scope.participantInfo.potentialOwnerList = list;
                transferScopeTest.scope.participantInfo.isAllScope = true;
            }
            else {
                transferScopeTest.scope.participantInfo = new ParticipantInfo();
                transferScopeTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            transferScopeTest.enable = userActivity.transferAble;
        }
        return transferScopeTest;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getNotifyAble = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        /** @type {?} */
        var notifyScopeTest = new ActionOrganizationScopeDesign();
        notifyScopeTest.action = (/** @type {?} */ (ActionScope.Notify));
        if (userActivity.NotifyAble) {
            notifyScopeTest.enable = true;
            /** @type {?} */
            var roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.actionScope === ActionScope.Notify; }));
            /** @type {?} */
            var res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order; }));
            /** @type {?} */
            var list = [];
            if (res) {
                /** @type {?} */
                var organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            notifyScopeTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                notifyScopeTest.scope.participantInfo = new ParticipantInfo();
                notifyScopeTest.scope.participantInfo.potentialOwnerList = list;
                notifyScopeTest.scope.participantInfo.isAllScope = true;
            }
            else {
                notifyScopeTest.scope.participantInfo = new ParticipantInfo();
                notifyScopeTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            notifyScopeTest.enable = userActivity.NotifyAble;
        }
        return notifyScopeTest;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getTimeLimitInfo = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        var e_8, _a, e_9, _b;
        if (userActivity.timeLimitControl) {
            /** @type {?} */
            var timeLimit = new TimeLimitControlInfo();
            timeLimit.enable = userActivity.timeLimitControl.enable;
            timeLimit.tag = userActivity.timeLimitControl.tag;
            timeLimit.dueTime = userActivity.timeLimitControl.dueTime;
            timeLimit.timeUnit = userActivity.timeLimitControl.timeUnit;
            timeLimit.expireOperations = new Array();
            if (userActivity.timeLimitControl.expireOperations && userActivity.timeLimitControl.expireOperations.length > 0) {
                /** @type {?} */
                var operations = userActivity.timeLimitControl.expireOperations;
                try {
                    for (var operations_1 = tslib_1.__values(operations), operations_1_1 = operations_1.next(); !operations_1_1.done; operations_1_1 = operations_1.next()) {
                        var o = operations_1_1.value;
                        if (o.ClrTypeID.indexOf('SendMessageExpireOperation') > 0) {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var sendMessage = new SendMessageExpireOperationInfo();
                            sendMessage.timeDuration = operation.timeDuration;
                            sendMessage.durationType = operation.durationType;
                            sendMessage.timeUnit = operation.timeUnit;
                            sendMessage.message = operation.message;
                            sendMessage.sendType = operation.sendType;
                            sendMessage.subject = operation.subject;
                            sendMessage.id = operation.id;
                            sendMessage.receiver = operation.receiver;
                            sendMessage.cycleEnable = operation.cycleEnable;
                            sendMessage.cycleTime = operation.cycleTime;
                            sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                            sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                            if (operation.smsMessageTemplate) {
                                /** @type {?} */
                                var smsTemplate = new Object;
                                smsTemplate.code = operation.smsMessageTemplate.code;
                                smsTemplate.content = operation.smsMessageTemplate.content;
                                smsTemplate.smsMessageVariables = new Array();
                                if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                    try {
                                        for (var _c = tslib_1.__values(operation.smsMessageTemplate.smsMessageVariables), _d = _c.next(); !_d.done; _d = _c.next()) {
                                            var v = _d.value;
                                            /** @type {?} */
                                            var variable = new Object;
                                            variable.id = WfDesignerUtils.createNM();
                                            variable.code = v.code;
                                            variable.value = v.value;
                                            variable.tag = v.tag;
                                            smsTemplate.smsMessageVariables.push(variable);
                                        }
                                    }
                                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                                    finally {
                                        try {
                                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                                        }
                                        finally { if (e_9) throw e_9.error; }
                                    }
                                }
                                sendMessage.smsMessageTemplate = smsTemplate;
                            }
                            timeLimit.expireOperations.push(sendMessage);
                        }
                        else if (o.ClrTypeID.indexOf('AutoHandleExpireOperation') > 0) {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var autoHandle = new AutoHandleExpireOperationInfo();
                            autoHandle.id = operation.id;
                            autoHandle.durationType = operation.durationType;
                            autoHandle.timeDuration = operation.timeDuration;
                            autoHandle.timeUnit = operation.timeUnit;
                            autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                            autoHandle.autoHandleType = operation.autoHandleType;
                            autoHandle.message = operation.message;
                            timeLimit.expireOperations.push(autoHandle);
                        }
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (operations_1_1 && !operations_1_1.done && (_a = operations_1.return)) _a.call(operations_1);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
            return timeLimit;
        }
        return null;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getUrgeHandleRule = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        var e_10, _a;
        if (!userActivity.urgeHandleRule) {
            return null;
        }
        /** @type {?} */
        var rule = userActivity.urgeHandleRule;
        /** @type {?} */
        var urgeHandleRule = {
            urgeHandleAble: rule.urgeHandleAble,
            sendType: rule.sendType,
            earlyTime: rule.earlyTime,
            intervalTime: rule.intervalTime,
            urgeMessageSubject: rule.urgeMessageSubject,
            urgeMessageContent: rule.urgeMessageContent,
            addReminder: rule.addReminder,
            subjectEditable: rule.subjectEditable,
            contentEditable: rule.contentEditable
        };
        if (rule.smsMessageTemplate) {
            /** @type {?} */
            var smsTemplate = new Object;
            smsTemplate.code = rule.smsMessageTemplate.code;
            smsTemplate.content = rule.smsMessageTemplate.content;
            smsTemplate.smsMessageVariables = new Array();
            if (rule.smsMessageTemplate.smsMessageVariables && rule.smsMessageTemplate.smsMessageVariables.length > 0) {
                try {
                    for (var _b = tslib_1.__values(rule.smsMessageTemplate.smsMessageVariables), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var v = _c.value;
                        /** @type {?} */
                        var variable = new Object;
                        variable.id = WfDesignerUtils.createNM();
                        variable.code = v.code;
                        variable.value = v.value;
                        variable.tag = v.tag;
                        smsTemplate.smsMessageVariables.push(variable);
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
            }
            urgeHandleRule.smsMessageTemplate = smsTemplate;
        }
        return urgeHandleRule;
    };
    /**
     * @param {?} userActivity
     * @return {?}
     */
    UserActivityCell.prototype.getCheckConditions = /**
     * @param {?} userActivity
     * @return {?}
     */
    function (userActivity) {
        if (userActivity.checkConditions && userActivity.checkConditions.length > 0) {
            return userActivity.checkConditions.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return ({
                value: c.value,
                checkTime: c.checkTime,
                errorTips: c.errorTips ? Array.from(c.errorTips).reduce((/**
                 * @param {?} obj
                 * @param {?} __1
                 * @return {?}
                 */
                function (obj, _a) {
                    var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
                    var _c;
                    return Object.assign(obj, (_c = {}, _c[key] = value, _c));
                }), {}) : null
            }); }));
        }
        return null;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.updatePropsByIsOperation(obj);
    };
    /**
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.updatePropsByIsOperation = /**
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        /** @type {?} */
        var editorUi = this.editorUi;
        /** @type {?} */
        var userActivity = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case UserActivityPropertyKeys.ParticipantSchemes: // 参与者属性
                this.updateParticipant(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.ParticipantOptions: // 参与者选项
                this.updateParticipantOptions(userActivity, obj);
                break;
            // case UserActivityPropertyKeys.AssignPerformer:
            //     this.updatePotentialOwnerImpl(graph.bpmnModel, userActivity, obj);
            //     break;
            // case UserActivityPropertyKeys.AssignStrategy:
            //     this.updateAssignStrategy(graph, userActivity, obj, isOperation);
            //     break;
            // case UserActivityPropertyKeys.OperatorConfig:
            //     this.updateOperatorConfig(userActivity, obj);
            //     break;
            case UserActivityPropertyKeys.CompleteStrategy:
                this.resetExecuteWorkItemMode(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.DisplayTerminal:
                this.resetDisplayTerminal(userActivity, obj);
                break;
            case UserActivityPropertyKeys.SignRule:
                this.resetSignRules(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.ApprovalItems:
                this.resetApprovalItems(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.wf_ExecuteForms_PC:
                this.resetExecuteForm(userActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case UserActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.resetExecuteForm(userActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case UserActivityPropertyKeys.SelectTargetAble:
                this.resetSelectTargetAble(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.JumpScope:
                this.resetJumpScope(userActivity, obj);
                break;
            case UserActivityPropertyKeys.BackWardRule:
                this.resetBackWardRule(userActivity, obj);
                break;
            case UserActivityPropertyKeys.MultiInstanceLoopCharacteristics:
                this.resetMultiInstanceLoopCharacteristics(userActivity, obj);
                break;
            case UserActivityPropertyKeys.Tools:
                this.resetTools(userActivity, obj);
                break;
            case UserActivityPropertyKeys.wf_TitleExpression:
                this.modifyTitleExpression(userActivity, obj);
                break;
            case UserActivityPropertyKeys.AddSignFrontAble:
                this.updateSignFrontSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.AddSignBehindAble:
                this.updateSignBehindsSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.NotifyAble:
                this.updateNotifySet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.transferScope:
                this.updateTransferScope(userActivity, obj);
                break;
            case UserActivityPropertyKeys.wf_CustomizeAction:
                this.updateCustomizeActions(userActivity, obj);
                break;
            case UserActivityPropertyKeys.timeLimitControl:
                this.updateTimeLimitControl(userActivity, obj);
                break;
            case UserActivityPropertyKeys.anonymousSet:
                this.updateAnonymousSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(userActivity, obj);
                break;
            case UserActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(userActivity, obj);
                break;
            case UserActivityPropertyKeys.approvalPivotConfig:
                this.updateApprovalPivotConfig(userActivity, obj);
                break;
            case UserActivityPropertyKeys.urgeHandleRule:
                this.updateUrgeHandleRule(userActivity, obj);
                break;
            case UserActivityPropertyKeys.imageSettings: // 更新变量设置属性
                this.updateImageSettings(userActivity, obj);
                break;
            case UserActivityPropertyKeys.checkConditions:
                this.updateCheckConditions(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.otherAssignActivities:
                this.updateOtherAssignActivities(userActivity, obj);
                break;
            case UserActivityPropertyKeys.otherAssignActivityNodeInfos:
                this.updateOtherAssignActivities(userActivity, obj);
                break;
            case UserActivityPropertyKeys.otherAssignNodes:
                this.updateOtherAssignNodes(userActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === propertyId; })) > -1) {
                    this.resetExtendProperty(userActivity, obj);
                }
                else {
                    _super.prototype.updateProps.call(this, obj);
                }
                break;
        }
    };
    /**
     * 修改参与者
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    /**
     * 修改参与者
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.updateParticipant = /**
     * 修改参与者
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        var e_11, _a, e_12, _b;
        /** @type {?} */
        var performerInfo = obj.propertyValue;
        if (performerInfo.assignStrategy.assignStrategy === AssignmentStrategy.CLAIM
            && userActivity.ParticipantSetting
            && userActivity.ParticipantSetting.automaticPerformers
            && userActivity.ParticipantSetting.automaticPerformers.length > 0) {
            // Utils.postMessage(ResourceKeys.wf_showTip, {
            //     type: 'message',
            //     level: 'warning',
            //     message: '当前节点【参与者选项】已设置自动审批，【分配策略】不允许设置为【领用】'
            // });
        }
        else {
            this.checkOtherAssignNodes(userActivity, performerInfo);
            userActivity.AssignPerformerConfig = null;
            userActivity.AssignmentStrategy = performerInfo.assignStrategy.assignStrategy;
            /** @type {?} */
            var resourceRoles = userActivity.GetResourceRoles();
            if (resourceRoles && resourceRoles.length > 0) {
                resourceRoles.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    if (r instanceof HumanPerformerImpl) {
                        userActivity.RemoveResourceRole(r.Id);
                    }
                    else if (r instanceof PotentialOwnerImpl) {
                        userActivity.RemoveResourceRole(r.Id);
                    }
                }));
            }
            if (performerInfo.humanPerformerList && performerInfo.humanPerformerList.length > 0) {
                try {
                    for (var _c = tslib_1.__values(performerInfo.humanPerformerList), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var humanPerformer = _d.value;
                        switch (humanPerformer.type) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                                break;
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
            if (performerInfo.assignStrategy.assignStrategy === AssignmentStrategy.ASSIGN) {
                /** @type {?} */
                var assignPerformerConfig = new AssignPerformerConfig(userActivity.Model);
                assignPerformerConfig.Operator = performerInfo.assignStrategy.assignConfig.operator;
                assignPerformerConfig.MultiSelect = performerInfo.assignStrategy.assignConfig.multiSelect;
                assignPerformerConfig.Necessary = performerInfo.assignStrategy.assignConfig.necessary;
                assignPerformerConfig.AllowGlobalAssign = performerInfo.isAllScope;
                userActivity.AssignPerformerConfig = assignPerformerConfig;
                if (!performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    try {
                        for (var _e = tslib_1.__values(performerInfo.potentialOwnerList), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var potentialOwner = _f.value;
                            switch (potentialOwner.type) {
                                case UserParticipantExpression.Clr_Type_ID:
                                    this.addUserParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case VariableParticipantExpression.Clr_Type_ID:
                                    this.addVariableParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case PositionParticipantExpression.Clr_Type_ID:
                                    this.addPositionParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case ComponentParticipantExpression.Clr_Type_ID:
                                    this.addComponentParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case ReportingLineParticipantExpression.Clr_Type_ID:
                                    this.addReportingLineParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                    this.addActivityExecutorParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case MatrixParticipantExpression.Clr_Type_ID:
                                    this.addMatrixParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                                case OrganizationParticipantExpression.Clr_Type_ID:
                                    this.addOrganizationParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                    break;
                            }
                        }
                    }
                    catch (e_12_1) { e_12 = { error: e_12_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_12) throw e_12.error; }
                    }
                }
            }
            // 分配策略为领用时，完成策略自动修改为抢占模式
            if (userActivity.AssignmentStrategy === AssignmentStrategy.CLAIM) {
                userActivity.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
                userActivity.CounterSignRules = null;
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} performerInfo
     * @return {?}
     */
    UserActivityCell.prototype.checkOtherAssignNodes = /**
     * @param {?} userActivity
     * @param {?} performerInfo
     * @return {?}
     */
    function (userActivity, performerInfo) {
        if (userActivity.AssignmentStrategy !== AssignmentStrategy.ASSIGN) {
            return;
        }
        /** @type {?} */
        var bpmnModel = userActivity.Model;
        /** @type {?} */
        var flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        if (performerInfo.assignStrategy.assignStrategy !== AssignmentStrategy.ASSIGN) {
            for (var k in flowElements) {
                if (flowElements[k] instanceof UserActivity) {
                    /** @type {?} */
                    var activity = (/** @type {?} */ (flowElements[k]));
                    if (activity.otherAssignNodes && activity.otherAssignNodes.otherAssignActivities
                        && activity.otherAssignNodes.otherAssignActivities.length > 0
                        && activity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        function (id) { return id === userActivity.Id; })) > -1) {
                        activity.otherAssignNodes.otherAssignActivities = activity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        function (id) { return id !== userActivity.Id; }));
                    }
                }
                else if (flowElements[k] instanceof OperationActivity) {
                    /** @type {?} */
                    var operationActivity = (/** @type {?} */ (flowElements[k]));
                    if (operationActivity.otherAssignNodes && operationActivity.otherAssignNodes.otherAssignActivities
                        && operationActivity.otherAssignNodes.otherAssignActivities.length > 0
                        && operationActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        function (id) { return id === userActivity.Id; })) > -1) {
                        operationActivity.otherAssignNodes.otherAssignActivities = operationActivity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        function (id) { return id !== userActivity.Id; }));
                    }
                }
                else if (flowElements[k] instanceof StartActivity) {
                    /** @type {?} */
                    var startActivity = (/** @type {?} */ (flowElements[k]));
                    if (startActivity.otherAssignNodes && startActivity.otherAssignNodes.otherAssignActivities
                        && startActivity.otherAssignNodes.otherAssignActivities.length > 0
                        && startActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        function (id) { return id === userActivity.Id; })) > -1) {
                        startActivity.otherAssignNodes.otherAssignActivities = startActivity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        function (id) { return id !== userActivity.Id; }));
                    }
                }
            }
        }
        else {
            if (userActivity.AssignPerformerConfig.Operator === 'currentUser'
                && performerInfo.assignStrategy.assignConfig.operator !== 'currentUser') {
                for (var k in flowElements) {
                    if (flowElements[k] instanceof UserActivity) {
                        /** @type {?} */
                        var activity = (/** @type {?} */ (flowElements[k]));
                        if (activity.otherAssignNodes && activity.otherAssignNodes.otherAssignActivities
                            && activity.otherAssignNodes.otherAssignActivities.length > 0
                            && activity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id === userActivity.Id; })) > -1) {
                            activity.otherAssignNodes.otherAssignActivities = activity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id !== userActivity.Id; }));
                        }
                    }
                    else if (flowElements[k] instanceof OperationActivity) {
                        /** @type {?} */
                        var operationActivity = (/** @type {?} */ (flowElements[k]));
                        if (operationActivity.otherAssignNodes && operationActivity.otherAssignNodes.otherAssignActivities
                            && operationActivity.otherAssignNodes.otherAssignActivities.length > 0
                            && operationActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id === userActivity.Id; })) > -1) {
                            operationActivity.otherAssignNodes.otherAssignActivities = operationActivity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id !== userActivity.Id; }));
                        }
                    }
                }
            }
            else if (userActivity.AssignPerformerConfig.Operator === 'procInstCreator'
                && performerInfo.assignStrategy.assignConfig.operator !== 'procInstCreator') {
                for (var k in flowElements) {
                    if (flowElements[k] instanceof StartActivity) {
                        /** @type {?} */
                        var startActivity = (/** @type {?} */ (flowElements[k]));
                        if (startActivity.otherAssignNodes && startActivity.otherAssignNodes.otherAssignActivities
                            && startActivity.otherAssignNodes.otherAssignActivities.length > 0
                            && startActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id === userActivity.Id; })) > -1) {
                            startActivity.otherAssignNodes.otherAssignActivities = startActivity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id !== userActivity.Id; }));
                        }
                    }
                }
            }
        }
    };
    /**
     * 添加用户参与者
     * @param userActivity
     * @param performer
     * @param type
     */
    /**
     * 添加用户参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addUserParticipant = /**
     * 添加用户参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, performer, type, scope) {
        /** @type {?} */
        var userParticipant;
        if (performer instanceof UserParticipantExpression) {
            userParticipant = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            userParticipant = new UserParticipantExpression(userActivity.Model, performer.performerId, performer.performerName, performer.orgType);
            userParticipant.id = performer.id;
            userParticipant.OrgId = performer.orgId;
            userParticipant.actionScope = ActionScope.Default;
            userParticipant.OrgName = performer.orgName;
            userParticipant.Tag = performer.tag;
            userParticipant.OrgType = performer.orgType;
            userParticipant.order = performer.order;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                userParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                userParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(userParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * 添加变量参与者
     * @param userActivity
     * @param performer
     * @param type
     */
    /**
     * 添加变量参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addVariableParticipant = /**
     * 添加变量参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, performer, type, scope) {
        /** @type {?} */
        var variablePerformer;
        if (performer instanceof VariableParticipantExpression) {
            variablePerformer = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            variablePerformer = new VariableParticipantExpression(userActivity.Model, performer.performerId, performer.performerName, performer.orgType);
            variablePerformer.id = performer.id;
            variablePerformer.actionScope = ActionScope.Default;
            variablePerformer.Name = performer.performerName ? performer.performerName : performer.name;
            variablePerformer.Tag = performer.tag;
            variablePerformer.VarValue = performer.varValue;
            variablePerformer.VarType = performer.varType;
            variablePerformer.order = performer.order;
            variablePerformer.Relation = performer.relation;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                variablePerformer.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                variablePerformer.actionScope = scope;
                userActivity.dynamicParticipants.push(variablePerformer);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * 添加岗位参与者
     * @param userActivity
     * @param performer
     * @param type
     */
    /**
     * 添加岗位参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addPositionParticipant = /**
     * 添加岗位参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, performer, type, scope) {
        /** @type {?} */
        var posiParticipant;
        if (performer instanceof PositionParticipantExpression) {
            posiParticipant = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            posiParticipant = new PositionParticipantExpression(userActivity.Model, performer.performerId, performer.performerName);
            posiParticipant.id = performer.id;
            posiParticipant.actionScope = ActionScope.Default;
            posiParticipant.PositionType = performer.positionType;
            posiParticipant.order = performer.order;
            if (performer.positionType === '1') {
                posiParticipant.OrgId = performer.orgId;
                posiParticipant.OrgName = performer.orgName;
                posiParticipant.OrgType = performer.orgType;
            }
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                posiParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                posiParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(posiParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * 添加构件参与者
     * @param userActivity
     * @param component
     * @param type
     */
    /**
     * 添加构件参与者
     * @param {?} userActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addComponentParticipant = /**
     * 添加构件参与者
     * @param {?} userActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, component, type, scope) {
        var e_13, _a;
        /** @type {?} */
        var componentParticipant;
        if (component instanceof ComponentParticipantExpression) {
            componentParticipant = component;
        }
        else {
            component = (/** @type {?} */ (component));
            componentParticipant = new ComponentParticipantExpression(userActivity.Model);
            componentParticipant.id = component.id;
            componentParticipant.componentId = component.metadataId;
            componentParticipant.actionScope = ActionScope.Default;
            componentParticipant.componentName = component.name;
            componentParticipant.methodName = component.methodName;
            componentParticipant.order = component.order;
            componentParticipant.methodCode = component.methodCode;
            if (component.actualParameters && component.actualParameters.length > 0) {
                /** @type {?} */
                var actParas = new Array();
                try {
                    for (var _b = tslib_1.__values(component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var para = _c.value;
                        /** @type {?} */
                        var actPara = new ActualParameter(userActivity.Model, para.code, para.value, para.valueText);
                        // TODO:更新参与者会默认把构件参数属性改为contant，临时修复，后续代码优化
                        actPara.Tag = para.tag;
                        if (para.fetchValueMode) {
                            switch (para.fetchValueMode) {
                                case 'express':
                                    actPara.Tag = 'expression';
                                    break;
                                case 'none':
                                    actPara.Tag = 'expression';
                                    break;
                                default:
                                    actPara.Tag = 'constant';
                                    break;
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                catch (e_13_1) { e_13 = { error: e_13_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_13) throw e_13.error; }
                }
                componentParticipant.actualParameters = actParas;
            }
            if (component.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                componentParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = component.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = component.order;
            if (scope) {
                componentParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(componentParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addReportingLineParticipant = /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, participant, type, scope) {
        /** @type {?} */
        var reportingLine;
        if (participant instanceof ReportingLineParticipantExpression) {
            reportingLine = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            reportingLine = new ReportingLineParticipantExpression(userActivity.Model);
            reportingLine.id = participant.id;
            reportingLine.actionScope = ActionScope.Default;
            reportingLine.ReportingLineDefId = participant.reportingLineDefId;
            reportingLine.ReportingLineDefName = participant.reportingLineDefName;
            reportingLine.RefOrgId = participant.refOrgId;
            reportingLine.RefUserId = participant.refUserId;
            reportingLine.RefEmployeeId = participant.refEmployeeId;
            reportingLine.order = participant.order;
            reportingLine.Dimension = participant.dimension;
            reportingLine.Tag = participant.tag;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                reportingLine.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                reportingLine.actionScope = scope;
                userActivity.dynamicParticipants.push(reportingLine);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addActivityExecutorParticipant = /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, participant, type, scope) {
        /** @type {?} */
        var activityExecutor;
        if (participant instanceof ActivityExecutorParticipantExpression) {
            activityExecutor = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            activityExecutor = new ActivityExecutorParticipantExpression(userActivity.Model);
            activityExecutor.id = participant.id;
            activityExecutor.activityDefId = participant.activityDefId;
            activityExecutor.actionScope = ActionScope.Default;
            activityExecutor.order = participant.order;
            activityExecutor.activityDefName = participant.activityDefName;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                activityExecutor.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                activityExecutor.actionScope = scope;
                userActivity.dynamicParticipants.push(activityExecutor);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addMatrixParticipant = /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, participant, type, scope) {
        /** @type {?} */
        var matrix;
        matrix = new MatrixParticipantExpression(userActivity.Model);
        if (participant instanceof MatrixParticipantExpression) {
            matrix = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            matrix = new MatrixParticipantExpression(userActivity.Model);
            matrix.order = participant.order;
            matrix.id = participant.id;
            matrix.actionScope = ActionScope.Default;
            matrix.matrixDefId = participant.matrixDefId;
            matrix.matrixDefName = participant.matrixDefName;
            matrix.conditionField1 = participant.conditionField1;
            matrix.conditionFieldText1 = participant.conditionFieldText1;
            matrix.conditionField2 = participant.conditionField2;
            matrix.conditionFieldText2 = participant.conditionFieldText2;
            matrix.conditionField3 = participant.conditionField3;
            matrix.conditionFieldText3 = participant.conditionFieldText3;
            matrix.multivaluedCondition = participant.multivaluedCondition;
            matrix.dataFieldAlias = participant.dataFieldAlias;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                matrix.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                matrix.actionScope = scope;
                userActivity.dynamicParticipants.push(matrix);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    UserActivityCell.prototype.addOrganizationParticipant = /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (userActivity, participant, type, scope) {
        /** @type {?} */
        var potential;
        if (participant instanceof OrganizationParticipantExpression) {
            potential = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            potential = new OrganizationParticipantExpression(userActivity.Model);
            potential.id = participant.id;
            potential.order = participant.order;
            potential.actionScope = ActionScope.AssignUser;
            // potential.organizationLevel = participant.organizationLevel;
            if (participant.organizationLevel === 'DEPARTMENT') {
                potential.organizationLevel = OrganizationLevel.DEPARTMENT;
            }
            else if (participant.organizationLevel === 'UNIT') {
                potential.organizationLevel = OrganizationLevel.UNIT;
            }
            else if (participant.organizationLevel === 'DEFAULT') {
                potential.organizationLevel = OrganizationLevel.DEFAULT;
            }
            potential.organizationId = participant.organizationId;
            potential.organizationName = participant.organizationName;
            potential.includeChildren = participant.includeChildren;
            potential.tag = participant.tag;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                potential.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                potential.actionScope = scope;
                userActivity.dynamicParticipants.push(potential);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * 修改参与者选项
     * @param userActivity
     * @param obj
     */
    /**
     * 修改参与者选项
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateParticipantOptions = /**
     * 修改参与者选项
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var options = obj.propertyValue;
        if (userActivity.ParticipantSetting != null) {
            userActivity.ParticipantSetting.ExclusionPerformers = options.ExclusionPerformers;
            userActivity.ParticipantSetting.NoPerformerStrategy = options.NoPerformerStrategy;
            userActivity.ParticipantSetting.HistoricFirst = options.HistoricFirst;
            userActivity.ParticipantSetting.automaticPerformers = options.automaticPerformers;
        }
        else {
            /** @type {?} */
            var participantSetting = new ParticipantSetting(userActivity.Model);
            participantSetting.ExclusionPerformers = options.ExclusionPerformers;
            participantSetting.NoPerformerStrategy = options.NoPerformerStrategy;
            participantSetting.HistoricFirst = options.HistoricFirst;
            participantSetting.automaticPerformers = options.automaticPerformers;
            userActivity.ParticipantSetting = participantSetting;
        }
    };
    /**
     * 修改完成策略属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    /**
     * 修改完成策略属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.resetExecuteWorkItemMode = /**
     * 修改完成策略属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        if (userActivity) {
            userActivity.ExecuteWorkItemMode = obj.propertyValue;
            //抢占模式下清空会签规则
            if (userActivity.ExecuteWorkItemMode === ExecuteWorkItemMode.Preempt) {
                userActivity.CounterSignRules = null;
            }
            else {
                // 会签规则不存在时，即由抢占变为会签时，初始化会签规则
                // 并行会签和串行会签之间切换时，不刷新会签规则
                if (!userActivity.CounterSignRules) {
                    userActivity.CounterSignRules = new Array();
                }
                //会签策略时,不允许跳转；且驳回规则不允许动态选择驳回级次(驳回规则目前需要在流程设计器调整)
                userActivity.SelectTargetAble = false;
                userActivity.JumpScope = null;
                // 切换会签策略时，分配策略不能是领用,自动切换为所有
                // 2023-2-9 修复：由于新增了备选办理人，直接指派导致切换时时备选办理人丢失，修改为只有是领用才切到指所有
                if (userActivity.AssignmentStrategy === AssignmentStrategy.CLAIM) {
                    userActivity.AssignmentStrategy = AssignmentStrategy.ALL;
                }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.resetDisplayTerminal = /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        if (userActivity) {
            userActivity.DisplayTerminal = obj.propertyValue;
        }
    };
    /**
     * 更新会签规则属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    /**
     * 更新会签规则属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.resetSignRules = /**
     * 更新会签规则属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        var e_14, _a;
        if (userActivity) {
            /** @type {?} */
            var rules = (/** @type {?} */ (obj.propertyValue));
            userActivity.CounterSignRules = null;
            if (rules && rules.length > 0) {
                userActivity.CounterSignRules = new Array();
                try {
                    for (var rules_1 = tslib_1.__values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                        var rule = rules_1_1.value;
                        /** @type {?} */
                        var counterSignRule = new CounterSignRule(userActivity.Model);
                        /** @type {?} */
                        var condition = new Condition(userActivity.Model);
                        condition.Value = rule.completionCondition;
                        counterSignRule.ConclusionValue = rule.conclusionValue;
                        counterSignRule.CalculateType = rule.calculateType;
                        counterSignRule.ConditionValue = rule.conditionValue;
                        counterSignRule.WaitAllVotes = rule.waitAllVotes;
                        counterSignRule.CompletionCondition = condition;
                        userActivity.CounterSignRules.push(counterSignRule);
                    }
                }
                catch (e_14_1) { e_14 = { error: e_14_1 }; }
                finally {
                    try {
                        if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
                    }
                    finally { if (e_14) throw e_14.error; }
                }
            }
        }
    };
    /**
     * 更新自定义项属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    /**
     * 更新自定义项属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.resetApprovalItems = /**
     * 更新自定义项属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        var e_15, _a;
        if (userActivity) {
            /** @type {?} */
            var conclusions = (/** @type {?} */ (obj.propertyValue));
            userActivity.Conclusions = new Array();
            try {
                for (var conclusions_2 = tslib_1.__values(conclusions), conclusions_2_1 = conclusions_2.next(); !conclusions_2_1.done; conclusions_2_1 = conclusions_2.next()) {
                    var conclusion = conclusions_2_1.value;
                    /** @type {?} */
                    var item = new ConclusionItem(userActivity.Model);
                    item.Value = conclusion.value;
                    item.Text = conclusion.text;
                    item.WorkFlowAction = conclusion.workFlowAction;
                    item.IsDefault = conclusion.isDefault;
                    item.commentNecessary = conclusion.commentNecessary;
                    item.certification = conclusion.certification;
                    item.attachmentNecessary = conclusion.attachmentNecessary;
                    item.signatureNecessary = conclusion.signatureNecessary;
                    item.defaultComment = conclusion.defaultComment;
                    userActivity.Conclusions.push(item);
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (conclusions_2_1 && !conclusions_2_1.done && (_a = conclusions_2.return)) _a.call(conclusions_2);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
        // 判断审批项是否包含驳回？不包含时，驳回规则清空
        if (!this.isBackConclusionExist(userActivity.Conclusions)) {
            userActivity.BackWardRule = null;
        }
        else if (!userActivity.BackWardRule) {
            userActivity.BackWardRule = new BackWardRule(userActivity.Model);
        }
    };
    /**
     * 更新审批活动表单定义属性
     * @param userActivity
     * @param obj
     * @param terminal
     */
    /**
     * 更新审批活动表单定义属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    UserActivityCell.prototype.resetExecuteForm = /**
     * 更新审批活动表单定义属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    function (userActivity, obj, terminal) {
        var e_16, _a;
        if (userActivity) {
            /** @type {?} */
            var form = (/** @type {?} */ (obj.propertyValue));
            if (!userActivity.ExecuteForms) {
                userActivity.ExecuteForms = new Array();
            }
            userActivity.ExecuteForms = userActivity.ExecuteForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType !== terminal; }));
            if (form) {
                /** @type {?} */
                var params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                var actParas = new Array();
                if (params && params.length > 0) {
                    try {
                        for (var params_1 = tslib_1.__values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                            var para = params_1_1.value;
                            /** @type {?} */
                            var actPara = new ActualParameter(userActivity.Model, para.Name, para.Value);
                            if (para.Tag) {
                                actPara.Tag = para.Tag;
                            }
                            else {
                                if (para.Value) {
                                    if (para.Value.length >= 8 && para.Value.slice(0, 8) === "{\"expr\":") {
                                        actPara.Tag = 'expression';
                                    }
                                    else {
                                        actPara.Tag = 'constant';
                                    }
                                }
                                else {
                                    actPara.Tag = 'variable';
                                }
                            }
                            actParas.push(actPara);
                        }
                    }
                    catch (e_16_1) { e_16 = { error: e_16_1 }; }
                    finally {
                        try {
                            if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
                        }
                        finally { if (e_16) throw e_16.error; }
                    }
                }
                /** @type {?} */
                var id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                var item = new ExecuteForm(userActivity.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                userActivity.ExecuteForms.push(item);
            }
        }
    };
    /**
     * 更新是否允许跳转属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    /**
     * 更新是否允许跳转属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.resetSelectTargetAble = /**
     * 更新是否允许跳转属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        /** @type {?} */
        var SelectTargetAble = (/** @type {?} */ (obj.propertyValue));
        userActivity.SelectTargetAble = SelectTargetAble;
        if (userActivity.SelectTargetAble) {
        }
        else {
            userActivity.JumpScope = null;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.resetJumpScope = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data) {
            /** @type {?} */
            var jumpScope = new JumpScope(userActivity.Model);
            jumpScope.Category = data.Category;
            jumpScope.DefaultType = data.DefaultType;
            jumpScope.DestinationActivities = data.DestinationActivities;
            jumpScope.DefaultActivity = data.DefaultActivity;
            userActivity.JumpScope = jumpScope;
        }
        else {
            userActivity.JumpScope = null;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.resetBackWardRule = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        /** @type {?} */
        var backWardRule = new BackWardRule(userActivity.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        userActivity.BackWardRule = backWardRule;
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.resetMultiInstanceLoopCharacteristics = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_17, _a;
        if (obj.propertyValue) {
            /** @type {?} */
            var data = obj.propertyValue;
            /** @type {?} */
            var loopCharacteristics = new MultiInstanceLoopCharacteristics(userActivity.Model);
            loopCharacteristics.enable = data.enable;
            loopCharacteristics.sequential = data.sequential;
            loopCharacteristics.loopCardinality = new Expression(userActivity.Model);
            if (data.loopCardinality) {
                /** @type {?} */
                var variableExpression = new SemanticExpression(userActivity.Model);
                variableExpression.Value = data.loopCardinality;
                loopCharacteristics.loopCardinality.MexExpression = variableExpression;
            }
            loopCharacteristics.completionCondition = data.completionCondition;
            /** @type {?} */
            var rules = (/** @type {?} */ (data.completionConditionRules));
            loopCharacteristics.completionConditionRules = null;
            if (rules && rules.length > 0) {
                loopCharacteristics.completionConditionRules = new Array();
                try {
                    for (var rules_2 = tslib_1.__values(rules), rules_2_1 = rules_2.next(); !rules_2_1.done; rules_2_1 = rules_2.next()) {
                        var rule = rules_2_1.value;
                        /** @type {?} */
                        var counterSignRule = new CounterSignRule(userActivity.Model);
                        /** @type {?} */
                        var condition = new Condition(userActivity.Model);
                        condition.Value = rule.CompletionCondition.Value;
                        counterSignRule.ConclusionValue = rule.ConclusionValue;
                        counterSignRule.CalculateType = rule.CalculateType;
                        counterSignRule.ConditionValue = rule.ConditionValue;
                        counterSignRule.WaitAllVotes = rule.WaitAllVotes;
                        counterSignRule.CompletionCondition = condition;
                        loopCharacteristics.completionConditionRules.push(counterSignRule);
                    }
                }
                catch (e_17_1) { e_17 = { error: e_17_1 }; }
                finally {
                    try {
                        if (rules_2_1 && !rules_2_1.done && (_a = rules_2.return)) _a.call(rules_2);
                    }
                    finally { if (e_17) throw e_17.error; }
                }
            }
            userActivity.LoopCharacteristics = loopCharacteristics;
        }
    };
    /**
     * 更新活动节点标题
     * @param userActivity
     * @param obj
     */
    /**
     * 更新活动节点标题
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.modifyTitleExpression = /**
     * 更新活动节点标题
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        if (userActivity.taskTitle) {
            userActivity.taskTitle.valueLanguage = obj.propertyValue;
            userActivity.taskTitle.value = obj.propertyValue['zh-CHS'];
        }
        else {
            /** @type {?} */
            var title = new TitleExpression(userActivity.Model, obj.propertyValue['zh-CHS'], obj.propertyValue);
            userActivity.taskTitle = title;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.resetTools = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_18, _a, e_19, _b;
        /** @type {?} */
        var tools = (/** @type {?} */ (obj.propertyValue));
        userActivity.Tools = new Array();
        if (tools && tools.length > 0) {
            try {
                for (var tools_1 = tslib_1.__values(tools), tools_1_1 = tools_1.next(); !tools_1_1.done; tools_1_1 = tools_1.next()) {
                    var tool = tools_1_1.value;
                    /** @type {?} */
                    var component = new Component(userActivity.Model);
                    component.Id = tool.id;
                    component.Name = tool.name;
                    component.Time = tool.executionTime;
                    // TODO 写死了构件类型
                    component.ComponentType = 'WebServiceComponent';
                    component.MetadataId = tool.metadataId;
                    component.MethodCode = tool.methodCode;
                    component.isForCompensation = tool.isForCompensation;
                    component.ActualParameters = [];
                    if (tool.actualParameters && ((/** @type {?} */ (tool.actualParameters))).length > 0) {
                        try {
                            for (var _c = tslib_1.__values(((/** @type {?} */ (tool.actualParameters)))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var a = _d.value;
                                /** @type {?} */
                                var parameter = new ActualParameter(userActivity.Model, a.code, a.value);
                                component.ActualParameters.push(parameter);
                            }
                        }
                        catch (e_19_1) { e_19 = { error: e_19_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_19) throw e_19.error; }
                        }
                    }
                    userActivity.Tools.push(component);
                }
            }
            catch (e_18_1) { e_18 = { error: e_18_1 }; }
            finally {
                try {
                    if (tools_1_1 && !tools_1_1.done && (_a = tools_1.return)) _a.call(tools_1);
                }
                finally { if (e_18) throw e_18.error; }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateSignFrontSet = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_20, _a;
        /** @type {?} */
        var scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return ((/** @type {?} */ (p))).actionScope !== ActionScope.AddSignFront; }));
        userActivity.AddSignFrontAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                var organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.AddSignFront;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                var performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    try {
                        for (var _b = tslib_1.__values(performerInfo.potentialOwnerList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var potentialOwner = _c.value;
                            switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                                case UserParticipantExpression.Clr_Type_ID:
                                    this.addUserParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case VariableParticipantExpression.Clr_Type_ID:
                                    this.addVariableParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case PositionParticipantExpression.Clr_Type_ID:
                                    this.addPositionParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case ComponentParticipantExpression.Clr_Type_ID:
                                    this.addComponentParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case ReportingLineParticipantExpression.Clr_Type_ID:
                                    this.addReportingLineParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                    this.addActivityExecutorParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case MatrixParticipantExpression.Clr_Type_ID:
                                    this.addMatrixParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                                case OrganizationParticipantExpression.Clr_Type_ID:
                                    this.addOrganizationParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                    break;
                            }
                        }
                    }
                    catch (e_20_1) { e_20 = { error: e_20_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_20) throw e_20.error; }
                    }
                }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateSignBehindsSet = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_21, _a;
        /** @type {?} */
        var scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return ((/** @type {?} */ (p))).actionScope !== ActionScope.AddSignBehind; }));
        userActivity.AddSignBehindAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                var organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.AddSignBehind;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                var performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    try {
                        for (var _b = tslib_1.__values(performerInfo.potentialOwnerList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var potentialOwner = _c.value;
                            switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                                case UserParticipantExpression.Clr_Type_ID:
                                    this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case VariableParticipantExpression.Clr_Type_ID:
                                    this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case PositionParticipantExpression.Clr_Type_ID:
                                    this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case ComponentParticipantExpression.Clr_Type_ID:
                                    this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case ReportingLineParticipantExpression.Clr_Type_ID:
                                    this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                    this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case MatrixParticipantExpression.Clr_Type_ID:
                                    this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                                case OrganizationParticipantExpression.Clr_Type_ID:
                                    this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                    break;
                            }
                        }
                    }
                    catch (e_21_1) { e_21 = { error: e_21_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_21) throw e_21.error; }
                    }
                }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateNotifySet = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_22, _a;
        /** @type {?} */
        var scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return ((/** @type {?} */ (p))).actionScope !== ActionScope.Notify; }));
        userActivity.NotifyAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                var organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Notify;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                var performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    try {
                        for (var _b = tslib_1.__values(performerInfo.potentialOwnerList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var potentialOwner = _c.value;
                            switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                                case UserParticipantExpression.Clr_Type_ID:
                                    this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case VariableParticipantExpression.Clr_Type_ID:
                                    this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case PositionParticipantExpression.Clr_Type_ID:
                                    this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case ComponentParticipantExpression.Clr_Type_ID:
                                    this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case ReportingLineParticipantExpression.Clr_Type_ID:
                                    this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                    this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case MatrixParticipantExpression.Clr_Type_ID:
                                    this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case OrganizationParticipantExpression.Clr_Type_ID:
                                    this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                            }
                        }
                    }
                    catch (e_22_1) { e_22 = { error: e_22_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_22) throw e_22.error; }
                    }
                }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateTransferScope = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_23, _a;
        /** @type {?} */
        var scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return ((/** @type {?} */ (p))).actionScope !== ActionScope.Transfer; }));
        userActivity.transferAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                var organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Transfer;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                var performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    try {
                        for (var _b = tslib_1.__values(performerInfo.potentialOwnerList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var potentialOwner = _c.value;
                            switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                                case UserParticipantExpression.Clr_Type_ID:
                                    this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case VariableParticipantExpression.Clr_Type_ID:
                                    this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case PositionParticipantExpression.Clr_Type_ID:
                                    this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case ComponentParticipantExpression.Clr_Type_ID:
                                    this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case ReportingLineParticipantExpression.Clr_Type_ID:
                                    this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                    this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case MatrixParticipantExpression.Clr_Type_ID:
                                    this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                                case OrganizationParticipantExpression.Clr_Type_ID:
                                    this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                    break;
                            }
                        }
                    }
                    catch (e_23_1) { e_23 = { error: e_23_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_23) throw e_23.error; }
                    }
                }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateTimeLimitControl = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_24, _a, e_25, _b;
        /** @type {?} */
        var timeLimitInfo = (/** @type {?} */ (obj.propertyValue));
        userActivity.timeLimitControl = null;
        if (timeLimitInfo) {
            /** @type {?} */
            var control = new TimeLimitControl(userActivity.Model);
            control.enable = timeLimitInfo.enable;
            control.tag = timeLimitInfo.tag;
            control.dueTime = timeLimitInfo.dueTime;
            control.timeUnit = timeLimitInfo.timeUnit;
            control.expireOperations = new Array();
            if (timeLimitInfo.expireOperations && timeLimitInfo.expireOperations.length > 0) {
                try {
                    for (var _c = tslib_1.__values(timeLimitInfo.expireOperations), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var o = _d.value;
                        if (o.operationTypeName === 'SendMessageExpireOperation' || !o.operationTypeName) {
                            /** @type {?} */
                            var entity = (/** @type {?} */ (o));
                            /** @type {?} */
                            var sendMessage = new SendMessageExpireOperation(userActivity.Model);
                            sendMessage.id = BpmnModelHelper.GenerateElementId();
                            sendMessage.durationType = (/** @type {?} */ (entity.durationType));
                            sendMessage.timeDuration = entity.timeDuration;
                            sendMessage.timeUnit = entity.timeUnit;
                            sendMessage.message = entity.message;
                            sendMessage.subject = entity.subject;
                            sendMessage.sendType = entity.sendType;
                            sendMessage.receiver = entity.receiver;
                            sendMessage.cycleEnable = entity.cycleEnable;
                            sendMessage.cycleTime = entity.cycleTime;
                            sendMessage.cycleTimeUnit = entity.cycleTimeUnit;
                            sendMessage.operationTypeName = entity.operationTypeName ? entity.operationTypeName : 'SendMessageExpireOperation';
                            if (entity.smsMessageTemplate) {
                                /** @type {?} */
                                var smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
                                smsMessageTemplate.code = entity.smsMessageTemplate.code;
                                smsMessageTemplate.content = entity.smsMessageTemplate.content;
                                smsMessageTemplate.smsMessageVariables = new Array();
                                if (entity.smsMessageTemplate.smsMessageVariables && entity.smsMessageTemplate.smsMessageVariables.length > 0) {
                                    try {
                                        for (var _e = tslib_1.__values(entity.smsMessageTemplate.smsMessageVariables), _f = _e.next(); !_f.done; _f = _e.next()) {
                                            var v = _f.value;
                                            /** @type {?} */
                                            var variable = new SmsMessageVariable(userActivity.Model);
                                            variable.code = v.code;
                                            variable.value = v.value;
                                            variable.tag = v.tag;
                                            smsMessageTemplate.smsMessageVariables.push(variable);
                                        }
                                    }
                                    catch (e_25_1) { e_25 = { error: e_25_1 }; }
                                    finally {
                                        try {
                                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                        }
                                        finally { if (e_25) throw e_25.error; }
                                    }
                                }
                                sendMessage.smsMessageTemplate = smsMessageTemplate;
                            }
                            control.expireOperations.push(sendMessage);
                        }
                        else if (o.operationTypeName === 'AutoHandleExpireOperation') {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var autoHandle = new AutoHandleExpireOperation(userActivity.Model);
                            autoHandle.id = o.id;
                            autoHandle.durationType = operation.durationType;
                            autoHandle.timeDuration = operation.timeDuration;
                            autoHandle.timeUnit = operation.timeUnit;
                            autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                            autoHandle.autoHandleType = operation.autoHandleType;
                            autoHandle.message = operation.message;
                            control.expireOperations.push(autoHandle);
                        }
                    }
                }
                catch (e_24_1) { e_24 = { error: e_24_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_24) throw e_24.error; }
                }
            }
            userActivity.timeLimitControl = control;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateAnonymousSet = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var anonymousSet = obj.propertyValue;
        if (anonymousSet) {
            userActivity.anonymous = anonymousSet.isAnonymity;
            userActivity.anonymousText = anonymousSet.anonymous;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateCustomizeActions = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_26, _a, e_27, _b;
        /** @type {?} */
        var actions = (/** @type {?} */ (obj.propertyValue));
        userActivity.customizeActions = new Array();
        if (actions && actions.length > 0) {
            try {
                for (var actions_1 = tslib_1.__values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
                    var a = actions_1_1.value;
                    /** @type {?} */
                    var action = new CustomizeAction(userActivity.Model);
                    action.id = BpmnModelHelper.GenerateElementId();
                    action.code = a.code;
                    action.name = a.name;
                    action.terminalType = a.terminalType;
                    action.actualParameters = [];
                    if (a.actualParameters && a.actualParameters.length > 0) {
                        try {
                            for (var _c = tslib_1.__values(a.actualParameters), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var p = _d.value;
                                /** @type {?} */
                                var parameter = new ActualParameter(userActivity.Model, p.Name, p.Value, p.ValueText, p.Tag || 'expression');
                                action.actualParameters.push(parameter);
                            }
                        }
                        catch (e_27_1) { e_27 = { error: e_27_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_27) throw e_27.error; }
                        }
                    }
                    userActivity.customizeActions.push(action);
                }
            }
            catch (e_26_1) { e_26 = { error: e_26_1 }; }
            finally {
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_26) throw e_26.error; }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateVariableSettings = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_28, _a, e_29, _b, e_30, _c;
        /** @type {?} */
        var bpmnModel = userActivity.Model;
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (userActivity.variableSettings && userActivity.variableSettings.length > 0) {
            var _loop_1 = function (v) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    var i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return (e instanceof Component && e.Id === v.value); }));
                    extendElements.splice(i, 1);
                }
            };
            try {
                for (var _d = tslib_1.__values(userActivity.variableSettings), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var v = _e.value;
                    _loop_1(v);
                }
            }
            catch (e_28_1) { e_28 = { error: e_28_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_28) throw e_28.error; }
            }
        }
        userActivity.variableSettings = new Array();
        /** @type {?} */
        var variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var v = variables_1_1.value;
                    /** @type {?} */
                    var variableSetting = new VariableSetting(bpmnModel);
                    variableSetting.variableCode = v.variableCode;
                    variableSetting.variableName = v.variableName;
                    variableSetting.tag = v.tag;
                    variableSetting.executionTime = v.executionTime;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    userActivity.variableSettings.push(variableSetting);
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        var c = v.component;
                        if (c) {
                            /** @type {?} */
                            var cpt = new Component(bpmnModel);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                try {
                                    for (var _f = tslib_1.__values(c.ActualParameters), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        var a = _g.value;
                                        /** @type {?} */
                                        var parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                        parameter.Tag = a.Tag;
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                catch (e_30_1) { e_30 = { error: e_30_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                    }
                                    finally { if (e_30) throw e_30.error; }
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
            }
            catch (e_29_1) { e_29 = { error: e_29_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_29) throw e_29.error; }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateImageSettings = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var Settings = (/** @type {?} */ (obj.propertyValue));
        if (userActivity.imageSettings) {
            userActivity.imageSettings = new ImageSettings(userActivity.Model);
        }
        if (Settings && Settings.imageOperation) {
            /** @type {?} */
            var imageSettings = new ImageSettings(userActivity.Model);
            imageSettings.imageOperation = Settings.imageOperation;
            userActivity.imageSettings = imageSettings;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    UserActivityCell.prototype.updateCheckConditions = /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    function (userActivity, obj, isOperation) {
        if (isOperation === void 0) { isOperation = false; }
        var e_31, _a;
        /** @type {?} */
        var checkConditions = (/** @type {?} */ (obj.propertyValue));
        userActivity.checkConditions = new Array();
        try {
            for (var checkConditions_1 = tslib_1.__values(checkConditions), checkConditions_1_1 = checkConditions_1.next(); !checkConditions_1_1.done; checkConditions_1_1 = checkConditions_1.next()) {
                var c = checkConditions_1_1.value;
                if (c.value) {
                    /** @type {?} */
                    var condition = new CheckCondition(userActivity.Model);
                    condition.value = c.value;
                    condition.checkTime = c.checkTime;
                    condition.errorTips = new Map();
                    if (c.errorTips) {
                        for (var key in c.errorTips) {
                            condition.errorTips.set(key, c.errorTips[key]);
                        }
                    }
                    userActivity.checkConditions.push(condition);
                }
            }
        }
        catch (e_31_1) { e_31 = { error: e_31_1 }; }
        finally {
            try {
                if (checkConditions_1_1 && !checkConditions_1_1.done && (_a = checkConditions_1.return)) _a.call(checkConditions_1);
            }
            finally { if (e_31) throw e_31.error; }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateOtherAssignNodes = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data) {
            // const otherAssignNodes = new OtherAssignNodes(userActivity.Model);
            // otherAssignNodes.otherAssignActivities = new Array();
            // userActivity.otherAssignNodes = otherAssignNodes;
            userActivity.otherAssignNodes = new OtherAssignNodes(userActivity.Model);
        }
        else {
            userActivity.otherAssignNodes = null;
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateOtherAssignActivities = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data && data.length > 0) {
            if (typeof data[0] === "string") {
                userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var other = new OtherAssignActivityNodeInfo(userActivity.Model);
                    other.activityDefinitionId = d;
                    other.required = false;
                    other.condition = new Condition(userActivity.Model);
                    userActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            else {
                userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var other = new OtherAssignActivityNodeInfo(userActivity.Model);
                    other.activityDefinitionId = d.activityDefinitionId;
                    other.required = d.required;
                    other.condition = new Condition(userActivity.Model);
                    other.condition.Value = d.condition.Value;
                    userActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            // userActivity.otherAssignNodes.otherAssignActivities = [...data];
        }
        else {
            userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateMessageNotices = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_32, _a, e_33, _b, e_34, _c, e_35, _d;
        /** @type {?} */
        var notices = (/** @type {?} */ (obj.propertyValue));
        userActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            try {
                for (var notices_1 = tslib_1.__values(notices), notices_1_1 = notices_1.next(); !notices_1_1.done; notices_1_1 = notices_1.next()) {
                    var n = notices_1_1.value;
                    /** @type {?} */
                    var messageNotice = new MessageNotice(userActivity.Model);
                    messageNotice.sendType = n.sendType;
                    messageNotice.sendTime = n.sendTime;
                    messageNotice.subject = n.subject;
                    messageNotice.content = n.content;
                    n.receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r.type; }));
                    if (n.receivers && n.receivers.length > 0) {
                        /** @type {?} */
                        var receivers = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'userParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant'); }));
                        /** @type {?} */
                        var participants = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'variableParticipant' || r.type === 'positionParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant'); }));
                        if (receivers && receivers.length > 0) {
                            /** @type {?} */
                            var receiver = '';
                            /** @type {?} */
                            var receiverName = '';
                            try {
                                for (var receivers_1 = tslib_1.__values(receivers), receivers_1_1 = receivers_1.next(); !receivers_1_1.done; receivers_1_1 = receivers_1.next()) {
                                    var r = receivers_1_1.value;
                                    if (r.type === 'processParticipant') {
                                        receiver += (r.processParticipant + ',');
                                        if (r.processParticipant === 'procInstCreator') {
                                            receiverName += '流程发起人,';
                                        }
                                        else if (r.processParticipant === 'workItemParticipant') {
                                            receiverName += '任务接收人,';
                                        }
                                    }
                                    else if (r.type === 'userParticipant') {
                                        receiver += (r.userIds + ',');
                                        receiverName += (r.userNames + ',');
                                    }
                                }
                            }
                            catch (e_33_1) { e_33 = { error: e_33_1 }; }
                            finally {
                                try {
                                    if (receivers_1_1 && !receivers_1_1.done && (_b = receivers_1.return)) _b.call(receivers_1);
                                }
                                finally { if (e_33) throw e_33.error; }
                            }
                            if (receiver) {
                                receiver = receiver.substring(0, receiver.length - 1);
                            }
                            if (receiverName) {
                                receiverName = receiverName.substring(0, receiverName.length - 1);
                            }
                            messageNotice.receiver = receiver;
                            messageNotice.receiverText = receiverName;
                        }
                        if (participants && participants.length > 0) {
                            /** @type {?} */
                            var receiverExpressions = new Array();
                            try {
                                for (var participants_1 = tslib_1.__values(participants), participants_1_1 = participants_1.next(); !participants_1_1.done; participants_1_1 = participants_1.next()) {
                                    var p = participants_1_1.value;
                                    if (p.type === 'processParticipant') {
                                        /** @type {?} */
                                        var activityExecutor = new ActivityExecutorParticipantExpression(userActivity.Model);
                                        activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                        activityExecutor.activityDefId = p.activityDefId;
                                        activityExecutor.activityDefName = p.activityDefName;
                                        receiverExpressions.push(activityExecutor);
                                    }
                                    if (p.type === 'variableParticipant') {
                                        /** @type {?} */
                                        var variableParticipant = new UserParticipantExpression(userActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                        variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                        variableParticipant.Tag = 'expression';
                                        variableParticipant.OrgType = p.orgType;
                                        receiverExpressions.push(variableParticipant);
                                    }
                                    if (p.type === 'positionParticipant') {
                                        /** @type {?} */
                                        var posiParticipant = new PositionParticipantExpression(userActivity.Model, p.positionId, p.positionName);
                                        posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                        posiParticipant.PositionType = p.positionType;
                                        if (p.positionType === '1') {
                                            posiParticipant.OrgId = p.orgId;
                                            posiParticipant.OrgType = p.orgType;
                                        }
                                        receiverExpressions.push(posiParticipant);
                                    }
                                }
                            }
                            catch (e_34_1) { e_34 = { error: e_34_1 }; }
                            finally {
                                try {
                                    if (participants_1_1 && !participants_1_1.done && (_c = participants_1.return)) _c.call(participants_1);
                                }
                                finally { if (e_34) throw e_34.error; }
                            }
                            messageNotice.receiverExpressions = receiverExpressions;
                        }
                    }
                    if (n.smsMessageTemplate) {
                        /** @type {?} */
                        var smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
                        smsMessageTemplate.code = n.smsMessageTemplate.code;
                        smsMessageTemplate.content = n.smsMessageTemplate.content;
                        smsMessageTemplate.smsMessageVariables = new Array();
                        if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                            try {
                                for (var _e = tslib_1.__values(n.smsMessageTemplate.smsMessageVariables), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var v = _f.value;
                                    /** @type {?} */
                                    var variable = new SmsMessageVariable(userActivity.Model);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            catch (e_35_1) { e_35 = { error: e_35_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
                                }
                                finally { if (e_35) throw e_35.error; }
                            }
                        }
                        messageNotice.smsMessageTemplate = smsMessageTemplate;
                    }
                    userActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_32_1) { e_32 = { error: e_32_1 }; }
            finally {
                try {
                    if (notices_1_1 && !notices_1_1.done && (_a = notices_1.return)) _a.call(notices_1);
                }
                finally { if (e_32) throw e_32.error; }
            }
        }
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateApprovalPivotConfig = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_36, _a;
        /** @type {?} */
        var config = obj.propertyValue;
        /** @type {?} */
        var approvalPivotConfig = new ApprovalPivotConfig(userActivity.Model);
        approvalPivotConfig.enable = config.enable;
        approvalPivotConfig.expand = config.expand;
        approvalPivotConfig.title = config.title;
        approvalPivotConfig.approvalPivots = new Array();
        if (config.approvalPivots && config.approvalPivots.length > 0) {
            try {
                for (var _b = tslib_1.__values(config.approvalPivots), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    /** @type {?} */
                    var approvalPivot = new ApprovalPivot(userActivity.Model);
                    approvalPivot.type = a.type;
                    approvalPivot.title = a.title;
                    approvalPivot.description = a.description;
                    if (a.condition) {
                        /** @type {?} */
                        var condition = new Condition(userActivity.Model);
                        condition.Value = a.condition;
                        approvalPivot.condition = condition;
                    }
                    approvalPivotConfig.approvalPivots.push(approvalPivot);
                }
            }
            catch (e_36_1) { e_36 = { error: e_36_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_36) throw e_36.error; }
            }
        }
        userActivity.approvalPivotConfig = approvalPivotConfig;
    };
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.updateUrgeHandleRule = /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_37, _a;
        /** @type {?} */
        var rule = obj.propertyValue;
        /** @type {?} */
        var urgeHandleRule = new UrgeHandleRule(userActivity.Model);
        urgeHandleRule.urgeHandleAble = rule.urgeHandleAble;
        urgeHandleRule.sendType = rule.sendType;
        urgeHandleRule.earlyTime = rule.earlyTime;
        urgeHandleRule.intervalTime = rule.intervalTime;
        urgeHandleRule.urgeMessageSubject = rule.urgeMessageSubject;
        urgeHandleRule.urgeMessageContent = rule.urgeMessageContent;
        urgeHandleRule.addReminder = rule.addReminder;
        urgeHandleRule.subjectEditable = rule.subjectEditable;
        urgeHandleRule.contentEditable = rule.contentEditable;
        if (rule.smsMessageTemplate) {
            /** @type {?} */
            var smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
            smsMessageTemplate.code = rule.smsMessageTemplate.code;
            smsMessageTemplate.content = rule.smsMessageTemplate.content;
            smsMessageTemplate.smsMessageVariables = new Array();
            if (rule.smsMessageTemplate.smsMessageVariables && rule.smsMessageTemplate.smsMessageVariables.length > 0) {
                try {
                    for (var _b = tslib_1.__values(rule.smsMessageTemplate.smsMessageVariables), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var v = _c.value;
                        /** @type {?} */
                        var variable = new SmsMessageVariable(userActivity.Model);
                        variable.code = v.code;
                        variable.value = v.value;
                        variable.tag = v.tag;
                        smsMessageTemplate.smsMessageVariables.push(variable);
                    }
                }
                catch (e_37_1) { e_37 = { error: e_37_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_37) throw e_37.error; }
                }
            }
            urgeHandleRule.smsMessageTemplate = smsMessageTemplate;
        }
        userActivity.urgeHandleRule = urgeHandleRule;
    };
    /**
     * 删除节点或参与者时，对应删除HumanResourceRoles
     * @param bpmnModel
     * @param ids
     */
    /**
     * 删除节点或参与者时，对应删除HumanResourceRoles
     * @param {?} ids
     * @return {?}
     */
    UserActivityCell.prototype.removeHumanResourceRoles = /**
     * 删除节点或参与者时，对应删除HumanResourceRoles
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var bpmnModel = this.flowElement.Model;
        if (ids && ids.length > 0) {
            /** @type {?} */
            var userActivitys = bpmnModel.DefaultProcess.GetFlowElements();
            /** @type {?} */
            var perfIds_1 = '';
            for (var key in userActivitys) {
                if (userActivitys[key] instanceof UserActivity) {
                    /** @type {?} */
                    var userAct = (/** @type {?} */ (userActivitys[key]));
                    if (userAct.ParticipantSchemes && userAct.ParticipantSchemes.length > 0 && userAct.ParticipantSchemes[0].Performers) {
                        perfIds_1 += (userAct.ParticipantSchemes[0].Performers + ',');
                    }
                }
            }
            /** @type {?} */
            var removeIds = ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return perfIds_1.indexOf(id) < 0; }));
            removeIds.forEach((/**
             * @param {?} reId
             * @return {?}
             */
            function (reId) {
                bpmnModel.DefaultProcess.RemoveResourceRole(reId);
            }));
        }
    };
    /**
     * 更新审批活动扩展属性
     * @param userActivity
     * @param obj
     */
    /**
     * 更新审批活动扩展属性
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    UserActivityCell.prototype.resetExtendProperty = /**
     * 更新审批活动扩展属性
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    function (userActivity, obj) {
        var e_38, _a;
        if (userActivity) {
            /** @type {?} */
            var attributes = (/** @type {?} */ (obj.propertyValue));
            if (!userActivity.extendProperties) {
                userActivity.extendProperties = new Array();
            }
            var _loop_2 = function (o) {
                /** @type {?} */
                var index = userActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.key === o.code; }));
                if (index > -1) {
                    userActivity.extendProperties.splice(index, 1);
                }
            };
            try {
                for (var _b = tslib_1.__values(obj.propertyValue), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var o = _c.value;
                    _loop_2(o);
                }
            }
            catch (e_38_1) { e_38 = { error: e_38_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_38) throw e_38.error; }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    /** @type {?} */
                    var item = new ExtendProperty(userActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    userActivity.extendProperties.push(item);
                }));
            }
        }
    };
    UserActivityCell.CLR_TYPE_ID = UserActivity.Clr_Type_ID;
    return UserActivityCell;
}(NodeCell));
export { UserActivityCell };
if (false) {
    /** @type {?} */
    UserActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    UserActivityCell.prototype.clrTypeId;
    /** @type {?} */
    UserActivityCell.prototype.name;
    /** @type {?} */
    UserActivityCell.prototype.nameLanguage;
    /** @type {?} */
    UserActivityCell.prototype.flowElement;
    /** @type {?} */
    UserActivityCell.prototype.editorUi;
    /** @type {?} */
    UserActivityCell.prototype.imgUrls;
    /** @type {?} */
    UserActivityCell.prototype.bizActivity;
}
//# sourceMappingURL=data:application/json;base64,