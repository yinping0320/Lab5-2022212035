/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { Signal } from "@edp-pmf/bpmn-model";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { IntermediateCatchEventImpl, Component, BackWardRule, ActualParameter, VariableSetting, SignalEventDefinitionImpl } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { IntermediateCatchEventImplPropertyKeys } from "./property-keys/IntermediateCatchEventImplPropertyKeys";
/**
 * 信号捕获活动节点
 */
var IntermediateCatchEventImplCell = /** @class */ (function (_super) {
    tslib_1.__extends(IntermediateCatchEventImplCell, _super);
    function IntermediateCatchEventImplCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = IntermediateCatchEventImplCell.CLR_TYPE_ID;
        _this.name = "信号捕获";
        _this.nameLanguage = {
            "zh-CHS": "信号捕获",
            "zh-CHT": "訊號捕獲",
            "en": "Acquisition",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/catchEvent.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/catchEvent_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        flowNode.Id = "IntermediateCatchEvent" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.initEventDefinitions();
        }
        return flowNode;
    };
    /**
     * @param {?=} flowElt
     * @param {?=} diagElt
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.bindBpmnModel = /**
     * @param {?=} flowElt
     * @param {?=} diagElt
     * @return {?}
     */
    function (flowElt, diagElt) {
        _super.prototype.bindBpmnModel.call(this, flowElt, diagElt);
        /** @type {?} */
        var bpmnModel = this.editorUi.graph.bpmnModel;
        this.addSignals(this.flowElement);
    };
    /**
     * @param {?} catchEvent
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.addSignals = /**
     * @param {?} catchEvent
     * @return {?}
     */
    function (catchEvent) {
        var e_1, _a;
        /** @type {?} */
        var bpmnModel = catchEvent.Model;
        if (catchEvent.EventDefinitions && catchEvent.EventDefinitions.length > 0) {
            if (!bpmnModel.signals) {
                bpmnModel.signals = [];
            }
            var _loop_1 = function (e) {
                /** @type {?} */
                var event_1 = (/** @type {?} */ (e));
                if (bpmnModel.signals.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) { return s.Name === event_1.SignalRef; })) === -1) {
                    /** @type {?} */
                    var signal = new Signal(bpmnModel);
                    signal.Name = event_1.SignalRef;
                    bpmnModel.signals.push(signal);
                }
            };
            try {
                for (var _b = tslib_1.__values(catchEvent.EventDefinitions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var e = _c.value;
                    _loop_1(e);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var act = this.flowElement;
        /** @type {?} */
        var basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        var activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: IntermediateCatchEventImplPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: IntermediateCatchEventImplPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: IntermediateCatchEventImplPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: IntermediateCatchEventImplPropertyKeys.EventDefinitions, propertyName: mxResources.get('eventDefinitions'), propertyType: 'modal' },
            { propertyID: IntermediateCatchEventImplPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        if (act.EventDefinitions && this.isBackEventExist(act.EventDefinitions)) {
            activityProperty.properties.push({ propertyID: IntermediateCatchEventImplPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' });
            propertyData[IntermediateCatchEventImplPropertyKeys.BackWardRule] = act.backWardRule;
        }
        propertyData[IntermediateCatchEventImplPropertyKeys.Id] = act.Id;
        propertyData[IntermediateCatchEventImplPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[IntermediateCatchEventImplPropertyKeys.Name] = act.Name;
        propertyData[IntermediateCatchEventImplPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[IntermediateCatchEventImplPropertyKeys.EventDefinitions] = act.EventDefinitions;
        propertyData[IntermediateCatchEventImplPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    };
    /**
     * 判断是否存在反向事件
     * @param
     */
    /**
     * 判断是否存在反向事件
     * @param {?} events
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.isBackEventExist = /**
     * 判断是否存在反向事件
     * @param {?} events
     * @return {?}
     */
    function (events) {
        var e_2, _a;
        try {
            for (var events_1 = tslib_1.__values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                var e = events_1_1.value;
                /** @type {?} */
                var event_2 = (/** @type {?} */ (e));
                if (event_2.triggerAction === 'Back') {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var catchEvent = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case IntermediateCatchEventImplPropertyKeys.EventDefinitions:
                this.updateEventDefinitions(catchEvent, obj);
                break;
            case IntermediateCatchEventImplPropertyKeys.BackWardRule:
                this.updateBackWardRule(catchEvent, obj);
                break;
            case IntermediateCatchEventImplPropertyKeys.variableSettings:
                this.updateVariableSettings(catchEvent, obj);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.updateEventDefinitions = /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    function (catchEvent, obj) {
        var e_3, _a;
        if (catchEvent) {
            this.removeSignals(catchEvent);
            /** @type {?} */
            var events = (/** @type {?} */ (obj.propertyValue));
            catchEvent.EventDefinitions = new Array();
            try {
                for (var events_2 = tslib_1.__values(events), events_2_1 = events_2.next(); !events_2_1.done; events_2_1 = events_2.next()) {
                    var e = events_2_1.value;
                    /** @type {?} */
                    var item = new SignalEventDefinitionImpl(catchEvent.Model);
                    item.name = e.name;
                    item.triggerAction = e.triggerAction;
                    item.Async = false;
                    item.SignalRef = e.SignalRef;
                    catchEvent.EventDefinitions.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (events_2_1 && !events_2_1.done && (_a = events_2.return)) _a.call(events_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.addSignals(catchEvent);
        }
        // 判断审批项是否包含驳回？不包含时，驳回规则清空
        if (!this.isBackEventExist(catchEvent.EventDefinitions)) {
            catchEvent.backWardRule = null;
        }
        else if (!catchEvent.backWardRule) {
            catchEvent.backWardRule = new BackWardRule(catchEvent.Model);
        }
        // 更新属性框
        // Utils.postMessage(ResourceKeys.wf_showProperty, this.getPropConfig());
    };
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.updateBackWardRule = /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    function (catchEvent, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        /** @type {?} */
        var backWardRule = new BackWardRule(catchEvent.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        catchEvent.backWardRule = backWardRule;
    };
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.updateVariableSettings = /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    function (catchEvent, obj) {
        var e_4, _a, e_5, _b, e_6, _c;
        /** @type {?} */
        var bpmnModel = catchEvent.Model;
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (catchEvent.variableSettings && catchEvent.variableSettings.length > 0) {
            var _loop_2 = function (v) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    var i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return (e instanceof Component && e.Id === v.value); }));
                    extendElements.splice(i, 1);
                }
            };
            try {
                for (var _d = tslib_1.__values(catchEvent.variableSettings), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var v = _e.value;
                    _loop_2(v);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        catchEvent.variableSettings = new Array();
        /** @type {?} */
        var variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var v = variables_1_1.value;
                    /** @type {?} */
                    var variableSetting = new VariableSetting(bpmnModel);
                    // variableSetting.variableId = v.variableId;
                    variableSetting.variableCode = v.variableCode;
                    variableSetting.variableName = v.variableName;
                    variableSetting.tag = v.tag;
                    variableSetting.executionTime = v.executionTime;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    catchEvent.variableSettings.push(variableSetting);
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        var c = v.component;
                        if (c) {
                            /** @type {?} */
                            var cpt = new Component(bpmnModel);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                try {
                                    for (var _f = tslib_1.__values(c.ActualParameters), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        var a = _g.value;
                                        /** @type {?} */
                                        var parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                        parameter.Tag = a.Tag;
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                    }
                                    finally { if (e_6) throw e_6.error; }
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    };
    /**
     * @param {?} catchEvent
     * @return {?}
     */
    IntermediateCatchEventImplCell.prototype.removeSignals = /**
     * @param {?} catchEvent
     * @return {?}
     */
    function (catchEvent) {
        var e_7, _a, e_8, _b;
        /** @type {?} */
        var bpmnModel = catchEvent.Model;
        if (catchEvent.EventDefinitions && catchEvent.EventDefinitions.length > 0) {
            /** @type {?} */
            var flowElements = bpmnModel.DefaultProcess.GetFlowElements();
            /** @type {?} */
            var eventDefs = new Map();
            for (var key in flowElements) {
                if (flowElements[key] instanceof IntermediateCatchEventImpl && flowElements[key].Id !== catchEvent.Id) {
                    /** @type {?} */
                    var catchEvent_1 = (/** @type {?} */ (flowElements[key]));
                    try {
                        for (var _c = tslib_1.__values(catchEvent_1.EventDefinitions), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var e = _d.value;
                            /** @type {?} */
                            var event_3 = (/** @type {?} */ (e));
                            if (!eventDefs.get(event_3.SignalRef)) {
                                eventDefs.set(event_3.SignalRef, event_3);
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
            }
            var _loop_3 = function (e) {
                /** @type {?} */
                var eventDef = (/** @type {?} */ (e));
                if (!eventDefs.get(eventDef.SignalRef)) {
                    /** @type {?} */
                    var i = bpmnModel.signals.findIndex((/**
                     * @param {?} s
                     * @return {?}
                     */
                    function (s) { return s.Name === eventDef.SignalRef; }));
                    if (i > -1) {
                        bpmnModel.signals.splice(i, 1);
                    }
                }
            };
            try {
                for (var _e = tslib_1.__values(catchEvent.EventDefinitions), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var e = _f.value;
                    _loop_3(e);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
    };
    IntermediateCatchEventImplCell.CLR_TYPE_ID = IntermediateCatchEventImpl.Clr_Type_ID;
    return IntermediateCatchEventImplCell;
}(NodeCell));
export { IntermediateCatchEventImplCell };
if (false) {
    /** @type {?} */
    IntermediateCatchEventImplCell.CLR_TYPE_ID;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.clrTypeId;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.name;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.nameLanguage;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.flowElement;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,