/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { SequenceFlowState, Expression } from "@edp-pmf/bpmn-model";
import { SequenceFlowEdge, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { UserActivity, Condition } from "@gsp-wf/wf-process-model";
import { SequenceFlowPropertyKeys } from "./property-keys/SequenceFlowPropertyKeys";
import { mxResources } from "@edp-pmf/mxgraph-ts";
/**
 * 事件流连线，增加状态颜色信息
 */
var /**
 * 事件流连线，增加状态颜色信息
 */
WfSequenceFlowEdge = /** @class */ (function (_super) {
    tslib_1.__extends(WfSequenceFlowEdge, _super);
    function WfSequenceFlowEdge() {
        var _a;
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.localePipe = null;
        _this.strokeColors = (_a = {},
            _a[SequenceFlowState.Default] = "#6482b9",
            _a);
        return _this;
    }
    /**
     * @return {?}
     */
    WfSequenceFlowEdge.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sequenceFlow = this.flowElement;
        /** @type {?} */
        var sourceNode = sequenceFlow.Model.DefaultProcess.GetFlowElement(sequenceFlow.SourceRef);
        /** @type {?} */
        var conditionConfig = new ElementPropertyConfig();
        /** @type {?} */
        var basicConfig = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        basicConfig.categoryId = 'basic';
        basicConfig.categoryName = mxResources.get('basicInfo');
        basicConfig.tabId = 'basic';
        basicConfig.tabName = mxResources.get('basic');
        basicConfig.properties = [
            { propertyID: SequenceFlowPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: SequenceFlowPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: SequenceFlowPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        conditionConfig.categoryId = 'condition';
        conditionConfig.categoryName = mxResources.get('basicInfo');
        conditionConfig.tabId = 'basic';
        conditionConfig.tabName = mxResources.get('basic');
        conditionConfig.properties = [
            { propertyID: SequenceFlowPropertyKeys.ConditionExpression, propertyName: mxResources.get('ConditionExpression'), propertyType: 'modal' }
        ];
        // 源节点为排他网关和UserActivity时
        if (sourceNode.ClrTypeID === UserActivity.Clr_Type_ID || sourceNode.ClrTypeID === 'bpmn.ExclusiveGateway' || sourceNode.ClrTypeID === 'bpmn.InclusiveGateway') {
            conditionConfig.properties.push({ propertyID: SequenceFlowPropertyKeys.Default, propertyName: mxResources.get('default'), propertyType: 'select' });
        }
        this.setSequenceFlowValue(sequenceFlow, sourceNode, propertyData);
        return {
            propertyConfig: [basicConfig, conditionConfig],
            propertyData: propertyData
        };
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    WfSequenceFlowEdge.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var sequenceFlow = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case SequenceFlowPropertyKeys.ConditionExpression: // 更新条件
                this.updateConditionExpr(sequenceFlow, obj.propertyValue);
                break;
            case SequenceFlowPropertyKeys.Default:
                this.modifyDefaultSequenceFlow(sequenceFlow, obj.propertyValue);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * 设置连接线属性值
     * @param sequence
     * @param propertyData
     */
    /**
     * 设置连接线属性值
     * @param {?} sequenceFlow
     * @param {?} sourceNode
     * @param {?} propertyData
     * @return {?}
     */
    WfSequenceFlowEdge.prototype.setSequenceFlowValue = /**
     * 设置连接线属性值
     * @param {?} sequenceFlow
     * @param {?} sourceNode
     * @param {?} propertyData
     * @return {?}
     */
    function (sequenceFlow, sourceNode, propertyData) {
        propertyData[SequenceFlowPropertyKeys.Id] = sequenceFlow.Id;
        propertyData[SequenceFlowPropertyKeys.ClrTypeID] = sequenceFlow.ClrTypeID;
        propertyData[SequenceFlowPropertyKeys.Name] = sequenceFlow.Name;
        propertyData[SequenceFlowPropertyKeys.NameLanguage] = sequenceFlow.NameLanguage || {
            "zh-CHS": sequenceFlow.Name,
        };
        if (!sequenceFlow.ConditionExpression || !sequenceFlow.ConditionExpression.MexExpression)
            propertyData[SequenceFlowPropertyKeys.ConditionExpression] = '';
        else
            propertyData[SequenceFlowPropertyKeys.ConditionExpression] =
                ((/** @type {?} */ (sequenceFlow.ConditionExpression.MexExpression))).Value;
        if (sourceNode.ClrTypeID === UserActivity.Clr_Type_ID) {
            /** @type {?} */
            var userActivity = (/** @type {?} */ (sourceNode));
            if (userActivity.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
        if (sourceNode.ClrTypeID === 'bpmn.ExclusiveGateway') {
            /** @type {?} */
            var gateway = (/** @type {?} */ (sourceNode));
            if (gateway.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
        if (sourceNode.ClrTypeID === 'bpmn.InclusiveGateway') {
            /** @type {?} */
            var gateway = (/** @type {?} */ (sourceNode));
            if (gateway.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
    };
    /**
     * 更新分支条件
     * @param seqFlow
     * @param val
     */
    /**
     * 更新分支条件
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    WfSequenceFlowEdge.prototype.updateConditionExpr = /**
     * 更新分支条件
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    function (seqFlow, val) {
        seqFlow.ConditionExpression = null;
        if (val) {
            /** @type {?} */
            var expression = new Expression(seqFlow.Model);
            /** @type {?} */
            var condition = new Condition(seqFlow.Model);
            condition.Value = val;
            expression.MexExpression = condition;
            seqFlow.ConditionExpression = expression;
        }
    };
    /**
     * 更新默认分支(当前适用：排他网关+活动节点)
     * @param seqFlow
     * @param val
     */
    /**
     * 更新默认分支(当前适用：排他网关+活动节点)
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    WfSequenceFlowEdge.prototype.modifyDefaultSequenceFlow = /**
     * 更新默认分支(当前适用：排他网关+活动节点)
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    function (seqFlow, val) {
        // 获取流转线源节点
        /** @type {?} */
        var node = (/** @type {?} */ (seqFlow.Model.DefaultProcess.GetFlowElement(seqFlow.SourceRef)));
        if (node.ClrTypeID === UserActivity.Clr_Type_ID) {
            // 节点为UserActivity类型
            /** @type {?} */
            var userActivity = (/** @type {?} */ (node));
            if (val === true) {
                userActivity.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (userActivity.Default === seqFlow.Id) {
                    userActivity.Default = null;
                }
            }
        }
        else if (node.ClrTypeID === 'bpmn.ExclusiveGateway') {
            // 排他网关
            /** @type {?} */
            var gateway = (/** @type {?} */ (node));
            if (val === true) {
                gateway.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (gateway.Default === seqFlow.Id) {
                    gateway.Default = null;
                }
            }
        }
        else if (node.ClrTypeID === 'bpmn.InclusiveGateway') {
            // 包容网关
            /** @type {?} */
            var gateway = (/** @type {?} */ (node));
            if (val === true) {
                gateway.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (gateway.Default === seqFlow.Id) {
                    gateway.Default = null;
                }
            }
        }
    };
    return WfSequenceFlowEdge;
}(SequenceFlowEdge));
/**
 * 事件流连线，增加状态颜色信息
 */
export { WfSequenceFlowEdge };
if (false) {
    /** @type {?} */
    WfSequenceFlowEdge.prototype.localePipe;
    /** @type {?} */
    WfSequenceFlowEdge.prototype.strokeColors;
}
//# sourceMappingURL=data:application/json;base64,