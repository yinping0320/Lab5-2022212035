/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { CallActivitySubProcess, Component, BackWardRule, ActualParameter, VariableSetting, SemanticExpression, CounterSignRule, Condition } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { BpmnModelHelper, Expression, FlowNodeState, MultiInstanceLoopCharacteristics } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { CallActivitySubProcessPropertyKeys } from "./property-keys/CallActivitySubProcessPropertyKeys";
/**
 * 子流程活动节点
 */
var CallActivitySubProcessCell = /** @class */ (function (_super) {
    tslib_1.__extends(CallActivitySubProcessCell, _super);
    function CallActivitySubProcessCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = CallActivitySubProcessCell.CLR_TYPE_ID;
        _this.name = "子流程";
        _this.nameLanguage = {
            "zh-CHS": "子流程",
            "zh-CHT": "子流程",
            "en": "Sub-Process",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/sub.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/sub_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        flowNode.Id = "CallActivitySubProcess" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    };
    /**
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var act = this.flowElement;
        // 组织属性框
        /** @type {?} */
        var basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        var activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        // 基本属性（名称）
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: CallActivitySubProcessPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: CallActivitySubProcessPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: CallActivitySubProcessPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        // 活动选项（表单定义+活动构件）
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: CallActivitySubProcessPropertyKeys.callActivitySubProcess, propertyName: mxResources.get('callActivitySubProcess'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics, propertyName: mxResources.get('multiInstanceLoopCharacteristics'), propertyType: 'modal' }
        ];
        propertyData[CallActivitySubProcessPropertyKeys.Id] = act.Id;
        propertyData[CallActivitySubProcessPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[CallActivitySubProcessPropertyKeys.Name] = act.Name;
        propertyData[CallActivitySubProcessPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[CallActivitySubProcessPropertyKeys.callActivitySubProcess] = {
            calledBizDefKey: act.calledBizDefKey,
            calledElement: act.CalledElement,
            inheritVariables: act.inheritVariables,
            inheritBizDataId: act.inheritBizDataId,
            bizDataId: act.bizDataId,
            aifProcessCode: act.aifProcessCode,
            useAutoCreationData: act.useAutoCreationData,
        };
        propertyData[CallActivitySubProcessPropertyKeys.BackWardRule] = act.backWardRule;
        propertyData[CallActivitySubProcessPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        propertyData[CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics] = act.LoopCharacteristics;
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var subProcess = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case CallActivitySubProcessPropertyKeys.callActivitySubProcess:
                this.updateSubProcessConfig(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.BackWardRule:
                this.updateBackWardRule(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.variableSettings:
                this.updateVariableSettings(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics:
                this.updateMultiInstanceLoopCharacteristic(subProcess, obj);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.updateSubProcessConfig = /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    function (subProcess, obj) {
        /** @type {?} */
        var config = obj.propertyValue;
        if (subProcess) {
            subProcess.calledBizDefKey = config.calledBizDefKey;
            subProcess.CalledElement = config.calledElement;
            subProcess.inheritBizDataId = config.inheritBizDataId;
            subProcess.inheritVariables = config.inheritVariables;
            subProcess.bizDataId = config.bizDataId;
            subProcess.aifProcessCode = config.aifProcessCode;
            subProcess.useAutoCreationData = config.useAutoCreationData;
        }
    };
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.updateBackWardRule = /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    function (subProcess, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        /** @type {?} */
        var backWardRule = new BackWardRule(subProcess.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        subProcess.backWardRule = backWardRule;
    };
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.updateVariableSettings = /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    function (subProcess, obj) {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var bpmnModel = this.flowElement.Model;
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (subProcess.variableSettings && subProcess.variableSettings.length > 0) {
            var _loop_1 = function (v) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    var i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return (e instanceof Component && e.Id === v.value); }));
                    extendElements.splice(i, 1);
                }
            };
            try {
                for (var _d = tslib_1.__values(subProcess.variableSettings), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var v = _e.value;
                    _loop_1(v);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        subProcess.variableSettings = new Array();
        /** @type {?} */
        var variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var v = variables_1_1.value;
                    /** @type {?} */
                    var variableSetting = new VariableSetting(bpmnModel);
                    // variableSetting.variableId = v.variableId;
                    variableSetting.variableCode = v.variableCode;
                    variableSetting.variableName = v.variableName;
                    variableSetting.tag = v.tag;
                    variableSetting.executionTime = v.executionTime;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    subProcess.variableSettings.push(variableSetting);
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        var c = v.component;
                        if (c) {
                            /** @type {?} */
                            var cpt = new Component(bpmnModel);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                try {
                                    for (var _f = tslib_1.__values(c.ActualParameters), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        var a = _g.value;
                                        /** @type {?} */
                                        var parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                        parameter.Tag = a.Tag;
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    CallActivitySubProcessCell.prototype.updateMultiInstanceLoopCharacteristic = /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    function (subProcess, obj) {
        var e_4, _a;
        /** @type {?} */
        var data = obj.propertyValue;
        /** @type {?} */
        var loopCharacteristics = new MultiInstanceLoopCharacteristics(subProcess.Model);
        loopCharacteristics.enable = data.enable;
        loopCharacteristics.sequential = data.sequential;
        loopCharacteristics.loopCardinality = data.loopCardinality;
        loopCharacteristics.completionCondition = data.completionCondition;
        loopCharacteristics.completionConditionRules = data.completionConditionRules;
        subProcess.LoopCharacteristics = loopCharacteristics;
        if (obj.propertyValue) {
            /** @type {?} */
            var data_1 = obj.propertyValue;
            /** @type {?} */
            var loopCharacteristics_1 = new MultiInstanceLoopCharacteristics(subProcess.Model);
            loopCharacteristics_1.enable = data_1.enable;
            loopCharacteristics_1.sequential = data_1.sequential;
            loopCharacteristics_1.loopCardinality = new Expression(subProcess.Model);
            if (data_1.loopCardinality) {
                /** @type {?} */
                var variableExpression = new SemanticExpression(subProcess.Model);
                variableExpression.Value = data_1.loopCardinality;
                loopCharacteristics_1.loopCardinality.MexExpression = variableExpression;
            }
            loopCharacteristics_1.completionCondition = data_1.completionCondition;
            /** @type {?} */
            var rules = (/** @type {?} */ (data_1.completionConditionRules));
            loopCharacteristics_1.completionConditionRules = null;
            if (rules && rules.length > 0) {
                loopCharacteristics_1.completionConditionRules = new Array();
                try {
                    for (var rules_1 = tslib_1.__values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                        var rule = rules_1_1.value;
                        /** @type {?} */
                        var counterSignRule = new CounterSignRule(subProcess.Model);
                        /** @type {?} */
                        var condition = new Condition(subProcess.Model);
                        condition.Value = rule.CompletionCondition.Value;
                        counterSignRule.ConclusionValue = rule.ConclusionValue;
                        counterSignRule.CalculateType = rule.CalculateType;
                        counterSignRule.ConditionValue = rule.ConditionValue;
                        counterSignRule.WaitAllVotes = rule.WaitAllVotes;
                        counterSignRule.CompletionCondition = condition;
                        loopCharacteristics_1.completionConditionRules.push(counterSignRule);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            subProcess.LoopCharacteristics = loopCharacteristics_1;
        }
    };
    CallActivitySubProcessCell.CLR_TYPE_ID = CallActivitySubProcess.Clr_Type_ID;
    return CallActivitySubProcessCell;
}(NodeCell));
export { CallActivitySubProcessCell };
if (false) {
    /** @type {?} */
    CallActivitySubProcessCell.CLR_TYPE_ID;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.clrTypeId;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.name;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.nameLanguage;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.flowElement;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,