/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementPropertyConfig, PmfEvents, ProcessCell } from "@edp-pmf/grapheditor";
import { BpmnModelHelper, DataTypes, DataType, DataObject } from "@edp-pmf/bpmn-model";
import { ProcessHeader, StartMode, Component, CDTSchemaType, ToolTime, ExecuteForm, VariableSetting, ActualParameter, TitleExpression, CustomizeAction, MessageNotice, TimeLimitControl, ExtendProperty, ImageSettings, PositionParticipantExpression, UserParticipantExpression, ValuedDataObject, TimeLimitControlInfo, SendMessageExpireOperationInfo, SendMessageExpireOperation, AutoHandleExpireOperation, AutoHandleExpireOperationInfo, ActivityExecutorParticipantExpression, SmsMessageTemplate, SmsMessageVariable, } from "@gsp-wf/wf-process-model";
import { mxEventObject, mxResources } from "@edp-pmf/mxgraph-ts";
import { MessageReceiver } from "../entity/MessageReceiver";
import { BizComponent } from "../entity/BizComponent";
import { BizParameter } from "../entity/BizParameter";
import { WfDesignerUtils } from "../WfDesignerUtils";
import { WfEvents } from "../WfEvents";
import { ProcessPropertyKeys } from "./property-keys/ProcessPropertyKeys";
import { PropertyHelper } from "./PropertyHelper";
/**
 * 流程元素类。
 * 取名虽然Cell，但实际上不需要继承mxCell以及Cell类，仅持有流程与画布实例，方法属性获取与修改操作。
 */
var /**
 * 流程元素类。
 * 取名虽然Cell，但实际上不需要继承mxCell以及Cell类，仅持有流程与画布实例，方法属性获取与修改操作。
 */
WfProcessCell = /** @class */ (function (_super) {
    tslib_1.__extends(WfProcessCell, _super);
    function WfProcessCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    WfProcessCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var extendList = [];
        if (this.editorUi.procExtProps && this.editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(this.editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        var propertyData = {};
        /** @type {?} */
        var usual = new ElementPropertyConfig();
        usual.categoryId = 'usual';
        usual.categoryName = mxResources.get("basicInfo");
        usual.tabId = 'basic';
        usual.tabName = mxResources.get("basic");
        usual.properties = [
            { propertyID: ProcessPropertyKeys.Name, propertyName: mxResources.get("name"), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: ProcessPropertyKeys.NameLanguage, propertyName: mxResources.get("nameLanguage"), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: ProcessPropertyKeys.Key, propertyName: mxResources.get("key"), propertyType: 'string', readonly: true },
            { propertyID: ProcessPropertyKeys.EntryForm, propertyName: mxResources.get("entryForm"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.startMode, propertyName: mxResources.get("startMode"), propertyType: 'select' },
            { propertyID: ProcessPropertyKeys.wf_TitleExpression, propertyName: mxResources.get("wfTitle"), propertyType: 'modal' },
        ];
        /** @type {?} */
        var formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get("formDef");
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get("basic");
        formDef.properties = [
            { propertyID: ProcessPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get("formsPC"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get("formsMobile"), propertyType: 'modal' },
        ];
        /** @type {?} */
        var process = new ElementPropertyConfig();
        process.categoryId = 'process';
        process.categoryName = mxResources.get("process");
        process.tabId = 'advanced';
        process.tabName = mxResources.get("advanced");
        process.properties = [
            { propertyID: ProcessPropertyKeys.wf_Component, propertyName: mxResources.get("wfComponent"), propertyType: 'modal' },
        ];
        /** @type {?} */
        var advanced = new ElementPropertyConfig();
        advanced.categoryId = 'advanced';
        advanced.categoryName = mxResources.get("otherConfig");
        advanced.tabId = 'advanced';
        advanced.tabName = mxResources.get("advanced");
        advanced.properties = [
            { propertyID: ProcessPropertyKeys.processVariables, propertyName: mxResources.get("processVariables"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.wf_CustomizeAction, propertyName: mxResources.get("customizeAction"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.enablePriority, propertyName: mxResources.get("enablePriority"), propertyType: 'select' },
            { propertyID: ProcessPropertyKeys.enableWholeOrderRetrieve, propertyName: mxResources.get("enableWholeOrderRetrieve"), propertyType: 'select', description: mxResources.get("description") },
            { propertyID: ProcessPropertyKeys.imageSettings, propertyName: mxResources.get("messageProperty"), propertyType: 'modal' },
        ];
        /** @type {?} */
        var time = new ElementPropertyConfig();
        time.categoryId = 'messageProperty'; // 消息属性
        time.categoryName = mxResources.get("timelinessInfo");
        time.tabId = 'advanced';
        time.tabName = mxResources.get("advanced");
        time.properties = [
            { propertyID: ProcessPropertyKeys.timeLimitControl, propertyName: mxResources.get("timeLimitControl"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.messageNotice, propertyName: mxResources.get("messageNotice"), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        var groupList = new Array();
        try {
            for (var extendList_1 = tslib_1.__values(extendList), extendList_1_1 = extendList_1.next(); !extendList_1_1.done; extendList_1_1 = extendList_1.next()) {
                var extend = extendList_1_1.value;
                if (!extend.parentId) {
                    /** @type {?} */
                    var group = { parent: extend, childs: new Array() };
                    try {
                        for (var extendList_2 = tslib_1.__values(extendList), extendList_2_1 = extendList_2.next(); !extendList_2_1.done; extendList_2_1 = extendList_2.next()) {
                            var e = extendList_2_1.value;
                            if (e.parentId === extend.id) {
                                group.childs.push(e);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (extendList_2_1 && !extendList_2_1.done && (_b = extendList_2.return)) _b.call(extendList_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    groupList.push(group);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (extendList_1_1 && !extendList_1_1.done && (_a = extendList_1.return)) _a.call(extendList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            var extendProperty = new ElementPropertyConfig();
            extendProperty.categoryId = 'extendProperty';
            extendProperty.categoryName = mxResources.get("extendProperty");
            extendProperty.tabId = 'advanced';
            extendProperty.tabName = mxResources.get("advanced");
            extendProperty.properties = new Array();
            try {
                // 组织扩展属性的二级list
                for (var groupList_1 = tslib_1.__values(groupList), groupList_1_1 = groupList_1.next(); !groupList_1_1.done; groupList_1_1 = groupList_1.next()) {
                    var g = groupList_1_1.value;
                    extendProperty.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (groupList_1_1 && !groupList_1_1.done && (_c = groupList_1.return)) _c.call(groupList_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.setProcessPropertyValue(propertyData, groupList);
            return {
                propertyConfig: [usual, formDef, process, time, advanced, extendProperty],
                propertyData: propertyData
            };
        }
        else {
            this.setProcessPropertyValue(propertyData, groupList);
            return {
                propertyConfig: [usual, formDef, process, time, advanced],
                propertyData: propertyData
            };
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    WfProcessCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var propertyID = obj.propertyID;
        if (propertyID) {
            switch (propertyID) {
                case 'EntryForm': //流程分类
                    // 更新流程分类名称（流程分类名称可能修改）
                    this.updateProcessHeader(obj.propertyValue.name, obj.propertyValue.businessObjectId, obj.propertyValue.id);
                    this.updateFlowFormInfo(obj.formalParameters, obj.processBizComponnets, obj.executeForms, obj.customizeActions, obj.bizCmps);
                    this.bindProcessTitleExpression(obj.flowForm.processDescription);
                    break;
                case ProcessPropertyKeys.wf_Component: // 流程构件
                    this.updateProcessComponents(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.wf_ExecuteForms_PC:
                    this.updateExecuteForm(obj.propertyValue, 'PC');
                    if (obj.parameters && obj.parameters.length > 0) {
                        PropertyHelper.updateFormalParameters(this.process, obj.parameters);
                    }
                    break;
                case ProcessPropertyKeys.wf_ExecuteForms_Mobile:
                    this.updateExecuteForm(obj.propertyValue, 'MOBILE');
                    if (obj.parameters && obj.parameters.length > 0) {
                        PropertyHelper.updateFormalParameters(this.process, obj.parameters);
                    }
                    break;
                case ProcessPropertyKeys.wf_CustomizeAction:
                    this.updateCustomizeActions(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.wf_TitleExpression:
                    this.modifyProcessTitleExpression(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.allowPreAssign:
                    this.updateAllowPreAssign(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.startMode:
                    this.updateStartMode(obj.propertyValue, obj.allBizCmps, obj.bizCmps);
                    break;
                case ProcessPropertyKeys.enablePriority:
                    this.updateEnablePriority(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.enableWholeOrderRetrieve:
                    this.updateEnableWholeOrderRetrieve(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.processVariables:
                    this.updateProcessVariables(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.timeLimitControl:
                    this.updateProcessTimeLimitControl(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.messageNotice:
                    this.updateProcessMessageNotices(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.imageSettings:
                    this.updateImageSettings(obj.propertyValue);
                    break;
                default:
                    // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                    if (this.editorUi.procExtProps.findIndex((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.id === propertyID; })) > -1) {
                        this.resetExtendProperty(obj.propertyValue);
                    }
                    else {
                        _super.prototype.updateProps.call(this, obj);
                    }
                    break;
            }
        }
    };
    /**
    * 设置流程属性值
    * @param bpmnModel
    * @param propertyData
    * @param groupList
    */
    /**
     * 设置流程属性值
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    WfProcessCell.prototype.setProcessPropertyValue = /**
     * 设置流程属性值
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    function (propertyData, groupList) {
        var e_4, _a;
        /** @type {?} */
        var process = this.process;
        if (process) {
            if (!process.Name)
                process.Name = '默认流程';
            if (!process.Key)
                process.Key = BpmnModelHelper.GenerateElementId();
            propertyData[ProcessPropertyKeys.Id] = process.Id;
            propertyData[ProcessPropertyKeys.ClrTypeID] = process.ClrTypeID;
            propertyData[ProcessPropertyKeys.Name] = process.Name;
            propertyData[ProcessPropertyKeys.NameLanguage] = process.NameLanguage || {
                "zh-CHS": process.Name,
            };
            propertyData[ProcessPropertyKeys.Key] = process.Key;
            propertyData[ProcessPropertyKeys.wf_TitleExpression] = '';
            /** @type {?} */
            var extendElements = process.GetExtensionElements();
            /** @type {?} */
            var component = [];
            /** @type {?} */
            var webForm = void 0;
            /** @type {?} */
            var mobileForm = void 0;
            /** @type {?} */
            var customizeActions = [];
            /** @type {?} */
            var proExtendProperties_1 = [];
            /** @type {?} */
            var imageSettings = void 0;
            /** @type {?} */
            var messagesNotices = new Array();
            // tslint:disable-next-line: forin
            for (var i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    propertyData[ProcessPropertyKeys.EntryForm] = {
                        id: ((/** @type {?} */ (extendElements[i]))).BizDefKey,
                        name: ((/** @type {?} */ (extendElements[i]))).BizDefName
                    };
                    propertyData[ProcessPropertyKeys.allowPreAssign] = ((/** @type {?} */ (extendElements[i]))).allowPreAssign;
                    propertyData[ProcessPropertyKeys.startMode] = ((/** @type {?} */ (extendElements[i]))).startMode;
                    propertyData[ProcessPropertyKeys.enablePriority] = ((/** @type {?} */ (extendElements[i]))).enablePriority ? ((/** @type {?} */ (extendElements[i]))).enablePriority : false;
                    propertyData[ProcessPropertyKeys.enableWholeOrderRetrieve] = ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve ? ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve : false;
                }
                if (extendElements[i] instanceof Component
                    && ((/** @type {?} */ (extendElements[i]))).Time !== ToolTime.UNDEFINITION) {
                    component.push(this.convert2Component((/** @type {?} */ (extendElements[i]))));
                }
                if (extendElements[i] instanceof ExecuteForm) {
                    /** @type {?} */
                    var form = (/** @type {?} */ (extendElements[i]));
                    if (form.TerminalType === 'PC') {
                        webForm = form;
                    }
                    else if (form.TerminalType === 'MOBILE') {
                        mobileForm = form;
                    }
                }
                if (extendElements[i] instanceof TitleExpression) {
                    propertyData[ProcessPropertyKeys.wf_TitleExpression] =
                        ((/** @type {?} */ (extendElements[i]))).valueLanguage ? ((/** @type {?} */ (extendElements[i]))).valueLanguage : ((/** @type {?} */ (extendElements[i]))).value;
                }
                if (extendElements[i] instanceof CustomizeAction) {
                    customizeActions.push(extendElements[i]);
                }
                if (extendElements[i] instanceof MessageNotice) {
                    messagesNotices.push(this.getMessageNotice((/** @type {?} */ (extendElements[i]))));
                }
                if (extendElements[i] instanceof TimeLimitControl) {
                    propertyData[ProcessPropertyKeys.timeLimitControl] = this.getPrcocessTimeLimitInfo((/** @type {?} */ (extendElements[i])));
                }
                if (extendElements[i] instanceof ExtendProperty) {
                    proExtendProperties_1.push(extendElements[i]);
                }
                if (extendElements[i] instanceof ImageSettings) {
                    // imageSettings.push(extendElements[i]);
                    propertyData[ProcessPropertyKeys.imageSettings] = extendElements[i];
                }
            }
            /** @type {?} */
            var processVariables = this.getProcessVariables(process);
            propertyData[ProcessPropertyKeys.processVariables] = processVariables;
            propertyData[ProcessPropertyKeys.wf_Component] = component;
            propertyData[ProcessPropertyKeys.wf_ExecuteForms_PC] = webForm;
            propertyData[ProcessPropertyKeys.wf_ExecuteForms_Mobile] = mobileForm;
            propertyData[ProcessPropertyKeys.wf_CustomizeAction] = customizeActions;
            propertyData[ProcessPropertyKeys.messageNotice] = messagesNotices;
            try {
                for (var groupList_2 = tslib_1.__values(groupList), groupList_2_1 = groupList_2.next(); !groupList_2_1.done; groupList_2_1 = groupList_2.next()) {
                    var g = groupList_2_1.value;
                    // 取回模型上的value值给到扩展属性组件里
                    if (proExtendProperties_1 && proExtendProperties_1.length > 0) {
                        g.childs.sort((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) {
                            return a.sortOrder - b.sortOrder;
                        })).forEach((/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            proExtendProperties_1.forEach((/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                if (e.key == d.code) {
                                    d.value = e.value;
                                }
                            }));
                        }));
                    }
                    propertyData[g.parent.id] = g.childs;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (groupList_2_1 && !groupList_2_1.done && (_a = groupList_2.return)) _a.call(groupList_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    /**
     * @param {?} process
     * @return {?}
     */
    WfProcessCell.prototype.getProcessVariables = /**
     * @param {?} process
     * @return {?}
     */
    function (process) {
        var e_5, _a, e_6, _b, e_7, _c;
        /** @type {?} */
        var processVariables = new Array();
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        /** @type {?} */
        var dataObjects = process.GetDataObjects();
        if (dataObjects !== null && dataObjects.length > 0) {
            try {
                for (var dataObjects_1 = tslib_1.__values(dataObjects), dataObjects_1_1 = dataObjects_1.next(); !dataObjects_1_1.done; dataObjects_1_1 = dataObjects_1.next()) {
                    var obj = dataObjects_1_1.value;
                    if (obj instanceof ValuedDataObject && obj.DataType.Category !== DataTypes.CustomType) {
                        /** @type {?} */
                        var variable = {
                            id: obj.Id,
                            name: obj.Name,
                            documentation: obj.Documentation,
                            basicType: obj.DataType.BasicType,
                            tag: obj.variableSetting ? obj.variableSetting.tag : '',
                            value: obj.variableSetting ? obj.variableSetting.value : '',
                            valueText: obj.variableSetting ? obj.variableSetting.valueText : '',
                            description: obj.DataType.Description
                        };
                        if (obj.variableSetting && obj.variableSetting.tag === 'component') {
                            if (extendElements.length > 0) {
                                try {
                                    for (var extendElements_1 = tslib_1.__values(extendElements), extendElements_1_1 = extendElements_1.next(); !extendElements_1_1.done; extendElements_1_1 = extendElements_1.next()) {
                                        var e = extendElements_1_1.value;
                                        if (e instanceof Component && e.Id === obj.variableSetting.value) {
                                            /** @type {?} */
                                            var component = {
                                                Id: e.Id,
                                                Name: e.Name,
                                                MetadataId: e.MetadataId,
                                                MethodCode: e.MethodCode,
                                                ActualParameters: []
                                            };
                                            if (e.ActualParameters && e.ActualParameters.length > 0) {
                                                try {
                                                    for (var _d = tslib_1.__values(e.ActualParameters), _e = _d.next(); !_e.done; _e = _d.next()) {
                                                        var p = _e.value;
                                                        /** @type {?} */
                                                        var parameter = {
                                                            Name: p.Name,
                                                            Value: p.Value,
                                                            Tag: p.Tag,
                                                        };
                                                        component.ActualParameters.push(parameter);
                                                    }
                                                }
                                                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                                                finally {
                                                    try {
                                                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                                                    }
                                                    finally { if (e_7) throw e_7.error; }
                                                }
                                            }
                                            variable.component = component;
                                        }
                                    }
                                }
                                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                                finally {
                                    try {
                                        if (extendElements_1_1 && !extendElements_1_1.done && (_b = extendElements_1.return)) _b.call(extendElements_1);
                                    }
                                    finally { if (e_6) throw e_6.error; }
                                }
                            }
                        }
                        processVariables.push(variable);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (dataObjects_1_1 && !dataObjects_1_1.done && (_a = dataObjects_1.return)) _a.call(dataObjects_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return processVariables;
    };
    /**
     * @param {?} timeLimitControl
     * @return {?}
     */
    WfProcessCell.prototype.getPrcocessTimeLimitInfo = /**
     * @param {?} timeLimitControl
     * @return {?}
     */
    function (timeLimitControl) {
        var e_8, _a, e_9, _b;
        /** @type {?} */
        var timeLimit;
        if (timeLimitControl) {
            timeLimit = new TimeLimitControlInfo();
            timeLimit.enable = timeLimitControl.enable;
            timeLimit.tag = timeLimitControl.tag;
            timeLimit.dueTime = timeLimitControl.dueTime;
            timeLimit.timeUnit = timeLimitControl.timeUnit;
            timeLimit.expireOperations = new Array();
            if (timeLimitControl.expireOperations && timeLimitControl.expireOperations.length > 0) {
                /** @type {?} */
                var operations = timeLimitControl.expireOperations;
                try {
                    for (var operations_1 = tslib_1.__values(operations), operations_1_1 = operations_1.next(); !operations_1_1.done; operations_1_1 = operations_1.next()) {
                        var o = operations_1_1.value;
                        if (o.ClrTypeID.indexOf('SendMessageExpireOperation') > 0) {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var sendMessage = new SendMessageExpireOperationInfo();
                            sendMessage.timeDuration = operation.timeDuration;
                            sendMessage.durationType = operation.durationType;
                            sendMessage.timeUnit = operation.timeUnit;
                            sendMessage.message = operation.message;
                            sendMessage.sendType = operation.sendType;
                            sendMessage.subject = operation.subject;
                            sendMessage.id = operation.id;
                            sendMessage.receiver = operation.receiver;
                            sendMessage.receiverText = operation.receiverText;
                            sendMessage.cycleEnable = operation.cycleEnable;
                            sendMessage.cycleTime = operation.cycleTime;
                            sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                            sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                            if (operation.smsMessageTemplate) {
                                /** @type {?} */
                                var smsTemplate = new Object;
                                smsTemplate.code = operation.smsMessageTemplate.code;
                                smsTemplate.content = operation.smsMessageTemplate.content;
                                smsTemplate.smsMessageVariables = new Array();
                                if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                    try {
                                        for (var _c = tslib_1.__values(operation.smsMessageTemplate.smsMessageVariables), _d = _c.next(); !_d.done; _d = _c.next()) {
                                            var v = _d.value;
                                            /** @type {?} */
                                            var variable = new Object;
                                            variable.id = WfDesignerUtils.createNM();
                                            variable.code = v.code;
                                            variable.value = v.value;
                                            variable.tag = v.tag;
                                            smsTemplate.smsMessageVariables.push(variable);
                                        }
                                    }
                                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                                    finally {
                                        try {
                                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                                        }
                                        finally { if (e_9) throw e_9.error; }
                                    }
                                }
                                sendMessage.smsMessageTemplate = smsTemplate;
                            }
                            timeLimit.expireOperations.push(sendMessage);
                        }
                        else if (o.ClrTypeID.indexOf('AutoHandleExpireOperation') > 0) {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var autoHandle = new AutoHandleExpireOperationInfo;
                            autoHandle.id = operation.id;
                            autoHandle.durationType = operation.durationType;
                            autoHandle.timeDuration = operation.timeDuration;
                            autoHandle.timeUnit = operation.timeUnit;
                            autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                            autoHandle.autoHandleType = operation.autoHandleType;
                            autoHandle.message = operation.message;
                            timeLimit.expireOperations.push(autoHandle);
                        }
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (operations_1_1 && !operations_1_1.done && (_a = operations_1.return)) _a.call(operations_1);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
        }
        return timeLimit;
    };
    /**
     * @param {?} messageNotice
     * @return {?}
     */
    WfProcessCell.prototype.getMessageNotice = /**
     * @param {?} messageNotice
     * @return {?}
     */
    function (messageNotice) {
        var e_10, _a, e_11, _b;
        /** @type {?} */
        var message = new Object;
        message.content = messageNotice.content;
        message.sendTime = messageNotice.sendTime;
        message.sendType = messageNotice.sendType;
        message.subject = messageNotice.subject;
        if (messageNotice.smsMessageTemplate) {
            /** @type {?} */
            var smsTemplate = new Object;
            smsTemplate.code = messageNotice.smsMessageTemplate.code;
            smsTemplate.content = messageNotice.smsMessageTemplate.content;
            smsTemplate.smsMessageVariables = new Array();
            if (messageNotice.smsMessageTemplate.smsMessageVariables && messageNotice.smsMessageTemplate.smsMessageVariables.length > 0) {
                try {
                    for (var _c = tslib_1.__values(messageNotice.smsMessageTemplate.smsMessageVariables), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var v = _d.value;
                        /** @type {?} */
                        var variable = new Object;
                        variable.id = WfDesignerUtils.createNM();
                        variable.code = v.code;
                        variable.value = v.value;
                        variable.tag = v.tag;
                        smsTemplate.smsMessageVariables.push(variable);
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
            }
            message.smsMessageTemplate = smsTemplate;
        }
        /** @type {?} */
        var receiverExpressions = new Array();
        if (messageNotice.receiver) {
            /** @type {?} */
            var receivers = messageNotice.receiver.split(',');
            /** @type {?} */
            var receiverTexts = messageNotice.receiverText.split(',');
            /** @type {?} */
            var userReceiver = new MessageReceiver();
            userReceiver.type = 'userParticipant';
            userReceiver.userIds = '';
            userReceiver.userNames = '';
            for (var i in receivers) {
                if (receivers[i] === 'procInstCreator') {
                    /** @type {?} */
                    var procInstCreator = new MessageReceiver();
                    procInstCreator.type = 'processParticipant';
                    procInstCreator.processParticipant = 'procInstCreator';
                    receiverExpressions.push(procInstCreator);
                }
                else if (receivers[i] === 'workItemParticipant') {
                    /** @type {?} */
                    var workItemParticipant = new MessageReceiver();
                    workItemParticipant.type = 'processParticipant';
                    workItemParticipant.processParticipant = 'workItemParticipant';
                    receiverExpressions.push(workItemParticipant);
                }
                else {
                    userReceiver.userIds += (receivers[i] + ',');
                    userReceiver.userNames += (receiverTexts[i] + ',');
                }
            }
            if (userReceiver.userIds) {
                userReceiver.userIds = userReceiver.userIds.substring(0, userReceiver.userIds.length - 1);
                userReceiver.userNames = userReceiver.userNames.substring(0, userReceiver.userNames.length - 1);
                receiverExpressions.push(userReceiver);
            }
        }
        if (messageNotice.receiverExpressions && messageNotice.receiverExpressions.length > 0) {
            try {
                for (var _e = tslib_1.__values(messageNotice.receiverExpressions), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var e = _f.value;
                    if (e instanceof ActivityExecutorParticipantExpression) {
                        /** @type {?} */
                        var activityExecutorParticipant = new MessageReceiver();
                        activityExecutorParticipant.type = 'processParticipant';
                        activityExecutorParticipant.processParticipant = 'activityExecutorParticipant';
                        activityExecutorParticipant.activityDefId = ((/** @type {?} */ (e))).activityDefId;
                        activityExecutorParticipant.activityDefName = ((/** @type {?} */ (e))).activityDefName;
                        receiverExpressions.push(activityExecutorParticipant);
                    }
                    else if (e instanceof UserParticipantExpression) {
                        /** @type {?} */
                        var variableReceiver = new MessageReceiver();
                        variableReceiver.type = 'variableParticipant';
                        variableReceiver.variableParticipant = ((/** @type {?} */ (e))).UserId;
                        variableReceiver.variableName = ((/** @type {?} */ (e))).name;
                        variableReceiver.orgType = ((/** @type {?} */ (e))).OrgType;
                        receiverExpressions.push(variableReceiver);
                    }
                    else if (e instanceof PositionParticipantExpression) {
                        /** @type {?} */
                        var positionReceiver = new MessageReceiver();
                        positionReceiver.type = 'positionParticipant';
                        positionReceiver.positionId = ((/** @type {?} */ (e))).PositionId;
                        positionReceiver.positionName = ((/** @type {?} */ (e))).PositionName;
                        positionReceiver.positionType = ((/** @type {?} */ (e))).PositionType;
                        if (positionReceiver.positionType === '1') {
                            positionReceiver.orgId = ((/** @type {?} */ (e))).OrgId;
                            positionReceiver.orgType = ((/** @type {?} */ (e))).OrgType;
                        }
                        receiverExpressions.push(positionReceiver);
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (receiverExpressions.length > 0) {
            message.receivers = receiverExpressions;
        }
        return message;
    };
    /**
     * @param {?} component
     * @return {?}
     */
    WfProcessCell.prototype.convert2Component = /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        var e_12, _a;
        /** @type {?} */
        var bizComponent = new BizComponent();
        bizComponent.id = component.Id;
        bizComponent.name = component.Name;
        bizComponent.metadataId = component.MetadataId;
        bizComponent.methodCode = component.MethodCode;
        bizComponent.executionTime = component.Time;
        bizComponent.isForCompensation = component.isForCompensation;
        bizComponent.scopeType = component.ScopeType || null;
        bizComponent.actualParameters = new Array();
        if (component.ActualParameters && component.ActualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(component.ActualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var param = _c.value;
                    /** @type {?} */
                    var bizParam = new BizParameter();
                    bizParam.code = param.Name;
                    bizParam.name = param.Name;
                    bizParam.value = param.Value;
                    bizComponent.actualParameters.push(bizParam);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        return bizComponent;
    };
    /**
     * 设置ProcessHeader
     * @param ffId
     * @param bizObjId
     * @param ffName
     * @param startMode
     */
    /**
     * 设置ProcessHeader
     * @param {?} ffId
     * @param {?} bizObjId
     * @param {?} ffName
     * @param {?} startMode
     * @return {?}
     */
    WfProcessCell.prototype.setProcessHeader = /**
     * 设置ProcessHeader
     * @param {?} ffId
     * @param {?} bizObjId
     * @param {?} ffName
     * @param {?} startMode
     * @return {?}
     */
    function (ffId, bizObjId, ffName, startMode) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        /** @type {?} */
        var processHeader = new ProcessHeader(process.Model, ffId, bizObjId, ffName, startMode);
        extendElements.push(processHeader);
    };
    /**
     * 更新流程分类绑定的参数，流程组件，表单信息
     * @param params 参数列表
     * @param cpts 流程组件
     * @param form 流程表单
     */
    /**
     * 更新流程分类绑定的参数，流程组件，表单信息
     * @param {?} params 参数列表
     * @param {?} cpts 流程组件
     * @param {?} forms
     * @param {?} customizeActions
     * @param {?} bizCmps
     * @return {?}
     */
    WfProcessCell.prototype.updateFlowFormInfo = /**
     * 更新流程分类绑定的参数，流程组件，表单信息
     * @param {?} params 参数列表
     * @param {?} cpts 流程组件
     * @param {?} forms
     * @param {?} customizeActions
     * @param {?} bizCmps
     * @return {?}
     */
    function (params, cpts, forms, customizeActions, bizCmps) {
        this.updateFormalParameters(params, cpts.filter((/**
         * @param {?} cpt
         * @return {?}
         */
        function (cpt) { return cpt.ownerType === 'Schema'; })));
        this.setProcessComponents(cpts, bizCmps);
        this.updateExecuteForms(forms);
        this.updateCustomizeActions(customizeActions);
    };
    /**
     * @param {?} parameters
     * @param {?=} cmps
     * @return {?}
     */
    WfProcessCell.prototype.updateFormalParameters = /**
     * @param {?} parameters
     * @param {?=} cmps
     * @return {?}
     */
    function (parameters, cmps) {
        if (cmps === void 0) { cmps = new Array(); }
        var e_13, _a;
        if (!parameters) {
            parameters = [];
        }
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var objects = process.GetDataObjects();
        if (parameters !== null && parameters.length > 0) {
            var _loop_1 = function (p) {
                var e_14, _a, e_15, _b;
                /** @type {?} */
                var dataType = new DataType(process.Model);
                if (p.dataType === 'CDTSchema') {
                    try {
                        // 先清理CDTSchema类型的dataObject
                        for (var objects_1 = tslib_1.__values(objects), objects_1_1 = objects_1.next(); !objects_1_1.done; objects_1_1 = objects_1.next()) {
                            var o = objects_1_1.value;
                            //TODO:数据类型为customType暂时默认为参数预制
                            if (o instanceof DataObject && o.DataType.Category === DataTypes.CustomType) {
                                process.RemoveDataObject(o.Id);
                            }
                        }
                    }
                    catch (e_14_1) { e_14 = { error: e_14_1 }; }
                    finally {
                        try {
                            if (objects_1_1 && !objects_1_1.done && (_a = objects_1.return)) _a.call(objects_1);
                        }
                        finally { if (e_14) throw e_14.error; }
                    }
                    // 重新绑定流程分类支持精简be
                    /** @type {?} */
                    var customType = new CDTSchemaType(process.Model);
                    if (p.newSchemaId && p.newSchemaMetadataId) {
                        customType.SchemaId = p.newSchemaId;
                        customType.MetadataId = p.newSchemaMetadataId;
                    }
                    else {
                        customType.SchemaId = p.schemaId;
                        customType.MetadataId = p.schemaMetadataId;
                    }
                    customType.ComponentId = cmps.filter((/**
                     * @param {?} cmp
                     * @return {?}
                     */
                    function (cmp) { return cmp.owner === p.schemaId; }))[0].id;
                    dataType.Category = DataTypes.CustomType;
                    dataType.CustomType = customType;
                }
                else {
                    try {
                        // 先清理code相同的dataObject
                        for (var objects_2 = tslib_1.__values(objects), objects_2_1 = objects_2.next(); !objects_2_1.done; objects_2_1 = objects_2.next()) {
                            var o = objects_2_1.value;
                            if (o instanceof DataObject && o.Name === p.code) {
                                process.RemoveDataObject(o.Id);
                            }
                        }
                    }
                    catch (e_15_1) { e_15 = { error: e_15_1 }; }
                    finally {
                        try {
                            if (objects_2_1 && !objects_2_1.done && (_b = objects_2.return)) _b.call(objects_2);
                        }
                        finally { if (e_15) throw e_15.error; }
                    }
                    dataType.Category = DataTypes.BasicType;
                    dataType.BasicType = p.dataType;
                }
                dataType.Description = p.description;
                // dataType.InitialValue = p.initialValue;
                if (p.parameterMode === 0) {
                    /** @type {?} */
                    var dataObject = new ValuedDataObject(process.Model);
                    dataObject.Name = p.code;
                    dataObject.Documentation = p.name;
                    dataObject.DataType = dataType;
                    dataObject.IsAllowNull = p.allowNull;
                    if (p.initialValue || p.initialValueType) {
                        /** @type {?} */
                        var variableSetting = new VariableSetting(process.Model);
                        variableSetting.variableCode = p.code;
                        variableSetting.variableName = p.name;
                        variableSetting.tag = p.initialValueType;
                        variableSetting.value = p.initialValue;
                        variableSetting.valueText = p.initialValue;
                        dataObject.variableSetting = variableSetting;
                    }
                    process.AddDataObject(dataObject);
                }
            };
            try {
                for (var parameters_1 = tslib_1.__values(parameters), parameters_1_1 = parameters_1.next(); !parameters_1_1.done; parameters_1_1 = parameters_1.next()) {
                    var p = parameters_1_1.value;
                    _loop_1(p);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (parameters_1_1 && !parameters_1_1.done && (_a = parameters_1.return)) _a.call(parameters_1);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
    };
    /**
     * 基于流程分类的切换更新流程构件
     */
    /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @param {?} bizCmps
     * @return {?}
     */
    WfProcessCell.prototype.setProcessComponents = /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @param {?} bizCmps
     * @return {?}
     */
    function (procCpts, bizCmps) {
        var e_16, _a, e_17, _b, e_18, _c, e_19, _d, e_20, _e, e_21, _f, e_22, _g, e_23, _h, e_24, _j, e_25, _k;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var processHeader;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof Component
                    && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION) {
                    extendElements.splice(i - 1, 1);
                }
                if (extendElements[i - 1] instanceof ProcessHeader) {
                    processHeader = (/** @type {?} */ (extendElements[i - 1]));
                }
            }
        }
        // 子流程和外部流程的情况先需要绑定取数构件
        if (processHeader.startMode !== StartMode.DIRECT) {
            /** @type {?} */
            var loadDataComponent = procCpts.find((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.executionTime === ToolTime.LOADDATA; }));
            if (loadDataComponent) {
                /** @type {?} */
                var ldCpt = new Component(process.Model);
                ldCpt.Time = (/** @type {?} */ (loadDataComponent.executionTime));
                ldCpt.MetadataId = loadDataComponent.metadataId;
                ldCpt.MethodCode = loadDataComponent.methodCode;
                ldCpt.Id = loadDataComponent.id;
                ldCpt.Name = loadDataComponent.name;
                ldCpt.isForCompensation = loadDataComponent.isForCompensation;
                ldCpt.ActualParameters = [];
                if (loadDataComponent.scopeType) {
                    ldCpt.ScopeType = loadDataComponent.scopeType;
                }
                else {
                    ldCpt.ScopeType = "Undefined";
                }
                if (loadDataComponent.actualParameters && loadDataComponent.actualParameters.length > 0) {
                    try {
                        for (var _l = tslib_1.__values(loadDataComponent.actualParameters), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var item = _m.value;
                            /** @type {?} */
                            var parameter = new ActualParameter(process.Model, item.code, item.value);
                            ldCpt.ActualParameters.push(parameter);
                        }
                    }
                    catch (e_16_1) { e_16 = { error: e_16_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_a = _l.return)) _a.call(_l);
                        }
                        finally { if (e_16) throw e_16.error; }
                    }
                }
                // 把取数构件放进去
                extendElements.push(ldCpt);
                // 如果是外部流程，校验是否集成统一预制的外部流程构件
                if (processHeader.startMode == StartMode.EXTERNAL_PROCESS) {
                    /** @type {?} */
                    var externalCmps = false;
                    /** @type {?} */
                    var cmps = bizCmps;
                    if (cmps && cmps.length > 0) {
                        try {
                            // 此处标记有外部流程通用构件
                            for (var cmps_1 = tslib_1.__values(cmps), cmps_1_1 = cmps_1.next(); !cmps_1_1.done; cmps_1_1 = cmps_1.next()) {
                                var c = cmps_1_1.value;
                                if (c.scopeType === 'ExternalProcess') {
                                    externalCmps = true;
                                    break;
                                }
                            }
                        }
                        catch (e_17_1) { e_17 = { error: e_17_1 }; }
                        finally {
                            try {
                                if (cmps_1_1 && !cmps_1_1.done && (_b = cmps_1.return)) _b.call(cmps_1);
                            }
                            finally { if (e_17) throw e_17.error; }
                        }
                    }
                    // 如果没有外部流程构件
                    if (!externalCmps) {
                        if (procCpts && procCpts.length > 0) {
                            try {
                                for (var procCpts_1 = tslib_1.__values(procCpts), procCpts_1_1 = procCpts_1.next(); !procCpts_1_1.done; procCpts_1_1 = procCpts_1.next()) {
                                    var procCpt = procCpts_1_1.value;
                                    /** @type {?} */
                                    var cpt = new Component(process.Model);
                                    cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                                    cpt.MetadataId = procCpt.metadataId;
                                    cpt.MethodCode = procCpt.methodCode;
                                    cpt.Id = procCpt.id;
                                    cpt.Name = procCpt.name;
                                    cpt.isForCompensation = procCpt.isForCompensation;
                                    cpt.ActualParameters = [];
                                    if (procCpt.scopeType) {
                                        cpt.ScopeType = procCpt.scopeType;
                                    }
                                    else {
                                        cpt.ScopeType = "Undefined";
                                    }
                                    if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                        try {
                                            for (var _o = tslib_1.__values(procCpt.actualParameters), _p = _o.next(); !_p.done; _p = _o.next()) {
                                                var item = _p.value;
                                                /** @type {?} */
                                                var parameter = new ActualParameter(process.Model, item.code, item.value);
                                                cpt.ActualParameters.push(parameter);
                                            }
                                        }
                                        catch (e_19_1) { e_19 = { error: e_19_1 }; }
                                        finally {
                                            try {
                                                if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                                            }
                                            finally { if (e_19) throw e_19.error; }
                                        }
                                    }
                                    // 避免重复的放入取数构件,不要取数，子流程和直接流程的构件，要未定义，外部，全量的
                                    if (cpt.Time !== ToolTime.LOADDATA
                                        && cpt.ScopeType !== StartMode.DIRECT
                                        && cpt.ScopeType !== StartMode.SUB_PROCESS) {
                                        extendElements.push(cpt);
                                    }
                                }
                            }
                            catch (e_18_1) { e_18 = { error: e_18_1 }; }
                            finally {
                                try {
                                    if (procCpts_1_1 && !procCpts_1_1.done && (_c = procCpts_1.return)) _c.call(procCpts_1);
                                }
                                finally { if (e_18) throw e_18.error; }
                            }
                        }
                    }
                    else {
                        try {
                            for (var procCpts_2 = tslib_1.__values(procCpts), procCpts_2_1 = procCpts_2.next(); !procCpts_2_1.done; procCpts_2_1 = procCpts_2.next()) {
                                var procCpt = procCpts_2_1.value;
                                /** @type {?} */
                                var cpt = new Component(process.Model);
                                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                                cpt.MetadataId = procCpt.metadataId;
                                cpt.MethodCode = procCpt.methodCode;
                                cpt.Id = procCpt.id;
                                cpt.Name = procCpt.name;
                                cpt.isForCompensation = procCpt.isForCompensation;
                                cpt.ActualParameters = [];
                                if (procCpt.scopeType) {
                                    cpt.ScopeType = procCpt.scopeType;
                                }
                                else {
                                    cpt.ScopeType = "Undefined";
                                }
                                if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                    try {
                                        for (var _q = tslib_1.__values(procCpt.actualParameters), _r = _q.next(); !_r.done; _r = _q.next()) {
                                            var item = _r.value;
                                            /** @type {?} */
                                            var parameter = new ActualParameter(process.Model, item.code, item.value);
                                            cpt.ActualParameters.push(parameter);
                                        }
                                    }
                                    catch (e_21_1) { e_21 = { error: e_21_1 }; }
                                    finally {
                                        try {
                                            if (_r && !_r.done && (_f = _q.return)) _f.call(_q);
                                        }
                                        finally { if (e_21) throw e_21.error; }
                                    }
                                }
                                // 避免重复的放入取数构件,不要取数，子流程和直接流程,未知的构件，外部，全量的
                                if (cpt.Time !== ToolTime.LOADDATA
                                    && cpt.ScopeType !== StartMode.DIRECT
                                    && cpt.ScopeType !== StartMode.SUB_PROCESS
                                    && cpt.ScopeType !== "Undefined") {
                                    extendElements.push(cpt);
                                }
                            }
                        }
                        catch (e_20_1) { e_20 = { error: e_20_1 }; }
                        finally {
                            try {
                                if (procCpts_2_1 && !procCpts_2_1.done && (_e = procCpts_2.return)) _e.call(procCpts_2);
                            }
                            finally { if (e_20) throw e_20.error; }
                        }
                    }
                    // 如果有外部流程构件，同样只保留取数构件，不需要其他处理(取数构件已经放进去了)
                    // 刷新一下属性框
                    this.editorUi.fireEvent(new mxEventObject(PmfEvents.ShowProperty));
                }
                else if (processHeader.startMode == StartMode.SUB_PROCESS) {
                    if (procCpts && procCpts.length > 0) {
                        try {
                            for (var procCpts_3 = tslib_1.__values(procCpts), procCpts_3_1 = procCpts_3.next(); !procCpts_3_1.done; procCpts_3_1 = procCpts_3.next()) {
                                var procCpt = procCpts_3_1.value;
                                /** @type {?} */
                                var cpt = new Component(process.Model);
                                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                                cpt.MetadataId = procCpt.metadataId;
                                cpt.MethodCode = procCpt.methodCode;
                                cpt.Id = procCpt.id;
                                cpt.Name = procCpt.name;
                                cpt.isForCompensation = procCpt.isForCompensation;
                                cpt.ActualParameters = [];
                                if (procCpt.scopeType) {
                                    cpt.ScopeType = procCpt.scopeType;
                                }
                                else {
                                    cpt.ScopeType = "Undefined";
                                }
                                if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                    try {
                                        for (var _s = tslib_1.__values(procCpt.actualParameters), _t = _s.next(); !_t.done; _t = _s.next()) {
                                            var item = _t.value;
                                            /** @type {?} */
                                            var parameter = new ActualParameter(process.Model, item.code, item.value);
                                            cpt.ActualParameters.push(parameter);
                                        }
                                    }
                                    catch (e_23_1) { e_23 = { error: e_23_1 }; }
                                    finally {
                                        try {
                                            if (_t && !_t.done && (_h = _s.return)) _h.call(_s);
                                        }
                                        finally { if (e_23) throw e_23.error; }
                                    }
                                }
                                // 避免重复的放入取数构件,不要取数，直接流程和外部流程，未定义的构件，要子流程，全量的
                                if (cpt.Time !== ToolTime.LOADDATA
                                    && cpt.ScopeType !== StartMode.DIRECT
                                    && cpt.ScopeType !== StartMode.EXTERNAL_PROCESS
                                    && cpt.ScopeType !== "Undefined") {
                                    extendElements.push(cpt);
                                }
                            }
                        }
                        catch (e_22_1) { e_22 = { error: e_22_1 }; }
                        finally {
                            try {
                                if (procCpts_3_1 && !procCpts_3_1.done && (_g = procCpts_3.return)) _g.call(procCpts_3);
                            }
                            finally { if (e_22) throw e_22.error; }
                        }
                    }
                }
                // 如果是子流程则不需要其他处理(取数构件已经放进去了)
            }
        }
        else { // 直接流程
            // 直接流程
            // 直接流程过滤掉共享的构件
            /** @type {?} */
            var actualCmps = procCpts.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return WfDesignerUtils.isPfComponent(p.metadataId) === false; }));
            if (actualCmps && actualCmps.length > 0) {
                try {
                    for (var actualCmps_1 = tslib_1.__values(actualCmps), actualCmps_1_1 = actualCmps_1.next(); !actualCmps_1_1.done; actualCmps_1_1 = actualCmps_1.next()) {
                        var procCpt = actualCmps_1_1.value;
                        /** @type {?} */
                        var cpt = new Component(process.Model);
                        cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                        cpt.MetadataId = procCpt.metadataId;
                        cpt.MethodCode = procCpt.methodCode;
                        cpt.Id = procCpt.id;
                        cpt.Name = procCpt.name;
                        cpt.isForCompensation = procCpt.isForCompensation;
                        if (procCpt.scopeType) {
                            cpt.ScopeType = procCpt.scopeType;
                        }
                        else {
                            cpt.ScopeType = "Undefined";
                        }
                        cpt.ActualParameters = [];
                        if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                            try {
                                for (var _u = tslib_1.__values(procCpt.actualParameters), _v = _u.next(); !_v.done; _v = _u.next()) {
                                    var item = _v.value;
                                    /** @type {?} */
                                    var parameter = new ActualParameter(process.Model, item.code, item.value);
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            catch (e_25_1) { e_25 = { error: e_25_1 }; }
                            finally {
                                try {
                                    if (_v && !_v.done && (_k = _u.return)) _k.call(_u);
                                }
                                finally { if (e_25) throw e_25.error; }
                            }
                        }
                        // 避免重复的放入取数构件,子流程和外部流程的构件，要未定义，直接，全量的
                        if (cpt.ScopeType !== StartMode.EXTERNAL_PROCESS
                            && cpt.ScopeType !== StartMode.SUB_PROCESS) {
                            extendElements.push(cpt);
                        }
                    }
                }
                catch (e_24_1) { e_24 = { error: e_24_1 }; }
                finally {
                    try {
                        if (actualCmps_1_1 && !actualCmps_1_1.done && (_j = actualCmps_1.return)) _j.call(actualCmps_1);
                    }
                    finally { if (e_24) throw e_24.error; }
                }
            }
        }
    };
    /**
     * @param {?} forms
     * @return {?}
     */
    WfProcessCell.prototype.updateExecuteForms = /**
     * @param {?} forms
     * @return {?}
     */
    function (forms) {
        var e_26, _a;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        //删除表单构件
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ExecuteForm) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        try {
            for (var forms_1 = tslib_1.__values(forms), forms_1_1 = forms_1.next(); !forms_1_1.done; forms_1_1 = forms_1.next()) {
                var f = forms_1_1.value;
                this.updateExecuteForm(f);
            }
        }
        catch (e_26_1) { e_26 = { error: e_26_1 }; }
        finally {
            try {
                if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);
            }
            finally { if (e_26) throw e_26.error; }
        }
    };
    /**
     * @param {?} form
     * @param {?=} terminal
     * @return {?}
     */
    WfProcessCell.prototype.updateExecuteForm = /**
     * @param {?} form
     * @param {?=} terminal
     * @return {?}
     */
    function (form, terminal) {
        var e_27, _a;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        //删除表单构件
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ExecuteForm) {
                    /** @type {?} */
                    var f = (/** @type {?} */ (extendElements[i - 1]));
                    if (f.TerminalType === (terminal ? terminal : form.TerminalType)) {
                        extendElements.splice(i - 1, 1);
                    }
                }
            }
        }
        if (form) {
            /** @type {?} */
            var params = (/** @type {?} */ (form.ActualParameters));
            /** @type {?} */
            var actParas = new Array();
            if (params && params.length > 0) {
                try {
                    for (var params_1 = tslib_1.__values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                        var para = params_1_1.value;
                        /** @type {?} */
                        var actPara = new ActualParameter(process.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === "{\"expr\":") {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                catch (e_27_1) { e_27 = { error: e_27_1 }; }
                finally {
                    try {
                        if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
                    }
                    finally { if (e_27) throw e_27.error; }
                }
            }
            /** @type {?} */
            var id = BpmnModelHelper.GenerateElementId();
            /** @type {?} */
            var item = new ExecuteForm(process.Model, id, form.Name, actParas);
            item.ComponentId = form.ComponentId;
            item.FormType = form.FormType;
            item.formFormatId = form.formFormatId;
            item.formatConfigId = form.formatConfigId;
            item.TerminalType = form.TerminalType;
            extendElements.push(item);
        }
    };
    /**
     * @param {?} customizeActions
     * @return {?}
     */
    WfProcessCell.prototype.updateCustomizeActions = /**
     * @param {?} customizeActions
     * @return {?}
     */
    function (customizeActions) {
        var e_28, _a, e_29, _b;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof CustomizeAction) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        //重新绑定
        if (customizeActions && customizeActions.length > 0) {
            try {
                for (var customizeActions_1 = tslib_1.__values(customizeActions), customizeActions_1_1 = customizeActions_1.next(); !customizeActions_1_1.done; customizeActions_1_1 = customizeActions_1.next()) {
                    var a = customizeActions_1_1.value;
                    /** @type {?} */
                    var action = new CustomizeAction(process.Model);
                    action.id = BpmnModelHelper.GenerateElementId();
                    action.code = a.code;
                    action.name = a.name;
                    action.terminalType = a.terminalType;
                    // action.enable = a.enable;
                    action.actualParameters = [];
                    if (a.actualParameters && a.actualParameters.length > 0) {
                        try {
                            for (var _c = tslib_1.__values(a.actualParameters), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var p = _d.value;
                                /** @type {?} */
                                var parameter = new ActualParameter(process.Model, p.Name, p.Value, p.ValueText, p.Tag || 'expression');
                                action.actualParameters.push(parameter);
                            }
                        }
                        catch (e_29_1) { e_29 = { error: e_29_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_29) throw e_29.error; }
                        }
                    }
                    extendElements.push(action);
                }
            }
            catch (e_28_1) { e_28 = { error: e_28_1 }; }
            finally {
                try {
                    if (customizeActions_1_1 && !customizeActions_1_1.done && (_a = customizeActions_1.return)) _a.call(customizeActions_1);
                }
                finally { if (e_28) throw e_28.error; }
            }
        }
    };
    /**
     * 更新流程备注
     * @param bpmnModel
     * @param value
     */
    /**
     * 更新流程备注
     * @param {?} value
     * @return {?}
     */
    WfProcessCell.prototype.modifyProcessTitleExpression = /**
     * 更新流程备注
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof TitleExpression) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        /** @type {?} */
        var title = new TitleExpression(process.Model);
        if (typeof (value) === 'string' || value == null) {
            title = new TitleExpression(process.Model, value);
        }
        else {
            title = new TitleExpression(process.Model, value['zh-CHS'], value);
        }
        extendElements.push(title);
    };
    /**
     * @param {?} ffName
     * @param {?=} bizObjId
     * @param {?=} ffId
     * @return {?}
     */
    WfProcessCell.prototype.updateProcessHeader = /**
     * @param {?} ffName
     * @param {?=} bizObjId
     * @param {?=} ffId
     * @return {?}
     */
    function (ffName, bizObjId, ffId) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (var i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).BizDefName = ffName;
                    ((/** @type {?} */ (extendElements[i]))).BizObjId = bizObjId;
                    ((/** @type {?} */ (extendElements[i]))).BizDefKey = ffId;
                    return;
                }
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    WfProcessCell.prototype.bindProcessTitleExpression = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        /** @type {?} */
        var titleExpression = (/** @type {?} */ (extendElements.find((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.ClrTypeID === TitleExpression.Clr_Type_ID; }))));
        if (titleExpression && titleExpression.value) {
            return;
        }
        /** @type {?} */
        var title = new TitleExpression(process.Model, value);
        extendElements.push(title);
    };
    /**
     * 基于流程分类的切换更新流程构件
     */
    /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @return {?}
     */
    WfProcessCell.prototype.updateProcessComponents = /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @return {?}
     */
    function (procCpts) {
        var e_30, _a, e_31, _b;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof Component
                    && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        //重新绑定
        if (procCpts && procCpts.length > 0) {
            try {
                for (var procCpts_4 = tslib_1.__values(procCpts), procCpts_4_1 = procCpts_4.next(); !procCpts_4_1.done; procCpts_4_1 = procCpts_4.next()) {
                    var procCpt = procCpts_4_1.value;
                    /** @type {?} */
                    var cpt = new Component(process.Model);
                    cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                    cpt.MetadataId = procCpt.metadataId;
                    cpt.MethodCode = procCpt.methodCode;
                    cpt.Id = procCpt.id;
                    cpt.Name = procCpt.name;
                    cpt.isForCompensation = procCpt.isForCompensation;
                    cpt.ActualParameters = [];
                    if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                        try {
                            for (var _c = tslib_1.__values(procCpt.actualParameters), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var item = _d.value;
                                /** @type {?} */
                                var parameter = new ActualParameter(process.Model, item.code, item.value);
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        catch (e_31_1) { e_31 = { error: e_31_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_31) throw e_31.error; }
                        }
                    }
                    extendElements.push(cpt);
                }
            }
            catch (e_30_1) { e_30 = { error: e_30_1 }; }
            finally {
                try {
                    if (procCpts_4_1 && !procCpts_4_1.done && (_a = procCpts_4.return)) _a.call(procCpts_4);
                }
                finally { if (e_30) throw e_30.error; }
            }
        }
    };
    /**
     * @param {?} assign
     * @return {?}
     */
    WfProcessCell.prototype.updateAllowPreAssign = /**
     * @param {?} assign
     * @return {?}
     */
    function (assign) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (var i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).allowPreAssign = assign;
                    return;
                }
            }
        }
    };
    /**
     * @param {?} priority
     * @return {?}
     */
    WfProcessCell.prototype.updateEnablePriority = /**
     * @param {?} priority
     * @return {?}
     */
    function (priority) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (var i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).enablePriority = priority;
                    return;
                }
            }
        }
    };
    /**
     * @param {?} startMode
     * @param {?} allCmps
     * @param {?} bizCmps
     * @return {?}
     */
    WfProcessCell.prototype.updateStartMode = /**
     * @param {?} startMode
     * @param {?} allCmps
     * @param {?} bizCmps
     * @return {?}
     */
    function (startMode, allCmps, bizCmps) {
        var e_32, _a;
        // 对于启动方式的提示信息
        switch (startMode) {
            case StartMode.DIRECT:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("directTips"),
                }));
                break;
            case StartMode.EXTERNAL_PROCESS:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("externalTips"),
                }));
                break;
            case StartMode.SUB_PROCESS:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("subprocessTips"),
                }));
                break;
        }
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            /** @type {?} */
            var procHeader = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e instanceof ProcessHeader; }))));
            // 修改启动方式
            procHeader[0].startMode = startMode;
            /** @type {?} */
            var procCpts = allCmps;
            //删除流程构件
            if (extendElements.length > 0) {
                for (var i = extendElements.length; i > 0; i--) {
                    if (extendElements[i - 1] instanceof Component
                        && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION
                        && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.LOADDATA) {
                        extendElements.splice(i - 1, 1);
                    }
                }
            }
            allCmps && allCmps.forEach((/**
             * @param {?} procCpt
             * @return {?}
             */
            function (procCpt) {
                /** @type {?} */
                var cpt = new Component(process.Model);
                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                cpt.MetadataId = procCpt.metadataId;
                cpt.MethodCode = procCpt.methodCode;
                cpt.Id = procCpt.id;
                cpt.Name = procCpt.name;
                cpt.isForCompensation = procCpt.isForCompensation;
                cpt.ActualParameters = [];
                if (procCpt.scopeType) {
                    cpt.ScopeType = procCpt.scopeType;
                }
                else {
                    cpt.ScopeType = "Undefined";
                }
                procCpt.actualParameters && procCpt.actualParameters.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var parameter = new ActualParameter(process.Model, item.code, item.value);
                    cpt.ActualParameters.push(parameter);
                }));
                extendElements.push(cpt);
            }));
            /** @type {?} */
            var procCmps = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e instanceof Component; }))));
            // 如果启动方式是子流程,只保留取数构件
            if (startMode === StartMode.SUB_PROCESS) {
                // Utils.postMessage(ResourceKeys.wf_showTip, {
                //     type: 'message',
                //     level: 'info',
                //     message: `启动方式为子流程，需要移除取数构件以外的流程构件`,
                // });
                for (var i = extendElements.length; i > 0; i--) {
                    if (extendElements[i - 1] instanceof Component) {
                        /** @type {?} */
                        var cmp = (/** @type {?} */ (extendElements[i - 1]));
                        if (cmp.Time !== ToolTime.UNDEFINITION
                            && cmp.Time !== ToolTime.LOADDATA
                            && (cmp.ScopeType !== StartMode.SUB_PROCESS && cmp.ScopeType !== "All_Process")) {
                            extendElements.splice(i - 1, 1);
                        }
                    }
                }
            }
            // 如果启动方式是直接启动,不允许存在共享的构件
            if (startMode === StartMode.DIRECT) {
                // 判断有没有共享（PF）的流程构件
                /** @type {?} */
                var pfCmps = procCmps.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return WfDesignerUtils.isPfComponent(p.MetadataId); }));
                if (pfCmps && pfCmps.length > 0) {
                    // 删掉共享的构件和启动方式
                    for (var i = extendElements.length; i > 0; i--) {
                        if (extendElements[i - 1] instanceof Component) {
                            /** @type {?} */
                            var cmp = (/** @type {?} */ (extendElements[i - 1]));
                            if (WfDesignerUtils.isPfComponent(cmp.MetadataId)
                                || cmp.ScopeType === StartMode.EXTERNAL_PROCESS
                                || cmp.ScopeType === StartMode.SUB_PROCESS) {
                                extendElements.splice(i - 1, 1);
                            }
                        }
                    }
                }
                // 如果启动方式是外部流程
            }
            else if (startMode === StartMode.EXTERNAL_PROCESS) {
                // const otherCmps = procCmps.filter((p: Component) => (p.MetadataId !== ResourceKeys.pf_Cmp_Id1
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id2
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id3
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id4
                //     && p.Time !== ToolTime.LOADDATA
                // ));
                // 判断有没有预制外部流程通用构件
                /** @type {?} */
                var externalCmps = false;
                /** @type {?} */
                var cmps = bizCmps;
                if (cmps && cmps.length > 0) {
                    try {
                        // 此处标记是外部流程通用构件
                        for (var cmps_2 = tslib_1.__values(cmps), cmps_2_1 = cmps_2.next(); !cmps_2_1.done; cmps_2_1 = cmps_2.next()) {
                            var c = cmps_2_1.value;
                            if (c.scopeType === 'ExternalProcess') {
                                externalCmps = true;
                                break;
                            }
                        }
                    }
                    catch (e_32_1) { e_32 = { error: e_32_1 }; }
                    finally {
                        try {
                            if (cmps_2_1 && !cmps_2_1.done && (_a = cmps_2.return)) _a.call(cmps_2);
                        }
                        finally { if (e_32) throw e_32.error; }
                    }
                    // 如果预制了外部流程通用构件,只保留取数构件，没有则不处理
                    if (externalCmps) {
                        for (var i = extendElements.length; i > 0; i--) {
                            if (extendElements[i - 1] instanceof Component) {
                                /** @type {?} */
                                var cmp = (/** @type {?} */ (extendElements[i - 1]));
                                if (cmp.Time !== ToolTime.UNDEFINITION
                                    && cmp.Time !== ToolTime.LOADDATA
                                    && (cmp.ScopeType === StartMode.DIRECT
                                        || cmp.ScopeType === StartMode.SUB_PROCESS
                                        || cmp.ScopeType === "Undefined")) {
                                    extendElements.splice(i - 1, 1);
                                }
                            }
                        }
                    }
                }
            }
        }
        this.editorUi.fireEvent(new mxEventObject(PmfEvents.ShowProperty));
    };
    /**
     * @param {?} variables
     * @return {?}
     */
    WfProcessCell.prototype.updateProcessVariables = /**
     * @param {?} variables
     * @return {?}
     */
    function (variables) {
        var e_33, _a, e_34, _b, e_35, _c;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var objects = process.GetDataObjects();
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (objects && objects.length > 0) {
            var _loop_2 = function (o) {
                if (o instanceof ValuedDataObject && o.DataType.Category !== DataTypes.CustomType) {
                    if (o.variableSetting && o.variableSetting.tag === 'component') {
                        /** @type {?} */
                        var i = extendElements.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) { return (e instanceof Component && e.Id === o.variableSetting.value); }));
                        extendElements.splice(i, 1);
                    }
                    process.RemoveDataObject(o.Id);
                }
            };
            try {
                for (var objects_3 = tslib_1.__values(objects), objects_3_1 = objects_3.next(); !objects_3_1.done; objects_3_1 = objects_3.next()) {
                    var o = objects_3_1.value;
                    _loop_2(o);
                }
            }
            catch (e_33_1) { e_33 = { error: e_33_1 }; }
            finally {
                try {
                    if (objects_3_1 && !objects_3_1.done && (_a = objects_3.return)) _a.call(objects_3);
                }
                finally { if (e_33) throw e_33.error; }
            }
        }
        if (variables !== null && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var v = variables_1_1.value;
                    /** @type {?} */
                    var dataType = new DataType(process.Model);
                    dataType.Category = DataTypes.BasicType;
                    dataType.BasicType = v.basicType;
                    dataType.Description = v.description;
                    /** @type {?} */
                    var dataObject = new ValuedDataObject(process.Model);
                    dataObject.Id = v.id;
                    dataObject.Name = v.name;
                    dataObject.Documentation = v.documentation;
                    dataObject.DataType = dataType;
                    if (v.tag && v.value) {
                        /** @type {?} */
                        var variableSetting = new VariableSetting(process.Model);
                        variableSetting.variableCode = v.name;
                        variableSetting.variableName = v.documentation;
                        variableSetting.tag = v.tag;
                        variableSetting.value = v.value;
                        variableSetting.valueText = v.valueText;
                        dataObject.variableSetting = variableSetting;
                        if (variableSetting.tag === 'component') {
                            /** @type {?} */
                            var c = v.component;
                            if (c) {
                                /** @type {?} */
                                var cpt = new Component(process.Model);
                                cpt.MetadataId = c.MetadataId;
                                cpt.MethodCode = c.MethodCode;
                                cpt.Id = c.Id;
                                cpt.Name = c.Name;
                                cpt.ActualParameters = new Array();
                                if (c.ActualParameters && c.ActualParameters.length > 0) {
                                    try {
                                        for (var _d = tslib_1.__values(c.ActualParameters), _e = _d.next(); !_e.done; _e = _d.next()) {
                                            var a = _e.value;
                                            /** @type {?} */
                                            var parameter = new ActualParameter(process.Model, a.Name, a.Value);
                                            parameter.Tag = a.Tag;
                                            cpt.ActualParameters.push(parameter);
                                        }
                                    }
                                    catch (e_35_1) { e_35 = { error: e_35_1 }; }
                                    finally {
                                        try {
                                            if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                                        }
                                        finally { if (e_35) throw e_35.error; }
                                    }
                                }
                                extendElements.push(cpt);
                            }
                        }
                    }
                    process.AddDataObject(dataObject);
                }
            }
            catch (e_34_1) { e_34 = { error: e_34_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_34) throw e_34.error; }
            }
        }
    };
    /**
     * @param {?} timeLimit
     * @return {?}
     */
    WfProcessCell.prototype.updateProcessTimeLimitControl = /**
     * @param {?} timeLimit
     * @return {?}
     */
    function (timeLimit) {
        var e_36, _a, e_37, _b;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof TimeLimitControl) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        /** @type {?} */
        var timeLimitInfo = (/** @type {?} */ (timeLimit));
        if (timeLimitInfo) {
            /** @type {?} */
            var control = new TimeLimitControl(process.Model);
            control.enable = timeLimitInfo.enable;
            control.tag = timeLimitInfo.tag;
            control.dueTime = timeLimitInfo.dueTime;
            control.timeUnit = timeLimitInfo.timeUnit;
            control.expireOperations = new Array();
            if (timeLimitInfo.expireOperations && timeLimitInfo.expireOperations.length > 0) {
                try {
                    for (var _c = tslib_1.__values(timeLimitInfo.expireOperations), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var o = _d.value;
                        if (o.operationTypeName === 'SendMessageExpireOperation' || !o.operationTypeName) {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var sendMessage = new SendMessageExpireOperation(process.Model);
                            sendMessage.id = BpmnModelHelper.GenerateElementId();
                            sendMessage.durationType = (/** @type {?} */ (operation.durationType));
                            sendMessage.timeDuration = operation.timeDuration;
                            sendMessage.timeUnit = operation.timeUnit;
                            sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                            sendMessage.message = operation.message;
                            sendMessage.subject = operation.subject;
                            sendMessage.sendType = operation.sendType;
                            sendMessage.receiver = operation.receiver;
                            sendMessage.receiverText = operation.receiverText;
                            sendMessage.cycleEnable = operation.cycleEnable;
                            sendMessage.cycleTime = operation.cycleTime;
                            sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                            if (operation.smsMessageTemplate) {
                                /** @type {?} */
                                var smsMessageTemplate = new SmsMessageTemplate(process.Model);
                                smsMessageTemplate.code = operation.smsMessageTemplate.code;
                                smsMessageTemplate.content = operation.smsMessageTemplate.content;
                                smsMessageTemplate.smsMessageVariables = new Array();
                                if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                    try {
                                        for (var _e = tslib_1.__values(operation.smsMessageTemplate.smsMessageVariables), _f = _e.next(); !_f.done; _f = _e.next()) {
                                            var v = _f.value;
                                            /** @type {?} */
                                            var variable = new SmsMessageVariable(process.Model);
                                            variable.code = v.code;
                                            variable.value = v.value;
                                            variable.tag = v.tag;
                                            smsMessageTemplate.smsMessageVariables.push(variable);
                                        }
                                    }
                                    catch (e_37_1) { e_37 = { error: e_37_1 }; }
                                    finally {
                                        try {
                                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                        }
                                        finally { if (e_37) throw e_37.error; }
                                    }
                                }
                                sendMessage.smsMessageTemplate = smsMessageTemplate;
                            }
                            control.expireOperations.push(sendMessage);
                        }
                        else if (o.operationTypeName === 'AutoHandleExpireOperation') {
                            /** @type {?} */
                            var operation = (/** @type {?} */ (o));
                            /** @type {?} */
                            var autoHandle = new AutoHandleExpireOperation(process.Model);
                            autoHandle.id = BpmnModelHelper.GenerateElementId();
                            autoHandle.durationType = (/** @type {?} */ (operation.durationType));
                            autoHandle.timeDuration = operation.timeDuration;
                            autoHandle.timeUnit = operation.timeUnit;
                            autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                            autoHandle.autoHandleType = operation.autoHandleType;
                            autoHandle.message = operation.message;
                            control.expireOperations.push(autoHandle);
                        }
                    }
                }
                catch (e_36_1) { e_36 = { error: e_36_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_36) throw e_36.error; }
                }
            }
            extendElements.push(control);
        }
    };
    /**
     * @param {?} notices
     * @return {?}
     */
    WfProcessCell.prototype.updateProcessMessageNotices = /**
     * @param {?} notices
     * @return {?}
     */
    function (notices) {
        var e_38, _a, e_39, _b, e_40, _c, e_41, _d;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof MessageNotice) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        if (notices && notices.length > 0) {
            try {
                for (var notices_1 = tslib_1.__values(notices), notices_1_1 = notices_1.next(); !notices_1_1.done; notices_1_1 = notices_1.next()) {
                    var n = notices_1_1.value;
                    /** @type {?} */
                    var messageNotice = new MessageNotice(process.Model);
                    messageNotice.sendType = n.sendType;
                    messageNotice.sendTime = n.sendTime;
                    messageNotice.subject = n.subject;
                    messageNotice.content = n.content;
                    // messageNotice.receiver = n.receiver;
                    // messageNotice.receiverText = n.receiverText;
                    n.receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r.type; }));
                    if (n.receivers && n.receivers.length > 0) {
                        /** @type {?} */
                        var receivers = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'userParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant'); }));
                        /** @type {?} */
                        var participants = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'variableParticipant' || r.type === 'positionParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant'); }));
                        if (receivers && receivers.length > 0) {
                            /** @type {?} */
                            var receiver = '';
                            /** @type {?} */
                            var receiverName = '';
                            try {
                                for (var receivers_1 = tslib_1.__values(receivers), receivers_1_1 = receivers_1.next(); !receivers_1_1.done; receivers_1_1 = receivers_1.next()) {
                                    var r = receivers_1_1.value;
                                    if (r.type === 'processParticipant') {
                                        receiver += (r.processParticipant + ',');
                                        if (r.processParticipant === 'procInstCreator') {
                                            receiverName += '流程发起人,';
                                        }
                                        else if (r.processParticipant === 'workItemParticipant') {
                                            receiverName += '任务接收人,';
                                        }
                                    }
                                    else if (r.type === 'userParticipant') {
                                        receiver += (r.userIds + ',');
                                        receiverName += (r.userNames + ',');
                                    }
                                }
                            }
                            catch (e_39_1) { e_39 = { error: e_39_1 }; }
                            finally {
                                try {
                                    if (receivers_1_1 && !receivers_1_1.done && (_b = receivers_1.return)) _b.call(receivers_1);
                                }
                                finally { if (e_39) throw e_39.error; }
                            }
                            if (receiver) {
                                receiver = receiver.substring(0, receiver.length - 1);
                            }
                            if (receiverName) {
                                receiverName = receiverName.substring(0, receiverName.length - 1);
                            }
                            messageNotice.receiver = receiver;
                            messageNotice.receiverText = receiverName;
                        }
                        if (participants && participants.length > 0) {
                            /** @type {?} */
                            var receiverExpressions = new Array();
                            try {
                                for (var participants_1 = tslib_1.__values(participants), participants_1_1 = participants_1.next(); !participants_1_1.done; participants_1_1 = participants_1.next()) {
                                    var p = participants_1_1.value;
                                    if (p.type === 'processParticipant') {
                                        /** @type {?} */
                                        var activityExecutor = new ActivityExecutorParticipantExpression(process.Model);
                                        activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                        activityExecutor.activityDefId = p.activityDefId;
                                        activityExecutor.activityDefName = p.activityDefName;
                                        receiverExpressions.push(activityExecutor);
                                    }
                                    if (p.type === 'variableParticipant') {
                                        /** @type {?} */
                                        var variableParticipant = new UserParticipantExpression(process.Model, p.variableParticipant, p.variableName, p.orgType);
                                        variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                        variableParticipant.Tag = 'expression';
                                        variableParticipant.OrgType = p.orgType;
                                        receiverExpressions.push(variableParticipant);
                                    }
                                    if (p.type === 'positionParticipant') {
                                        /** @type {?} */
                                        var posiParticipant = new PositionParticipantExpression(process.Model, p.positionId, p.positionName);
                                        posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                        posiParticipant.PositionType = p.positionType;
                                        if (p.positionType === '1') {
                                            posiParticipant.OrgId = p.orgId;
                                            posiParticipant.OrgType = p.orgType;
                                        }
                                        receiverExpressions.push(posiParticipant);
                                    }
                                }
                            }
                            catch (e_40_1) { e_40 = { error: e_40_1 }; }
                            finally {
                                try {
                                    if (participants_1_1 && !participants_1_1.done && (_c = participants_1.return)) _c.call(participants_1);
                                }
                                finally { if (e_40) throw e_40.error; }
                            }
                            messageNotice.receiverExpressions = receiverExpressions;
                        }
                    }
                    if (n.smsMessageTemplate) {
                        /** @type {?} */
                        var smsMessageTemplate = new SmsMessageTemplate(process.Model);
                        smsMessageTemplate.code = n.smsMessageTemplate.code;
                        smsMessageTemplate.content = n.smsMessageTemplate.content;
                        smsMessageTemplate.smsMessageVariables = new Array();
                        if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                            try {
                                for (var _e = tslib_1.__values(n.smsMessageTemplate.smsMessageVariables), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var v = _f.value;
                                    /** @type {?} */
                                    var variable = new SmsMessageVariable(process.Model);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            catch (e_41_1) { e_41 = { error: e_41_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
                                }
                                finally { if (e_41) throw e_41.error; }
                            }
                        }
                        messageNotice.smsMessageTemplate = smsMessageTemplate;
                    }
                    extendElements.push(messageNotice);
                }
            }
            catch (e_38_1) { e_38 = { error: e_38_1 }; }
            finally {
                try {
                    if (notices_1_1 && !notices_1_1.done && (_a = notices_1.return)) _a.call(notices_1);
                }
                finally { if (e_38) throw e_38.error; }
            }
        }
    };
    /**
     * @param {?} imageSettings
     * @return {?}
     */
    WfProcessCell.prototype.updateImageSettings = /**
     * @param {?} imageSettings
     * @return {?}
     */
    function (imageSettings) {
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (var i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ImageSettings) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        if (imageSettings) {
            /** @type {?} */
            var imageSetting = new ImageSettings(process.Model);
            imageSetting.imageOperation = imageSettings.imageOperation;
            extendElements.push(imageSetting);
        }
    };
    /**
     * 更新扩展属性
     * @param bpmnModel
     * @param value
     */
    /**
     * 更新扩展属性
     * @param {?} value
     * @return {?}
     */
    WfProcessCell.prototype.resetExtendProperty = /**
     * 更新扩展属性
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var e_42, _a, e_43, _b;
        /** @type {?} */
        var process = this.process;
        /** @type {?} */
        var extendElements = process.GetExtensionElements();
        try {
            for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var o = value_1_1.value;
                try {
                    for (var extendElements_2 = tslib_1.__values(extendElements), extendElements_2_1 = extendElements_2.next(); !extendElements_2_1.done; extendElements_2_1 = extendElements_2.next()) {
                        var e = extendElements_2_1.value;
                        if (e instanceof ExtendProperty && e.key === o.code) {
                            /** @type {?} */
                            var index = extendElements.indexOf(e);
                            if (index > -1) {
                                extendElements.splice(index, 1);
                            }
                        }
                    }
                }
                catch (e_43_1) { e_43 = { error: e_43_1 }; }
                finally {
                    try {
                        if (extendElements_2_1 && !extendElements_2_1.done && (_b = extendElements_2.return)) _b.call(extendElements_2);
                    }
                    finally { if (e_43) throw e_43.error; }
                }
            }
        }
        catch (e_42_1) { e_42 = { error: e_42_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_42) throw e_42.error; }
        }
        /** @type {?} */
        var attributes = (/** @type {?} */ (value));
        if (attributes) {
            attributes.forEach((/**
             * @param {?} a
             * @return {?}
             */
            function (a) {
                /** @type {?} */
                var item = new ExtendProperty(process.Model);
                item.key = a.code;
                item.value = a.value;
                extendElements.push(item);
            }));
        }
    };
    /**
     * @param {?} wholeOrderRetrieve
     * @return {?}
     */
    WfProcessCell.prototype.updateEnableWholeOrderRetrieve = /**
     * @param {?} wholeOrderRetrieve
     * @return {?}
     */
    function (wholeOrderRetrieve) {
        /** @type {?} */
        var extendElements = this.process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (var i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve = wholeOrderRetrieve;
                    return;
                }
            }
        }
    };
    return WfProcessCell;
}(ProcessCell));
/**
 * 流程元素类。
 * 取名虽然Cell，但实际上不需要继承mxCell以及Cell类，仅持有流程与画布实例，方法属性获取与修改操作。
 */
export { WfProcessCell };
if (false) {
    /** @type {?} */
    WfProcessCell.prototype.process;
    /** @type {?} */
    WfProcessCell.prototype.plane;
    /** @type {?} */
    WfProcessCell.prototype.editorUi;
    /** @type {?} */
    WfProcessCell.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ZQcm9jZXNzQ2VsbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZGVzaWduZXIvd2YtY2VsbC9XZlByb2Nlc3NDZWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUE0QixxQkFBcUIsRUFBaUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlJLE9BQU8sRUFBaUMsZUFBZSxFQUFvQixTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hJLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBdUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLDZCQUE2QixFQUFFLHlCQUF5QixFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLDhCQUE4QixFQUFFLDBCQUEwQixFQUFFLHlCQUF5QixFQUFFLDZCQUE2QixFQUFFLHFDQUFxQyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixHQUFHLE1BQU0sMEJBQTBCLENBQUM7QUFDdGtCLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLG1C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QUFpQjs7SUFDakIsaUNBQXFCOztJQUNyQixnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYXJyaXNQcm9wQ29uZmlnV2l0aERhdGEsIEVsZW1lbnRQcm9wZXJ0eUNvbmZpZywgSUZhcnJpc1Byb3BlcnR5UGFuZWxPcGVyYXRpb24sIFBtZkV2ZW50cywgUHJvY2Vzc0NlbGwgfSBmcm9tIFwiQGVkcC1wbWYvZ3JhcGhlZGl0b3JcIjtcclxuaW1wb3J0IHsgQnBtbk1vZGVsLCBQcm9jZXNzLCBCUE1OUGxhbmUsIEJwbW5Nb2RlbEhlbHBlciwgRXh0ZW5zaW9uRWxlbWVudCwgRGF0YVR5cGVzLCBEYXRhVHlwZSwgRGF0YU9iamVjdCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IFByb2Nlc3NIZWFkZXIsIFN0YXJ0TW9kZSwgQ29tcG9uZW50LCBQYXJ0aWNpcGFudEV4cHJlc3Npb24sIER1cmF0aW9uVHlwZSwgQ0RUU2NoZW1hVHlwZSwgVG9vbFRpbWUsIEV4ZWN1dGVGb3JtLCBWYXJpYWJsZVNldHRpbmcsIEFjdHVhbFBhcmFtZXRlciwgVGl0bGVFeHByZXNzaW9uLCBDdXN0b21pemVBY3Rpb24sIE1lc3NhZ2VOb3RpY2UsIFRpbWVMaW1pdENvbnRyb2wsIEV4dGVuZFByb3BlcnR5LCBJbWFnZVNldHRpbmdzLCBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbiwgVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbiwgVmFsdWVkRGF0YU9iamVjdCwgVGltZUxpbWl0Q29udHJvbEluZm8sIFNlbmRNZXNzYWdlRXhwaXJlT3BlcmF0aW9uSW5mbywgU2VuZE1lc3NhZ2VFeHBpcmVPcGVyYXRpb24sIEF1dG9IYW5kbGVFeHBpcmVPcGVyYXRpb24sIEF1dG9IYW5kbGVFeHBpcmVPcGVyYXRpb25JbmZvLCBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uLCBTbXNNZXNzYWdlVGVtcGxhdGUsIFNtc01lc3NhZ2VWYXJpYWJsZSwgfSBmcm9tIFwiQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsXCI7XHJcbmltcG9ydCB7IG14RXZlbnRPYmplY3QsIG14UmVzb3VyY2VzIH0gZnJvbSBcIkBlZHAtcG1mL214Z3JhcGgtdHNcIjtcclxuaW1wb3J0IHsgV2ZFZGl0b3JVaSB9IGZyb20gXCIuLi9XZkVkaXRvclVpXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VSZWNlaXZlciB9IGZyb20gXCIuLi9lbnRpdHkvTWVzc2FnZVJlY2VpdmVyXCI7XHJcbmltcG9ydCB7IEJpekNvbXBvbmVudCB9IGZyb20gXCIuLi9lbnRpdHkvQml6Q29tcG9uZW50XCI7XHJcbmltcG9ydCB7IEJpelBhcmFtZXRlciB9IGZyb20gXCIuLi9lbnRpdHkvQml6UGFyYW1ldGVyXCI7XHJcbmltcG9ydCB7IFdmRGVzaWduZXJVdGlscyB9IGZyb20gXCIuLi9XZkRlc2lnbmVyVXRpbHNcIjtcclxuaW1wb3J0IHsgV2ZFdmVudHMgfSBmcm9tIFwiLi4vV2ZFdmVudHNcIjtcclxuaW1wb3J0IHsgUHJvY2Vzc1Byb3BlcnR5S2V5cyB9IGZyb20gXCIuL3Byb3BlcnR5LWtleXMvUHJvY2Vzc1Byb3BlcnR5S2V5c1wiO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUhlbHBlciB9IGZyb20gXCIuL1Byb3BlcnR5SGVscGVyXCI7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tIFwiLi4vLi4vYXBwL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZVwiO1xyXG5pbXBvcnQgeyBXZkxvY2FsZVBpcGUgfSBmcm9tIFwiLi4vLi4vaTE4bi9waXBlL3dmLXByb2Nlc3MtZWRpdG9yLWxvY2FsZS5waXBlXCI7XHJcblxyXG4vKipcclxuICog5rWB56iL5YWD57Sg57G744CCXHJcbiAqIOWPluWQjeiZveeEtkNlbGzvvIzkvYblrp7pmYXkuIrkuI3pnIDopoHnu6fmib9teENlbGzku6Xlj4pDZWxs57G777yM5LuF5oyB5pyJ5rWB56iL5LiO55S75biD5a6e5L6L77yM5pa55rOV5bGe5oCn6I635Y+W5LiO5L+u5pS55pON5L2c44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV2ZQcm9jZXNzQ2VsbCBleHRlbmRzIFByb2Nlc3NDZWxsIHtcclxuICAgIHByb2Nlc3M6IFByb2Nlc3M7XHJcbiAgICBwbGFuZTogQlBNTlBsYW5lO1xyXG4gICAgZWRpdG9yVWk6IFdmRWRpdG9yVWk7XHJcbiAgICB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlO1xyXG5cclxuICAgIGdldEZhcnJpc1Byb3BDb25maWcoKTogRmFycmlzUHJvcENvbmZpZ1dpdGhEYXRhIHtcclxuICAgICAgICBsZXQgZXh0ZW5kTGlzdCA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLmVkaXRvclVpLnByb2NFeHRQcm9wcyAmJiB0aGlzLmVkaXRvclVpLnByb2NFeHRQcm9wcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZExpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZWRpdG9yVWkucHJvY0V4dFByb3BzKSkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuc29ydE9yZGVyIC0gYi5zb3J0T3JkZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleHRlbmRMaXN0ID0gZXh0ZW5kTGlzdC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLnNvcnRPcmRlciAtIGIuc29ydE9yZGVyO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgcHJvcGVydHlEYXRhID0ge307XHJcbiAgICAgICAgbGV0IHVzdWFsID0gbmV3IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZygpO1xyXG4gICAgICAgIHVzdWFsLmNhdGVnb3J5SWQgPSAndXN1YWwnO1xyXG4gICAgICAgIHVzdWFsLmNhdGVnb3J5TmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJiYXNpY0luZm9cIik7XHJcbiAgICAgICAgdXN1YWwudGFiSWQgPSAnYmFzaWMnO1xyXG4gICAgICAgIHVzdWFsLnRhYk5hbWUgPSAgbXhSZXNvdXJjZXMuZ2V0KFwiYmFzaWNcIik7XHJcbiAgICAgICAgdXN1YWwucHJvcGVydGllcyA9IFtcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBQcm9jZXNzUHJvcGVydHlLZXlzLk5hbWUsIHByb3BlcnR5TmFtZTogIG14UmVzb3VyY2VzLmdldChcIm5hbWVcIiksIHByb3BlcnR5VHlwZTogJ3N0cmluZycsIHZpc2libGU6ICF0aGlzLmVkaXRvclVpLm11bHRpTGFuZ0VuYWJsZWQgfSxcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBQcm9jZXNzUHJvcGVydHlLZXlzLk5hbWVMYW5ndWFnZSwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwibmFtZUxhbmd1YWdlXCIpLCBwcm9wZXJ0eVR5cGU6ICdtdWx0aUxhbmd1YWdlJywgdmlzaWJsZTogdGhpcy5lZGl0b3JVaS5tdWx0aUxhbmdFbmFibGVkIH0sXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogUHJvY2Vzc1Byb3BlcnR5S2V5cy5LZXksIHByb3BlcnR5TmFtZTogIG14UmVzb3VyY2VzLmdldChcImtleVwiKSwgcHJvcGVydHlUeXBlOiAnc3RyaW5nJywgcmVhZG9ubHk6IHRydWUgfSxcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBQcm9jZXNzUHJvcGVydHlLZXlzLkVudHJ5Rm9ybSwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwiZW50cnlGb3JtXCIpLCBwcm9wZXJ0eVR5cGU6ICdtb2RhbCcgfSxcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBQcm9jZXNzUHJvcGVydHlLZXlzLnN0YXJ0TW9kZSwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwic3RhcnRNb2RlXCIpLCBwcm9wZXJ0eVR5cGU6ICdzZWxlY3QnIH0sXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9UaXRsZUV4cHJlc3Npb24sIHByb3BlcnR5TmFtZTogIG14UmVzb3VyY2VzLmdldChcIndmVGl0bGVcIiksIHByb3BlcnR5VHlwZTogJ21vZGFsJyB9LFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGxldCBmb3JtRGVmID0gbmV3IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZygpO1xyXG4gICAgICAgIGZvcm1EZWYuY2F0ZWdvcnlJZCA9ICdmb3JtRGVmJztcclxuICAgICAgICBmb3JtRGVmLmNhdGVnb3J5TmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJmb3JtRGVmXCIpO1xyXG4gICAgICAgIGZvcm1EZWYudGFiSWQgPSAnYmFzaWMnO1xyXG4gICAgICAgIGZvcm1EZWYudGFiTmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJiYXNpY1wiKTtcclxuICAgICAgICBmb3JtRGVmLnByb3BlcnRpZXMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9FeGVjdXRlRm9ybXNfUEMsIHByb3BlcnR5TmFtZTogIG14UmVzb3VyY2VzLmdldChcImZvcm1zUENcIiksIHByb3BlcnR5VHlwZTogJ21vZGFsJyB9LFxyXG4gICAgICAgICAgICB7IHByb3BlcnR5SUQ6IFByb2Nlc3NQcm9wZXJ0eUtleXMud2ZfRXhlY3V0ZUZvcm1zX01vYmlsZSwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwiZm9ybXNNb2JpbGVcIiksIHByb3BlcnR5VHlwZTogJ21vZGFsJyB9LFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGxldCBwcm9jZXNzID0gbmV3IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZygpO1xyXG4gICAgICAgIHByb2Nlc3MuY2F0ZWdvcnlJZCA9ICdwcm9jZXNzJztcclxuICAgICAgICBwcm9jZXNzLmNhdGVnb3J5TmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJwcm9jZXNzXCIpO1xyXG4gICAgICAgIHByb2Nlc3MudGFiSWQgPSAnYWR2YW5jZWQnO1xyXG4gICAgICAgIHByb2Nlc3MudGFiTmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJhZHZhbmNlZFwiKTtcclxuICAgICAgICBwcm9jZXNzLnByb3BlcnRpZXMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9Db21wb25lbnQsIHByb3BlcnR5TmFtZTogIG14UmVzb3VyY2VzLmdldChcIndmQ29tcG9uZW50XCIpLCBwcm9wZXJ0eVR5cGU6ICdtb2RhbCcgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBsZXQgYWR2YW5jZWQgPSBuZXcgRWxlbWVudFByb3BlcnR5Q29uZmlnKCk7XHJcbiAgICAgICAgYWR2YW5jZWQuY2F0ZWdvcnlJZCA9ICdhZHZhbmNlZCc7XHJcbiAgICAgICAgYWR2YW5jZWQuY2F0ZWdvcnlOYW1lID0gIG14UmVzb3VyY2VzLmdldChcIm90aGVyQ29uZmlnXCIpO1xyXG4gICAgICAgIGFkdmFuY2VkLnRhYklkID0gJ2FkdmFuY2VkJztcclxuICAgICAgICBhZHZhbmNlZC50YWJOYW1lID0gIG14UmVzb3VyY2VzLmdldChcImFkdmFuY2VkXCIpO1xyXG4gICAgICAgIGFkdmFuY2VkLnByb3BlcnRpZXMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogUHJvY2Vzc1Byb3BlcnR5S2V5cy5wcm9jZXNzVmFyaWFibGVzLCBwcm9wZXJ0eU5hbWU6ICBteFJlc291cmNlcy5nZXQoXCJwcm9jZXNzVmFyaWFibGVzXCIpLCBwcm9wZXJ0eVR5cGU6ICdtb2RhbCcgfSxcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBQcm9jZXNzUHJvcGVydHlLZXlzLndmX0N1c3RvbWl6ZUFjdGlvbiwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwiY3VzdG9taXplQWN0aW9uXCIpLCBwcm9wZXJ0eVR5cGU6ICdtb2RhbCcgfSxcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBQcm9jZXNzUHJvcGVydHlLZXlzLmVuYWJsZVByaW9yaXR5LCBwcm9wZXJ0eU5hbWU6ICBteFJlc291cmNlcy5nZXQoXCJlbmFibGVQcmlvcml0eVwiKSwgcHJvcGVydHlUeXBlOiAnc2VsZWN0JyB9LFxyXG4gICAgICAgICAgICB7IHByb3BlcnR5SUQ6IFByb2Nlc3NQcm9wZXJ0eUtleXMuZW5hYmxlV2hvbGVPcmRlclJldHJpZXZlLCBwcm9wZXJ0eU5hbWU6ICBteFJlc291cmNlcy5nZXQoXCJlbmFibGVXaG9sZU9yZGVyUmV0cmlldmVcIiksIHByb3BlcnR5VHlwZTogJ3NlbGVjdCcsIGRlc2NyaXB0aW9uOiBteFJlc291cmNlcy5nZXQoXCJkZXNjcmlwdGlvblwiKSB9LFxyXG4gICAgICAgICAgICB7IHByb3BlcnR5SUQ6IFByb2Nlc3NQcm9wZXJ0eUtleXMuaW1hZ2VTZXR0aW5ncywgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwibWVzc2FnZVByb3BlcnR5XCIpLCBwcm9wZXJ0eVR5cGU6ICdtb2RhbCcgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCB0aW1lID0gbmV3IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZygpO1xyXG4gICAgICAgIHRpbWUuY2F0ZWdvcnlJZCA9ICdtZXNzYWdlUHJvcGVydHknOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmtojmga/lsZ7mgKdcclxuICAgICAgICB0aW1lLmNhdGVnb3J5TmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJ0aW1lbGluZXNzSW5mb1wiKTtcclxuICAgICAgICB0aW1lLnRhYklkID0gJ2FkdmFuY2VkJztcclxuICAgICAgICB0aW1lLnRhYk5hbWUgPSAgbXhSZXNvdXJjZXMuZ2V0KFwiYWR2YW5jZWRcIik7XHJcbiAgICAgICAgdGltZS5wcm9wZXJ0aWVzID0gW1xyXG4gICAgICAgICAgICB7IHByb3BlcnR5SUQ6IFByb2Nlc3NQcm9wZXJ0eUtleXMudGltZUxpbWl0Q29udHJvbCwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KFwidGltZUxpbWl0Q29udHJvbFwiKSwgcHJvcGVydHlUeXBlOiAnbW9kYWwnIH0sXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogUHJvY2Vzc1Byb3BlcnR5S2V5cy5tZXNzYWdlTm90aWNlLCBwcm9wZXJ0eU5hbWU6ICBteFJlc291cmNlcy5nZXQoXCJtZXNzYWdlTm90aWNlXCIpLCBwcm9wZXJ0eVR5cGU6ICdtb2RhbCcgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICAvLyDmianlsZXlsZ7mgKfliIZncm91cOWkhOeQhu+8jOavj+S4qmdyb3Vw5YyF5ZCr54i257qn5bGe5oCn5ZKM5bGe5LqO5a6D55qE5a2Q5omp5bGV5bGe5oCnXHJcbiAgICAgICAgY29uc3QgZ3JvdXBMaXN0ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBleHRlbmQgb2YgZXh0ZW5kTGlzdCkge1xyXG4gICAgICAgICAgICBpZiAoIWV4dGVuZC5wYXJlbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB7IHBhcmVudDogZXh0ZW5kLCBjaGlsZHM6IG5ldyBBcnJheSgpIH07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgZXh0ZW5kTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnBhcmVudElkID09PSBleHRlbmQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY2hpbGRzLnB1c2goZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZ3JvdXBMaXN0LnB1c2goZ3JvdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOayoeacieaJqeWxleWxnuaAp+WAvOeahOaXtuWAmeS4jeaYvuekuuaJqeWxleWxnuaAp+S4gOagj1xyXG4gICAgICAgIGlmIChncm91cExpc3QgJiYgZ3JvdXBMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kUHJvcGVydHkgPSBuZXcgRWxlbWVudFByb3BlcnR5Q29uZmlnKCk7XHJcbiAgICAgICAgICAgIGV4dGVuZFByb3BlcnR5LmNhdGVnb3J5SWQgPSAnZXh0ZW5kUHJvcGVydHknO1xyXG4gICAgICAgICAgICBleHRlbmRQcm9wZXJ0eS5jYXRlZ29yeU5hbWUgPSAgbXhSZXNvdXJjZXMuZ2V0KFwiZXh0ZW5kUHJvcGVydHlcIik7XHJcbiAgICAgICAgICAgIGV4dGVuZFByb3BlcnR5LnRhYklkID0gJ2FkdmFuY2VkJztcclxuICAgICAgICAgICAgZXh0ZW5kUHJvcGVydHkudGFiTmFtZSA9ICBteFJlc291cmNlcy5nZXQoXCJhZHZhbmNlZFwiKTtcclxuICAgICAgICAgICAgZXh0ZW5kUHJvcGVydHkucHJvcGVydGllcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAvLyDnu4Tnu4fmianlsZXlsZ7mgKfnmoTkuoznuqdsaXN0XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZyBvZiBncm91cExpc3QpIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuZFByb3BlcnR5LnByb3BlcnRpZXMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICB7IHByb3BlcnR5SUQ6IGcucGFyZW50LmlkLCBwcm9wZXJ0eU5hbWU6IGcucGFyZW50LnByb3BlcnR5VGl0bGUsIHByb3BlcnR5VHlwZTogJ21vZGFsJyB9LFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldFByb2Nlc3NQcm9wZXJ0eVZhbHVlKHByb3BlcnR5RGF0YSwgZ3JvdXBMaXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5Q29uZmlnOiBbdXN1YWwsIGZvcm1EZWYsIHByb2Nlc3MsIHRpbWUsIGFkdmFuY2VkLCBleHRlbmRQcm9wZXJ0eV0sXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGE6IHByb3BlcnR5RGF0YVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UHJvY2Vzc1Byb3BlcnR5VmFsdWUocHJvcGVydHlEYXRhLCBncm91cExpc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb25maWc6IFt1c3VhbCwgZm9ybURlZiwgcHJvY2VzcywgdGltZSwgYWR2YW5jZWRdLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEYXRhOiBwcm9wZXJ0eURhdGFcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvcHMob2JqOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eUlEID0gb2JqLnByb3BlcnR5SUQ7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5SUQpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdFbnRyeUZvcm0nOi8v5rWB56iL5YiG57G7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5pu05paw5rWB56iL5YiG57G75ZCN56ew77yI5rWB56iL5YiG57G75ZCN56ew5Y+v6IO95L+u5pS577yJXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9jZXNzSGVhZGVyKG9iai5wcm9wZXJ0eVZhbHVlLm5hbWUsIG9iai5wcm9wZXJ0eVZhbHVlLmJ1c2luZXNzT2JqZWN0SWQsIG9iai5wcm9wZXJ0eVZhbHVlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZsb3dGb3JtSW5mbyhvYmouZm9ybWFsUGFyYW1ldGVycywgb2JqLnByb2Nlc3NCaXpDb21wb25uZXRzLCBvYmouZXhlY3V0ZUZvcm1zLCBvYmouY3VzdG9taXplQWN0aW9ucywgb2JqLmJpekNtcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmluZFByb2Nlc3NUaXRsZUV4cHJlc3Npb24ob2JqLmZsb3dGb3JtLnByb2Nlc3NEZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMud2ZfQ29tcG9uZW50OiAvLyDmtYHnqIvmnoTku7ZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2Nlc3NDb21wb25lbnRzKG9iai5wcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9FeGVjdXRlRm9ybXNfUEM6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFeGVjdXRlRm9ybShvYmoucHJvcGVydHlWYWx1ZSwgJ1BDJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5wYXJhbWV0ZXJzICYmIG9iai5wYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvcGVydHlIZWxwZXIudXBkYXRlRm9ybWFsUGFyYW1ldGVycyh0aGlzLnByb2Nlc3MsIG9iai5wYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMud2ZfRXhlY3V0ZUZvcm1zX01vYmlsZTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUV4ZWN1dGVGb3JtKG9iai5wcm9wZXJ0eVZhbHVlLCAnTU9CSUxFJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5wYXJhbWV0ZXJzICYmIG9iai5wYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvcGVydHlIZWxwZXIudXBkYXRlRm9ybWFsUGFyYW1ldGVycyh0aGlzLnByb2Nlc3MsIG9iai5wYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMud2ZfQ3VzdG9taXplQWN0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VzdG9taXplQWN0aW9ucyhvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMud2ZfVGl0bGVFeHByZXNzaW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kaWZ5UHJvY2Vzc1RpdGxlRXhwcmVzc2lvbihvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMuYWxsb3dQcmVBc3NpZ246XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBbGxvd1ByZUFzc2lnbihvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMuc3RhcnRNb2RlOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhcnRNb2RlKG9iai5wcm9wZXJ0eVZhbHVlLCBvYmouYWxsQml6Q21wcywgb2JqLmJpekNtcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQcm9jZXNzUHJvcGVydHlLZXlzLmVuYWJsZVByaW9yaXR5OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRW5hYmxlUHJpb3JpdHkob2JqLnByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQcm9jZXNzUHJvcGVydHlLZXlzLmVuYWJsZVdob2xlT3JkZXJSZXRyaWV2ZTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVuYWJsZVdob2xlT3JkZXJSZXRyaWV2ZShvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMucHJvY2Vzc1ZhcmlhYmxlczpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2Nlc3NWYXJpYWJsZXMob2JqLnByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQcm9jZXNzUHJvcGVydHlLZXlzLnRpbWVMaW1pdENvbnRyb2w6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9jZXNzVGltZUxpbWl0Q29udHJvbChvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMubWVzc2FnZU5vdGljZTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2Nlc3NNZXNzYWdlTm90aWNlcyhvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb2Nlc3NQcm9wZXJ0eUtleXMuaW1hZ2VTZXR0aW5nczpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUltYWdlU2V0dGluZ3Mob2JqLnByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAvLyDliKTmlq1SZXNvdXJjZUtleXPmmK/kuI3mmK9ncm91cGlkLOaYr+Wwsei1sHJlc2V0RXh0ZW5kUHJvcGVydHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lZGl0b3JVaS5wcm9jRXh0UHJvcHMuZmluZEluZGV4KHAgPT4gcC5pZCA9PT0gcHJvcGVydHlJRCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0RXh0ZW5kUHJvcGVydHkob2JqLnByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyLnVwZGF0ZVByb3BzKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiDorr7nva7mtYHnqIvlsZ7mgKflgLxcclxuICAgICogQHBhcmFtIGJwbW5Nb2RlbFxyXG4gICAgKiBAcGFyYW0gcHJvcGVydHlEYXRhXHJcbiAgICAqIEBwYXJhbSBncm91cExpc3RcclxuICAgICovXHJcbiAgICBzZXRQcm9jZXNzUHJvcGVydHlWYWx1ZShwcm9wZXJ0eURhdGE6IGFueSwgZ3JvdXBMaXN0PzogYW55KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHByb2Nlc3MgPSB0aGlzLnByb2Nlc3M7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MpIHtcclxuICAgICAgICAgICAgaWYgKCFwcm9jZXNzLk5hbWUpXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLk5hbWUgPSAn6buY6K6k5rWB56iLJztcclxuICAgICAgICAgICAgaWYgKCFwcm9jZXNzLktleSlcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MuS2V5ID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcblxyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5JZF0gPSBwcm9jZXNzLklkO1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5DbHJUeXBlSURdID0gcHJvY2Vzcy5DbHJUeXBlSUQ7XHJcbiAgICAgICAgICAgIHByb3BlcnR5RGF0YVtQcm9jZXNzUHJvcGVydHlLZXlzLk5hbWVdID0gcHJvY2Vzcy5OYW1lO1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5OYW1lTGFuZ3VhZ2VdID0gcHJvY2Vzcy5OYW1lTGFuZ3VhZ2UgfHwge1xyXG4gICAgICAgICAgICAgICAgXCJ6aC1DSFNcIjogcHJvY2Vzcy5OYW1lLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5LZXldID0gcHJvY2Vzcy5LZXk7XHJcbiAgICAgICAgICAgIHByb3BlcnR5RGF0YVtQcm9jZXNzUHJvcGVydHlLZXlzLndmX1RpdGxlRXhwcmVzc2lvbl0gPSAnJztcclxuXHJcbiAgICAgICAgICAgIGxldCBleHRlbmRFbGVtZW50czogRXh0ZW5zaW9uRWxlbWVudFtdID0gcHJvY2Vzcy5HZXRFeHRlbnNpb25FbGVtZW50cygpO1xyXG4gICAgICAgICAgICBsZXQgY29tcG9uZW50ID0gW107XHJcbiAgICAgICAgICAgIGxldCB3ZWJGb3JtO1xyXG4gICAgICAgICAgICBsZXQgbW9iaWxlRm9ybTtcclxuICAgICAgICAgICAgbGV0IGN1c3RvbWl6ZUFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHByb0V4dGVuZFByb3BlcnRpZXMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGltYWdlU2V0dGluZ3M7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzTm90aWNlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGZvcmluXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gZXh0ZW5kRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpXSBpbnN0YW5jZW9mIFByb2Nlc3NIZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5FbnRyeUZvcm1dID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLkJpekRlZktleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLkJpekRlZk5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5RGF0YVtQcm9jZXNzUHJvcGVydHlLZXlzLmFsbG93UHJlQXNzaWduXSA9IChleHRlbmRFbGVtZW50c1tpXSBhcyBQcm9jZXNzSGVhZGVyKS5hbGxvd1ByZUFzc2lnbjtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5zdGFydE1vZGVdID0gKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLnN0YXJ0TW9kZTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5lbmFibGVQcmlvcml0eV0gPSAoZXh0ZW5kRWxlbWVudHNbaV0gYXMgUHJvY2Vzc0hlYWRlcikuZW5hYmxlUHJpb3JpdHkgPyAoZXh0ZW5kRWxlbWVudHNbaV0gYXMgUHJvY2Vzc0hlYWRlcikuZW5hYmxlUHJpb3JpdHkgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy5lbmFibGVXaG9sZU9yZGVyUmV0cmlldmVdID0gKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLmVuYWJsZVdob2xlT3JkZXJSZXRyaWV2ZSA/IChleHRlbmRFbGVtZW50c1tpXSBhcyBQcm9jZXNzSGVhZGVyKS5lbmFibGVXaG9sZU9yZGVyUmV0cmlldmUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpXSBpbnN0YW5jZW9mIENvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICYmIChleHRlbmRFbGVtZW50c1tpXSBhcyBDb21wb25lbnQpLlRpbWUgIT09IFRvb2xUaW1lLlVOREVGSU5JVElPTikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5wdXNoKHRoaXMuY29udmVydDJDb21wb25lbnQoZXh0ZW5kRWxlbWVudHNbaV0gYXMgQ29tcG9uZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaV0gaW5zdGFuY2VvZiBFeGVjdXRlRm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm0gPSBleHRlbmRFbGVtZW50c1tpXSBhcyBFeGVjdXRlRm9ybTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybS5UZXJtaW5hbFR5cGUgPT09ICdQQycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViRm9ybSA9IGZvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtLlRlcm1pbmFsVHlwZSA9PT0gJ01PQklMRScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlRm9ybSA9IGZvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2ldIGluc3RhbmNlb2YgVGl0bGVFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlEYXRhW1Byb2Nlc3NQcm9wZXJ0eUtleXMud2ZfVGl0bGVFeHByZXNzaW9uXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChleHRlbmRFbGVtZW50c1tpXSBhcyBUaXRsZUV4cHJlc3Npb24pLnZhbHVlTGFuZ3VhZ2UgPyAoZXh0ZW5kRWxlbWVudHNbaV0gYXMgVGl0bGVFeHByZXNzaW9uKS52YWx1ZUxhbmd1YWdlIDogKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFRpdGxlRXhwcmVzc2lvbikudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaV0gaW5zdGFuY2VvZiBDdXN0b21pemVBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21pemVBY3Rpb25zLnB1c2goZXh0ZW5kRWxlbWVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2ldIGluc3RhbmNlb2YgTWVzc2FnZU5vdGljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzTm90aWNlcy5wdXNoKHRoaXMuZ2V0TWVzc2FnZU5vdGljZShleHRlbmRFbGVtZW50c1tpXSBhcyBNZXNzYWdlTm90aWNlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaV0gaW5zdGFuY2VvZiBUaW1lTGltaXRDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlEYXRhW1Byb2Nlc3NQcm9wZXJ0eUtleXMudGltZUxpbWl0Q29udHJvbF0gPSB0aGlzLmdldFByY29jZXNzVGltZUxpbWl0SW5mbyhleHRlbmRFbGVtZW50c1tpXSBhcyBUaW1lTGltaXRDb250cm9sKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpXSBpbnN0YW5jZW9mIEV4dGVuZFByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvRXh0ZW5kUHJvcGVydGllcy5wdXNoKGV4dGVuZEVsZW1lbnRzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpXSBpbnN0YW5jZW9mIEltYWdlU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbWFnZVNldHRpbmdzLnB1c2goZXh0ZW5kRWxlbWVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5RGF0YVtQcm9jZXNzUHJvcGVydHlLZXlzLmltYWdlU2V0dGluZ3NdID0gZXh0ZW5kRWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc1ZhcmlhYmxlcyA9IHRoaXMuZ2V0UHJvY2Vzc1ZhcmlhYmxlcyhwcm9jZXNzKTtcclxuICAgICAgICAgICAgcHJvcGVydHlEYXRhW1Byb2Nlc3NQcm9wZXJ0eUtleXMucHJvY2Vzc1ZhcmlhYmxlc10gPSBwcm9jZXNzVmFyaWFibGVzO1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9Db21wb25lbnRdID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9FeGVjdXRlRm9ybXNfUENdID0gd2ViRm9ybTtcclxuICAgICAgICAgICAgcHJvcGVydHlEYXRhW1Byb2Nlc3NQcm9wZXJ0eUtleXMud2ZfRXhlY3V0ZUZvcm1zX01vYmlsZV0gPSBtb2JpbGVGb3JtO1xyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGFbUHJvY2Vzc1Byb3BlcnR5S2V5cy53Zl9DdXN0b21pemVBY3Rpb25dID0gY3VzdG9taXplQWN0aW9ucztcclxuICAgICAgICAgICAgcHJvcGVydHlEYXRhW1Byb2Nlc3NQcm9wZXJ0eUtleXMubWVzc2FnZU5vdGljZV0gPSBtZXNzYWdlc05vdGljZXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZyBvZiBncm91cExpc3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIOWPluWbnuaooeWei+S4iueahHZhbHVl5YC857uZ5Yiw5omp5bGV5bGe5oCn57uE5Lu26YeMXHJcbiAgICAgICAgICAgICAgICBpZiAocHJvRXh0ZW5kUHJvcGVydGllcyAmJiBwcm9FeHRlbmRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBnLmNoaWxkcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnNvcnRPcmRlciAtIGIuc29ydE9yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmZvckVhY2goZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb0V4dGVuZFByb3BlcnRpZXMuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PSBkLmNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnZhbHVlID0gZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbZy5wYXJlbnQuaWRdID0gZy5jaGlsZHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvY2Vzc1ZhcmlhYmxlcyhwcm9jZXNzOiBQcm9jZXNzKTogYW55W10ge1xyXG4gICAgICAgIGxldCBwcm9jZXNzVmFyaWFibGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5kRWxlbWVudHM6IEV4dGVuc2lvbkVsZW1lbnRbXSA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICBjb25zdCBkYXRhT2JqZWN0cyA9IHByb2Nlc3MuR2V0RGF0YU9iamVjdHMoKTtcclxuICAgICAgICBpZiAoZGF0YU9iamVjdHMgIT09IG51bGwgJiYgZGF0YU9iamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBkYXRhT2JqZWN0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIFZhbHVlZERhdGFPYmplY3QgJiYgb2JqLkRhdGFUeXBlLkNhdGVnb3J5ICE9PSBEYXRhVHlwZXMuQ3VzdG9tVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBvYmouSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG9iai5OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBvYmouRG9jdW1lbnRhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzaWNUeXBlOiBvYmouRGF0YVR5cGUuQmFzaWNUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6IG9iai52YXJpYWJsZVNldHRpbmcgPyBvYmoudmFyaWFibGVTZXR0aW5nLnRhZyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb2JqLnZhcmlhYmxlU2V0dGluZyA/IG9iai52YXJpYWJsZVNldHRpbmcudmFsdWUgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVUZXh0OiBvYmoudmFyaWFibGVTZXR0aW5nID8gb2JqLnZhcmlhYmxlU2V0dGluZy52YWx1ZVRleHQgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG9iai5EYXRhVHlwZS5EZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai52YXJpYWJsZVNldHRpbmcgJiYgb2JqLnZhcmlhYmxlU2V0dGluZy50YWcgPT09ICdjb21wb25lbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgZXh0ZW5kRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIENvbXBvbmVudCAmJiBlLklkID09PSBvYmoudmFyaWFibGVTZXR0aW5nLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudDogYW55ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IGUuSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiBlLk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXRhZGF0YUlkOiBlLk1ldGFkYXRhSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXRob2RDb2RlOiBlLk1ldGhvZENvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3R1YWxQYXJhbWV0ZXJzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5BY3R1YWxQYXJhbWV0ZXJzICYmIGUuQWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgZS5BY3R1YWxQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiBwLk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlOiBwLlZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYWc6IHAuVGFnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LkFjdHVhbFBhcmFtZXRlcnMucHVzaChwYXJhbWV0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhcmlhYmxlcy5wdXNoKHZhcmlhYmxlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhcmlhYmxlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcmNvY2Vzc1RpbWVMaW1pdEluZm8odGltZUxpbWl0Q29udHJvbDogVGltZUxpbWl0Q29udHJvbCk6IFRpbWVMaW1pdENvbnRyb2xJbmZvIHtcclxuICAgICAgICBsZXQgdGltZUxpbWl0O1xyXG4gICAgICAgIGlmICh0aW1lTGltaXRDb250cm9sKSB7XHJcbiAgICAgICAgICAgIHRpbWVMaW1pdCA9IG5ldyBUaW1lTGltaXRDb250cm9sSW5mbygpO1xyXG4gICAgICAgICAgICB0aW1lTGltaXQuZW5hYmxlID0gdGltZUxpbWl0Q29udHJvbC5lbmFibGU7XHJcbiAgICAgICAgICAgIHRpbWVMaW1pdC50YWcgPSB0aW1lTGltaXRDb250cm9sLnRhZztcclxuICAgICAgICAgICAgdGltZUxpbWl0LmR1ZVRpbWUgPSB0aW1lTGltaXRDb250cm9sLmR1ZVRpbWU7XHJcbiAgICAgICAgICAgIHRpbWVMaW1pdC50aW1lVW5pdCA9IHRpbWVMaW1pdENvbnRyb2wudGltZVVuaXQ7XHJcbiAgICAgICAgICAgIHRpbWVMaW1pdC5leHBpcmVPcGVyYXRpb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgICAgIGlmICh0aW1lTGltaXRDb250cm9sLmV4cGlyZU9wZXJhdGlvbnMgJiYgdGltZUxpbWl0Q29udHJvbC5leHBpcmVPcGVyYXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSB0aW1lTGltaXRDb250cm9sLmV4cGlyZU9wZXJhdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLkNsclR5cGVJRC5pbmRleE9mKCdTZW5kTWVzc2FnZUV4cGlyZU9wZXJhdGlvbicpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBvIGFzIFNlbmRNZXNzYWdlRXhwaXJlT3BlcmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZW5kTWVzc2FnZSA9IG5ldyBTZW5kTWVzc2FnZUV4cGlyZU9wZXJhdGlvbkluZm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UudGltZUR1cmF0aW9uID0gb3BlcmF0aW9uLnRpbWVEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UuZHVyYXRpb25UeXBlID0gb3BlcmF0aW9uLmR1cmF0aW9uVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UudGltZVVuaXQgPSBvcGVyYXRpb24udGltZVVuaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLm1lc3NhZ2UgPSBvcGVyYXRpb24ubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2Uuc2VuZFR5cGUgPSBvcGVyYXRpb24uc2VuZFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLnN1YmplY3QgPSBvcGVyYXRpb24uc3ViamVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UuaWQgPSBvcGVyYXRpb24uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLnJlY2VpdmVyID0gb3BlcmF0aW9uLnJlY2VpdmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5yZWNlaXZlclRleHQgPSBvcGVyYXRpb24ucmVjZWl2ZXJUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5jeWNsZUVuYWJsZSA9IG9wZXJhdGlvbi5jeWNsZUVuYWJsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UuY3ljbGVUaW1lID0gb3BlcmF0aW9uLmN5Y2xlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UuY3ljbGVUaW1lVW5pdCA9IG9wZXJhdGlvbi5jeWNsZVRpbWVVbml0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5vcGVyYXRpb25UeXBlTmFtZSA9IG9wZXJhdGlvbi5vcGVyYXRpb25UeXBlTmFtZSA/IG9wZXJhdGlvbi5vcGVyYXRpb25UeXBlTmFtZSA6ICdTZW5kTWVzc2FnZUV4cGlyZU9wZXJhdGlvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRpb24uc21zTWVzc2FnZVRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbXNUZW1wbGF0ZTogYW55ID0gbmV3IE9iamVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtc1RlbXBsYXRlLmNvZGUgPSBvcGVyYXRpb24uc21zTWVzc2FnZVRlbXBsYXRlLmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbXNUZW1wbGF0ZS5jb250ZW50ID0gb3BlcmF0aW9uLnNtc01lc3NhZ2VUZW1wbGF0ZS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc21zVGVtcGxhdGUuc21zTWVzc2FnZVZhcmlhYmxlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZXJhdGlvbi5zbXNNZXNzYWdlVGVtcGxhdGUuc21zTWVzc2FnZVZhcmlhYmxlcyAmJiBvcGVyYXRpb24uc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBvcGVyYXRpb24uc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGU6IGFueSA9IG5ldyBPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmlkID0gV2ZEZXNpZ25lclV0aWxzLmNyZWF0ZU5NKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmNvZGUgPSB2LmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLnZhbHVlID0gdi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUudGFnID0gdi50YWc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtc1RlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMucHVzaCh2YXJpYWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2Uuc21zTWVzc2FnZVRlbXBsYXRlID0gc21zVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUxpbWl0LmV4cGlyZU9wZXJhdGlvbnMucHVzaChzZW5kTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvLkNsclR5cGVJRC5pbmRleE9mKCdBdXRvSGFuZGxlRXhwaXJlT3BlcmF0aW9uJykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG8gYXMgQXV0b0hhbmRsZUV4cGlyZU9wZXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0b0hhbmRsZSA9IG5ldyBBdXRvSGFuZGxlRXhwaXJlT3BlcmF0aW9uSW5mbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hhbmRsZS5pZCA9IG9wZXJhdGlvbi5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hhbmRsZS5kdXJhdGlvblR5cGUgPSBvcGVyYXRpb24uZHVyYXRpb25UeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvSGFuZGxlLnRpbWVEdXJhdGlvbiA9IG9wZXJhdGlvbi50aW1lRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUudGltZVVuaXQgPSBvcGVyYXRpb24udGltZVVuaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUub3BlcmF0aW9uVHlwZU5hbWUgPSBvcGVyYXRpb24ub3BlcmF0aW9uVHlwZU5hbWUgPyBvcGVyYXRpb24ub3BlcmF0aW9uVHlwZU5hbWUgOiAnQXV0b0hhbmRsZUV4cGlyZU9wZXJhdGlvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUuYXV0b0hhbmRsZVR5cGUgPSBvcGVyYXRpb24uYXV0b0hhbmRsZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUubWVzc2FnZSA9IG9wZXJhdGlvbi5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lTGltaXQuZXhwaXJlT3BlcmF0aW9ucy5wdXNoKGF1dG9IYW5kbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGltZUxpbWl0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1lc3NhZ2VOb3RpY2UobWVzc2FnZU5vdGljZTogTWVzc2FnZU5vdGljZSkge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IGFueSA9IG5ldyBPYmplY3Q7XHJcbiAgICAgICAgbWVzc2FnZS5jb250ZW50ID0gbWVzc2FnZU5vdGljZS5jb250ZW50O1xyXG4gICAgICAgIG1lc3NhZ2Uuc2VuZFRpbWUgPSBtZXNzYWdlTm90aWNlLnNlbmRUaW1lO1xyXG4gICAgICAgIG1lc3NhZ2Uuc2VuZFR5cGUgPSBtZXNzYWdlTm90aWNlLnNlbmRUeXBlO1xyXG4gICAgICAgIG1lc3NhZ2Uuc3ViamVjdCA9IG1lc3NhZ2VOb3RpY2Uuc3ViamVjdDtcclxuICAgICAgICBpZiAobWVzc2FnZU5vdGljZS5zbXNNZXNzYWdlVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3Qgc21zVGVtcGxhdGU6IGFueSA9IG5ldyBPYmplY3Q7XHJcbiAgICAgICAgICAgIHNtc1RlbXBsYXRlLmNvZGUgPSBtZXNzYWdlTm90aWNlLnNtc01lc3NhZ2VUZW1wbGF0ZS5jb2RlO1xyXG4gICAgICAgICAgICBzbXNUZW1wbGF0ZS5jb250ZW50ID0gbWVzc2FnZU5vdGljZS5zbXNNZXNzYWdlVGVtcGxhdGUuY29udGVudDtcclxuICAgICAgICAgICAgc21zVGVtcGxhdGUuc21zTWVzc2FnZVZhcmlhYmxlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBpZiAobWVzc2FnZU5vdGljZS5zbXNNZXNzYWdlVGVtcGxhdGUuc21zTWVzc2FnZVZhcmlhYmxlcyAmJiBtZXNzYWdlTm90aWNlLnNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlTm90aWNlLnNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGU6IGFueSA9IG5ldyBPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUuaWQgPSBXZkRlc2lnbmVyVXRpbHMuY3JlYXRlTk0oKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5jb2RlID0gdi5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLnZhbHVlID0gdi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS50YWcgPSB2LnRhZztcclxuICAgICAgICAgICAgICAgICAgICBzbXNUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzLnB1c2godmFyaWFibGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1lc3NhZ2Uuc21zTWVzc2FnZVRlbXBsYXRlID0gc21zVGVtcGxhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlY2VpdmVyRXhwcmVzc2lvbnMgPSBuZXcgQXJyYXk8TWVzc2FnZVJlY2VpdmVyPigpO1xyXG4gICAgICAgIGlmIChtZXNzYWdlTm90aWNlLnJlY2VpdmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVycyA9IG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXIuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZXJUZXh0cyA9IG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJUZXh0LnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGxldCB1c2VyUmVjZWl2ZXIgPSBuZXcgTWVzc2FnZVJlY2VpdmVyKCk7XHJcbiAgICAgICAgICAgIHVzZXJSZWNlaXZlci50eXBlID0gJ3VzZXJQYXJ0aWNpcGFudCc7XHJcbiAgICAgICAgICAgIHVzZXJSZWNlaXZlci51c2VySWRzID0gJyc7XHJcbiAgICAgICAgICAgIHVzZXJSZWNlaXZlci51c2VyTmFtZXMgPSAnJztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIHJlY2VpdmVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpdmVyc1tpXSA9PT0gJ3Byb2NJbnN0Q3JlYXRvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvY0luc3RDcmVhdG9yID0gbmV3IE1lc3NhZ2VSZWNlaXZlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY0luc3RDcmVhdG9yLnR5cGUgPSAncHJvY2Vzc1BhcnRpY2lwYW50JztcclxuICAgICAgICAgICAgICAgICAgICBwcm9jSW5zdENyZWF0b3IucHJvY2Vzc1BhcnRpY2lwYW50ID0gJ3Byb2NJbnN0Q3JlYXRvcic7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKHByb2NJbnN0Q3JlYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VpdmVyc1tpXSA9PT0gJ3dvcmtJdGVtUGFydGljaXBhbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmtJdGVtUGFydGljaXBhbnQgPSBuZXcgTWVzc2FnZVJlY2VpdmVyKClcclxuICAgICAgICAgICAgICAgICAgICB3b3JrSXRlbVBhcnRpY2lwYW50LnR5cGUgPSAncHJvY2Vzc1BhcnRpY2lwYW50JztcclxuICAgICAgICAgICAgICAgICAgICB3b3JrSXRlbVBhcnRpY2lwYW50LnByb2Nlc3NQYXJ0aWNpcGFudCA9ICd3b3JrSXRlbVBhcnRpY2lwYW50JztcclxuICAgICAgICAgICAgICAgICAgICByZWNlaXZlckV4cHJlc3Npb25zLnB1c2god29ya0l0ZW1QYXJ0aWNpcGFudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJSZWNlaXZlci51c2VySWRzICs9IChyZWNlaXZlcnNbaV0gKyAnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJSZWNlaXZlci51c2VyTmFtZXMgKz0gKHJlY2VpdmVyVGV4dHNbaV0gKyAnLCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1c2VyUmVjZWl2ZXIudXNlcklkcykge1xyXG4gICAgICAgICAgICAgICAgdXNlclJlY2VpdmVyLnVzZXJJZHMgPSB1c2VyUmVjZWl2ZXIudXNlcklkcy5zdWJzdHJpbmcoMCwgdXNlclJlY2VpdmVyLnVzZXJJZHMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB1c2VyUmVjZWl2ZXIudXNlck5hbWVzID0gdXNlclJlY2VpdmVyLnVzZXJOYW1lcy5zdWJzdHJpbmcoMCwgdXNlclJlY2VpdmVyLnVzZXJOYW1lcy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaCh1c2VyUmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtZXNzYWdlTm90aWNlLnJlY2VpdmVyRXhwcmVzc2lvbnMgJiYgbWVzc2FnZU5vdGljZS5yZWNlaXZlckV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJFeHByZXNzaW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudCA9IG5ldyBNZXNzYWdlUmVjZWl2ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQudHlwZSA9ICdwcm9jZXNzUGFydGljaXBhbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5wcm9jZXNzUGFydGljaXBhbnQgPSAnYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50JztcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQuYWN0aXZpdHlEZWZJZCA9IChlIGFzIEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24pLmFjdGl2aXR5RGVmSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LmFjdGl2aXR5RGVmTmFtZSA9IChlIGFzIEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24pLmFjdGl2aXR5RGVmTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBVc2VyUGFydGljaXBhbnRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhcmlhYmxlUmVjZWl2ZXIgPSBuZXcgTWVzc2FnZVJlY2VpdmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVSZWNlaXZlci50eXBlID0gJ3ZhcmlhYmxlUGFydGljaXBhbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlUmVjZWl2ZXIudmFyaWFibGVQYXJ0aWNpcGFudCA9IChlIGFzIFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24pLlVzZXJJZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVJlY2VpdmVyLnZhcmlhYmxlTmFtZSA9IChlIGFzIFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24pLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVSZWNlaXZlci5vcmdUeXBlID0gKGUgYXMgVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbikuT3JnVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICByZWNlaXZlckV4cHJlc3Npb25zLnB1c2godmFyaWFibGVSZWNlaXZlcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwb3NpdGlvblJlY2VpdmVyID0gbmV3IE1lc3NhZ2VSZWNlaXZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uUmVjZWl2ZXIudHlwZSA9ICdwb3NpdGlvblBhcnRpY2lwYW50JztcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblJlY2VpdmVyLnBvc2l0aW9uSWQgPSAoZSBhcyBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbikuUG9zaXRpb25JZDtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblJlY2VpdmVyLnBvc2l0aW9uTmFtZSA9IChlIGFzIFBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uKS5Qb3NpdGlvbk5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25SZWNlaXZlci5wb3NpdGlvblR5cGUgPSAoZSBhcyBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbikuUG9zaXRpb25UeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvblJlY2VpdmVyLnBvc2l0aW9uVHlwZSA9PT0gJzEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uUmVjZWl2ZXIub3JnSWQgPSAoZSBhcyBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbikuT3JnSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uUmVjZWl2ZXIub3JnVHlwZSA9IChlIGFzIFBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uKS5PcmdUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKHBvc2l0aW9uUmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWNlaXZlckV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbWVzc2FnZS5yZWNlaXZlcnMgPSByZWNlaXZlckV4cHJlc3Npb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29udmVydDJDb21wb25lbnQoY29tcG9uZW50OiBDb21wb25lbnQpOiBCaXpDb21wb25lbnQge1xyXG4gICAgICAgIGNvbnN0IGJpekNvbXBvbmVudCA9IG5ldyBCaXpDb21wb25lbnQoKTtcclxuICAgICAgICBiaXpDb21wb25lbnQuaWQgPSBjb21wb25lbnQuSWQ7XHJcbiAgICAgICAgYml6Q29tcG9uZW50Lm5hbWUgPSBjb21wb25lbnQuTmFtZTtcclxuICAgICAgICBiaXpDb21wb25lbnQubWV0YWRhdGFJZCA9IGNvbXBvbmVudC5NZXRhZGF0YUlkO1xyXG4gICAgICAgIGJpekNvbXBvbmVudC5tZXRob2RDb2RlID0gY29tcG9uZW50Lk1ldGhvZENvZGU7XHJcbiAgICAgICAgYml6Q29tcG9uZW50LmV4ZWN1dGlvblRpbWUgPSBjb21wb25lbnQuVGltZTtcclxuICAgICAgICBiaXpDb21wb25lbnQuaXNGb3JDb21wZW5zYXRpb24gPSBjb21wb25lbnQuaXNGb3JDb21wZW5zYXRpb247XHJcbiAgICAgICAgYml6Q29tcG9uZW50LnNjb3BlVHlwZSA9IGNvbXBvbmVudC5TY29wZVR5cGUgfHwgbnVsbDtcclxuICAgICAgICBiaXpDb21wb25lbnQuYWN0dWFsUGFyYW1ldGVycyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGlmIChjb21wb25lbnQuQWN0dWFsUGFyYW1ldGVycyAmJiBjb21wb25lbnQuQWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgY29tcG9uZW50LkFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJpelBhcmFtID0gbmV3IEJpelBhcmFtZXRlcigpO1xyXG4gICAgICAgICAgICAgICAgYml6UGFyYW0uY29kZSA9IHBhcmFtLk5hbWU7XHJcbiAgICAgICAgICAgICAgICBiaXpQYXJhbS5uYW1lID0gcGFyYW0uTmFtZTtcclxuICAgICAgICAgICAgICAgIGJpelBhcmFtLnZhbHVlID0gcGFyYW0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBiaXpDb21wb25lbnQuYWN0dWFsUGFyYW1ldGVycy5wdXNoKGJpelBhcmFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYml6Q29tcG9uZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572uUHJvY2Vzc0hlYWRlclxyXG4gICAgICogQHBhcmFtIGZmSWRcclxuICAgICAqIEBwYXJhbSBiaXpPYmpJZFxyXG4gICAgICogQHBhcmFtIGZmTmFtZVxyXG4gICAgICogQHBhcmFtIHN0YXJ0TW9kZVxyXG4gICAgICovXHJcbiAgICBzZXRQcm9jZXNzSGVhZGVyKGZmSWQ6IHN0cmluZywgYml6T2JqSWQ6IHN0cmluZywgZmZOYW1lOiBzdHJpbmcsIHN0YXJ0TW9kZTogU3RhcnRNb2RlKSB7XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgY29uc3QgcHJvY2Vzc0hlYWRlciA9IG5ldyBQcm9jZXNzSGVhZGVyKHByb2Nlc3MuTW9kZWwsIGZmSWQsIGJpek9iaklkLCBmZk5hbWUsIHN0YXJ0TW9kZSk7XHJcbiAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChwcm9jZXNzSGVhZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOa1geeoi+WIhuexu+e7keWumueahOWPguaVsO+8jOa1geeoi+e7hOS7tu+8jOihqOWNleS/oeaBr1xyXG4gICAgICogQHBhcmFtIHBhcmFtcyDlj4LmlbDliJfooahcclxuICAgICAqIEBwYXJhbSBjcHRzIOa1geeoi+e7hOS7tlxyXG4gICAgICogQHBhcmFtIGZvcm0g5rWB56iL6KGo5Y2VXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUZsb3dGb3JtSW5mbyhwYXJhbXM6IGFueVtdLCBjcHRzOiBhbnlbXSwgZm9ybXM6IGFueVtdLCBjdXN0b21pemVBY3Rpb25zOiBhbnlbXSwgYml6Q21wczogYW55KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGb3JtYWxQYXJhbWV0ZXJzKHBhcmFtcywgY3B0cy5maWx0ZXIoY3B0ID0+IGNwdC5vd25lclR5cGUgPT09ICdTY2hlbWEnKSk7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9jZXNzQ29tcG9uZW50cyhjcHRzLCBiaXpDbXBzKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUV4ZWN1dGVGb3Jtcyhmb3Jtcyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDdXN0b21pemVBY3Rpb25zKGN1c3RvbWl6ZUFjdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUZvcm1hbFBhcmFtZXRlcnMocGFyYW1ldGVyczogYW55W10sIGNtcHM6IGFueVtdID0gbmV3IEFycmF5KCkpIHtcclxuICAgICAgICBpZiAoIXBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgb2JqZWN0cyA9IHByb2Nlc3MuR2V0RGF0YU9iamVjdHMoKTtcclxuICAgICAgICBpZiAocGFyYW1ldGVycyAhPT0gbnVsbCAmJiBwYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFUeXBlID0gbmV3IERhdGFUeXBlKHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHAuZGF0YVR5cGUgPT09ICdDRFRTY2hlbWEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5YWI5riF55CGQ0RUU2NoZW1h57G75Z6L55qEZGF0YU9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBvYmplY3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzrmlbDmja7nsbvlnovkuLpjdXN0b21UeXBl5pqC5pe26buY6K6k5Li65Y+C5pWw6aKE5Yi2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgRGF0YU9iamVjdCAmJiBvLkRhdGFUeXBlLkNhdGVnb3J5ID09PSBEYXRhVHlwZXMuQ3VzdG9tVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5SZW1vdmVEYXRhT2JqZWN0KG8uSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOmHjeaWsOe7keWumua1geeoi+WIhuexu+aUr+aMgeeyvueugGJlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tVHlwZSA9IG5ldyBDRFRTY2hlbWFUeXBlKHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwLm5ld1NjaGVtYUlkICYmIHAubmV3U2NoZW1hTWV0YWRhdGFJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgY3VzdG9tVHlwZS5TY2hlbWFJZCA9IHAubmV3U2NoZW1hSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjdXN0b21UeXBlLk1ldGFkYXRhSWQgPSBwLm5ld1NjaGVtYU1ldGFkYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVR5cGUuU2NoZW1hSWQgPSBwLnNjaGVtYUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgY3VzdG9tVHlwZS5NZXRhZGF0YUlkID0gcC5zY2hlbWFNZXRhZGF0YUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21UeXBlLkNvbXBvbmVudElkID0gY21wcy5maWx0ZXIoY21wID0+IGNtcC5vd25lciA9PT0gcC5zY2hlbWFJZClbMF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGUuQ2F0ZWdvcnkgPSBEYXRhVHlwZXMuQ3VzdG9tVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZS5DdXN0b21UeXBlID0gY3VzdG9tVHlwZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5YWI5riF55CGY29kZeebuOWQjOeahGRhdGFPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygb2JqZWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyBpbnN0YW5jZW9mIERhdGFPYmplY3QgJiYgby5OYW1lID09PSBwLmNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuUmVtb3ZlRGF0YU9iamVjdChvLklkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZS5DYXRlZ29yeSA9IERhdGFUeXBlcy5CYXNpY1R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGUuQmFzaWNUeXBlID0gcC5kYXRhVHlwZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlLkRlc2NyaXB0aW9uID0gcC5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIC8vIGRhdGFUeXBlLkluaXRpYWxWYWx1ZSA9IHAuaW5pdGlhbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHAucGFyYW1ldGVyTW9kZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFPYmplY3QgPSBuZXcgVmFsdWVkRGF0YU9iamVjdChwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhT2JqZWN0Lk5hbWUgPSBwLmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdC5Eb2N1bWVudGF0aW9uID0gcC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFPYmplY3QuRGF0YVR5cGUgPSBkYXRhVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhT2JqZWN0LklzQWxsb3dOdWxsID0gcC5hbGxvd051bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAuaW5pdGlhbFZhbHVlIHx8IHAuaW5pdGlhbFZhbHVlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYWJsZVNldHRpbmcgPSBuZXcgVmFyaWFibGVTZXR0aW5nKHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVNldHRpbmcudmFyaWFibGVDb2RlID0gcC5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVNldHRpbmcudmFyaWFibGVOYW1lID0gcC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVNldHRpbmcudGFnID0gcC5pbml0aWFsVmFsdWVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVNldHRpbmcudmFsdWUgPSBwLmluaXRpYWxWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTZXR0aW5nLnZhbHVlVGV4dCA9IHAuaW5pdGlhbFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdC52YXJpYWJsZVNldHRpbmcgPSB2YXJpYWJsZVNldHRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLkFkZERhdGFPYmplY3QoZGF0YU9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Z+65LqO5rWB56iL5YiG57G755qE5YiH5o2i5pu05paw5rWB56iL5p6E5Lu2XHJcbiAgICAgKi9cclxuICAgIHNldFByb2Nlc3NDb21wb25lbnRzKHByb2NDcHRzOiBhbnlbXSwgYml6Q21wczogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgcHJvY2Vzc0hlYWRlcjogUHJvY2Vzc0hlYWRlcjtcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgLy/liKDpmaTmtYHnqIvmnoTku7ZcclxuICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZXh0ZW5kRWxlbWVudHMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGluc3RhbmNlb2YgQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgJiYgKGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBhcyBDb21wb25lbnQpLlRpbWUgIT09IFRvb2xUaW1lLlVOREVGSU5JVElPTikge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGluc3RhbmNlb2YgUHJvY2Vzc0hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NIZWFkZXIgPSBleHRlbmRFbGVtZW50c1tpIC0gMV0gYXMgUHJvY2Vzc0hlYWRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlrZDmtYHnqIvlkozlpJbpg6jmtYHnqIvnmoTmg4XlhrXlhYjpnIDopoHnu5Hlrprlj5bmlbDmnoTku7ZcclxuICAgICAgICBpZiAocHJvY2Vzc0hlYWRlci5zdGFydE1vZGUgIT09IFN0YXJ0TW9kZS5ESVJFQ1QpIHtcclxuICAgICAgICAgICAgY29uc3QgbG9hZERhdGFDb21wb25lbnQgPSBwcm9jQ3B0cy5maW5kKHAgPT4gcC5leGVjdXRpb25UaW1lID09PSBUb29sVGltZS5MT0FEREFUQSk7XHJcbiAgICAgICAgICAgIGlmIChsb2FkRGF0YUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxkQ3B0ID0gbmV3IENvbXBvbmVudChwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIGxkQ3B0LlRpbWUgPSBsb2FkRGF0YUNvbXBvbmVudC5leGVjdXRpb25UaW1lIGFzIFRvb2xUaW1lO1xyXG4gICAgICAgICAgICAgICAgbGRDcHQuTWV0YWRhdGFJZCA9IGxvYWREYXRhQ29tcG9uZW50Lm1ldGFkYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICBsZENwdC5NZXRob2RDb2RlID0gbG9hZERhdGFDb21wb25lbnQubWV0aG9kQ29kZTtcclxuICAgICAgICAgICAgICAgIGxkQ3B0LklkID0gbG9hZERhdGFDb21wb25lbnQuaWQ7XHJcbiAgICAgICAgICAgICAgICBsZENwdC5OYW1lID0gbG9hZERhdGFDb21wb25lbnQubmFtZTtcclxuICAgICAgICAgICAgICAgIGxkQ3B0LmlzRm9yQ29tcGVuc2F0aW9uID0gbG9hZERhdGFDb21wb25lbnQuaXNGb3JDb21wZW5zYXRpb247XHJcbiAgICAgICAgICAgICAgICBsZENwdC5BY3R1YWxQYXJhbWV0ZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAobG9hZERhdGFDb21wb25lbnQuc2NvcGVUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGRDcHQuU2NvcGVUeXBlID0gbG9hZERhdGFDb21wb25lbnQuc2NvcGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZENwdC5TY29wZVR5cGUgPSBcIlVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobG9hZERhdGFDb21wb25lbnQuYWN0dWFsUGFyYW1ldGVycyAmJiBsb2FkRGF0YUNvbXBvbmVudC5hY3R1YWxQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGxvYWREYXRhQ29tcG9uZW50LmFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlciA9IG5ldyBBY3R1YWxQYXJhbWV0ZXIocHJvY2Vzcy5Nb2RlbCwgaXRlbS5jb2RlLCBpdGVtLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxkQ3B0LkFjdHVhbFBhcmFtZXRlcnMucHVzaChwYXJhbWV0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOaKiuWPluaVsOaehOS7tuaUvui/m+WOu1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChsZENwdCk7XHJcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzmmK/lpJbpg6jmtYHnqIvvvIzmoKHpqozmmK/lkKbpm4bmiJDnu5/kuIDpooTliLbnmoTlpJbpg6jmtYHnqIvmnoTku7ZcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzSGVhZGVyLnN0YXJ0TW9kZSA9PSBTdGFydE1vZGUuRVhURVJOQUxfUFJPQ0VTUykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBleHRlcm5hbENtcHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbXBzID0gYml6Q21wcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY21wcyAmJiBjbXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5q2k5aSE5qCH6K6w5pyJ5aSW6YOo5rWB56iL6YCa55So5p6E5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYyBvZiBjbXBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5zY29wZVR5cGUgPT09ICdFeHRlcm5hbFByb2Nlc3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxDbXBzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzmsqHmnInlpJbpg6jmtYHnqIvmnoTku7ZcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4dGVybmFsQ21wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY0NwdHMgJiYgcHJvY0NwdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvY0NwdCBvZiBwcm9jQ3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjcHQgPSBuZXcgQ29tcG9uZW50KHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5UaW1lID0gcHJvY0NwdC5leGVjdXRpb25UaW1lIGFzIFRvb2xUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5NZXRhZGF0YUlkID0gcHJvY0NwdC5tZXRhZGF0YUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5NZXRob2RDb2RlID0gcHJvY0NwdC5tZXRob2RDb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5JZCA9IHByb2NDcHQuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0Lk5hbWUgPSBwcm9jQ3B0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0LmlzRm9yQ29tcGVuc2F0aW9uID0gcHJvY0NwdC5pc0ZvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuQWN0dWFsUGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jQ3B0LnNjb3BlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuU2NvcGVUeXBlID0gcHJvY0NwdC5zY29wZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0LlNjb3BlVHlwZSA9IFwiVW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2NDcHQuYWN0dWFsUGFyYW1ldGVycyAmJiBwcm9jQ3B0LmFjdHVhbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHByb2NDcHQuYWN0dWFsUGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlciA9IG5ldyBBY3R1YWxQYXJhbWV0ZXIocHJvY2Vzcy5Nb2RlbCwgaXRlbS5jb2RlLCBpdGVtLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzLnB1c2gocGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDpgb/lhY3ph43lpI3nmoTmlL7lhaXlj5bmlbDmnoTku7Ys5LiN6KaB5Y+W5pWw77yM5a2Q5rWB56iL5ZKM55u05o6l5rWB56iL55qE5p6E5Lu277yM6KaB5pyq5a6a5LmJ77yM5aSW6YOo77yM5YWo6YeP55qEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNwdC5UaW1lICE9PSBUb29sVGltZS5MT0FEREFUQVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBjcHQuU2NvcGVUeXBlICE9PSBTdGFydE1vZGUuRElSRUNUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGNwdC5TY29wZVR5cGUgIT09IFN0YXJ0TW9kZS5TVUJfUFJPQ0VTU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRFbGVtZW50cy5wdXNoKGNwdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvY0NwdCBvZiBwcm9jQ3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNwdCA9IG5ldyBDb21wb25lbnQocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuVGltZSA9IHByb2NDcHQuZXhlY3V0aW9uVGltZSBhcyBUb29sVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5NZXRhZGF0YUlkID0gcHJvY0NwdC5tZXRhZGF0YUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0Lk1ldGhvZENvZGUgPSBwcm9jQ3B0Lm1ldGhvZENvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuSWQgPSBwcm9jQ3B0LmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0Lk5hbWUgPSBwcm9jQ3B0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuaXNGb3JDb21wZW5zYXRpb24gPSBwcm9jQ3B0LmlzRm9yQ29tcGVuc2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0LkFjdHVhbFBhcmFtZXRlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jQ3B0LnNjb3BlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5TY29wZVR5cGUgPSBwcm9jQ3B0LnNjb3BlVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0LlNjb3BlVHlwZSA9IFwiVW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jQ3B0LmFjdHVhbFBhcmFtZXRlcnMgJiYgcHJvY0NwdC5hY3R1YWxQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHByb2NDcHQuYWN0dWFsUGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyID0gbmV3IEFjdHVhbFBhcmFtZXRlcihwcm9jZXNzLk1vZGVsLCBpdGVtLmNvZGUsIGl0ZW0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuQWN0dWFsUGFyYW1ldGVycy5wdXNoKHBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6YG/5YWN6YeN5aSN55qE5pS+5YWl5Y+W5pWw5p6E5Lu2LOS4jeimgeWPluaVsO+8jOWtkOa1geeoi+WSjOebtOaOpea1geeoiyzmnKrnn6XnmoTmnoTku7bvvIzlpJbpg6jvvIzlhajph4/nmoRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcHQuVGltZSAhPT0gVG9vbFRpbWUuTE9BRERBVEFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBjcHQuU2NvcGVUeXBlICE9PSBTdGFydE1vZGUuRElSRUNUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY3B0LlNjb3BlVHlwZSAhPT0gU3RhcnRNb2RlLlNVQl9QUk9DRVNTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY3B0LlNjb3BlVHlwZSAhPT0gXCJVbmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChjcHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOacieWklumDqOa1geeoi+aehOS7tu+8jOWQjOagt+WPquS/neeVmeWPluaVsOaehOS7tu+8jOS4jemcgOimgeWFtuS7luWkhOeQhijlj5bmlbDmnoTku7blt7Lnu4/mlL7ov5vljrvkuoYpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Yi35paw5LiA5LiL5bGe5oCn5qGGXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JVaS5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QoUG1mRXZlbnRzLlNob3dQcm9wZXJ0eSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzSGVhZGVyLnN0YXJ0TW9kZSA9PSBTdGFydE1vZGUuU1VCX1BST0NFU1MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY0NwdHMgJiYgcHJvY0NwdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9jQ3B0IG9mIHByb2NDcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3B0ID0gbmV3IENvbXBvbmVudChwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5UaW1lID0gcHJvY0NwdC5leGVjdXRpb25UaW1lIGFzIFRvb2xUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0Lk1ldGFkYXRhSWQgPSBwcm9jQ3B0Lm1ldGFkYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuTWV0aG9kQ29kZSA9IHByb2NDcHQubWV0aG9kQ29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5JZCA9IHByb2NDcHQuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuTmFtZSA9IHByb2NDcHQubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5pc0ZvckNvbXBlbnNhdGlvbiA9IHByb2NDcHQuaXNGb3JDb21wZW5zYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuQWN0dWFsUGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2NDcHQuc2NvcGVUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0LlNjb3BlVHlwZSA9IHByb2NDcHQuc2NvcGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuU2NvcGVUeXBlID0gXCJVbmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2NDcHQuYWN0dWFsUGFyYW1ldGVycyAmJiBwcm9jQ3B0LmFjdHVhbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgcHJvY0NwdC5hY3R1YWxQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJhbWV0ZXIgPSBuZXcgQWN0dWFsUGFyYW1ldGVyKHByb2Nlc3MuTW9kZWwsIGl0ZW0uY29kZSwgaXRlbS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzLnB1c2gocGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDpgb/lhY3ph43lpI3nmoTmlL7lhaXlj5bmlbDmnoTku7Ys5LiN6KaB5Y+W5pWw77yM55u05o6l5rWB56iL5ZKM5aSW6YOo5rWB56iL77yM5pyq5a6a5LmJ55qE5p6E5Lu277yM6KaB5a2Q5rWB56iL77yM5YWo6YeP55qEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3B0LlRpbWUgIT09IFRvb2xUaW1lLkxPQUREQVRBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY3B0LlNjb3BlVHlwZSAhPT0gU3RhcnRNb2RlLkRJUkVDVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGNwdC5TY29wZVR5cGUgIT09IFN0YXJ0TW9kZS5FWFRFUk5BTF9QUk9DRVNTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY3B0LlNjb3BlVHlwZSAhPT0gXCJVbmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnB1c2goY3B0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOWmguaenOaYr+WtkOa1geeoi+WImeS4jemcgOimgeWFtuS7luWkhOeQhijlj5bmlbDmnoTku7blt7Lnu4/mlL7ov5vljrvkuoYpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgeyAvLyDnm7TmjqXmtYHnqItcclxuICAgICAgICAgICAgLy8g55u05o6l5rWB56iL6L+H5ruk5o6J5YWx5Lqr55qE5p6E5Lu2XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbENtcHMgPSBwcm9jQ3B0cy5maWx0ZXIocCA9PiBXZkRlc2lnbmVyVXRpbHMuaXNQZkNvbXBvbmVudChwLm1ldGFkYXRhSWQpID09PSBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChhY3R1YWxDbXBzICYmIGFjdHVhbENtcHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvY0NwdCBvZiBhY3R1YWxDbXBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNwdCA9IG5ldyBDb21wb25lbnQocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3B0LlRpbWUgPSBwcm9jQ3B0LmV4ZWN1dGlvblRpbWUgYXMgVG9vbFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY3B0Lk1ldGFkYXRhSWQgPSBwcm9jQ3B0Lm1ldGFkYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3B0Lk1ldGhvZENvZGUgPSBwcm9jQ3B0Lm1ldGhvZENvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY3B0LklkID0gcHJvY0NwdC5pZDtcclxuICAgICAgICAgICAgICAgICAgICBjcHQuTmFtZSA9IHByb2NDcHQubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBjcHQuaXNGb3JDb21wZW5zYXRpb24gPSBwcm9jQ3B0LmlzRm9yQ29tcGVuc2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jQ3B0LnNjb3BlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHQuU2NvcGVUeXBlID0gcHJvY0NwdC5zY29wZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B0LlNjb3BlVHlwZSA9IFwiVW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY3B0LkFjdHVhbFBhcmFtZXRlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY0NwdC5hY3R1YWxQYXJhbWV0ZXJzICYmIHByb2NDcHQuYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgcHJvY0NwdC5hY3R1YWxQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyID0gbmV3IEFjdHVhbFBhcmFtZXRlcihwcm9jZXNzLk1vZGVsLCBpdGVtLmNvZGUsIGl0ZW0udmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzLnB1c2gocGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDpgb/lhY3ph43lpI3nmoTmlL7lhaXlj5bmlbDmnoTku7Ys5a2Q5rWB56iL5ZKM5aSW6YOo5rWB56iL55qE5p6E5Lu277yM6KaB5pyq5a6a5LmJ77yM55u05o6l77yM5YWo6YeP55qEXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNwdC5TY29wZVR5cGUgIT09IFN0YXJ0TW9kZS5FWFRFUk5BTF9QUk9DRVNTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGNwdC5TY29wZVR5cGUgIT09IFN0YXJ0TW9kZS5TVUJfUFJPQ0VTUykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRFbGVtZW50cy5wdXNoKGNwdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUV4ZWN1dGVGb3Jtcyhmb3JtczogYW55W10pIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5wcm9jZXNzO1xyXG4gICAgICAgIGxldCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICAvL+WIoOmZpOihqOWNleaehOS7tlxyXG4gICAgICAgIGlmIChleHRlbmRFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBleHRlbmRFbGVtZW50cy5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpIC0gMV0gaW5zdGFuY2VvZiBFeGVjdXRlRm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBmIG9mIGZvcm1zKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRXhlY3V0ZUZvcm0oZik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdXBkYXRlRXhlY3V0ZUZvcm0oZm9ybTogYW55LCB0ZXJtaW5hbD86IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3MgPSB0aGlzLnByb2Nlc3M7XHJcbiAgICAgICAgbGV0IGV4dGVuZEVsZW1lbnRzID0gcHJvY2Vzcy5HZXRFeHRlbnNpb25FbGVtZW50cygpO1xyXG4gICAgICAgIC8v5Yig6Zmk6KGo5Y2V5p6E5Lu2XHJcbiAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGV4dGVuZEVsZW1lbnRzLmxlbmd0aDsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBpbnN0YW5jZW9mIEV4ZWN1dGVGb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZiA9IGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBhcyBFeGVjdXRlRm9ybTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZi5UZXJtaW5hbFR5cGUgPT09ICh0ZXJtaW5hbCA/IHRlcm1pbmFsIDogZm9ybS5UZXJtaW5hbFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmb3JtKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbXMgPSBmb3JtLkFjdHVhbFBhcmFtZXRlcnMgYXMgYW55W107XHJcbiAgICAgICAgICAgIGxldCBhY3RQYXJhcyA9IG5ldyBBcnJheTxBY3R1YWxQYXJhbWV0ZXI+KCk7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHBhcmEgb2YgcGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFjdFBhcmEgPSBuZXcgQWN0dWFsUGFyYW1ldGVyKHByb2Nlc3MuTW9kZWwsIHBhcmEuTmFtZSwgcGFyYS5WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmEuVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdFBhcmEuVGFnID0gcGFyYS5UYWc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmEuVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhLlZhbHVlLmxlbmd0aCA+PSA4ICYmIHBhcmEuVmFsdWUuc2xpY2UoMCwgOCkgPT09IGB7XCJleHByXCI6YCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdFBhcmEuVGFnID0gJ2V4cHJlc3Npb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RQYXJhLlRhZyA9ICdjb25zdGFudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RQYXJhLlRhZyA9ICd2YXJpYWJsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFjdFBhcmFzLnB1c2goYWN0UGFyYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaWQgPSBCcG1uTW9kZWxIZWxwZXIuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBuZXcgRXhlY3V0ZUZvcm0ocHJvY2Vzcy5Nb2RlbCwgaWQsIGZvcm0uTmFtZSwgYWN0UGFyYXMpO1xyXG4gICAgICAgICAgICBpdGVtLkNvbXBvbmVudElkID0gZm9ybS5Db21wb25lbnRJZDtcclxuICAgICAgICAgICAgaXRlbS5Gb3JtVHlwZSA9IGZvcm0uRm9ybVR5cGU7XHJcbiAgICAgICAgICAgIGl0ZW0uZm9ybUZvcm1hdElkID0gZm9ybS5mb3JtRm9ybWF0SWQ7XHJcbiAgICAgICAgICAgIGl0ZW0uZm9ybWF0Q29uZmlnSWQgPSBmb3JtLmZvcm1hdENvbmZpZ0lkO1xyXG4gICAgICAgICAgICBpdGVtLlRlcm1pbmFsVHlwZSA9IGZvcm0uVGVybWluYWxUeXBlO1xyXG4gICAgICAgICAgICBleHRlbmRFbGVtZW50cy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVDdXN0b21pemVBY3Rpb25zKGN1c3RvbWl6ZUFjdGlvbnM6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgLy/liKDpmaTmtYHnqIvmnoTku7ZcclxuICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZXh0ZW5kRWxlbWVudHMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGluc3RhbmNlb2YgQ3VzdG9taXplQWN0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy/ph43mlrDnu5HlrppcclxuICAgICAgICBpZiAoY3VzdG9taXplQWN0aW9ucyAmJiBjdXN0b21pemVBY3Rpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYSBvZiBjdXN0b21pemVBY3Rpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gbmV3IEN1c3RvbWl6ZUFjdGlvbihwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5pZCA9IEJwbW5Nb2RlbEhlbHBlci5HZW5lcmF0ZUVsZW1lbnRJZCgpO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLmNvZGUgPSBhLmNvZGU7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24ubmFtZSA9IGEubmFtZTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi50ZXJtaW5hbFR5cGUgPSBhLnRlcm1pbmFsVHlwZTtcclxuICAgICAgICAgICAgICAgIC8vIGFjdGlvbi5lbmFibGUgPSBhLmVuYWJsZTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5hY3R1YWxQYXJhbWV0ZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAoYS5hY3R1YWxQYXJhbWV0ZXJzICYmIGEuYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcCBvZiBhLmFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlciA9IG5ldyBBY3R1YWxQYXJhbWV0ZXIocHJvY2Vzcy5Nb2RlbCwgcC5OYW1lLCBwLlZhbHVlLCBwLlZhbHVlVGV4dCwgcC5UYWcgfHwgJ2V4cHJlc3Npb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmFjdHVhbFBhcmFtZXRlcnMucHVzaChwYXJhbWV0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBleHRlbmRFbGVtZW50cy5wdXNoKGFjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDmtYHnqIvlpIfms6hcclxuICAgICAqIEBwYXJhbSBicG1uTW9kZWxcclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBtb2RpZnlQcm9jZXNzVGl0bGVFeHByZXNzaW9uKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5wcm9jZXNzO1xyXG4gICAgICAgIGxldCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZXh0ZW5kRWxlbWVudHMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGluc3RhbmNlb2YgVGl0bGVFeHByZXNzaW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHRpdGxlID0gbmV3IFRpdGxlRXhwcmVzc2lvbihwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICBpZih0eXBlb2YodmFsdWUpID09PSAnc3RyaW5nJ3x8IHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgIHRpdGxlID0gbmV3IFRpdGxlRXhwcmVzc2lvbihwcm9jZXNzLk1vZGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRpdGxlID0gbmV3IFRpdGxlRXhwcmVzc2lvbihwcm9jZXNzLk1vZGVsLCB2YWx1ZVsnemgtQ0hTJ10sIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaCh0aXRsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvY2Vzc0hlYWRlcihmZk5hbWU6IHN0cmluZywgYml6T2JqSWQ/OiBzdHJpbmcsIGZmSWQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5wcm9jZXNzO1xyXG4gICAgICAgIGxldCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHMgIT09IG51bGwgJiYgZXh0ZW5kRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpIGluIGV4dGVuZEVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaV0gaW5zdGFuY2VvZiBQcm9jZXNzSGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLkJpekRlZk5hbWUgPSBmZk5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLkJpek9iaklkID0gYml6T2JqSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVuZEVsZW1lbnRzW2ldIGFzIFByb2Nlc3NIZWFkZXIpLkJpekRlZktleSA9IGZmSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJpbmRQcm9jZXNzVGl0bGVFeHByZXNzaW9uKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5wcm9jZXNzO1xyXG4gICAgICAgIGxldCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICBjb25zdCB0aXRsZUV4cHJlc3Npb24gPSBleHRlbmRFbGVtZW50cy5maW5kKGUgPT4gZS5DbHJUeXBlSUQgPT09IFRpdGxlRXhwcmVzc2lvbi5DbHJfVHlwZV9JRCkgYXMgVGl0bGVFeHByZXNzaW9uO1xyXG4gICAgICAgIGlmICh0aXRsZUV4cHJlc3Npb24gJiYgdGl0bGVFeHByZXNzaW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGVFeHByZXNzaW9uKHByb2Nlc3MuTW9kZWwsIHZhbHVlKTtcclxuICAgICAgICBleHRlbmRFbGVtZW50cy5wdXNoKHRpdGxlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWfuuS6jua1geeoi+WIhuexu+eahOWIh+aNouabtOaWsOa1geeoi+aehOS7tlxyXG4gICAgICovXHJcbiAgICB1cGRhdGVQcm9jZXNzQ29tcG9uZW50cyhwcm9jQ3B0czogYW55W10pIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5wcm9jZXNzO1xyXG4gICAgICAgIGxldCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICAvL+WIoOmZpOa1geeoi+aehOS7tlxyXG4gICAgICAgIGlmIChleHRlbmRFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBleHRlbmRFbGVtZW50cy5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpIC0gMV0gaW5zdGFuY2VvZiBDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAmJiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGFzIENvbXBvbmVudCkuVGltZSAhPT0gVG9vbFRpbWUuVU5ERUZJTklUSU9OKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMuc3BsaWNlKGkgLSAxLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL+mHjeaWsOe7keWumlxyXG4gICAgICAgIGlmIChwcm9jQ3B0cyAmJiBwcm9jQ3B0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHByb2NDcHQgb2YgcHJvY0NwdHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjcHQgPSBuZXcgQ29tcG9uZW50KHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgY3B0LlRpbWUgPSBwcm9jQ3B0LmV4ZWN1dGlvblRpbWUgYXMgVG9vbFRpbWU7XHJcbiAgICAgICAgICAgICAgICBjcHQuTWV0YWRhdGFJZCA9IHByb2NDcHQubWV0YWRhdGFJZDtcclxuICAgICAgICAgICAgICAgIGNwdC5NZXRob2RDb2RlID0gcHJvY0NwdC5tZXRob2RDb2RlO1xyXG4gICAgICAgICAgICAgICAgY3B0LklkID0gcHJvY0NwdC5pZDtcclxuICAgICAgICAgICAgICAgIGNwdC5OYW1lID0gcHJvY0NwdC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgY3B0LmlzRm9yQ29tcGVuc2F0aW9uID0gcHJvY0NwdC5pc0ZvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvY0NwdC5hY3R1YWxQYXJhbWV0ZXJzICYmIHByb2NDcHQuYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBwcm9jQ3B0LmFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlciA9IG5ldyBBY3R1YWxQYXJhbWV0ZXIocHJvY2Vzcy5Nb2RlbCwgaXRlbS5jb2RlLCBpdGVtLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzLnB1c2gocGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChjcHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFsbG93UHJlQXNzaWduKGFzc2lnbjogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3MgPSB0aGlzLnByb2Nlc3M7XHJcbiAgICAgICAgbGV0IGV4dGVuZEVsZW1lbnRzID0gcHJvY2Vzcy5HZXRFeHRlbnNpb25FbGVtZW50cygpO1xyXG4gICAgICAgIGlmIChleHRlbmRFbGVtZW50cyAhPT0gbnVsbCAmJiBleHRlbmRFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gZXh0ZW5kRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpXSBpbnN0YW5jZW9mIFByb2Nlc3NIZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAoZXh0ZW5kRWxlbWVudHNbaV0gYXMgUHJvY2Vzc0hlYWRlcikuYWxsb3dQcmVBc3NpZ24gPSBhc3NpZ247XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUVuYWJsZVByaW9yaXR5KHByaW9yaXR5OiBib29sZWFuKSB7XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzICE9PSBudWxsICYmIGV4dGVuZEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBleHRlbmRFbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2ldIGluc3RhbmNlb2YgUHJvY2Vzc0hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIChleHRlbmRFbGVtZW50c1tpXSBhcyBQcm9jZXNzSGVhZGVyKS5lbmFibGVQcmlvcml0eSA9IHByaW9yaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdGFydE1vZGUoc3RhcnRNb2RlOiBTdGFydE1vZGUsIGFsbENtcHM6IGFueSwgYml6Q21wczogYW55KSB7XHJcbiAgICAgICAgLy8g5a+55LqO5ZCv5Yqo5pa55byP55qE5o+Q56S65L+h5oGvXHJcbiAgICAgICAgc3dpdGNoIChzdGFydE1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSBTdGFydE1vZGUuRElSRUNUOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JVaS5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QoV2ZFdmVudHMuU2hvd1RpcHMsIFwiZGF0YVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21lc3NhZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsOiAnaW5mbycsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIG14UmVzb3VyY2VzLmdldChcImRpcmVjdFRpcHNcIiksXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdGFydE1vZGUuRVhURVJOQUxfUFJPQ0VTUzpcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yVWkuZmlyZUV2ZW50KG5ldyBteEV2ZW50T2JqZWN0KFdmRXZlbnRzLlNob3dUaXBzLCBcImRhdGFcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbDogJ2luZm8nLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICBteFJlc291cmNlcy5nZXQoXCJleHRlcm5hbFRpcHNcIiksXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdGFydE1vZGUuU1VCX1BST0NFU1M6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvclVpLmZpcmVFdmVudChuZXcgbXhFdmVudE9iamVjdChXZkV2ZW50cy5TaG93VGlwcywgXCJkYXRhXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6ICdpbmZvJyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAgbXhSZXNvdXJjZXMuZ2V0KFwic3VicHJvY2Vzc1RpcHNcIiksXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzICE9PSBudWxsICYmIGV4dGVuZEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvY0hlYWRlciA9IGV4dGVuZEVsZW1lbnRzLmZpbHRlcihlID0+IGUgaW5zdGFuY2VvZiBQcm9jZXNzSGVhZGVyKSBhcyBQcm9jZXNzSGVhZGVyW107XHJcbiAgICAgICAgICAgIC8vIOS/ruaUueWQr+WKqOaWueW8j1xyXG4gICAgICAgICAgICBwcm9jSGVhZGVyWzBdLnN0YXJ0TW9kZSA9IHN0YXJ0TW9kZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2NDcHRzID0gYWxsQ21wcztcclxuICAgICAgICAgICAgLy/liKDpmaTmtYHnqIvmnoTku7ZcclxuICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBleHRlbmRFbGVtZW50cy5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGluc3RhbmNlb2YgQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIChleHRlbmRFbGVtZW50c1tpIC0gMV0gYXMgQ29tcG9uZW50KS5UaW1lICE9PSBUb29sVGltZS5VTkRFRklOSVRJT05cclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgKGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBhcyBDb21wb25lbnQpLlRpbWUgIT09IFRvb2xUaW1lLkxPQUREQVRBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhbGxDbXBzICYmIGFsbENtcHMuZm9yRWFjaChwcm9jQ3B0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNwdCA9IG5ldyBDb21wb25lbnQocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBjcHQuVGltZSA9IHByb2NDcHQuZXhlY3V0aW9uVGltZSBhcyBUb29sVGltZTtcclxuICAgICAgICAgICAgICAgIGNwdC5NZXRhZGF0YUlkID0gcHJvY0NwdC5tZXRhZGF0YUlkO1xyXG4gICAgICAgICAgICAgICAgY3B0Lk1ldGhvZENvZGUgPSBwcm9jQ3B0Lm1ldGhvZENvZGU7XHJcbiAgICAgICAgICAgICAgICBjcHQuSWQgPSBwcm9jQ3B0LmlkO1xyXG4gICAgICAgICAgICAgICAgY3B0Lk5hbWUgPSBwcm9jQ3B0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICBjcHQuaXNGb3JDb21wZW5zYXRpb24gPSBwcm9jQ3B0LmlzRm9yQ29tcGVuc2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgY3B0LkFjdHVhbFBhcmFtZXRlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jQ3B0LnNjb3BlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNwdC5TY29wZVR5cGUgPSBwcm9jQ3B0LnNjb3BlVHlwZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3B0LlNjb3BlVHlwZSA9IFwiVW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwcm9jQ3B0LmFjdHVhbFBhcmFtZXRlcnMgJiYgcHJvY0NwdC5hY3R1YWxQYXJhbWV0ZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyID0gbmV3IEFjdHVhbFBhcmFtZXRlcihwcm9jZXNzLk1vZGVsLCBpdGVtLmNvZGUsIGl0ZW0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzLnB1c2gocGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnB1c2goY3B0KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwcm9jQ21wcyA9IGV4dGVuZEVsZW1lbnRzLmZpbHRlcihlID0+IGUgaW5zdGFuY2VvZiBDb21wb25lbnQpIGFzIENvbXBvbmVudFtdO1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzlkK/liqjmlrnlvI/mmK/lrZDmtYHnqIss5Y+q5L+d55WZ5Y+W5pWw5p6E5Lu2XHJcbiAgICAgICAgICAgIGlmIChzdGFydE1vZGUgPT09IFN0YXJ0TW9kZS5TVUJfUFJPQ0VTUykge1xyXG4gICAgICAgICAgICAgICAgLy8gVXRpbHMucG9zdE1lc3NhZ2UoUmVzb3VyY2VLZXlzLndmX3Nob3dUaXAsIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICB0eXBlOiAnbWVzc2FnZScsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbGV2ZWw6ICdpbmZvJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICBtZXNzYWdlOiBg5ZCv5Yqo5pa55byP5Li65a2Q5rWB56iL77yM6ZyA6KaB56e76Zmk5Y+W5pWw5p6E5Lu25Lul5aSW55qE5rWB56iL5p6E5Lu2YCxcclxuICAgICAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGV4dGVuZEVsZW1lbnRzLmxlbmd0aDsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpIC0gMV0gaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY21wID0gZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGFzIENvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY21wLlRpbWUgIT09IFRvb2xUaW1lLlVOREVGSU5JVElPTlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY21wLlRpbWUgIT09IFRvb2xUaW1lLkxPQUREQVRBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoY21wLlNjb3BlVHlwZSAhPT0gU3RhcnRNb2RlLlNVQl9QUk9DRVNTICYmIGNtcC5TY29wZVR5cGUgIT09IFwiQWxsX1Byb2Nlc3NcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRFbGVtZW50cy5zcGxpY2UoaSAtIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOWmguaenOWQr+WKqOaWueW8j+aYr+ebtOaOpeWQr+WKqCzkuI3lhYHorrjlrZjlnKjlhbHkuqvnmoTmnoTku7ZcclxuICAgICAgICAgICAgaWYgKHN0YXJ0TW9kZSA9PT0gU3RhcnRNb2RlLkRJUkVDVCkge1xyXG4gICAgICAgICAgICAgICAgLy8g5Yik5pat5pyJ5rKh5pyJ5YWx5Lqr77yIUEbvvInnmoTmtYHnqIvmnoTku7ZcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBmQ21wcyA9IHByb2NDbXBzLmZpbHRlcigocDogQ29tcG9uZW50KSA9PiBXZkRlc2lnbmVyVXRpbHMuaXNQZkNvbXBvbmVudChwLk1ldGFkYXRhSWQpKTtcclxuICAgICAgICAgICAgICAgIGlmIChwZkNtcHMgJiYgcGZDbXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDliKDmjonlhbHkuqvnmoTmnoTku7blkozlkK/liqjmlrnlvI9cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZXh0ZW5kRWxlbWVudHMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpIC0gMV0gaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtcCA9IGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBhcyBDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2ZEZXNpZ25lclV0aWxzLmlzUGZDb21wb25lbnQoY21wLk1ldGFkYXRhSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgY21wLlNjb3BlVHlwZSA9PT0gU3RhcnRNb2RlLkVYVEVSTkFMX1BST0NFU1NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBjbXAuU2NvcGVUeXBlID09PSBTdGFydE1vZGUuU1VCX1BST0NFU1NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzlkK/liqjmlrnlvI/mmK/lpJbpg6jmtYHnqItcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydE1vZGUgPT09IFN0YXJ0TW9kZS5FWFRFUk5BTF9QUk9DRVNTKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBvdGhlckNtcHMgPSBwcm9jQ21wcy5maWx0ZXIoKHA6IENvbXBvbmVudCkgPT4gKHAuTWV0YWRhdGFJZCAhPT0gUmVzb3VyY2VLZXlzLnBmX0NtcF9JZDFcclxuICAgICAgICAgICAgICAgIC8vICAgICAmJiBwLk1ldGFkYXRhSWQgIT09IFJlc291cmNlS2V5cy5wZl9DbXBfSWQyXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgJiYgcC5NZXRhZGF0YUlkICE9PSBSZXNvdXJjZUtleXMucGZfQ21wX0lkM1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICYmIHAuTWV0YWRhdGFJZCAhPT0gUmVzb3VyY2VLZXlzLnBmX0NtcF9JZDRcclxuICAgICAgICAgICAgICAgIC8vICAgICAmJiBwLlRpbWUgIT09IFRvb2xUaW1lLkxPQUREQVRBXHJcbiAgICAgICAgICAgICAgICAvLyApKTtcclxuICAgICAgICAgICAgICAgIC8vIOWIpOaWreacieayoeaciemihOWItuWklumDqOa1geeoi+mAmueUqOaehOS7tlxyXG4gICAgICAgICAgICAgICAgbGV0IGV4dGVybmFsQ21wcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY21wcyA9IGJpekNtcHM7XHJcbiAgICAgICAgICAgICAgICBpZiAoY21wcyAmJiBjbXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDmraTlpITmoIforrDmmK/lpJbpg6jmtYHnqIvpgJrnlKjmnoTku7ZcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGMgb2YgY21wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5zY29wZVR5cGUgPT09ICdFeHRlcm5hbFByb2Nlc3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlcm5hbENtcHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6c6aKE5Yi25LqG5aSW6YOo5rWB56iL6YCa55So5p6E5Lu2LOWPquS/neeVmeWPluaVsOaehOS7tu+8jOayoeacieWImeS4jeWkhOeQhlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRlcm5hbENtcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGV4dGVuZEVsZW1lbnRzLmxlbmd0aDsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBpbnN0YW5jZW9mIENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtcCA9IGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBhcyBDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNtcC5UaW1lICE9PSBUb29sVGltZS5VTkRFRklOSVRJT05cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY21wLlRpbWUgIT09IFRvb2xUaW1lLkxPQUREQVRBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIChjbXAuU2NvcGVUeXBlID09PSBTdGFydE1vZGUuRElSRUNUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBjbXAuU2NvcGVUeXBlID09PSBTdGFydE1vZGUuU1VCX1BST0NFU1NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGNtcC5TY29wZVR5cGUgPT09IFwiVW5kZWZpbmVkXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWRpdG9yVWkuZmlyZUV2ZW50KG5ldyBteEV2ZW50T2JqZWN0KFBtZkV2ZW50cy5TaG93UHJvcGVydHkpKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVQcm9jZXNzVmFyaWFibGVzKHZhcmlhYmxlczogYW55W10pIHtcclxuICAgICAgICBsZXQgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgb2JqZWN0cyA9IHByb2Nlc3MuR2V0RGF0YU9iamVjdHMoKTtcclxuICAgICAgICBjb25zdCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICBpZiAob2JqZWN0cyAmJiBvYmplY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIG9iamVjdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgVmFsdWVkRGF0YU9iamVjdCAmJiBvLkRhdGFUeXBlLkNhdGVnb3J5ICE9PSBEYXRhVHlwZXMuQ3VzdG9tVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLnZhcmlhYmxlU2V0dGluZyAmJiBvLnZhcmlhYmxlU2V0dGluZy50YWcgPT09ICdjb21wb25lbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBleHRlbmRFbGVtZW50cy5maW5kSW5kZXgoZSA9PiAoZSBpbnN0YW5jZW9mIENvbXBvbmVudCAmJiBlLklkID09PSBvLnZhcmlhYmxlU2V0dGluZy52YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRFbGVtZW50cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuUmVtb3ZlRGF0YU9iamVjdChvLklkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YXJpYWJsZXMgIT09IG51bGwgJiYgdmFyaWFibGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIHZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSBuZXcgRGF0YVR5cGUocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZS5DYXRlZ29yeSA9IERhdGFUeXBlcy5CYXNpY1R5cGU7XHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZS5CYXNpY1R5cGUgPSB2LmJhc2ljVHlwZTtcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlLkRlc2NyaXB0aW9uID0gdi5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFPYmplY3QgPSBuZXcgVmFsdWVkRGF0YU9iamVjdChwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIGRhdGFPYmplY3QuSWQgPSB2LmlkO1xyXG4gICAgICAgICAgICAgICAgZGF0YU9iamVjdC5OYW1lID0gdi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgZGF0YU9iamVjdC5Eb2N1bWVudGF0aW9uID0gdi5kb2N1bWVudGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgZGF0YU9iamVjdC5EYXRhVHlwZSA9IGRhdGFUeXBlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2LnRhZyAmJiB2LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGVTZXR0aW5nID0gbmV3IFZhcmlhYmxlU2V0dGluZyhwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVNldHRpbmcudmFyaWFibGVDb2RlID0gdi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlU2V0dGluZy52YXJpYWJsZU5hbWUgPSB2LmRvY3VtZW50YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTZXR0aW5nLnRhZyA9IHYudGFnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlU2V0dGluZy52YWx1ZSA9IHYudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTZXR0aW5nLnZhbHVlVGV4dCA9IHYudmFsdWVUZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhT2JqZWN0LnZhcmlhYmxlU2V0dGluZyA9IHZhcmlhYmxlU2V0dGluZztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlU2V0dGluZy50YWcgPT09ICdjb21wb25lbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSB2LmNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjcHQgPSBuZXcgQ29tcG9uZW50KHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3B0Lk1ldGFkYXRhSWQgPSBjLk1ldGFkYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuTWV0aG9kQ29kZSA9IGMuTWV0aG9kQ29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5JZCA9IGMuSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuTmFtZSA9IGMuTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwdC5BY3R1YWxQYXJhbWV0ZXJzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5BY3R1YWxQYXJhbWV0ZXJzICYmIGMuQWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYSBvZiBjLkFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlciA9IG5ldyBBY3R1YWxQYXJhbWV0ZXIocHJvY2Vzcy5Nb2RlbCwgYS5OYW1lLCBhLlZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyLlRhZyA9IGEuVGFnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHQuQWN0dWFsUGFyYW1ldGVycy5wdXNoKHBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnB1c2goY3B0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLkFkZERhdGFPYmplY3QoZGF0YU9iamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvY2Vzc1RpbWVMaW1pdENvbnRyb2wodGltZUxpbWl0OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5wcm9jZXNzO1xyXG4gICAgICAgIGxldCBleHRlbmRFbGVtZW50cyA9IHByb2Nlc3MuR2V0RXh0ZW5zaW9uRWxlbWVudHMoKTtcclxuICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZXh0ZW5kRWxlbWVudHMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kRWxlbWVudHNbaSAtIDFdIGluc3RhbmNlb2YgVGltZUxpbWl0Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGltZUxpbWl0SW5mbyA9IHRpbWVMaW1pdCBhcyBUaW1lTGltaXRDb250cm9sSW5mbztcclxuICAgICAgICBpZiAodGltZUxpbWl0SW5mbykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sID0gbmV3IFRpbWVMaW1pdENvbnRyb2wocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuZW5hYmxlID0gdGltZUxpbWl0SW5mby5lbmFibGU7XHJcbiAgICAgICAgICAgIGNvbnRyb2wudGFnID0gdGltZUxpbWl0SW5mby50YWc7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuZHVlVGltZSA9IHRpbWVMaW1pdEluZm8uZHVlVGltZTtcclxuICAgICAgICAgICAgY29udHJvbC50aW1lVW5pdCA9IHRpbWVMaW1pdEluZm8udGltZVVuaXQ7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuZXhwaXJlT3BlcmF0aW9ucyA9IG5ldyBBcnJheTxTZW5kTWVzc2FnZUV4cGlyZU9wZXJhdGlvbj4oKTtcclxuICAgICAgICAgICAgaWYgKHRpbWVMaW1pdEluZm8uZXhwaXJlT3BlcmF0aW9ucyAmJiB0aW1lTGltaXRJbmZvLmV4cGlyZU9wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIHRpbWVMaW1pdEluZm8uZXhwaXJlT3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9wZXJhdGlvblR5cGVOYW1lID09PSAnU2VuZE1lc3NhZ2VFeHBpcmVPcGVyYXRpb24nIHx8ICFvLm9wZXJhdGlvblR5cGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG8gYXMgU2VuZE1lc3NhZ2VFeHBpcmVPcGVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRNZXNzYWdlID0gbmV3IFNlbmRNZXNzYWdlRXhwaXJlT3BlcmF0aW9uKHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5pZCA9IEJwbW5Nb2RlbEhlbHBlci5HZW5lcmF0ZUVsZW1lbnRJZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5kdXJhdGlvblR5cGUgPSBvcGVyYXRpb24uZHVyYXRpb25UeXBlIGFzIER1cmF0aW9uVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UudGltZUR1cmF0aW9uID0gb3BlcmF0aW9uLnRpbWVEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UudGltZVVuaXQgPSBvcGVyYXRpb24udGltZVVuaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLm9wZXJhdGlvblR5cGVOYW1lID0gb3BlcmF0aW9uLm9wZXJhdGlvblR5cGVOYW1lID8gb3BlcmF0aW9uLm9wZXJhdGlvblR5cGVOYW1lIDogJ1NlbmRNZXNzYWdlRXhwaXJlT3BlcmF0aW9uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UubWVzc2FnZSA9IG9wZXJhdGlvbi5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5zdWJqZWN0ID0gb3BlcmF0aW9uLnN1YmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLnNlbmRUeXBlID0gb3BlcmF0aW9uLnNlbmRUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZS5yZWNlaXZlciA9IG9wZXJhdGlvbi5yZWNlaXZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UucmVjZWl2ZXJUZXh0ID0gb3BlcmF0aW9uLnJlY2VpdmVyVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UuY3ljbGVFbmFibGUgPSBvcGVyYXRpb24uY3ljbGVFbmFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLmN5Y2xlVGltZSA9IG9wZXJhdGlvbi5jeWNsZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlLmN5Y2xlVGltZVVuaXQgPSBvcGVyYXRpb24uY3ljbGVUaW1lVW5pdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZXJhdGlvbi5zbXNNZXNzYWdlVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNtc01lc3NhZ2VUZW1wbGF0ZSA9IG5ldyBTbXNNZXNzYWdlVGVtcGxhdGUocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbXNNZXNzYWdlVGVtcGxhdGUuY29kZSA9IG9wZXJhdGlvbi5zbXNNZXNzYWdlVGVtcGxhdGUuY29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5jb250ZW50ID0gb3BlcmF0aW9uLnNtc01lc3NhZ2VUZW1wbGF0ZS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRpb24uc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMgJiYgb3BlcmF0aW9uLnNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2Ygb3BlcmF0aW9uLnNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gbmV3IFNtc01lc3NhZ2VWYXJpYWJsZShwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUuY29kZSA9IHYuY29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUudmFsdWUgPSB2LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS50YWcgPSB2LnRhZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMucHVzaCh2YXJpYWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2Uuc21zTWVzc2FnZVRlbXBsYXRlID0gc21zTWVzc2FnZVRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuZXhwaXJlT3BlcmF0aW9ucy5wdXNoKHNlbmRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8ub3BlcmF0aW9uVHlwZU5hbWUgPT09ICdBdXRvSGFuZGxlRXhwaXJlT3BlcmF0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBvIGFzIEF1dG9IYW5kbGVFeHBpcmVPcGVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dG9IYW5kbGUgPSBuZXcgQXV0b0hhbmRsZUV4cGlyZU9wZXJhdGlvbihwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hhbmRsZS5pZCA9IEJwbW5Nb2RlbEhlbHBlci5HZW5lcmF0ZUVsZW1lbnRJZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvSGFuZGxlLmR1cmF0aW9uVHlwZSA9IG9wZXJhdGlvbi5kdXJhdGlvblR5cGUgYXMgRHVyYXRpb25UeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvSGFuZGxlLnRpbWVEdXJhdGlvbiA9IG9wZXJhdGlvbi50aW1lRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUudGltZVVuaXQgPSBvcGVyYXRpb24udGltZVVuaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUub3BlcmF0aW9uVHlwZU5hbWUgPSBvcGVyYXRpb24ub3BlcmF0aW9uVHlwZU5hbWUgPyBvcGVyYXRpb24ub3BlcmF0aW9uVHlwZU5hbWUgOiAnQXV0b0hhbmRsZUV4cGlyZU9wZXJhdGlvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUuYXV0b0hhbmRsZVR5cGUgPSBvcGVyYXRpb24uYXV0b0hhbmRsZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9IYW5kbGUubWVzc2FnZSA9IG9wZXJhdGlvbi5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLmV4cGlyZU9wZXJhdGlvbnMucHVzaChhdXRvSGFuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChjb250cm9sKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvY2Vzc01lc3NhZ2VOb3RpY2VzKG5vdGljZXM6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGV4dGVuZEVsZW1lbnRzLmxlbmd0aDsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2kgLSAxXSBpbnN0YW5jZW9mIE1lc3NhZ2VOb3RpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbmRFbGVtZW50cy5zcGxpY2UoaSAtIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub3RpY2VzICYmIG5vdGljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBuIG9mIG5vdGljZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VOb3RpY2UgPSBuZXcgTWVzc2FnZU5vdGljZShwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VOb3RpY2Uuc2VuZFR5cGUgPSBuLnNlbmRUeXBlO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZU5vdGljZS5zZW5kVGltZSA9IG4uc2VuZFRpbWU7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlTm90aWNlLnN1YmplY3QgPSBuLnN1YmplY3Q7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlTm90aWNlLmNvbnRlbnQgPSBuLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXNzYWdlTm90aWNlLnJlY2VpdmVyID0gbi5yZWNlaXZlcjtcclxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJUZXh0ID0gbi5yZWNlaXZlclRleHQ7XHJcbiAgICAgICAgICAgICAgICBuLnJlY2VpdmVycyA9IG4ucmVjZWl2ZXJzLmZpbHRlcihyID0+IHIudHlwZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobi5yZWNlaXZlcnMgJiYgbi5yZWNlaXZlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVycyA9IG4ucmVjZWl2ZXJzLmZpbHRlcihyID0+IHIudHlwZSA9PT0gJ3VzZXJQYXJ0aWNpcGFudCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHIudHlwZSA9PT0gJ3Byb2Nlc3NQYXJ0aWNpcGFudCcgJiYgci5wcm9jZXNzUGFydGljaXBhbnQgIT09ICdhY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gbi5yZWNlaXZlcnMuZmlsdGVyKHIgPT4gci50eXBlID09PSAndmFyaWFibGVQYXJ0aWNpcGFudCcgfHwgci50eXBlID09PSAncG9zaXRpb25QYXJ0aWNpcGFudCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHIudHlwZSA9PT0gJ3Byb2Nlc3NQYXJ0aWNpcGFudCcgJiYgci5wcm9jZXNzUGFydGljaXBhbnQgPT09ICdhY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY2VpdmVycyAmJiByZWNlaXZlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVjZWl2ZXIgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlY2VpdmVyTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgcmVjZWl2ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoci50eXBlID09PSAncHJvY2Vzc1BhcnRpY2lwYW50Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyICs9IChyLnByb2Nlc3NQYXJ0aWNpcGFudCArICcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIucHJvY2Vzc1BhcnRpY2lwYW50ID09PSAncHJvY0luc3RDcmVhdG9yJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlck5hbWUgKz0gJ+a1geeoi+WPkei1t+S6uiwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyLnByb2Nlc3NQYXJ0aWNpcGFudCA9PT0gJ3dvcmtJdGVtUGFydGljaXBhbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyTmFtZSArPSAn5Lu75Yqh5o6l5pS25Lq6LCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHIudHlwZSA9PT0gJ3VzZXJQYXJ0aWNpcGFudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlciArPSAoci51c2VySWRzICsgJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlck5hbWUgKz0gKHIudXNlck5hbWVzICsgJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gcmVjZWl2ZXIuc3Vic3RyaW5nKDAsIHJlY2VpdmVyLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNlaXZlck5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyTmFtZSA9IHJlY2VpdmVyTmFtZS5zdWJzdHJpbmcoMCwgcmVjZWl2ZXJOYW1lLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXIgPSByZWNlaXZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU5vdGljZS5yZWNlaXZlclRleHQgPSByZWNlaXZlck5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0aWNpcGFudHMgJiYgcGFydGljaXBhbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjZWl2ZXJFeHByZXNzaW9ucyA9IG5ldyBBcnJheTxQYXJ0aWNpcGFudEV4cHJlc3Npb24+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBwYXJ0aWNpcGFudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLnR5cGUgPT09ICdwcm9jZXNzUGFydGljaXBhbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFjdGl2aXR5RXhlY3V0b3IgPSBuZXcgQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbihwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUV4ZWN1dG9yLmlkID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlFeGVjdXRvci5hY3Rpdml0eURlZklkID0gcC5hY3Rpdml0eURlZklkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5RXhlY3V0b3IuYWN0aXZpdHlEZWZOYW1lID0gcC5hY3Rpdml0eURlZk5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKGFjdGl2aXR5RXhlY3V0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAudHlwZSA9PT0gJ3ZhcmlhYmxlUGFydGljaXBhbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhcmlhYmxlUGFydGljaXBhbnQgPSBuZXcgVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbihwcm9jZXNzLk1vZGVsLCBwLnZhcmlhYmxlUGFydGljaXBhbnQsIHAudmFyaWFibGVOYW1lLCBwLm9yZ1R5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlUGFydGljaXBhbnQuaWQgPSBCcG1uTW9kZWxIZWxwZXIuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVBhcnRpY2lwYW50LlRhZyA9ICdleHByZXNzaW9uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVBhcnRpY2lwYW50Lk9yZ1R5cGUgPSBwLm9yZ1R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKHZhcmlhYmxlUGFydGljaXBhbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAudHlwZSA9PT0gJ3Bvc2l0aW9uUGFydGljaXBhbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvc2lQYXJ0aWNpcGFudCA9IG5ldyBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbihwcm9jZXNzLk1vZGVsLCBwLnBvc2l0aW9uSWQsIHAucG9zaXRpb25OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpUGFydGljaXBhbnQuaWQgPSBCcG1uTW9kZWxIZWxwZXIuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpUGFydGljaXBhbnQuUG9zaXRpb25UeXBlID0gcC5wb3NpdGlvblR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAucG9zaXRpb25UeXBlID09PSAnMScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaVBhcnRpY2lwYW50Lk9yZ0lkID0gcC5vcmdJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaVBhcnRpY2lwYW50Lk9yZ1R5cGUgPSBwLm9yZ1R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaChwb3NpUGFydGljaXBhbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJFeHByZXNzaW9ucyA9IHJlY2VpdmVyRXhwcmVzc2lvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuLnNtc01lc3NhZ2VUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNtc01lc3NhZ2VUZW1wbGF0ZSA9IG5ldyBTbXNNZXNzYWdlVGVtcGxhdGUocHJvY2Vzcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc21zTWVzc2FnZVRlbXBsYXRlLmNvZGUgPSBuLnNtc01lc3NhZ2VUZW1wbGF0ZS5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5jb250ZW50ID0gbi5zbXNNZXNzYWdlVGVtcGxhdGUuY29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICBzbXNNZXNzYWdlVGVtcGxhdGUuc21zTWVzc2FnZVZhcmlhYmxlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLnNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzICYmIG4uc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2Ygbi5zbXNNZXNzYWdlVGVtcGxhdGUuc21zTWVzc2FnZVZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSBuZXcgU21zTWVzc2FnZVZhcmlhYmxlKHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUuY29kZSA9IHYuY29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLnZhbHVlID0gdi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLnRhZyA9IHYudGFnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc21zTWVzc2FnZVRlbXBsYXRlLnNtc01lc3NhZ2VWYXJpYWJsZXMucHVzaCh2YXJpYWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU5vdGljZS5zbXNNZXNzYWdlVGVtcGxhdGUgPSBzbXNNZXNzYWdlVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChtZXNzYWdlTm90aWNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVJbWFnZVNldHRpbmdzKGltYWdlU2V0dGluZ3M6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3MgPSB0aGlzLnByb2Nlc3M7XHJcbiAgICAgICAgbGV0IGV4dGVuZEVsZW1lbnRzID0gcHJvY2Vzcy5HZXRFeHRlbnNpb25FbGVtZW50cygpO1xyXG4gICAgICAgIGlmIChleHRlbmRFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBleHRlbmRFbGVtZW50cy5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHRlbmRFbGVtZW50c1tpIC0gMV0gaW5zdGFuY2VvZiBJbWFnZVNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMuc3BsaWNlKGkgLSAxLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW1hZ2VTZXR0aW5ncykge1xyXG4gICAgICAgICAgICBjb25zdCBpbWFnZVNldHRpbmcgPSBuZXcgSW1hZ2VTZXR0aW5ncyhwcm9jZXNzLk1vZGVsKTtcclxuICAgICAgICAgICAgaW1hZ2VTZXR0aW5nLmltYWdlT3BlcmF0aW9uID0gaW1hZ2VTZXR0aW5ncy5pbWFnZU9wZXJhdGlvbjtcclxuICAgICAgICAgICAgZXh0ZW5kRWxlbWVudHMucHVzaChpbWFnZVNldHRpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOaJqeWxleWxnuaAp1xyXG4gICAgICogQHBhcmFtIGJwbW5Nb2RlbFxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHJlc2V0RXh0ZW5kUHJvcGVydHkodmFsdWU6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHRoaXMucHJvY2VzcztcclxuICAgICAgICBsZXQgZXh0ZW5kRWxlbWVudHMgPSBwcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBvIG9mIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBleHRlbmRFbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHRlbmRQcm9wZXJ0eSAmJiBlLmtleSA9PT0gby5jb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBleHRlbmRFbGVtZW50cy5pbmRleE9mKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gdmFsdWUgYXMgYW55O1xyXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuZm9yRWFjaChhID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbmV3IEV4dGVuZFByb3BlcnR5KHByb2Nlc3MuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgaXRlbS5rZXkgPSBhLmNvZGU7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnZhbHVlID0gYS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGV4dGVuZEVsZW1lbnRzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVFbmFibGVXaG9sZU9yZGVyUmV0cmlldmUod2hvbGVPcmRlclJldHJpZXZlOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IGV4dGVuZEVsZW1lbnRzID0gdGhpcy5wcm9jZXNzLkdldEV4dGVuc2lvbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzICE9PSBudWxsICYmIGV4dGVuZEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBleHRlbmRFbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZEVsZW1lbnRzW2ldIGluc3RhbmNlb2YgUHJvY2Vzc0hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIChleHRlbmRFbGVtZW50c1tpXSBhcyBQcm9jZXNzSGVhZGVyKS5lbmFibGVXaG9sZU9yZGVyUmV0cmlldmUgPSB3aG9sZU9yZGVyUmV0cmlldmU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==