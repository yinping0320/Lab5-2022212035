/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { MessageActivity, MessageNotice, Component, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, VariableSetting, ActualParameter, SmsMessageTemplate, SmsMessageVariable, } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { WfConstants } from "../WfConstants";
import { MessageActivityPropertyKeys } from "./property-keys/MessageActivityPropertyKeys";
/**
 * 消息活动节点
 */
var MessageActivityCell = /** @class */ (function (_super) {
    tslib_1.__extends(MessageActivityCell, _super);
    function MessageActivityCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = MessageActivityCell.CLR_TYPE_ID;
        _this.name = "消息";
        _this.nameLanguage = {
            "zh-CHS": "消息",
            "zh-CHT": "消息",
            "en": "Message",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/message.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/message_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    MessageActivityCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        flowNode.Id = "MessageActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    };
    /**
     * @return {?}
     */
    MessageActivityCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var act = this.flowElement;
        /** @type {?} */
        var basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        var activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: MessageActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: MessageActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: MessageActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: MessageActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
            { propertyID: MessageActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        propertyData[MessageActivityPropertyKeys.Id] = act.Id;
        propertyData[MessageActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[MessageActivityPropertyKeys.Name] = act.Name;
        propertyData[MessageActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[MessageActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        propertyData[MessageActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    MessageActivityCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var messageActivity = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case MessageActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(messageActivity, obj);
                break;
            case MessageActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(messageActivity, obj);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    MessageActivityCell.prototype.updateMessageNotices = /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    function (messageActivity, obj) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        /** @type {?} */
        var bpmnModel = messageActivity.Model;
        /** @type {?} */
        var notices = (/** @type {?} */ (obj.propertyValue));
        messageActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            try {
                for (var notices_1 = tslib_1.__values(notices), notices_1_1 = notices_1.next(); !notices_1_1.done; notices_1_1 = notices_1.next()) {
                    var n = notices_1_1.value;
                    /** @type {?} */
                    var messageNotice = new MessageNotice(bpmnModel);
                    messageNotice.sendType = n.sendType;
                    messageNotice.sendTime = n.sendTime;
                    messageNotice.subject = n.subject;
                    messageNotice.content = n.content;
                    if (n.smsMessageTemplate) {
                        /** @type {?} */
                        var smsMessageTemplate = new SmsMessageTemplate(bpmnModel);
                        smsMessageTemplate.code = n.smsMessageTemplate.code;
                        smsMessageTemplate.content = n.smsMessageTemplate.content;
                        smsMessageTemplate.smsMessageVariables = new Array();
                        if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                            try {
                                for (var _e = tslib_1.__values(n.smsMessageTemplate.smsMessageVariables), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var v = _f.value;
                                    /** @type {?} */
                                    var variable = new SmsMessageVariable(bpmnModel);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        messageNotice.smsMessageTemplate = smsMessageTemplate;
                    }
                    // messageNotice.receiver = n.receiver;
                    // messageNotice.receiverText = n.receiverText;
                    if (n.receivers && n.receivers.length > 0) {
                        /** @type {?} */
                        var receivers = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'userParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant'); }));
                        /** @type {?} */
                        var participants = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'variableParticipant' || r.type === 'positionParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant'); }));
                        if (receivers && receivers.length > 0) {
                            /** @type {?} */
                            var receiver = '';
                            /** @type {?} */
                            var receiverName = '';
                            try {
                                for (var receivers_1 = tslib_1.__values(receivers), receivers_1_1 = receivers_1.next(); !receivers_1_1.done; receivers_1_1 = receivers_1.next()) {
                                    var r = receivers_1_1.value;
                                    if (r.type === 'processParticipant') {
                                        receiver += (r.processParticipant + ',');
                                        if (r.processParticipant === 'procInstCreator') {
                                            receiverName += '流程发起人,';
                                        }
                                        else if (r.processParticipant === 'workItemParticipant') {
                                            receiverName += '任务接收人,';
                                        }
                                    }
                                    else if (r.type === 'userParticipant') {
                                        receiver += (r.userIds + ',');
                                        receiverName += (r.userNames + ',');
                                    }
                                }
                            }
                            catch (e_3_1) { e_3 = { error: e_3_1 }; }
                            finally {
                                try {
                                    if (receivers_1_1 && !receivers_1_1.done && (_c = receivers_1.return)) _c.call(receivers_1);
                                }
                                finally { if (e_3) throw e_3.error; }
                            }
                            if (receiver) {
                                receiver = receiver.substring(0, receiver.length - 1);
                            }
                            if (receiverName) {
                                receiverName = receiverName.substring(0, receiverName.length - 1);
                            }
                            messageNotice.receiver = receiver;
                            messageNotice.receiverText = receiverName;
                        }
                        if (participants && participants.length > 0) {
                            /** @type {?} */
                            var receiverExpressions = new Array();
                            try {
                                for (var participants_1 = tslib_1.__values(participants), participants_1_1 = participants_1.next(); !participants_1_1.done; participants_1_1 = participants_1.next()) {
                                    var p = participants_1_1.value;
                                    if (p.type === 'processParticipant') {
                                        /** @type {?} */
                                        var activityExecutor = new ActivityExecutorParticipantExpression(messageActivity.Model);
                                        activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                        activityExecutor.activityDefId = p.activityDefId;
                                        activityExecutor.activityDefName = p.activityDefName;
                                        receiverExpressions.push(activityExecutor);
                                    }
                                    if (p.type === 'variableParticipant') {
                                        /** @type {?} */
                                        var variableParticipant = new UserParticipantExpression(messageActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                        variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                        variableParticipant.Tag = 'expression';
                                        variableParticipant.OrgType = p.orgType;
                                        receiverExpressions.push(variableParticipant);
                                    }
                                    if (p.type === 'positionParticipant') {
                                        /** @type {?} */
                                        var posiParticipant = new PositionParticipantExpression(messageActivity.Model, p.positionId, p.positionName);
                                        posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                        posiParticipant.PositionType = p.positionType;
                                        if (p.positionType === '1') {
                                            posiParticipant.OrgId = p.orgId;
                                            posiParticipant.OrgType = p.orgType;
                                        }
                                        receiverExpressions.push(posiParticipant);
                                    }
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (participants_1_1 && !participants_1_1.done && (_d = participants_1.return)) _d.call(participants_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            messageNotice.receiverExpressions = receiverExpressions;
                        }
                    }
                    messageActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (notices_1_1 && !notices_1_1.done && (_a = notices_1.return)) _a.call(notices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    MessageActivityCell.prototype.updateVariableSettings = /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    function (messageActivity, obj) {
        var e_5, _a, e_6, _b, e_7, _c;
        /** @type {?} */
        var bpmnModel = messageActivity.Model;
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (messageActivity.variableSettings && messageActivity.variableSettings.length > 0) {
            var _loop_1 = function (v) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    var i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return (e instanceof Component && e.Id === v.value); }));
                    extendElements.splice(i, 1);
                }
            };
            try {
                for (var _d = tslib_1.__values(messageActivity.variableSettings), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var v = _e.value;
                    _loop_1(v);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        messageActivity.variableSettings = new Array();
        /** @type {?} */
        var variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var v = variables_1_1.value;
                    /** @type {?} */
                    var variableSetting = new VariableSetting(bpmnModel);
                    // variableSetting.variableId = v.variableId;
                    variableSetting.variableCode = v.variableCode;
                    variableSetting.variableName = v.variableName;
                    variableSetting.tag = v.tag;
                    variableSetting.executionTime = v.executionTime;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    messageActivity.variableSettings.push(variableSetting);
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        var c = v.component;
                        if (c) {
                            /** @type {?} */
                            var cpt = new Component(bpmnModel);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                try {
                                    for (var _f = tslib_1.__values(c.ActualParameters), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        var a = _g.value;
                                        /** @type {?} */
                                        var parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                        parameter.Tag = a.Tag;
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                    }
                                    finally { if (e_7) throw e_7.error; }
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
    };
    MessageActivityCell.CLR_TYPE_ID = MessageActivity.Clr_Type_ID;
    return MessageActivityCell;
}(NodeCell));
export { MessageActivityCell };
if (false) {
    /** @type {?} */
    MessageActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    MessageActivityCell.prototype.clrTypeId;
    /** @type {?} */
    MessageActivityCell.prototype.name;
    /** @type {?} */
    MessageActivityCell.prototype.nameLanguage;
    /** @type {?} */
    MessageActivityCell.prototype.flowElement;
    /** @type {?} */
    MessageActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,