/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { NotifyActivity, ExtendProperty, MessageNotice, ActionScope, Condition, ExecuteForm, PotentialOwnerImpl, HumanPerformerImpl, OrganizationParticipantExpression, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, ActualParameter, SmsMessageTemplate, SmsMessageVariable, } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { WfConstants } from "../WfConstants";
import { NotifyActivityPropertyKeys } from "./property-keys/NotifyActivityPropertyKeys";
// import { ParticipantInfo } from "../../views/participant/participant.info";
import { ParticipantInfo } from "../entity";
/**
 * 知会活动节点
 */
var NotifyActivityCell = /** @class */ (function (_super) {
    tslib_1.__extends(NotifyActivityCell, _super);
    function NotifyActivityCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = NotifyActivityCell.CLR_TYPE_ID;
        _this.name = "知会";
        _this.nameLanguage = {
            "zh-CHS": "知会",
            "zh-CHT": "知會",
            "en": "Notify",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/notify.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/notify_backup.png",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    NotifyActivityCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        flowNode.Id = "NotifyActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.notifyAble = this.editorUi.generalConfig.enableNotify;
        }
        return flowNode;
    };
    /**
     * @return {?}
     */
    NotifyActivityCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var editorUi = this.editorUi;
        // const graph = editorUi.graph;
        /** @type {?} */
        var act = this.flowElement;
        // 过滤配置位置为节点的扩展属性，分离一级和二级属性：知会节点
        // 一级节点List
        /** @type {?} */
        var generalExtendList = [];
        // 二级节点List
        /** @type {?} */
        var detailExtendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            JSON.parse(JSON.stringify(editorUi.procExtProps)).forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                if (p.propertyLocation && p.propertyLocation.indexOf('activity') != -1 && !p.parentId) {
                    generalExtendList.push(p);
                }
                else if (p.propertyLocation && p.propertyLocation.indexOf('activity') != -1 && p.parentId) {
                    detailExtendList.push(p);
                }
            }));
        }
        generalExtendList = generalExtendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        var extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        var basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        var activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: NotifyActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: NotifyActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        var performerProperty = new ElementPropertyConfig();
        performerProperty.categoryId = 'performerProperty';
        performerProperty.categoryName = mxResources.get('performerProperty');
        performerProperty.tabId = 'basic';
        performerProperty.tabName = mxResources.get('basicAttributes');
        performerProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.ParticipantSchemes, propertyName: mxResources.get('notifyRecipient'), propertyType: 'modal' }
        ];
        /** @type {?} */
        var formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: NotifyActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        /** @type {?} */
        var approvalProperty = new ElementPropertyConfig();
        approvalProperty.categoryId = 'activityProperty';
        approvalProperty.categoryName = mxResources.get('activityProperty');
        approvalProperty.tabId = 'basic';
        approvalProperty.tabName = mxResources.get('basicAttributes');
        approvalProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.NotifyAble, propertyName: mxResources.get('notifyAble'), propertyType: 'modal' },
        ];
        activityProperty.categoryId = 'advanced';
        activityProperty.categoryName = mxResources.get('otherConfigurations');
        activityProperty.tabId = 'advanced';
        activityProperty.tabName = mxResources.get('advancedAttributes');
        activityProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        var groupList = new Array();
        try {
            for (var extendList_1 = tslib_1.__values(extendList), extendList_1_1 = extendList_1.next(); !extendList_1_1.done; extendList_1_1 = extendList_1.next()) {
                var extend = extendList_1_1.value;
                if (!extend.parentId) {
                    /** @type {?} */
                    var group = { parent: extend, childs: new Array() };
                    try {
                        for (var extendList_2 = tslib_1.__values(extendList), extendList_2_1 = extendList_2.next(); !extendList_2_1.done; extendList_2_1 = extendList_2.next()) {
                            var e = extendList_2_1.value;
                            if (e.parentId === extend.id) {
                                group.childs.push(e);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (extendList_2_1 && !extendList_2_1.done && (_b = extendList_2.return)) _b.call(extendList_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    groupList.push(group);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (extendList_1_1 && !extendList_1_1.done && (_a = extendList_1.return)) _a.call(extendList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            var ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            try {
                for (var groupList_1 = tslib_1.__values(groupList), groupList_1_1 = groupList_1.next(); !groupList_1_1.done; groupList_1_1 = groupList_1.next()) {
                    var g = groupList_1_1.value;
                    ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (groupList_1_1 && !groupList_1_1.done && (_c = groupList_1.return)) _c.call(groupList_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.setPropertyData(act, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, activityProperty, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            this.setPropertyData(act, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, activityProperty],
                propertyData: propertyData
            };
        }
    };
    /**
     * 组织UserActivity的属性值propertyData
     * @param act
     * @param propertyData
     */
    /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    NotifyActivityCell.prototype.setPropertyData = /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    function (act, propertyData, groupList) {
        var e_4, _a;
        propertyData[NotifyActivityPropertyKeys.Id] = act.Id;
        propertyData[NotifyActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[NotifyActivityPropertyKeys.Name] = act.Name;
        propertyData[NotifyActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[NotifyActivityPropertyKeys.ParticipantSchemes] = this.getParticipantInfo(act);
        propertyData[NotifyActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        ;
        propertyData[NotifyActivityPropertyKeys.wf_ExecuteForms_PC] =
            act.executeForms ? act.executeForms.find((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType === 'PC'; })) : null;
        propertyData[NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile] =
            act.executeForms ? act.executeForms.find((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType === 'MOBILE'; })) : null;
        propertyData[NotifyActivityPropertyKeys.NotifyAble] = PropertyHelper.getNotifyAble(act.notifyAble, act.dynamicParticipants);
        try {
            for (var groupList_2 = tslib_1.__values(groupList), groupList_2_1 = groupList_2.next(); !groupList_2_1.done; groupList_2_1 = groupList_2.next()) {
                var g = groupList_2_1.value;
                // 取回模型上的value值给到扩展属性组件里
                if (act.extendProperties && act.extendProperties.length > 0) {
                    g.childs.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    function (a, b) {
                        return a.sortOrder - b.sortOrder;
                    })).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        act.extendProperties.forEach((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            if (e.key == d.code) {
                                d.value = e.value;
                            }
                        }));
                    }));
                }
                propertyData[g.parent.id] = g.childs;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (groupList_2_1 && !groupList_2_1.done && (_a = groupList_2.return)) _a.call(groupList_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    /**
     * @param {?} notifyActivity
     * @return {?}
     */
    NotifyActivityCell.prototype.getParticipantInfo = /**
     * @param {?} notifyActivity
     * @return {?}
     */
    function (notifyActivity) {
        /** @type {?} */
        var partiInfo = new ParticipantInfo();
        /** @type {?} */
        var roles = (/** @type {?} */ (notifyActivity.GetResourceRoles().filter((/**
         * @param {?} role
         * @return {?}
         */
        function (role) { return role instanceof HumanPerformerImpl; }))));
        partiInfo.humanPerformerList = PropertyHelper.getPerformerList(roles);
        return partiInfo;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var notifyActivity = this.flowElement;
        /** @type {?} */
        var editorUi = this.editorUi;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            // 参与者属性
            case NotifyActivityPropertyKeys.ParticipantSchemes:
                this.updateParticipant(notifyActivity, obj);
                break;
            case NotifyActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(notifyActivity, obj);
                break;
            case NotifyActivityPropertyKeys.wf_ExecuteForms_PC:
                this.updateStartActivityForm(notifyActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.updateStartActivityForm(notifyActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case NotifyActivityPropertyKeys.NotifyAble:
                this.updateNotifySet(notifyActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (this.editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === propertyId; })) > -1) {
                    this.resetExtendProperty(notifyActivity, obj);
                }
                else {
                    _super.prototype.updateProps.call(this, obj);
                }
                break;
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityCell.prototype.updateParticipant = /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    function (notifyActivity, obj) {
        var e_5, _a;
        /** @type {?} */
        var performerInfo = obj.propertyValue;
        /** @type {?} */
        var resourceRoles = notifyActivity.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            resourceRoles.forEach((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r instanceof HumanPerformerImpl) {
                    notifyActivity.RemoveResourceRole(r.Id);
                }
            }));
        }
        if (performerInfo.humanPerformerList && performerInfo.humanPerformerList.length > 0) {
            try {
                for (var _b = tslib_1.__values(performerInfo.humanPerformerList), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var humanPerformer = _c.value;
                    switch (humanPerformer.type) {
                        case UserParticipantExpression.Clr_Type_ID:
                            this.addUserParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case PositionParticipantExpression.Clr_Type_ID:
                            this.addPositionParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case VariableParticipantExpression.Clr_Type_ID:
                            this.addVariableParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ComponentParticipantExpression.Clr_Type_ID:
                            this.addComponentParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ReportingLineParticipantExpression.Clr_Type_ID:
                            this.addReportingLineParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ActivityExecutorParticipantExpression.Clr_Type_ID:
                            this.addActivityExecutorParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case MatrixParticipantExpression.Clr_Type_ID:
                            this.addMatrixParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addUserParticipant = /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, performer, type, scope) {
        /** @type {?} */
        var userParticipant = new UserParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName, performer.orgType);
        userParticipant.id = performer.id;
        userParticipant.OrgId = performer.orgId;
        userParticipant.OrgName = performer.orgName;
        userParticipant.Tag = performer.tag;
        userParticipant.OrgType = performer.orgType;
        userParticipant.order = performer.order;
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                userParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(userParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addVariableParticipant = /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, performer, type, scope) {
        /** @type {?} */
        var variablePerformer = new VariableParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName, performer.orgType);
        variablePerformer.id = performer.id;
        variablePerformer.Name = performer.performerName ? performer.performerName : performer.name;
        ;
        variablePerformer.Tag = performer.tag;
        variablePerformer.VarValue = performer.varValue;
        variablePerformer.VarType = performer.varType;
        variablePerformer.Relation = performer.relation;
        variablePerformer.order = performer.order;
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                variablePerformer.actionScope = scope;
                notifyActivity.dynamicParticipants.push(variablePerformer);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addPositionParticipant = /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, performer, type, scope) {
        /** @type {?} */
        var posiParticipant = new PositionParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName);
        posiParticipant.id = performer.id;
        posiParticipant.PositionType = performer.positionType;
        posiParticipant.order = performer.order;
        if (performer.positionType === '1') {
            posiParticipant.OrgId = performer.orgId;
            posiParticipant.OrgName = performer.orgName;
            posiParticipant.OrgType = performer.orgType;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                posiParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(posiParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addComponentParticipant = /**
     * @param {?} notifyActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, component, type, scope) {
        var e_6, _a;
        /** @type {?} */
        var componentParticipant = new ComponentParticipantExpression(notifyActivity.Model);
        componentParticipant.id = component.id;
        componentParticipant.componentId = component.metadataId;
        componentParticipant.componentName = component.name;
        componentParticipant.methodName = component.methodName;
        componentParticipant.methodCode = component.methodCode;
        componentParticipant.order = component.order;
        if (component.actualParameters && component.actualParameters.length > 0) {
            /** @type {?} */
            var actParas = new Array();
            try {
                for (var _b = tslib_1.__values(component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var para = _c.value;
                    /** @type {?} */
                    var actPara = new ActualParameter(notifyActivity.Model, para.code, para.value, para.valueText);
                    // TODO:更新参与者会默认把构件参数属性改为contant，临时修复，后续代码优化
                    actPara.Tag = para.tag;
                    if (para.fetchValueMode) {
                        switch (para.fetchValueMode) {
                            case 'express':
                                actPara.Tag = 'expression';
                                break;
                            case 'none':
                                actPara.Tag = 'expression';
                                break;
                            default:
                                actPara.Tag = 'constant';
                                break;
                        }
                    }
                    actParas.push(actPara);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
            componentParticipant.actualParameters = actParas;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = component.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = component.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = component.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = component.order;
            if (scope) {
                componentParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(componentParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addReportingLineParticipant = /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, participant, type, scope) {
        /** @type {?} */
        var reportingLine = new ReportingLineParticipantExpression(notifyActivity.Model);
        reportingLine.id = participant.id;
        reportingLine.ReportingLineDefId = participant.reportingLineDefId;
        reportingLine.ReportingLineDefName = participant.reportingLineDefName;
        reportingLine.RefOrgId = participant.refOrgId;
        reportingLine.RefUserId = participant.refUserId;
        reportingLine.RefEmployeeId = participant.refEmployeeId;
        reportingLine.order = participant.order;
        reportingLine.Dimension = participant.dimension;
        reportingLine.Tag = participant.tag;
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                reportingLine.actionScope = scope;
                notifyActivity.dynamicParticipants.push(reportingLine);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addActivityExecutorParticipant = /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, participant, type, scope) {
        /** @type {?} */
        var activityExecutor = new ActivityExecutorParticipantExpression(notifyActivity.Model);
        activityExecutor.id = participant.id;
        activityExecutor.activityDefId = participant.activityDefId;
        activityExecutor.order = participant.order;
        activityExecutor.activityDefName = participant.activityDefName;
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                activityExecutor.actionScope = scope;
                notifyActivity.dynamicParticipants.push(activityExecutor);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addMatrixParticipant = /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, participant, type, scope) {
        /** @type {?} */
        var matrix = new MatrixParticipantExpression(notifyActivity.Model);
        matrix.order = participant.order;
        matrix.id = participant.id;
        matrix.matrixDefId = participant.matrixDefId;
        matrix.matrixDefName = participant.matrixDefName;
        matrix.conditionField1 = participant.conditionField1;
        matrix.conditionFieldText1 = participant.conditionFieldText1;
        matrix.conditionField2 = participant.conditionField2;
        matrix.conditionFieldText2 = participant.conditionFieldText2;
        matrix.conditionField3 = participant.conditionField3;
        matrix.conditionFieldText3 = participant.conditionFieldText3;
        matrix.multivaluedCondition = participant.multivaluedCondition;
        matrix.dataFieldAlias = participant.dataFieldAlias;
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                matrix.actionScope = scope;
                notifyActivity.dynamicParticipants.push(matrix);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
 *
 * @param userActivity
 * @param participant
 * @param type
 */
    /**
     *
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    NotifyActivityCell.prototype.addOrganizationParticipant = /**
     *
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    function (notifyActivity, participant, type, scope) {
        /** @type {?} */
        var potential = new OrganizationParticipantExpression(notifyActivity.Model);
        potential.id = participant.id;
        potential.order = participant.order;
        potential.actionScope = ActionScope.AssignUser;
        potential.organizationLevel = (/** @type {?} */ (participant.organizationLevel));
        potential.organizationId = participant.organizationId;
        potential.organizationName = participant.organizationName;
        potential.includeChildren = participant.includeChildren;
        potential.tag = participant.tag;
        if (participant.condition) {
            /** @type {?} */
            var condition = new Condition(notifyActivity.Model);
            condition.Value = participant.condition;
            potential.condition = condition;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            var humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            var otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                var condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                potential.actionScope = scope;
                notifyActivity.dynamicParticipants.push(potential);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    NotifyActivityCell.prototype.updateStartActivityForm = /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    function (notifyActivity, obj, terminal) {
        var e_7, _a;
        if (notifyActivity) {
            /** @type {?} */
            var form = (/** @type {?} */ (obj.propertyValue));
            if (!notifyActivity.executeForms) {
                notifyActivity.executeForms = new Array();
            }
            notifyActivity.executeForms = notifyActivity.executeForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType !== terminal; }));
            if (form) {
                /** @type {?} */
                var params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                var actParas = new Array();
                if (params && params.length > 0) {
                    try {
                        for (var params_1 = tslib_1.__values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                            var para = params_1_1.value;
                            /** @type {?} */
                            var actPara = new ActualParameter(notifyActivity.Model, para.Name, para.Value);
                            if (para.Tag) {
                                actPara.Tag = para.Tag;
                            }
                            else {
                                if (para.Value) {
                                    if (para.Value.length >= 8 && para.Value.slice(0, 8) === "{\"expr\":") {
                                        actPara.Tag = 'expression';
                                    }
                                    else {
                                        actPara.Tag = 'constant';
                                    }
                                }
                                else {
                                    actPara.Tag = 'variable';
                                }
                            }
                            actParas.push(actPara);
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
                /** @type {?} */
                var id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                var item = new ExecuteForm(notifyActivity.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                notifyActivity.executeForms.push(item);
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityCell.prototype.updateNotifySet = /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    function (notifyActivity, obj) {
        var e_8, _a;
        /** @type {?} */
        var scope = (/** @type {?} */ (obj.propertyValue));
        notifyActivity.dynamicParticipants = notifyActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return ((/** @type {?} */ (p))).actionScope !== ActionScope.Notify; }));
        notifyActivity.notifyAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                var organizationParticipantExpression = new OrganizationParticipantExpression(notifyActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Notify;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                notifyActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                var performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    try {
                        for (var _b = tslib_1.__values(performerInfo.potentialOwnerList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var potentialOwner = _c.value;
                            switch (potentialOwner.type) {
                                case UserParticipantExpression.Clr_Type_ID:
                                    this.addUserParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case VariableParticipantExpression.Clr_Type_ID:
                                    this.addVariableParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case PositionParticipantExpression.Clr_Type_ID:
                                    this.addPositionParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case ComponentParticipantExpression.Clr_Type_ID:
                                    this.addComponentParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case ReportingLineParticipantExpression.Clr_Type_ID:
                                    this.addReportingLineParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                    this.addActivityExecutorParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                    notifyActivity;
                                case MatrixParticipantExpression.Clr_Type_ID:
                                    this.addMatrixParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                                case OrganizationParticipantExpression.Clr_Type_ID:
                                    this.addOrganizationParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                    break;
                            }
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
            }
        }
    };
    /**
     * 更新知会活动扩展属性
     * @param notifyActivity
     * @param obj
     */
    /**
     * 更新知会活动扩展属性
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityCell.prototype.resetExtendProperty = /**
     * 更新知会活动扩展属性
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    function (notifyActivity, obj) {
        var e_9, _a;
        if (notifyActivity) {
            /** @type {?} */
            var attributes = (/** @type {?} */ (obj.propertyValue));
            if (!notifyActivity.extendProperties) {
                notifyActivity.extendProperties = new Array();
            }
            var _loop_1 = function (o) {
                /** @type {?} */
                var index = notifyActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.key === o.code; }));
                if (index > -1) {
                    notifyActivity.extendProperties.splice(index, 1);
                }
            };
            try {
                for (var _b = tslib_1.__values(obj.propertyValue), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var o = _c.value;
                    _loop_1(o);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    /** @type {?} */
                    var item = new ExtendProperty(notifyActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    notifyActivity.extendProperties.push(item);
                }));
            }
        }
    };
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityCell.prototype.updateMessageNotices = /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    function (notifyActivity, obj) {
        var e_10, _a, e_11, _b, e_12, _c, e_13, _d;
        /** @type {?} */
        var bpmnModel = notifyActivity.Model;
        /** @type {?} */
        var notices = (/** @type {?} */ (obj.propertyValue));
        notifyActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            try {
                for (var notices_1 = tslib_1.__values(notices), notices_1_1 = notices_1.next(); !notices_1_1.done; notices_1_1 = notices_1.next()) {
                    var n = notices_1_1.value;
                    /** @type {?} */
                    var messageNotice = new MessageNotice(bpmnModel);
                    messageNotice.sendType = n.sendType;
                    messageNotice.sendTime = n.sendTime;
                    messageNotice.subject = n.subject;
                    messageNotice.content = n.content;
                    if (n.smsMessageTemplate) {
                        /** @type {?} */
                        var smsMessageTemplate = new SmsMessageTemplate(bpmnModel);
                        smsMessageTemplate.code = n.smsMessageTemplate.code;
                        smsMessageTemplate.content = n.smsMessageTemplate.content;
                        smsMessageTemplate.smsMessageVariables = new Array();
                        if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                            try {
                                for (var _e = tslib_1.__values(n.smsMessageTemplate.smsMessageVariables), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var v = _f.value;
                                    /** @type {?} */
                                    var variable = new SmsMessageVariable(bpmnModel);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            catch (e_11_1) { e_11 = { error: e_11_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                }
                                finally { if (e_11) throw e_11.error; }
                            }
                        }
                        messageNotice.smsMessageTemplate = smsMessageTemplate;
                    }
                    // messageNotice.receiver = n.receiver;
                    // messageNotice.receiverText = n.receiverText;
                    n.receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r.type; }));
                    if (n.receivers && n.receivers.length > 0) {
                        /** @type {?} */
                        var receivers = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'userParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant'); }));
                        /** @type {?} */
                        var participants = n.receivers.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) { return r.type === 'variableParticipant' || r.type === 'positionParticipant'
                            || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant'); }));
                        if (receivers && receivers.length > 0) {
                            /** @type {?} */
                            var receiver = '';
                            /** @type {?} */
                            var receiverName = '';
                            try {
                                for (var receivers_1 = tslib_1.__values(receivers), receivers_1_1 = receivers_1.next(); !receivers_1_1.done; receivers_1_1 = receivers_1.next()) {
                                    var r = receivers_1_1.value;
                                    if (r.type === 'processParticipant') {
                                        receiver += (r.processParticipant + ',');
                                        if (r.processParticipant === 'procInstCreator') {
                                            receiverName += '流程发起人,';
                                        }
                                        else if (r.processParticipant === 'workItemParticipant') {
                                            receiverName += '任务接收人,';
                                        }
                                    }
                                    else if (r.type === 'userParticipant') {
                                        receiver += (r.userIds + ',');
                                        receiverName += (r.userNames + ',');
                                    }
                                }
                            }
                            catch (e_12_1) { e_12 = { error: e_12_1 }; }
                            finally {
                                try {
                                    if (receivers_1_1 && !receivers_1_1.done && (_c = receivers_1.return)) _c.call(receivers_1);
                                }
                                finally { if (e_12) throw e_12.error; }
                            }
                            if (receiver) {
                                receiver = receiver.substring(0, receiver.length - 1);
                            }
                            if (receiverName) {
                                receiverName = receiverName.substring(0, receiverName.length - 1);
                            }
                            messageNotice.receiver = receiver;
                            messageNotice.receiverText = receiverName;
                        }
                        if (participants && participants.length > 0) {
                            /** @type {?} */
                            var receiverExpressions = new Array();
                            try {
                                for (var participants_1 = tslib_1.__values(participants), participants_1_1 = participants_1.next(); !participants_1_1.done; participants_1_1 = participants_1.next()) {
                                    var p = participants_1_1.value;
                                    if (p.type === 'processParticipant') {
                                        /** @type {?} */
                                        var activityExecutor = new ActivityExecutorParticipantExpression(notifyActivity.Model);
                                        activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                        activityExecutor.activityDefId = p.activityDefId;
                                        activityExecutor.activityDefName = p.activityDefName;
                                        receiverExpressions.push(activityExecutor);
                                    }
                                    if (p.type === 'variableParticipant') {
                                        /** @type {?} */
                                        var variableParticipant = new UserParticipantExpression(notifyActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                        variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                        variableParticipant.Tag = 'expression';
                                        variableParticipant.OrgType = p.orgType;
                                        receiverExpressions.push(variableParticipant);
                                    }
                                    if (p.type === 'positionParticipant') {
                                        /** @type {?} */
                                        var posiParticipant = new PositionParticipantExpression(notifyActivity.Model, p.positionId, p.positionName);
                                        posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                        posiParticipant.PositionType = p.positionType;
                                        if (p.positionType === '1') {
                                            posiParticipant.OrgId = p.orgId;
                                            posiParticipant.OrgType = p.orgType;
                                        }
                                        receiverExpressions.push(posiParticipant);
                                    }
                                }
                            }
                            catch (e_13_1) { e_13 = { error: e_13_1 }; }
                            finally {
                                try {
                                    if (participants_1_1 && !participants_1_1.done && (_d = participants_1.return)) _d.call(participants_1);
                                }
                                finally { if (e_13) throw e_13.error; }
                            }
                            messageNotice.receiverExpressions = receiverExpressions;
                        }
                    }
                    notifyActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (notices_1_1 && !notices_1_1.done && (_a = notices_1.return)) _a.call(notices_1);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
    };
    NotifyActivityCell.CLR_TYPE_ID = NotifyActivity.Clr_Type_ID;
    return NotifyActivityCell;
}(NodeCell));
export { NotifyActivityCell };
if (false) {
    /** @type {?} */
    NotifyActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    NotifyActivityCell.prototype.clrTypeId;
    /** @type {?} */
    NotifyActivityCell.prototype.name;
    /** @type {?} */
    NotifyActivityCell.prototype.nameLanguage;
    /** @type {?} */
    NotifyActivityCell.prototype.flowElement;
    /** @type {?} */
    NotifyActivityCell.prototype.editorUi;
    /** @type {?} */
    NotifyActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,