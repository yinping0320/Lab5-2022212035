/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { StartActivity, ExtendProperty, JumpScope, ExecuteForm, ActualParameter, OtherAssignNodes, OtherAssignActivityNodeInfo, Condition } from "@gsp-wf/wf-process-model";
import { WfConstants } from "../WfConstants";
import { StartActivityPropertyKeys } from "./property-keys/StartActivityPropertyKeys";
import { PropertyHelper } from "./PropertyHelper";
/**
 * 开始活动节点
 */
var StartActivityCell = /** @class */ (function (_super) {
    tslib_1.__extends(StartActivityCell, _super);
    function StartActivityCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = StartActivityCell.CLR_TYPE_ID;
        _this.name = "开始";
        _this.nameLanguage = {
            "zh-CHS": "开始",
            "zh-CHT": "開始",
            "en": "Start",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/start.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/start_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    StartActivityCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        /** @type {?} */
        var editorUi = this.editorUi;
        flowNode.Id = "startActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            // 设置默认表单
            if (editorUi && editorUi.formFormats) {
                /** @type {?} */
                var formFormats = editorUi.formFormats;
                /** @type {?} */
                var startActivityForms = new Array();
                /** @type {?} */
                var pcForm = formFormats.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.terminal === 'PC' && f.status === 1; }))[0];
                if (pcForm) {
                    startActivityForms.push(pcForm);
                }
                /** @type {?} */
                var mobileForm = formFormats.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.terminal === 'Mobile' && f.status === 1; }))[0];
                if (mobileForm) {
                    startActivityForms.push(mobileForm);
                }
                if (startActivityForms && startActivityForms.length > 0) {
                    flowNode.setDefaultForms(startActivityForms);
                }
            }
        }
        return flowNode;
    };
    /**
     * @return {?}
     */
    StartActivityCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var editorUi = this.editorUi;
        /** @type {?} */
        var act = (/** @type {?} */ (this.flowElement));
        /** @type {?} */
        var extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        var PropertyConfig = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = new Object();
        PropertyConfig.categoryId = 'general';
        PropertyConfig.categoryName = mxResources.get('basicInformation');
        PropertyConfig.tabId = 'basic';
        PropertyConfig.tabName = mxResources.get('basicAttributes');
        PropertyConfig.properties = [
            { propertyID: StartActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: StartActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: StartActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        var formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: StartActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: StartActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        /** @type {?} */
        var ActivityConfig = new ElementPropertyConfig();
        ActivityConfig.categoryId = 'activityConfig';
        ActivityConfig.categoryName = mxResources.get('activityProperty');
        ActivityConfig.tabId = 'basic';
        ActivityConfig.tabName = mxResources.get('basicAttributes');
        ActivityConfig.properties = [
            // { propertyID: StartActivityPropertyKeys.ExecuteForms, propertyName: mxResources.get('formDef'), propertyType: 'modal' },
            { propertyID: 'sendBackedTask', propertyName: mxResources.get('sendBackedTask'), propertyType: 'select' }
        ];
        if (act.selectTargetAble) {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
                { propertyID: StartActivityPropertyKeys.JumpScope, propertyName: mxResources.get('jumpScope'), propertyType: 'modal' }
            ]);
            propertyData.SelectTargetAble = act.selectTargetAble || false;
            propertyData.JumpScope = act.jumpScope;
        }
        else {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' }
            ]);
            propertyData.SelectTargetAble = act.selectTargetAble || false;
        }
        if (act.otherAssignNodes) {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' },
                // { propertyID: StartActivityPropertyKeys.otherAssignActivities, propertyName: mxResources.get('otherAssignActivities'), propertyType: 'modal' }
                { propertyID: StartActivityPropertyKeys.otherAssignActivityNodeInfos, propertyName: mxResources.get('otherAssignActivityNodeInfos'), propertyType: 'modal' }
            ]);
            propertyData[StartActivityPropertyKeys.otherAssignNodes] = true;
            // propertyData[StartActivityPropertyKeys.otherAssignActivities] = act.otherAssignNodes.otherAssignActivities;
            propertyData[StartActivityPropertyKeys.otherAssignActivityNodeInfos] = act.otherAssignNodes.otherAssignActivities || act.otherAssignNodes.otherAssignActivityNodeInfos;
            if (act.otherAssignNodes.otherAssignActivities) {
                act.otherAssignNodes.otherAssignActivities = null;
            }
        }
        else {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' }
            ]);
            propertyData[StartActivityPropertyKeys.otherAssignNodes] = false;
        }
        /** @type {?} */
        var groupList = new Array();
        try {
            for (var extendList_1 = tslib_1.__values(extendList), extendList_1_1 = extendList_1.next(); !extendList_1_1.done; extendList_1_1 = extendList_1.next()) {
                var extend = extendList_1_1.value;
                if (!extend.parentId) {
                    /** @type {?} */
                    var group = { parent: extend, childs: new Array() };
                    try {
                        for (var extendList_2 = tslib_1.__values(extendList), extendList_2_1 = extendList_2.next(); !extendList_2_1.done; extendList_2_1 = extendList_2.next()) {
                            var e = extendList_2_1.value;
                            if (e.parentId === extend.id) {
                                group.childs.push(e);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (extendList_2_1 && !extendList_2_1.done && (_b = extendList_2.return)) _b.call(extendList_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    groupList.push(group);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (extendList_1_1 && !extendList_1_1.done && (_a = extendList_1.return)) _a.call(extendList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            var ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            try {
                for (var groupList_1 = tslib_1.__values(groupList), groupList_1_1 = groupList_1.next(); !groupList_1_1.done; groupList_1_1 = groupList_1.next()) {
                    var g = groupList_1_1.value;
                    ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
                    // 取回模型上的value值给到扩展属性组件里
                    if (act.extendProperties && act.extendProperties.length > 0) {
                        g.childs.sort((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) {
                            return a.sortOrder - b.sortOrder;
                        })).forEach((/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            act.extendProperties.forEach((/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                if (e.key == d.code) {
                                    d.value = e.value;
                                }
                            }));
                        }));
                    }
                    propertyData[g.parent.id] = g.childs;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (groupList_1_1 && !groupList_1_1.done && (_c = groupList_1.return)) _c.call(groupList_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            // todo：与else分支代码重复，可提取至if语句外，本次修改仅针对名称多语，故暂不修改
            propertyData[StartActivityPropertyKeys.Id] = act.Id;
            propertyData[StartActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
            propertyData[StartActivityPropertyKeys.Name] = act.Name || mxResources.get('start');
            propertyData[StartActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
                "zh-CHS": act.Name,
            };
            propertyData[StartActivityPropertyKeys.sendBackedTask] = act.sendBackedTask;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_PC] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.TerminalType === 'PC'; })) : null;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_Mobile] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.TerminalType === 'MOBILE'; })) : null;
            return {
                propertyConfig: [PropertyConfig, formDef, ActivityConfig, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            propertyData[StartActivityPropertyKeys.Id] = act.Id;
            propertyData[StartActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
            propertyData[StartActivityPropertyKeys.Name] = act.Name || mxResources.get('start');
            propertyData[StartActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
                "zh-CHS": act.Name,
            };
            propertyData[StartActivityPropertyKeys.sendBackedTask] = act.sendBackedTask;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_PC] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.TerminalType === 'PC'; })) : null;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_Mobile] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.TerminalType === 'MOBILE'; })) : null;
            return {
                propertyConfig: [PropertyConfig, formDef, ActivityConfig],
                propertyData: propertyData
            };
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    StartActivityCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var editorUi = this.editorUi;
        /** @type {?} */
        var startActivity = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case StartActivityPropertyKeys.wf_ExecuteForms_PC:
                this.updateStartActivityForm(startActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case StartActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.updateStartActivityForm(startActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case StartActivityPropertyKeys.SelectTargetAble:
                this.resetSelectTargetAble(startActivity, obj);
                break;
            case StartActivityPropertyKeys.JumpScope:
                this.resetJumpScope(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignNodes:
                this.updateOtherAssignNodes(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignActivities:
                this.updateOtherAssignActivities(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignActivityNodeInfos:
                this.updateOtherAssignActivities(startActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === propertyId; })) > -1) {
                    this.resetExtendProperty(startActivity, obj);
                }
                else {
                    _super.prototype.updateProps.call(this, obj);
                }
                break;
        }
    };
    /**
     * @param {?} start
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    StartActivityCell.prototype.updateStartActivityForm = /**
     * @param {?} start
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    function (start, obj, terminal) {
        var e_4, _a;
        if (start) {
            /** @type {?} */
            var form = (/** @type {?} */ (obj.propertyValue));
            if (!start.ExecuteForms) {
                start.ExecuteForms = new Array();
            }
            start.ExecuteForms = start.ExecuteForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.TerminalType !== terminal; }));
            if (form) {
                /** @type {?} */
                var params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                var actParas = new Array();
                if (params && params.length > 0) {
                    try {
                        for (var params_1 = tslib_1.__values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                            var para = params_1_1.value;
                            /** @type {?} */
                            var actPara = new ActualParameter(start.Model, para.Name, para.Value);
                            if (para.Tag) {
                                actPara.Tag = para.Tag;
                            }
                            else {
                                if (para.Value) {
                                    if (para.Value.length >= 8 && para.Value.slice(0, 8) === "{\"expr\":") {
                                        actPara.Tag = 'expression';
                                    }
                                    else {
                                        actPara.Tag = 'constant';
                                    }
                                }
                                else {
                                    actPara.Tag = 'variable';
                                }
                            }
                            actParas.push(actPara);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                /** @type {?} */
                var id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                var item = new ExecuteForm(start.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                start.ExecuteForms.push(item);
            }
        }
    };
    /**
     * 更新是否允许跳转属性
     * @param startActivity
     * @param obj
     */
    /**
     * 更新是否允许跳转属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    StartActivityCell.prototype.resetSelectTargetAble = /**
     * 更新是否允许跳转属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    function (startActivity, obj) {
        /** @type {?} */
        var selectTargetAble = (/** @type {?} */ (obj.propertyValue));
        startActivity.selectTargetAble = selectTargetAble;
        if (startActivity.selectTargetAble) {
            startActivity.jumpScope = new JumpScope(startActivity.Model);
        }
        else {
            startActivity.jumpScope = null;
        }
    };
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    StartActivityCell.prototype.resetJumpScope = /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    function (startActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data) {
            /** @type {?} */
            var jumpScope = new JumpScope(startActivity.Model);
            jumpScope.Category = data.Category;
            jumpScope.DefaultType = data.DefaultType;
            jumpScope.DefaultActivity = data.DefaultActivity;
            jumpScope.DestinationActivities = data.DestinationActivities;
            startActivity.jumpScope = jumpScope;
        }
        else {
            startActivity.jumpScope = null;
        }
    };
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    StartActivityCell.prototype.updateOtherAssignNodes = /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    function (startActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data) {
            // const otherAssignNodes = new OtherAssignNodes(startActivity.Model);
            // otherAssignNodes.otherAssignActivities = new Array();
            // startActivity.otherAssignNodes = otherAssignNodes;
            startActivity.otherAssignNodes = new OtherAssignNodes(startActivity.Model);
        }
        else {
            startActivity.otherAssignNodes = null;
        }
    };
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    StartActivityCell.prototype.updateOtherAssignActivities = /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    function (startActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data && data.length > 0) {
            if (typeof data[0] === "string") {
                startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var other = new OtherAssignActivityNodeInfo(startActivity.Model);
                    other.activityDefinitionId = d;
                    other.required = false;
                    other.condition = new Condition(startActivity.Model);
                    startActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            else {
                // startActivity.otherAssignNodes.otherAssignActivityNodeInfos = [...data];  
                startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var other = new OtherAssignActivityNodeInfo(startActivity.Model);
                    other.activityDefinitionId = d.activityDefinitionId;
                    other.required = d.required;
                    other.condition = new Condition(startActivity.Model);
                    other.condition.Value = d.condition.Value;
                    startActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
        }
        else {
            startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
        }
    };
    /**
     * 更新开始节点扩展属性
     * @param startActivity
     * @param obj
     */
    /**
     * 更新开始节点扩展属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    StartActivityCell.prototype.resetExtendProperty = /**
     * 更新开始节点扩展属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    function (startActivity, obj) {
        var e_5, _a;
        if (startActivity) {
            /** @type {?} */
            var attributes = (/** @type {?} */ (obj.propertyValue));
            if (!startActivity.extendProperties) {
                startActivity.extendProperties = new Array();
            }
            var _loop_1 = function (o) {
                /** @type {?} */
                var index = startActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.key === o.code; }));
                if (index > -1) {
                    startActivity.extendProperties.splice(index, 1);
                }
            };
            try {
                for (var _b = tslib_1.__values(obj.propertyValue), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var o = _c.value;
                    _loop_1(o);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    /** @type {?} */
                    var item = new ExtendProperty(startActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    startActivity.extendProperties.push(item);
                }));
            }
        }
    };
    StartActivityCell.CLR_TYPE_ID = StartActivity.Clr_Type_ID;
    return StartActivityCell;
}(NodeCell));
export { StartActivityCell };
if (false) {
    /** @type {?} */
    StartActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    StartActivityCell.prototype.clrTypeId;
    /** @type {?} */
    StartActivityCell.prototype.name;
    /** @type {?} */
    StartActivityCell.prototype.nameLanguage;
    /** @type {?} */
    StartActivityCell.prototype.flowElement;
    /** @type {?} */
    StartActivityCell.prototype.editorUi;
    /** @type {?} */
    StartActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,