/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DataType, DataTypes, DataObject } from "@edp-pmf/bpmn-model";
import { ValuedDataObject, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, OrganizationParticipantExpression, VariableSetting, Component, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression } from "@gsp-wf/wf-process-model";
import { BizComponent } from "../entity/BizComponent";
import { BizParameter } from "../entity/BizParameter";
import { UserParticipant } from "../entity/UserParticipant";
import { VariablePerformer } from "../entity/VariablePerformer";
import { PositionParticipant } from "../entity/PositionParticipant";
import { ComponentParticipant } from "../entity/ComponentParticipant";
import { ReportingLineParticipant } from "../entity/ReportingLineParticipant";
import { ActivityExecutorParticipant } from "../entity/ActivityExecutorParticipant";
import { MatrixParticipant } from "../entity/MatrixParticipant";
import { OrganizationParticipant } from "../entity/OrganizationParticipant";
import { ActionScope } from "../entity/ActionScope";
import { MessageReceiver } from "../entity/MessageReceiver";
import { WfDesignerUtils } from "../WfDesignerUtils";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { ActionOrganizationScope, OrganizationPotentialOwner } from "../../views/organization-potential-owner/actionOrganizationScope";
import { ParticipantInfo } from "../../views/participant/participant.info";
/**
 * 属性工具
 */
var /**
 * 属性工具
 */
PropertyHelper = /** @class */ (function () {
    function PropertyHelper() {
    }
    /**
     * 获取变量赋值列表
     * @param bpmnModel
     * @param variablesSetting
     * @returns
     */
    /**
     * 获取变量赋值列表
     * @param {?} bpmnModel
     * @param {?} variablesSetting
     * @return {?}
     */
    PropertyHelper.getVariableSettings = /**
     * 获取变量赋值列表
     * @param {?} bpmnModel
     * @param {?} variablesSetting
     * @return {?}
     */
    function (bpmnModel, variablesSetting) {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var variables = new Array();
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (variablesSetting && variablesSetting.length > 0) {
            try {
                for (var variablesSetting_1 = tslib_1.__values(variablesSetting), variablesSetting_1_1 = variablesSetting_1.next(); !variablesSetting_1_1.done; variablesSetting_1_1 = variablesSetting_1.next()) {
                    var v = variablesSetting_1_1.value;
                    /** @type {?} */
                    var variable = {
                        variableCode: v.variableCode,
                        variableName: v.variableName,
                        tag: v.tag,
                        executionTime: v.executionTime,
                        value: v.value,
                        valueText: v.valueText
                    };
                    if (v.tag === 'component') {
                        if (extendElements.length > 0) {
                            try {
                                for (var extendElements_1 = tslib_1.__values(extendElements), extendElements_1_1 = extendElements_1.next(); !extendElements_1_1.done; extendElements_1_1 = extendElements_1.next()) {
                                    var e = extendElements_1_1.value;
                                    if (e instanceof Component && e.Id === v.value) {
                                        /** @type {?} */
                                        var component = {
                                            Id: e.Id,
                                            Name: e.Name,
                                            MetadataId: e.MetadataId,
                                            MethodCode: e.MethodCode,
                                            ActualParameters: []
                                        };
                                        if (e.ActualParameters && e.ActualParameters.length > 0) {
                                            try {
                                                for (var _d = tslib_1.__values(e.ActualParameters), _e = _d.next(); !_e.done; _e = _d.next()) {
                                                    var p = _e.value;
                                                    /** @type {?} */
                                                    var parameter = {
                                                        Name: p.Name,
                                                        Value: p.Value,
                                                        Tag: p.Tag,
                                                    };
                                                    component.ActualParameters.push(parameter);
                                                }
                                            }
                                            catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                            finally {
                                                try {
                                                    if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                                                }
                                                finally { if (e_3) throw e_3.error; }
                                            }
                                        }
                                        variable.component = component;
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (extendElements_1_1 && !extendElements_1_1.done && (_b = extendElements_1.return)) _b.call(extendElements_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                    }
                    variables.push(variable);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (variablesSetting_1_1 && !variablesSetting_1_1.done && (_a = variablesSetting_1.return)) _a.call(variablesSetting_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return variables;
    };
    /**
     *
     * @param messageNotices
     * @returns
     */
    /**
     *
     * @param {?} messageNotices
     * @return {?}
     */
    PropertyHelper.getMessageNotices = /**
     *
     * @param {?} messageNotices
     * @return {?}
     */
    function (messageNotices) {
        if (!messageNotices || messageNotices.length == 0) {
            return null;
        }
        return messageNotices.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            var e_4, _a, e_5, _b;
            /** @type {?} */
            var message = new Object;
            message.content = m.content;
            message.sendTime = m.sendTime;
            message.sendType = m.sendType;
            message.subject = m.subject;
            if (m.smsMessageTemplate) {
                /** @type {?} */
                var smsTemplate = new Object;
                smsTemplate.code = m.smsMessageTemplate.code;
                smsTemplate.content = m.smsMessageTemplate.content;
                smsTemplate.smsMessageVariables = new Array();
                if (m.smsMessageTemplate.smsMessageVariables && m.smsMessageTemplate.smsMessageVariables.length > 0) {
                    try {
                        for (var _c = tslib_1.__values(m.smsMessageTemplate.smsMessageVariables), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var v = _d.value;
                            /** @type {?} */
                            var variable = new Object;
                            variable.id = WfDesignerUtils.createNM();
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                message.smsMessageTemplate = smsTemplate;
            }
            /** @type {?} */
            var receiverExpressions = new Array();
            if (m.receiver) {
                /** @type {?} */
                var receivers = m.receiver.split(',');
                /** @type {?} */
                var receiverTexts = m.receiverText.split(',');
                /** @type {?} */
                var userReceiver = new MessageReceiver();
                userReceiver.type = 'userParticipant';
                userReceiver.userIds = '';
                userReceiver.userNames = '';
                for (var i in receivers) {
                    if (receivers[i] === 'procInstCreator') {
                        /** @type {?} */
                        var procInstCreator = new MessageReceiver();
                        procInstCreator.type = 'processParticipant';
                        procInstCreator.processParticipant = 'procInstCreator';
                        receiverExpressions.push(procInstCreator);
                    }
                    else if (receivers[i] === 'workItemParticipant') {
                        /** @type {?} */
                        var workItemParticipant = new MessageReceiver();
                        workItemParticipant.type = 'processParticipant';
                        workItemParticipant.processParticipant = 'workItemParticipant';
                        receiverExpressions.push(workItemParticipant);
                    }
                    else {
                        userReceiver.userIds += (receivers[i] + ',');
                        userReceiver.userNames += (receiverTexts[i] + ',');
                    }
                }
                if (userReceiver.userIds) {
                    userReceiver.userIds = userReceiver.userIds.substring(0, userReceiver.userIds.length - 1);
                    userReceiver.userNames = userReceiver.userNames.substring(0, userReceiver.userNames.length - 1);
                    receiverExpressions.push(userReceiver);
                }
            }
            if (m.receiverExpressions && m.receiverExpressions.length > 0) {
                try {
                    for (var _e = tslib_1.__values(m.receiverExpressions), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var e = _f.value;
                        if (e instanceof ActivityExecutorParticipantExpression) {
                            /** @type {?} */
                            var activityExecutorParticipant = new MessageReceiver();
                            activityExecutorParticipant.type = 'processParticipant';
                            activityExecutorParticipant.processParticipant = 'activityExecutorParticipant';
                            activityExecutorParticipant.activityDefId = e.activityDefId;
                            activityExecutorParticipant.activityDefName = e.activityDefName;
                            receiverExpressions.push(activityExecutorParticipant);
                        }
                        else if (e instanceof UserParticipantExpression) {
                            /** @type {?} */
                            var variableReceiver = new MessageReceiver();
                            variableReceiver.type = 'variableParticipant';
                            variableReceiver.variableParticipant = e.UserId;
                            variableReceiver.variableName = e.name;
                            variableReceiver.orgType = e.OrgType;
                            receiverExpressions.push(variableReceiver);
                        }
                        else if (e instanceof PositionParticipantExpression) {
                            /** @type {?} */
                            var positionReceiver = new MessageReceiver();
                            positionReceiver.type = 'positionParticipant';
                            positionReceiver.positionId = e.PositionId;
                            positionReceiver.positionName = e.PositionName;
                            positionReceiver.positionType = e.PositionType;
                            if (positionReceiver.positionType === '1') {
                                positionReceiver.orgId = e.OrgId;
                                positionReceiver.orgType = e.OrgType;
                            }
                            receiverExpressions.push(positionReceiver);
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
            if (receiverExpressions.length > 0) {
                message.receivers = receiverExpressions;
            }
            return message;
        }));
    };
    /**
     *
     * @param components
     * @returns
     */
    /**
     *
     * @param {?} components
     * @return {?}
     */
    PropertyHelper.getBizComponentList = /**
     *
     * @param {?} components
     * @return {?}
     */
    function (components) {
        var e_6, _a, e_7, _b;
        /** @type {?} */
        var bizComponentList = new Array();
        if (components && components.length > 0) {
            try {
                for (var components_1 = tslib_1.__values(components), components_1_1 = components_1.next(); !components_1_1.done; components_1_1 = components_1.next()) {
                    var component = components_1_1.value;
                    /** @type {?} */
                    var bizComponent = new BizComponent();
                    bizComponent.id = component.Id;
                    bizComponent.name = component.Name;
                    bizComponent.metadataId = component.MetadataId;
                    bizComponent.methodCode = component.MethodCode;
                    bizComponent.executionTime = component.Time;
                    bizComponent.isForCompensation = component.isForCompensation;
                    bizComponent.scopeType = component.ScopeType || null;
                    bizComponent.actualParameters = new Array();
                    if (component.ActualParameters && component.ActualParameters.length > 0) {
                        try {
                            for (var _c = tslib_1.__values(component.ActualParameters), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var param = _d.value;
                                /** @type {?} */
                                var bizParam = new BizParameter();
                                bizParam.code = param.Name;
                                bizParam.name = param.Name;
                                bizParam.value = param.Value;
                                bizComponent.actualParameters.push(bizParam);
                            }
                        }
                        catch (e_7_1) { e_7 = { error: e_7_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_7) throw e_7.error; }
                        }
                    }
                    bizComponentList.push(bizComponent);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (components_1_1 && !components_1_1.done && (_a = components_1.return)) _a.call(components_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        return bizComponentList;
    };
    /**
     *
     * @param roles
     * @param type
     * @returns
     */
    /**
     *
     * @param {?} roles
     * @return {?}
     */
    PropertyHelper.getPerformerList = /**
     *
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var performers = new Array();
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            if (role == null) {
                return;
            }
            if (role.participantExpression instanceof UserParticipantExpression) {
                /** @type {?} */
                var user = (/** @type {?} */ (role.participantExpression));
                if (user) {
                    /** @type {?} */
                    var userPerformer = new UserParticipant();
                    userPerformer.id = user.id;
                    userPerformer.performerId = user.UserId;
                    userPerformer.performerName = user.name;
                    userPerformer.type = user.ClrTypeID;
                    userPerformer.orgId = user.OrgId;
                    userPerformer.orgName = user.OrgName;
                    userPerformer.orgType = user.OrgType;
                    userPerformer.condition = role.condition ? role.condition.Value : '';
                    userPerformer.tag = user.Tag;
                    userPerformer.order = role.order;
                    performers.push(userPerformer);
                }
            }
            else if (role.participantExpression instanceof VariableParticipantExpression) {
                /** @type {?} */
                var variable = (/** @type {?} */ (role.participantExpression));
                if (variable) {
                    /** @type {?} */
                    var variablePerformer = new VariablePerformer();
                    variablePerformer.id = variable.id,
                        variablePerformer.name = variable.Name,
                        variablePerformer.type = variable.ClrTypeID,
                        variablePerformer.condition = role.condition ? role.condition.Value : '',
                        variablePerformer.tag = variable.Tag;
                    variablePerformer.relation = variable.Relation;
                    variablePerformer.varType = variable.VarType;
                    variablePerformer.varValue = variable.VarValue;
                    variablePerformer.order = role.order;
                    performers.push(variablePerformer);
                }
            }
            else if (role.participantExpression instanceof PositionParticipantExpression) {
                /** @type {?} */
                var position = (/** @type {?} */ (role.participantExpression));
                if (position) {
                    /** @type {?} */
                    var positionPerformer = new PositionParticipant();
                    positionPerformer.id = position.id;
                    positionPerformer.performerId = position.PositionId;
                    positionPerformer.positionType = position.PositionType;
                    positionPerformer.performerName = position.PositionName;
                    positionPerformer.type = position.ClrTypeID;
                    positionPerformer.orgId = position.OrgId || '';
                    positionPerformer.orgName = position.OrgName || '';
                    positionPerformer.orgType = position.OrgType || '';
                    positionPerformer.condition = role.condition ? role.condition.Value : '';
                    positionPerformer.order = role.order;
                    performers.push(positionPerformer);
                }
            }
            else if (role.participantExpression instanceof ComponentParticipantExpression) {
                /** @type {?} */
                var cmp = (/** @type {?} */ (role.participantExpression));
                if (cmp) {
                    /** @type {?} */
                    var componentPerformer = new ComponentParticipant();
                    componentPerformer.id = cmp.id;
                    componentPerformer.name = cmp.componentName;
                    componentPerformer.metadataId = cmp.componentId;
                    componentPerformer.methodCode = cmp.methodCode;
                    componentPerformer.methodName = cmp.methodName;
                    componentPerformer.type = cmp.ClrTypeID;
                    componentPerformer.actualParameters = new Array();
                    if (cmp.actualParameters && cmp.actualParameters.length > 0) {
                        /** @type {?} */
                        var paramters_1 = [];
                        cmp.actualParameters.forEach((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return paramters_1.push({ code: p.Name, value: p.Value, valueText: p.ValueText, tag: p.Tag }); }));
                        componentPerformer.actualParameters = paramters_1;
                    }
                    if (role.condition) {
                        componentPerformer.condition = role.condition.Value;
                    }
                    componentPerformer.order = role.order;
                    performers.push(componentPerformer);
                }
            }
            else if (role.participantExpression instanceof ReportingLineParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    var reportingLine = new ReportingLineParticipant();
                    reportingLine.id = r.id;
                    reportingLine.reportingLineDefId = r.ReportingLineDefId;
                    reportingLine.reportingLineDefName = r.ReportingLineDefName;
                    reportingLine.refOrgId = r.RefOrgId;
                    reportingLine.refUserId = r.RefUserId;
                    reportingLine.refEmployeeId = r.RefEmployeeId;
                    reportingLine.dimension = r.Dimension;
                    reportingLine.performerName = r.RefUserId;
                    reportingLine.tag = r.Tag;
                    reportingLine.type = r.ClrTypeID;
                    if (role.condition) {
                        reportingLine.condition = role.condition.Value;
                    }
                    reportingLine.order = role.order;
                    performers.push(reportingLine);
                }
            }
            else if (role.participantExpression instanceof ActivityExecutorParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    var activityExecutor = new ActivityExecutorParticipant();
                    activityExecutor.id = r.id;
                    activityExecutor.type = r.ClrTypeID;
                    activityExecutor.activityDefId = r.activityDefId;
                    activityExecutor.activityDefName = r.activityDefName;
                    activityExecutor.performerName = '<' + r.activityDefName + mxResources.get('eventHandler');
                    if (role.condition) {
                        activityExecutor.condition = role.condition.Value;
                    }
                    activityExecutor.order = role.order;
                    performers.push(activityExecutor);
                }
            }
            else if (role.participantExpression instanceof MatrixParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    var matrix = new MatrixParticipant();
                    matrix.id = r.id;
                    matrix.matrixDefId = r.matrixDefId;
                    matrix.matrixDefName = r.matrixDefName;
                    matrix.conditionField1 = r.conditionField1;
                    matrix.conditionFieldText1 = r.conditionFieldText1;
                    matrix.conditionField2 = r.conditionField2;
                    matrix.conditionFieldText2 = r.conditionFieldText2;
                    matrix.conditionField3 = r.conditionField3;
                    matrix.conditionFieldText3 = r.conditionFieldText3;
                    matrix.multivaluedCondition = r.multivaluedCondition;
                    matrix.dataFieldAlias = r.dataFieldAlias;
                    matrix.type = r.ClrTypeID;
                    matrix.order = role.order;
                    if (role.condition) {
                        matrix.condition = role.condition.Value;
                    }
                    performers.push(matrix);
                }
            }
            else if (role.participantExpression instanceof OrganizationParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    var organization = new OrganizationParticipant;
                    organization.id = r.id;
                    organization.type = r.ClrTypeID;
                    organization.name = r.name;
                    organization.actionScope = (/** @type {?} */ (r.actionScope));
                    organization.organizationLevel = r.organizationLevel;
                    organization.organizationId = r.organizationId;
                    organization.organizationCode = r.organizationCode;
                    organization.organizationName = r.organizationName;
                    organization.includeChildren = r.includeChildren;
                    organization.parentsUntil = r.parentsUntil;
                    organization.tag = r.tag;
                    organization.order = role.order;
                    if (role.condition) {
                        organization.condition = role.condition.Value;
                    }
                    performers.push(organization);
                }
            }
        }));
        return performers;
    };
    /**
     * 移交等的范围，与上个方法比这里传入的是具体的参与者类型（用户参与者、岗位参与者，balbala）
     * @param roles
     * @param type
     * @returns
     */
    /**
     * 移交等的范围，与上个方法比这里传入的是具体的参与者类型（用户参与者、岗位参与者，balbala）
     * @param {?} roles
     * @return {?}
     */
    PropertyHelper.getPerformerListTest = /**
     * 移交等的范围，与上个方法比这里传入的是具体的参与者类型（用户参与者、岗位参与者，balbala）
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var performers = new Array();
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            if (role == null) {
                return;
            }
            if (role instanceof UserParticipantExpression) {
                /** @type {?} */
                var user = (/** @type {?} */ (role));
                if (user) {
                    /** @type {?} */
                    var userPerformer = new UserParticipant();
                    userPerformer.id = user.id;
                    userPerformer.performerId = user.UserId;
                    userPerformer.performerName = user.name;
                    userPerformer.type = user.ClrTypeID;
                    userPerformer.orgId = user.OrgId;
                    userPerformer.orgName = user.OrgName;
                    userPerformer.orgType = user.OrgType;
                    userPerformer.condition = role.condition ? role.condition.Value : '';
                    userPerformer.tag = user.Tag;
                    userPerformer.order = role.order;
                    performers.push(userPerformer);
                }
            }
            else if (role instanceof VariableParticipantExpression) {
                /** @type {?} */
                var variable = (/** @type {?} */ (role));
                if (variable) {
                    /** @type {?} */
                    var variablePerformer = new VariablePerformer();
                    variablePerformer.id = variable.id,
                        variablePerformer.name = variable.Name,
                        variablePerformer.type = variable.ClrTypeID,
                        variablePerformer.condition = role.condition ? role.condition.Value : '',
                        variablePerformer.tag = variable.Tag;
                    variablePerformer.relation = variable.Relation;
                    variablePerformer.varType = variable.VarType;
                    variablePerformer.varValue = variable.VarValue;
                    variablePerformer.order = role.order;
                    performers.push(variablePerformer);
                }
            }
            else if (role instanceof PositionParticipantExpression) {
                /** @type {?} */
                var position = (/** @type {?} */ (role));
                if (position) {
                    /** @type {?} */
                    var positionPerformer = new PositionParticipant();
                    positionPerformer.id = position.id;
                    positionPerformer.performerId = position.PositionId;
                    positionPerformer.positionType = position.PositionType;
                    positionPerformer.performerName = position.PositionName;
                    positionPerformer.type = position.ClrTypeID;
                    positionPerformer.orgId = position.OrgId || '';
                    positionPerformer.orgName = position.OrgName || '';
                    positionPerformer.orgType = position.OrgType || '';
                    positionPerformer.condition = role.condition ? role.condition.Value : '';
                    positionPerformer.order = role.order;
                    performers.push(positionPerformer);
                }
            }
            else if (role instanceof ComponentParticipantExpression) {
                /** @type {?} */
                var cmp = (/** @type {?} */ (role));
                if (cmp) {
                    /** @type {?} */
                    var componentPerformer = new ComponentParticipant();
                    componentPerformer.id = cmp.id;
                    componentPerformer.name = cmp.componentName;
                    componentPerformer.metadataId = cmp.componentId;
                    componentPerformer.methodCode = cmp.methodCode;
                    componentPerformer.methodName = cmp.methodName;
                    componentPerformer.type = cmp.ClrTypeID;
                    componentPerformer.actualParameters = new Array();
                    if (cmp.actualParameters && cmp.actualParameters.length > 0) {
                        /** @type {?} */
                        var paramters_2 = [];
                        cmp.actualParameters.forEach((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return paramters_2.push({ code: p.Name, value: p.Value, valueText: p.ValueText, tag: p.Tag }); }));
                        componentPerformer.actualParameters = paramters_2;
                    }
                    if (role.condition) {
                        componentPerformer.condition = role.condition.Value;
                    }
                    componentPerformer.order = role.order;
                    performers.push(componentPerformer);
                }
            }
            else if (role instanceof ReportingLineParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    var reportingLine = new ReportingLineParticipant();
                    reportingLine.id = r.id;
                    reportingLine.reportingLineDefId = r.ReportingLineDefId;
                    reportingLine.reportingLineDefName = r.ReportingLineDefName;
                    reportingLine.refOrgId = r.RefOrgId;
                    reportingLine.refUserId = r.RefUserId;
                    reportingLine.refEmployeeId = r.RefEmployeeId;
                    reportingLine.dimension = r.Dimension;
                    reportingLine.performerName = r.RefUserId;
                    reportingLine.tag = r.Tag;
                    reportingLine.type = r.ClrTypeID;
                    if (role.condition) {
                        reportingLine.condition = role.condition.Value;
                    }
                    reportingLine.order = role.order;
                    performers.push(reportingLine);
                }
            }
            else if (role instanceof ActivityExecutorParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    var activityExecutor = new ActivityExecutorParticipant();
                    activityExecutor.id = r.id;
                    activityExecutor.type = r.ClrTypeID;
                    activityExecutor.activityDefId = r.activityDefId;
                    activityExecutor.activityDefName = r.activityDefName;
                    activityExecutor.performerName = '<' + r.activityDefName + mxResources.get('eventHandler');
                    if (role.condition) {
                        activityExecutor.condition = role.condition.Value;
                    }
                    activityExecutor.order = role.order;
                    performers.push(activityExecutor);
                }
            }
            else if (role instanceof MatrixParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    var matrix = new MatrixParticipant();
                    matrix.id = r.id;
                    matrix.matrixDefId = r.matrixDefId;
                    matrix.matrixDefName = r.matrixDefName;
                    matrix.conditionField1 = r.conditionField1;
                    matrix.conditionFieldText1 = r.conditionFieldText1;
                    matrix.conditionField2 = r.conditionField2;
                    matrix.conditionFieldText2 = r.conditionFieldText2;
                    matrix.conditionField3 = r.conditionField3;
                    matrix.conditionFieldText3 = r.conditionFieldText3;
                    matrix.multivaluedCondition = r.multivaluedCondition;
                    matrix.dataFieldAlias = r.dataFieldAlias;
                    matrix.type = r.ClrTypeID;
                    matrix.order = role.order;
                    if (role.condition) {
                        matrix.condition = role.condition.Value;
                    }
                    performers.push(matrix);
                }
            }
            else if (role instanceof OrganizationParticipantExpression) {
                /** @type {?} */
                var r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    var organization = new OrganizationParticipant;
                    organization.id = r.id;
                    organization.type = r.ClrTypeID;
                    organization.name = r.name;
                    organization.actionScope = (/** @type {?} */ (r.actionScope));
                    organization.organizationLevel = r.organizationLevel;
                    organization.organizationId = r.organizationId;
                    organization.organizationCode = r.organizationCode;
                    organization.organizationName = r.organizationName;
                    organization.includeChildren = r.includeChildren;
                    organization.parentsUntil = r.parentsUntil;
                    organization.tag = r.tag;
                    organization.order = role.order;
                    if (role.condition) {
                        organization.condition = role.condition.Value;
                    }
                    performers.push(organization);
                }
            }
        }));
        return performers;
    };
    /**
     *
     * @param act
     * @returns
     */
    /**
     *
     * @param {?} notifyAble
     * @param {?} dynamicParticipants
     * @return {?}
     */
    PropertyHelper.getNotifyAble = /**
     *
     * @param {?} notifyAble
     * @param {?} dynamicParticipants
     * @return {?}
     */
    function (notifyAble, dynamicParticipants) {
        /** @type {?} */
        var notifyScope = new ActionOrganizationScope();
        notifyScope.action = ActionScope.Notify;
        notifyScope.enable = notifyAble;
        if (notifyAble) {
            /** @type {?} */
            var roles = dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.actionScope === ActionScope.Notify; }));
            /** @type {?} */
            var res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order; }));
            /** @type {?} */
            var list = [];
            if (res) {
                /** @type {?} */
                var organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            notifyScope.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                notifyScope.scope.participantInfo = new ParticipantInfo();
                notifyScope.scope.participantInfo.potentialOwnerList = list;
                notifyScope.scope.participantInfo.isAllScope = true;
            }
            else {
                notifyScope.scope.participantInfo = new ParticipantInfo();
                notifyScope.scope.participantInfo.isAllScope = false;
            }
        }
        return notifyScope;
    };
    /**
     * @param {?} process
     * @param {?} parameters
     * @return {?}
     */
    PropertyHelper.updateFormalParameters = /**
     * @param {?} process
     * @param {?} parameters
     * @return {?}
     */
    function (process, parameters) {
        var e_8, _a, e_9, _b;
        if (!parameters) {
            parameters = [];
        }
        /** @type {?} */
        var objects = process.GetDataObjects();
        if (parameters !== null && parameters.length > 0) {
            try {
                for (var parameters_1 = tslib_1.__values(parameters), parameters_1_1 = parameters_1.next(); !parameters_1_1.done; parameters_1_1 = parameters_1.next()) {
                    var p = parameters_1_1.value;
                    /** @type {?} */
                    var dataType = new DataType(process.Model);
                    try {
                        // 先移除code相同的dataObject
                        for (var objects_1 = tslib_1.__values(objects), objects_1_1 = objects_1.next(); !objects_1_1.done; objects_1_1 = objects_1.next()) {
                            var o = objects_1_1.value;
                            if (o instanceof DataObject && o.Name === p.code) {
                                process.RemoveDataObject(o.Id);
                            }
                        }
                    }
                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                    finally {
                        try {
                            if (objects_1_1 && !objects_1_1.done && (_b = objects_1.return)) _b.call(objects_1);
                        }
                        finally { if (e_9) throw e_9.error; }
                    }
                    dataType.Category = DataTypes.BasicType;
                    dataType.BasicType = p.dataType;
                    dataType.Description = p.description;
                    // dataType.InitialValue = p.initialValue;
                    if (p.parameterMode === 0) {
                        /** @type {?} */
                        var dataObject = new ValuedDataObject(process.Model);
                        dataObject.Name = p.code;
                        dataObject.Documentation = p.name;
                        dataObject.DataType = dataType;
                        dataObject.IsAllowNull = p.allowNull;
                        if (p.initialValue || p.initialValueType) {
                            /** @type {?} */
                            var variableSetting = new VariableSetting(process.Model);
                            variableSetting.variableCode = p.code;
                            variableSetting.variableName = p.name;
                            variableSetting.tag = p.initialValueType;
                            variableSetting.value = p.initialValue;
                            variableSetting.valueText = p.initialValue;
                            dataObject.variableSetting = variableSetting;
                        }
                        process.AddDataObject(dataObject);
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (parameters_1_1 && !parameters_1_1.done && (_a = parameters_1.return)) _a.call(parameters_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
    };
    return PropertyHelper;
}());
/**
 * 属性工具
 */
export { PropertyHelper };
//# sourceMappingURL=data:application/json;base64,