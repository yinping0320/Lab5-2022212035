/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { AifCreationBillActivity } from "@gsp-wf/wf-process-model";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { AifCreationBillActivityPropertyKeys } from "./property-keys/AifCreationBillActivityPropertyKeys";
/**
 * 自动生单活动节点
 */
var AifCreationBillActivityCell = /** @class */ (function (_super) {
    tslib_1.__extends(AifCreationBillActivityCell, _super);
    function AifCreationBillActivityCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = AifCreationBillActivityCell.CLR_TYPE_ID;
        _this.name = "自动生单";
        _this.nameLanguage = {
            "zh-CHS": "自动生单",
            "zh-CHT": "自動生單",
            "en": "Creation Bill ",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/aifCreationActivity.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/aifCreationActivity_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    AifCreationBillActivityCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        flowNode.Id = "AifCreationBillActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    };
    /**
     * @return {?}
     */
    AifCreationBillActivityCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var act = this.flowElement;
        /** @type {?} */
        var PropertyConfig = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = new Object();
        PropertyConfig.categoryId = 'general';
        PropertyConfig.categoryName = mxResources.get('basicInformation');
        PropertyConfig.tabId = 'basic';
        PropertyConfig.tabName = mxResources.get('basicAttributes');
        PropertyConfig.properties = [
            { propertyID: AifCreationBillActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: AifCreationBillActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: AifCreationBillActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        var bifDef = new ElementPropertyConfig();
        bifDef.categoryId = 'bifDef';
        bifDef.categoryName = mxResources.get('bifDef');
        bifDef.tabId = 'basic';
        bifDef.tabName = mxResources.get('basicAttributes');
        bifDef.properties = [
            { propertyID: AifCreationBillActivityPropertyKeys.aifProcessCode, propertyName: mxResources.get('aifProcess'), propertyType: 'modal' },
        ];
        propertyData[AifCreationBillActivityPropertyKeys.Id] = act.Id;
        propertyData[AifCreationBillActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[AifCreationBillActivityPropertyKeys.Name] = act.Name || mxResources.get('autoAif');
        propertyData[AifCreationBillActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[AifCreationBillActivityPropertyKeys.aifProcessCode] = act.aifProcessCode;
        propertyData[AifCreationBillActivityPropertyKeys.isRelied] = act.isRelied;
        return {
            propertyConfig: [PropertyConfig, bifDef],
            propertyData: propertyData
        };
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AifCreationBillActivityCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case AifCreationBillActivityPropertyKeys.aifProcessCode:
                this.resetProcessCode(this.flowElement, obj);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    AifCreationBillActivityCell.prototype.resetProcessCode = /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    function (startActivity, obj) {
        /** @type {?} */
        var data = obj.propertyValue;
        if (data) {
            startActivity.aifProcessCode = data;
        }
        else {
            startActivity.aifProcessCode = null;
        }
    };
    AifCreationBillActivityCell.CLR_TYPE_ID = AifCreationBillActivity.Clr_Type_ID;
    return AifCreationBillActivityCell;
}(NodeCell));
export { AifCreationBillActivityCell };
if (false) {
    /** @type {?} */
    AifCreationBillActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.clrTypeId;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.name;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.nameLanguage;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.flowElement;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlDZWxsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9kZXNpZ25lci93Zi1jZWxsL0FpZkNyZWF0aW9uQmlsbEFjdGl2aXR5Q2VsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQTRCLE1BQU0sc0JBQXNCLENBQUM7QUFDakcsT0FBTyxFQUFhLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLHFEQUFxRCxDQUFDOzs7O0FBSzFHO0lBQWlELHVEQUFRO0lBZ0JyRCxxQ0FBWSxLQUFXLEVBQUUsUUFBK0IsRUFBRSxLQUFjOztRQUF4RSxZQUNJLGtCQUFNLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQ2hDO1FBakJELGVBQVMsR0FBVywyQkFBMkIsQ0FBQyxXQUFXLENBQUM7UUFDNUQsVUFBSSxHQUFXLE1BQU0sQ0FBQztRQUN0QixrQkFBWSxHQUFnQztZQUMxQyxRQUFRLEVBQUUsTUFBTTtZQUNoQixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsZ0JBQWdCO1NBQ3pCLENBQUM7UUFJQSxhQUFPO1lBQ0gsR0FBQyxhQUFhLENBQUMsT0FBTyxJQUFHLFdBQVcsQ0FBQyxVQUFVLEdBQUcsMEJBQTBCO1lBQzVFLEdBQUMsYUFBYSxDQUFDLFFBQVEsSUFBRyxXQUFXLENBQUMsVUFBVSxHQUFHLGlDQUFpQztnQkFDdEY7O0lBSUYsQ0FBQzs7Ozs7SUFF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UUFFekUsT0FBTztZQUNILGNBQWMsRUFBRSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7WUFDeEMsWUFBWSxFQUFFLFlBQVk7U0FDN0IsQ0FBQTtJQUNMLENBQUM7Ozs7O0lBRUQsaURBQVc7Ozs7SUFBWCxVQUFZLEdBQVE7O1lBQ1YsVUFBVSxHQUFXLEdBQUcsQ0FBQyxVQUFVO1FBQ3pDLFFBQVEsVUFBVSxFQUFFO1lBQ2hCLEtBQUssbUNBQW1DLENBQUMsY0FBYztnQkFDbkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzdDLE1BQU07WUFDVjtnQkFDSSxpQkFBTSxXQUFXLFlBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU07U0FDYjtJQUNMLENBQUM7Ozs7OztJQUVELHNEQUFnQjs7Ozs7SUFBaEIsVUFBaUIsYUFBc0MsRUFBRSxHQUFROztZQUN2RCxJQUFJLEdBQUcsR0FBRyxDQUFDLGFBQWE7UUFDOUIsSUFBSSxJQUFJLEVBQUU7WUFDTixhQUFhLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUN2QzthQUFNO1lBQ0gsYUFBYSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBOUVNLHVDQUFXLEdBQVcsdUJBQXVCLENBQUMsV0FBVyxDQUFDO0lBK0VyRSxrQ0FBQztDQUFBLEFBdkZELENBQWlELFFBQVEsR0F1RnhEO1NBdkZZLDJCQUEyQjs7O0lBUXBDLHdDQUFpRTs7SUFQakUsZ0RBQTREOztJQUM1RCwyQ0FBc0I7O0lBQ3RCLG1EQUlBOztJQUVBLGtEQUFxQzs7SUFFckMsOENBR0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlQ2VsbCwgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBGYXJyaXNQcm9wQ29uZmlnV2l0aERhdGEgfSBmcm9tIFwiQGVkcC1wbWYvZ3JhcGhlZGl0b3JcIjtcclxuaW1wb3J0IHsgTXhHcmFwaE5TLCBteFJlc291cmNlcyB9IGZyb20gXCJAZWRwLXBtZi9teGdyYXBoLXRzXCI7XHJcbmltcG9ydCB7IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5IH0gZnJvbSBcIkBnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbFwiO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWxIZWxwZXIsIEZsb3dOb2RlU3RhdGUgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBXZkNvbnN0YW50cyB9IGZyb20gXCIuLi9XZkNvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVByb3BlcnR5S2V5cyB9IGZyb20gXCIuL3Byb3BlcnR5LWtleXMvQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXNcIjtcclxuXHJcbi8qKlxyXG4gKiDoh6rliqjnlJ/ljZXmtLvliqjoioLngrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eUNlbGwgZXh0ZW5kcyBOb2RlQ2VsbCB7XHJcbiAgICBjbHJUeXBlSWQ6IHN0cmluZyA9IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5Q2VsbC5DTFJfVFlQRV9JRDtcclxuICAgIG5hbWU6IHN0cmluZyA9IFwi6Ieq5Yqo55Sf5Y2VXCI7XHJcbiAgICBuYW1lTGFuZ3VhZ2U6IHsgW2xhbmc6IHN0cmluZ106IHN0cmluZzsgfSA9IHtcclxuICAgICAgXCJ6aC1DSFNcIjogXCLoh6rliqjnlJ/ljZVcIixcclxuICAgICAgXCJ6aC1DSFRcIjogXCLoh6rli5XnlJ/llq5cIixcclxuICAgICAgXCJlblwiOiBcIkNyZWF0aW9uIEJpbGwgXCIsXHJcbiAgfTtcclxuICAgIHN0YXRpYyBDTFJfVFlQRV9JRDogc3RyaW5nID0gQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHkuQ2xyX1R5cGVfSUQ7XHJcbiAgICBmbG93RWxlbWVudDogQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHk7XHJcblxyXG4gICAgaW1nVXJscyA9IHtcclxuICAgICAgICBbRmxvd05vZGVTdGF0ZS5EZWZhdWx0XTogV2ZDb25zdGFudHMuSU1BR0VfUEFUSCArIFwiL2FpZkNyZWF0aW9uQWN0aXZpdHkucG5nXCIsXHJcbiAgICAgICAgW0Zsb3dOb2RlU3RhdGUuU2VsZWN0ZWRdOiBXZkNvbnN0YW50cy5JTUFHRV9QQVRIICsgXCIvYWlmQ3JlYXRpb25BY3Rpdml0eV9zZWxlY3Quc3ZnXCIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlPzogYW55LCBnZW9tZXRyeT86IE14R3JhcGhOUy5teEdlb21ldHJ5LCBzdHlsZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKHZhbHVlLCBnZW9tZXRyeSwgc3R5bGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUZsb3dFbGVtZW50KGZsb3dFbHQ/OiBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eSk6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5IHtcclxuICAgICAgICBjb25zdCBmbG93Tm9kZSA9IHN1cGVyLmNyZWF0ZUZsb3dFbGVtZW50KGZsb3dFbHQpIGFzIEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5O1xyXG4gICAgICAgIGZsb3dOb2RlLklkID0gXCJBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVwiICsgQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgcmV0dXJuIGZsb3dOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZhcnJpc1Byb3BDb25maWcoKTogRmFycmlzUHJvcENvbmZpZ1dpdGhEYXRhIHtcclxuICAgICAgICBsZXQgYWN0ID0gdGhpcy5mbG93RWxlbWVudDtcclxuXHJcbiAgICAgICAgbGV0IFByb3BlcnR5Q29uZmlnOiBFbGVtZW50UHJvcGVydHlDb25maWcgPSBuZXcgRWxlbWVudFByb3BlcnR5Q29uZmlnKCk7XHJcbiAgICAgICAgbGV0IHByb3BlcnR5RGF0YTogYW55ID0gbmV3IE9iamVjdCgpO1xyXG4gICAgICAgIFByb3BlcnR5Q29uZmlnLmNhdGVnb3J5SWQgPSAnZ2VuZXJhbCc7XHJcbiAgICAgICAgUHJvcGVydHlDb25maWcuY2F0ZWdvcnlOYW1lID0gbXhSZXNvdXJjZXMuZ2V0KCdiYXNpY0luZm9ybWF0aW9uJyk7XHJcbiAgICAgICAgUHJvcGVydHlDb25maWcudGFiSWQgPSAnYmFzaWMnO1xyXG4gICAgICAgIFByb3BlcnR5Q29uZmlnLnRhYk5hbWUgPSBteFJlc291cmNlcy5nZXQoJ2Jhc2ljQXR0cmlidXRlcycpO1xyXG4gICAgICAgIFByb3BlcnR5Q29uZmlnLnByb3BlcnRpZXMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuTmFtZSwgcHJvcGVydHlOYW1lOiBteFJlc291cmNlcy5nZXQoJ25hbWUnKSwgcHJvcGVydHlUeXBlOiAnc3RyaW5nJywgdmlzaWJsZTogIXRoaXMuZWRpdG9yVWkubXVsdGlMYW5nRW5hYmxlZCB9LFxyXG4gICAgICAgICAgICB7IHByb3BlcnR5SUQ6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5UHJvcGVydHlLZXlzLk5hbWVMYW5ndWFnZSwgcHJvcGVydHlOYW1lOiBteFJlc291cmNlcy5nZXQoJ25hbWVMYW5ndWFnZScpLCBwcm9wZXJ0eVR5cGU6ICdtdWx0aUxhbmd1YWdlJywgdmlzaWJsZTogdGhpcy5lZGl0b3JVaS5tdWx0aUxhbmdFbmFibGVkIH0sXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuSWQsIHByb3BlcnR5TmFtZTogbXhSZXNvdXJjZXMuZ2V0KCdpZCcpLCBwcm9wZXJ0eVR5cGU6ICdzdHJpbmcnLCByZWFkb25seTogdHJ1ZSB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgbGV0IGJpZkRlZiA9IG5ldyBFbGVtZW50UHJvcGVydHlDb25maWcoKTtcclxuICAgICAgICBiaWZEZWYuY2F0ZWdvcnlJZCA9ICdiaWZEZWYnO1xyXG4gICAgICAgIGJpZkRlZi5jYXRlZ29yeU5hbWUgPSBteFJlc291cmNlcy5nZXQoJ2JpZkRlZicpO1xyXG4gICAgICAgIGJpZkRlZi50YWJJZCA9ICdiYXNpYyc7XHJcbiAgICAgICAgYmlmRGVmLnRhYk5hbWUgPSBteFJlc291cmNlcy5nZXQoJ2Jhc2ljQXR0cmlidXRlcycpXHJcbiAgICAgICAgYmlmRGVmLnByb3BlcnRpZXMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuYWlmUHJvY2Vzc0NvZGUsIHByb3BlcnR5TmFtZTogbXhSZXNvdXJjZXMuZ2V0KCdhaWZQcm9jZXNzJyksIHByb3BlcnR5VHlwZTogJ21vZGFsJyB9LFxyXG4gICAgICAgICAgICAvLyB7IHByb3BlcnR5SUQ6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5UmVzb3VyY2VLZXlzLmlzUmVsaWVkLCBwcm9wZXJ0eU5hbWU6ICflkI7nu63kvp3otZYnLCBwcm9wZXJ0eVR5cGU6ICdib29sZWFuJyB9LFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHByb3BlcnR5RGF0YVtBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVByb3BlcnR5S2V5cy5JZF0gPSBhY3QuSWQ7XHJcbiAgICAgICAgcHJvcGVydHlEYXRhW0FpZkNyZWF0aW9uQmlsbEFjdGl2aXR5UHJvcGVydHlLZXlzLkNsclR5cGVJRF0gPSBhY3QuQ2xyVHlwZUlEO1xyXG5cclxuICAgICAgICBwcm9wZXJ0eURhdGFbQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuTmFtZV0gPSBhY3QuTmFtZSB8fCBteFJlc291cmNlcy5nZXQoJ2F1dG9BaWYnKTtcclxuICAgICAgICBwcm9wZXJ0eURhdGFbQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuTmFtZUxhbmd1YWdlXSA9IGFjdC5OYW1lTGFuZ3VhZ2UgfHwge1xyXG4gICAgICAgICAgICBcInpoLUNIU1wiOiBhY3QuTmFtZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHByb3BlcnR5RGF0YVtBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVByb3BlcnR5S2V5cy5haWZQcm9jZXNzQ29kZV0gPSBhY3QuYWlmUHJvY2Vzc0NvZGVcclxuICAgICAgICBwcm9wZXJ0eURhdGFbQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuaXNSZWxpZWRdID0gYWN0LmlzUmVsaWVkXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByb3BlcnR5Q29uZmlnOiBbUHJvcGVydHlDb25maWcsIGJpZkRlZl0sXHJcbiAgICAgICAgICAgIHByb3BlcnR5RGF0YTogcHJvcGVydHlEYXRhXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVByb3BzKG9iajogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlJZDogc3RyaW5nID0gb2JqLnByb3BlcnR5SUQ7XHJcbiAgICAgICAgc3dpdGNoIChwcm9wZXJ0eUlkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlQcm9wZXJ0eUtleXMuYWlmUHJvY2Vzc0NvZGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0UHJvY2Vzc0NvZGUodGhpcy5mbG93RWxlbWVudCwgb2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgc3VwZXIudXBkYXRlUHJvcHMob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXNldFByb2Nlc3NDb2RlKHN0YXJ0QWN0aXZpdHk6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5LCBvYmo6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBvYmoucHJvcGVydHlWYWx1ZTtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICBzdGFydEFjdGl2aXR5LmFpZlByb2Nlc3NDb2RlID0gZGF0YTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydEFjdGl2aXR5LmFpZlByb2Nlc3NDb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19