/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { AutoActivity, Component, ActualParameter, VariableSetting } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { AutoActivityPropertyKeys } from "./property-keys/AutoActivityPropertyKeys";
/**
 * 服务活动节点
 */
var AutoActivityCell = /** @class */ (function (_super) {
    tslib_1.__extends(AutoActivityCell, _super);
    function AutoActivityCell(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = AutoActivityCell.CLR_TYPE_ID;
        _this.name = "服务";
        _this.nameLanguage = {
            "zh-CHS": "服务",
            "zh-CHT": "服務",
            "en": "Service ",
        };
        _this.imgUrls = (_a = {},
            _a[FlowNodeState.Default] = WfConstants.IMAGE_PATH + "/auto.png",
            _a[FlowNodeState.Selected] = WfConstants.IMAGE_PATH + "/auto_select.svg",
            _a);
        return _this;
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    AutoActivityCell.prototype.createFlowElement = /**
     * @param {?=} flowElt
     * @return {?}
     */
    function (flowElt) {
        /** @type {?} */
        var flowNode = (/** @type {?} */ (_super.prototype.createFlowElement.call(this, flowElt)));
        flowNode.Id = "autoActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    };
    /**
     * @return {?}
     */
    AutoActivityCell.prototype.getFarrisPropConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var act = this.flowElement;
        // 组织属性框
        /** @type {?} */
        var basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        var activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        var propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: AutoActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: AutoActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: AutoActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: AutoActivityPropertyKeys.Tools, propertyName: mxResources.get('tools'), propertyType: 'modal' },
            { propertyID: AutoActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' },
        ];
        propertyData[AutoActivityPropertyKeys.Id] = act.Id;
        propertyData[AutoActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[AutoActivityPropertyKeys.Name] = act.Name;
        propertyData[AutoActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[AutoActivityPropertyKeys.Tools] = PropertyHelper.getBizComponentList((/** @type {?} */ (act.tools)));
        propertyData[AutoActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AutoActivityCell.prototype.updateProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var autoActivity = this.flowElement;
        /** @type {?} */
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case AutoActivityPropertyKeys.Tools:
                this.updateAutoActivityTools(autoActivity, obj);
                break;
            case AutoActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(autoActivity, obj);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    AutoActivityCell.prototype.updateAutoActivityTools = /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    function (autoActivity, obj) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var tools = (/** @type {?} */ (obj.propertyValue));
        autoActivity.tools = new Array();
        if (tools && tools.length > 0) {
            try {
                for (var tools_1 = tslib_1.__values(tools), tools_1_1 = tools_1.next(); !tools_1_1.done; tools_1_1 = tools_1.next()) {
                    var tool = tools_1_1.value;
                    /** @type {?} */
                    var component = new Component(autoActivity.Model);
                    component.Id = tool.id;
                    component.Name = tool.name;
                    // component.Time = tool.executionTime;
                    // TODO 写死了构件类型
                    component.ComponentType = 'WebServiceComponent';
                    component.MetadataId = tool.metadataId;
                    component.MethodCode = tool.methodCode;
                    component.isForCompensation = tool.isForCompensation;
                    component.ActualParameters = [];
                    if (tool.actualParameters && ((/** @type {?} */ (tool.actualParameters))).length > 0) {
                        try {
                            for (var _c = tslib_1.__values(((/** @type {?} */ (tool.actualParameters)))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var a = _d.value;
                                /** @type {?} */
                                var parameter = new ActualParameter(autoActivity.Model, a.code, a.value);
                                component.ActualParameters.push(parameter);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    autoActivity.tools.push(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (tools_1_1 && !tools_1_1.done && (_a = tools_1.return)) _a.call(tools_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    AutoActivityCell.prototype.updateVariableSettings = /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    function (autoActivity, obj) {
        var e_3, _a, e_4, _b, e_5, _c;
        /** @type {?} */
        var bpmnModel = autoActivity.Model;
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (autoActivity.variableSettings && autoActivity.variableSettings.length > 0) {
            var _loop_1 = function (v) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    var i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return (e instanceof Component && e.Id === v.value); }));
                    extendElements.splice(i, 1);
                }
            };
            try {
                for (var _d = tslib_1.__values(autoActivity.variableSettings), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var v = _e.value;
                    _loop_1(v);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        autoActivity.variableSettings = new Array();
        /** @type {?} */
        var variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var v = variables_1_1.value;
                    /** @type {?} */
                    var variableSetting = new VariableSetting(bpmnModel);
                    variableSetting.variableCode = v.variableCode;
                    variableSetting.variableName = v.variableName;
                    variableSetting.tag = v.tag;
                    variableSetting.executionTime = v.executionTime;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    autoActivity.variableSettings.push(variableSetting);
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        var c = v.component;
                        if (c) {
                            /** @type {?} */
                            var cpt = new Component(bpmnModel);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                try {
                                    for (var _f = tslib_1.__values(c.ActualParameters), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        var a = _g.value;
                                        /** @type {?} */
                                        var parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                        parameter.Tag = a.Tag;
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                    }
                                    finally { if (e_5) throw e_5.error; }
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    AutoActivityCell.CLR_TYPE_ID = AutoActivity.Clr_Type_ID;
    return AutoActivityCell;
}(NodeCell));
export { AutoActivityCell };
if (false) {
    /** @type {?} */
    AutoActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    AutoActivityCell.prototype.clrTypeId;
    /** @type {?} */
    AutoActivityCell.prototype.name;
    /** @type {?} */
    AutoActivityCell.prototype.nameLanguage;
    /** @type {?} */
    AutoActivityCell.prototype.flowElement;
    /** @type {?} */
    AutoActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,