/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ParallelGateway } from "@edp-pmf/bpmn-model";
import { ProcessHeader, Component, StartMode, ToolTime, UserActivity, OperationActivity, AutoActivity, MessageActivity, CallActivitySubProcess, IntermediateCatchEventImpl, NotifyActivity } from "@gsp-wf/wf-process-model";
import { WfDesignerUtils } from "./WfDesignerUtils";
var WfValidatorAdapter = /** @class */ (function () {
    function WfValidatorAdapter() {
    }
    /**
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    WfValidatorAdapter.validator = /**
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    function (bpmnModel, scene) {
        // 校验节点标识是否合规
        /** @type {?} */
        var resActList = this.validateActivityList(bpmnModel);
        if (!resActList.valid) {
            return resActList;
        }
        // 校验流程变量
        /** @type {?} */
        var resProcVars = this.validatePrcoessVaris(bpmnModel);
        if (!resProcVars.valid) {
            return resProcVars;
        }
        /** @type {?} */
        var warningList = this.warningValidator(bpmnModel, scene);
        return {
            valid: true,
            warningList: warningList,
        };
    };
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    WfValidatorAdapter.warningValidator = /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    function (bpmnModel, scene) {
        /** @type {?} */
        var warningList = new Array();
        // 校验并行网关是否成对出现
        this.validateParallelGateway(bpmnModel, warningList);
        // 校验流程构件
        this.validateProcCmps(bpmnModel, scene, warningList);
        // 校验审批活动、人工操作参与者
        this.validateApprovalPerformers(bpmnModel, warningList);
        return warningList;
    };
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @param {?} warningList
     * @return {?}
     */
    WfValidatorAdapter.validateProcCmps = /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @param {?} warningList
     * @return {?}
     */
    function (bpmnModel, scene, warningList) {
        var e_1, _a;
        if (scene === 'inSuite') {
            return;
        }
        /** @type {?} */
        var extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        /** @type {?} */
        var processHeader = extendElements.find((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e instanceof ProcessHeader; }));
        if (!processHeader) {
            console.error(this.localePipe.instant('validate.noProcessHeader'));
            return;
        }
        /** @type {?} */
        var procCmps = extendElements.filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e instanceof Component; }));
        if (!procCmps || procCmps.length === 0) {
            /** @type {?} */
            var tip = {
                id: 'lackCmp',
                title: this.localePipe.instant('validate.cmpsEmpty'),
                msg: this.localePipe.instant('validate.cmpsEmptyMsg'),
                type: 'processWarning'
            };
            warningList.push(tip);
            return;
        }
        // 启用方式为直接方式时
        if (((/** @type {?} */ (processHeader))).startMode === StartMode.DIRECT) {
            // 直接启用方式时不允许存在共享的构件
            /** @type {?} */
            var pfCmps = procCmps.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return WfDesignerUtils.isPfComponent(p.MetadataId); }));
            if (pfCmps && pfCmps.length > 0) {
                /** @type {?} */
                var pfCmpsName = '';
                try {
                    for (var pfCmps_1 = tslib_1.__values(pfCmps), pfCmps_1_1 = pfCmps_1.next(); !pfCmps_1_1.done; pfCmps_1_1 = pfCmps_1.next()) {
                        var cmp = pfCmps_1_1.value;
                        pfCmpsName = pfCmpsName.concat(((/** @type {?} */ (cmp))).Name + ", ");
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (pfCmps_1_1 && !pfCmps_1_1.done && (_a = pfCmps_1.return)) _a.call(pfCmps_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                pfCmpsName = pfCmpsName.slice(0, pfCmpsName.length - 1);
                /** @type {?} */
                var tip = {
                    id: 'directProcessWithPFCmp',
                    title: this.localePipe.instant('validate.directNoPf'),
                    msg: this.localePipe.instant('validate.directNoPfMsg') + (pfCmpsName + " "),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.Time === ToolTime.LOADDATA; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackLoadDataCmp',
                    title: this.localePipe.instant('validate.noLoadDataCmp'),
                    msg: this.localePipe.instant('validate.noLoadDataCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.Time === ToolTime.PROCESSINSTANCE_STARTED; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackProcessStartCmp',
                    title: this.localePipe.instant('validate.noStartCmp'),
                    msg: this.localePipe.instant('validate.noStartCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.Time === ToolTime.PROCESSINSTANCE_COMPLETED; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackProcessCompleteCmp',
                    title: this.localePipe.instant('validate.lackProcessCompleteCmp'),
                    msg: this.localePipe.instant('validate.lackProcessCompleteCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return ((/** @type {?} */ (c.Time))) === 'PROCESSINSTANCE_ABORTED'; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackProcessAbortCmp',
                    title: this.localePipe.instant('validate.lackProcessAbortCmp'),
                    msg: this.localePipe.instant('validate.lackProcessAbortCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.Time === 'PROCESSINSTANCE_CANCELED'; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackProcessCancelCmp',
                    title: this.localePipe.instant('validate.lackProcessCancelCmp'),
                    msg: this.localePipe.instant('validate.lackProcessCancelCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.Time === 'PROCESSINSTANCE_ROLLBACK'; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackProcessBackCmp',
                    title: this.localePipe.instant('validate.lackProcessBackCmp'),
                    msg: this.localePipe.instant('validate.lackProcessBackCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.Time === 'PROCESSINSTANCE_RESUBMIT'; }))) {
                /** @type {?} */
                var tip = {
                    id: 'lackProcessReStartCmp',
                    title: this.localePipe.instant('validate.lackProcessReStartCmp'),
                    msg: this.localePipe.instant('validate.lackProcessReStartCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
        }
    };
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    WfValidatorAdapter.validateParallelGateway = /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    function (bpmnModel, warningList) {
        /** @type {?} */
        var flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        var parallelGatewayCount = 0;
        for (var k in flowElements) {
            if (flowElements[k] instanceof ParallelGateway) {
                parallelGatewayCount++;
            }
        }
        if (parallelGatewayCount % 2 !== 0) {
            /** @type {?} */
            var tip = {
                id: 'parallelGatewayCheck',
                title: this.localePipe.instant('validate.parallelGatewayCheck'),
                msg: this.localePipe.instant('validate.parallelGatewayCheckMsg'),
                type: 'processWarning'
            };
            warningList.push(tip);
        }
    };
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    WfValidatorAdapter.validateApprovalPerformers = /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    function (bpmnModel, warningList) {
        /** @type {?} */
        var flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        var count = 0;
        for (var k in flowElements) {
            /** @type {?} */
            var act = flowElements[k];
            if (act instanceof UserActivity || act instanceof OperationActivity) {
                /** @type {?} */
                var roles = act.GetResourceRoles();
                if (roles.length == 0 && (!act.AssignPerformerConfig || !act.AssignPerformerConfig.AllowGlobalAssign)) {
                    /** @type {?} */
                    var tip = {
                        id: 'approvalPerformerCheck' + count,
                        title: "\u3010" + flowElements[k].Name + "\u3011" + this.localePipe.instant('validate.approvalPerformerCheck'),
                        msg: "",
                        type: 'processWarning'
                    };
                    warningList.push(tip);
                    count++;
                }
            }
        }
    };
    /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    WfValidatorAdapter.validatePrcoessVaris = /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    function (bpmnModel) {
        var e_2, _a;
        /** @type {?} */
        var objects = bpmnModel.DefaultProcess.GetDataObjects();
        /** @type {?} */
        var procVaris = new Array();
        if (objects && objects.length > 0) {
            procVaris = objects.filter((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.DataType.Category !== 'CustomType'; })).map((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.Name; }));
        }
        /** @type {?} */
        var flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        for (var k in flowElements) {
            if (flowElements[k] instanceof UserActivity ||
                flowElements[k] instanceof OperationActivity ||
                flowElements[k] instanceof AutoActivity ||
                flowElements[k] instanceof MessageActivity ||
                flowElements[k] instanceof CallActivitySubProcess ||
                flowElements[k] instanceof IntermediateCatchEventImpl ||
                flowElements[k] instanceof NotifyActivity) {
                /** @type {?} */
                var variSets = ((/** @type {?} */ (flowElements[k]))).variableSettings;
                if (variSets) {
                    var _loop_1 = function (v) {
                        if (!procVaris.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p === v.variableCode; }))) {
                            return { value: {
                                    valid: false,
                                    type: 'message',
                                    level: 'warning',
                                    message: "\u3010" + flowElements[k].Name + "\u3011" + this_1.localePipe.instant('validate.noVariable1')
                                        + ("\u3010" + v.variableName + "\u3011") + this_1.localePipe.instant('validate.noVariable2')
                                } };
                        }
                    };
                    var this_1 = this;
                    try {
                        for (var variSets_1 = tslib_1.__values(variSets), variSets_1_1 = variSets_1.next(); !variSets_1_1.done; variSets_1_1 = variSets_1.next()) {
                            var v = variSets_1_1.value;
                            var state_1 = _loop_1(v);
                            if (typeof state_1 === "object")
                                return state_1.value;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (variSets_1_1 && !variSets_1_1.done && (_a = variSets_1.return)) _a.call(variSets_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        return {
            valid: true,
        };
    };
    /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    WfValidatorAdapter.validateActivityList = /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    function (bpmnModel) {
        /** @type {?} */
        var flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        var resActId = this.validateActivityId(flowElements);
        if (!resActId.valid) {
            return resActId;
        }
        /** @type {?} */
        var resActName = this.validateActivityName(flowElements);
        if (!resActName.valid) {
            return resActName;
        }
        return {
            valid: true,
        };
    };
    /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    WfValidatorAdapter.validateActivityId = /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    function (flowElements) {
        for (var k in flowElements) {
            switch (flowElements[k].ClrTypeID) {
                case 'wf.StartActivity':
                    /** @type {?} */
                    var startActivity = (/** @type {?} */ (flowElements[k]));
                    if (!startActivity.Id.startsWith('startActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + startActivity.Name) + this.localePipe.instant('validate.noStartActivity')
                        };
                    }
                    break;
                case 'bpmn.ExclusiveGateway':
                    /** @type {?} */
                    var exclusiveGateway = (/** @type {?} */ (flowElements[k]));
                    if (!exclusiveGateway.Id.startsWith('ExclusiveGateway')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + exclusiveGateway.Name) + this.localePipe.instant('validate.noExclusiveGateway')
                        };
                    }
                    break;
                case 'bpmn.ParallelGateway':
                    /** @type {?} */
                    var parallelGateway = (/** @type {?} */ (flowElements[k]));
                    if (!parallelGateway.Id.startsWith('ParallelGateway')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + parallelGateway.Name) + this.localePipe.instant('validate.noParallelGateway')
                        };
                    }
                    break;
                case 'wf.UserActivity':
                    /** @type {?} */
                    var userActivity = (/** @type {?} */ (flowElements[k]));
                    if (!userActivity.Id.startsWith('UserActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + userActivity.Name) + this.localePipe.instant('validate.noUserActivity')
                        };
                    }
                    break;
                case 'wf.OperationActivity':
                    /** @type {?} */
                    var operationActivity = (/** @type {?} */ (flowElements[k]));
                    if (!operationActivity.Id.startsWith('UserActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + operationActivity.Name) + this.localePipe.instant('validate.noOperationActivity')
                        };
                    }
                    break;
                case 'wf.NotifyActivity':
                    /** @type {?} */
                    var notifyActivity = (/** @type {?} */ (flowElements[k]));
                    if (!notifyActivity.Id.startsWith('NotifyActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + notifyActivity.Name) + this.localePipe.instant('validate.noNotifyActivity')
                        };
                    }
                    break;
                case 'wf.CallActivitySubProcess':
                    /** @type {?} */
                    var callActivitySubProcess = (/** @type {?} */ (flowElements[k]));
                    if (!callActivitySubProcess.Id.startsWith('CallActivitySubProcess')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + callActivitySubProcess.Name) + this.localePipe.instant('validate.noCallActivitySubProcess')
                        };
                    }
                    break;
                case 'wf.AutoActivity':
                    /** @type {?} */
                    var autoActivity = (/** @type {?} */ (flowElements[k]));
                    if (!autoActivity.Id.startsWith('autoActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + autoActivity.Name) + this.localePipe.instant('validate.noAutoActivity')
                        };
                    }
                    break;
                case 'wf.IntermediateCatchEventImpl':
                    /** @type {?} */
                    var intermediateCatchEventImpl = (/** @type {?} */ (flowElements[k]));
                    if (!intermediateCatchEventImpl.Id.startsWith('IntermediateCatchEvent')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + intermediateCatchEventImpl.Name) + this.localePipe.instant('validate.noIntermediateCatchEvent')
                        };
                    }
                    break;
                case 'wf.MessageActivity':
                    /** @type {?} */
                    var messageActivity = (/** @type {?} */ (flowElements[k]));
                    if (!messageActivity.Id.startsWith('MessageActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + messageActivity.Name) + this.localePipe.instant('validate.noMessageActivity')
                        };
                    }
                    break;
                case 'wf.AifCreationBillActivity':
                    /** @type {?} */
                    var aifCreationBillActivity = (/** @type {?} */ (flowElements[k]));
                    if (!aifCreationBillActivity.Id.startsWith('AifCreationBillActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + aifCreationBillActivity.Name) + this.localePipe.instant('validate.noAifCreationBillActivity')
                        };
                    }
                    break;
                case 'bpmn.EndEvent':
                    /** @type {?} */
                    var endEvent = (/** @type {?} */ (flowElements[k]));
                    if (!endEvent.Id.startsWith('EndEvent')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + endEvent.Name) + this.localePipe.instant('validate.noEndEvent')
                        };
                    }
                    break;
            }
        }
        return {
            valid: true,
        };
    };
    /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    WfValidatorAdapter.validateActivityName = /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    function (flowElements) {
        for (var k in flowElements) {
            /** @type {?} */
            var flowNode = flowElements[k];
            switch (flowNode.ClrTypeID) {
                case "wf.StartActivity":
                case "bpmn.ExclusiveGateway":
                case "bpmn.ParallelGateway":
                case "wf.UserActivity":
                case "wf.OperationActivity":
                case "wf.NotifyActivity":
                case "wf.CallActivitySubProcess":
                case "wf.AutoActivity":
                case "wf.IntermediateCatchEventImpl":
                case "wf.MessageActivity":
                case "wf.AifCreationBillActivity":
                case "bpmn.EndEvent":
                    if (flowNode.Name == null || flowNode.Name == "") {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.mark') +
                                ("" + flowNode.Id) + this.localePipe.instant('validate.noFlowNodeChsName')
                        };
                    }
                    if (new Blob([flowNode.Name]).size > 128) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                ("" + flowNode.Name) + this.localePipe.instant('validate.nameExceedsLengthLimit')
                        };
                    }
                    break;
            }
            ;
        }
        return {
            valid: true,
        };
    };
    WfValidatorAdapter.localePipe = null;
    return WfValidatorAdapter;
}());
export { WfValidatorAdapter };
if (false) {
    /** @type {?} */
    WfValidatorAdapter.localePipe;
}
//# sourceMappingURL=data:application/json;base64,