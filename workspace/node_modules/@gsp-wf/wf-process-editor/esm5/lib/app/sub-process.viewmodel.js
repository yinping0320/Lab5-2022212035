/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { CallActivitySubProcess2Component, CallActivitySubProcess2Converter } from '../views/call-activity-sub-process2/call-activity-sub-process2.component';
import { CallActivitySubProcessPropertyKeys } from '../designer/wf-cell/property-keys/CallActivitySubProcessPropertyKeys';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
import { MultiInstanceLoopCharacteristicsComponent, MultiInstanceLoopCharacteristicsConverter } from '../views/multi-instance-loop-characteristics/multi-instance-loop-characteristics.component';
var SubProcessViewModel = /** @class */ (function () {
    function SubProcessViewModel(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case CallActivitySubProcessPropertyKeys.callActivitySubProcess: // 参与者
                        // item.editor = CallActivitySubProcessComponent;
                        // item.converter = new CallActivitySubProcessConverter();
                        item.editor = CallActivitySubProcess2Component;
                        item.converter = new CallActivitySubProcess2Converter(_this.localPipe);
                        item.editorParams = {
                            bizTypeId: _this.uiState.flowFormInfo.flowForm.businessObjectId,
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(_this.localPipe);
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics:
                        item.editor = MultiInstanceLoopCharacteristicsComponent;
                        item.converter = new MultiInstanceLoopCharacteristicsConverter(_this.localPipe);
                        item.editorParams = {
                            location: 'CallActivitySubProcess'
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(_this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    SubProcessViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SubProcessViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: WfLocalePipe }
    ]; };
    return SubProcessViewModel;
}());
export { SubProcessViewModel };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SubProcessViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    SubProcessViewModel.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,