/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { MessageNoticeComponent, MessageNoticeConverter } from '../views/message-notice/message-notice.component';
import { ExecuteFormsComponent, ExecuteFormsConverter } from '../views/execute-forms/execute-forms.component';
import { ExtendPropertyComponent, ExtendPropertyConverter } from '../views/extend-property/extend-property.component';
import { OrganizationPotentialOwnerComponent, OrganizationPotentialOwnerConverter } from '../views/organization-potential-owner/organization-potential-owner.component';
import { ParticipantComponent, ParticipantConverter } from '../views/participant/participant.component';
import { NotifyActivityPropertyKeys } from '../designer/wf-cell/property-keys/NotifyActivityPropertyKeys';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
var NotifyActivityAdapter = /** @class */ (function () {
    function NotifyActivityAdapter(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case NotifyActivityPropertyKeys.Id: // 标识
                        break;
                    case NotifyActivityPropertyKeys.ParticipantSchemes: // 参与者
                        item.editor = ParticipantComponent;
                        item.converter = new ParticipantConverter(_this.localPipe);
                        item.editorParams = {
                            nodeType: 'notifyActivity'
                        };
                        break;
                    case NotifyActivityPropertyKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        var params = {
                            location: 'notifyActivity',
                            tab: 'web'
                        };
                        item.converter = new ExecuteFormsConverter(params, _this.localPipe);
                        item.editorParams = params;
                        break;
                    case NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        var editorParams = {
                            location: 'notifyActivity',
                            tab: 'mobile'
                        };
                        item.converter = new ExecuteFormsConverter(editorParams, _this.localPipe);
                        item.editorParams = editorParams;
                        break;
                    case NotifyActivityPropertyKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter(_this.localPipe);
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case NotifyActivityPropertyKeys.NotifyAble: // 允许知会
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter(_this.localPipe);
                        item.editorParams = {
                            nodeType: 'notifyActivity',
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter(_this.localPipe);
                        break;
                }
            }));
        }
    };
    NotifyActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotifyActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: WfLocalePipe }
    ]; };
    return NotifyActivityAdapter;
}());
export { NotifyActivityAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NotifyActivityAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    NotifyActivityAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,