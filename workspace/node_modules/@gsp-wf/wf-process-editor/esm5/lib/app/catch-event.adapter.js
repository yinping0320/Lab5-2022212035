/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ProcessDesignerUIState } from './process-designer.uistate';
import { Injectable, Injector } from '@angular/core';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { EventDefinitionComponent, EventDefinitionConverter } from '../views/event-definition/event-definition.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { IntermediateCatchEventImplPropertyKeys } from '../designer/wf-cell/property-keys/IntermediateCatchEventImplPropertyKeys';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
var CatchEventAdapter = /** @class */ (function () {
    function CatchEventAdapter(uiState, injector, localPipe) {
        this.uiState = uiState;
        this.injector = injector;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case IntermediateCatchEventImplPropertyKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(_this.localPipe);
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case IntermediateCatchEventImplPropertyKeys.EventDefinitions:
                        item.editor = EventDefinitionComponent;
                        item.converter = new EventDefinitionConverter(_this.localPipe);
                        break;
                    case IntermediateCatchEventImplPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(_this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    CatchEventAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CatchEventAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: Injector },
        { type: WfLocalePipe }
    ]; };
    return CatchEventAdapter;
}());
export { CatchEventAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0Y2gtZXZlbnQuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYXBwL2NhdGNoLWV2ZW50LmFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQzlHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFILE9BQU8sRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFILE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLDBFQUEwRSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUUxRTtJQUdJLDJCQUNZLE9BQStCLEVBQy9CLFFBQWtCLEVBQ2xCLFNBQXVCO1FBRnZCLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBQy9CLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBYztJQUMvQixDQUFDOzs7OztJQUNMLHVDQUFXOzs7O0lBQVgsVUFBWSxHQUFRO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7O0lBRU8scUNBQVM7Ozs7O0lBQWpCLFVBQWtCLEdBQVU7UUFBNUIsaUJBU0M7O1lBUlMsY0FBYyxHQUE0QixFQUFFO1FBQ2xELElBQUksR0FBRyxFQUFFO1lBQ0wsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFDLE9BQThCO2dCQUN2QyxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbkMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqQyxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBQ08scUNBQVM7Ozs7O0lBQWpCLFVBQWtCLEdBQXFCO1FBQXZDLGlCQXdCQztRQXZCRyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsSUFBb0I7Z0JBQzdCLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDckIsS0FBSyxzQ0FBc0MsQ0FBQyxZQUFZO3dCQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDO3dCQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUMzRCxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixRQUFRLEVBQUUsd0JBQXdCO3lCQUNyQyxDQUFDO3dCQUNGLE1BQU07b0JBQ1YsS0FBSyxzQ0FBc0MsQ0FBQyxnQkFBZ0I7d0JBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzlELE1BQU07b0JBQ1YsS0FBSyxzQ0FBc0MsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPO3dCQUNqRSxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUF3QixDQUFDO3dCQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksd0JBQXdCLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUM5RCxNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Z0JBL0NKLFVBQVU7Ozs7Z0JBVEYsc0JBQXNCO2dCQUNWLFFBQVE7Z0JBTXBCLFlBQVk7O0lBa0RyQix3QkFBQztDQUFBLEFBaERELElBZ0RDO1NBOUNZLGlCQUFpQjs7Ozs7O0lBRXRCLG9DQUF1Qzs7Ozs7SUFDdkMscUNBQTBCOzs7OztJQUMxQixzQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9jZXNzRGVzaWduZXJVSVN0YXRlIH0gZnJvbSAnLi9wcm9jZXNzLWRlc2lnbmVyLnVpc3RhdGUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFbGVtZW50UHJvcGVydHlDb25maWcsIFByb3BlcnR5RW50aXR5IH0gZnJvbSAnQGZhcnJpcy9pZGUtcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBCYWNrd2FyZFJ1bGVDb21wb25lbnQsIEJhY2t3YXJkUnVsZUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2JhY2t3YXJkLXJ1bGUvYmFja3dhcmQtcnVsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBFdmVudERlZmluaXRpb25Db21wb25lbnQsIEV2ZW50RGVmaW5pdGlvbkNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2V2ZW50LWRlZmluaXRpb24vZXZlbnQtZGVmaW5pdGlvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQsIFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3ZhcmlhYmxlLXNldHRpbmcvdmFyaWFibGUtc2V0dGluZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBJbnRlcm1lZGlhdGVDYXRjaEV2ZW50SW1wbFByb3BlcnR5S2V5cyB9IGZyb20gJy4uL2Rlc2lnbmVyL3dmLWNlbGwvcHJvcGVydHkta2V5cy9JbnRlcm1lZGlhdGVDYXRjaEV2ZW50SW1wbFByb3BlcnR5S2V5cyc7XHJcbmltcG9ydCB7IFdmTG9jYWxlUGlwZSB9IGZyb20gJy4uL2kxOG4vcGlwZS93Zi1wcm9jZXNzLWVkaXRvci1sb2NhbGUucGlwZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgQ2F0Y2hFdmVudEFkYXB0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgbG9jYWxQaXBlOiBXZkxvY2FsZVBpcGVcclxuICAgICkgeyB9XHJcbiAgICBzZXRQcm9wZXJ0eShvYmo6IGFueSkge1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMuc2V0Q29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRDb25maWcob2JqOiBhbnlbXSk6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eUNvbmZpZzogRWxlbWVudFByb3BlcnR5Q29uZmlnW10gPSBbXTtcclxuICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChlbGVtZW50OiBFbGVtZW50UHJvcGVydHlDb25maWcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW50aXR5KGVsZW1lbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvbmZpZy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5Q29uZmlnO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZXRFbnRpdHkob2JqOiBQcm9wZXJ0eUVudGl0eVtdKSB7XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmoubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoaXRlbTogUHJvcGVydHlFbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnRlcm1lZGlhdGVDYXRjaEV2ZW50SW1wbFByb3BlcnR5S2V5cy5CYWNrV2FyZFJ1bGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gQmFja3dhcmRSdWxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBCYWNrd2FyZFJ1bGVDb252ZXJ0ZXIodGhpcy5sb2NhbFBpcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVUeXBlOiAnQ2FsbEFjdGl2aXR5U3ViUHJvY2VzcydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnRlcm1lZGlhdGVDYXRjaEV2ZW50SW1wbFByb3BlcnR5S2V5cy5FdmVudERlZmluaXRpb25zOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IEV2ZW50RGVmaW5pdGlvbkNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgRXZlbnREZWZpbml0aW9uQ29udmVydGVyKHRoaXMubG9jYWxQaXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnRlcm1lZGlhdGVDYXRjaEV2ZW50SW1wbFByb3BlcnR5S2V5cy52YXJpYWJsZVNldHRpbmdzOiAvLyDlj5jph4/orr7nva5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlcih0aGlzLmxvY2FsUGlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19