/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { VoConfigComponent, VoConfigConverter } from '../views/vo-config/vo-config.component';
import { WfOptionsComponent, WfOptionsConverter } from '../views/wf-options/wf-options.component';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
var BillNodeActivityAdapter = /** @class */ (function () {
    function BillNodeActivityAdapter(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    BillNodeActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    BillNodeActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    BillNodeActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case "VoConfig":
                        item.converter = new VoConfigConverter(_this.localPipe);
                        item.editor = VoConfigComponent;
                        item.editorParams = {
                            bizTypeId: _this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case "WfOpts":
                        item.converter = new WfOptionsConverter(_this.localPipe);
                        item.editor = WfOptionsComponent;
                        item.editorParams = {
                            bizTypeId: _this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case "wfConfig": //启用工作流
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    BillNodeActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BillNodeActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: WfLocalePipe }
    ]; };
    return BillNodeActivityAdapter;
}());
export { BillNodeActivityAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BillNodeActivityAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    BillNodeActivityAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC1ub2RlLWFjdGl2aXR5LmFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9iaWxsLW5vZGUtYWN0aXZpdHkuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFFMUU7SUFFSSxpQ0FDWSxPQUErQixFQUMvQixTQUF1QjtRQUR2QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUMvQixjQUFTLEdBQVQsU0FBUyxDQUFjO0lBRW5DLENBQUM7Ozs7O0lBQ0QsNkNBQVc7Ozs7SUFBWCxVQUFZLEdBQVE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFTywyQ0FBUzs7Ozs7SUFBakIsVUFBa0IsR0FBVTtRQUE1QixpQkFTQzs7WUFSUyxjQUFjLEdBQTRCLEVBQUU7UUFDbEQsSUFBSSxHQUFHLEVBQUU7WUFDTCxHQUFHLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsT0FBOEI7Z0JBQ3ZDLEtBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNuQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFDTywyQ0FBUzs7Ozs7SUFBakIsVUFBa0IsR0FBcUI7UUFBdkMsaUJBMEJDO1FBekJHLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxJQUFvQjtnQkFDN0IsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFO29CQUNyQixLQUFLLFVBQVU7d0JBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGlCQUFpQixDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQzt3QkFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsU0FBUyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7eUJBQ2pFLENBQUM7d0JBQ0YsTUFBTTtvQkFDVixLQUFLLFFBQVE7d0JBQ1QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQzt3QkFDakMsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsU0FBUyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7eUJBQ2pFLENBQUM7d0JBQ0YsTUFBTTtvQkFDVixLQUFLLFVBQVUsRUFBRSxPQUFPO3dCQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO3dCQUMxQyxNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Z0JBaERKLFVBQVU7Ozs7Z0JBTkYsc0JBQXNCO2dCQUl0QixZQUFZOztJQW1EckIsOEJBQUM7Q0FBQSxBQWpERCxJQWlEQztTQWhEWSx1QkFBdUI7Ozs7OztJQUU1QiwwQ0FBdUM7Ozs7O0lBQ3ZDLDRDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4vcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJ0BmYXJyaXMvaWRlLXByb3BlcnR5LXBhbmVsJztcclxuaW1wb3J0IHsgVm9Db25maWdDb21wb25lbnQsIFZvQ29uZmlnQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3Mvdm8tY29uZmlnL3ZvLWNvbmZpZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXZk9wdGlvbnNDb21wb25lbnQsIFdmT3B0aW9uc0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3dmLW9wdGlvbnMvd2Ytb3B0aW9ucy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmlsbE5vZGVBY3Rpdml0eUFkYXB0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlLFxyXG4gICAgICAgIHByaXZhdGUgbG9jYWxQaXBlOiBXZkxvY2FsZVBpcGVcclxuICAgICkge1xyXG4gICAgfVxyXG4gICAgc2V0UHJvcGVydHkob2JqOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlDb25maWcgPSB0aGlzLnNldENvbmZpZyhvYmoucHJvcGVydHlDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q29uZmlnKG9iajogYW55W10pOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlDb25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdID0gW107XHJcbiAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoZWxlbWVudDogRWxlbWVudFByb3BlcnR5Q29uZmlnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVudGl0eShlbGVtZW50LnByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb25maWcucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUNvbmZpZztcclxuICAgIH1cclxuICAgIHByaXZhdGUgc2V0RW50aXR5KG9iajogUHJvcGVydHlFbnRpdHlbXSkge1xyXG4gICAgICAgIGlmIChvYmogJiYgb2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgb2JqLmZvckVhY2goKGl0ZW06IFByb3BlcnR5RW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydHlJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJWb0NvbmZpZ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBWb0NvbmZpZ0NvbnZlcnRlcih0aGlzLmxvY2FsUGlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gVm9Db25maWdDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYml6VHlwZUlkOiB0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZsb3dGb3JtLmJ1c2luZXNzT2JqZWN0SWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIldmT3B0c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBXZk9wdGlvbnNDb252ZXJ0ZXIodGhpcy5sb2NhbFBpcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IFdmT3B0aW9uc0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXpUeXBlSWQ6IHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm0uYnVzaW5lc3NPYmplY3RJZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwid2ZDb25maWdcIjogLy/lkK/nlKjlt6XkvZzmtYFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pdGVyYXRvciA9IHRoaXMudWlTdGF0ZS5ib29sSXRlcmF0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19