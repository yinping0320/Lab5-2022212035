import { ChangeDetectorRef, ComponentFactoryResolver, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { TypeConverter } from '@farris/ide-property-panel';
import { FarrisRadioGroupComponent } from '@farris/ui-forms';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { ExpressionService } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { SubProcessType } from '../call-activity-sub-process/SubProcessType';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
declare type WfOptins = {
    subProcessType?: SubProcessType;
    calledElement?: string;
    calledBizDefKey?: string;
    calledElementName?: string;
    calledBizDefName?: string;
};
export declare class WfOptionsComponent implements OnInit {
    private notify;
    private modalService;
    private message;
    private util;
    private http;
    private designerState;
    private expr;
    private cfr;
    private inj;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    editorParams: {
        bizTypeId?: string;
    };
    value: WfOptins;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    modalFooter: TemplateRef<any>;
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    readonly subProcessType: typeof SubProcessType;
    entity: WfOptins;
    radioGroupProcessType: FarrisRadioGroupComponent;
    radioGroupProcessTypeData: {
        value: string;
        name: any;
    }[];
    constructor(notify: NotifyService, modalService: BsModalService, message: MessagerService, util: ProcessDeUtil, http: HttpService, designerState: ProcessDesignerUIState, expr: ExpressionService, cfr: ComponentFactoryResolver, inj: Injector, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    clickOk(): void;
    clickCancel(): void;
    processTypeChange(val: any): void;
    processConfirm(args: any): void;
    clearProcessDef(args: any): void;
    flowFormConfirm(args: any): void;
    clearFlowForm(args: any): void;
    getProcessDefKey(key: string): void;
    getFlowForm(id: string): void;
}
export declare class WfOptionsConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: any): string;
}
export {};
