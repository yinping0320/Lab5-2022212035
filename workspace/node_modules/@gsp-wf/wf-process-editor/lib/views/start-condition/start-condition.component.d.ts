import { ChangeDetectorRef, ComponentFactoryResolver, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TypeConverter } from '@farris/ide-property-panel';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { ResponseToolbarClickEvent } from '@farris/ui-response-toolbar';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { ExpressionService } from '@gsp-svc/expression';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { Observable } from 'rxjs';
import { AifLocalePipe } from '../aif-ui-common/pipe/aif-ui-common-locale.pipe';
import { IConditionEntity4Dg } from './entity/IConditionEntity4Dg';
import { StartConditionService } from './start-condition.service';
import { DataEntityService } from '@gsp-svc/data-entity-adapter';
import { AbstractDatagridComponent } from './abstract-datagrid-component';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
export declare class StartConditionComponent extends AbstractDatagridComponent implements OnInit {
    startConditionService: StartConditionService;
    private designerState;
    metadata: GSPMetadataRTService;
    expr: ExpressionService;
    des: DataEntityService;
    messager: MessagerService;
    notify: NotifyService;
    modal: BsModalService;
    framework: FrameworkService;
    router: Router;
    activatedRoute: ActivatedRoute;
    loading: LoadingService;
    localePipe: AifLocalePipe;
    cfr: ComponentFactoryResolver;
    cdf: ChangeDetectorRef;
    inj: Injector;
    readonly groupIcon = "<i class=\"f-icon f-icon-lookup\"></i>";
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: string;
    editorParams: {
        bizTypeId?: string;
        voId?: string;
    };
    modalFooter: TemplateRef<any>;
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
        showHeader: boolean;
    };
    dg: DatagridComponent;
    dgIdField: string;
    dgColumns: DataColumn[];
    dgData: IConditionEntity4Dg[];
    readonly dgTotal: number;
    designedConditionEntities: Array<IConditionEntity4Dg>;
    dgIsEnabledStateCell: TemplateRef<any>;
    dgOpCell: TemplateRef<any>;
    editingRowId: string;
    canEdit: any;
    constructor(startConditionService: StartConditionService, designerState: ProcessDesignerUIState, metadata: GSPMetadataRTService, expr: ExpressionService, des: DataEntityService, messager: MessagerService, notify: NotifyService, modal: BsModalService, framework: FrameworkService, router: Router, activatedRoute: ActivatedRoute, loading: LoadingService, localeId: string, localePipe: AifLocalePipe, cfr: ComponentFactoryResolver, cdf: ChangeDetectorRef, inj: Injector);
    ngOnInit(): void;
    clickOk(): void;
    clickCancel(): void;
    load(): void;
    toolbarClickHandler(args: ResponseToolbarClickEvent): void;
    add(): void;
    /**
     * 行删除
     * @param ctx
     */
    remove(evt: Event, ctx?: {
        rowIndex: number;
        rowData: {
            id: any;
            [key: string]: any;
        };
    }): boolean;
    selectContent(e: {
        instance: any;
        form: any;
        formControl: any;
        $event: any;
    }): void;
    selectCommonComp(e: {
        instance: any;
        form: any;
        formControl: any;
        $event: any;
    }): void;
    selectVOAction(e: {
        instance: any;
        form: any;
        formControl: any;
        $event: any;
    }): void;
    showExpression(e: {
        instance: any;
        form: any;
        formControl: any;
        $event: any;
    }): void;
    clearContent(e: {
        instance: any;
        form: any;
        formControl: any;
        $event: any;
    }): void;
    configDgColumns(): void;
    beforeEdit: (...args: any[]) => Observable<boolean>;
    beginEdit(param: {
        rowIndex: number;
        rowData: any;
        column: any;
        gridInstance: DatagridComponent;
    }): void;
    afterEdit: (rowIndex: any, rowData: IConditionEntity4Dg, ...args: any[]) => Observable<boolean>;
    endEdit(...args: any[]): void;
    cancelEdited(...args: any[]): void;
    configExpressionExpendFuncs(): void;
}
export declare class StartConditionConverter implements TypeConverter {
    constructor();
    convertTo(data: any): string;
}
