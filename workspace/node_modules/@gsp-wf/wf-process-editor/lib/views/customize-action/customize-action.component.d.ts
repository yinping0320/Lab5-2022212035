import { OnInit, EventEmitter, TemplateRef, ComponentFactoryResolver, Injector, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { CustomizeAciton } from './entities/customize-action.entity';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { BsModalService } from '@farris/ui-modal';
import { TypeConverter } from '@farris/ide-property-panel';
import { MessagerService } from '@farris/ui-messager';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class CustomizeActionComponent implements OnInit, AfterViewInit {
    private designerState;
    private expr;
    private resolver;
    private injector;
    private modalService;
    private message;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    editorParams: any;
    modalFooter: TemplateRef<any>;
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    value: any[];
    actionlist: DatagridComponent;
    paramlist: DatagridComponent;
    private terminalList;
    actions: CustomizeAciton[];
    curAction: CustomizeAciton;
    columns: ({
        field: string;
        width: number;
        title: any;
        formatter?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: any;
                }[];
            };
        };
    })[];
    paramColumns: ({
        field: string;
        width: number;
        title: any;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
            };
        };
    })[];
    constructor(designerState: ProcessDesignerUIState, expr: ExpressionService, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, message: MessagerService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    addActions(): void;
    delete(): void;
    clickOK(): void;
    clickCancel(): void;
    loadData(): void;
    selectChanged(data: any): void;
    showExprHelp(e: any): void;
}
export declare class CustomizeActionConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: any[]): string;
}
