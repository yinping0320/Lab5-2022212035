import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { TypeConverter } from '@farris/ide-property-panel';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { DisplayInfor, OtherAssignActivityNodeInfo } from './other-assign-activity-node-info';
import { DialogComponent } from '@farris/ui-dialog';
import { ExpressionService } from '@gsp-svc/expression';
export declare class AssignScopeComponent implements OnInit, AfterViewInit {
    private uistate;
    private message;
    private exprService;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    modalFooter: TemplateRef<any>;
    grid: DatagridComponent;
    actionsTable1: DatagridComponent;
    actionsDialog1: DialogComponent;
    editorParams: any;
    value: any;
    location: any;
    items: any[];
    listItems: DisplayInfor[];
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    cols: ({
        title: any;
        field: string;
        width: number;
        editor?: undefined;
        formatter?: undefined;
        validators?: undefined;
    } | {
        title: any;
        field: string;
        width: number;
        editor: {
            type: string;
            options: {
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
        formatter: {
            type: string;
            options: {
                trueText: any;
                falseText: any;
            };
        };
        validators: {
            type: string;
            messager: string;
        }[];
    } | {
        title: any;
        field: string;
        width: number;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
            };
        };
        formatter?: undefined;
        validators?: undefined;
    })[];
    nodeCols: {
        title: any;
        field: string;
        width: number;
        filter: boolean;
    }[];
    otherAssignActivityNodeInfos: OtherAssignActivityNodeInfo[];
    curActivity: any;
    constructor(uistate: ProcessDesignerUIState, message: MessagerService, exprService: ExpressionService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    delete(): void;
    moveUp(): void;
    moveDown(): void;
    selectionChange(data: any): void;
    private swapArray;
    clickOK(): void;
    clickCancel(): void;
    actionsSelect(): void;
    SelectCancel(): void;
    editConditon(e: any): void;
}
export declare class AssignScopeConverter implements TypeConverter {
    private uistate;
    private localePipe;
    actList: any[];
    constructor(uistate: ProcessDesignerUIState, localePipe: WfLocalePipe);
    convertTo(data: any): string;
}
