import { ChangeDetectorRef, ComponentFactoryResolver, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TypeConverter } from '@farris/ide-property-panel';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
declare type VoConfig = {
    currentVoId?: string;
    currentVoName?: string;
    currentDocumentTypeId?: string;
    currentDocumentTypeName?: string;
};
export declare class VoConfigComponent implements OnInit {
    private messager;
    private notify;
    private modal;
    private framework;
    private router;
    private activatedRoute;
    private loading;
    private cfr;
    private inj;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    readonly groupIcon = "<i class=\"f-icon f-icon-lookup\"></i>";
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: VoConfig;
    editorParams: {
        bizTypeId?: string;
    };
    modalFooter: TemplateRef<any>;
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    entity: VoConfig;
    constructor(messager: MessagerService, notify: NotifyService, modal: BsModalService, framework: FrameworkService, router: Router, activatedRoute: ActivatedRoute, loading: LoadingService, cfr: ComponentFactoryResolver, inj: Injector, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    clickOk(): void;
    clickCancel(): void;
    selectVo(): void;
    clearVo(): void;
    selectDocuType(): void;
    clearDocuType(): void;
}
export declare class VoConfigConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: VoConfig): string;
}
export {};
