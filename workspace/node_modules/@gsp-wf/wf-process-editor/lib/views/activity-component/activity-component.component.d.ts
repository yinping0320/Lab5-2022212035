import { OnInit, EventEmitter, TemplateRef, ComponentFactoryResolver, Injector, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { TypeConverter } from '@farris/ide-property-panel';
import { ActivityComponentRepository } from './activity-component.repository';
import { ActivityComponentUIState } from './activity-component.uistate';
import { ActivityComponentViewModel } from './activity-component.viewmodel';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { BsModalService } from '@farris/ui-modal';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class ActivityComponentComponent implements OnInit, AfterViewInit {
    uistate: ActivityComponentUIState;
    viewModel: ActivityComponentViewModel;
    private designerState;
    private expr;
    private resolver;
    private injector;
    private modalService;
    private componentService;
    private repository;
    private message;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    editorParams: any;
    modalFooter: TemplateRef<any>;
    btnTemplate: TemplateRef<any>;
    cmplist: DatagridComponent;
    paramlist: DatagridComponent;
    exBizTips: boolean;
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    value: any[];
    buttonGroupData: {
        id: string;
        text: any;
    }[];
    editState: string;
    isPreExternalProcessCmps: boolean;
    location: 'activity' | 'process' | 'autoActivity';
    columns: any[];
    paramColumns: any[];
    constructor(uistate: ActivityComponentUIState, viewModel: ActivityComponentViewModel, designerState: ProcessDesignerUIState, expr: ExpressionService, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, componentService: CommonComponentUiRTService, repository: ActivityComponentRepository, message: MessagerService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    restart(): void;
    ngAfterViewInit(): void;
    edit(): void;
    deleteRow(): void;
    moveUp(): void;
    moveDown(): void;
    clickAction(buttonId: string, ctx: any): void;
    clickOK(): void;
    clickCancel(): void;
    componentSelect(): void;
    /**
     * 取数构件帮助new
     */
    openComponentSelectorNew(metadataId: string, sessionId: string): void;
    showExprHelp(e: any): void;
    selectionChange(data: any): void;
    paramAfterEdit: (rowIndex: number, rowData: any, column?: DataColumn) => import("rxjs").Observable<boolean>;
    private closeCellEdit;
    private validator;
}
export declare class ActivityComponentConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: any[]): string;
}
