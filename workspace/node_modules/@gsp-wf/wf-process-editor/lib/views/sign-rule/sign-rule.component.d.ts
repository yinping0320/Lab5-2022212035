import { OnInit, EventEmitter, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { TypeConverter } from '@farris/ide-property-panel';
import { FormBuilder } from '@angular/forms';
import { SignRuleEntity } from './entites/sign-rule.entity';
import { DialogComponent } from '@farris/ui-dialog';
import { ExpressionService, VarEntity } from '@gsp-svc/expression';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { BpmnModel } from '@edp-pmf/bpmn-model';
export declare class SignRuleComponent implements OnInit {
    private formBuilder;
    private message;
    private exprService;
    private designerUIState;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: any[];
    value1: any[];
    editorParams: any;
    modalFooter: TemplateRef<any>;
    modalFooter1: TemplateRef<any>;
    apvlItemsGrid: DatagridComponent;
    apvlItemDialog: DialogComponent;
    grid: DatagridComponent;
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    editCondition: boolean;
    data: SignRuleEntity[];
    calculationMethods: any[];
    counterSignVariables: VarEntity[];
    bpmnModel: BpmnModel;
    /******* 审批项帮助参数 *********************************************************/
    approvalCols: {
        title: any;
        field: string;
        width: number;
    }[];
    approvalItems: any[];
    approvalItems1: any[];
    /*********************************** */
    columns: ({
        field: string;
        width: number;
        title: any;
        formatter?: undefined;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: any[];
                precision?: undefined;
                min?: undefined;
                trueText?: undefined;
                falseText?: undefined;
            };
        };
        editor: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: any[];
                idField: string;
                panelHeight: string;
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
    } | {
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
        formatter: {
            type: string;
            options: {
                precision: number;
                min: number;
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                trueText?: undefined;
                falseText?: undefined;
            };
        };
    } | {
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
        formatter: {
            type: string;
            options: {
                trueText: any;
                falseText: any;
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                precision?: undefined;
                min?: undefined;
            };
        };
    } | {
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
            };
        };
        formatter?: undefined;
    })[];
    constructor(formBuilder: FormBuilder, message: MessagerService, exprService: ExpressionService, designerUIState: ProcessDesignerUIState, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    deleteRow(): void;
    deleteRow1(): void;
    setName1(signRuleEntity: SignRuleEntity[]): SignRuleEntity[];
    clickOK(): void;
    clickOK1(): void;
    clickCancel(): void;
    editConditon(e: any): void;
    /**
     * 选中审批项
     */
    approvalSelect(): void;
    preValue: SignRuleEntity;
    curValue: SignRuleEntity;
    /**
     * 结束编辑前事件
     */
    afterEdit: (rowIndex: number, rowData: any, column?: DataColumn) => import("rxjs").Observable<boolean>;
    endEdit(e: any): void;
    isEmpty(s: string): boolean;
}
export declare class SignRuleConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: any[]): string;
}
