import { OnInit, TemplateRef, EventEmitter, ComponentFactoryResolver, Injector, ChangeDetectorRef } from '@angular/core';
import { MessageNotice } from '../message-notice';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { ExpressionService, VarEntity } from '@gsp-svc/expression';
import { MessageReceiver } from '../message-receiver';
import { BsModalService } from '@farris/ui-modal';
import { HttpService } from '@ecp-caf/caf-common';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { SmsMessageTemplateComponent } from '../../sms-message-template/sms-message-template.component';
import { WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class MessageNoticeEditComponent implements OnInit {
    private message;
    private uistate;
    private expr;
    private resolver;
    private injector;
    private modalService;
    private designerUIState;
    private http;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    groupIcon2: string;
    exprAble: boolean;
    footer: TemplateRef<any>;
    SmsTemplate: SmsMessageTemplateComponent;
    closeEmitter: EventEmitter<any>;
    submitEmitter: EventEmitter<MessageNotice>;
    userHelp: SysFarrisLookupComponent;
    private _location;
    location: 'activity' | 'process' | 'messageActivity';
    messageNotice: MessageNotice;
    value: MessageNotice;
    typeGroup: {
        value: any;
        name: any;
    }[];
    receiverVariables: {
        value: string;
        name: any;
    }[];
    variableOrgTypes: {
        name: any;
        value: string;
    }[];
    sendTimes: any[];
    receiverVari: string;
    bindingData: {
        id?: any;
        name?: any;
    };
    index: any;
    receiverTypes: {
        value: string;
        text: any;
    }[];
    processParticipantTypes: {
        value: string;
        text: any;
    }[];
    userTypeButtonNeedShow: boolean;
    hasAdminOrg: any;
    hasSmsTemplate: boolean;
    constructor(message: MessagerService, uistate: ProcessDesignerUIState, expr: ExpressionService, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, designerUIState: ProcessDesignerUIState, http: HttpService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    clickOK(): void;
    clickCancel(): void;
    sendTimeChange(data: any): void;
    sendTypeChange(sendType: string): void;
    private hasSmsMessage;
    usersSelect(data: any[]): void;
    clearUsers(index: any): void;
    clearPosition(index: any): void;
    clearActivityExecutor(index: any): void;
    clearVariableParticipant(index: any): void;
    changeValue(data: any): void;
    clear(): void;
    private setReceiver;
    private validator;
    disableAdd: () => boolean;
    addReceiver(): void;
    selectActivityExecutorParticipant(activityDefId: string, index: any): void;
    selectVariableParticipant(variableParticipant: string, index: any): void;
    selectUserParticipant(receiver: MessageReceiver, index: any): void;
    selectPositionParticipant(receiver: MessageReceiver, index: any): void;
    titleExpr(data: any): void;
    contentExpr(data: any): void;
    showContentHelp(data: string): void;
    showTitleHelp(data: string): void;
    showExpr(): VarEntity[];
    tranExpr(): void;
    private variableParticipantName;
    processSendTime: {
        value: string;
        text: any;
    }[];
    ReceiverType: {
        value: string;
        text: any;
    }[];
    activitySendTime: {
        value: string;
        text: any;
    }[];
}
