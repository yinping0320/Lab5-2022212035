import { ChangeDetectorRef, ComponentFactoryResolver, Injector, OnInit } from '@angular/core';
import { MatrixDefInfoEntity } from './entitis/matrix-def-info.entity';
import { MatrixDataInfoEntity } from './entitis/matrix-data-info.entity';
import { HttpService } from '@ecp-caf/caf-common';
import { Observable } from 'rxjs';
import { ExpressionService } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { LookupGridComponent, PickedResult } from '@farris/ui-lookup';
import { BsModalService } from '@farris/ui-modal';
import { MatrixFieldInfoEntity } from './entitis/matrix-field-info.entity';
import { PerformerEntity } from '../../entities/performer.entity';
import { MatrixDefHelpService } from './service/matrix-performer.component.service';
import { WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class MatrixPerformerComponent implements OnInit {
    private http;
    designerUIState: ProcessDesignerUIState;
    private expr;
    private modalService;
    private resolver;
    private injector;
    private matDefService;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    display: string;
    typeReadOnly: boolean;
    items: MatrixDefInfoEntity[];
    pageIndex: number;
    pageSize: number;
    pageList: number[];
    total: number;
    groupIcon2: string;
    index: number;
    fieldId: string;
    value: any;
    helpId: any;
    dataUri: string;
    /**
     * 矩阵定义显示列
     */
    columns: {
        title: any;
        field: string;
        width: number;
    }[];
    users: PerformerEntity[];
    dataFieldAndValues: any[];
    curDataFieldValue: string;
    matrixDefEntityList: MatrixDefInfoEntity[];
    curMatrixDefEntity: MatrixDefInfoEntity;
    curMatrixDataEntity: MatrixDataInfoEntity;
    conditionFields: MatrixFieldInfoEntity[];
    exprGroup: {
        name: any;
        value: string;
    }[];
    mulGroup: {
        name: any;
        value: string;
    }[];
    /**
     * 条件字段是否启用表达式
     */
    condition1: string;
    condition1ExprAble: boolean;
    condition2: string;
    condition2ExprAble: boolean;
    condition3: string;
    condition3ExprAble: boolean;
    /**
     * 条件字段是否启用多值
     */
    MultivalueOption1: string;
    condition1Multivalue: boolean;
    MultivalueOption2: string;
    condition2Multivalue: boolean;
    MultivalueOption3: string;
    condition3Multivalue: boolean;
    /**
     * 编辑器页面显示文字，防范浅拷贝问题（对于条件字段的值和显示文字都不要在当前实体中进行修改只有点击确定时，才将其保存至当前实体并返回）
     */
    condition1Text: string;
    condition1Value: string;
    condition2Text: string;
    condition2Value: string;
    condition3Text: string;
    condition3Value: string;
    setMatrixDataEntity: MatrixDataInfoEntity;
    lookUp: LookupGridComponent;
    constructor(http: HttpService, designerUIState: ProcessDesignerUIState, expr: ExpressionService, modalService: BsModalService, resolver: ComponentFactoryResolver, injector: Injector, matDefService: MatrixDefHelpService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    /**
     * 获取矩阵定义
     */
    getMatrixLineType(): void;
    private setFields;
    dictPicked: (rowData: any) => Observable<boolean>;
    onClear(): void;
    /**
     * 编辑条件
     */
    editCondition(): void;
    onHelpSearch(data: any, index: any, id: any): void;
    openEnumValue(index: any, id: any): void;
    private showEnumList;
    dataFieldChange(data: any): void;
    selectedDataHandler(data: any): void;
    getPerformers(): MatrixDataInfoEntity;
    dictHelpPicked: (data: any) => Observable<PickedResult>;
    /**
     * 打开表达式编辑器
     * @param data 编辑第几个条件字段，值为（condition1，condition2，condition3）
     */
    showExprHelp(data: string): void;
    condition1Expr(data: any): void;
    condition1ExprClick(): void;
    condition1MulClick(): void;
    condition2Expr(data: any): void;
    condition2ExprClick(): void;
    condition2MulClick(): void;
    condition3Expr(data: any): void;
    condition3ExprClick(): void;
    condition3MulClick(): void;
    onBeforeHelp: (e: any) => Observable<boolean>;
}
