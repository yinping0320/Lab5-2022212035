import { OnInit, AfterViewInit } from '@angular/core';
import { UserPerformerComponent } from '../user-performer/user-performer.component';
import { PositionPerformerComponent } from '../position-performer/position-performer.component';
import { ComponentPerformerComponent } from '../component-performer/component-performer.component';
import { BizComponentEntity } from '../../../../domain/entities/biz-component.entity';
import { ReportingLineComponent } from '../reporting-line/reporting-line.component';
import { MatrixPerformerComponent } from '../matrix-performer/matrix-performer.component';
import { HttpService } from '@ecp-caf/caf-common';
import { ActivityExecutorPerformerComponent } from '../activity-executor-performer/activity-executor-performer.component';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { OrganizationParticipantExpression } from '../../../../domain/entities/organization-participant-expression';
import { VariablePerformerComponent } from '../variable-performer/variable-performer.component';
import { WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class PerformerEditComponent implements OnInit, AfterViewInit {
    private designerUIState;
    private expr;
    private http;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    component: BizComponentEntity;
    performer: {
        type: string;
        value: any;
    };
    performerType: string;
    userType: string;
    editState: string;
    tab: string;
    display: boolean;
    organizationLevelCollection: {
        value: string;
        text: any;
        orgId: string;
    }[];
    organizationParticipant: OrganizationParticipantExpression;
    usersCmp: UserPerformerComponent;
    varCmp: VariablePerformerComponent;
    posiCmp: PositionPerformerComponent;
    cmpCmp: ComponentPerformerComponent;
    reportingLineCmp: ReportingLineComponent;
    matrixCmp: MatrixPerformerComponent;
    activityExecutorCmp: ActivityExecutorPerformerComponent;
    constructor(designerUIState: ProcessDesignerUIState, expr: ExpressionService, http: HttpService, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    valueChange(event: any): void;
    getPerformers(): {
        userPerformers: any[];
        variable: import("../../entities/variable-performer.entity").VariablePerformerEntity;
        positions: import("../../entities/position-performer.entity").PositionPerformerEntity[];
        component: import("../component-performer/component-performer.entity").ComponentPerformer;
        reportingLine: import("../reporting-line/reporting-line-data.entity").ReportingLineDataEntity;
        matrix: import("../matrix-performer/entitis/matrix-data-info.entity").MatrixDataInfoEntity;
        activityExecutorPerformers: any[];
        organizationParticipant: OrganizationParticipantExpression;
    };
    editConditon(): void;
    editOrganizationId(): void;
}
