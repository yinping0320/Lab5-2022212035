import { OnInit, EventEmitter, TemplateRef, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { TypeConverter } from '@farris/ide-property-panel';
import { DialogComponent } from '@farris/ui-dialog';
import { ApprovalItemEntity } from './entities/approval-item.entity';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class ApprovelItemsComponent implements OnInit {
    private message;
    private util;
    private http;
    private uiState;
    private resolver;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: any[];
    modalFooter: TemplateRef<any>;
    actionsTable: DatagridComponent;
    actionsDialog: DialogComponent;
    grid: DatagridComponent;
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    workFlowActions: any[];
    columns: ({
        field: string;
        width: number;
        title: any;
        formatter?: undefined;
        editor?: undefined;
        validators?: undefined;
        isMultilingualField?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: any[];
                trueText?: undefined;
                falseText?: undefined;
            };
        };
        editor: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: any[];
                idField: string;
                panelHeight: string;
                languages?: undefined;
            };
        };
        validators: {
            type: string;
            messager: string;
        }[];
        isMultilingualField?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                languages?: undefined;
            };
        };
        formatter: {
            type: string;
            options: {
                trueText: any;
                falseText: any;
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
            };
        };
        validators: {
            type: string;
            messager: string;
        }[];
        isMultilingualField?: undefined;
    } | {
        field: string;
        isMultilingualField: boolean;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                languages: {
                    code: string;
                    name: any;
                }[];
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
            };
        };
        formatter?: undefined;
        validators?: undefined;
    })[];
    data: ApprovalItemEntity[];
    actions: any[];
    actionsCols: {
        title: any;
        field: string;
        width: number;
    }[];
    constructor(message: MessagerService, util: ProcessDeUtil, http: HttpService, uiState: ProcessDesignerUIState, resolver: ComponentFactoryResolver, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    clickOK(): void;
    clickCancel(): void;
    private validator;
    selectChanged(data: any): void;
    deleteRow(): void;
    private getActionsList;
    actionsSelect(): void;
    SelectCancel(): void;
    private actionValidate;
}
export declare class ApprovelItemsConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: any[]): string;
}
