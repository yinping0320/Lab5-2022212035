import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { SessionService } from '@ecp-caf/caf-common';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { BsModalService } from '@farris/ui-modal';
import { BizComponentEntity } from '../../domain/entities/biz-component.entity';
import { MessagerService } from '@farris/ui-messager';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class EditComponentParameterComponent implements OnInit, AfterViewInit {
    private designerState;
    private expr;
    private resolver;
    private injector;
    private sessionSrc;
    private componentService;
    private modalService;
    private message;
    cd: ChangeDetectorRef;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    private defaultProcessComponentIds;
    editState: string;
    closeEmitter: EventEmitter<any>;
    submitEmitter: EventEmitter<any>;
    paramlist: DatagridComponent;
    editFooter: TemplateRef<any>;
    paramColumns: any[];
    location: 'activity' | 'process' | 'autoActivity';
    groupIcon: string;
    executionTimingList: any[];
    canEdit: boolean;
    curComponent: BizComponentEntity;
    constructor(designerState: ProcessDesignerUIState, expr: ExpressionService, resolver: ComponentFactoryResolver, injector: Injector, sessionSrc: SessionService, componentService: CommonComponentUiRTService, modalService: BsModalService, message: MessagerService, cd: ChangeDetectorRef, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    showExprHelp(e: any): void;
    /**
     * 取数构件帮助new
     */
    openComponentSelectorNew(metadataId: string, sessionId: string): void;
    private bindParas;
    private assignParameterValue;
    componentSelect(): void;
    paramAfterEdit: (rowIndex: number, rowData: any, column?: DataColumn) => import("rxjs").Observable<boolean>;
    endCellEdit(): void;
    editOK(): void;
    editCancel(): void;
    validator(): boolean;
}
