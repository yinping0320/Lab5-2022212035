import { OnInit, ComponentFactoryResolver, Injector, ElementRef, AfterViewInit, NgZone, TemplateRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { SessionService } from '@ecp-caf/caf-common';
import { BsModalService } from '@farris/ui-modal';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { Observable } from 'rxjs';
import { RowEditParam } from '@farris/ui-datagrid/lib/types';
import { LookupGridComponent } from '@farris/ui-lookup';
import { ComponentEditService } from './component-edit.service';
import { ComponentEntity, ActualParameter } from './component.entity';
import { ProcessDeUtil } from '../../../../domain/process-de-util';
import { MessagerService } from '@farris/ui-messager';
import { WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class ComponentEditComponent implements OnInit, AfterViewInit {
    private formBuilder;
    private designerState;
    private expr;
    private resolver;
    private injector;
    private sessionSrc;
    private modalService;
    private componentService;
    private ngZone;
    private service;
    private util;
    private message;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    cls: string;
    grid: DatagridComponent;
    lookup: LookupGridComponent;
    footer: TemplateRef<any>;
    closeEmitter: EventEmitter<any>;
    submitEmitter: EventEmitter<any>;
    inputGroup: ElementRef;
    showClearButton: boolean;
    private _component;
    component: ComponentEntity;
    curParameter: ActualParameter;
    columns: ({
        field: string;
        width: number;
        title: any;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
            };
        };
    })[];
    helpFields: {
        idField: string;
        valueField: string;
        textField: string;
    };
    dataUri: string;
    helpId: any;
    su: string;
    helpCols: any[];
    displayType: string;
    title: string;
    value: any;
    cell: any;
    constructor(formBuilder: FormBuilder, designerState: ProcessDesignerUIState, expr: ExpressionService, resolver: ComponentFactoryResolver, injector: Injector, sessionSrc: SessionService, modalService: BsModalService, componentService: CommonComponentUiRTService, ngZone: NgZone, service: ComponentEditService, util: ProcessDeUtil, message: MessagerService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onMouseEnter(event: any): void;
    onMouseLeave(event: any): void;
    private toggleClearIcon;
    clickOK(): void;
    clickCancel(): void;
    private validator;
    beforeEdit: (param: RowEditParam) => Observable<boolean>;
    afterEdit: (rowIndex: number, rowData: any, column?: DataColumn) => Observable<boolean>;
    clear(): void;
    selectComponent(): void;
    private openComponentSelectorNew;
    showExprHelp(e: any): void;
    private getHelpInfo;
    dictPicking: () => Observable<{
        showDialog: boolean;
        data: {
            helpId: any;
        };
    }>;
    dictPicked: (rowData: any) => Observable<boolean>;
}
