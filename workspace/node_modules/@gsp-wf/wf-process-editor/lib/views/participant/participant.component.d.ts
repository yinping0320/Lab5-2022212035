import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { FDropdownDirective } from '@farris/ui-dropdown';
import { MessagerService } from '@farris/ui-messager';
import { BsModalRef, BsModalService } from '@farris/ui-modal';
import { TypeConverter } from '@farris/ide-property-panel';
import { ExpressionService } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { PerformerEditComponent } from '../performer/views/performer-edit/performer-edit.component';
import { ParticipantInfo } from './participant.info';
import { ParticipantUIState } from './participant.uistate';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export declare class ParticipantComponent implements OnInit {
    designerUIState: ProcessDesignerUIState;
    private uistate;
    private resolver;
    private injector;
    private modalService;
    private message;
    private expr;
    private http;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    modalFooter: TemplateRef<any>;
    dropDownEl: FDropdownDirective;
    dropDownE2: FDropdownDirective;
    editFooter: TemplateRef<any>;
    humanPerformerGrid: DatagridComponent;
    potentialOwnerGrid: DatagridComponent;
    editorParams: any;
    value: ParticipantInfo;
    private preAssignStrategy;
    nodeType: 'userActivity' | 'notifyActivity';
    editDialog: BsModalRef;
    compRef: ComponentRef<PerformerEditComponent>;
    isClose: boolean;
    participant: ParticipantInfo;
    editState: string;
    type: string;
    assignStrategyList: {
        value: string;
        name: any;
    }[];
    operatorCollection: {
        text: any;
        value: string;
    }[];
    modalConfig: {
        title: any;
        width: number;
        height: number;
        showButtons: boolean;
    };
    columns: ({
        field: string;
        width: number;
        title: any;
        editor: {
            type: string;
            options: {
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
            };
        };
        formatter?: undefined;
        showTips?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    text: any;
                    value: string;
                }[];
            };
        };
        editor?: undefined;
        showTips?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        showTips: boolean;
        formatter: (v: any, d: any, i: any) => any;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: any;
        showTips: boolean;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
            };
        };
        formatter?: undefined;
    })[];
    constructor(designerUIState: ProcessDesignerUIState, uistate: ParticipantUIState, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, message: MessagerService, expr: ExpressionService, http: HttpService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    ngOnInit(): void;
    clickOK(): void;
    clickCancel(): void;
    assignStrategyChange(data: any): void;
    switchChange(data: boolean): void;
    addPerformer(performerType: string, type: string): void;
    editOK(): void;
    private addUserPerformer;
    private addvariablePerformer;
    private addPositionPerformer;
    private addComponentPerformer;
    private addReportingLinePerformer;
    private addMatrixPerformer;
    private addActivityExecutorPerformer;
    private addOrganizationParticipant;
    editCancel(): void;
    editPerformer(type: string): void;
    removePerformer(type: string): void;
    clearPerformer(type: string): void;
    moveUp(type: string): void;
    moveDown(type: string): void;
    private swapArray;
    removeHumanPerformer(): void;
    removePotentialOwner(): void;
    private getUserPerformerDescription;
    private getVariablePerformerDescription;
    private getPositionPerformerDescription;
    private getComponentPerformerDescription;
    private getReportingLinePerformerDescription;
    private getMatrixPerformerDescription;
    private editConditon;
    private humanPerformerCopyToPotentialOwner;
    private potentialOwnerCopyToHumanPerformer;
    private GetOrganizationType;
    private attributeBoxSize;
}
export declare class ParticipantConverter implements TypeConverter {
    private localePipe;
    constructor(localePipe: WfLocalePipe);
    convertTo(data: ParticipantInfo): string;
}
