import { AssignStrategy } from "../assign-strategy/assign-strategy";
export declare class ParticipantInfo {
    constructor();
    assignStrategy: AssignStrategy;
    humanPerformerList: Array<Participant>;
    potentialOwnerList: Array<Participant>;
    isAllScope: boolean;
}
export declare class Participant {
    id: string;
    type: string;
    condition?: string;
    order?: number;
}
export declare class UserParticipant extends Participant {
    performerId: string;
    performerName: string;
    orgId?: string;
    orgName?: string;
    orgType?: string;
    tag?: string;
}
export declare class VariableParticipant extends UserParticipant {
    name: string;
    varValue: string;
    varType: string;
    relation: string;
}
export declare class PositionParticipant extends UserParticipant {
    positionType: string;
    isRequired?: boolean;
}
export declare class ComponentParticipant extends Participant {
    name: string;
    metadataId: string;
    methodCode: string;
    methodName: string;
    actualParameters: Array<ActualParameter>;
}
export declare class ReportingLineParticipant extends UserParticipant {
    reportingLineDefId: string;
    reportingLineDefName: string;
    refOrgId: string;
    refOrgName: string;
    refUserId: string;
    refEmployeeId: string;
    dimension: string;
    reportingReferObject: string;
}
export declare class MatrixParticipant extends UserParticipant {
    matrixDefId: string;
    matrixDefName: string;
    conditionField1: string;
    conditionFieldText1: string;
    conditionField2: string;
    conditionFieldText2: string;
    conditionField3: string;
    conditionFieldText3: string;
    dataFieldAlias: string;
}
export declare class ActivityExecutorParticipant extends UserParticipant {
    activityDefId: string;
    activityDefName: string;
}
export declare class OrganizationParticipant extends Participant {
    name: string;
    actionScope: ActionScope;
    organizationLevel: OrganizationLevel;
    organizationId: string;
    organizationCode: string;
    organizationName: string;
    includeChildren: boolean;
    parentsUntil: boolean;
    tag: string;
}
export declare enum ActionScope {
    /**
     * 指派
     */
    AssignUser = "AssignUser",
    /**
     * 移交
     */
    Transfer = "Transfer",
    /**
     * 征询
     */
    AddSignFront = "AddSignFront",
    /**
     * 加签
     */
    AddSignBehind = "AddSignBehind",
    /**
     * 知会
     */
    Notify = "Notify"
}
export declare enum OrganizationLevel {
    /**
     * 部门
     */
    DEPARTMENT = "DEPARTMENT",
    /**
     * 单位
     */
    UNIT = "UNIT",
    /**
    * 默认值
    */
    DEFAULT = "DEFAULT",
    VARORGANIZATION = "VARORGANIZATION"
}
export declare class ActualParameter {
    code: string;
    value: string;
    valueText: string;
    tag: string;
    fetchValueMode?: any;
    fetchValueSetting?: any;
}
