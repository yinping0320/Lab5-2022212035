import { OnInit, ElementRef, Injector, ComponentFactoryResolver, EventEmitter, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { ProcessTime } from './model/process-time';
import { ProcessDesignerUIState } from './app/process-designer.uistate';
import { ProcessDesignerViewModel } from './app/process-designer.viewmodel';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDesignerDataService } from './domain/process-designer.dataservice';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { WFFlowElementsViewModel } from './app/wf-flowElements.viewModel';
import { PropertyPanelComponent } from '@farris/ide-property-panel';
import { ProcessInfo } from './model/process-info';
import { RTProcessInfo } from './model/rt-process-info';
import { Observable } from 'rxjs';
import { EventBusService } from './views/shared/event-bus.service';
import { WfEditorUi } from './designer/WfEditorUi';
import { WfLocalePipe } from './i18n/pipe/wf-process-editor-locale.pipe';
export declare class WfProcessEditorComponent implements OnInit {
    uiState: ProcessDesignerUIState;
    private viewModel;
    service: ProcessDesignerDataService;
    private loadService;
    private notify;
    private message;
    private activity;
    private injector;
    private modalService;
    private resolver;
    private eventBus;
    private cdr;
    private localeId;
    private resources;
    private localePipe;
    private flag;
    cls: string;
    private _time;
    time: ProcessTime;
    processInfo: ProcessInfo;
    rtProcessInfo: RTProcessInfo;
    action: 'view' | 'edit' | 'assignView';
    mode: 'general' | 'simplify';
    scene: string;
    procType: "wf" | "whole";
    close: EventEmitter<any>;
    propertyPanel: PropertyPanelComponent;
    tipsTmpl: TemplateRef<any>;
    iframe: ElementRef;
    errorList: any[];
    tabTypeList: {
        id: string;
        type: string;
        title: any;
        iconCls: string;
        iconStyle: string;
    }[];
    contentEl: any;
    verifyContainer: any;
    listclick: any;
    showchange: any;
    panelWidth: number;
    propertyPanelResizable: boolean;
    rightPanelWidth: number;
    clientWidth: number;
    widthAfterResized: number;
    private verifySer;
    procNameTitle: string;
    editorUiContainerER: ElementRef<HTMLDivElement>;
    editorUiContainerVCR: ElementRef<HTMLDivElement>;
    editorUi: WfEditorUi;
    /**
     * 界面是否发生变化标志，修改属性、移动节点等均会将此值设为true
     */
    changedFlag: boolean;
    constructor(uiState: ProcessDesignerUIState, viewModel: ProcessDesignerViewModel, service: ProcessDesignerDataService, loadService: LoadingService, notify: NotifyService, message: MessagerService, activity: WFFlowElementsViewModel, injector: Injector, modalService: BsModalService, resolver: ComponentFactoryResolver, eventBus: EventBusService, cdr: ChangeDetectorRef, localeId: string, resources: any, localePipe: WfLocalePipe);
    showModelButton: boolean;
    ngOnInit(): void;
    createEditorUi(): void;
    addEditorUiListeners(editorUi: WfEditorUi): void;
    /**
     * 添加事件总线监听
     */
    private addEventBusListener;
    private addPropertyChangedHandler;
    /**
     * 更新属性
     */
    private updateChangeProperty;
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @param data
     */
    private bindEntryFormInfo;
    updateStartMode(data: any): void;
    private note;
    private openProcContent;
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @param ffId 流程分类ID
     */
    openNewProcess(ffId: string): void;
    createBpmnModel(bizActivities: any, newProcInfo: any): void;
    openProcess(content: string): void;
    /**
     * 添加graph model监听器，有变化则将changedFlag
     */
    addGraphModelChangedListener(): void;
    private showTip;
    private showVerify;
    private questionOKHandle;
    /**
     * 获取流程上下文
     * @param id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     */
    getProcContent(id: string): Observable<any>;
    private save;
    private release;
    /**
     * 保存流程定义（设计时+运行时）
     */
    private saveHttp;
    showLoading(): void;
    closeLoading(): void;
    private ConvertExecuteForm;
    private formFormat2ExecuteForm;
    private completeStrategyChanged;
    private OtherAssignNodesChanged;
    /**
     * 完成策略调整校验
     */
    private beforeCompleteStrategyChange;
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     */
    private checkModelContent;
    showModeChange(event: any): void;
    saveProc(): void;
    saveAs(): void;
    releaseProc(): void;
    sync(): void;
    procRecord(): void;
    batchSet(): void;
    closeProc(): void;
    viewProcModel(): void;
    /**
     * 左右拖动后事件，event.size.width是左侧面板的宽度
     */
    rzStop(event: any): void;
    createValidationTips(): void;
    clearValidationTips(): void;
    copy(text: any): void;
}
