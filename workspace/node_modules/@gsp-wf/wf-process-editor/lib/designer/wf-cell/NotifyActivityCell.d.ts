import { NodeCell, FarrisPropConfigWithData } from "@edp-pmf/grapheditor";
import { MxGraphNS } from "@edp-pmf/mxgraph-ts";
import { FlowNodeState } from "@edp-pmf/bpmn-model";
import { NotifyActivity, ActionScope } from "@gsp-wf/wf-process-model";
import { WfEditorUi } from "../WfEditorUi";
import { UserParticipant } from "../entity/UserParticipant";
import { PositionParticipant } from "../entity/PositionParticipant";
import { VariablePerformer } from "../entity/VariablePerformer";
import { ComponentParticipant } from "../entity/ComponentParticipant";
import { ReportingLineParticipant } from "../entity/ReportingLineParticipant";
import { ActivityExecutorParticipant } from "../entity/ActivityExecutorParticipant";
import { MatrixParticipant } from "../entity/MatrixParticipant";
import { OrganizationParticipant, ParticipantInfo } from "../entity";
/**
 * 知会活动节点
 */
export declare class NotifyActivityCell extends NodeCell {
    clrTypeId: string;
    name: string;
    nameLanguage: {
        [lang: string]: string;
    };
    static CLR_TYPE_ID: string;
    flowElement: NotifyActivity;
    editorUi: WfEditorUi;
    imgUrls: {
        [FlowNodeState.Default]: string;
        [FlowNodeState.Selected]: string;
    };
    constructor(value?: any, geometry?: MxGraphNS.mxGeometry, style?: string);
    createFlowElement(flowElt?: NotifyActivity): NotifyActivity;
    getFarrisPropConfig(): FarrisPropConfigWithData;
    /**
     * 组织UserActivity的属性值propertyData
     * @param act
     * @param propertyData
     */
    setPropertyData(act: NotifyActivity, propertyData: any, groupList?: any): void;
    getParticipantInfo(notifyActivity: NotifyActivity): ParticipantInfo;
    updateProps(obj: any): void;
    updateParticipant(notifyActivity: NotifyActivity, obj: any): void;
    addUserParticipant(notifyActivity: NotifyActivity, performer: UserParticipant, type: string, scope: ActionScope): void;
    addVariableParticipant(notifyActivity: NotifyActivity, performer: VariablePerformer, type: string, scope: ActionScope): void;
    addPositionParticipant(notifyActivity: NotifyActivity, performer: PositionParticipant, type: string, scope: ActionScope): void;
    addComponentParticipant(notifyActivity: NotifyActivity, component: ComponentParticipant, type: string, scope: ActionScope): void;
    addReportingLineParticipant(notifyActivity: NotifyActivity, participant: ReportingLineParticipant, type: string, scope: ActionScope): void;
    addActivityExecutorParticipant(notifyActivity: NotifyActivity, participant: ActivityExecutorParticipant, type: string, scope: ActionScope): void;
    addMatrixParticipant(notifyActivity: NotifyActivity, participant: MatrixParticipant, type: string, scope: ActionScope): void;
    /**
 *
 * @param userActivity
 * @param participant
 * @param type
 */
    addOrganizationParticipant(notifyActivity: NotifyActivity, participant: OrganizationParticipant, type: string, scope: ActionScope): void;
    updateStartActivityForm(notifyActivity: NotifyActivity, obj: any, terminal: string): void;
    updateNotifySet(notifyActivity: NotifyActivity, obj: any): void;
    /**
     * 更新知会活动扩展属性
     * @param notifyActivity
     * @param obj
     */
    resetExtendProperty(notifyActivity: NotifyActivity, obj: any): void;
    updateMessageNotices(notifyActivity: NotifyActivity, obj: any): void;
}
