import { NodeCell, ElementPropertyConfig, FarrisPropConfigWithData } from "@edp-pmf/grapheditor";
import { MxGraphNS } from "@edp-pmf/mxgraph-ts";
import { BPMNShape, FlowNodeState } from "@edp-pmf/bpmn-model";
import { BizActivity, UserActivity, ConclusionItem, TimeLimitControlInfo, ActionScope } from "@gsp-wf/wf-process-model";
import { WfEditorUi } from "../WfEditorUi";
import { AssignStrategy } from "../entity/AssignStrategy";
import { ActionOrganizationScopeDesign } from "../../views/organization-potential-owner/actionOrganizationScope";
import { ParticipantInfo } from "../entity";
/**
 * 审批活动节点
 */
export declare class UserActivityCell extends NodeCell {
    clrTypeId: string;
    name: string;
    nameLanguage: {
        [lang: string]: string;
    };
    static CLR_TYPE_ID: string;
    flowElement: UserActivity;
    editorUi: WfEditorUi;
    imgUrls: {
        [FlowNodeState.Default]: string;
        [FlowNodeState.Selected]: string;
    };
    bizActivity: BizActivity;
    constructor(value?: any, geometry?: MxGraphNS.mxGeometry, style?: string);
    createFlowElement(flowElt?: UserActivity): UserActivity;
    createDiagramElement(): BPMNShape;
    getFarrisPropConfig(): FarrisPropConfigWithData;
    getFarrisPropConfigByIsOperation(isOperation?: boolean): {
        propertyConfig: ElementPropertyConfig[];
        propertyData: any;
    };
    /**
     * 判断是否存在反向流程动作
     * @param conclusions
     */
    isBackConclusionExist(conclusions: ConclusionItem[]): boolean;
    /**
     * 组织UserActivity的属性值propertyData
     * @param act
     * @param propertyData
     */
    setPropertyData(act: UserActivity, propertyData: any, groupList: any): void;
    getParticipantInfo(userActivity: UserActivity): ParticipantInfo;
    getParticipantOptions(userActivity: UserActivity): any;
    getAssignStrategy(userActivity: UserActivity): AssignStrategy;
    getSignFrontInfo(userActivity: UserActivity): ActionOrganizationScopeDesign;
    getSignBehindInfo(userActivity: UserActivity): ActionOrganizationScopeDesign;
    getTransferScopeInfo(userActivity: UserActivity): ActionOrganizationScopeDesign;
    getNotifyAble(userActivity: UserActivity): ActionOrganizationScopeDesign;
    getTimeLimitInfo(userActivity: UserActivity): TimeLimitControlInfo;
    getUrgeHandleRule(userActivity: UserActivity): any;
    getCheckConditions(userActivity: UserActivity): Array<any>;
    updateProps(obj: any): void;
    updatePropsByIsOperation(obj: any, isOperation?: boolean): void;
    /**
     * 修改参与者
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    updateParticipant(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    checkOtherAssignNodes(userActivity: UserActivity, performerInfo: ParticipantInfo): void;
    /**
     * 添加用户参与者
     * @param userActivity
     * @param performer
     * @param type
     */
    addUserParticipant(userActivity: UserActivity, performer: any, type: string, scope: ActionScope): void;
    /**
     * 添加变量参与者
     * @param userActivity
     * @param performer
     * @param type
     */
    addVariableParticipant(userActivity: UserActivity, performer: any, type: string, scope: ActionScope): void;
    /**
     * 添加岗位参与者
     * @param userActivity
     * @param performer
     * @param type
     */
    addPositionParticipant(userActivity: UserActivity, performer: any, type: string, scope: ActionScope): void;
    /**
     * 添加构件参与者
     * @param userActivity
     * @param component
     * @param type
     */
    addComponentParticipant(userActivity: UserActivity, component: any, type: string, scope: ActionScope): void;
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    addReportingLineParticipant(userActivity: UserActivity, participant: any, type: string, scope: ActionScope): void;
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    addActivityExecutorParticipant(userActivity: UserActivity, participant: any, type: string, scope: ActionScope): void;
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    addMatrixParticipant(userActivity: UserActivity, participant: any, type: string, scope: ActionScope): void;
    /**
     *
     * @param userActivity
     * @param participant
     * @param type
     */
    addOrganizationParticipant(userActivity: UserActivity, participant: any, type: string, scope: ActionScope): void;
    /**
     * 修改参与者选项
     * @param userActivity
     * @param obj
     */
    updateParticipantOptions(userActivity: UserActivity, obj: any): void;
    /**
     * 修改完成策略属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    resetExecuteWorkItemMode(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    resetDisplayTerminal(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    /**
     * 更新会签规则属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    resetSignRules(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    /**
     * 更新自定义项属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    resetApprovalItems(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    /**
     * 更新审批活动表单定义属性
     * @param userActivity
     * @param obj
     * @param terminal
     */
    resetExecuteForm(userActivity: UserActivity, obj: any, terminal: string): void;
    /**
     * 更新是否允许跳转属性
     * @param graph
     * @param userActivity
     * @param obj
     * @param isOperation
     */
    resetSelectTargetAble(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    resetJumpScope(userActivity: UserActivity, obj: any): void;
    resetBackWardRule(userActivity: UserActivity, obj: any): void;
    resetMultiInstanceLoopCharacteristics(userActivity: UserActivity, obj: any): void;
    /**
     * 更新活动节点标题
     * @param userActivity
     * @param obj
     */
    modifyTitleExpression(userActivity: UserActivity, obj: any): void;
    resetTools(userActivity: UserActivity, obj: any): void;
    updateSignFrontSet(userActivity: UserActivity, obj: any): void;
    updateSignBehindsSet(userActivity: UserActivity, obj: any): void;
    updateNotifySet(userActivity: UserActivity, obj: any): void;
    updateTransferScope(userActivity: UserActivity, obj: any): void;
    updateTimeLimitControl(userActivity: UserActivity, obj: any): void;
    updateAnonymousSet(userActivity: UserActivity, obj: any): void;
    updateCustomizeActions(userActivity: UserActivity, obj: any): void;
    updateVariableSettings(userActivity: UserActivity, obj: any): void;
    updateImageSettings(userActivity: UserActivity, obj: any): void;
    updateCheckConditions(userActivity: UserActivity, obj: any, isOperation?: boolean): void;
    updateOtherAssignNodes(userActivity: UserActivity, obj: any): void;
    updateOtherAssignActivities(userActivity: UserActivity, obj: any): void;
    updateMessageNotices(userActivity: UserActivity, obj: any): void;
    updateApprovalPivotConfig(userActivity: UserActivity, obj: any): void;
    updateUrgeHandleRule(userActivity: UserActivity, obj: any): void;
    /**
     * 删除节点或参与者时，对应删除HumanResourceRoles
     * @param bpmnModel
     * @param ids
     */
    removeHumanResourceRoles(ids: string[]): void;
    /**
     * 更新审批活动扩展属性
     * @param userActivity
     * @param obj
     */
    resetExtendProperty(userActivity: UserActivity, obj: any): void;
}
