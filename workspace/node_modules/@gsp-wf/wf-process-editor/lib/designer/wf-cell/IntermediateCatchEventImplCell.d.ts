import { NodeCell, FarrisPropConfigWithData } from "@edp-pmf/grapheditor";
import { EventDefinition, BPMNShape } from "@edp-pmf/bpmn-model";
import { MxGraphNS } from "@edp-pmf/mxgraph-ts";
import { IntermediateCatchEventImpl } from "@gsp-wf/wf-process-model";
import { FlowNodeState } from "@edp-pmf/bpmn-model";
/**
 * 信号捕获活动节点
 */
export declare class IntermediateCatchEventImplCell extends NodeCell {
    clrTypeId: string;
    name: string;
    nameLanguage: {
        [lang: string]: string;
    };
    static CLR_TYPE_ID: string;
    flowElement: IntermediateCatchEventImpl;
    imgUrls: {
        [FlowNodeState.Default]: string;
        [FlowNodeState.Selected]: string;
    };
    constructor(value?: any, geometry?: MxGraphNS.mxGeometry, style?: string);
    createFlowElement(flowElt?: IntermediateCatchEventImpl): IntermediateCatchEventImpl;
    bindBpmnModel(flowElt?: IntermediateCatchEventImpl, diagElt?: BPMNShape): void;
    addSignals(catchEvent: IntermediateCatchEventImpl): void;
    getFarrisPropConfig(): FarrisPropConfigWithData;
    /**
     * 判断是否存在反向事件
     * @param
     */
    isBackEventExist(events: EventDefinition[]): boolean;
    updateProps(obj: any): void;
    updateEventDefinitions(catchEvent: IntermediateCatchEventImpl, obj: any): void;
    updateBackWardRule(catchEvent: IntermediateCatchEventImpl, obj: any): void;
    updateVariableSettings(catchEvent: IntermediateCatchEventImpl, obj: any): void;
    removeSignals(catchEvent: IntermediateCatchEventImpl): void;
}
