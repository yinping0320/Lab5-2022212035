import { KeyMap } from '@farris/ide-property-panel';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { VarEntity } from '@gsp-svc/expression';
import { GSPCommonModel } from '@gsp-bef/gsp-cm-metadata';
import { HttpService } from '@ecp-caf/caf-common';
import { Observable } from 'rxjs';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
import { ProcessTime } from '../model/process-time';
import { BpmnModel } from '@edp-pmf/bpmn-model';
export declare class ProcessDesignerUIState {
    private http;
    private localePipe;
    scene: string;
    rootPath: string;
    constructor(http: HttpService, localePipe: WfLocalePipe);
    flowFormInfo: FlowFormInfo;
    content: string;
    propertyConfig: any[];
    propertyData: any;
    POST_MESSAGE_TARGET: string;
    BE: GSPCommonModel;
    schemas: any[];
    counterSignVariables: any[];
    approvalItems: any[];
    userActList: any[];
    allActList: any[];
    MessageActList: any[];
    NotifyActKist: any[];
    SubAndCatchActList: any[];
    bizActivityId: string;
    enableAdminOrgAut: boolean;
    enableFlowFormAut: boolean;
    procDefId: string;
    time: ProcessTime;
    isAdministratorConfig: boolean;
    administrator: any;
    startMode: string;
    bpmnModel: BpmnModel;
    assignIterator: KeyMap[];
    completeIterator: KeyMap[];
    completeIterator4Claim: KeyMap[];
    boolIterator: KeyMap[];
    noJump4Sign: KeyMap[];
    procInstContext: VarEntity[];
    urgeContext: VarEntity[];
    /**
     * 流程参数上下文
     */
    formalParameterContext: VarEntity[];
    /**
     * 参与者上下文
     */
    participantContext: VarEntity[];
    /**
   * 子活动上下文
   */
    subActivityContext: VarEntity[];
    /**
   * 子流程元素上下文
   */
    subProcessElementContext: VarEntity[];
    /**
     * 多实例启用条件上下文
     */
    multiCounterSignVariables: VarEntity[];
    /**
     * 活动构件参数上下文
     */
    activityComponentContext: VarEntity[];
    processVariableContext: VarEntity[];
    private processVariables;
    ProcessVariables: any[];
    /**
     * 汇报级次
     */
    dimensions: {
        value: string;
        text: any;
    }[];
    /**
     * 启动方式
     */
    startModeIterator: KeyMap[];
    /**
     * 显示终端
     */
    displayTerminal: KeyMap[];
    /**
     * 消息渠道列表
     */
    messageChannels: any[];
    orgTypeCollection: {
        value: any;
        text: any;
    }[];
    variableContextName(key: string): string;
    ranksName(value: string): any;
    getMessageChannels(): void;
    getAdministratorInfo(): void;
    getEnableAdminOrgAut(): Observable<any>;
    getEnableFlowFormAut(): Observable<any>;
    private getEnableProcessDesignerDataAut;
    private getCurrentUser;
    private getAdministrator;
    getReleaseConfig(): Observable<any>;
    private getAdministratorConfig;
    private getSysOrgById;
    private getSysOrgWithAllSubsById;
    private getCurUserInfo;
    getOrgConfig(): Observable<any>;
    /**
     * 获取当前用户信息
     */
    getUserInfo(): Observable<any>;
    /**
     * 流程审核：新增
     */
    createData(): Observable<any>;
    /**
     * 流程审核：保存
     */
    releaseSave(data: any): Observable<any>;
    private setProcessVariableContext;
    getHelpMetaData(helpId: string, su: string): Observable<any>;
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     */
    private getTopWindow;
    initUIState(): void;
    /**
     * 获取所有审批节点信息
     * @param data
     */
    getUserActList(data: any[]): void;
    /**
     * 获取所有结束节点信息
     * @param data
     */
    getEndEventList(data: any[]): void;
    /**
     * 获取所有知会活动节点信息
     * @param data
     */
    getNotifyEventList(data: any[]): void;
    /**
     * 获取所有消息节点信息
     * @param data
     */
    getMessageEventList(data: any[]): void;
    /**
     * @param data
     */
    getSubAndCatchEventsList(data: any[]): void;
    /**
     * 获取当前流程启动方式
     * @param data
     */
    getStartMode(data: any): void;
    /**
     * 添加上下文变量
     */
    addContext(context: any[]): any[];
}
