import { Injector, ComponentFactoryResolver } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ProcessDesignerDataService } from '../domain/process-designer.dataservice';
import { BpmnProcessViewModel } from './bpmn-process.viewmodel';
import { WFFlowElementsViewModel } from './wf-flowElements.viewModel';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { Observable } from 'rxjs';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDeUtil } from '../domain/process-de-util';
import { SubProcessViewModel } from './sub-process.viewmodel';
import { AutoActivityAdapter } from './auto-activity.adapter';
import { CatchEventAdapter } from './catch-event.adapter';
import { MessageActivityAdapter } from './message-activity.adapter';
import { AuditEvent } from '../domain/entities/audit-processDef-info';
import { RTProcessInfo } from '../model/rt-process-info';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessInfo } from '../model/process-info';
import { NotifyActivityAdapter } from './notify-activity.adapter';
import { FlowFormEntity } from '../domain/entities/flowform.entity';
import { AifCreationBillActivityAdapter } from './aif-creation-bill-activity.adapter';
import { EventBusService } from '../views/shared/event-bus.service';
import { BillNodeActivityAdapter } from './bill-node-activity.adapter';
import { SequenceActivityAdapter } from './sequecne-activity.adapter';
import { BpmnModel } from '@edp-pmf/bpmn-model';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
export declare class ProcessDesignerViewModel {
    uiState: ProcessDesignerUIState;
    private service;
    private util;
    private notify;
    private message;
    private process;
    private activity;
    private subProcess;
    private autoActAdapter;
    private catchEventAdapter;
    private messageActAdapter;
    private notifyActAdapter;
    private creationActAdapter;
    private billNodeActivityAdapter;
    private sequenceActivityAdapter;
    private modalService;
    private injector;
    private resolver;
    private http;
    private eventBus;
    private localePipe;
    constructor(uiState: ProcessDesignerUIState, service: ProcessDesignerDataService, util: ProcessDeUtil, notify: NotifyService, message: MessagerService, process: BpmnProcessViewModel, activity: WFFlowElementsViewModel, subProcess: SubProcessViewModel, autoActAdapter: AutoActivityAdapter, catchEventAdapter: CatchEventAdapter, messageActAdapter: MessageActivityAdapter, notifyActAdapter: NotifyActivityAdapter, creationActAdapter: AifCreationBillActivityAdapter, billNodeActivityAdapter: BillNodeActivityAdapter, sequenceActivityAdapter: SequenceActivityAdapter, modalService: BsModalService, injector: Injector, resolver: ComponentFactoryResolver, http: HttpService, eventBus: EventBusService, localePipe: WfLocalePipe);
    initProcessProperty(obj: any): void;
    setProperty(obj: any): void;
    updateSchemas(): Observable<any>;
    getFlowFormInfoById(formId: string): Observable<FlowFormInfo>;
    getFormFormatsByBizCategory(): Observable<any>;
    /**
     * 保存流程
     * @param content 流程上下文
     */
    saveProcess(content: string, processInfo: ProcessInfo, state: number): Observable<any>;
    /**
     * 发布流程
     * @param content 流程上下文
     */
    deployProcess(content: string): Observable<any>;
    /**
     * 带审核的发布流程
     * @param content 流程上下文
     */
    releaseProcess(content: string, version: any): void;
    auditProcessDef(auditId: AuditEvent, success: boolean, key: string): void;
    /**
     * 保存运行时流程
     * @param content 流程上下文
     */
    saveRTProcess(content: string, procDefId: string): Observable<any>;
    saveAsProcess(process: BpmnModel, processInfo: ProcessInfo): void;
    /**
     * 同步设计器时流程定义
     */
    syncDtProcess(content: string, rtProcessInfo: RTProcessInfo, showTip?: boolean): void;
    beforeCompleteStrategyChange(data: any, processInfo: RTProcessInfo): Observable<boolean>;
    getProcessCategory(procCategoryId: string): Observable<FlowFormEntity>;
    private setFormParamCxt;
    copy(ResourceKeys: any, data: any): void;
    batchSet(ResourceKeys: any, data: any): void;
    getProcDefsByKey(key: string): Observable<any>;
    checkExpressionsByPayload(bizDefKey: string, schema: any): Observable<any>;
    getBeMappingByBizDefKey(bizDefKey: string): Observable<any>;
}
