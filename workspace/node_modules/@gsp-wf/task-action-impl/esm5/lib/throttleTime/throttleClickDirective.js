/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
/**
 * 点击节流器：避免连续点击
 */
var ThrottleClickDirective = /** @class */ (function () {
    function ThrottleClickDirective() {
        // 一定的时间内只执行第一个事件
        this.THROTTLE_TIME = 2000;
        this.subject = new Subject();
        // 事件方法
        this.throttleClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ThrottleClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var result = this.subject.pipe(throttleTime(this.THROTTLE_TIME));
        this.click = result.subscribe(function (e) {
            _this.throttleClick.emit(e);
        });
    };
    /**
     * @return {?}
     */
    ThrottleClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.click.unsubscribe();
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    ThrottleClickDirective.prototype.onClick = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        this.subject.next(evt);
    };
    ThrottleClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[directive-throttle]'
                },] }
    ];
    /** @nocollapse */
    ThrottleClickDirective.ctorParameters = function () { return []; };
    ThrottleClickDirective.propDecorators = {
        throttleClick: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return ThrottleClickDirective;
}());
export { ThrottleClickDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.THROTTLE_TIME;
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.click;
    /** @type {?} */
    ThrottleClickDirective.prototype.throttleClick;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3R0bGVDbGlja0RpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2YvdGFzay1hY3Rpb24taW1wbC8iLCJzb3VyY2VzIjpbImxpYi90aHJvdHRsZVRpbWUvdGhyb3R0bGVDbGlja0RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFVLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFJOUM7SUFXRTs7UUFOUSxrQkFBYSxHQUFXLElBQUksQ0FBQztRQUM3QixZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQWMsQ0FBQzs7UUFHbEMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTdCLENBQUM7Ozs7SUFFakIseUNBQVE7OztJQUFSO1FBQUEsaUJBUUM7O1lBUE8sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUM5QixZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUNqQztRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFBLENBQUM7WUFDN0IsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDNUIsQ0FBQyxDQUFDLENBQUE7SUFFSixDQUFDOzs7O0lBRUQsNENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUdELHdDQUFPOzs7O0lBRFAsVUFDUSxHQUFlO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dCQTlCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtpQkFDakM7Ozs7O2dDQU9FLE1BQU07MEJBa0JOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBSW5DLDZCQUFDO0NBQUEsQUEvQkQsSUErQkM7U0E1Qlksc0JBQXNCOzs7Ozs7SUFFakMsK0NBQXFDOzs7OztJQUNyQyx5Q0FBNEM7Ozs7O0lBQzVDLHVDQUE0Qjs7SUFFNUIsK0NBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgT25Jbml0LCBPdXRwdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG4vKipcclxuICog54K55Ye76IqC5rWB5Zmo77ya6YG/5YWN6L+e57ut54K55Ye7XHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tkaXJlY3RpdmUtdGhyb3R0bGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGhyb3R0bGVDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAvLyDkuIDlrprnmoTml7bpl7TlhoXlj6rmiafooYznrKzkuIDkuKrkuovku7ZcclxuICBwcml2YXRlIFRIUk9UVExFX1RJTUU6IG51bWJlciA9IDIwMDA7XHJcbiAgcHJpdmF0ZSBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8TW91c2VFdmVudD4oKTtcclxuICBwcml2YXRlIGNsaWNrOiBTdWJzY3JpcHRpb247XHJcbiAgLy8g5LqL5Lu25pa55rOVXHJcbiAgQE91dHB1dCgpIHRocm90dGxlQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zdWJqZWN0LnBpcGUoXHJcbiAgICAgIHRocm90dGxlVGltZSh0aGlzLlRIUk9UVExFX1RJTUUpXHJcbiAgICApO1xyXG4gICAgdGhpcy5jbGljayA9IHJlc3VsdC5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgIHRoaXMudGhyb3R0bGVDbGljay5lbWl0KGUpXHJcbiAgICB9KVxyXG5cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5jbGljay51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gIG9uQ2xpY2soZXZ0OiBNb3VzZUV2ZW50KSB7XHJcbiAgICB0aGlzLnN1YmplY3QubmV4dChldnQpO1xyXG4gIH1cclxufSJdfQ==