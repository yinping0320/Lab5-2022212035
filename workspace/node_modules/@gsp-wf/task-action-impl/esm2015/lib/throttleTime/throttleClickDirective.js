/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
/**
 * 点击节流器：避免连续点击
 */
export class ThrottleClickDirective {
    constructor() {
        // 一定的时间内只执行第一个事件
        this.THROTTLE_TIME = 2000;
        this.subject = new Subject();
        // 事件方法
        this.throttleClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const result = this.subject.pipe(throttleTime(this.THROTTLE_TIME));
        this.click = result.subscribe(e => {
            this.throttleClick.emit(e);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.click.unsubscribe();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        this.subject.next(evt);
    }
}
ThrottleClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[directive-throttle]'
            },] }
];
/** @nocollapse */
ThrottleClickDirective.ctorParameters = () => [];
ThrottleClickDirective.propDecorators = {
    throttleClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.THROTTLE_TIME;
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.click;
    /** @type {?} */
    ThrottleClickDirective.prototype.throttleClick;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3R0bGVDbGlja0RpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2YvdGFzay1hY3Rpb24taW1wbC8iLCJzb3VyY2VzIjpbImxpYi90aHJvdHRsZVRpbWUvdGhyb3R0bGVDbGlja0RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFVLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFPOUMsTUFBTSxPQUFPLHNCQUFzQjtJQVFqQzs7UUFOUSxrQkFBYSxHQUFXLElBQUksQ0FBQztRQUM3QixZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQWMsQ0FBQzs7UUFHbEMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTdCLENBQUM7Ozs7SUFFakIsUUFBUTs7Y0FDQSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQzlCLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQ2pDO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzVCLENBQUMsQ0FBQyxDQUFBO0lBRUosQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBR0QsT0FBTyxDQUFDLEdBQWU7UUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsQ0FBQzs7O1lBOUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2FBQ2pDOzs7Ozs0QkFPRSxNQUFNO3NCQWtCTixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0lBdEJqQywrQ0FBcUM7Ozs7O0lBQ3JDLHlDQUE0Qzs7Ozs7SUFDNUMsdUNBQTRCOztJQUU1QiwrQ0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBPbkluaXQsIE91dHB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbi8qKlxyXG4gKiDngrnlh7voioLmtYHlmajvvJrpgb/lhY3ov57nu63ngrnlh7tcclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2RpcmVjdGl2ZS10aHJvdHRsZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaHJvdHRsZUNsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIC8vIOS4gOWumueahOaXtumXtOWGheWPquaJp+ihjOesrOS4gOS4quS6i+S7tlxyXG4gIHByaXZhdGUgVEhST1RUTEVfVElNRTogbnVtYmVyID0gMjAwMDtcclxuICBwcml2YXRlIHN1YmplY3QgPSBuZXcgU3ViamVjdDxNb3VzZUV2ZW50PigpO1xyXG4gIHByaXZhdGUgY2xpY2s6IFN1YnNjcmlwdGlvbjtcclxuICAvLyDkuovku7bmlrnms5VcclxuICBAT3V0cHV0KCkgdGhyb3R0bGVDbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnN1YmplY3QucGlwZShcclxuICAgICAgdGhyb3R0bGVUaW1lKHRoaXMuVEhST1RUTEVfVElNRSlcclxuICAgICk7XHJcbiAgICB0aGlzLmNsaWNrID0gcmVzdWx0LnN1YnNjcmliZShlID0+IHtcclxuICAgICAgdGhpcy50aHJvdHRsZUNsaWNrLmVtaXQoZSlcclxuICAgIH0pXHJcblxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmNsaWNrLnVuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgb25DbGljayhldnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIHRoaXMuc3ViamVjdC5uZXh0KGV2dCk7XHJcbiAgfVxyXG59Il19