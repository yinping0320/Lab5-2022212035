import { HttpService } from '@ecp-caf/caf-common';
import { ActionOrigin } from '@gsp-wf/task-impl-api';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TaskExecuteComponent, WfTaskHandlerModule } from '@gsp-wf/wf-task-handler';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { Injectable, Injector, Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, Input, Output, EventEmitter, NgZone, Directive, HostListener, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
import { MessagerService, MessagerModule } from '@farris/ui-messager';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskActionImplService {
    /**
     * @param {?} injector
     * @param {?} http
     */
    constructor(injector, http) {
        this.injector = injector;
        this.http = http;
    }
    /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    getTaskCenterConfigByCode(code, ownerType, ownerId) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/code?code=${code}`;
        ownerType && (url += `&ownerType=${ownerType}`);
        ownerId && (url += `&ownerId=${ownerId}`);
        return this.http.get(url);
    }
    /**
     * 添加关注
     * @param {?} sourceId sourceId
     * @return {?}
     */
    addFocus(sourceId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/focus?sourceId=${sourceId}`;
        return this.http.post(url, '');
    }
    /**
     * 移除关注
     * @param {?} processInstanceId 流程实例id
     * @return {?}
     */
    removeFocus(processInstanceId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/focus?processInstanceId=${processInstanceId}`;
        return this.http.delete(url, '');
    }
    /**
     * 是否关注了该任务
     * @param {?} processInstanceId 流程实例id
     * @return {?}
     */
    ifFocused(processInstanceId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/focus/?processInstanceId=${processInstanceId}`;
        return this.http.get(url);
    }
}
TaskActionImplService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskActionImplService.ctorParameters = () => [
    { type: Injector },
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskActionImplComponent {
    // 注意：修改构造方法需要重新打包task-main和task form
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loadingService
     * @param {?} msgService
     * @param {?} taskService
     */
    constructor(injector, cfr, loadingService, msgService, taskService) {
        this.injector = injector;
        this.cfr = cfr;
        this.loadingService = loadingService;
        this.msgService = msgService;
        this.taskService = taskService;
        this.showButtons = true; //是否展示提交按钮。任务办理界面展示，任务列表不展示
        //是否展示提交按钮。任务办理界面展示，任务列表不展示
        this.batch = false;
        // 来源，从哪打开的
        this.submited = new EventEmitter();
        this.actionCode = new EventEmitter();
        this.actionCodeMap = new Map();
        this.index = 0;
        this.submitDisable = false; // 提交按钮是否禁用
        // 提交按钮是否禁用
        this.ifFocused = false; // 是否关注了此任务
        // 是否关注了此任务
        this.focus = this.i18nService("focus"); //关注此流程
        //关注此流程
        this.ifShowFocus = true; // 是否启用我的关注功能
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @param {?} iframe
     * @return {?}
     */
    set iframe(iframe) {
        this._iframe = iframe;
        if (this.iframe && this.componentRef) {
            this.componentRef.instance.iframe = this.iframe;
        }
    }
    /**
     * @return {?}
     */
    get iframe() {
        return this._iframe;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //表单触发预解析，重新加载组件
        ((/** @type {?} */ (window))).gspWfEventService = ((/** @type {?} */ (window))).gspWfEventService || {};
        ((/** @type {?} */ (window))).gspWfEventService.simulate = (func) => {
            this.ngZone.run(() => {
                this.actionSelect(this.actions[0], 0).subscribe(() => func && typeof func === 'function' && func());
            });
        };
        // 是否启用我的关注功能
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getTaskCenterConfigByCode("If_Show_My_Focus", 'all', '*').subscribe(re => {
            load.close();
            re && re.currentValue === 'false' && (this.ifShowFocus = false);
            // 是否关注了该任务(从详情打开)
            if (this.ifShowFocus && this.task && this.showButtons) {
                /** @type {?} */
                const load = this.loadingService.show();
                this.taskService.ifFocused(this.task.processInstanceId).subscribe(re => {
                    load.close();
                    this.ifFocused = re && re.length ? true : false;
                }, () => {
                    load.close();
                });
            }
        }, () => {
            load.close();
        });
    }
    /**
     * 选中动作按钮
     * @param {?} action
     * @param {?=} index
     * @return {?}
     */
    actionSelect(action, index) {
        /** @type {?} */
        let subject = new Subject();
        this.selectAction = action;
        if (index) {
            this.index = index;
        }
        /** @type {?} */
        let cmpFactory;
        if (action.typeId === 'wf') {
            cmpFactory = this.cfr.resolveComponentFactory(TaskExecuteComponent);
            this.loadComponentFactory(cmpFactory);
            setTimeout(() => {
                subject.next({ result: true });
            }, 100);
        }
        else {
            System.import(action.impl + '?v=' + new Date().getTime().toString()).then((moduleFactories) => {
                /** @type {?} */
                const moduleFactory = Object.values(moduleFactories)[0];
                /** @type {?} */
                const moduleRef = moduleFactory.create(this.injector);
                cmpFactory = moduleRef.instance.getActionComponentFactory(action);
                this.loadComponentFactory(cmpFactory);
                subject.next({ result: true });
            });
        }
        return subject.asObservable();
    }
    /**
     * 动态加载审批组件
     * @private
     * @param {?} cmpFactory
     * @return {?}
     */
    loadComponentFactory(cmpFactory) {
        /** @type {?} */
        let comment;
        if (this.componentRef && this.componentRef.instance) {
            comment = ((/** @type {?} */ (this.componentRef.instance))).comment;
        }
        this.container.clear();
        this.componentRef = this.container.createComponent(cmpFactory, 0, this.injector);
        this.componentRef.instance.origin = this.showButtons ? ActionOrigin.TaskForm : ActionOrigin.TaskCenter;
        if (this.task && this.componentRef.instance.setTask) {
            this.componentRef.instance.setTask(this.task);
        }
        if (this.componentRef.instance.setAction) {
            this.componentRef.instance.setAction(this.selectAction);
        }
        if (this.componentRef.instance.dialogHeight) {
            this.dialogHeight = this.componentRef.instance.dialogHeight;
        }
        if (this.componentRef.instance.dialogWidth) {
            this.dialogWidth = this.componentRef.instance.dialogWidth;
        }
        // 暂存wf的审批意见
        ((/** @type {?} */ (this.componentRef.instance))).wfCacheComment = comment;
        this.container.insert(this.componentRef.hostView);
    }
    /**
     * 点击提交
     * @return {?}
     */
    submit() {
        //表单前事件
        if (this.showButtons && window['taskCenterBeforeLoad']) {
            this.submitDisable = true;
            /** @type {?} */
            const context = {
                task: this.task,
                action: this.selectAction
            };
            window['taskCenterBeforeLoad'](context).then(re => {
                this.submitDisable = false;
                if (re && re.result == true) {
                    this.showConfirmDialog();
                }
            }, error => {
                this.submitDisable = false;
                console.error(error);
            });
        }
        else {
            this.showConfirmDialog();
        }
    }
    /**
     * 是否提交前确认
     * @private
     * @return {?}
     */
    showConfirmDialog() {
        this.taskService.getTaskCenterConfigByCode('Is_Confirm_Commit').subscribe((config) => {
            if (config.currentValue === 'true') {
                this.msgService.question(this.i18nService("confirm") + this.selectAction.name + '？', () => {
                    this.executeSubmit();
                });
            }
            else {
                this.executeSubmit();
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    executeSubmit() {
        this.submitDisable = true;
        if (this.selectAction.preEvents && this.selectAction.preEvents.length > 0
            && this.selectAction.preEvents.filter(e => !e.batch).length > 0) {
            /** @type {?} */
            let taskComment;
            /** @type {?} */
            const action = (/** @type {?} */ (this.selectAction));
            if (action.typeId === 'wf') {
                // 取意见框里的意见存放在taskComment里
                taskComment = ((/** @type {?} */ (this.componentRef.instance))).comment;
            }
            this.executeEvents([...this.selectAction.preEvents.filter(e => !e.batch)], () => {
                this.confirmSubmit(taskComment);
            }, taskComment);
        }
        else {
            this.confirmSubmit();
        }
    }
    /**
     * @private
     * @param {?=} taskComment
     * @return {?}
     */
    confirmSubmit(taskComment) {
        /** @type {?} */
        const load = this.loadingService.show();
        this.handleSubmit().subscribe((re) => {
            if (re) {
                load.close();
                if (re.result) {
                    if (this.selectAction && this.selectAction.postEvents.length > 0
                        && this.selectAction.postEvents.filter(e => !e.batch).length > 0) {
                        this.executeEvents([...this.selectAction.postEvents.filter(e => !e.batch)], () => {
                            this.submited.emit(re);
                            setTimeout(() => {
                                this.submitDisable = false;
                            }, 2000);
                        }, taskComment);
                    }
                    else {
                        this.submited.emit(re);
                        setTimeout(() => {
                            this.submitDisable = false;
                        }, 2000);
                    }
                }
                else {
                    this.submitDisable = false;
                }
            }
            this.actionCodeMap.set('isTransfer', this.selectAction.code === 'Transfer');
            this.actionCodeMap.set('isAddSignFront', this.selectAction.code === 'AddSignFront');
            this.actionCodeMap.set('isUnClaim', this.selectAction.code === 'Unclaim');
            this.actionCodeMap.set('isComment', this.selectAction.code === 'Comment');
            this.actionCodeMap.set('isClaim', this.selectAction.code === 'Claim');
            this.actionCode.emit(this.actionCodeMap);
        });
    }
    /**
     * @return {?}
     */
    handleSubmit() {
        return this.componentRef.instance.submit();
    }
    /**
     * @param {?} tasks
     * @return {?}
     */
    batchHandleSubmit(tasks) {
        return this.componentRef.instance.batchSubmit(tasks);
    }
    /**
     * @private
     * @param {?} events
     * @param {?} handler
     * @param {?=} taskComment
     * @return {?}
     */
    executeEvents(events, handler, taskComment) {
        if (events && events.length > 0) {
            /** @type {?} */
            const event = events.shift();
            /** @type {?} */
            const url = event.eventImpl.split('#')[0];
            /** @type {?} */
            const func = event.eventImpl.split('#')[1];
            System.import(url + '?v=' + new Date().getTime().toString())
                .then((moduleFactories) => {
                /** @type {?} */
                const moduleFactory = Object.values(moduleFactories)[0];
                /** @type {?} */
                const moduleRef = moduleFactory.create(this.injector);
                /** @type {?} */
                const context = {
                    task: this.task,
                    action: this.selectAction,
                    origin: 'TaskForm',
                    formIframe: this.iframe,
                    comment: taskComment,
                };
                moduleRef.instance[func].apply(moduleRef.instance, [context]).subscribe((re) => {
                    // 兼容旧的布尔类型参数
                    if (typeof re === 'boolean') {
                        if (re) {
                            this.executeEvents(events, handler, taskComment);
                        }
                        else {
                            this.submitDisable = false;
                        }
                    }
                    else {
                        if (re.result) {
                            if (re.comment) {
                                taskComment = re.comment;
                                // 取到的前事件意见包含在taskComment里
                            }
                            this.executeEvents(events, handler, taskComment);
                        }
                        else {
                            this.submitDisable = false;
                        }
                    }
                });
            });
        }
        else {
            ((/** @type {?} */ (this.componentRef.instance))).comment = taskComment;
            handler();
        }
    }
    /**
     * 点击添加/取消关注
     * @return {?}
     */
    focusTask() {
        /** @type {?} */
        const load = this.loadingService.show();
        if (this.ifFocused) {
            this.taskService.addFocus(this.task.sourceId).subscribe(() => {
                load.close();
            }, () => {
                load.close();
            });
        }
        else {
            this.taskService.removeFocus(this.task.processInstanceId).subscribe(() => {
                load.close();
            }, () => {
                load.close();
            });
        }
    }
    /**
     * 国际化
     * @param {?} code
     * @return {?}
     */
    i18nService(code) {
        /** @type {?} */
        var result;
        /** @type {?} */
        const supportLanguage = ["zh-CHS", "zh-CHT", "en"];
        /** @type {?} */
        const curLanguage = localStorage.getItem("languageCode");
        /** @type {?} */
        const translate = {
            "zh-CHS": {
                focus: "关注此流程",
                focused: "已关注此流程",
                confirm: "确认"
            },
            "zh-CHT": {
                focus: "關註此流程",
                focused: "已關註此流程",
                confirm: "確認"
            },
            en: {
                focus: "Focus this process",
                focused: "Focused this process",
                confirm: "Confirm"
            },
        };
        if (curLanguage && supportLanguage.includes(curLanguage)) {
            result = translate[curLanguage][code];
        }
        else {
            result = translate["zh-CHS"][code];
        }
        return result;
    }
}
TaskActionImplComponent.decorators = [
    { type: Component, args: [{
                selector: 'task-action-impl',
                template: "<form\r\n  [class]=\"showButtons ? '' : 'px-4 py-2'\"\r\n  style=\"display: flex; flex-direction: column\"\r\n>\r\n  <div\r\n    *ngIf=\"showButtons\"\r\n    class=\"fa-approval-operate-list fa-approve-common-gutter flex-wrap\"\r\n  >\r\n    <div\r\n      *ngFor=\"let action of actions; let i = index\"\r\n      class=\"fa-approval-operate\"\r\n    >\r\n      <input\r\n        type=\"radio\"\r\n        name=\"operate\"\r\n        [value]=\"i\"\r\n        [id]=\"i\"\r\n        class=\"approval-operate--radio\"\r\n        [checked]=\"i === 0 ? true : false\"\r\n      />\r\n      <label\r\n        class=\"approval-operate--label\"\r\n        [for]=\"i\"\r\n        (click)=\"actionSelect(action, i)\"\r\n      >\r\n        <span class=\"label-title\">{{ action.name }}</span>\r\n        <div class=\"label-tip\"></div>\r\n        <span class=\"f-icon label-icon\"></span>\r\n      </label>\r\n    </div>\r\n  </div>\r\n  <!--\u7EC4\u4EF6\u5BB9\u5668-->\r\n  <ng-container #container></ng-container>\r\n\r\n  <!-- \u5173\u6CE8\u6B64\u6D41\u7A0B -->\r\n  <div\r\n    *ngIf=\"\r\n      showButtons && selectAction && selectAction.typeId === 'wf' && ifShowFocus\r\n    \"\r\n    class=\"custom-control custom-checkbox custom-control-inline\"\r\n    style=\"margin-bottom: 20px\"\r\n  >\r\n    <input\r\n      type=\"checkbox\"\r\n      class=\"custom-control-input\"\r\n      [(ngModel)]=\"ifFocused\"\r\n      (ngModelChange)=\"focusTask()\"\r\n      id=\"taskcenterfocus\"\r\n      name=\"taskcenterfocus\"\r\n    />\r\n    <label class=\"custom-control-label\" for=\"taskcenterfocus\">{{\r\n      focus\r\n    }}</label>\r\n  </div>\r\n\r\n  <!-- \u63D0\u4EA4\u6309\u94AE -->\r\n  <div class=\"fa-btn-group-lg\">\r\n    <button\r\n      *ngIf=\"showButtons && actions.length\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary\"\r\n      [disabled]=\"submitDisable\"\r\n      directive-throttle\r\n      (throttleClick)=\"submit()\"\r\n    >\r\n      {{ submitName }}\r\n    </button>\r\n  </div>\r\n</form>\r\n",
                styles: [".fa-approval-operate-list{display:flex;flex-direction:row;align-items:center}.fa-approval-operate-list .fa-approval-operate{margin-right:8px;margin-bottom:8px}.fa-approval-operate-list .approval-operate--label{position:relative;padding:4px 21px;overflow:hidden;cursor:pointer;margin-bottom:0;background:#f2f4f7;border-radius:6px;color:#424347;font-weight:500;font-size:13px}.fa-approval-operate-list .approval-operate--label:hover{color:#388fff;border-color:#388fff}.fa-approval-operate-list .approval-operate--label .label-title{line-height:20px;white-space:nowrap}.fa-approval-operate-list .approval-operate--label .label-tip{position:absolute;display:none;right:0;bottom:0;width:14px;height:14px;border:7px solid #dadada;border-top:7px solid transparent;border-left:7px solid transparent}.fa-approval-operate-list .approval-operate--label .label-icon{position:absolute;display:none;right:-3px;bottom:-2px;font-size:12px;color:#fff}.fa-approval-operate-list .approval-operate--label .label-icon::before{content:\"\\e118\"}.fa-approval-operate-list .approval-operate--radio{display:none}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label{padding:3px 19px;font-size:14px;background:rgba(23,145,255,.05);box-shadow:0 4px 10px 0 rgba(69,144,255,.3);border-radius:6px;border:1px solid #388fff;color:#388fff}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label .label-tip{display:block;border-right-color:#388fff;border-bottom-color:#388fff}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label .label-icon{display:block}.fa-btn-like-dropdown{display:flex;align-items:center}.fa-btn-like-dropdown .like-dropdown--text{margin:0 4px 0 0}.fa-btn-like-dropdown .like-dropdown--icon{color:rgba(0,0,0,.25)}.fa-approve-common-gutter{margin-bottom:20px}.fa-approve-comment .approve-comment--title{display:inline-block;color:#667580;border-radius:4px 4px 0 0;height:26px;padding:0 9px;position:relative;background:#f7f7f7;cursor:pointer}.fa-approve-comment .approve-comment--title:after{content:\"\";height:100%;position:absolute;right:-10px;top:0;bottom:0;border-right:5px solid transparent;border-left:5px solid #f7f7f7;border-bottom:13px solid #f7f7f7;border-top:13px solid transparent}.fa-approve-comment .approve-comment--title:hover{background:rgba(23,145,255,.05);color:#1791ff}.fa-approve-comment .approve-comment--title:hover:after{border-bottom-color:rgba(23,145,255,.05);border-left-color:rgba(23,145,255,.05)}.fa-approve-comment .approve-comment--title .fa-btn-like-dropdown{font-size:12px;padding:5px 0}.fa-approve-comment .fa-approve-comment--content .content-textarea{border-color:#dcdcdc;border-radius:0 0 2px 2px;height:140px}.fa-approve-comment .fa-approve-comment--footer{font-size:13px;color:#667580;background:#f7f7f7;padding:10px 0}.fa-approve-comment .approve-comment--text-btns{display:flex;flex-direction:row}.fa-approve-comment .approve-comment--text-btns .text-btns-item{display:flex;flex-direction:row;align-items:center;font-size:12px;line-height:18px;color:#667580;padding:4px;margin-right:8px;cursor:pointer}.fa-approve-comment .approve-comment--text-btns .text-btns-item:hover{color:#388fff}.fa-approve-comment .approve-comment--text-btns .text-btns-item .f-icon{margin-right:6px}.fa-approveal-links::after{content:\".\";display:block;height:0;clear:both;visibility:hidden}.fa-approveal-links .approveal-links--link{font-size:14px;position:relative;padding:0 16px 0 0;display:flex;align-items:center;float:left}.fa-approveal-links .approveal-links--link .link-text{color:rgba(0,0,0,.65);margin:0 8px 0 0}.fa-approveal-links .approveal-links--link+.approveal-links--link{padding-left:16px}.fa-approveal-links .approveal-links--link+.approveal-links--link::before{content:\"\";position:absolute;width:1px;height:80%;left:0;top:10%;background:#dbdbdb}.fa-btn-group-lg .btn{width:180px;height:32px;box-shadow:0 4px 10px 0 rgba(69,144,255,.25);border-radius:6px;min-width:100px;text-align:center;font-size:13px}.fa-approve-record{padding:0 0 16px;position:relative}.fa-approve-record .fa-approve-record--timeline{position:absolute;width:34px;top:0;bottom:0;z-index:100}.fa-approve-record .fa-approve-record--timeline::after{content:\"\";position:absolute;width:1px;height:100%;overflow:hidden;left:50%;top:0;z-index:101;border-left:1px dashed #dcdcdc}.fa-approve-record .fa-approve-record--timeline .fa-approve-star{position:relative;z-index:103;margin:20px auto}.fa-approve-record.fa-state-running .fa-approve-record--timeline::after{top:20px}.fa-approve-record:last-child .fa-approve-record--timeline::after{height:20px}.fa-approve-record .fa-approve-record--content{margin:0 0 0 34px;padding:16px 14px;background:#f9f9f9;border-radius:2px}.fa-approve-record .fa-approve-record--content .approve-record--header{margin:0 0 12px;display:flex;align-items:center}.fa-approve-record .fa-approve-record--content .approve-record--header .header--title{margin-bottom:0;color:rgba(0,0,0,.85)}.fa-approve-record .fa-approve-record--content .approve-record--header>*{margin:0 19px 0 0}.fa-approve-record .approve-record--list-item{display:flex;flex-direction:row}.fa-approve-record .approve-record--list-item+.approve-record--list-item{padding-top:8px}.fa-approve-record .approve-record--list-item .list-item--auxiliary{width:30px;margin:0 10px 0 0}.fa-approve-record .approve-record--list-item .list-item--main{flex-grow:1;flex-shrink:1;flex-basis:auto;padding:6px 0 0;background:#f9f9f9}.fa-approve-record .approve-record--list-item .list-item--content{padding:20px 0 0}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info{font-size:12px;margin-bottom:0}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info .info-label{color:rgba(0,0,0,.65)}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info .info-text{color:rgba(0,0,0,.85)}.fa-approve-record .approve-record--list-item .list-item--header{display:flex;align-items:center}.fa-approve-record .approve-record--list-item .list-item--header>*{margin:0 16px 0 0}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info{margin-bottom:0;font-size:12px}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info .info-label{color:rgba(0,0,0,.35)}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info .info-text{color:rgba(0,0,0,.65)}.fa-approve-record .approve-record--list-item .list-item--name{color:#4297fa}.fa-approve-record .approve-record--avatar{width:30px;height:30px;border-radius:15px}.fa-approve-round-bg{margin:4px auto 0;width:30px;height:30px;background:#59a1ff;border-radius:18px;line-height:30px;text-align:center;white-space:nowrap;font-size:12px;overflow:hidden}.fa-approve-round-bg-text{color:#fff}.fa-approve-star{width:14px;height:14px;display:block;background:rgba(56,143,255,.4);border-radius:7px;position:relative}.fa-approve-star::after{content:\"\";width:8px;height:8px;position:absolute;top:50%;left:50%;margin:-4px 0 0 -4px;border-radius:4px;background:#388fff}.fa-approve-star.bg-warning{background:rgba(245,156,36,.4)!important}.fa-approve-star.bg-warning::after{background:#f59c24}.fa-approve-badge{padding-top:4px;padding-bottom:4px;border-radius:10px}.fa-approve-badge-light{font-size:13px;line-height:20px;padding:0 8px;color:#5f637a;border:1px solid #e6e6e6;background:#f6faff}.fa-approve-link-border{cursor:pointer;display:inline-block;border:1px solid #60a5ff;border-radius:13px;font-size:12px;line-height:16px;color:#388fff;padding:3px 10px;background:#ebf5ff}.fa-approve-link-border:hover{background:#2881ff;color:#fff}"]
            }] }
];
/** @nocollapse */
TaskActionImplComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: LoadingService },
    { type: MessagerService },
    { type: TaskActionImplService }
];
TaskActionImplComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    actions: [{ type: Input }],
    submitName: [{ type: Input }],
    showButtons: [{ type: Input }],
    batch: [{ type: Input }],
    task: [{ type: Input }],
    iframe: [{ type: Input }],
    origin: [{ type: Input }],
    submited: [{ type: Output }],
    actionCode: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 点击节流器：避免连续点击
 */
class ThrottleClickDirective {
    constructor() {
        // 一定的时间内只执行第一个事件
        this.THROTTLE_TIME = 2000;
        this.subject = new Subject();
        // 事件方法
        this.throttleClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const result = this.subject.pipe(throttleTime(this.THROTTLE_TIME));
        this.click = result.subscribe(e => {
            this.throttleClick.emit(e);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.click.unsubscribe();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        this.subject.next(evt);
    }
}
ThrottleClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[directive-throttle]'
            },] }
];
/** @nocollapse */
ThrottleClickDirective.ctorParameters = () => [];
ThrottleClickDirective.propDecorators = {
    throttleClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskActionImplModule {
}
TaskActionImplModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TaskActionImplComponent,
                    ThrottleClickDirective
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    WfTaskHandlerModule,
                    LoadingModule,
                    MessagerModule.forRoot()
                ],
                exports: [TaskActionImplComponent],
                providers: [
                    TaskActionImplService,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TaskActionImplService, TaskActionImplComponent, TaskActionImplModule, ThrottleClickDirective as ɵa };

//# sourceMappingURL=gsp-wf-task-action-impl.js.map