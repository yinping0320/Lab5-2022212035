import { OnInit, TemplateRef, Injector } from '@angular/core';
import { TaskService } from '../../service/task.service';
import { StartProcessPayload, Assignee } from '../../entity/start-process-payload';
import { LoadingService } from '@farris/ui-loading';
import { Observable, Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../service/i18n/i18n.service';
import { ComboListComponent } from '@farris/ui-combo-list';
import { MessagerService } from '@farris/ui-messager';
import { SimulateResponse } from '../../entity/simulate-response';
import { AssignInfoHelpEntity } from '../../entity/assignInfoHelp';
import { WfTaskHandlerService } from '../../wf-task-handler.service';
import { WfContext } from '../../entity/wfContext';
export declare class ProcessSelectorComponent implements OnInit {
    private taskService;
    private loadingService;
    private notify;
    private i18nService;
    private messager;
    private injector;
    private handlerService;
    constructor(taskService: TaskService, loadingService: LoadingService, notify: NotifyService, i18nService: I18nService, messager: MessagerService, injector: Injector, handlerService: WfTaskHandlerService);
    ngOnInit(): void;
    destProcesses: {
        id: string;
        name: string;
    }[];
    destNodes: {
        id: string;
        name: string;
    }[];
    response: SimulateResponse;
    assignInfos: AssignInfoHelpEntity[];
    otherAssignInfos: AssignInfoHelpEntity[];
    selectedProcessId: string;
    selectedNodeId: string;
    payload: StartProcessPayload;
    subject: Subject<{}>;
    subjectWithResponse: Subject<any>;
    subjectCancel: Subject<{}>;
    submitDisable: boolean;
    showButtons: boolean;
    curLanguage: string;
    nodePlaceholder: string;
    processPlaceholder: string;
    wfContext: WfContext;
    processDefaultValue: string;
    nodeDefaultValue: string;
    dialogHeight: number;
    nodeCombo: ComboListComponent;
    buttons: TemplateRef<any>;
    openFromIframe: boolean;
    parameter: any;
    setParam(param: StartProcessPayload): Observable<any>;
    startProcessSimulate(payload: StartProcessPayload, subject: Subject<any>): void;
    /**
     * 选择某个流程后
     * @param data
     */
    selectProcessChange(data: any): void;
    /**
     * 根据选择的流程定义id获取下一环节信息
     * @param selectedProcessId
     */
    private getDestNodes;
    /**
     * 选择节点后事件
     */
    selectNodeChange(data: any): void;
    /**
   * 实现真正的提交
   */
    startProcessSubmit(): void;
    /**
     * 选择流程清空
     */
    selectProcessClear(): void;
    /**
     * 选择节点清空
     */
    selectNodeClear(): void;
    /**
     * 用户帮助选人
     */
    afterConfirm(data: Assignee[], index: number): void;
    /**
     * 其他节点用户帮助选人
     * @param data
     * @param index
     */
    otherAssignInfosAfterConfirm(data: Assignee[], index: number): void;
    /**
     * 弹框点击取消
     */
    cancel(): void;
    /**
     * 获取提交审批后返回值（bool型，兼容历史）
     */
    getSubject(): Observable<{}>;
    /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     */
    getSubjectWithResponse(): Observable<any>;
    /**
     * 点击取消后的subject，关闭窗口使用
     * @returns
     */
    getSubjectCancel(): Observable<{}>;
    /**
     * 设置下一环节
     */
    private setNextNode;
    /**
     * 设置当前指派信息帮助参数
     */
    private setAssignInfo;
    /**
     * 设置其他节点指派
     * @param response
     */
    private setOtherAssignInfo;
    /**
     * 清空当前指派信息帮助参数
     */
    private clearAssignInfos;
    /**
     * 获取浏览器缓存，上次流程选择的结果
     */
    private getSelectedProcessCache;
    /**
     * 浏览器缓存记下流程选择的结果
     */
    private setSelectedProcessCache;
}
