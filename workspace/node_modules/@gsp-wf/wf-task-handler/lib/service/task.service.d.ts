import { HttpService } from '@ecp-caf/caf-common';
import { Observable } from 'rxjs';
import { AssignParameter } from '../entity/complete-response';
import { CompleteContext } from '../entity/complete-context';
import { BatchVerifySignedContext } from '../entity/batchVerifysigned';
import { MessagerService } from '@farris/ui-messager';
import { CancelSubmitPayload, StartProcessPayload } from '../entity/start-process-payload';
import { FileDeleteEntity, FileUploadEntity, GspDocUploadEntity } from '../entity/attachment';
import { WorkItemExecuteParam } from '../entity/workitem-execute-param';
import { UrgeHandleContext, UrgeHandleSimulateContext } from '../entity/urge-handle';
import { AddSignPayload } from '../entity/add-sign';
import { CommonComment } from '../entity/comment';
import { CommonCommentFilter } from '../entity/commonCommentFilter';
export declare class TaskService {
    private httpSvc;
    private message;
    constructor(httpSvc: HttpService, message: MessagerService);
    getUsersByIds(ids: string[]): Observable<any>;
    /**
     * 获取工作项操作列表
     */
    getWorkItemActions(workItemId: string): Observable<any>;
    /**
     * 执行审批操作
     * @param context 执行审批上下文
     */
    complete(context: CompleteContext): Observable<any>;
    /**
     * 执行审批预解析
     * @param context 执行审批上下文
     */
    completeSimulate(context: CompleteContext): Observable<any>;
    /**
     * 获取跳转活动信息
     * @param workItemId 工作项Id
     * @param action 动作编号
     */
    getDestinationScope(workItemId: string, action: string): Observable<any>;
    /**
     * 根据节点ID获取指定参与者的结果
     * @param workItemId
     * @param nodeId 说明：nodeIds=["node1","node2",···]
     * @returns 指派信息的数组 re: FlowNodeInfo[]
     */
    getSimulationAssigneeInfo(workItemId: string, nodeId: string): Observable<any>;
    /**
     * 执行征询、知会
     * @param context 上下文
     */
    addSign(context: any): Observable<any>;
    /**
     * 已阅
     * @param context 参数
     */
    readTask(context: WorkItemExecuteParam): Observable<any>;
    /**
     * 查询单据信息（方法名不要动，其他地方有引用）
     * @param workItemId 工作项Id
     */
    getTaskFormInfo(workItemId: string): Observable<any>;
    /**
     * 获取指派信息
     * @param taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     */
    getAssigneeInfo(taskId: string): Observable<any>;
    /**
     * 获取加签移交范围设置
     * @param workItemId
     * @param actionCode
     */
    getOrganizationScope(workItemId: string, actionCode: string): Observable<any>;
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param procInstId 流程实例id
     * @param state 任务状态 2或5
     */
    getTaskByProcInstId(procInstId: string, state: number): Observable<any>;
    /**
     * 根据workitemID获取任务实体
     * @param workItemId
     */
    getTaskByWorkItemId(workItemId: string): Observable<any>;
    /**
     * 根据工作项ID指派任务
     * @param assigneesPa 指派参数
     */
    assignNextUsersByWorkItemId(assigneesPa: AssignParameter): Observable<any>;
    /**
     * 取回
     * @param workItemId task id
     * @param comment comment
     */
    retrieve(context: {
        workItemId: string;
        comment?: string;
    }): Observable<any>;
    /**
     * 任务移交
     * @param taskId 工作项Id
     * @param targetUId 目标用户Id
     */
    transfer(transferContext: any): Observable<any>;
    /**
     * 任务评论
     * @param taskId 工作项Id
     * @param targetUId 目标用户Id
     */
    comment(commentContext: any): Observable<any>;
    /**
     * 领用任务
     * @param taskId 工作项Id
     */
    claim(taskId: string, comment: string): Observable<any>;
    /**
     * 取消领用
     * @param taskId 任务Id
     */
    unClaim(taskId: string, comment: string): Observable<any>;
    /**
     * 报错提示
     * @param error
     */
    error(error: any): void;
    /**
     * 启动流程接口
     * @param payload API所需的上下文参数
     */
    startProcess(payload: StartProcessPayload): Observable<any>;
    /**
     * 启动流程预解析
     * @param payload API所需的上下文参数
     */
    startProcessSimulate(payload: StartProcessPayload): Observable<any>;
    /**
     * 取消提交
     * @param param 参数
     */
    cancelSubmit(param: CancelSubmitPayload): Observable<any>;
    static newId(): string;
    /**
     * 获取用户常用意见列表
     * @returns
     */
    getCommentList(filter?: CommonCommentFilter): Observable<any>;
    /**
     * 添加常用意见
     * @returns
     */
    addComment(comment: CommonComment): Observable<any>;
    /**
     * 删除一条常用意见
     * @param id 常用意见id
     * @returns
     */
    deleteComment(id: string): Observable<any>;
    /**
     * 获取任务中心配置项
     * @param code 配置项的Code
     */
    getTaskCenterConfigByCode(code: string, ownerType?: string, ownerId?: string): Observable<any>;
    /**
     * 获取系统级别配置（缓存为一天）
     */
    getAllTaskCenterConfig(): Observable<any>;
    /**
     * 获取任务分类级别配置
     */
    getTaskCategoryCenterConfig(categoryId: string): Observable<any>;
    /**
    * 获取任务中心个人用户配置（缓存为一天）
    */
    getAllUserConfig(): Observable<any>;
    /**
     * 添加用户级别自定义配置
     * @param code 配置项编号
     */
    addUserConfig(code: string, currentValue: string): Observable<any>;
    /**
     * 获取用户头像（已被任务中心调用）
     * @param userId 用户ID
     */
    getUserAvatar(userId: string): Observable<any>;
    /**
     * 获取当前日期
     */
    getCurrentDateString(): string;
    /**
     * 移除localStorage缓存
     * @param key
     */
    private removeConfig;
    /**
     * 真正上传附件
     * @param files
     */
    uploadAttachment(files: FileUploadEntity): Observable<any>;
    /**
     * 删除附件
     * @param fileDeleteEntity
     */
    deleteAttachment(fileDeleteEntity: FileDeleteEntity): Observable<any>;
    /**
     * 创建内码
     */
    createNM(): string;
    /**
     * 获取当前用户信息
     */
    getUserInfo(): Observable<any>;
    /**
     * 获取用户所有签名
     */
    getUserSignId(userId: string): Observable<any>;
    /**
     * 上传签名，返回长传后的签名id
     */
    uploadSignature(gspDocUploadEntity: GspDocUploadEntity): Observable<any>;
    /**
     * 解析文件类型，给出缩略图
     * @param attachmentInfo
     */
    createItem(attachmentInfo: any): any;
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param token 主题唯一标识。
     * @returns 主题的唯一标识。
     */
    subjectRegister(subjectCode: string, token: string): any;
    /**
     * 监听移除
     * @param token
     */
    subjectRemove(token: string): void;
    /**
     * 通过某个token发送消息
     * @param subjectToken 主题唯一的token标识
     * @param message 要发送的消息
     */
    subjectNotify(subjectToken: string, message: any): void;
    /**
     * 添加观察者，并监听消息
     * @param subjectToken 主题token
     * @param observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param handler 监听到消息后执行的动作
     */
    subjectResponse(subjectToken: string, observerToken: string, handler: (value: any) => void): void;
    /**
     * 获取催办模拟结果
     * @param context 参数
     * @returns
     */
    urgeHandleSimulate(context: UrgeHandleSimulateContext): Observable<any>;
    /**
     * 执行催办
     * @param context 参数
     * @returns
     */
    urgeHandle(context: UrgeHandleContext): Observable<any>;
    /**批量数字签名
     * @param context 参数
     */
    batchVerifySigned(context: BatchVerifySignedContext): Observable<any>;
    /**
     * 获取用户帮助前端配置
     * @returns
     */
    getWfUserHelpConfig(): Observable<any>;
    /**
     * 获取加签配置
     */
    getAdhocConfig(workItemId: string): Observable<any>;
    /**
     * 加签提交
     */
    adhocAssignee(payload: AddSignPayload): Observable<ArrayBuffer>;
    /**
     * 取消征询
     */
    cancelConsult(payload: WorkItemExecuteParam): Observable<ArrayBuffer>;
    /**
     * 判断是否inSuite环境
     */
    isInSuite(): boolean;
    /**
     * 获取字符串字节长度
     */
    getBytesLength(str: any): any;
    /**
     * 获取top window
     * @returns
     */
    getTopWindow(): Window;
    /**
     * 弹出错误提示
     * @param error
     */
    handleErrorLevel(errorMessage: any): void;
    /**
     * 赋值到粘贴板
     * @param text
     * @returns
     */
    private copyToClipboard;
}
