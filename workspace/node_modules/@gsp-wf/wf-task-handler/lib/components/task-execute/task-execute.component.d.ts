import { OnInit, TemplateRef, Injector, AfterViewInit, OnDestroy } from '@angular/core';
import { Addendum, VerifySigned, CompleteContext } from '../../entity/complete-context';
import { TaskService } from '../../service/task.service';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../service/i18n/i18n.service';
import { Observable, BehaviorSubject } from 'rxjs';
import { TaskAction } from '../../entity/task-action';
import { WfTaskHandlerService } from '../../wf-task-handler.service';
import { TaskEntity } from '../../entity/task-entity';
import { SubmitResult, ActionBaseImplComponent } from '@gsp-wf/task-impl-api';
import { LoadingService } from '@farris/ui-loading';
import { Assignee } from '../../entity/start-process-payload';
import { MessagerService } from '@farris/ui-messager';
import { AssignInfoHelpEntity } from '../../entity/assignInfoHelp';
import { SimulateResponse } from '../../entity/simulate-response';
import { BillMethodConfig } from '../../entity/formAction';
import { TaskCenterConfig } from '../../entity/task-center-config';
import { UrgeHandleResponse } from '../../entity/urge-handle';
import { WfContext } from '../../entity/wfContext';
import { UrgeHandleComponent } from "../urge-handle/urge-handle.component";
export declare class TaskExecuteComponent extends ActionBaseImplComponent implements OnInit, AfterViewInit, OnDestroy {
    private taskService;
    private notify;
    private i18nService;
    private handlerService;
    private loadingService;
    private message;
    private injector;
    /**
     * 消息监听处理方法
     */
    private static func;
    task: TaskEntity;
    workItemId: string;
    processInstanceId: string;
    actionEntity: TaskAction;
    comment: string;
    private MAX_COMMENT_LENGTH;
    defaultComment: string;
    wfCacheComment: string;
    currentDefaultValue: string;
    taskList: TaskEntity[];
    batchSecond: number;
    ifSelectNode: boolean;
    ifSelectUser: boolean;
    ifAssignUser: boolean;
    ifUrgeType: boolean;
    ifShowCommentToMySelf: boolean;
    singleSelect: boolean;
    selectTargetAble: boolean;
    hideComment: boolean;
    filter: {
        notGetCurrentUser: boolean;
        notGetStopUser: boolean;
        orderField: string;
        withAllOrg: boolean;
        orgId: string;
    };
    selectedUsers: string[];
    selectedUserNgModule: string;
    buttons: TemplateRef<any>;
    sysUserHelp: SysFarrisLookupComponent;
    urgeHandleComponent: UrgeHandleComponent;
    subject: BehaviorSubject<SubmitResult>;
    submitResult: SubmitResult;
    bindingData: {
        id?: string;
        name?: string;
    };
    selectNodeText: string;
    selectUserText: string;
    commentPlaceHolder: string;
    showAttachment: boolean;
    showSign: boolean;
    showCommonComment: boolean;
    textAreaHeight: number;
    billMethodConfigs: BillMethodConfig[];
    nodeDefaultValue: string;
    selectedNodeId: string;
    destNodes: {
        id: string;
        name: string;
    }[];
    dialogHeight: number;
    dialogHeightBase: number;
    addendum: Addendum;
    groupIcon: string;
    assignInfos: AssignInfoHelpEntity[];
    otherAssignInfos: AssignInfoHelpEntity[];
    originOtherAssignInfos: AssignInfoHelpEntity[];
    response: SimulateResponse;
    urgeHandleResponse: UrgeHandleResponse;
    formObject: any;
    ifRegistered: boolean;
    configList: TaskCenterConfig[];
    verifySigned: VerifySigned;
    submitDisable: boolean;
    addSign: {
        showSignToSign: boolean;
        allowSignToSIgn: boolean;
        showMultiInstanceType: boolean;
        multiInstanceType: {
            value: string;
            name: any;
        }[];
        originMultiInstType: string;
        curMultiInstType: string;
    };
    showBackWardConfig: {
        title: any;
        dynamicBackWardRuleAble: boolean;
        displayPlaceholder: string;
        showTips: boolean;
        enable: boolean;
        backWardRules: {
            name: any;
            value: string;
        }[];
    };
    /**
     * 任务催办时使用
     */
    showUrgeMessageSubject: boolean;
    urgeMessageSubject: string;
    urgeMessageContent: string;
    addReminder: boolean;
    subjectEditable: boolean;
    contentEditable: boolean;
    wfContext: WfContext;
    enablePriority: boolean;
    cls: string;
    POST_MESSAGE_TARGET: string;
    private messageSubject;
    private language;
    actionToken: string;
    simulateToken: string;
    selectedPriority: number;
    constructor(taskService: TaskService, notify: NotifyService, i18nService: I18nService, handlerService: WfTaskHandlerService, loadingService: LoadingService, message: MessagerService, injector: Injector);
    /**
     * 组件销毁时，去掉subject注册
     */
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngOnInit(): void;
    private addMessageListener;
    /**
     * 监听事件处理
     */
    eventHandler: (event: any) => void;
    /**
     * 重写父类方法
     * @param task
     */
    setTask(task: TaskEntity): void;
    /**
     * 批量办理 设置任务列表
     * @param taskList
     */
    setTaskList(taskList: TaskEntity[]): void;
    /**
     * 重写父类方法
     * @param action
     */
    setAction(action: TaskAction): Observable<any>;
    /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     */
    private initFormEvent;
    /**
     * 点击提交的时候，执行表单的前事件
     */
    private beforeCompleteSubmit;
    /**
     * @param formActions 表单中要执行的动作
     */
    private executeFormActions;
    /**
     * 单个任务预解析
     * @param action
     */
    private simulate;
    /**
     * 批量审批预解析
     * @returns
     */
    private batchSimulate;
    /**
     * 默认的预解析返回结果，可控制弹框高度
     * @param dialogHeight
     * @returns
     */
    private defaultSubjectNext;
    /**
     * 真正地提交
     * 重写父类方法
     */
    submit(): Observable<SubmitResult>;
    /**
     * 批量办理点击提交
     * @param tasks
     * @returns
     */
    batchSubmit(tasks: TaskEntity[]): Observable<SubmitResult>;
    /**
     * 执行批量前事件
     * @param tasks 批量任务列表
     */
    batchCompleteSubmit(tasks: TaskEntity[]): Observable<SubmitResult>;
    /**
     * 批量数字签名
     * @param tasks
     * @param filterNum
     * @param batchVerifySignedContext
     * @returns
     */
    private batchVerifySubmit;
    /**
     * 真正的批量提交任务
     * @param tasks
     * @param filterNum
     * @param verifyTasksNum
     * @returns
     */
    private batchComplete;
    /**
     * 批量已阅
     * @param tasks
     */
    private batchReadTaskSubmit;
    /**
     * 批量取回
     * @param tasks
     */
    private batchRetrieveSubmit;
    /**
     * 批量领用
     */
    private batchClaimSubmit;
    /**
     * 批量取消领用
     */
    private batchUnclaimSubmit;
    /**
     * 批量移交
     * @param tasks 批量任务列表
     */
    private batchTransferSubmit;
    /**
     * 批量提交提示信息
     * @param successNum 成功条数
     * @param failedNum 需要交互的条数
     * @param errorNum 执行报错的条数
     * @param verifyTasksNum 需要数字签名的条数
     */
    private showBatchSubmitInfo;
    private executeBatchEvent;
    private assignSimulate;
    private transferSimulate;
    private addSignFrontSimulate;
    private addSignSimulate;
    private notifySimulate;
    private getOrganizationScope;
    /**
     * 催办模拟
     */
    private urgeHandleSimulate;
    /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     */
    private completeSimulate;
    /**
     * 清空预解析结果
     */
    private clearSimulateResult;
    /**
     * 设置当前指派信息帮助参数
     */
    private setAssignInfo;
    /**
     * 设置其他节点指派
     * @param response
     */
    private setOtherAssignInfo;
    /**
     * 选完节点后，重新设置其他节点指派
     * @param response
     */
    private setOtherAssignInfoAgain;
    /**
     * 点击确定后方法
     */
    private assignSubmit;
    private claimSubmit;
    private unClaimSubmit;
    private retrieveSubmit;
    private transferSubmit;
    private commentSubmit;
    private addSignFrontSubmit;
    private addSignSubmit;
    private readSubmit;
    private notifySubmit;
    /**
     * 催办提交
     */
    private urgeHandleSubmit;
    /**
     * 取消征询提交
     */
    private cancelConsultSubmit;
    private completeSubmit;
    private completeTask;
    private executeFormActionsAfterCompleteTask;
    private executePostFormActions;
    afterConfirmForTransfer(data: Assignee[]): void;
    cancel(): Observable<SubmitResult>;
    getSubject(): Observable<SubmitResult>;
    selectNodeChange(data: any): void;
    selectNodeClear(): void;
    afterConfirmForAssign(data: Assignee[], index: number): void;
    afterConfirmForOtherAssign(data: Assignee[], index: number): void;
    /**
     * 上传附件后事件
     */
    addAttachment(data: any): void;
    /**
     * 手写签名后事件
     */
    addSignature(data: any): void;
    addPadding(): void;
    private sendMessage;
    verifySignature(handler: any): void;
    taskComplete(completeContext: CompleteContext): void;
}
