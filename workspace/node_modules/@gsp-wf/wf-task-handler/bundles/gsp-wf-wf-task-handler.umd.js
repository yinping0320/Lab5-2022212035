(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-modal'), require('@gsp-sys/sysmgr-ui'), require('@angular/common'), require('@farris/ui-datatable'), require('@farris/ui-dialog'), require('@farris/ui-pagination'), require('@farris/ui-combo-list'), require('@farris/ui-input-group'), require('@farris/ui-datagrid'), require('@farris/ui-datagrid-editors'), require('@farris/ui-forms'), require('@farris/ui-switch'), require('@farris/ui-section'), require('@gsp-wf/wf-approval-logs'), require('@gsp-wf/ui-flowchart'), require('@gsp-wf/task-impl-api'), require('@farris/ui-avatar'), require('@farris/ui-dropdown'), require('@gsp-wf/wf-sign'), require('@gsp-sys/rtf-common'), require('@ecp-caf/caf-common'), require('@farris/ui-notify'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/forms'), require('@gsp-svc/formdoc-upload'), require('@farris/ui-messager'), require('@gsp-svc/file-load'), require('@farris/ui-loading')) :
    typeof define === 'function' && define.amd ? define('@gsp-wf/wf-task-handler', ['exports', '@farris/ui-modal', '@gsp-sys/sysmgr-ui', '@angular/common', '@farris/ui-datatable', '@farris/ui-dialog', '@farris/ui-pagination', '@farris/ui-combo-list', '@farris/ui-input-group', '@farris/ui-datagrid', '@farris/ui-datagrid-editors', '@farris/ui-forms', '@farris/ui-switch', '@farris/ui-section', '@gsp-wf/wf-approval-logs', '@gsp-wf/ui-flowchart', '@gsp-wf/task-impl-api', '@farris/ui-avatar', '@farris/ui-dropdown', '@gsp-wf/wf-sign', '@gsp-sys/rtf-common', '@ecp-caf/caf-common', '@farris/ui-notify', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/forms', '@gsp-svc/formdoc-upload', '@farris/ui-messager', '@gsp-svc/file-load', '@farris/ui-loading'], factory) :
    (factory((global['gsp-wf'] = global['gsp-wf'] || {}, global['gsp-wf']['wf-task-handler'] = {}),global.uiModal,global.sysmgrUi,global.ng.common,global.uiDatatable,global.uiDialog,global.uiPagination,global.uiComboList,global.uiInputGroup,global.uiDatagrid,global.uiDatagridEditors,global.uiForms,global.uiSwitch,global.uiSection,global.wfApprovalLogs,global.uiFlowchart,global.taskImplApi,global.uiAvatar,global.uiDropdown,global.wfSign,global.rtfCommon,global.cafCommon,global.uiNotify,global.rxjs,global.rxjs.operators,global.ng.core,global.ng.forms,global.formdocUpload,global.uiMessager,global.fileLoad,global.uiLoading));
}(this, (function (exports,uiModal,sysmgrUi,common,uiDatatable,uiDialog,uiPagination,uiComboList,uiInputGroup,uiDatagrid,uiDatagridEditors,uiForms,uiSwitch,uiSection,wfApprovalLogs,uiFlowchart,taskImplApi,uiAvatar,uiDropdown,wfSign,rtfCommon,cafCommon,uiNotify,rxjs,operators,core,forms,formdocUpload,uiMessager,fileLoad,uiLoading) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskService = /** @class */ (function () {
        function TaskService(httpSvc, message) {
            this.httpSvc = httpSvc;
            this.message = message;
        }
        /**
         * @param {?} ids
         * @return {?}
         */
        TaskService.prototype.getUsersByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                var _this = this;
                /** @type {?} */
                var pathUrl = '/api/runtime/sys/v1.0/users';
                return rxjs.forkJoin(ids.map(( /**
                 * @param {?} id
                 * @return {?}
                 */function (id) { return _this.httpSvc.get(pathUrl + ("/" + id) + "?mode=0002"); })));
            };
        /**
         * 获取工作项操作列表
         */
        /**
         * 获取工作项操作列表
         * @param {?} workItemId
         * @return {?}
         */
        TaskService.prototype.getWorkItemActions = /**
         * 获取工作项操作列表
         * @param {?} workItemId
         * @return {?}
         */
            function (workItemId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/actions";
                return this.httpSvc.get(url);
            };
        /**
         * 执行审批操作
         * @param context 执行审批上下文
         */
        /**
         * 执行审批操作
         * @param {?} context 执行审批上下文
         * @return {?}
         */
        TaskService.prototype.complete = /**
         * 执行审批操作
         * @param {?} context 执行审批上下文
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/complete";
                return this.httpSvc.post(url, context);
            };
        /**
         * 执行审批预解析
         * @param context 执行审批上下文
         */
        /**
         * 执行审批预解析
         * @param {?} context 执行审批上下文
         * @return {?}
         */
        TaskService.prototype.completeSimulate = /**
         * 执行审批预解析
         * @param {?} context 执行审批上下文
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/complete-simulation";
                return this.httpSvc.post(url, context);
            };
        /**
         * 获取跳转活动信息
         * @param workItemId 工作项Id
         * @param action 动作编号
         */
        /**
         * 获取跳转活动信息
         * @param {?} workItemId 工作项Id
         * @param {?} action 动作编号
         * @return {?}
         */
        TaskService.prototype.getDestinationScope = /**
         * 获取跳转活动信息
         * @param {?} workItemId 工作项Id
         * @param {?} action 动作编号
         * @return {?}
         */
            function (workItemId, action) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/nextNodes/" + action;
                return this.httpSvc.get(url);
            };
        /**
         * 根据节点ID获取指定参与者的结果
         * @param workItemId
         * @param nodeId 说明：nodeIds=["node1","node2",···]
         * @returns 指派信息的数组 re: FlowNodeInfo[]
         */
        /**
         * 根据节点ID获取指定参与者的结果
         * @param {?} workItemId
         * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
         * @return {?} 指派信息的数组 re: FlowNodeInfo[]
         */
        TaskService.prototype.getSimulationAssigneeInfo = /**
         * 根据节点ID获取指定参与者的结果
         * @param {?} workItemId
         * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
         * @return {?} 指派信息的数组 re: FlowNodeInfo[]
         */
            function (workItemId, nodeId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/simulation-assigneeInfo?nodeIds=[" + nodeId + "]";
                return this.httpSvc.get(url);
            };
        /**
         * 执行征询、知会
         * @param context 上下文
         */
        /**
         * 执行征询、知会
         * @param {?} context 上下文
         * @return {?}
         */
        TaskService.prototype.addSign = /**
         * 执行征询、知会
         * @param {?} context 上下文
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/counterSignAdd";
                return this.httpSvc.post(url, context);
            };
        /**
         * 已阅
         * @param context 参数
         */
        /**
         * 已阅
         * @param {?} context 参数
         * @return {?}
         */
        TaskService.prototype.readTask = /**
         * 已阅
         * @param {?} context 参数
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/read";
                return this.httpSvc.post(url, context);
            };
        /**
         * 查询单据信息（方法名不要动，其他地方有引用）
         * @param workItemId 工作项Id
         */
        /**
         * 查询单据信息（方法名不要动，其他地方有引用）
         * @param {?} workItemId 工作项Id
         * @return {?}
         */
        TaskService.prototype.getTaskFormInfo = /**
         * 查询单据信息（方法名不要动，其他地方有引用）
         * @param {?} workItemId 工作项Id
         * @return {?}
         */
            function (workItemId) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var cacheCode = "gspWfTaskFormInfo" + workItemId;
                /** @type {?} */
                var taskForm = localStorage.getItem(cacheCode);
                if (taskForm) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        subject.next(JSON.parse(taskForm));
                    }), 10);
                }
                else {
                    /** @type {?} */
                    var formParUrl = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/formInfo";
                    this.httpSvc.get(formParUrl).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        subject.next(re);
                        localStorage.setItem(cacheCode, JSON.stringify(re));
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        subject.error(error);
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 获取指派信息
         * @param taskId 工作项Id
         * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
         */
        /**
         * 获取指派信息
         * @param {?} taskId 工作项Id
         * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
         * @return {?}
         */
        TaskService.prototype.getAssigneeInfo = /**
         * 获取指派信息
         * @param {?} taskId 工作项Id
         * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
         * @return {?}
         */
            function (taskId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + taskId + "/assigneeInfo";
                return this.httpSvc.get(url);
            };
        /**
         * 获取加签移交范围设置
         * @param workItemId
         * @param actionCode
         */
        /**
         * 获取加签移交范围设置
         * @param {?} workItemId
         * @param {?} actionCode
         * @return {?}
         */
        TaskService.prototype.getOrganizationScope = /**
         * 获取加签移交范围设置
         * @param {?} workItemId
         * @param {?} actionCode
         * @return {?}
         */
            function (workItemId, actionCode) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/organizationScope/" + actionCode;
                return this.httpSvc.get(url);
            };
        /**
         * 根据流程实例ID和任务状态办理任务
         * @param procInstId 流程实例id
         * @param state 任务状态 2或5
         */
        /**
         * 根据流程实例ID和任务状态办理任务
         * @param {?} procInstId 流程实例id
         * @param {?} state 任务状态 2或5
         * @return {?}
         */
        TaskService.prototype.getTaskByProcInstId = /**
         * 根据流程实例ID和任务状态办理任务
         * @param {?} procInstId 流程实例id
         * @param {?} state 任务状态 2或5
         * @return {?}
         */
            function (procInstId, state) {
                /** @type {?} */
                var url = "/api/runtime/task/v1.0/tasks/processInstanceId?procInstId=" + procInstId + "&state=" + state;
                return this.httpSvc.get(url);
            };
        /**
         * 根据workitemID获取任务实体
         * @param workItemId
         */
        /**
         * 根据workitemID获取任务实体
         * @param {?} workItemId
         * @return {?}
         */
        TaskService.prototype.getTaskByWorkItemId = /**
         * 根据workitemID获取任务实体
         * @param {?} workItemId
         * @return {?}
         */
            function (workItemId) {
                /** @type {?} */
                var url = "/api/runtime/task/v1.0/tasks/sourceId/" + workItemId;
                return this.httpSvc.get(url);
            };
        /**
         * 根据工作项ID指派任务
         * @param assigneesPa 指派参数
         */
        /**
         * 根据工作项ID指派任务
         * @param {?} assigneesPa 指派参数
         * @return {?}
         */
        TaskService.prototype.assignNextUsersByWorkItemId = /**
         * 根据工作项ID指派任务
         * @param {?} assigneesPa 指派参数
         * @return {?}
         */
            function (assigneesPa) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/assignUser";
                return this.httpSvc.post(url, assigneesPa);
            };
        /**
         * 取回
         * @param workItemId task id
         * @param comment comment
         */
        /**
         * 取回
         * @param {?} context
         * @return {?}
         */
        TaskService.prototype.retrieve = /**
         * 取回
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/retrieve";
                return this.httpSvc.post(url, context);
            };
        /**
         * 任务移交
         * @param taskId 工作项Id
         * @param targetUId 目标用户Id
         */
        /**
         * 任务移交
         * @param {?} transferContext
         * @return {?}
         */
        TaskService.prototype.transfer = /**
         * 任务移交
         * @param {?} transferContext
         * @return {?}
         */
            function (transferContext) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/transfer";
                return this.httpSvc.post(url, transferContext);
            };
        /**
         * 任务评论
         * @param taskId 工作项Id
         * @param targetUId 目标用户Id
         */
        /**
         * 任务评论
         * @param {?} commentContext
         * @return {?}
         */
        TaskService.prototype.comment = /**
         * 任务评论
         * @param {?} commentContext
         * @return {?}
         */
            function (commentContext) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/comment";
                return this.httpSvc.post(url, commentContext);
            };
        /**
         * 领用任务
         * @param taskId 工作项Id
         */
        /**
         * 领用任务
         * @param {?} taskId 工作项Id
         * @param {?} comment
         * @return {?}
         */
        TaskService.prototype.claim = /**
         * 领用任务
         * @param {?} taskId 工作项Id
         * @param {?} comment
         * @return {?}
         */
            function (taskId, comment) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/claim";
                /** @type {?} */
                var options = {
                    workItemId: taskId,
                    comment: comment
                };
                return this.httpSvc.post(url, options);
            };
        /**
         * 取消领用
         * @param taskId 任务Id
         */
        /**
         * 取消领用
         * @param {?} taskId 任务Id
         * @param {?} comment
         * @return {?}
         */
        TaskService.prototype.unClaim = /**
         * 取消领用
         * @param {?} taskId 任务Id
         * @param {?} comment
         * @return {?}
         */
            function (taskId, comment) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/unclaim";
                /** @type {?} */
                var options = {
                    workItemId: taskId,
                    comment: comment
                };
                return this.httpSvc.post(url, options);
            };
        /**
         * 报错提示
         * @param error
         */
        /**
         * 报错提示
         * @param {?} error
         * @return {?}
         */
        TaskService.prototype.error = /**
         * 报错提示
         * @param {?} error
         * @return {?}
         */
            function (error) {
                if (error && error.error && error.error.Message) {
                    /** @type {?} */
                    var message = error.error.Message;
                    this.message.show('warning', message, { safeHtml: false });
                }
            };
        /**
         * 启动流程接口
         * @param payload API所需的上下文参数
         */
        /**
         * 启动流程接口
         * @param {?} payload API所需的上下文参数
         * @return {?}
         */
        TaskService.prototype.startProcess = /**
         * 启动流程接口
         * @param {?} payload API所需的上下文参数
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/startProcess";
                return this.httpSvc.post(url, payload);
            };
        /**
         * 启动流程预解析
         * @param payload API所需的上下文参数
         */
        /**
         * 启动流程预解析
         * @param {?} payload API所需的上下文参数
         * @return {?}
         */
        TaskService.prototype.startProcessSimulate = /**
         * 启动流程预解析
         * @param {?} payload API所需的上下文参数
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/startProcess-simulation";
                return this.httpSvc.post(url, payload);
            };
        /**
         * 取消提交
         * @param param 参数
         */
        /**
         * 取消提交
         * @param {?} param 参数
         * @return {?}
         */
        TaskService.prototype.cancelSubmit = /**
         * 取消提交
         * @param {?} param 参数
         * @return {?}
         */
            function (param) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/cancelSubmit";
                return this.httpSvc.post(url, param);
            };
        /**
         * @return {?}
         */
        TaskService.newId = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var S4 = ( /**
                 * @return {?}
                 */function () { return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); });
                return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
            };
        /**
         * 获取用户常用意见列表
         * @returns
         */
        /**
         * 获取用户常用意见列表
         * @param {?=} filter
         * @return {?}
         */
        TaskService.prototype.getCommentList = /**
         * 获取用户常用意见列表
         * @param {?=} filter
         * @return {?}
         */
            function (filter) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/commonComments";
                filter && filter.type && (url += "?type=" + filter.type);
                return this.httpSvc.get(url);
            };
        /**
         * 添加常用意见
         * @returns
         */
        /**
         * 添加常用意见
         * @param {?} comment
         * @return {?}
         */
        TaskService.prototype.addComment = /**
         * 添加常用意见
         * @param {?} comment
         * @return {?}
         */
            function (comment) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/commonComments";
                return this.httpSvc.post(url, comment);
            };
        /**
         * 删除一条常用意见
         * @param id 常用意见id
         * @returns
         */
        /**
         * 删除一条常用意见
         * @param {?} id 常用意见id
         * @return {?}
         */
        TaskService.prototype.deleteComment = /**
         * 删除一条常用意见
         * @param {?} id 常用意见id
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/commonComments/" + id;
                return this.httpSvc.delete(url, null);
            };
        /**
         * 获取任务中心配置项
         * @param code 配置项的Code
         */
        /**
         * 获取任务中心配置项
         * @param {?} code 配置项的Code
         * @param {?=} ownerType
         * @param {?=} ownerId
         * @return {?}
         */
        TaskService.prototype.getTaskCenterConfigByCode = /**
         * 获取任务中心配置项
         * @param {?} code 配置项的Code
         * @param {?=} ownerType
         * @param {?=} ownerId
         * @return {?}
         */
            function (code, ownerType, ownerId) {
                /** @type {?} */
                var url = "/api/runtime/task/v1.0/task-center-setting/code?code=" + code;
                ownerType && (url += "&ownerType=" + ownerType);
                ownerId && (url += "&ownerId=" + ownerId);
                return this.httpSvc.get(url);
            };
        /**
         * 获取系统级别配置（缓存为一天）
         */
        /**
         * 获取系统级别配置（缓存为一天）
         * @return {?}
         */
        TaskService.prototype.getAllTaskCenterConfig = /**
         * 获取系统级别配置（缓存为一天）
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var code = "gspWfTaskAllConfig";
                /** @type {?} */
                var todayCode = code + this.getCurrentDateString();
                /** @type {?} */
                var configStr = localStorage.getItem(todayCode);
                if (configStr) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        subject.next(JSON.parse(configStr));
                    }), 10);
                }
                else {
                    /** @type {?} */
                    var url = "/api/runtime/task/v1.0/task-center-setting/all?ownerType=all&ownerId=*";
                    this.httpSvc.get(url).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        localStorage.setItem(todayCode, JSON.stringify(re));
                        subject.next(re);
                        _this.removeConfig(code);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        subject.error(error);
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 获取任务分类级别配置
         */
        /**
         * 获取任务分类级别配置
         * @param {?} categoryId
         * @return {?}
         */
        TaskService.prototype.getTaskCategoryCenterConfig = /**
         * 获取任务分类级别配置
         * @param {?} categoryId
         * @return {?}
         */
            function (categoryId) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var code = "gspWfTaskCategoryConfig" + categoryId;
                /** @type {?} */
                var todayCode = code + this.getCurrentDateString();
                /** @type {?} */
                var configStr = localStorage.getItem(todayCode);
                if (configStr) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        subject.next(JSON.parse(configStr));
                    }), 10);
                }
                else {
                    /** @type {?} */
                    var url = "/api/runtime/task/v1.0/task-center-setting/all";
                    url += "?ownerType=category&ownerId=" + categoryId;
                    this.httpSvc.get(url).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        localStorage.setItem(todayCode, JSON.stringify(re));
                        subject.next(re);
                        _this.removeConfig(code);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        subject.error(error);
                    }));
                }
                return subject.asObservable();
            };
        /**
        * 获取任务中心个人用户配置（缓存为一天）
        */
        /**
         * 获取任务中心个人用户配置（缓存为一天）
         * @return {?}
         */
        TaskService.prototype.getAllUserConfig = /**
         * 获取任务中心个人用户配置（缓存为一天）
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var code = "gspWfTaskUserConfig";
                /** @type {?} */
                var todayCode = code + this.getCurrentDateString();
                /** @type {?} */
                var configStr = localStorage.getItem(todayCode);
                if (configStr) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        subject.next(JSON.parse(configStr));
                    }), 10);
                }
                else {
                    /** @type {?} */
                    var url = "/api/runtime/task/v1.0/task-center-setting/all";
                    this.httpSvc.get(url).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        localStorage.setItem(todayCode, JSON.stringify(re));
                        _this.removeConfig(code);
                        subject.next(re);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        subject.error(error);
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 添加用户级别自定义配置
         * @param code 配置项编号
         */
        /**
         * 添加用户级别自定义配置
         * @param {?} code 配置项编号
         * @param {?} currentValue
         * @return {?}
         */
        TaskService.prototype.addUserConfig = /**
         * 添加用户级别自定义配置
         * @param {?} code 配置项编号
         * @param {?} currentValue
         * @return {?}
         */
            function (code, currentValue) {
                /** @type {?} */
                var configCode = "gspWfTaskUserConfig";
                /** @type {?} */
                var todayCode = configCode + this.getCurrentDateString();
                /** @type {?} */
                var configStr = localStorage.getItem(todayCode);
                if (configStr) {
                    /** @type {?} */
                    var list = JSON.parse(configStr);
                    if (list && list.length) {
                        /** @type {?} */
                        var item = (( /** @type {?} */(list))).find(( /**
                         * @param {?} l
                         * @return {?}
                         */function (l) { return l.configCode == code; }));
                        if (item) {
                            item.currentValue = currentValue;
                            localStorage.setItem(todayCode, JSON.stringify(list));
                        }
                    }
                }
                /** @type {?} */
                var url = "/api/runtime/task/v1.0/task-center-setting/add?configCode=" + code + "&currentValue=" + currentValue;
                return this.httpSvc.post(url, null);
            };
        /**
         * 获取用户头像（已被任务中心调用）
         * @param userId 用户ID
         */
        /**
         * 获取用户头像（已被任务中心调用）
         * @param {?} userId 用户ID
         * @return {?}
         */
        TaskService.prototype.getUserAvatar = /**
         * 获取用户头像（已被任务中心调用）
         * @param {?} userId 用户ID
         * @return {?}
         */
            function (userId) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var code = "gspWfTaskUserAvatar";
                /** @type {?} */
                var todayCode = code + this.getCurrentDateString();
                /** @type {?} */
                var todayUserCode = todayCode + userId;
                /** @type {?} */
                var avatarStr = localStorage.getItem(todayUserCode);
                if (avatarStr) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        subject.next(JSON.parse(avatarStr));
                    }), 100);
                }
                else {
                    /** @type {?} */
                    var url = "/api/runtime/sys/v1.0/userinfos/setting/users?userId=" + userId;
                    this.httpSvc.get(url).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        subject.next(re);
                        localStorage.setItem(todayUserCode, JSON.stringify(re));
                        _this.removeConfig(code);
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 获取当前日期
         */
        /**
         * 获取当前日期
         * @return {?}
         */
        TaskService.prototype.getCurrentDateString = /**
         * 获取当前日期
         * @return {?}
         */
            function () {
                /** @type {?} */
                var date = new Date();
                /** @type {?} */
                var year = date.getFullYear().toString();
                /** @type {?} */
                var month = (date.getMonth() + 1).toString();
                /** @type {?} */
                var day = date.getDate().toString();
                return year + month + day;
            };
        /**
         * 移除localStorage缓存
         * @param key
         */
        /**
         * 移除localStorage缓存
         * @private
         * @param {?} key
         * @return {?}
         */
        TaskService.prototype.removeConfig = /**
         * 移除localStorage缓存
         * @private
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var todayKey = key + this.getCurrentDateString();
                for (var item in localStorage) {
                    if (item.indexOf(key) > -1 && item.indexOf(todayKey) < 0) {
                        localStorage.removeItem(item);
                    }
                }
            };
        /**
         * 真正上传附件
         * @param files
         */
        /**
         * 真正上传附件
         * @param {?} files
         * @return {?}
         */
        TaskService.prototype.uploadAttachment = /**
         * 真正上传附件
         * @param {?} files
         * @return {?}
         */
            function (files) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc/commit";
                return this.httpSvc.put(url, files);
            };
        /**
         * 删除附件
         * @param fileDeleteEntity
         */
        /**
         * 删除附件
         * @param {?} fileDeleteEntity
         * @return {?}
         */
        TaskService.prototype.deleteAttachment = /**
         * 删除附件
         * @param {?} fileDeleteEntity
         * @return {?}
         */
            function (fileDeleteEntity) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc";
                return this.httpSvc.delete(url, fileDeleteEntity);
            };
        /**
         * 创建内码
         */
        /**
         * 创建内码
         * @return {?}
         */
        TaskService.prototype.createNM = /**
         * 创建内码
         * @return {?}
         */
            function () {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, ( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) {
                    /** @type {?} */
                    var r = Math.random() * 16 | 0;
                    /** @type {?} */
                    var v = c === 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                }));
            };
        /**
         * 获取当前用户信息
         */
        /**
         * 获取当前用户信息
         * @return {?}
         */
        TaskService.prototype.getUserInfo = /**
         * 获取当前用户信息
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = "/api/runtime/sys/v1.0/userinfos?infoType=user";
                return this.httpSvc.get(url);
            };
        /**
         * 获取用户所有签名
         */
        /**
         * 获取用户所有签名
         * @param {?} userId
         * @return {?}
         */
        TaskService.prototype.getUserSignId = /**
         * 获取用户所有签名
         * @param {?} userId
         * @return {?}
         */
            function (userId) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var code = 'gspWfTaskUserSign' + userId;
                /** @type {?} */
                var todayCode = code + this.getCurrentDateString();
                /** @type {?} */
                var signId = localStorage.getItem(todayCode);
                if (signId) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        subject.next(signId);
                    }), 100);
                }
                else {
                    /** @type {?} */
                    var url = "/api/runtime/dfs/v1.0/formdoc/fileinfo/form?formid=" + userId + "&rootid=taskcentersignature";
                    this.httpSvc.get(url).subscribe(( /**
                     * @param {?} result
                     * @return {?}
                     */function (result) {
                        if (result && result.length) {
                            /** @type {?} */
                            var sign;
                            if (result.length == 1) {
                                sign = result[0];
                            }
                            else {
                                /** @type {?} */
                                var list = result.filter(( /**
                                 * @param {?} a
                                 * @return {?}
                                 */function (a) { return a && a.lastModifiedTime; }));
                                sign = list.reduce(( /**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */function (a, b) {
                                    return a.lastModifiedTime > b.lastModifiedTime ? a : b;
                                }));
                            }
                            subject.next(sign.id);
                            localStorage.setItem(todayCode, sign.id);
                            _this.removeConfig(code);
                        }
                        else {
                            subject.next('');
                        }
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        subject.error(error);
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 上传签名，返回长传后的签名id
         */
        /**
         * 上传签名，返回长传后的签名id
         * @param {?} gspDocUploadEntity
         * @return {?}
         */
        TaskService.prototype.uploadSignature = /**
         * 上传签名，返回长传后的签名id
         * @param {?} gspDocUploadEntity
         * @return {?}
         */
            function (gspDocUploadEntity) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc";
                /** @type {?} */
                var header = this.httpSvc.setHeader({
                    body: gspDocUploadEntity,
                    responseType: 'text'
                });
                return this.httpSvc.request('Post', url, header);
            };
        /**
         * 解析文件类型，给出缩略图
         * @param attachmentInfo
         */
        /**
         * 解析文件类型，给出缩略图
         * @param {?} attachmentInfo
         * @return {?}
         */
        TaskService.prototype.createItem = /**
         * 解析文件类型，给出缩略图
         * @param {?} attachmentInfo
         * @return {?}
         */
            function (attachmentInfo) {
                /** @type {?} */
                var pos = attachmentInfo.fileName.lastIndexOf(".");
                /** @type {?} */
                var type = attachmentInfo.fileName.substring(pos + 1);
                type = (type == '' ? 'Default' : type.toLowerCase());
                /** @type {?} */
                var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
                /** @type {?} */
                var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
                /** @type {?} */
                var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
                /** @type {?} */
                var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
                if (docLib.indexOf(type) >= 0) {
                    type = type.toLowerCase();
                }
                else if (videoLib.indexOf(type) >= 0) {
                    type = 'video';
                }
                else if (audioLib.indexOf(type) >= 0) {
                    type = 'audio';
                }
                else if (imgLib.indexOf(type) >= 0) {
                    type = 'picture';
                }
                else {
                    type = 'default';
                }
                return type;
            };
        /**
         * 注册主题，并获取当前主题唯一标识token
         * @param subjectCode 主题编码，非唯一标识，token为唯一标识
         * @param token 主题唯一标识。
         * @returns 主题的唯一标识。
         */
        /**
         * 注册主题，并获取当前主题唯一标识token
         * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
         * @param {?} token 主题唯一标识。
         * @return {?} 主题的唯一标识。
         */
        TaskService.prototype.subjectRegister = /**
         * 注册主题，并获取当前主题唯一标识token
         * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
         * @param {?} token 主题唯一标识。
         * @return {?} 主题的唯一标识。
         */
            function (subjectCode, token) {
                return (( /** @type {?} */(window))).gspframeworkService.rtf.broadcast.subjectRegister(subjectCode, { funcId: token });
            };
        /**
         * 监听移除
         * @param token
         */
        /**
         * 监听移除
         * @param {?} token
         * @return {?}
         */
        TaskService.prototype.subjectRemove = /**
         * 监听移除
         * @param {?} token
         * @return {?}
         */
            function (token) {
                (( /** @type {?} */(window))).gspframeworkService.rtf.broadcast.subjectRemove(token);
            };
        /**
         * 通过某个token发送消息
         * @param subjectToken 主题唯一的token标识
         * @param message 要发送的消息
         */
        /**
         * 通过某个token发送消息
         * @param {?} subjectToken 主题唯一的token标识
         * @param {?} message 要发送的消息
         * @return {?}
         */
        TaskService.prototype.subjectNotify = /**
         * 通过某个token发送消息
         * @param {?} subjectToken 主题唯一的token标识
         * @param {?} message 要发送的消息
         * @return {?}
         */
            function (subjectToken, message) {
                (( /** @type {?} */(window))).gspframeworkService.rtf.broadcast.notify(subjectToken, message);
            };
        /**
         * 添加观察者，并监听消息
         * @param subjectToken 主题token
         * @param observerToken 当前监听主题的观察者唯一标识token。此处固定
         * @param handler 监听到消息后执行的动作
         */
        /**
         * 添加观察者，并监听消息
         * @param {?} subjectToken 主题token
         * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
         * @param {?} handler 监听到消息后执行的动作
         * @return {?}
         */
        TaskService.prototype.subjectResponse = /**
         * 添加观察者，并监听消息
         * @param {?} subjectToken 主题token
         * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
         * @param {?} handler 监听到消息后执行的动作
         * @return {?}
         */
            function (subjectToken, observerToken, handler) {
                (( /** @type {?} */(window))).gspframeworkService.rtf.broadcast.response(subjectToken, observerToken, handler);
            };
        /**
         * 获取催办模拟结果
         * @param context 参数
         * @returns
         */
        /**
         * 获取催办模拟结果
         * @param {?} context 参数
         * @return {?}
         */
        TaskService.prototype.urgeHandleSimulate = /**
         * 获取催办模拟结果
         * @param {?} context 参数
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/getUrgeHandleInfo";
                return this.httpSvc.post(url, context);
            };
        /**
         * 执行催办
         * @param context 参数
         * @returns
         */
        /**
         * 执行催办
         * @param {?} context 参数
         * @return {?}
         */
        TaskService.prototype.urgeHandle = /**
         * 执行催办
         * @param {?} context 参数
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/urgeHandle";
                return this.httpSvc.post(url, context);
            };
        /**批量数字签名
         * @param context 参数
         */
        /**
         * 批量数字签名
         * @param {?} context 参数
         * @return {?}
         */
        TaskService.prototype.batchVerifySigned = /**
         * 批量数字签名
         * @param {?} context 参数
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/batchVerifySigned";
                return this.httpSvc.post(url, context);
            };
        /**
         * 获取用户帮助前端配置
         * @returns
         */
        /**
         * 获取用户帮助前端配置
         * @return {?}
         */
        TaskService.prototype.getWfUserHelpConfig = /**
         * 获取用户帮助前端配置
         * @return {?}
         */
            function () {
                /** @type {?} */
                var date = new Date();
                /** @type {?} */
                var year = date.getFullYear();
                /** @type {?} */
                var month = date.getMonth() + 1;
                /** @type {?} */
                var day = date.getDate();
                /** @type {?} */
                var url = "/platform/runtime/wf/web/wf-user-help/config.json?v=" + year + month + day;
                return this.httpSvc.get(url);
            };
        /**
         * 获取加签配置
         */
        /**
         * 获取加签配置
         * @param {?} workItemId
         * @return {?}
         */
        TaskService.prototype.getAdhocConfig = /**
         * 获取加签配置
         * @param {?} workItemId
         * @return {?}
         */
            function (workItemId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/adhocConfig/AddSignBehind";
                return this.httpSvc.get(url);
            };
        /**
         * 加签提交
         */
        /**
         * 加签提交
         * @param {?} payload
         * @return {?}
         */
        TaskService.prototype.adhocAssignee = /**
         * 加签提交
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/adhocAssignee";
                return this.httpSvc.post(url, payload);
            };
        /**
         * 取消征询
         */
        /**
         * 取消征询
         * @param {?} payload
         * @return {?}
         */
        TaskService.prototype.cancelConsult = /**
         * 取消征询
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/cancelConsult";
                return this.httpSvc.post(url, payload);
            };
        /**
         * 判断是否inSuite环境
         */
        /**
         * 判断是否inSuite环境
         * @return {?}
         */
        TaskService.prototype.isInSuite = /**
         * 判断是否inSuite环境
         * @return {?}
         */
            function () {
                /** @type {?} */
                var frameWorkService = (( /** @type {?} */(window))).gspframeworkService;
                if (frameWorkService && frameWorkService.rtf) {
                    /** @type {?} */
                    var extendMethod = frameWorkService.rtf.extendMethod;
                    if (extendMethod && extendMethod.getExtObj()) {
                        /** @type {?} */
                        var extObj = extendMethod.getExtObj();
                        /** @type {?} */
                        var mode = extObj.iGIX4inSuiteMode();
                        if (mode) {
                            return true;
                        }
                    }
                }
                return false;
            };
        /**
         * 获取字符串字节长度
         */
        /**
         * 获取字符串字节长度
         * @param {?} str
         * @return {?}
         */
        TaskService.prototype.getBytesLength = /**
         * 获取字符串字节长度
         * @param {?} str
         * @return {?}
         */
            function (str) {
                // 在GBK编码里，除了ASCII字符，其它都占两个字符宽
                return str.replace(/[^\x00-\xff]/g, 'xx').length;
            };
        /**
         * 获取top window
         * @returns
         */
        /**
         * 获取top window
         * @return {?}
         */
        TaskService.prototype.getTopWindow = /**
         * 获取top window
         * @return {?}
         */
            function () {
                /** @type {?} */
                var curWin = window.self;
                try {
                    while (curWin.location.origin === curWin.parent.location.origin) {
                        if (curWin !== curWin.parent && !(( /** @type {?} */(curWin))).isRTFTopWin) {
                            curWin = curWin.parent;
                        }
                        else {
                            break;
                        }
                    }
                }
                catch (e) { }
                return curWin;
            };
        /**
         * 弹出错误提示
         * @param error
         */
        /**
         * 弹出错误提示
         * @param {?} errorMessage
         * @return {?}
         */
        TaskService.prototype.handleErrorLevel = /**
         * 弹出错误提示
         * @param {?} errorMessage
         * @return {?}
         */
            function (errorMessage) {
                var _this = this;
                if (errorMessage && errorMessage.status < 500) {
                    return;
                }
                /** @type {?} */
                var error = ( /** @type {?} */(errorMessage.error));
                /** @type {?} */
                var exceptionMsg = error.Message || '';
                /** @type {?} */
                var date = error.date || new Date();
                /** @type {?} */
                var localDate = date;
                /** @type {?} */
                var detail = error.Detail || error.Message + "\r\n\u53D1\u751F\u65F6\u95F4\uFF1A" + localDate + "\r\n\u8BE6\u7EC6\u4FE1\u606F\uFF1A" + error.innerMessage || '';
                /** @type {?} */
                var innerMessage = error.innerMessage || null;
                /** @type {?} */
                var bsModalRef;
                /** @type {?} */
                var options = {
                    showMaxButton: false,
                    buttons: [
                        {
                            text: '知道了',
                            cls: 'btn btn-primary btn-lg',
                            handle: ( /**
                             * @return {?}
                             */function () {
                                bsModalRef.close();
                            })
                        }
                    ],
                    width: 440,
                    height: 200,
                    safeHtml: false,
                    exception: {
                        date: localDate,
                        message: innerMessage,
                        copyButton: {
                            text: '复制详细信息',
                            onClick: ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                /** @type {?} */
                                var result = _this.copyToClipboard(detail);
                                bsModalRef.content.showMiniNotify(result, 1500);
                            })
                        }
                    }
                };
                bsModalRef = this.message.show('exception', exceptionMsg, options);
            };
        /**
         * 赋值到粘贴板
         * @param text
         * @returns
         */
        /**
         * 赋值到粘贴板
         * @private
         * @param {?} text
         * @return {?}
         */
        TaskService.prototype.copyToClipboard = /**
         * 赋值到粘贴板
         * @private
         * @param {?} text
         * @return {?}
         */
            function (text) {
                /** @type {?} */
                var windowRef = window;
                if (windowRef.clipboardData && windowRef.clipboardData.setData) {
                    return windowRef.clipboardData.setData("Text", text);
                }
                else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
                    /** @type {?} */
                    var textarea = document.createElement("textarea");
                    textarea.textContent = text;
                    textarea.style.position = "fixed";
                    document.body.appendChild(textarea);
                    textarea.select();
                    try {
                        return document.execCommand("copy");
                    }
                    catch (ex) {
                        console.warn("Copy to clipboard failed.", ex);
                    }
                    finally {
                        document.body.removeChild(textarea);
                    }
                }
                return false;
            };
        TaskService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TaskService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService },
                { type: uiMessager.MessagerService }
            ];
        };
        return TaskService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 任务动作定义
     */
    var /**
     * 任务动作定义
     */ TaskActionDef = /** @class */ (function () {
        function TaskActionDef() {
        }
        return TaskActionDef;
    }());
    /**
     * 任务动作定义
     */
    var /**
     * 任务动作定义
     */ TaskAction = /** @class */ (function (_super) {
        __extends(TaskAction, _super);
        function TaskAction() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TaskAction;
    }(TaskActionDef));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var en = {
        static: {
            assignee: {
                noAssignee: 'Please select at least one approver.',
            },
            columnName: {
                name: 'Name',
                code: 'Code',
                department: 'Department',
            },
            title: 'Approval confirmation',
            inputLabel: 'Approval comments',
            inputHolder: 'comments',
            footOk: 'OK',
            footCancel: 'Cancel',
            selectUser: 'Select User',
            hideComment: 'Hide comment',
            taskForm: 'Task Handle',
            success: ' success'
        },
        cueWords: {
            successPass: 'Approved successfully.',
            inputOpinion: 'Please input your opinion',
            selectNode: 'Please select target nodes',
            select: 'Please select',
            processor: 'processor',
            attachmentsRequired: 'Please upload the attachment',
            signatureRequired: 'Please upload the signature',
            assignUser: 'Assign user',
            operateSuccess: 'Operate successfully',
            commonCommentTooLong: 'Comment is too long',
        },
        task: {
            selectPlaceholder: 'Please select',
            passComment: 'Pass',
            processAlone: 'Please handle it separately',
            urgeText: 'Receiver',
            backNodeText: ' node',
            selectProcessor: 'Please select the user',
            notFoundBill: 'This document cannot be processed on the computer. Please try to process it on the mobile terminal',
            nextNodeText: 'Next node',
            assignText: 'Assign to',
            noUser: 'No one',
            title: 'Handle Task',
            noTask: 'There is no task.',
            commentTooLong: 'Comments exceed the 4000 English character limit, it is recommended to submit comments by uploading attachments',
            activityName: 'processor',
            receiver: 'receiver',
            urgeComment: "Please input your comment",
            noUrgeUsers: "There is no user to urge handle",
            noUrgeSubject: "no urge subject",
            noUrgeContent: "no urge content",
            person: " people",
            addSign: "Add sign",
            priority: "Priority",
            selectPriority: "Please select the priority"
        },
        startProcess: {
            selectProcess: 'Please select process',
            title: 'Select process',
            selectNode: 'Please select next node',
            submitSuccess: 'Start process successfully',
            submitFailed: 'Start process failed',
            cancelSubmitSuccess: 'Cancel submit successfully',
            cancelSubmitFailed: 'Cancel submit failed',
            dataIdIsNull: 'Please select a data',
            dataIdIsEmpty: 'Please select a data',
            bizDefKeyIsNull: 'Biz definition key is null',
            success: 'Success',
            row: '',
            failed: ', failed',
            node: 'node, ',
            noUser: 'no suitable handler was found',
            cancelSubmitInfo: 'Please resubmit',
            procDef: 'Process',
            processTowards: 'Process towards',
            otherNodesAssign: 'Assign other nodes'
        },
        batchSubmit: {
            row: '',
            success: 'Success',
            error: 'Error',
            failed: 'Failed',
            validationFailed: 'Signature verification failed',
            single: 'Failed tasks please process it singly',
            selected: 'Selected',
            item: 'items,',
            time: 'time more than',
            second: 'seconds'
        },
        batchStartProcess: {
            row: '<br/>',
            success: 'Success',
            error: 'Error',
            failed: 'Failed',
            single: 'Failed tasks please process it singly'
        },
        comment: {
            static: {
                title: 'Approval comments',
                add: 'Add',
                delete: 'Delete',
                save: 'Save',
                cancel: 'Cancel',
                content: 'Content',
                order: 'Order',
                inputLabel: 'Comments',
                manage: 'Comments management',
                attachmentUpload: 'Attachment',
                repeatFile: 'Contains repeat files:',
                type: 'Type',
                operate: 'Operate',
                confirm: 'Confirm',
                clickToAdd: 'Click to add',
                public: 'public',
                private: 'private',
                messageSubject: 'message subject',
                messageContent: 'message content',
                comment: 'Comments',
                tooLongTips: 'exceed the 4000 English character limit, it is recommended to submit comments by uploading attachments'
            },
            attachment: {
                tips: 'click to upload attachments'
            },
            signature: {
                title: 'Signature',
                reset: 'Reset',
                ok: 'OK',
                sign: 'Sign, ',
                upload: 'Upload',
                tips: 'click to sign or upload a picture',
                dialogTitle: 'Signature',
                note1: '',
                note2: 'or',
                note3: '',
                disable: 'disable signature',
                download: "download",
                view: "view",
                delete: "delete"
            }
        },
        addSign: {
            allowSignToSign: 'Allow',
            multiInstanceType: 'Multi instance type',
            parallel: 'parallel',
            preempt: 'preempt',
            sequential: 'sequential'
        },
        backWardConfig: {
            sequence: 'Sequence',
            backToMe: 'Back to me',
            backToCurrentNode: 'Back to current node',
            allowResubmitToThisNode: ',resubmit to this node'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zh_CHT = {
        static: {
            assignee: {
                noAssignee: '請選擇辦理人員',
            },
            columnName: {
                name: '名稱',
                code: '編號',
                department: '組織信息',
            },
            title: '審批確認',
            inputLabel: '審批意見',
            inputHolder: '請輸入審批意見',
            footOk: '確定',
            footCancel: '取消',
            selectUser: '選擇用戶',
            hideComment: '意見隱藏',
            taskForm: '任务办理',
            success: '成功'
        },
        cueWords: {
            successPass: '審批通過',
            inputOpinion: '請輸入審批意見',
            selectNode: '請選擇下一環節',
            select: '請選擇',
            processor: '辦理人',
            attachmentsRequired: '請上傳附件',
            signatureRequired: '請設置簽名',
            assignUser: '指派',
            operateSuccess: '操作成功',
            commonCommentTooLong: '意見超長（最長255字符），請重新編輯',
        },
        task: {
            selectPlaceholder: '請選擇',
            passComment: '通過',
            processAlone: '請單獨處理',
            urgeText: '接收人员',
            backNodeText: '節點',
            selectProcessor: '請選擇辦理人員',
            notFoundBill: '該單據不支持在電腦端辦理，請嘗試去移動端進行辦理',
            nextNodeText: '下一環節',
            assignText: '辦理人員',
            noUser: '無',
            title: '任務辦理',
            noTask: '未找到對應的任務',
            commentTooLong: '處理意見超出 4000 個英文字符限制，建議以附件方式提交意見',
            activityName: '辦理人員',
            receiver: "接收人員",
            urgeComment: "請輸入催辦信息",
            noUrgeUsers: "沒有符合條件的催辦用戶",
            noUrgeSubject: "消息主題未配置",
            noUrgeContent: "消息內容未配置",
            person: "人员",
            addSign: "加签",
            priority: "紧急程度",
            selectPriority: "请选择紧急程度"
        },
        startProcess: {
            selectProcess: '請選擇流程',
            title: '提交確認',
            selectNode: '請選擇下一環節',
            submitSuccess: '提交審批成功',
            submitFailed: '提交審批失敗',
            cancelSubmitSuccess: '取消提交成功',
            cancelSubmitFailed: '取消提交失敗',
            dataIdIsNull: '請選擇一條數據',
            dataIdIsEmpty: '請選擇一條數據',
            bizDefKeyIsNull: '流程分類ID不能為空',
            success: '取消成功',
            row: '條<br/>',
            failed: '取消失敗',
            node: '節點，',
            noUser: '沒有找到合適的辦理人',
            cancelSubmitInfo: '已撤回至流程的開始節點，請修改後重新提交',
            procDef: '流程定义',
            processTowards: '即將流向',
            otherNodesAssign: '指定其他節點辦理人'
        },
        batchSubmit: {
            row: '條，<br/>',
            success: '辦理成功',
            error: '辦理失敗',
            failed: '需要交互',
            single: '失敗的任務請單獨處理',
            selected: '已選中',
            item: '項，',
            time: '預計處理時間較長（大於',
            second: '秒）'
        },
        batchStartProcess: {
            row: '條，<br/>',
            success: '提交成功',
            error: '提交失敗',
            failed: '需要交互',
            validationFailed: '驗簽失敗',
            single: '失敗的單據請單獨處理'
        },
        comment: {
            static: {
                title: '常用意見管理',
                add: '新增',
                delete: '刪除',
                save: '保存',
                cancel: '取消',
                content: '常用意見',
                order: '順序',
                inputLabel: '常用意見',
                manage: '意見管理',
                attachmentUpload: '附件',
                repeatFile: '包含重復文件：',
                type: '類別',
                operate: '操作',
                confirm: '確認',
                clickToAdd: '新增常用意見',
                public: '公有',
                private: '個人',
                messageSubject: '消息主題',
                messageContent: '消息內容',
                comment: '處理意見',
                tooLongTips: '超出 4000 個英文字符限制，建議以附件方式提交意見'
            },
            attachment: {
                tips: '點擊上傳附件'
            },
            signature: {
                title: '簽名',
                reset: '清空',
                ok: '確定',
                sign: '手寫簽名，',
                upload: '上傳圖片',
                tips: '點擊設置簽名',
                dialogTitle: '電子簽名',
                note1: '電子簽名可',
                note2: '也可通過',
                note3: '進行設置',
                disable: '不啟用簽名',
                download: "下載",
                view: "查看",
                delete: "删除"
            }
        },
        addSign: {
            allowSignToSign: '允許再',
            multiInstanceType: '多人審批方式',
            parallel: '並行會簽',
            preempt: '任意人處理',
            sequential: '按順序依次處理'
        },
        backWardConfig: {
            sequence: '按順序流轉',
            backToMe: '返回我',
            backToCurrentNode: '返回本節點',
            allowResubmitToThisNode: '后再次提交时直接回到本节点'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zh_CHS = {
        static: {
            assignee: {
                noAssignee: '请选择办理人员',
            },
            columnName: {
                name: '名称',
                code: '编号',
                department: '组织信息',
            },
            title: '审批确认',
            inputLabel: '审批意见',
            inputHolder: '请输入审批意见',
            footOk: '确定',
            footCancel: '取消',
            selectUser: '选择用户',
            hideComment: '意见隐藏',
            taskForm: '任务办理',
            success: '成功'
        },
        cueWords: {
            successPass: '审批通过',
            inputOpinion: '请输入审批意见',
            selectNode: '请选择下一环节',
            select: '请选择',
            processor: '办理人',
            attachmentsRequired: '请上传附件',
            signatureRequired: '请设置签名',
            assignUser: '指派',
            operateSuccess: '操作成功',
            commonCommentTooLong: '意见超长（最长255字符），请重新编辑',
        },
        task: {
            selectPlaceholder: '请选择',
            passComment: '通过',
            processAlone: '请单独处理',
            urgeText: '接收人员',
            backNodeText: '节点',
            selectProcessor: '请选择办理人员',
            notFoundBill: '该单据不支持在电脑端办理，请尝试去移动端进行办理',
            nextNodeText: '下一环节',
            assignText: '办理人员',
            noUser: '无',
            title: '任务办理',
            noTask: '未找到对应的任务',
            commentTooLong: '处理意见超出 4000 个英文字符限制，建议以附件方式提交意见',
            activityName: '办理人员',
            receiver: "接收人员",
            urgeComment: "请输入催办信息",
            noUrgeUsers: "没有符合条件的催办用户",
            noUrgeSubject: "消息主题未配置",
            noUrgeContent: "消息内容未配置",
            person: "人员",
            addSign: "加签",
            priority: "紧急程度",
            selectPriority: "请选择紧急程度"
        },
        startProcess: {
            selectProcess: '请选择流程',
            title: '提交确认',
            selectNode: '请选择下一环节',
            submitSuccess: '提交审批成功',
            submitFailed: '提交审批失败',
            cancelSubmitSuccess: '取消提交成功',
            cancelSubmitFailed: '取消提交失败',
            dataIdIsNull: '请选择一条数据',
            dataIdIsEmpty: '请选择一条数据',
            bizDefKeyIsNull: '流程分类ID不能为空',
            success: '取消成功',
            row: '条<br/>',
            failed: '取消失败',
            node: '节点，',
            noUser: '没有找到合适的办理人',
            cancelSubmitInfo: '已撤回至流程的开始节点，请修改后重新提交',
            procDef: '流程定义',
            processTowards: '即将流向',
            otherNodesAssign: '指定其他节点办理人'
        },
        batchSubmit: {
            row: '条，<br/>',
            success: '办理成功',
            error: '办理失败',
            failed: '需要交互',
            single: '失败的任务请单独处理',
            selected: '已选择',
            item: '项，',
            time: '预计处理时间较长（大于',
            second: '秒）'
        },
        batchStartProcess: {
            row: '条，<br/>',
            success: '提交成功',
            error: '提交失败',
            failed: '需要交互',
            validationFailed: '验签失败',
            single: '失败的单据请单独处理'
        },
        comment: {
            static: {
                title: '常用意见管理',
                add: '新增',
                delete: '删除',
                save: '保存',
                cancel: '取消',
                content: '常用意见',
                order: '顺序',
                inputLabel: '常用意见',
                manage: '意见管理',
                attachmentUpload: '附件',
                repeatFile: '包含重复文件：',
                type: '类别',
                operate: '操作',
                confirm: '确认',
                clickToAdd: '新增常用意见',
                public: '公有',
                private: '个人',
                messageSubject: '消息主题',
                messageContent: '消息内容',
                comment: '处理意见',
                tooLongTips: '超出 4000 个英文字符限制，建议以附件方式提交意见'
            },
            attachment: {
                tips: '点击上传附件'
            },
            signature: {
                title: '签名',
                reset: '清空',
                ok: '确定',
                sign: '手写签名，',
                upload: '上传图片',
                tips: '点击设置签名',
                dialogTitle: '电子签名',
                note1: '电子签名可',
                note2: '也可通过',
                note3: '进行设置',
                disable: '不启用签名',
                download: "下载",
                view: "查看",
                delete: "删除"
            }
        },
        addSign: {
            allowSignToSign: '允许再',
            multiInstanceType: '多人审批方式',
            parallel: '并行会签',
            preempt: '任意人处理',
            sequential: '按顺序依次处理'
        },
        backWardConfig: {
            sequence: '按顺序流转',
            backToMe: '返回我',
            backToCurrentNode: '返回本节点',
            title: '驳回的节点通过后',
            allowResubmitToThisNode: '后再次提交时直接回到本节点'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var translate = {
        'zh-CHS': zh_CHS,
        'en': en,
        'zh-CHT': zh_CHT
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nService = /** @class */ (function () {
        function I18nService() {
            this.defaultLang = localStorage.getItem('languageCode');
            if (!this.defaultLang) {
                this.langData = translate['zh-CHS'];
            }
            else {
                this.langData = translate[this.defaultLang];
            }
        }
        /**
         * @param {?} name
         * @return {?}
         */
        I18nService.prototype.getValue = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!name) {
                    return '';
                }
                /** @type {?} */
                var resultVal = '';
                if (name.indexOf('.') === -1) {
                    resultVal = this.langData[name];
                }
                else {
                    resultVal = name.split('.').reduce(( /**
                     * @param {?} obj
                     * @param {?} key
                     * @return {?}
                     */function (obj, key) {
                        if (obj) {
                            return obj[key];
                        }
                        else {
                            return null;
                        }
                    }), this.langData);
                }
                return resultVal;
            };
        I18nService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        I18nService.ctorParameters = function () { return []; };
        return I18nService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 任务实体定义
     */
    var /**
     * 任务实体定义
     */ TaskEntity = /** @class */ (function () {
        function TaskEntity() {
        }
        return TaskEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CompleteContext = /** @class */ (function () {
        function CompleteContext() {
        }
        return CompleteContext;
    }());
    var Addendum = /** @class */ (function () {
        function Addendum() {
        }
        return Addendum;
    }());
    var VerifySigned = /** @class */ (function () {
        function VerifySigned() {
        }
        return VerifySigned;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 指定参与者信息：需要指定参与者的活动、待指定用户列表
     */
    var /**
     * 指定参与者信息：需要指定参与者的活动、待指定用户列表
     */ AssigneeInfo = /** @class */ (function () {
        function AssigneeInfo() {
        }
        return AssigneeInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ConfigCode = {
        If_Show_Submit_Dialog: 'If_Show_Submit_Dialog',
        Info_After_Submit: 'Info_After_Submit',
        Info_After_Cancel_Submit: 'Info_After_Cancel_Submit',
        If_Use_Sign_By_Default: 'If_Use_Sign_By_Default',
        If_Show_Attachment: 'If_Show_Attachment',
        If_Show_Signature: 'If_Show_Signature',
        Default_Approval_Comment: 'Default_Approval_Comment',
        If_Store_Comment: 'If_Store_Comment',
        User_Help_Type: 'User_Help_Type',
        If_Can_Edit_Signature: 'If_Can_Edit_Signature',
    };
    /** @enum {string} */
    var OwnerType = {
        User: 'user',
        Category: 'category',
        BizDefKey: 'bizdefkey',
        All: 'all',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 任务办理参数
     */
    var /**
     * 任务办理参数
     */ WorkItemExecuteParam = /** @class */ (function () {
        function WorkItemExecuteParam() {
        }
        return WorkItemExecuteParam;
    }());
    /**
     * 加签、征询、知会参数
     */
    var /**
     * 加签、征询、知会参数
     */ CounterSignParam = /** @class */ (function (_super) {
        __extends(CounterSignParam, _super);
        function CounterSignParam() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CounterSignParam;
    }(WorkItemExecuteParam));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var User = /** @class */ (function () {
        function User() {
        }
        return User;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 催办模拟接口请求body
     */
    var /**
     * 催办模拟接口请求body
     */ UrgeHandleSimulateContext = /** @class */ (function () {
        function UrgeHandleSimulateContext() {
        }
        return UrgeHandleSimulateContext;
    }());
    /**
     * 催办用户返回实体
     */
    var /**
     * 催办用户返回实体
     */ UrgeUser = /** @class */ (function (_super) {
        __extends(UrgeUser, _super);
        function UrgeUser() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UrgeUser;
    }(User));
    /**
     * 执行催办请求body
     */
    var /**
     * 执行催办请求body
     */ UrgeHandleContext = /** @class */ (function () {
        function UrgeHandleContext() {
        }
        return UrgeHandleContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BatchVerifySignedContext = /** @class */ (function () {
        function BatchVerifySignedContext() {
        }
        return BatchVerifySignedContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 工作流上下文
     */
    var /**
     * 工作流上下文
     */ WfContext = /** @class */ (function () {
        function WfContext() {
        }
        return WfContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UrgeHandleComponent = /** @class */ (function () {
        function UrgeHandleComponent() {
            this.placeholder = '';
            this.showMessageSubject = false; // 是否显示消息主题
            // 消息内容文本
            this.subjectEditable = false; // 消息主题是否可编辑
            // 消息主题是否可编辑
            this.contentEditable = false; // 消息内容是否可编辑
        }
        /**
         * @return {?}
         */
        UrgeHandleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        UrgeHandleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'urge-handle',
                        template: "<div class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"comment.static.messageSubject\" | translate }}\r\n  </div>\r\n  <div class=\"farris-input-wrap\">\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      value=\"subject\"\r\n      name=\"subject\"\r\n      [placeholder]=\"placeholder\"\r\n      [(ngModel)]=\"urgeMessageSubject\"\r\n      [readOnly]=\"!subjectEditable\"\r\n    />\r\n  </div>\r\n</div>\r\n\r\n<div class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"comment.static.messageContent\" | translate }}\r\n  </div>\r\n  <textarea\r\n    class=\"form-control content-textarea\"\r\n    [(ngModel)]=\"urgeMessageContent\"\r\n    [attr.placeholder]=\"placeholder\"\r\n    [style.height.px]=\"textAreaHeight\"\r\n    [readOnly]=\"!contentEditable\"\r\n  ></textarea>\r\n</div>\r\n",
                        styles: ["", ".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
                    }] }
        ];
        /** @nocollapse */
        UrgeHandleComponent.ctorParameters = function () { return []; };
        UrgeHandleComponent.propDecorators = {
            placeholder: [{ type: core.Input }],
            showMessageSubject: [{ type: core.Input }],
            textAreaHeight: [{ type: core.Input }],
            urgeMessageSubject: [{ type: core.Input }],
            urgeMessageContent: [{ type: core.Input }],
            subjectEditable: [{ type: core.Input }],
            contentEditable: [{ type: core.Input }]
        };
        return UrgeHandleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 执行办理的基础payload
     */
    var /**
     * 执行办理的基础payload
     */ BasePayload = /** @class */ (function () {
        function BasePayload() {
        }
        return BasePayload;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var MultiInstanceType = {
        /**
         * 抢占
         */
        Preempt: 'Preempt',
        /**
         * 并行
         */
        Parallel: 'Parallel',
        /**
         * 串行
         */
        Sequential: 'Sequential',
    };
    /**
     * 加签提交的payload
     */
    var /**
     * 加签提交的payload
     */ AddSignPayload = /** @class */ (function (_super) {
        __extends(AddSignPayload, _super);
        function AddSignPayload() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AddSignPayload;
    }(BasePayload));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 预解析返回的subject
     */
    var /**
     * 预解析返回的subject
     */ SimulateSubject = /** @class */ (function () {
        function SimulateSubject() {
            this.showDialog = true; //任务列表是否弹框
        }
        return SimulateSubject;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskExecuteComponent = /** @class */ (function (_super) {
        __extends(TaskExecuteComponent, _super);
        function TaskExecuteComponent(taskService, notify, i18nService, handlerService, loadingService, message, injector) {
            var _this = _super.call(this) || this;
            _this.taskService = taskService;
            _this.notify = notify;
            _this.i18nService = i18nService;
            _this.handlerService = handlerService;
            _this.loadingService = loadingService;
            _this.message = message;
            _this.injector = injector;
            // 流程实例ID
            _this.actionEntity = new TaskAction(); // 动作实体
            // 动作实体
            _this.comment = ''; // 审批意见
            // 审批意见
            _this.MAX_COMMENT_LENGTH = 4000; //审批意见最大长度
            //当前动作的默认意见
            _this.taskList = []; //批量审批接收到的任务list
            //批量审批接收到的任务list
            _this.batchSecond = 0; //批量操作的时间
            //批量操作的时间
            _this.ifSelectNode = false; // 是否显示选择下一环节
            // 是否显示选择下一环节
            _this.ifSelectUser = false; // 是否显示下一环节处理人
            // 是否显示下一环节处理人
            _this.ifAssignUser = false; // 是否显示办理人员框
            // 是否显示办理人员框
            _this.ifUrgeType = false; // 是否显示接收人框（催办消息接收人）
            // 是否显示接收人框（催办消息接收人）
            _this.ifShowCommentToMySelf = false; // 是否显示审批记录仅自己可见
            // 是否显示审批记录仅自己可见
            _this.singleSelect = false; // 用户帮助是否单选，默认多选
            // 用户帮助是否单选，默认多选
            _this.selectTargetAble = false; // 是否允许选择下一环节
            // 是否允许选择下一环节
            _this.hideComment = false; //审批记录仅自己可见
            //审批记录仅自己可见
            _this.filter = { notGetCurrentUser: true, notGetStopUser: true, orderField: 'order', withAllOrg: true, orgId: '' }; // 系统用户帮助是否过滤当前人
            // 系统用户帮助是否过滤当前人
            _this.selectedUsers = []; // 用户帮助选择后的Id数组
            _this.subject = new rxjs.BehaviorSubject(null);
            _this.submitResult = { result: true, isClose: true }; // 动作执行完成后返回的实体结果
            // 动作执行完成后返回的实体结果
            _this.bindingData = {}; // 系统帮助多选时用到
            // 系统帮助多选时用到
            _this.selectNodeText = _this.i18nService.getValue('task.nextNodeText'); // 下一环节显示的文字,"下一环节"
            // 处理人员显示文字
            _this.commentPlaceHolder = _this.i18nService.getValue('static.inputHolder'); //审批意见框placeholder
            //审批意见框placeholder
            _this.showAttachment = true; //是否显示附件上传
            //是否显示附件上传
            _this.showSign = true; //是否显示签名
            //是否显示签名
            _this.showCommonComment = true; //是否显示常用意见
            //是否显示常用意见
            _this.textAreaHeight = 84; //文字框的高度
            //文字框的高度
            _this.billMethodConfigs = []; // 表单动作配置列表
            // 选择的下一环节ID，并行分支是，逗号隔开的
            _this.destNodes = []; // 候选下一环节
            // 候选下一环节
            _this.dialogHeight = 270; // 弹框的高度
            // 弹框的高度
            _this.dialogHeightBase = 70;
            _this.addendum = new Addendum(); // 附件、签名信息
            // 附件、签名信息
            _this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
            _this.assignInfos = [{
                    // 节点返回的指派信息（多个）
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: null,
                    resolved: false,
                }];
            _this.otherAssignInfos = []; //其他节点指派信息
            //其他节点指派信息
            _this.originOtherAssignInfos = []; //缓存一开始的其他节点指派信息
            // 表单对象
            _this.ifRegistered = false; // 表单是否注册
            // 表单是否注册
            _this.configList = []; //任务中心配置项
            //任务中心配置项
            _this.verifySigned = new VerifySigned(); // 数字验签参数
            // 数字验签参数
            _this.submitDisable = false; // 提交按钮是否禁用
            // 提交按钮是否禁用
            //加签使用
            _this.addSign = {
                showSignToSign: false,
                allowSignToSIgn: true,
                showMultiInstanceType: false,
                multiInstanceType: [
                    { value: 'Parallel', name: _this.i18nService.getValue('addSign.parallel') },
                    { value: 'Sequential', name: _this.i18nService.getValue('addSign.sequential') },
                    { value: 'Preempt', name: _this.i18nService.getValue('addSign.preempt') },
                ],
                originMultiInstType: '',
                curMultiInstType: MultiInstanceType.Parallel.toString()
            };
            //动态驳回配置
            _this.showBackWardConfig = {
                title: _this.i18nService.getValue('backWardConfig.title'),
                dynamicBackWardRuleAble: false,
                displayPlaceholder: '',
                showTips: false,
                enable: false,
                backWardRules: [{
                        name: _this.i18nService.getValue('backWardConfig.sequence'),
                        value: 'sequence'
                    }, {
                        name: _this.i18nService.getValue('backWardConfig.backToMe'),
                        value: 'backToMe'
                    }, {
                        name: _this.i18nService.getValue('backWardConfig.backToCurrentNode'),
                        value: 'backToCurrentNode'
                    }]
            };
            /**
             * 任务催办时使用
             */
            _this.showUrgeMessageSubject = false; // 是否显示催办消息主题（催办时使用）
            // 内容可编辑
            _this.wfContext = new WfContext(); //工作流上下文
            //工作流上下文
            _this.enablePriority = false; //是否显示密级（动作级别）
            //是否显示密级（动作级别）
            _this.cls = '';
            _this.POST_MESSAGE_TARGET = window.document.location.origin;
            _this.language = localStorage.getItem('languageCode') || 'zh-CHS'; //中英文
            /**
             * 监听事件处理
             */
            _this.eventHandler = ( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                _this.messageSubject.next(event);
            });
            // 如果存在消息监听，先删掉
            if (TaskExecuteComponent.func) {
                window.removeEventListener('message', TaskExecuteComponent.func, false);
            }
            _this.addMessageListener();
            return _this;
        }
        /**
         * 组件销毁时，去掉subject注册
         */
        /**
         * 组件销毁时，去掉subject注册
         * @return {?}
         */
        TaskExecuteComponent.prototype.ngOnDestroy = /**
         * 组件销毁时，去掉subject注册
         * @return {?}
         */
            function () {
                if (this.actionToken) {
                    this.taskService.subjectRemove(this.actionToken);
                }
                if (this.simulateToken) {
                    this.taskService.subjectRemove(this.simulateToken);
                }
            };
        /**
         * @return {?}
         */
        TaskExecuteComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        TaskExecuteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.getAllUserConfig().subscribe(( /**
                 * @param {?} configList
                 * @return {?}
                 */function (configList) {
                    load.close();
                    _this.configList = configList;
                    /** @type {?} */
                    var comment = configList.find(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return c.configCode === ConfigCode.Default_Approval_Comment; }));
                    /** @type {?} */
                    var if_store_comment = configList.find(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return c.configCode === ConfigCode.If_Store_Comment; }));
                    /** @type {?} */
                    var passComment;
                    /** @type {?} */
                    var backComment;
                    if (comment && comment.currentValue) {
                        if (_this.language == 'zh-CHS') {
                            passComment = JSON.parse(comment.currentValue).pass;
                            backComment = JSON.parse(comment.currentValue).back;
                        }
                        else {
                            passComment = JSON.parse(comment.currentValue)['pass_' + _this.language];
                            backComment = JSON.parse(comment.currentValue)['back_' + _this.language];
                        }
                        if (_this.actionEntity.code === 'Pass') {
                            _this.comment = passComment;
                            _this.defaultComment = passComment;
                        }
                        if (_this.actionEntity.code === 'Back') {
                            _this.comment = backComment;
                            _this.defaultComment = backComment;
                        }
                    }
                    if (if_store_comment && if_store_comment.currentValue === 'true') {
                        if (_this.wfCacheComment) { //开启暂存意见，当切换到驳回并且
                            if (_this.actionEntity.code == 'Back' && _this.wfCacheComment == passComment) ;
                            else {
                                _this.comment = _this.wfCacheComment;
                            }
                        }
                    }
                }), ( /**
                 * @return {?}
                 */function () {
                    load.close();
                }));
                // 从任务办理界面打开时，才注册服务
                if (this.origin === taskImplApi.ActionOrigin.TaskForm) {
                    this.initFormEvent();
                    // 获取表单操作配置
                    this.taskService.getTaskFormInfo(this.workItemId).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        if (re && re.billMethodConfigs && re.billMethodConfigs.length) {
                            _this.billMethodConfigs = re.billMethodConfigs;
                        }
                    }));
                }
                /** @type {?} */
                var context = new UrgeHandleSimulateContext();
                context.procInstId = this.processInstanceId;
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.addMessageListener = /**
         * @private
         * @return {?}
         */
            function () {
                window.addEventListener('message', this.eventHandler, false);
                TaskExecuteComponent.func = this.eventHandler;
            };
        /**
         * 重写父类方法
         * @param task
         */
        /**
         * 重写父类方法
         * @param {?} task
         * @return {?}
         */
        TaskExecuteComponent.prototype.setTask = /**
         * 重写父类方法
         * @param {?} task
         * @return {?}
         */
            function (task) {
                if (task) {
                    this.task = task;
                    this.workItemId = task.sourceId;
                    this.processInstanceId = task.processInstanceId;
                    this.wfContext.processCategoryId = task.categoryId;
                    this.selectedPriority = task.priority;
                }
            };
        /**
         * 批量办理 设置任务列表
         * @param taskList
         */
        /**
         * 批量办理 设置任务列表
         * @param {?} taskList
         * @return {?}
         */
        TaskExecuteComponent.prototype.setTaskList = /**
         * 批量办理 设置任务列表
         * @param {?} taskList
         * @return {?}
         */
            function (taskList) {
                if (taskList.length > 20) {
                    this.dialogHeight = 290;
                }
                this.taskList = taskList;
                this.batchSecond = Math.ceil(this.taskList.length / 6);
            };
        /**
         * 重写父类方法
         * @param action
         */
        /**
         * 重写父类方法
         * @param {?} action
         * @return {?}
         */
        TaskExecuteComponent.prototype.setAction = /**
         * 重写父类方法
         * @param {?} action
         * @return {?}
         */
            function (action) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var result = new SimulateSubject();
                if (action) {
                    this.actionEntity = action;
                    if (this.task) { // 单个、批量都setAction，单个才执行模拟
                        return this.simulate(this.actionEntity);
                    }
                    if (this.taskList && this.taskList.length) {
                        return this.batchSimulate();
                    }
                }
                //批量时，也要返回
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    subject.next(result);
                }), 100);
                return subject.asObservable();
            };
        /**
         * 前事件初始化，将服务注册到window上，供表单调用
         * 任务办理界面的window，表单的window.parent
         */
        /**
         * 前事件初始化，将服务注册到window上，供表单调用
         * 任务办理界面的window，表单的window.parent
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.initFormEvent = /**
         * 前事件初始化，将服务注册到window上，供表单调用
         * 任务办理界面的window，表单的window.parent
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                // 审批前事件
                this.actionToken = this.workItemId + 'action';
                /** @type {?} */
                var actionToken = this.actionToken;
                /** @type {?} */
                var subjectCode = 'FormSubjectCode';
                (( /** @type {?} */(window))).gspWfEventService = (( /** @type {?} */(window))).gspWfEventService || {};
                (( /** @type {?} */(window))).gspWfEventService.register = ( /**
                 * @param {?} formObject
                 * @return {?}
                 */function (formObject) {
                    _this.taskService.subjectRegister(subjectCode, actionToken);
                    _this.ifRegistered = true;
                    _this.formObject = formObject;
                });
                (( /** @type {?} */(window))).gspWfEventService.notify = ( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (_this.ifRegistered) {
                        _this.taskService.subjectNotify(actionToken, value);
                    }
                    else { // 表单不注册，也可直接调用notify
                        _this.simulateToken = _this.workItemId + 'simulate';
                        /** @type {?} */
                        var simulateToken = _this.simulateToken;
                        _this.taskService.subjectRegister(subjectCode, simulateToken);
                        _this.taskService.subjectResponse(simulateToken, '', ( /**
                         * @param {?} value
                         * @return {?}
                         */function (value) {
                            value && value.dataChanged && _this.completeSimulate();
                        }));
                        _this.taskService.subjectNotify(simulateToken, value);
                    }
                });
            };
        /**
         * 点击提交的时候，执行表单的前事件
         */
        /**
         * 点击提交的时候，执行表单的前事件
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.beforeCompleteSubmit = /**
         * 点击提交的时候，执行表单的前事件
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.origin == taskImplApi.ActionOrigin.TaskForm) {
                    // 获取表单操作配置
                    /** @type {?} */
                    var passPreActions = this.billMethodConfigs.filter(( /**
                     * @param {?} action
                     * @return {?}
                     */function (action) { return action.action === _this.actionEntity.code && action.executionTime === 'Pre'; })).sort(( /**
                     * @param {?} x
                     * @param {?} y
                     * @return {?}
                     */function (x, y) { return x.sortOrder - y.sortOrder; }));
                    // 如果表单注册了事件
                    if (passPreActions && passPreActions.length) {
                        this.executeFormActions(__spread(passPreActions));
                    }
                    else { // 没有定义前后事件，直接提交
                        this.completeSubmit();
                    }
                }
                else {
                    this.completeSubmit();
                }
            };
        /**
         * @param formActions 表单中要执行的动作
         */
        /**
         * @private
         * @param {?} formActions 表单中要执行的动作
         * @return {?}
         */
        TaskExecuteComponent.prototype.executeFormActions = /**
         * @private
         * @param {?} formActions 表单中要执行的动作
         * @return {?}
         */
            function (formActions) {
                var _this = this;
                if (formActions.length > 0) {
                    this.messageSubject = new rxjs.Subject();
                    this.messageSubject.subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        /** @type {?} */
                        var data = re.data.data;
                        if (data.result === true) {
                            if (data.dataChanged === true) { // 如果需要预解析，先预解析再继续执行
                                _this.completeSimulate().subscribe(( /**
                                 * @param {?} r
                                 * @return {?}
                                 */function (r) {
                                    if (r.result) { // 预解析正确
                                        _this.executeFormActions(formActions);
                                    }
                                    else { // 预解析错误
                                        _this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                                    }
                                }));
                            }
                            else { // 不需要预解析，继续执行
                                _this.executeFormActions(formActions);
                            }
                        }
                        else {
                            _this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                            throw new Error('审批前表单操作执行失败！');
                        }
                    }));
                    // 执行表单动作
                    /** @type {?} */
                    var formAction = formActions.shift();
                    this.sendMessage(this.workItemId, formAction);
                }
                else {
                    this.completeSubmit();
                }
            };
        /**
         * 单个任务预解析
         * @param action
         */
        /**
         * 单个任务预解析
         * @private
         * @param {?} action
         * @return {?}
         */
        TaskExecuteComponent.prototype.simulate = /**
         * 单个任务预解析
         * @private
         * @param {?} action
         * @return {?}
         */
            function (action) {
                switch (action.code) {
                    case 'AssignUser': // 指派 单独参数
                        return this.assignSimulate();
                    case 'Claim': // 领用
                        return this.defaultSubjectNext();
                    case 'Unclaim': // 取消领用
                        return this.defaultSubjectNext();
                    case 'Retrieve': // 取回
                        return this.defaultSubjectNext();
                    case 'Transfer': // 移交 单独参数
                        return this.transferSimulate();
                    case 'AddSign': // 加签
                        return this.addSignSimulate();
                    case 'AddSignFront': // 征询
                        return this.addSignFrontSimulate();
                    case 'Notify': //知会
                        return this.notifySimulate();
                    case 'Refuse': // 否决
                        return this.defaultSubjectNext();
                    case 'Obsolete': // 作废
                        return this.defaultSubjectNext();
                    case 'Comment': // 评论
                        return this.defaultSubjectNext();
                    case 'ReadTask': // 已阅
                        this.ifShowCommentToMySelf = true;
                        return this.defaultSubjectNext(295);
                    case 'UrgeHandle': //催办
                        return this.urgeHandleSimulate();
                    case 'CancelConsult': //取消征询
                        return this.defaultSubjectNext();
                    default: // 通过 驳回 重新提交 其他自定义的动作
                        return this.completeSimulate();
                }
            };
        /**
         * 批量审批预解析
         * @returns
         */
        /**
         * 批量审批预解析
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchSimulate = /**
         * 批量审批预解析
         * @private
         * @return {?}
         */
            function () {
                switch (this.actionEntity.code) {
                    case "ReadTask": //批量已阅
                        this.ifShowCommentToMySelf = true;
                        return this.defaultSubjectNext(295);
                    case "Retrieve": //批量取回
                        return this.defaultSubjectNext();
                    case "Transfer": //批量移交
                        this.ifSelectUser = true;
                        this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
                        this.singleSelect = true;
                        return this.defaultSubjectNext(this.dialogHeight + this.dialogHeightBase);
                    default:
                        return this.defaultSubjectNext();
                }
            };
        /**
         * 默认的预解析返回结果，可控制弹框高度
         * @param dialogHeight
         * @returns
         */
        /**
         * 默认的预解析返回结果，可控制弹框高度
         * @private
         * @param {?=} dialogHeight
         * @return {?}
         */
        TaskExecuteComponent.prototype.defaultSubjectNext = /**
         * 默认的预解析返回结果，可控制弹框高度
         * @private
         * @param {?=} dialogHeight
         * @return {?}
         */
            function (dialogHeight) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var s = new SimulateSubject();
                s.showDialog = true;
                s.dialogHeight = dialogHeight ? dialogHeight : this.dialogHeight;
                s.result = true;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    subject.next(s);
                }), 100);
                return subject.asObservable();
            };
        /**
         * 真正地提交
         * 重写父类方法
         */
        /**
         * 真正地提交
         * 重写父类方法
         * @return {?}
         */
        TaskExecuteComponent.prototype.submit = /**
         * 真正地提交
         * 重写父类方法
         * @return {?}
         */
            function () {
                switch (this.actionEntity.code) {
                    case 'AssignUser': // 指派 单独参数
                        this.assignSubmit();
                        break;
                    case 'Claim': // 领用
                        this.claimSubmit();
                        break;
                    case 'Unclaim': // 取消领用
                        this.unClaimSubmit();
                        break;
                    case 'Retrieve': // 取回
                        this.retrieveSubmit();
                        break;
                    case 'Transfer': // 移交 单独参数
                        this.transferSubmit();
                        break;
                    case 'AddSign': // 加签
                        this.addSignSubmit();
                        break;
                    case 'AddSignFront': // 征询
                        this.addSignFrontSubmit();
                        break;
                    case 'Comment': // 评论
                        this.commentSubmit();
                        break;
                    case 'Notify': //知会
                        this.notifySubmit();
                        break;
                    case 'ReadTask': // 已阅
                        this.readSubmit();
                        break;
                    case 'UrgeHandle': //催办
                        this.urgeHandleSubmit();
                        break;
                    case 'CancelConsult': //取消征询
                        this.cancelConsultSubmit();
                        break;
                    default: // 通过 驳回 否决 作废 重新提交 其他自定义动作
                        this.beforeCompleteSubmit();
                }
                return this.subject.asObservable();
            };
        /**
         * 批量办理点击提交
         * @param tasks
         * @returns
         */
        /**
         * 批量办理点击提交
         * @param {?} tasks
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchSubmit = /**
         * 批量办理点击提交
         * @param {?} tasks
         * @return {?}
         */
            function (tasks) {
                switch (this.actionEntity.code) {
                    case "ReadTask": //批量已阅
                        return this.batchReadTaskSubmit(tasks);
                    case "Retrieve": //批量取回
                        return this.batchRetrieveSubmit(tasks);
                    case "Claim": //批量领用
                        return this.batchClaimSubmit(tasks);
                    case "Unclaim": //批量取消领用
                        return this.batchUnclaimSubmit(tasks);
                    case "Transfer": //批量移交
                        return this.batchTransferSubmit(tasks);
                    default:
                        return this.batchCompleteSubmit(tasks);
                }
            };
        /**
         * 执行批量前事件
         * @param tasks 批量任务列表
         */
        /**
         * 执行批量前事件
         * @param {?} tasks 批量任务列表
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchCompleteSubmit = /**
         * 执行批量前事件
         * @param {?} tasks 批量任务列表
         * @return {?}
         */
            function (tasks) {
                var _this = this;
                var e_1, _a;
                /** @type {?} */
                var filterNum = 0;
                /** @type {?} */
                var subject = new rxjs.BehaviorSubject(null);
                /** @type {?} */
                var successSubmit = { result: true, isClose: true };
                if ((this.actionEntity.code === 'Back' || this.actionEntity.code === 'Refuse') && !this.comment) { // 批量意见是否必填不支持根据审批项配置操作，批量驳回意见必填
                    this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
                    subject.next({ result: false, isClose: false });
                }
                else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var noActionTasks = tasks.filter(( /**
                     * @param {?} t
                     * @return {?}
                     */function (t) {
                        return t.actions.findIndex(( /**
                         * @param {?} a
                         * @return {?}
                         */function (a) { return a.code === _this.actionEntity.code; })) === -1;
                    }));
                    if (noActionTasks && noActionTasks.length > 0) {
                        try {
                            for (var noActionTasks_1 = __values(noActionTasks), noActionTasks_1_1 = noActionTasks_1.next(); !noActionTasks_1_1.done; noActionTasks_1_1 = noActionTasks_1.next()) {
                                var a = noActionTasks_1_1.value;
                                filterNum++;
                                if (filterNum === tasks.length) {
                                    subject.next(successSubmit);
                                    this.showBatchSubmitInfo(0, filterNum, 0, 0);
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (noActionTasks_1_1 && !noActionTasks_1_1.done && (_a = noActionTasks_1.return))
                                    _a.call(noActionTasks_1);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    /** @type {?} */
                    var actTasks_1 = tasks.filter(( /**
                     * @param {?} t
                     * @return {?}
                     */function (t) {
                        return t.actions.some(( /**
                         * @param {?} a
                         * @return {?}
                         */function (a) { return a.code === _this.actionEntity.code; }));
                    }));
                    if (actTasks_1 && actTasks_1.length > 0) {
                        this.executeBatchEvent(__spread(this.actionEntity.preEvents.filter(( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) { return e.batch; }))), actTasks_1, this.actionEntity, ( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            var e_2, _a;
                            if (re && re.result) {
                                if (re.passTasks) {
                                    /** @type {?} */
                                    var backTasks = actTasks_1.filter(( /**
                                     * @param {?} t
                                     * @return {?}
                                     */function (t) {
                                        return re.passTasks.findIndex(( /**
                                         * @param {?} id
                                         * @return {?}
                                         */function (id) { return id === t.id; })) === -1;
                                    }));
                                    if (backTasks && backTasks.length > 0) {
                                        try {
                                            for (var backTasks_1 = __values(backTasks), backTasks_1_1 = backTasks_1.next(); !backTasks_1_1.done; backTasks_1_1 = backTasks_1.next()) {
                                                var t = backTasks_1_1.value;
                                                filterNum++;
                                                if (filterNum === tasks.length) {
                                                    subject.next(successSubmit);
                                                    _this.showBatchSubmitInfo(0, filterNum, 0, 0);
                                                }
                                            }
                                        }
                                        catch (e_2_1) {
                                            e_2 = { error: e_2_1 };
                                        }
                                        finally {
                                            try {
                                                if (backTasks_1_1 && !backTasks_1_1.done && (_a = backTasks_1.return))
                                                    _a.call(backTasks_1);
                                            }
                                            finally {
                                                if (e_2)
                                                    throw e_2.error;
                                            }
                                        }
                                    }
                                    actTasks_1 = actTasks_1.filter(( /**
                                     * @param {?} t
                                     * @return {?}
                                     */function (t) {
                                        return re.passTasks.findIndex(( /**
                                         * @param {?} id
                                         * @return {?}
                                         */function (id) { return id === t.id; })) > -1;
                                    }));
                                }
                                if (actTasks_1.length > 0) {
                                    /** @type {?} */
                                    var batchVerifySignedContext = new BatchVerifySignedContext();
                                    _this.batchVerifySubmit(actTasks_1, filterNum, batchVerifySignedContext).subscribe(( /**
                                     * @param {?} r
                                     * @return {?}
                                     */function (r) {
                                        if (r && r.successSubmit && r.successSubmit.result) {
                                            _this.executeBatchEvent(__spread(_this.actionEntity.postEvents.filter(( /**
                                             * @param {?} e
                                             * @return {?}
                                             */function (e) { return e.batch; }))), r.successHandleTasks, _this.actionEntity, ( /**
                                             * @return {?}
                                             */function () {
                                                subject.next(r.successSubmit);
                                            }), { result: true, passTasks: r.successHandleTasks.map(( /**
                                                     * @param {?} t
                                                     * @return {?}
                                                     */function (t) { return t.id; })) });
                                        }
                                    }));
                                }
                            }
                            else {
                                subject.next({ result: false, isClose: false });
                            }
                        }), { result: true, passTasks: actTasks_1.map(( /**
                                 * @param {?} t
                                 * @return {?}
                                 */function (t) { return t.id; })) });
                    }
                }
                return subject.asObservable();
            };
        /**
         * 批量数字签名
         * @param tasks
         * @param filterNum
         * @param batchVerifySignedContext
         * @returns
         */
        /**
         * 批量数字签名
         * @private
         * @param {?} tasks
         * @param {?=} filterNum
         * @param {?=} batchVerifySignedContext
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchVerifySubmit = /**
         * 批量数字签名
         * @private
         * @param {?} tasks
         * @param {?=} filterNum
         * @param {?=} batchVerifySignedContext
         * @return {?}
         */
            function (tasks, filterNum, batchVerifySignedContext) {
                var _this = this;
                if (filterNum === void 0) {
                    filterNum = 0;
                }
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var verifyTasks = tasks.filter(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) {
                    /** @type {?} */
                    var action = t.actions.find(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.code === _this.actionEntity.code; }));
                    if (!action) {
                        return false;
                    }
                    else {
                        if (action.parameters.some(( /**
                         * @param {?} p
                         * @return {?}
                         */function (p) { return p.code === 'CertificationNecessary' && p.value === 'true'; }))) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }));
                /** @type {?} */
                var verifyTasksNum = verifyTasks.length;
                if (verifyTasks.length > 0) {
                    /** @type {?} */
                    var that_1 = this;
                    if ((( /** @type {?} */(window))).gspframeworkService &&
                        (( /** @type {?} */(window))).gspframeworkService.rtf) {
                        (( /** @type {?} */(window))).gspframeworkService.rtf.caEvent.on((( /** @type {?} */(window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', ( /**
                         * @param {?} signedData
                         * @return {?}
                         */function signMsgOver(signedData) {
                            if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                                // 证书对象
                                /** @type {?} */
                                var cert = gspCA.getCurCert();
                                // 验签参数
                                that_1.verifySigned = {
                                    // 要验证的证书base64编码的字符流(certkey)
                                    certBase64Info: gspCA.getCertBase64(cert),
                                    // 签名原信息
                                    msg: ['BatchDigitalSignature'],
                                    // 要签名后信息
                                    signedmsg: signedData[1][0],
                                    // 用户使用场景，目前未使用，可以为空
                                    useCase: null,
                                };
                                batchVerifySignedContext.verifySigned = that_1.verifySigned;
                                that_1.taskService.batchVerifySigned(batchVerifySignedContext).subscribe(( /**
                                 * @return {?}
                                 */function () {
                                    /** @type {?} */
                                    var verifyTasksNum = 0;
                                    that_1.batchComplete(tasks, filterNum, verifyTasksNum).subscribe(( /**
                                     * @param {?} re
                                     * @return {?}
                                     */function (re) {
                                        subject.next(re);
                                    }));
                                }), ( /**
                                 * @param {?} error
                                 * @return {?}
                                 */function (error) {
                                    /** @type {?} */
                                    var otherTasks = tasks.filter(( /**
                                     * @param {?} t
                                     * @return {?}
                                     */function (t) {
                                        return verifyTasks.findIndex(( /**
                                         * @param {?} task
                                         * @return {?}
                                         */function (task) { return task.id === t.id; })) === -1;
                                    }));
                                    that_1.batchComplete(otherTasks, filterNum, verifyTasksNum).subscribe(( /**
                                     * @param {?} re
                                     * @return {?}
                                     */function (re) {
                                        subject.next(re);
                                    }));
                                }));
                            }
                            else {
                                that_1.notify.error(signedData[1]);
                                subject.next({ successSubmit: { result: false, isClose: false }, successHandleTasks: new Array() });
                            }
                        }));
                    }
                    /** @type {?} */
                    var msg = ['BatchDigitalSignature'];
                    gspCA.getSignedMsg(msg);
                }
                else {
                    this.batchComplete(tasks, filterNum, verifyTasksNum).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        subject.next(re);
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 真正的批量提交任务
         * @param tasks
         * @param filterNum
         * @param verifyTasksNum
         * @returns
         */
        /**
         * 真正的批量提交任务
         * @private
         * @param {?} tasks
         * @param {?=} filterNum
         * @param {?=} verifyTasksNum
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchComplete = /**
         * 真正的批量提交任务
         * @private
         * @param {?} tasks
         * @param {?=} filterNum
         * @param {?=} verifyTasksNum
         * @return {?}
         */
            function (tasks, filterNum, verifyTasksNum) {
                var _this = this;
                if (filterNum === void 0) {
                    filterNum = 0;
                }
                var e_3, _a;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var successNum = 0;
                /** @type {?} */
                var failedNum = 0;
                /** @type {?} */
                var errorNum = 0;
                /** @type {?} */
                var successSubmit = { result: true, isClose: true };
                /** @type {?} */
                var successHandleTasks = new Array();
                /** @type {?} */
                var load = this.loadingService.show();
                var _loop_1 = function (task) {
                    /** @type {?} */
                    var context = new CompleteContext();
                    context.workItemId = task.sourceId;
                    context.conclusionValue = this_1.actionEntity.code;
                    context.comment = this_1.comment;
                    context.addendum = this_1.addendum;
                    this_1.taskService.completeSimulate(context).subscribe(( /**
                     * @param {?} response
                     * @return {?}
                     */function (response) {
                        if (response && response.needInteraction === true) { // 需要交互
                            failedNum++;
                            if (successNum + failedNum + errorNum === tasks.length) {
                                load.close();
                                subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                                _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                            }
                        }
                        else { // 不需要交互
                            _this.taskService.complete(context).subscribe(( /**
                             * @return {?}
                             */function () {
                                successNum++;
                                successHandleTasks.push(task);
                                if (successNum + failedNum + errorNum === tasks.length) {
                                    load.close();
                                    subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                                    _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                                }
                            }), ( /**
                             * @return {?}
                             */function () {
                                errorNum++;
                                if (successNum + failedNum + errorNum === tasks.length) {
                                    load.close();
                                    subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                                    _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                                }
                            }));
                        }
                    }), ( /**
                     * @return {?}
                     */function () {
                        errorNum++;
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                            _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }));
                };
                var this_1 = this;
                try {
                    for (var tasks_1 = __values(tasks), tasks_1_1 = tasks_1.next(); !tasks_1_1.done; tasks_1_1 = tasks_1.next()) {
                        var task = tasks_1_1.value;
                        _loop_1(task);
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (tasks_1_1 && !tasks_1_1.done && (_a = tasks_1.return))
                            _a.call(tasks_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                return subject.asObservable();
            };
        /**
         * 批量已阅
         * @param tasks
         */
        /**
         * 批量已阅
         * @private
         * @param {?} tasks
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchReadTaskSubmit = /**
         * 批量已阅
         * @private
         * @param {?} tasks
         * @return {?}
         */
            function (tasks) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.BehaviorSubject(null);
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var successNum_1 = 0;
                    /** @type {?} */
                    var errorNum_1 = 0;
                    /** @type {?} */
                    var load_1 = this.loadingService.show();
                    tasks.forEach(( /**
                     * @param {?} task
                     * @return {?}
                     */function (task) {
                        /** @type {?} */
                        var context = {
                            workItemId: task.sourceId,
                            comment: _this.comment,
                            addendum: _this.addendum,
                        };
                        _this.taskService.readTask(context).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            successNum_1++;
                            if (successNum_1 + errorNum_1 == tasks.length) {
                                load_1.close();
                                subject.next({ result: true, isClose: true });
                                _this.showBatchSubmitInfo(successNum_1, 0, errorNum_1, 0);
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            errorNum_1++;
                            if (successNum_1 + errorNum_1 == tasks.length) {
                                load_1.close();
                                subject.next({ result: false, isClose: false });
                                _this.showBatchSubmitInfo(successNum_1, 0, errorNum_1, 0);
                            }
                        }));
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 批量取回
         * @param tasks
         */
        /**
         * 批量取回
         * @private
         * @param {?} tasks
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchRetrieveSubmit = /**
         * 批量取回
         * @private
         * @param {?} tasks
         * @return {?}
         */
            function (tasks) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.BehaviorSubject(null);
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var successNum_2 = 0;
                    /** @type {?} */
                    var errorNum_2 = 0;
                    /** @type {?} */
                    var load_2 = this.loadingService.show();
                    tasks.forEach(( /**
                     * @param {?} task
                     * @return {?}
                     */function (task) {
                        /** @type {?} */
                        var context = {
                            workItemId: task.sourceId,
                            comment: _this.comment,
                            addendum: _this.addendum,
                        };
                        _this.taskService.retrieve(context).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            successNum_2++;
                            if (successNum_2 + errorNum_2 == tasks.length) {
                                load_2.close();
                                _this.showBatchSubmitInfo(successNum_2, 0, errorNum_2, 0);
                                subject.next({ result: true, isClose: true });
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            errorNum_2++;
                            if (successNum_2 + errorNum_2 == tasks.length) {
                                load_2.close();
                                subject.next({ result: false, isClose: false });
                                _this.showBatchSubmitInfo(successNum_2, 0, errorNum_2, 0);
                            }
                        }));
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 批量领用
         */
        /**
         * 批量领用
         * @private
         * @param {?} tasks
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchClaimSubmit = /**
         * 批量领用
         * @private
         * @param {?} tasks
         * @return {?}
         */
            function (tasks) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.BehaviorSubject(null);
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var successNum_3 = 0;
                    /** @type {?} */
                    var errorNum_3 = 0;
                    /** @type {?} */
                    var load_3 = this.loadingService.show();
                    tasks.forEach(( /**
                     * @param {?} task
                     * @return {?}
                     */function (task) {
                        _this.taskService.claim(task.sourceId, _this.comment).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            successNum_3++;
                            if (successNum_3 + errorNum_3 == tasks.length) {
                                load_3.close();
                                _this.showBatchSubmitInfo(successNum_3, 0, errorNum_3, 0);
                                subject.next({ result: true, isClose: true });
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            errorNum_3++;
                            if (successNum_3 + errorNum_3 == tasks.length) {
                                load_3.close();
                                subject.next({ result: false, isClose: false });
                                _this.showBatchSubmitInfo(successNum_3, 0, errorNum_3, 0);
                            }
                        }));
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 批量取消领用
         */
        /**
         * 批量取消领用
         * @private
         * @param {?} tasks
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchUnclaimSubmit = /**
         * 批量取消领用
         * @private
         * @param {?} tasks
         * @return {?}
         */
            function (tasks) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.BehaviorSubject(null);
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var successNum_4 = 0;
                    /** @type {?} */
                    var errorNum_4 = 0;
                    /** @type {?} */
                    var load_4 = this.loadingService.show();
                    tasks.forEach(( /**
                     * @param {?} task
                     * @return {?}
                     */function (task) {
                        _this.taskService.unClaim(task.sourceId, _this.comment).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            successNum_4++;
                            if (successNum_4 + errorNum_4 == tasks.length) {
                                load_4.close();
                                _this.showBatchSubmitInfo(successNum_4, 0, errorNum_4, 0);
                                subject.next({ result: true, isClose: true });
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            errorNum_4++;
                            if (successNum_4 + errorNum_4 == tasks.length) {
                                load_4.close();
                                subject.next({ result: false, isClose: false });
                                _this.showBatchSubmitInfo(successNum_4, 0, errorNum_4, 0);
                            }
                        }));
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 批量移交
         * @param tasks 批量任务列表
         */
        /**
         * 批量移交
         * @private
         * @param {?} tasks 批量任务列表
         * @return {?}
         */
        TaskExecuteComponent.prototype.batchTransferSubmit = /**
         * 批量移交
         * @private
         * @param {?} tasks 批量任务列表
         * @return {?}
         */
            function (tasks) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.BehaviorSubject(null);
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    subject.next({ result: false, isClose: false });
                }
                else if (this.selectedUsers.length === 0) {
                    this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
                    subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var successNum_5 = 0;
                    /** @type {?} */
                    var errorNum_5 = 0;
                    /** @type {?} */
                    var load_5 = this.loadingService.show();
                    tasks.forEach(( /**
                     * @param {?} task
                     * @return {?}
                     */function (task) {
                        /** @type {?} */
                        var context = {
                            workItemId: task.sourceId,
                            assignee: _this.selectedUsers[0],
                            comment: _this.comment,
                            addendum: _this.addendum,
                        };
                        _this.taskService.transfer(context).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            successNum_5++;
                            if (successNum_5 + errorNum_5 == tasks.length) {
                                load_5.close();
                                _this.showBatchSubmitInfo(successNum_5, 0, errorNum_5, 0);
                                subject.next({ result: true, isClose: true });
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            errorNum_5++;
                            if (successNum_5 + errorNum_5 == tasks.length) {
                                load_5.close();
                                subject.next({ result: false, isClose: false });
                                _this.showBatchSubmitInfo(successNum_5, 0, errorNum_5, 0);
                            }
                        }));
                    }));
                }
                return subject.asObservable();
            };
        /**
         * 批量提交提示信息
         * @param successNum 成功条数
         * @param failedNum 需要交互的条数
         * @param errorNum 执行报错的条数
         * @param verifyTasksNum 需要数字签名的条数
         */
        /**
         * 批量提交提示信息
         * @private
         * @param {?} successNum 成功条数
         * @param {?} failedNum 需要交互的条数
         * @param {?} errorNum 执行报错的条数
         * @param {?} verifyTasksNum 需要数字签名的条数
         * @return {?}
         */
        TaskExecuteComponent.prototype.showBatchSubmitInfo = /**
         * 批量提交提示信息
         * @private
         * @param {?} successNum 成功条数
         * @param {?} failedNum 需要交互的条数
         * @param {?} errorNum 执行报错的条数
         * @param {?} verifyTasksNum 需要数字签名的条数
         * @return {?}
         */
            function (successNum, failedNum, errorNum, verifyTasksNum) {
                /** @type {?} */
                var message = '';
                if (successNum && !failedNum && !errorNum && !verifyTasksNum) { // 批量全部成功
                    this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                }
                else { // 非全部成功
                    successNum && (message += this.i18nService.getValue('batchSubmit.success') + ("\u3010" + successNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
                    errorNum && (message += this.i18nService.getValue('batchSubmit.error') + ("\u3010" + errorNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
                    failedNum && (message += this.i18nService.getValue('batchSubmit.failed') + ("\u3010" + failedNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
                    verifyTasksNum && (message += this.i18nService.getValue('batchSubmit.validationFailed') + ("\u3010" + verifyTasksNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
                    message += this.i18nService.getValue('batchSubmit.single');
                    this.message.show('warning', message, { safeHtml: false });
                }
            };
        /**
         * @private
         * @param {?} events
         * @param {?} entities
         * @param {?} action
         * @param {?} handler
         * @param {?=} result
         * @return {?}
         */
        TaskExecuteComponent.prototype.executeBatchEvent = /**
         * @private
         * @param {?} events
         * @param {?} entities
         * @param {?} action
         * @param {?} handler
         * @param {?=} result
         * @return {?}
         */
            function (events, entities, action, handler, result) {
                var _this = this;
                if (this.injector) {
                    if (events && events.length > 0 && entities && entities.length > 0) {
                        /** @type {?} */
                        var event_1 = events.shift();
                        /** @type {?} */
                        var url = event_1.eventImpl.split('#')[0];
                        /** @type {?} */
                        var func_1 = event_1.eventImpl.split('#')[1];
                        System.import(url + '?v=' + new Date().getTime().toString())
                            .then(( /**
                     * @param {?} moduleFactories
                     * @return {?}
                     */function (moduleFactories) {
                            /** @type {?} */
                            var moduleFactory = Object.values(moduleFactories)[0];
                            /** @type {?} */
                            var moduleRef = moduleFactory.create(_this.injector);
                            /** @type {?} */
                            var context = {
                                action: action,
                                taskList: entities,
                                origin: 'TaskCenter',
                                preEventResult: result
                            };
                            moduleRef.instance[func_1].apply(moduleRef.instance, [context]).subscribe(( /**
                             * @param {?} re
                             * @return {?}
                             */function (re) {
                                if (re && re.result) {
                                    _this.executeBatchEvent(events, entities, action, handler, re);
                                }
                                else {
                                    handler(re);
                                }
                            }));
                        }));
                    }
                    else {
                        handler(result);
                    }
                }
                else {
                    handler(result);
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.assignSimulate = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var simulateSubject = new SimulateSubject();
                this.ifAssignUser = true;
                this.dialogHeight += this.dialogHeightBase;
                this.enablePriority = true;
                if (this.task.priority) {
                    this.dialogHeight += this.dialogHeightBase;
                }
                this.taskService.getAssigneeInfo(this.workItemId).subscribe(( /**
                 * @param {?} info
                 * @return {?}
                 */function (info) {
                    _this.assignInfos = [{
                            selectedAssignees: info.selectedAssignees,
                            assigneeInfo: info.assigneeInfo,
                            assignees: info.selectedAssignees.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return { id: user.id, name: user.name }; })),
                            activityDefinitionName: info.activityDefinitionName,
                            activityDefinitionId: info.activityDefinitionId,
                            dependency: info.dependency,
                            anonymous: info.anonymous,
                            anonymousText: info.anonymousText,
                            resolved: info.resolved,
                        }];
                    simulateSubject.dialogHeight = _this.dialogHeight;
                    simulateSubject.result = true;
                    simulateSubject.showDialog = true;
                    subject.next(simulateSubject);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    simulateSubject.result = false;
                    simulateSubject.showDialog = false;
                    subject.next(simulateSubject);
                    _this.taskService.error(error);
                }));
                return subject.asObservable();
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.transferSimulate = /**
         * @private
         * @return {?}
         */
            function () {
                this.ifSelectUser = true;
                this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
                this.singleSelect = true;
                this.dialogHeight += this.dialogHeightBase;
                this.enablePriority = true;
                if (this.task.priority) {
                    this.dialogHeight += this.dialogHeightBase;
                }
                return this.getOrganizationScope();
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.addSignFrontSimulate = /**
         * @private
         * @return {?}
         */
            function () {
                this.ifSelectUser = true;
                this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
                this.dialogHeight += this.dialogHeightBase;
                this.enablePriority = true;
                if (this.task.priority) {
                    this.dialogHeight += this.dialogHeightBase;
                }
                return this.getOrganizationScope();
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.addSignSimulate = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                // 加签
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var simulateSubject = new SimulateSubject();
                this.ifSelectUser = true;
                this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
                this.dialogHeight += this.dialogHeightBase * 2;
                this.enablePriority = true;
                if (this.task.priority) {
                    this.dialogHeight += this.dialogHeightBase;
                }
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.getAdhocConfig(this.workItemId).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    load.close();
                    _this.addSign.showSignToSign = response.showSignToSign;
                    _this.addSign.originMultiInstType = response.multiInstanceType;
                    if (response.organization) {
                        _this.filter.orgId = response.organization.id;
                        _this.filter.withAllOrg = response.organization.includeChildren;
                    }
                    simulateSubject.dialogHeight = _this.dialogHeight;
                    simulateSubject.showDialog = true;
                    simulateSubject.result = true;
                    subject.next(simulateSubject);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.taskService.error(error);
                    simulateSubject.showDialog = false;
                    simulateSubject.result = false;
                    subject.next(simulateSubject);
                }));
                return subject.asObservable();
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.notifySimulate = /**
         * @private
         * @return {?}
         */
            function () {
                this.ifSelectUser = true;
                this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
                this.dialogHeight += this.dialogHeightBase;
                this.singleSelect = false;
                this.enablePriority = true;
                if (this.task.priority) {
                    this.dialogHeight += this.dialogHeightBase;
                }
                return this.getOrganizationScope();
            };
        //预解析组织、候选人范围
        //预解析组织、候选人范围
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.getOrganizationScope =
            //预解析组织、候选人范围
            /**
             * @private
             * @return {?}
             */
            function () {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var simulateSubject = new SimulateSubject();
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.getOrganizationScope(this.workItemId, this.actionEntity.code).subscribe(( /**
                 * @param {?} orgList
                 * @return {?}
                 */function (orgList) {
                    load.close();
                    if (orgList.length) { // 全员会返回空数组
                        _this.filter.orgId = orgList[0].id;
                        _this.filter.withAllOrg = orgList[0].includeChildren;
                    }
                    simulateSubject.dialogHeight = _this.dialogHeight;
                    simulateSubject.showDialog = true;
                    simulateSubject.result = true;
                    subject.next(simulateSubject);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.taskService.error(error);
                    simulateSubject.showDialog = false;
                    simulateSubject.result = false;
                    subject.next(simulateSubject);
                }));
                return subject.asObservable();
            };
        /**
         * 催办模拟
         */
        /**
         * 催办模拟
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.urgeHandleSimulate = /**
         * 催办模拟
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var simulateSubject = new SimulateSubject();
                this.ifSelectNode = false;
                this.ifSelectUser = false;
                this.ifAssignUser = false;
                this.ifUrgeType = true;
                this.commentPlaceHolder = this.i18nService.getValue('task.urgeComment');
                this.showCommonComment = false;
                this.showAttachment = false;
                this.showUrgeMessageSubject = true;
                this.showSign = false;
                this.dialogHeight += this.dialogHeightBase * 2;
                /** @type {?} */
                var load = this.loadingService.show();
                /** @type {?} */
                var context = new UrgeHandleSimulateContext();
                context.procInstId = this.processInstanceId;
                this.taskService.urgeHandleSimulate(context).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    load.close();
                    _this.urgeHandleResponse = re;
                    if (re && re.urgeUsers && re.urgeUsers.length) {
                        _this.urgeMessageSubject = re.urgeUsers[0].urgeInfos[0].urgeMessageSubject;
                        _this.urgeMessageContent = re.urgeUsers[0].urgeInfos[0].urgeMessageContent;
                        _this.subjectEditable = re.urgeUsers[0].urgeInfos[0].subjectEditable;
                        _this.contentEditable = re.urgeUsers[0].urgeInfos[0].contentEditable;
                        _this.addReminder = re.urgeUsers[0].urgeInfos[0].addReminder;
                        /** @type {?} */
                        var urgeUsers = re.urgeUsers;
                        /** @type {?} */
                        var assignInfo = new AssigneeInfo();
                        urgeUsers.forEach(( /**
                         * @param {?} user
                         * @return {?}
                         */function (user) {
                            if (user.anonymousText) {
                                user.name = user.anonymousText;
                                user.code = '';
                                user.orgName = '';
                            }
                        }));
                        assignInfo.assigneeUsers = urgeUsers;
                        assignInfo.selectAssignee = urgeUsers.length > 1 ? true : false;
                        assignInfo.multiSelect = true;
                        _this.assignInfos[0].assigneeInfo = assignInfo;
                        _this.assignInfos[0].assignees = urgeUsers.length == 1 ? urgeUsers : [];
                        simulateSubject.showDialog = true;
                    }
                    else {
                        _this.notify.warning(_this.i18nService.getValue('task.noUrgeUsers'));
                        simulateSubject.showDialog = false;
                    }
                    simulateSubject.dialogHeight = _this.dialogHeight;
                    simulateSubject.result = true;
                    subject.next(simulateSubject);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.taskService.error(error);
                    simulateSubject.showDialog = false;
                    simulateSubject.result = false;
                    subject.next(simulateSubject);
                }));
                return subject.asObservable();
            };
        /**
         * 预解析
         * 通过、驳回、重新提交、其他自定义动作
         */
        /**
         * 预解析
         * 通过、驳回、重新提交、其他自定义动作
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.completeSimulate = /**
         * 预解析
         * 通过、驳回、重新提交、其他自定义动作
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var simulateSubject = new SimulateSubject();
                if (this.actionEntity.parameters && this.actionEntity.parameters.length) { // 是否允许加签
                    this.actionEntity.parameters.forEach(( /**
                     * @param {?} p
                     * @return {?}
                     */function (p) {
                        if (p.code === 'AddSignBehindAble' && p.value === 'true') {
                            _this.ifSelectUser = true;
                            _this.selectUserText = _this.i18nService.getValue('task.addSign') + _this.i18nService.getValue('task.person');
                            _this.dialogHeight += _this.dialogHeightBase;
                            /** @type {?} */
                            var load_6 = _this.loadingService.show();
                            //获取加签范围
                            _this.taskService.getOrganizationScope(_this.workItemId, 'AddSignBehind').subscribe(( /**
                             * @param {?} orgList
                             * @return {?}
                             */function (orgList) {
                                load_6.close();
                                if (orgList.length) { // 全员会返回空数组
                                    _this.filter.orgId = orgList[0].id;
                                    _this.filter.withAllOrg = orgList[0].includeChildren;
                                }
                            }), ( /**
                             * @param {?} error
                             * @return {?}
                             */function (error) {
                                load_6.close();
                                _this.taskService.error(error);
                            }));
                        }
                    }));
                }
                //驳回节点标签名称
                if (this.actionEntity.code === 'Back') {
                    this.selectNodeText = this.actionEntity.name + this.i18nService.getValue('task.backNodeText');
                }
                /** @type {?} */
                var context = new CompleteContext();
                context.workItemId = this.workItemId;
                context.conclusionValue = this.actionEntity.code;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.completeSimulate(context).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    load.close();
                    _this.clearSimulateResult();
                    _this.response = response;
                    if (_this.task.priority) {
                        _this.enablePriority = true;
                        _this.dialogHeight += _this.dialogHeightBase;
                    }
                    _this.selectTargetAble = response.selectTargetAble;
                    if (response.dynamicBackWardRuleConfig) {
                        _this.showBackWardConfig.dynamicBackWardRuleAble = response.dynamicBackWardRuleConfig.dynamicBackWardRuleAble;
                        _this.showBackWardConfig.displayPlaceholder = response.dynamicBackWardRuleConfig.resubmitEffect;
                    }
                    if (!response.simulationPaths.length) { // 模拟返回路径为空时
                        _this.ifSelectNode = false;
                        _this.ifAssignUser = false;
                    }
                    else { // 模拟返回了路径
                        _this.ifSelectNode = true;
                        _this.ifAssignUser = true;
                        _this.dialogHeight += _this.dialogHeightBase * 2;
                        _this.destNodes = response.simulationPaths && response.simulationPaths.map(( /**
                         * @param {?} path
                         * @return {?}
                         */function (path) {
                            return ({
                                id: path.nodeInfoList.map(( /**
                                 * @param {?} node
                                 * @return {?}
                                 */function (node) { return node.activityDefinitionId; })).join('，'),
                                name: path.nodeInfoList.map(( /**
                                 * @param {?} node
                                 * @return {?}
                                 */function (node) { return node.activityDefinitionName; })).join('，')
                            });
                        }));
                        // 处理默认分支，无默认分支返回-1
                        /** @type {?} */
                        var defaultIndex = response.simulationPaths.findIndex(( /**
                         * @param {?} a
                         * @return {?}
                         */function (a) { return a.default; }));
                        //没有默认分支，且不允许选择目标节点时，取其中一个node展示（子流程参与者为空情况等）
                        if (defaultIndex < 0 && !response.selectTargetAble) {
                            defaultIndex = response.simulationPaths.findIndex(( /**
                             * @param {?} a
                             * @return {?}
                             */function (a) { return a.nodeInfoList && a.nodeInfoList.length > 0; }));
                        }
                        if (defaultIndex > -1) {
                            _this.selectedNodeId = _this.destNodes[defaultIndex].id;
                            _this.nodeDefaultValue = _this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : _this.destNodes[defaultIndex].name;
                            _this.setAssignInfo(response.simulationPaths[defaultIndex].nodeInfoList);
                            if (response.simulationPaths[defaultIndex].id.startsWith('EndEvent')) { //下一环节为结束时，不显示办理人员，弹框高度缩小
                                _this.dialogHeight = 340;
                            }
                        }
                    }
                    //设置其他节点选人
                    _this.setOtherAssignInfo(response);
                    _this.dialogHeight = _this.showBackWardConfig.dynamicBackWardRuleAble ? _this.dialogHeight + _this.dialogHeightBase : _this.dialogHeight;
                    simulateSubject.result = true;
                    simulateSubject.showDialog = true;
                    simulateSubject.dialogHeight = _this.dialogHeight;
                    subject.next(simulateSubject);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    simulateSubject.result = false;
                    simulateSubject.showDialog = false;
                    subject.next(simulateSubject);
                    _this.taskService.error(error);
                }));
                return subject.asObservable();
            };
        /**
         * 清空预解析结果
         */
        /**
         * 清空预解析结果
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.clearSimulateResult = /**
         * 清空预解析结果
         * @private
         * @return {?}
         */
            function () {
                this.assignInfos = [{
                        // 重新预解析时清空
                        selectedAssignees: [],
                        assigneeInfo: null,
                        assignees: [],
                        activityDefinitionName: '',
                        activityDefinitionId: '',
                        dependency: '',
                        anonymous: false,
                        anonymousText: '',
                        resolved: false,
                    }];
                this.destNodes = []; // 重新预解析时清空
                this.selectedNodeId = '';
            };
        /**
         * 设置当前指派信息帮助参数
         */
        /**
         * 设置当前指派信息帮助参数
         * @private
         * @param {?} nodeInfoList
         * @return {?}
         */
        TaskExecuteComponent.prototype.setAssignInfo = /**
         * 设置当前指派信息帮助参数
         * @private
         * @param {?} nodeInfoList
         * @return {?}
         */
            function (nodeInfoList) {
                var _this = this;
                this.assignInfos = [];
                this.selectedNodeId.split('，').forEach(( /**
                 * @param {?} nodeId
                 * @return {?}
                 */function (nodeId) {
                    /** @type {?} */
                    var node = nodeInfoList.find(( /**
                     * @param {?} node
                     * @return {?}
                     */function (node) { return node.activityDefinitionId === nodeId; }));
                    if (node) {
                        _this.assignInfos.push({
                            selectedAssignees: node.selectedAssignees,
                            assigneeInfo: node.assigneeInfo,
                            assignees: node.selectedAssignees.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return { id: user.id, name: user.name }; })),
                            activityDefinitionName: node.activityDefinitionName,
                            activityDefinitionId: node.activityDefinitionId,
                            dependency: node.dependency,
                            anonymous: node.anonymous,
                            anonymousText: node.anonymousText,
                            resolved: node.resolved,
                        });
                    }
                    else {
                        _this.assignInfos.push({
                            selectedAssignees: [],
                            assigneeInfo: null,
                            assignees: [],
                            activityDefinitionName: '',
                            activityDefinitionId: '',
                            dependency: '',
                            anonymous: false,
                            anonymousText: '',
                            resolved: false,
                        });
                    }
                }));
            };
        /**
         * 设置其他节点指派
         * @param response
         */
        /**
         * 设置其他节点指派
         * @private
         * @param {?} response
         * @return {?}
         */
        TaskExecuteComponent.prototype.setOtherAssignInfo = /**
         * 设置其他节点指派
         * @private
         * @param {?} response
         * @return {?}
         */
            function (response) {
                var _this = this;
                this.otherAssignInfos = [];
                /** @type {?} */
                var tmpOtherAssignInfos = [];
                /** @type {?} */
                var otherAssignNodes = response.otherAssignNodes;
                if (otherAssignNodes && otherAssignNodes.length) {
                    otherAssignNodes.forEach(( /**
                     * @param {?} node
                     * @return {?}
                     */function (node) {
                        tmpOtherAssignInfos.push({
                            selectedAssignees: node.selectedAssignees,
                            assigneeInfo: node.assigneeInfo,
                            assignees: node.selectedAssignees.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return { id: user.id, name: user.name }; })),
                            activityDefinitionName: node.activityDefinitionName,
                            activityDefinitionId: node.activityDefinitionId,
                            dependency: node.dependency,
                            anonymous: node.anonymous,
                            anonymousText: node.anonymousText,
                            resolved: node.resolved
                        });
                    }));
                    //保存最初的其他节点选人
                    this.originOtherAssignInfos = __spread(tmpOtherAssignInfos);
                    //其他节点与下一节点去重
                    if (this.assignInfos && this.assignInfos.length) {
                        tmpOtherAssignInfos = tmpOtherAssignInfos.filter(( /**
                         * @param {?} a
                         * @return {?}
                         */function (a) {
                            return _this.assignInfos.findIndex(( /**
                             * @param {?} b
                             * @return {?}
                             */function (b) { return b.activityDefinitionId == a.activityDefinitionId; })) < 0;
                        }));
                    }
                    this.otherAssignInfos = tmpOtherAssignInfos;
                }
            };
        /**
         * 选完节点后，重新设置其他节点指派
         * @param response
         */
        /**
         * 选完节点后，重新设置其他节点指派
         * @private
         * @param {?} nodeInfoList
         * @return {?}
         */
        TaskExecuteComponent.prototype.setOtherAssignInfoAgain = /**
         * 选完节点后，重新设置其他节点指派
         * @private
         * @param {?} nodeInfoList
         * @return {?}
         */
            function (nodeInfoList) {
                if (nodeInfoList && nodeInfoList.length) {
                    this.otherAssignInfos = this.originOtherAssignInfos.filter(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) {
                        return nodeInfoList.findIndex(( /**
                         * @param {?} b
                         * @return {?}
                         */function (b) { return b.activityDefinitionId == a.activityDefinitionId; })) < 0;
                    }));
                }
            };
        /**
         * 点击确定后方法
         */
        /**
         * 点击确定后方法
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.assignSubmit = /**
         * 点击确定后方法
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (!this.assignInfos[0].assignees.length) {
                    this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = {
                        workItemId: this.workItemId,
                        assigneeIds: this.assignInfos[0].assignees.map(( /**
                         * @param {?} user
                         * @return {?}
                         */function (user) { return user.id; })),
                        comment: this.comment,
                        addendum: this.addendum,
                        priority: this.selectedPriority
                    };
                    this.taskService.assignNextUsersByWorkItemId(context).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.i18nService.getValue('cueWords.operateSuccess'));
                        _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.claimSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    this.taskService.claim(this.workItemId, this.comment).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.unClaimSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    this.taskService.unClaim(this.workItemId, this.comment).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success')),
                            _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.retrieveSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var retrieveContext = {
                        workItemId: this.workItemId,
                        comment: this.comment
                    };
                    this.taskService.retrieve(retrieveContext).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.transferSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (this.selectedUsers.length === 0) {
                    this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = {
                        workItemId: this.workItemId,
                        assignee: this.selectedUsers[0],
                        comment: this.comment,
                        addendum: this.addendum,
                        priority: this.selectedPriority
                    };
                    this.submitDisable = true; // 禁用提交按钮
                    this.taskService.transfer(context).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.commentSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.comment || this.comment.length === 0) {
                    this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = {
                        workItemId: this.workItemId,
                        comment: this.comment,
                        addendum: this.addendum
                    };
                    this.taskService.comment(context).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.submitResult.isClose = false;
                        _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                    this.comment = '';
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.addSignFrontSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (this.selectedUsers.length === 0) {
                    this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = {
                        workItemId: this.workItemId,
                        action: this.actionEntity.code,
                        assignees: this.selectedUsers,
                        comment: this.comment,
                        addendum: this.addendum,
                        priority: this.selectedPriority
                    };
                    this.submitDisable = true; // 禁用提交按钮
                    this.taskService.addSign(context).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next(_this.submitResult);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.addSignSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (this.selectedUsers.length === 0) {
                    this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var payload = {
                        workItemId: this.workItemId,
                        comment: this.comment,
                        conclusionValue: "Pass",
                        signAssignees: this.selectedUsers,
                        actionCode: "AddSignBehind",
                        multiInstanceType: this.addSign.showMultiInstanceType ? this.addSign.curMultiInstType : this.addSign.originMultiInstType,
                        counterSignRule: 'allPass',
                        completedRule: 'all',
                        allowSignToSign: this.addSign.allowSignToSIgn,
                        activityName: '',
                        addendum: this.addendum,
                        priority: this.selectedPriority
                    };
                    /** @type {?} */
                    var load_7 = this.loadingService.show();
                    this.taskService.adhocAssignee(payload).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next({ result: true, isClose: true });
                        load_7.close();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        load_7.close();
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.readSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = {
                        workItemId: this.workItemId,
                        comment: this.comment,
                        addendum: this.addendum,
                        hideComment: this.hideComment
                    };
                    this.taskService.readTask(context).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next({ result: true, isClose: true });
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.taskService.error(error);
                        _this.subject.next({ result: false, isClose: false });
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.notifySubmit = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (this.selectedUsers.length === 0) {
                    this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = {
                        workItemId: this.workItemId,
                        comment: this.comment,
                        addendum: this.addendum,
                        action: this.actionEntity.code,
                        assignees: this.selectedUsers,
                        priority: this.selectedPriority
                    };
                    this.taskService.addSign(context).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next({ result: true, isClose: false });
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * 催办提交
         */
        /**
         * 催办提交
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.urgeHandleSubmit = /**
         * 催办提交
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (!this.urgeHandleResponse.urgeUsers || !this.urgeHandleResponse.urgeUsers.length) { //没有符合条件的催办用户
                    this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (!this.assignInfos[0].assignees.length) { //没有选人
                    this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.i18nService.getValue('task.receiver'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (!this.urgeHandleComponent.urgeMessageSubject) {
                    this.notify.warning(this.i18nService.getValue('task.noUrgeSubject'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (!this.urgeHandleComponent.urgeMessageContent) {
                    this.notify.warning(this.i18nService.getValue('task.noUrgeContent'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    /** @type {?} */
                    var context = new UrgeHandleContext();
                    context.procInstId = this.processInstanceId;
                    context.urgeUsers = this.urgeHandleResponse.urgeUsers.filter(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) {
                        return _this.assignInfos[0].assignees.some(( /**
                         * @param {?} b
                         * @return {?}
                         */function (b) { return b.id == a.id; }));
                    }));
                    context.urgeMessageSubject = this.urgeHandleComponent.urgeMessageSubject;
                    context.urgeMessageContent = this.urgeHandleComponent.urgeMessageContent;
                    context.addReminder = this.addReminder;
                    /** @type {?} */
                    var load_8 = this.loadingService.show();
                    this.taskService.urgeHandle(context).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                        _this.subject.next({ result: true, isClose: true });
                        load_8.close();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        load_8.close();
                        _this.subject.next({ result: false, isClose: false });
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * 取消征询提交
         */
        /**
         * 取消征询提交
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.cancelConsultSubmit = /**
         * 取消征询提交
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var context = new WorkItemExecuteParam();
                context.workItemId = this.workItemId;
                context.comment = this.comment;
                context.addendum = this.addendum;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.cancelConsult(context).subscribe(( /**
                 * @return {?}
                 */function () {
                    load.close();
                    _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                    _this.subject.next({ result: true, isClose: true });
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.subject.next({ result: false, isClose: false });
                    _this.taskService.error(error);
                }));
            };
        /**
         * @private
         * @return {?}
         */
        TaskExecuteComponent.prototype.completeSubmit = /**
         * @private
         * @return {?}
         */
            function () {
                // 通过、驳回、其他第三方动作
                /** @type {?} */
                var context = {
                    workItemId: this.workItemId,
                    conclusionValue: this.actionEntity.code,
                    comment: this.comment,
                    signAssignees: this.selectedUsers,
                    nextFlowNodes: [],
                    otherAssignNodes: [],
                    addendum: this.addendum,
                    //动态驳回规则
                    dynamicBackWardRule: this.showBackWardConfig.dynamicBackWardRuleAble ? this.showBackWardConfig.displayPlaceholder : '',
                    priority: this.selectedPriority
                };
                if (context.signAssignees.length || !this.response || !this.response.simulationPaths.length) { // 加签 or 仿真返回为空，直接往下走
                    this.completeTask(context);
                }
                else {
                    if (this.selectedNodeId) { // 加签时，选择下一环节被禁用，destNodeId为undefined
                        // 加签时，选择下一环节被禁用，destNodeId为undefined
                        /** @type {?} */
                        var nextFlowNodes = [];
                        /** @type {?} */
                        var nodes = this.selectedNodeId.split('，');
                        for (var i = 0; i < nodes.length; i++) {
                            /** @type {?} */
                            var nextFlowNode = {
                                activityDefinitionId: nodes[i],
                                activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                                dependency: this.assignInfos[i].dependency,
                                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                                assigneeInfo: null,
                                resolved: false,
                                anonymous: this.assignInfos[i].anonymous,
                                anonymousText: this.assignInfos[i].anonymousText
                            };
                            //节点找不到人，且异常提示时，并行网关暂不处理
                            if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                                if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                                    /** @type {?} */
                                    var str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                                    this.notify.warning(str);
                                    this.subject.next({ result: false, isClose: false });
                                    return;
                                }
                            }
                            nextFlowNodes.push(nextFlowNode);
                        }
                        context.nextFlowNodes = nextFlowNodes;
                    }
                    //其他节点指派信息
                    if (this.otherAssignInfos && this.otherAssignInfos.length) {
                        for (var i = 0; i < this.otherAssignInfos.length; i++) {
                            /** @type {?} */
                            var nextFlowNode = {
                                activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                                activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                                dependency: this.otherAssignInfos[i].dependency,
                                selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                                assigneeInfo: null,
                                resolved: false,
                                anonymous: false,
                                anonymousText: ''
                            };
                            context.otherAssignNodes.push(nextFlowNode);
                        }
                    }
                    if (this.response.selectTargetAble && this.destNodes.length > 1 && context.nextFlowNodes.length <= 0) { // 用户没选择跳转节点，不允许提交
                        this.notify.warning(this.i18nService.getValue('cueWords.selectNode'));
                        this.subject.next({ result: false, isClose: false });
                    }
                    else if (this.assignInfos.filter(( /**
                     * @param {?} info
                     * @return {?}
                     */function (info) { return info.assigneeInfo && info.assigneeInfo.selectAssignee && !info.assignees.length; })).length) {
                        this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
                        this.subject.next({ result: false, isClose: false });
                    }
                    else {
                        this.completeTask(context);
                    }
                }
            };
        /**
         * @private
         * @param {?} completeContext
         * @return {?}
         */
        TaskExecuteComponent.prototype.completeTask = /**
         * @private
         * @param {?} completeContext
         * @return {?}
         */
            function (completeContext) {
                var _this = this;
                /** @type {?} */
                var attachmentNecessary = this.actionEntity.parameters.find(( /**
                 * @param {?} entity
                 * @return {?}
                 */function (entity) { return entity.code === 'AttachmentNecessary'; }));
                /** @type {?} */
                var certificationNecessary = this.actionEntity.parameters.find(( /**
                 * @param {?} entity
                 * @return {?}
                 */function (entity) { return entity.code === 'CertificationNecessary'; }));
                /** @type {?} */
                var commentNecessary = this.actionEntity.parameters.find(( /**
                 * @param {?} entity
                 * @return {?}
                 */function (entity) { return entity.code === 'CommentNecessary'; }));
                if (attachmentNecessary && attachmentNecessary.value === 'true' && (!completeContext.addendum.attachment || completeContext.addendum.attachment === '[]')) {
                    this.notify.warning(this.i18nService.getValue('cueWords.attachmentsRequired'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (commentNecessary && commentNecessary.value === 'true' && !completeContext.comment) {
                    this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
                    this.subject.next({ result: false, isClose: false });
                }
                else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
                    this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
                    this.subject.next({ result: false, isClose: false });
                }
                else {
                    if (certificationNecessary && certificationNecessary.value === 'true') {
                        this.verifySignature(( /**
                         * @return {?}
                         */function () {
                            completeContext.verifySigned = _this.verifySigned;
                            _this.taskComplete(completeContext);
                        }));
                        /** @type {?} */
                        var msg = [this.workItemId];
                        gspCA.getSignedMsg(msg);
                    }
                    else {
                        this.taskComplete(completeContext);
                    }
                }
            };
        /**
         * @private
         * @param {?} handler
         * @return {?}
         */
        TaskExecuteComponent.prototype.executeFormActionsAfterCompleteTask = /**
         * @private
         * @param {?} handler
         * @return {?}
         */
            function (handler) {
                var _this = this;
                // 如果表单注册了事件
                if (this.origin == taskImplApi.ActionOrigin.TaskForm && this.ifRegistered && this.formObject) {
                    /** @type {?} */
                    var postActions = this.billMethodConfigs.filter(( /**
                     * @param {?} action
                     * @return {?}
                     */function (action) { return action.action === _this.actionEntity.code && action.executionTime === 'Post'; })).sort(( /**
                     * @param {?} x
                     * @param {?} y
                     * @return {?}
                     */function (x, y) { return x.sortOrder - y.sortOrder; }));
                    if (postActions && postActions.length) {
                        this.executePostFormActions(postActions, handler);
                    }
                }
                else {
                    handler();
                }
            };
        /**
         * @private
         * @param {?} formActions
         * @param {?} hander
         * @return {?}
         */
        TaskExecuteComponent.prototype.executePostFormActions = /**
         * @private
         * @param {?} formActions
         * @param {?} hander
         * @return {?}
         */
            function (formActions, hander) {
                var _this = this;
                if (formActions.length > 0) {
                    this.messageSubject = new rxjs.Subject();
                    this.messageSubject.subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        /** @type {?} */
                        var data = re.data.data;
                        if (data.result === true) {
                            _this.executePostFormActions(formActions, hander);
                        }
                        else {
                            _this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                            throw new Error('审批后表单操作执行失败！');
                        }
                    }));
                    // 执行表单动作
                    /** @type {?} */
                    var formAction = formActions.shift();
                    this.sendMessage(this.workItemId, formAction);
                }
                else {
                    hander();
                }
            };
        //帮助选人后
        //帮助选人后
        /**
         * @param {?} data
         * @return {?}
         */
        TaskExecuteComponent.prototype.afterConfirmForTransfer =
            //帮助选人后
            /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data && data.length) {
                    this.selectedUsers = data.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.id; }));
                    this.selectedUserNgModule = data.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.name; })).join();
                }
                else {
                    this.selectedUsers = [];
                }
                if (this.actionEntity.code == 'AddSign' && this.addSign.originMultiInstType == MultiInstanceType.Preempt.toString() && this.selectedUsers.length > 1) {
                    this.addSign.showMultiInstanceType = true;
                }
                else {
                    this.addSign.showMultiInstanceType = false;
                }
            };
        /**
         * @return {?}
         */
        TaskExecuteComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.submitResult.isClose = false;
                this.subject.next(this.submitResult);
                return this.subject.asObservable();
            };
        /**
         * @return {?}
         */
        TaskExecuteComponent.prototype.getSubject = /**
         * @return {?}
         */
            function () {
                return this.subject.asObservable();
            };
        // 下一环节选择后事件
        // 下一环节选择后事件
        /**
         * @param {?} data
         * @return {?}
         */
        TaskExecuteComponent.prototype.selectNodeChange =
            // 下一环节选择后事件
            /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                var _this = this;
                this.selectedNodeId = data && data.data && data.data.id;
                if (this.response.simulationPaths[data.index].nodeInfoList.every(( /**
                 * @param {?} node
                 * @return {?}
                 */function (node) { return node.resolved === true; }))) { // 已预解析参与者
                    this.setAssignInfo(this.response.simulationPaths[data.index].nodeInfoList);
                    this.setOtherAssignInfoAgain(this.response.simulationPaths[data.index].nodeInfoList);
                }
                else {
                    /** @type {?} */
                    var nodeIds = this.selectedNodeId.split('，').map(( /**
                     * @param {?} node
                     * @return {?}
                     */function (node) { return "\"" + node + "\""; })).join();
                    // 注意一个中文逗号一个英文逗号
                    /** @type {?} */
                    var load_9 = this.loadingService.show();
                    this.taskService.getSimulationAssigneeInfo(this.workItemId, nodeIds).subscribe(( /**
                     * @param {?} nodeInfoList
                     * @return {?}
                     */function (nodeInfoList) {
                        load_9.close();
                        _this.setAssignInfo(nodeInfoList);
                        _this.setOtherAssignInfoAgain(nodeInfoList);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        load_9.close();
                        _this.taskService.error(error);
                    }));
                }
            };
        // 下一环节清空后事件
        // 下一环节清空后事件
        /**
         * @return {?}
         */
        TaskExecuteComponent.prototype.selectNodeClear =
            // 下一环节清空后事件
            /**
             * @return {?}
             */
            function () {
                this.selectedNodeId = null;
                this.assignInfos = [{
                        selectedAssignees: [],
                        assigneeInfo: null,
                        assignees: [],
                        activityDefinitionName: '',
                        activityDefinitionId: '',
                        dependency: '',
                        anonymous: false,
                        anonymousText: '',
                        resolved: false,
                    }];
            };
        /**
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
        TaskExecuteComponent.prototype.afterConfirmForAssign = /**
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
            function (data, index) {
                this.assignInfos[index].assignees = data;
            };
        /**
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
        TaskExecuteComponent.prototype.afterConfirmForOtherAssign = /**
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
            function (data, index) {
                this.otherAssignInfos[index].assignees = data;
            };
        /**
         * 上传附件后事件
         */
        /**
         * 上传附件后事件
         * @param {?} data
         * @return {?}
         */
        TaskExecuteComponent.prototype.addAttachment = /**
         * 上传附件后事件
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.addendum.attachment = JSON.stringify(data);
            };
        /**
         * 手写签名后事件
         */
        /**
         * 手写签名后事件
         * @param {?} data
         * @return {?}
         */
        TaskExecuteComponent.prototype.addSignature = /**
         * 手写签名后事件
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (data) {
                    /** @type {?} */
                    var signInfo = {
                        id: data,
                        waterMarking: null
                    };
                    this.addendum.signature = JSON.stringify(signInfo);
                }
                else {
                    this.addendum.signature = '';
                }
            };
        // 以服务方式打开组件时，左右加上padding
        // 以服务方式打开组件时，左右加上padding
        /**
         * @return {?}
         */
        TaskExecuteComponent.prototype.addPadding =
            // 以服务方式打开组件时，左右加上padding
            /**
             * @return {?}
             */
            function () {
                this.cls = 'f-utils-fill-flex-column h-100 px-4 py-2';
            };
        /**
         * @private
         * @param {?} workItemId
         * @param {?} action
         * @return {?}
         */
        TaskExecuteComponent.prototype.sendMessage = /**
         * @private
         * @param {?} workItemId
         * @param {?} action
         * @return {?}
         */
            function (workItemId, action) {
                if (this.iframe) {
                    /** @type {?} */
                    var iframeWindow = this.iframe.nativeElement.contentWindow;
                    /** @type {?} */
                    var message = {
                        target: workItemId,
                        data: {
                            command: action.method,
                            arguments: action.methodParameters
                        }
                    };
                    iframeWindow.postMessage(message, this.POST_MESSAGE_TARGET);
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    this.notify.warning('请等待表单加载完成后再试');
                }
            };
        // 提交审批前的数字签名及验签
        // 提交审批前的数字签名及验签
        /**
         * @param {?} handler
         * @return {?}
         */
        TaskExecuteComponent.prototype.verifySignature =
            // 提交审批前的数字签名及验签
            /**
             * @param {?} handler
             * @return {?}
             */
            function (handler) {
                /** @type {?} */
                var that = this;
                if ((( /** @type {?} */(window))).gspframeworkService &&
                    (( /** @type {?} */(window))).gspframeworkService.rtf) {
                    (( /** @type {?} */(window))).gspframeworkService.rtf.caEvent.on((( /** @type {?} */(window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', ( /**
                     * @param {?} signedData
                     * @return {?}
                     */function signMsgOver(signedData) {
                        if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                            // 证书对象
                            /** @type {?} */
                            var cert = gspCA.getCurCert();
                            // 验签参数
                            that.verifySigned = {
                                // 要验证的证书base64编码的字符流(certkey)
                                certBase64Info: gspCA.getCertBase64(cert),
                                // 签名原信息
                                msg: [that.workItemId],
                                // 要签名后信息
                                signedmsg: signedData[1][0],
                                // 用户使用场景，目前未使用，可以为空
                                useCase: null,
                            };
                            handler();
                        }
                        else {
                            that.loadingService.close();
                            that.subject.next({ result: false, isClose: false });
                            that.notify.error(signedData[1]);
                            throw new Error(signedData[1]);
                        }
                    }));
                }
            };
        // 通过、驳回、其他第三方动作
        // 通过、驳回、其他第三方动作
        /**
         * @param {?} completeContext
         * @return {?}
         */
        TaskExecuteComponent.prototype.taskComplete =
            // 通过、驳回、其他第三方动作
            /**
             * @param {?} completeContext
             * @return {?}
             */
            function (completeContext) {
                var _this = this;
                this.taskService.complete(completeContext).subscribe(( /**
                 * @param {?} cr
                 * @return {?}
                 */function (cr) {
                    _this.executeFormActionsAfterCompleteTask(( /**
                     * @return {?}
                     */function () {
                        if (cr.needInteraction) { // 通过后指派场景
                            if (_this.origin == taskImplApi.ActionOrigin.TaskCenter) {
                                _this.subject.next({ result: true, isClose: false });
                            }
                            else {
                                _this.subject.next({ result: false, isClose: false }); //关掉loading
                            }
                            _this.notify.info(_this.i18nService.getValue('cueWords.select')
                                + '【' + cr.nextFlowNodes[0].activityDefinitionName + '】'
                                + _this.i18nService.getValue('cueWords.processor'));
                            /** @type {?} */
                            var task = new TaskEntity();
                            /** @type {?} */
                            var action = new TaskAction();
                            task.sourceId = cr.nextFlowNodes[0].assigneeInfo.workItemId;
                            action.code = 'AssignUser';
                            action.name = _this.i18nService.getValue('cueWords.assignUser');
                            _this.handlerService.execute(task, action).subscribe(( /**
                             * @param {?} re
                             * @return {?}
                             */function (re) {
                                if (re) {
                                    _this.subject.next({ result: true, isClose: true });
                                }
                            }));
                        }
                        else {
                            if (completeContext.conclusionValue === 'Pass') {
                                _this.notify.success(_this.i18nService.getValue('cueWords.successPass'));
                            }
                            else if (completeContext.conclusionValue === 'Back') {
                                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                            }
                            else {
                                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                            }
                            _this.subject.next({ result: true, isClose: true });
                        }
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.subject.next({ result: false, isClose: false });
                    _this.taskService.error(error);
                }));
            };
        /**
         * 消息监听处理方法
         */
        TaskExecuteComponent.func = null;
        TaskExecuteComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-task-execute',
                        template: "<!-- \u6279\u91CF\u5BA1\u6279\u65F6\u63D0\u793A -->\r\n<div *ngIf=\"taskList?.length > 20\" class=\"wf-task-batch-message\">\r\n  <span class=\"f-icon f-icon-info\"></span>\r\n  <span class=\"wf-task-batch-selected\">{{\r\n    \"batchSubmit.selected\" | translate\r\n  }}</span>\r\n  <span class=\"wf-task-batch-rows\">{{ taskList.length }}</span>\r\n  <span>{{ \"batchSubmit.item\" | translate }}</span>\r\n  <span>{{ \"batchSubmit.time\" | translate }}</span>\r\n  <span class=\"wf-task-batch-time\">{{ batchSecond }}</span>\r\n  <span>{{ \"batchSubmit.second\" | translate }}</span>\r\n</div>\r\n\r\n<!-- \u610F\u89C1\u8F93\u5165 -->\r\n<wf-comment\r\n  *ngIf=\"!showUrgeMessageSubject\"\r\n  class=\"w-100\"\r\n  name=\"comment\"\r\n  [(ngModel)]=\"comment\"\r\n  [defaultComment]=\"defaultComment\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [processInstanceId]=\"processInstanceId\"\r\n  [showAttachment]=\"showAttachment\"\r\n  [showCommonComment]=\"showCommonComment\"\r\n  [showSign]=\"showSign\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n  [TaskCenterConfig]=\"configList\"\r\n  [curUserId]=\"\r\n    task ? task.owner : taskList && taskList.length ? taskList[0].owner : ''\r\n  \"\r\n  [taskOrigin]=\"origin\"\r\n  (attachment)=\"addAttachment($event)\"\r\n  (signature)=\"addSignature($event)\"\r\n>\r\n</wf-comment>\r\n\r\n<!--\u50AC\u529E\u6D88\u606F-->\r\n<urge-handle\r\n  *ngIf=\"showUrgeMessageSubject\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [showMessageSubject]=\"showUrgeMessageSubject\"\r\n  [urgeMessageSubject]=\"urgeMessageSubject\"\r\n  [urgeMessageContent]=\"urgeMessageContent\"\r\n  [subjectEditable]=\"subjectEditable\"\r\n  [contentEditable]=\"contentEditable\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n>\r\n</urge-handle>\r\n\r\n<!-- \u5BA1\u6279\u8BB0\u5F55\u9690\u85CF\uFF08\u4EC5\u5BF9\u81EA\u5DF1\u53EF\u89C1\uFF09 -->\r\n<div\r\n  *ngIf=\"ifShowCommentToMySelf\"\r\n  class=\"custom-control custom-checkbox custom-control-inline\"\r\n  style=\"margin-bottom: 10px\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"custom-control-input\"\r\n    [(ngModel)]=\"hideComment\"\r\n    id=\"taskcenterhidecomment\"\r\n    name=\"taskcenterhidecomment\"\r\n  />\r\n  <label class=\"custom-control-label\" for=\"taskcenterhidecomment\">{{\r\n    \"static.hideComment\" | translate\r\n  }}</label>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282 -->\r\n<div *ngIf=\"ifSelectNode\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">{{ selectNodeText }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"nodeDefaultValue\"\r\n      [data]=\"destNodes\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'id'\"\r\n      [idField]=\"'id'\"\r\n      [readonly]=\"selectTargetAble && destNodes.length > 1 ? false : true\"\r\n      (selectChange)=\"selectNodeChange($event)\"\r\n      (clear)=\"selectNodeClear()\"\r\n      [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"ifAssignUser || ifUrgeType\">\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"\r\n      assignInfos.length > 1\r\n        ? assignInfo.activityDefinitionName\r\n        : ifUrgeType\r\n        ? ('task.urgeText' | translate)\r\n        : ''\r\n    \"\r\n    [ifShowBlank]=\"false\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u79FB\u4EA4\u3001\u52A0\u7B7E\u3001\u5F81\u8BE2\u3001\u77E5\u4F1A \u4EBA\u5458\u5E2E\u52A9-->\r\n<lib-assignee-info\r\n  *ngIf=\"ifSelectUser\"\r\n  [activityName]=\"selectUserText\"\r\n  [singleSelect]=\"singleSelect\"\r\n  [filter]=\"filter\"\r\n  [disabled]=\"false\"\r\n  [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n  [allowGlobalAssign]=\"true\"\r\n  [wfContext]=\"wfContext\"\r\n  (afterConfirm)=\"afterConfirmForTransfer($event)\"\r\n>\r\n</lib-assignee-info>\r\n\r\n<!-- \u52A0\u7B7E -->\r\n<!-- \u5BA1\u6279\u7B56\u7565 -->\r\n<div *ngIf=\"addSign.showMultiInstanceType\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.multiInstanceType\" | translate }}\r\n  </div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-radiogroup\r\n      [(ngModel)]=\"addSign.curMultiInstType\"\r\n      [data]=\"addSign.multiInstanceType\"\r\n      [horizontal]=\"true\"\r\n    >\r\n    </farris-radiogroup>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5141\u8BB8\u518D\u52A0\u7B7E -->\r\n<div *ngIf=\"addSign.showSignToSign\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.allowSignToSign\" | translate }}{{ actionEntity.name }}\r\n  </div>\r\n  <farris-switch [(ngModel)]=\"addSign.allowSignToSIgn\" [size]=\"'small'\">\r\n  </farris-switch>\r\n</div>\r\n\r\n<!-- \u9A73\u56DE\u540E\u518D\u6B21\u63D0\u4EA4\u65F6\u76F4\u63A5\u56DE\u5230\u672C\u8282\u70B9 -->\r\n<div\r\n  *ngIf=\"showBackWardConfig.dynamicBackWardRuleAble\"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">{{ showBackWardConfig.title }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"showBackWardConfig.displayPlaceholder\"\r\n      [data]=\"showBackWardConfig.backWardRules\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'value'\"\r\n      [idField]=\"'value'\"\r\n      [readonly]=\"false\"\r\n      [enableClear]=\"false\"\r\n      [placeholder]=\"showBackWardConfig.displayPlaceholder\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u7D27\u6025\u7A0B\u5EA6\uFF0C\u4E0B\u4E00\u73AF\u8282\u4E3A\u7ED3\u675F\u65F6\u4E0D\u5C55\u793A -->\r\n<div\r\n  *ngIf=\"\r\n    task?.priority &&\r\n    enablePriority &&\r\n    task.priorityItemList &&\r\n    !selectedNodeId?.startsWith('EndEvent')\r\n  \"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"task.priority\" | translate }}\r\n  </div>\r\n  <farris-radiogroup\r\n    [(ngModel)]=\"selectedPriority\"\r\n    [data]=\"task.priorityItemList\"\r\n    [horizontal]=\"true\"\r\n  >\r\n  </farris-radiogroup>\r\n</div>\r\n\r\n<!-- \u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"otherAssignInfos?.length\">\r\n  <div class=\"wf-task-splitter\">\r\n    {{ \"startProcess.otherNodesAssign\" | translate\r\n    }}<span class=\"wf-task-splitter-line\"></span>\r\n  </div>\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"assignInfo.activityDefinitionName\"\r\n    [ifShowBlank]=\"true\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForOtherAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #taskExecuteButtons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"submit()\"\r\n    [disabled]=\"submitDisable\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                        styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
                    }] }
        ];
        /** @nocollapse */
        TaskExecuteComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: uiNotify.NotifyService },
                { type: I18nService },
                { type: WfTaskHandlerService },
                { type: uiLoading.LoadingService },
                { type: uiMessager.MessagerService },
                { type: core.Injector }
            ];
        };
        TaskExecuteComponent.propDecorators = {
            buttons: [{ type: core.ViewChild, args: ['taskExecuteButtons',] }],
            sysUserHelp: [{ type: core.ViewChild, args: [sysmgrUi.SysFarrisLookupComponent,] }],
            urgeHandleComponent: [{ type: core.ViewChild, args: [UrgeHandleComponent,] }],
            cls: [{ type: core.HostBinding, args: ['class',] }]
        };
        return TaskExecuteComponent;
    }(taskImplApi.ActionBaseImplComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 提交审批上下文参数
     */
    var /**
     * 提交审批上下文参数
     */ StartProcessPayload = /** @class */ (function () {
        function StartProcessPayload() {
        }
        return StartProcessPayload;
    }());
    var FlowNodeInfo = /** @class */ (function () {
        function FlowNodeInfo() {
        }
        return FlowNodeInfo;
    }());
    var Assignee = /** @class */ (function () {
        function Assignee() {
        }
        return Assignee;
    }());
    var CancelSubmitPayload = /** @class */ (function () {
        function CancelSubmitPayload() {
        }
        return CancelSubmitPayload;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var MessageType = {
        SubmitSuccess: 'SubmitSuccess',
        SubmitFailed: 'SubmitFailed',
        InfoSelectProcess: 'InfoSelectProcess',
        InfoSelectNode: 'InfoSelectNode',
        InfoSelectParticipant: 'InfoSelectParticipant',
        Cancel: 'Cancel',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 提交审批时，记下选择的流程
     */
    var /**
     * 提交审批时，记下选择的流程
     */ StartProcessCache = /** @class */ (function () {
        function StartProcessCache() {
        }
        return StartProcessCache;
    }());
    /**
     * 提交审批时，记下选择的流程
     */
    var /**
     * 提交审批时，记下选择的流程
     */ SelectedProcessItem = /** @class */ (function () {
        function SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName) {
            /**
             * 记录时间
             */
            this.logTime = new Date();
            this.processCategory = processCategoryId;
            this.processDefinitionId = processDefinitionId;
            this.processDefinitionName = processDefinitionName;
            this.logTime = new Date();
        }
        return SelectedProcessItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessSelectorComponent = /** @class */ (function () {
        // task center-ui中start-process-menu使用了此选择器，构造方法改动时，需重新编译
        function ProcessSelectorComponent(taskService, loadingService, notify, i18nService, messager, injector, handlerService) {
            this.taskService = taskService;
            this.loadingService = loadingService;
            this.notify = notify;
            this.i18nService = i18nService;
            this.messager = messager;
            this.injector = injector;
            this.handlerService = handlerService;
            this.destProcesses = []; //候选流程
            //候选流程
            this.destNodes = []; //候选下一环节
            //保存模拟流程后返回的内容，选择节点时使用
            this.assignInfos = [{
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: null,
                    resolved: false,
                }]; //节点返回的指派信息（多个）
            //节点返回的指派信息（多个）
            this.otherAssignInfos = []; //节点返回的指派信息（多个）
            //选择的下一环节ID，后续环节id的拼接
            this.payload = new StartProcessPayload; //保存表单上传来的payload
            //保存表单上传来的payload
            this.subject = new rxjs.Subject(); //返回bool
            //返回bool
            this.subjectWithResponse = new rxjs.Subject(); //返回流程上下文
            //返回流程上下文
            this.subjectCancel = new rxjs.Subject(); //点击取消后的subject
            //点击取消后的subject
            this.submitDisable = false; //提交按钮是否禁用
            //提交按钮是否禁用
            this.showButtons = false;
            this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
            //选择流程的placeholder
            this.wfContext = new WfContext(); //工作流上下文
            //默认下一环节（提示用）
            this.dialogHeight = 240; //弹框基本高度
            //确认取消按钮
            this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
        }
        /**
         * @return {?}
         */
        ProcessSelectorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        Object.defineProperty(ProcessSelectorComponent.prototype, "parameter", {
            set: 
            //是否从iframe打开，应用IDP提交审批集成
            /**
             * @param {?} parameter
             * @return {?}
             */
            function (parameter) {
                if (parameter) {
                    this.showButtons = true;
                    this.setParam(parameter);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} param
         * @return {?}
         */
        ProcessSelectorComponent.prototype.setParam = /**
         * @param {?} param
         * @return {?}
         */
            function (param) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                if (!param) {
                    return;
                }
                this.payload.id = param.id;
                this.payload.processDefinitionId = param.processDefinitionId;
                this.payload.processDefinitionKey = param.processDefinitionKey;
                this.payload.bizDefKey = param.bizDefKey;
                this.payload.dataModelId = param.dataModelId;
                this.payload.dataId = param.dataId;
                this.payload.name = param.name;
                this.payload.startUserId = param.startUserId;
                this.payload.nextFlowNodes = [];
                this.payload.otherAssignNodes = [];
                this.wfContext.processCategoryId = param.bizDefKey;
                this.startProcessSimulate(this.payload, subject);
                return subject.asObservable();
            };
        /**
         * @param {?} payload
         * @param {?} subject
         * @return {?}
         */
        ProcessSelectorComponent.prototype.startProcessSimulate = /**
         * @param {?} payload
         * @param {?} subject
         * @return {?}
         */
            function (payload, subject) {
                var _this = this;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.startProcessSimulate(payload).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    load.close();
                    _this.response = response;
                    response.priorityInfo && response.priorityInfo.enable && (_this.dialogHeight += 40);
                    _this.destProcesses = response.procDefs.map(( /**
                     * @param {?} process
                     * @return {?}
                     */function (process) { return ({ id: process.procDefId, name: process.procDefName + ("(v" + process.version + ".0)") }); })); //增加流程的版本信息
                    if (_this.destProcesses.length === 1) { //只有一个候选流程时
                        _this.selectedProcessId = _this.destProcesses[0].id;
                        _this.setNextNode(response);
                        _this.processDefaultValue = _this.destProcesses[0].name;
                    }
                    else { //多个流程时，取上一次选择的
                        //多个流程时，取上一次选择的
                        /** @type {?} */
                        var selectedProcessId_1 = _this.getSelectedProcessCache(_this.payload.bizDefKey);
                        if (selectedProcessId_1 && _this.destProcesses.findIndex(( /**
                         * @param {?} p
                         * @return {?}
                         */function (p) { return p.id === selectedProcessId_1.processDefinitionId; })) > -1) {
                            _this.getDestNodes(selectedProcessId_1.processDefinitionId);
                            _this.processDefaultValue = selectedProcessId_1.processDefinitionName;
                        }
                        else {
                            _this.processPlaceholder = _this.i18nService.getValue('task.selectPlaceholder');
                        }
                        _this.dialogHeight = 330;
                    }
                    if (_this.assignInfos && _this.assignInfos.length) {
                        _this.dialogHeight += (_this.assignInfos.length) * 40;
                    }
                    if (_this.otherAssignInfos && _this.otherAssignInfos.length) {
                        _this.dialogHeight += (_this.otherAssignInfos.length + 1) * 40;
                    }
                    _this.dialogHeight = _this.dialogHeight > 440 ? 440 : _this.dialogHeight;
                    subject.next({ result: true, dialogHeight: _this.dialogHeight });
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    subject.error(error);
                    _this.taskService.error(error);
                }));
            };
        /**
         * 选择某个流程后
         * @param data
         */
        /**
         * 选择某个流程后
         * @param {?} data
         * @return {?}
         */
        ProcessSelectorComponent.prototype.selectProcessChange = /**
         * 选择某个流程后
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.nodeCombo.onClear();
                this.getDestNodes(data.data.id);
            };
        /**
         * 根据选择的流程定义id获取下一环节信息
         * @param selectedProcessId
         */
        /**
         * 根据选择的流程定义id获取下一环节信息
         * @private
         * @param {?} selectedProcessId
         * @return {?}
         */
        ProcessSelectorComponent.prototype.getDestNodes = /**
         * 根据选择的流程定义id获取下一环节信息
         * @private
         * @param {?} selectedProcessId
         * @return {?}
         */
            function (selectedProcessId) {
                var _this = this;
                this.selectedProcessId = selectedProcessId;
                this.destNodes = [];
                this.nodePlaceholder = '';
                this.clearAssignInfos();
                /** @type {?} */
                var payload = new StartProcessPayload();
                payload.processDefinitionId = this.selectedProcessId;
                payload.dataId = this.payload.dataId;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.startProcessSimulate(payload).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    load.close();
                    _this.response = response;
                    _this.setNextNode(response);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.taskService.error(error);
                }));
            };
        /**
         * 选择节点后事件
         */
        /**
         * 选择节点后事件
         * @param {?} data
         * @return {?}
         */
        ProcessSelectorComponent.prototype.selectNodeChange = /**
         * 选择节点后事件
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.clearAssignInfos();
                this.selectedNodeId = data.data.id;
                /** @type {?} */
                var nodeNames = data.data.name.split('，');
                if (this.response.simulationPaths[data.index].nodeInfoList.every(( /**
                 * @param {?} node
                 * @return {?}
                 */function (node) { return node.resolved === true; }))) { //已预解析参与者
                    this.setAssignInfo(this.response.simulationPaths[data.index]);
                    this.setOtherAssignInfo(this.response); //切换节点后，其他节点指派需要更新，重新去重
                }
                else { //未预解析参与者
                    //未预解析参与者
                    /** @type {?} */
                    var payload_1 = new StartProcessPayload();
                    payload_1.processDefinitionId = this.selectedProcessId;
                    payload_1.dataId = this.payload.dataId;
                    payload_1.nextFlowNodes = [];
                    this.selectedNodeId.split('，').forEach(( /**
                     * @param {?} nodeId
                     * @param {?} index
                     * @return {?}
                     */function (nodeId, index) {
                        /** @type {?} */
                        var nextFlowNode = new FlowNodeInfo();
                        nextFlowNode.activityDefinitionId = nodeId;
                        nextFlowNode.activityDefinitionName = nodeNames[index];
                        payload_1.nextFlowNodes.push(nextFlowNode);
                    }));
                    /** @type {?} */
                    var load_1 = this.loadingService.show();
                    this.taskService.startProcessSimulate(payload_1).subscribe(( /**
                     * @param {?} response
                     * @return {?}
                     */function (response) {
                        load_1.close();
                        _this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
                        _this.setOtherAssignInfo(response); //切换节点后，其他节点指派需要更新，重新去重
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        load_1.close();
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
       * 实现真正的提交
       */
        /**
         * 实现真正的提交
         * @return {?}
         */
        ProcessSelectorComponent.prototype.startProcessSubmit = /**
         * 实现真正的提交
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.selectedProcessId) {
                    this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectProcess')) :
                        this.notify.warning(this.i18nService.getValue('startProcess.selectProcess'));
                    return;
                }
                if (!this.selectedNodeId) {
                    this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectNode')) :
                        this.notify.warning(this.i18nService.getValue('startProcess.selectNode'));
                    return;
                }
                if (this.assignInfos.filter(( /**
                 * @param {?} info
                 * @return {?}
                 */function (info) { return (info.assigneeInfo || info.selectedAssignees.length) && !info.assignees.length; })).length) { //空参与者策略时，不提示选人
                    this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectProcessor')) :
                        this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
                    return;
                }
                if (this.response.priorityInfo && this.response.priorityInfo.enable && !this.response.priorityInfo.priority) {
                    this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectPriority')) :
                        this.notify.warning(this.i18nService.getValue('task.selectPriority'));
                    return;
                }
                /** @type {?} */
                var nodes = this.selectedNodeId.split('，');
                for (var i = 0; i < nodes.length; i++) {
                    /** @type {?} */
                    var nextFlowNode = {
                        activityDefinitionId: nodes[i],
                        activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                        dependency: this.assignInfos[i].dependency,
                        selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: false,
                        anonymousText: ''
                    };
                    //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
                    if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                        if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                            /** @type {?} */
                            var str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                            this.openFromIframe ? this.messager.warning(str) : this.notify.warning(str);
                            return;
                        }
                    }
                    this.payload.nextFlowNodes.push(nextFlowNode);
                }
                //拼接其他节点选人结果
                if (this.otherAssignInfos && this.otherAssignInfos.length) {
                    for (var i = 0; i < this.otherAssignInfos.length; i++) {
                        /** @type {?} */
                        var nextFlowNode = {
                            activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                            activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                            dependency: this.otherAssignInfos[i].dependency,
                            selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                            assigneeInfo: null,
                            resolved: false,
                            anonymous: false,
                            anonymousText: ''
                        };
                        this.payload.otherAssignNodes.push(nextFlowNode);
                    }
                }
                this.payload.processDefinitionId = this.selectedProcessId;
                this.submitDisable = true;
                //紧急程度
                if (this.response.priorityInfo && this.response.priorityInfo.enable) {
                    this.payload.priority = this.response.priorityInfo.priority;
                }
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.startProcess(this.payload).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    load.close();
                    _this.submitDisable = false;
                    _this.subject.next(true);
                    _this.subjectWithResponse.next(response);
                    /** @type {?} */
                    var messageAfterSubmit = _this.i18nService.getValue('startProcess.submitSuccess');
                    if (_this.openFromIframe) {
                        (( /** @type {?} */(window.parent))).gspWfService.eventHandler({ data: { type: MessageType.SubmitSuccess, message: messageAfterSubmit } });
                    }
                    else {
                        _this.handlerService.handleSubmitMessage(ConfigCode.Info_After_Submit, _this.payload.bizDefKey);
                    }
                    if (!_this.openFromIframe && response.needInteraction) { //提交审批后需要指派场景
                        _this.notify.info(_this.i18nService.getValue('cueWords.select')
                            + response.nextFlowNodes[0].activityDefinitionName
                            + _this.i18nService.getValue('cueWords.processor'));
                        /** @type {?} */
                        var task = new TaskEntity();
                        /** @type {?} */
                        var action = new TaskAction();
                        task.sourceId = response.nextFlowNodes[0].assigneeInfo.workItemId;
                        action.code = 'AssignUser';
                        action.name = _this.i18nService.getValue('cueWords.assignUser');
                        _this.handlerService.execute(task, action).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) { }));
                    }
                    _this.setSelectedProcessCache();
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.payload.nextFlowNodes = [];
                    _this.submitDisable = false;
                    _this.subject.next(false); //已经有人用了这个subject，提交失败的话返回false by fangpengfei@20210324
                    _this.taskService.error(error);
                }));
            };
        /**
         * 选择流程清空
         */
        /**
         * 选择流程清空
         * @return {?}
         */
        ProcessSelectorComponent.prototype.selectProcessClear = /**
         * 选择流程清空
         * @return {?}
         */
            function () {
                this.selectedProcessId = '';
                this.destNodes = [];
                this.nodePlaceholder = '';
                this.selectedNodeId = '';
                this.clearAssignInfos();
                this.response = null;
            };
        /**
         * 选择节点清空
         */
        /**
         * 选择节点清空
         * @return {?}
         */
        ProcessSelectorComponent.prototype.selectNodeClear = /**
         * 选择节点清空
         * @return {?}
         */
            function () {
                this.selectedNodeId = '';
                this.clearAssignInfos();
            };
        /**
         * 用户帮助选人
         */
        /**
         * 用户帮助选人
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
        ProcessSelectorComponent.prototype.afterConfirm = /**
         * 用户帮助选人
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
            function (data, index) {
                this.assignInfos[index].assignees = data;
            };
        /**
         * 其他节点用户帮助选人
         * @param data
         * @param index
         */
        /**
         * 其他节点用户帮助选人
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
        ProcessSelectorComponent.prototype.otherAssignInfosAfterConfirm = /**
         * 其他节点用户帮助选人
         * @param {?} data
         * @param {?} index
         * @return {?}
         */
            function (data, index) {
                this.otherAssignInfos[index].assignees = data;
            };
        /**
         * 弹框点击取消
         */
        /**
         * 弹框点击取消
         * @return {?}
         */
        ProcessSelectorComponent.prototype.cancel = /**
         * 弹框点击取消
         * @return {?}
         */
            function () {
                if (this.openFromIframe) {
                    (( /** @type {?} */(window.parent))).gspWfService.eventHandler({ data: { type: MessageType.Cancel, message: '' } });
                }
                else {
                    this.subjectCancel.next(false);
                }
            };
        /**
         * 获取提交审批后返回值（bool型，兼容历史）
         */
        /**
         * 获取提交审批后返回值（bool型，兼容历史）
         * @return {?}
         */
        ProcessSelectorComponent.prototype.getSubject = /**
         * 获取提交审批后返回值（bool型，兼容历史）
         * @return {?}
         */
            function () {
                return this.subject.asObservable();
            };
        /**
         * 获取提交审批后返回值（实体型，带流程上下文）
         */
        /**
         * 获取提交审批后返回值（实体型，带流程上下文）
         * @return {?}
         */
        ProcessSelectorComponent.prototype.getSubjectWithResponse = /**
         * 获取提交审批后返回值（实体型，带流程上下文）
         * @return {?}
         */
            function () {
                return this.subjectWithResponse.asObservable();
            };
        /**
         * 点击取消后的subject，关闭窗口使用
         * @returns
         */
        /**
         * 点击取消后的subject，关闭窗口使用
         * @return {?}
         */
        ProcessSelectorComponent.prototype.getSubjectCancel = /**
         * 点击取消后的subject，关闭窗口使用
         * @return {?}
         */
            function () {
                return this.subjectCancel.asObservable();
            };
        /**
         * 设置下一环节
         */
        /**
         * 设置下一环节
         * @private
         * @param {?} response
         * @return {?}
         */
        ProcessSelectorComponent.prototype.setNextNode = /**
         * 设置下一环节
         * @private
         * @param {?} response
         * @return {?}
         */
            function (response) {
                this.destNodes = response.simulationPaths && response.simulationPaths.map(( /**
                 * @param {?} path
                 * @return {?}
                 */function (path) {
                    return ({
                        id: path.nodeInfoList.map(( /**
                         * @param {?} node
                         * @return {?}
                         */function (node) { return node.activityDefinitionId; })).join('，'),
                        name: path.nodeInfoList.map(( /**
                         * @param {?} node
                         * @return {?}
                         */function (node) { return node.activityDefinitionName; })).join('，')
                    });
                }));
                //处理默认分支，无默认分支返回-1
                /** @type {?} */
                var defaultIndex = response.simulationPaths.findIndex(( /**
                 * @param {?} a
                 * @return {?}
                 */function (a) { return a.default; }));
                if (defaultIndex > -1) {
                    this.selectedNodeId = this.destNodes[defaultIndex].id;
                    this.nodeDefaultValue = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
                    this.setAssignInfo(response.simulationPaths[defaultIndex]);
                    this.setOtherAssignInfo(response);
                }
                else {
                    this.nodePlaceholder = this.i18nService.getValue('task.selectPlaceholder');
                }
            };
        /**
         * 设置当前指派信息帮助参数
         */
        /**
         * 设置当前指派信息帮助参数
         * @private
         * @param {?} simulationPaths
         * @return {?}
         */
        ProcessSelectorComponent.prototype.setAssignInfo = /**
         * 设置当前指派信息帮助参数
         * @private
         * @param {?} simulationPaths
         * @return {?}
         */
            function (simulationPaths) {
                var _this = this;
                this.assignInfos = [];
                this.selectedNodeId.split('，').forEach(( /**
                 * @param {?} nodeId
                 * @return {?}
                 */function (nodeId) {
                    /** @type {?} */
                    var node = simulationPaths.nodeInfoList.find(( /**
                     * @param {?} node
                     * @return {?}
                     */function (node) { return node.activityDefinitionId === nodeId; }));
                    if (node) {
                        _this.assignInfos.push({
                            selectedAssignees: node.selectedAssignees,
                            assigneeInfo: node.assigneeInfo,
                            assignees: node.selectedAssignees.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return { id: user.id, name: user.name }; })),
                            activityDefinitionName: node.activityDefinitionName,
                            activityDefinitionId: node.activityDefinitionId,
                            dependency: node.dependency,
                            anonymous: node.anonymous,
                            anonymousText: node.anonymousText,
                            resolved: node.resolved
                        });
                    }
                    else {
                        _this.assignInfos.push({
                            selectedAssignees: [],
                            assigneeInfo: null,
                            assignees: [],
                            activityDefinitionName: '',
                            activityDefinitionId: '',
                            dependency: '',
                            anonymous: false,
                            anonymousText: '',
                            resolved: false,
                        });
                    }
                }));
            };
        /**
         * 设置其他节点指派
         * @param response
         */
        /**
         * 设置其他节点指派
         * @private
         * @param {?} response
         * @return {?}
         */
        ProcessSelectorComponent.prototype.setOtherAssignInfo = /**
         * 设置其他节点指派
         * @private
         * @param {?} response
         * @return {?}
         */
            function (response) {
                var _this = this;
                this.otherAssignInfos = [];
                /** @type {?} */
                var tmpOtherAssignInfos = [];
                /** @type {?} */
                var otherAssignNodes = response.otherAssignNodes;
                if (otherAssignNodes && otherAssignNodes.length) {
                    otherAssignNodes.forEach(( /**
                     * @param {?} node
                     * @return {?}
                     */function (node) {
                        tmpOtherAssignInfos.push({
                            selectedAssignees: node.selectedAssignees,
                            assigneeInfo: node.assigneeInfo,
                            assignees: node.selectedAssignees.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return { id: user.id, name: user.name }; })),
                            activityDefinitionName: node.activityDefinitionName,
                            activityDefinitionId: node.activityDefinitionId,
                            dependency: node.dependency,
                            anonymous: node.anonymous,
                            anonymousText: node.anonymousText,
                            resolved: node.resolved
                        });
                    }));
                    //其他节点与下一节点去重
                    if (this.assignInfos && this.assignInfos.length) {
                        tmpOtherAssignInfos = tmpOtherAssignInfos.filter(( /**
                         * @param {?} a
                         * @return {?}
                         */function (a) {
                            return _this.assignInfos.findIndex(( /**
                             * @param {?} b
                             * @return {?}
                             */function (b) { return b.activityDefinitionId == a.activityDefinitionId; })) < 0;
                        }));
                    }
                    this.otherAssignInfos = tmpOtherAssignInfos;
                }
            };
        /**
         * 清空当前指派信息帮助参数
         */
        /**
         * 清空当前指派信息帮助参数
         * @private
         * @return {?}
         */
        ProcessSelectorComponent.prototype.clearAssignInfos = /**
         * 清空当前指派信息帮助参数
         * @private
         * @return {?}
         */
            function () {
                this.assignInfos = [{
                        selectedAssignees: [],
                        assigneeInfo: null,
                        assignees: [],
                        activityDefinitionName: '',
                        activityDefinitionId: '',
                        dependency: '',
                        anonymous: false,
                        anonymousText: '',
                        resolved: false,
                    }];
                this.otherAssignInfos = [];
            };
        /**
         * 获取浏览器缓存，上次流程选择的结果
         */
        /**
         * 获取浏览器缓存，上次流程选择的结果
         * @private
         * @param {?} processCategoryId
         * @return {?}
         */
        ProcessSelectorComponent.prototype.getSelectedProcessCache = /**
         * 获取浏览器缓存，上次流程选择的结果
         * @private
         * @param {?} processCategoryId
         * @return {?}
         */
            function (processCategoryId) {
                /** @type {?} */
                var browserCache = ( /** @type {?} */(JSON.parse(localStorage.getItem("gspWfStartProcess"))));
                if (browserCache && browserCache.selectedProcessList) {
                    return browserCache.selectedProcessList.find(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.processCategory == processCategoryId; }));
                }
                return undefined;
            };
        /**
         * 浏览器缓存记下流程选择的结果
         */
        /**
         * 浏览器缓存记下流程选择的结果
         * @private
         * @return {?}
         */
        ProcessSelectorComponent.prototype.setSelectedProcessCache = /**
         * 浏览器缓存记下流程选择的结果
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var processCategoryId = this.payload.bizDefKey;
                /** @type {?} */
                var processDefinitionId = this.payload.processDefinitionId;
                /** @type {?} */
                var process = this.destProcesses.find(( /**
                 * @param {?} a
                 * @return {?}
                 */function (a) { return a.id == processDefinitionId; }));
                /** @type {?} */
                var processDefinitionName = process && process.name;
                /** @type {?} */
                var browserCache = ( /** @type {?} */(JSON.parse(localStorage.getItem("gspWfStartProcess"))));
                if (browserCache && browserCache.selectedProcessList) {
                    /** @type {?} */
                    var selectedProcessList = browserCache.selectedProcessList;
                    if (selectedProcessList.findIndex(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.processCategory == processCategoryId; })) > -1) {
                        selectedProcessList.map(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) {
                            if (item.processCategory == processCategoryId) {
                                item.processDefinitionId = processDefinitionId;
                                item.processDefinitionName = processDefinitionName;
                                item.logTime = new Date();
                            }
                        }));
                        browserCache.selectedProcessList = selectedProcessList;
                        localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
                    }
                    else {
                        /** @type {?} */
                        var item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
                        selectedProcessList.push(item);
                        browserCache.selectedProcessList = selectedProcessList;
                        localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
                    }
                }
                else {
                    /** @type {?} */
                    var browserCache_1 = new StartProcessCache();
                    /** @type {?} */
                    var selectedProcessList = [];
                    /** @type {?} */
                    var item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
                    selectedProcessList.push(item);
                    browserCache_1.selectedProcessList = selectedProcessList;
                    localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache_1));
                }
            };
        ProcessSelectorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-process-selector',
                        template: "<div>\r\n  <!-- \u5373\u5C06\u6D41\u5411 -->\r\n  <farris-section\r\n    [mainTitle]=\"'startProcess.processTowards' | translate\"\r\n    style=\"padding: 0 24px\"\r\n  >\r\n    <div class=\"wf-submit-section\">\r\n      <!-- \u9009\u62E9\u6D41\u7A0B\u5B9A\u4E49\uFF0C\u4E0B\u62C9 -->\r\n      <div class=\"wf-task-handler-help-div wf-submit-item\">\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"startProcess.procDef\" | translate }}\r\n        </div>\r\n        <div class=\"d-flex\" style=\"flex: 1\">\r\n          <farris-combo-list\r\n            style=\"flex: 1\"\r\n            [(ngModel)]=\"processDefaultValue\"\r\n            [data]=\"destProcesses\"\r\n            [editable]=\"false\"\r\n            [textField]=\"'name'\"\r\n            [valueField]=\"'id'\"\r\n            [idField]=\"'id'\"\r\n            [readonly]=\"destProcesses.length > 1 ? false : true\"\r\n            (selectChange)=\"selectProcessChange($event)\"\r\n            (clear)=\"selectProcessClear()\"\r\n            [placeholder]=\"processPlaceholder\"\r\n          >\r\n          </farris-combo-list>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- \u4E0B\u4E00\u8282\u70B9\uFF0C\u4E0B\u62C9 -->\r\n      <div class=\"wf-task-handler-help-div wf-submit-item\">\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"task.nextNodeText\" | translate }}\r\n        </div>\r\n        <div class=\"d-flex\" style=\"flex: 1\">\r\n          <farris-combo-list\r\n            style=\"flex: 1\"\r\n            #nodeCombo\r\n            [(ngModel)]=\"nodeDefaultValue\"\r\n            [data]=\"destNodes\"\r\n            [editable]=\"false\"\r\n            [textField]=\"'name'\"\r\n            [valueField]=\"'id'\"\r\n            [idField]=\"'id'\"\r\n            [readonly]=\"destNodes.length > 1 ? false : true\"\r\n            [placeholder]=\"nodePlaceholder\"\r\n            (selectChange)=\"selectNodeChange($event)\"\r\n            (clear)=\"selectNodeClear()\"\r\n          >\r\n          </farris-combo-list>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- \u529E\u7406\u4EBA\u5458 -->\r\n      <lib-assignee-info\r\n        *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n        [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n        [setAnonymous]=\"assignInfo.anonymous\"\r\n        [setAnonymousText]=\"assignInfo.anonymousText\"\r\n        [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n        [activityName]=\"\r\n          assignInfos.length > 1 ? assignInfo.activityDefinitionName : ''\r\n        \"\r\n        [ifShowBlank]=\"assignInfos.length > 1 ? false : true\"\r\n        [openFromIframe]=\"openFromIframe\"\r\n        [wfContext]=\"wfContext\"\r\n        [index]=\"i\"\r\n        [ifHorizontal]=\"true\"\r\n        (afterConfirm)=\"afterConfirm($event, i)\"\r\n      ></lib-assignee-info>\r\n\r\n      <!-- \u7D27\u6025\u7A0B\u5EA6 -->\r\n      <div\r\n        *ngIf=\"\r\n          response?.priorityInfo?.enable &&\r\n          response?.priorityInfo?.priorityItemList?.length\r\n        \"\r\n        class=\"wf-task-handler-help-div wf-submit-item\"\r\n      >\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"task.priority\" | translate }}\r\n        </div>\r\n        <farris-radiogroup\r\n          [(ngModel)]=\"response.priorityInfo.priority\"\r\n          [data]=\"response.priorityInfo.priorityItemList\"\r\n          [horizontal]=\"true\"\r\n        >\r\n        </farris-radiogroup>\r\n      </div>\r\n    </div>\r\n  </farris-section>\r\n\r\n  <!-- \u4FEE\u6539\u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA -->\r\n  <farris-section\r\n    *ngIf=\"otherAssignInfos && otherAssignInfos.length\"\r\n    [mainTitle]=\"'startProcess.otherNodesAssign' | translate\"\r\n    style=\"padding: 0 24px\"\r\n  >\r\n    <div class=\"wf-submit-section\">\r\n      <!-- \u529E\u7406\u4EBA\u5458 -->\r\n      <lib-assignee-info\r\n        *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n        [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n        [setAnonymous]=\"assignInfo.anonymous\"\r\n        [setAnonymousText]=\"assignInfo.anonymousText\"\r\n        [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n        [activityName]=\"assignInfo.activityDefinitionName\"\r\n        [ifShowBlank]=\"true\"\r\n        [openFromIframe]=\"openFromIframe\"\r\n        [wfContext]=\"wfContext\"\r\n        [index]=\"i + 'other'\"\r\n        [ifHorizontal]=\"true\"\r\n        (afterConfirm)=\"otherAssignInfosAfterConfirm($event, i)\"\r\n      ></lib-assignee-info>\r\n    </div>\r\n  </farris-section>\r\n</div>\r\n\r\n<!-- \u5F39\u6846\u663E\u793A\u65F6\uFF0C\u663E\u793A\u6309\u94AE -->\r\n<div *ngIf=\"showButtons\" class=\"modal-footer\">\r\n  <div *ngIf=\"showButtons; then buttons\"></div>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #buttons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    [disabled]=\"submitDisable\"\r\n    directive-throttle\r\n    (throttleClick)=\"startProcessSubmit()\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                        styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
                    }] }
        ];
        /** @nocollapse */
        ProcessSelectorComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: uiLoading.LoadingService },
                { type: uiNotify.NotifyService },
                { type: I18nService },
                { type: uiMessager.MessagerService },
                { type: core.Injector },
                { type: WfTaskHandlerService }
            ];
        };
        ProcessSelectorComponent.propDecorators = {
            nodeCombo: [{ type: core.ViewChild, args: ['nodeCombo',] }],
            buttons: [{ type: core.ViewChild, args: ['buttons',] }],
            openFromIframe: [{ type: core.Input }],
            parameter: [{ type: core.Input }]
        };
        return ProcessSelectorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonComment = /** @class */ (function () {
        function CommonComment() {
        }
        /**
         * @return {?}
         */
        CommonComment.newEntity = /**
         * @return {?}
         */
            function () {
                return {
                    id: TaskService.newId(),
                    message: ''
                };
            };
        return CommonComment;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommentManageComponent = /** @class */ (function () {
        function CommentManageComponent(i18nService, taskService, notify, loadingService) {
            this.i18nService = i18nService;
            this.taskService = taskService;
            this.notify = notify;
            this.loadingService = loadingService;
            this.commentList = [];
            this.originCommentList = [];
            this.commentColumns = [];
            this.confirmSubject = new rxjs.Subject(); //点击确定
            //点击确定
            this.cancelSubject = new rxjs.Subject(); //点击取消
            /**
             * 系统预置的不允许编辑删除
             * @param data data.rowData为实体数据
             * @return
             */
            this.beforeEdit = ( /**
             * @param {?} data
             * @return {?}
             */function (data) {
                if (data.rowData.userId == '*') {
                    return rxjs.of(false);
                }
                return rxjs.of(true);
            });
        }
        /**
         * @return {?}
         */
        CommentManageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.commentColumns = [{
                        field: 'message',
                        width: 100,
                        title: this.i18nService.getValue('comment.static.content'),
                        editor: { type: uiDatagridEditors.EditorTypes.TEXTBOX, options: {} },
                    }, {
                        field: 'userId',
                        width: 20,
                        title: this.i18nService.getValue('comment.static.type'),
                        template: this.commentTypeCell
                    }, {
                        field: 'operate',
                        width: 20,
                        title: this.i18nService.getValue('comment.static.operate'),
                        template: this.commentOperateCell
                    }];
                //加载意见列表
                this.loadComments();
            };
        /**
       * 点击常用意见，获取用户常用意见列表
       */
        /**
         * 点击常用意见，获取用户常用意见列表
         * @return {?}
         */
        CommentManageComponent.prototype.loadComments = /**
         * 点击常用意见，获取用户常用意见列表
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.getCommentList(this.filter).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    load.close();
                    _this.commentList = data;
                    _this.originCommentList = JSON.parse(JSON.stringify(data));
                }), ( /**
                 * @return {?}
                 */function () {
                    load.close();
                }));
            };
        /**
         * 新增一条常用意见
         */
        /**
         * 新增一条常用意见
         * @return {?}
         */
        CommentManageComponent.prototype.addCommonComment = /**
         * 新增一条常用意见
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var newEntity = CommonComment.newEntity();
                newEntity.sortOrder = this.commentList.length + 1;
                if (this.filter && this.filter.type) {
                    newEntity.type = this.filter.type;
                }
                this.commentList = this.commentList.concat(newEntity);
                //新增后直接编辑单元格
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.dataGrid.editCell(newEntity.id, 'message');
                }), 100);
            };
        /**
         * 删除一条意见 data.rowData
         */
        /**
         * 删除一条意见 data.rowData
         * @param {?} data
         * @return {?}
         */
        CommentManageComponent.prototype.deleteComment = /**
         * 删除一条意见 data.rowData
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (data.rowData.userId !== '*') {
                    this.commentList = this.commentList.filter(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return c.id != data.rowData.id; }));
                    this.originCommentList = this.originCommentList.filter(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return c.id != data.rowData.id; }));
                    this.dataGrid.loadData(this.commentList);
                    this.taskService.deleteComment(data.rowData.id).subscribe(( /**
                     * @return {?}
                     */function () { }));
                }
            };
        /**
         * 常用意见点击保存
         */
        /**
         * 常用意见点击保存
         * @return {?}
         */
        CommentManageComponent.prototype.saveCommonComment = /**
         * 常用意见点击保存
         * @return {?}
         */
            function () {
                var _this = this;
                this.dataGrid.endCellEdit();
                this.commentList = this.commentList.filter(( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) { return c.message; }));
                this.commentList.forEach(( /**
                 * @param {?} comment
                 * @return {?}
                 */function (comment) {
                    if (_this.taskService.getBytesLength(comment.message) > 255) {
                        _this.notify.warning(_this.i18nService.getValue('cueWords.commonCommentTooLong'));
                        _this.dataGrid.editCell(comment.id, 'message');
                        throw new Error("");
                    }
                }));
                this.commentList.forEach(( /**
                 * @param {?} comment
                 * @return {?}
                 */function (comment) {
                    /** @type {?} */
                    var origin = _this.originCommentList.find(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return c.id == comment.id; }));
                    if (!origin || comment.message !== origin.message || comment.sortOrder != origin.sortOrder) {
                        _this.taskService.addComment(comment).subscribe(( /**
                         * @return {?}
                         */function () { }));
                    }
                }));
                //此处已返回给farris
                this.confirmSubject.next({ action: 'submit', data: this.commentList });
            };
        /**
         * 点击取消（此处已返回给farris）
         */
        /**
         * 点击取消（此处已返回给farris）
         * @return {?}
         */
        CommentManageComponent.prototype.clickCancel = /**
         * 点击取消（此处已返回给farris）
         * @return {?}
         */
            function () {
                this.commentList = this.commentList.filter(( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) { return c.message; }));
                this.cancelSubject.next({ action: 'cancel', data: this.originCommentList });
            };
        /**
         * @return {?}
         */
        CommentManageComponent.prototype.getConfirmSUbject = /**
         * @return {?}
         */
            function () {
                return this.confirmSubject.asObservable();
            };
        /**
         * @return {?}
         */
        CommentManageComponent.prototype.getCancelSubject = /**
         * @return {?}
         */
            function () {
                return this.cancelSubject.asObservable();
            };
        CommentManageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-comment-manage',
                        template: "<div class=\"task-comment-div\">\r\n  <div class=\"task-comment-datagrid-div\">\r\n    <farris-datagrid\r\n      #dataGrid\r\n      [data]=\"commentList\"\r\n      [columns]=\"commentColumns\"\r\n      [editable]=\"true\"\r\n      [fit]=\"true\"\r\n      [editMode]=\"'cell'\"\r\n      [pagination]=\"false\"\r\n      [fitColumns]=\"true\"\r\n      [clickToEdit]=\"true\"\r\n      [beforeEdit]=\"beforeEdit\"\r\n      [idField]=\"'id'\"\r\n    >\r\n    </farris-datagrid>\r\n  </div>\r\n  <div\r\n    class=\"task-comment-add task-comment-add-common\"\r\n    (click)=\"addCommonComment()\"\r\n  >\r\n    <span class=\"f-icon f-icon-plus mr-1\"></span>\r\n    <span>{{ \"comment.static.clickToAdd\" | translate }}</span>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7C7B\u522B -->\r\n<ng-template #commentTypeCell let-ctx>\r\n  <div>\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId === '*'\"\r\n      class=\"task-comment-type task-comment-type-blue\"\r\n      >{{ \"comment.static.public\" | translate }}</span\r\n    >\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId !== '*'\"\r\n      class=\"task-comment-type task-comment-type-yellow\"\r\n      >{{ \"comment.static.private\" | translate }}</span\r\n    >\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u64CD\u4F5C -->\r\n<ng-template #commentOperateCell let-ctx>\r\n  <div\r\n    *ngIf=\"ctx.rowData.userId !== '*'\"\r\n    class=\"btn-link\"\r\n    style=\"padding: 5px 0\"\r\n    (click)=\"deleteComment(ctx)\"\r\n  >\r\n    {{ \"comment.static.delete\" | translate }}\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4\u6309\u94AE -->\r\n<ng-template #formButtonRef>\r\n  <button class=\"btn btn-secondary mr-2\" (click)=\"clickCancel()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-primary\" (click)=\"saveCommonComment()\">\r\n    {{ \"comment.static.confirm\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                        styles: [".task-comment-div{display:flex;flex-direction:column;height:100%}.task-comment-datagrid-div{display:flex;flex-grow:0;overflow:hidden;padding:0 24px;height:100%}.task-comment-type{padding:2px 6px;border-radius:4px;font-size:12px}.task-comment-type-blue{background:#eef5ff;border:0 solid #aed1ff;color:#5ea4ff}.task-comment-type-yellow{background:#fef5ec;border:0 solid #fad0a1;color:#f5a144}.task-comment-add{display:flex;justify-content:center;align-items:center;margin:0 24px;cursor:pointer;overflow:hidden;font-size:12px;text-align:center;padding:6px;border-radius:4px}.task-comment-add-common{color:#a8adb8;background:#f4f6fc;border:1px dashed #d2d7e2}.task-comment-add:hover{background:rgba(238,245,255,.8);border:1px solid rgba(82,157,255,.4)}"]
                    }] }
        ];
        /** @nocollapse */
        CommentManageComponent.ctorParameters = function () {
            return [
                { type: I18nService },
                { type: TaskService },
                { type: uiNotify.NotifyService },
                { type: uiLoading.LoadingService }
            ];
        };
        CommentManageComponent.propDecorators = {
            filter: [{ type: core.Input }],
            dataGrid: [{ type: core.ViewChild, args: ['dataGrid',] }],
            commentTypeCell: [{ type: core.ViewChild, args: ['commentTypeCell',] }],
            commentOperateCell: [{ type: core.ViewChild, args: ['commentOperateCell',] }],
            buttons: [{ type: core.ViewChild, args: ['formButtonRef',] }]
        };
        return CommentManageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WfTaskHandlerService = /** @class */ (function () {
        function WfTaskHandlerService(logService, flowchartService, injector, resolver, modalService, taskService, notify, i18nService, frameworkService, appRef) {
            this.logService = logService;
            this.flowchartService = flowchartService;
            this.injector = injector;
            this.resolver = resolver;
            this.modalService = modalService;
            this.taskService = taskService;
            this.notify = notify;
            this.i18nService = i18nService;
            this.frameworkService = frameworkService;
            this.appRef = appRef;
            this.subject = new rxjs.Subject();
            this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
            //系统当前语言
            this.batchSubmitNum = {
                //批量提交数量
                successNum: 0,
                failedNum: 0,
                errorNum: 0,
            };
            this.batchCancelNum = {
                //批量取消提交数量
                successNum: 0,
                errorNum: 0
            };
            this.loading = this.injector.get(uiLoading.LoadingService);
            this.message = this.injector.get(uiMessager.MessagerService);
        }
        /**
         * 处理单条任务
         * @param entity 任务实体
         * @param action 任务动作
         */
        /**
         * 处理单条任务
         * @param {?} task
         * @param {?} action 任务动作
         * @param {?=} otherParams
         * @return {?}
         */
        WfTaskHandlerService.prototype.execute = /**
         * 处理单条任务
         * @param {?} task
         * @param {?} action 任务动作
         * @param {?=} otherParams
         * @return {?}
         */
            function (task, action, otherParams) {
                switch (action.code) {
                    case 'ViewBizLog': //审批日志。如果是inSuite，根据流程实例打开
                        this.logService.showByProcInstId(task.processInstanceId);
                        break;
                    case 'ViewFlowChart': //查看流程
                        this.flowchartService.viewFlowchartByProcInstIdAndDataId(task.processInstanceId, task.refBizId);
                        break;
                    case 'ViewExecuteForm': // 联查单据
                        this.openApp(task, action, otherParams);
                        break;
                    default: //办理类任务
                        this.complete(task, action);
                }
                return this.subject.asObservable();
            };
        /**
         * @param {?} assigneeInfo
         * @param {?} openFromIframe
         * @return {?}
         */
        WfTaskHandlerService.prototype.assignByInfo = /**
         * @param {?} assigneeInfo
         * @param {?} openFromIframe
         * @return {?}
         */
            function (assigneeInfo, openFromIframe) {
                /** @type {?} */
                var assignSubject = new rxjs.Subject();
                return assignSubject.asObservable();
            };
        /**
         * @private
         * @param {?} task
         * @param {?} action
         * @return {?}
         */
        WfTaskHandlerService.prototype.complete = /**
         * @private
         * @param {?} task
         * @param {?} action
         * @return {?}
         */
            function (task, action) {
                var _this = this;
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(TaskExecuteComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.setTask(task);
                compRef.instance.setAction(action);
                compRef.instance.addPadding();
                /** @type {?} */
                var modalConfig = {
                    title: action.name ? action.name : this.i18nService.getValue('task.title'),
                    width: 550,
                    height: compRef.instance.dialogHeight,
                    showButtons: true,
                    buttons: compRef.instance.buttons
                };
                /** @type {?} */
                var dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.getSubject().subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    re && re.result && _this.subject.next(true);
                    re && re.result && dialog.close();
                }));
            };
        /**
         * 打开审批联查界面
         * @param entity 任务实体
         * @param action 动作实体
         */
        /**
         * 打开审批联查界面
         * @param {?} entity 任务实体
         * @param {?} action 动作实体
         * @param {?=} otherParams
         * @return {?}
         */
        WfTaskHandlerService.prototype.openApp = /**
         * 打开审批联查界面
         * @param {?} entity 任务实体
         * @param {?} action 动作实体
         * @param {?=} otherParams
         * @return {?}
         */
            function (entity, action, otherParams) {
                var _this = this;
                /** @type {?} */
                var sourceId = entity.sourceId;
                /** @type {?} */
                var formInfoLoading = this.loading.show();
                this.taskService.getTaskFormInfo(sourceId).subscribe(( /**
                 * @param {?} formInfo
                 * @return {?}
                 */function (formInfo) {
                    formInfoLoading.close();
                    if (!formInfo) {
                        _this.notify.info(_this.i18nService.getValue('task.notFoundBill'));
                        return;
                    }
                    /** @type {?} */
                    var options = {
                        appType: 'menu',
                        funcId: '',
                        appId: '',
                        appEntrance: '',
                        tabId: sourceId,
                        isNewTab: true
                    };
                    // 传工作流上下文参数
                    /** @type {?} */
                    var parameters = new Map();
                    // 功能菜单情况
                    if (formInfo.appId) {
                        // 默认联查审批界面
                        if (formInfo.formType === '1') { //表单嵌流程
                            parameters.set('workItemId', sourceId);
                            parameters.set('procInstId', action.parameters[0].value);
                            parameters.set('taskState', entity.state);
                            parameters.set('isAssign', entity.actions.some(( /**
                             * @param {?} action
                             * @return {?}
                             */function (action) { return action.code === 'AssignUser'; })));
                            formInfo.parameters.forEach(( /**
                             * @param {?} item
                             * @return {?}
                             */function (item) {
                                return parameters.set(item.code, item.value);
                            }));
                            options.funcId = formInfo.appId;
                        }
                        else { //流程嵌表单
                            options.funcId = 'WF0120';
                            parameters.set('task', entity);
                            parameters.set('formInfo', formInfo);
                            otherParams && parameters.set('taskFilter', otherParams.taskFilter);
                        }
                    }
                    else if (formInfo.url) { //表单格式
                        options.funcId = 'WF0120';
                        parameters.set('task', entity);
                        parameters.set('formInfo', formInfo);
                        otherParams && parameters.set('taskFilter', otherParams.taskFilter);
                    }
                    else {
                        _this.notify.info(_this.i18nService.getValue('task.notFoundBill'));
                        return;
                    }
                    options.entityParams = parameters;
                    options.queryStringParams = parameters; //兼容IDP表单
                    _this.openMenu(options, _this.i18nService.getValue('static.taskForm'));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    formInfoLoading.close();
                    _this.taskService.error(error);
                }));
            };
        /**
         * 打开菜单，区分是否inSuite环境，用不同方式打开菜单
         * @param options 打开参数
         * @param menuTitle 菜单名称
         */
        /**
         * 打开菜单，区分是否inSuite环境，用不同方式打开菜单
         * @private
         * @param {?} options 打开参数
         * @param {?} menuTitle 菜单名称
         * @return {?}
         */
        WfTaskHandlerService.prototype.openMenu = /**
         * 打开菜单，区分是否inSuite环境，用不同方式打开菜单
         * @private
         * @param {?} options 打开参数
         * @param {?} menuTitle 菜单名称
         * @return {?}
         */
            function (options, menuTitle) {
                var _this = this;
                if (this.taskService.isInSuite()) {
                    options.menuTitle = menuTitle;
                    /** @type {?} */
                    var extObj = (( /** @type {?} */(window))).gspframeworkService.rtf.extendMethod.getExtObj();
                    extObj.iGIXMenuOpen(options);
                }
                else {
                    /** @type {?} */
                    var openMenuLoading_1 = this.loading.show();
                    this.frameworkService.openMenu$(options).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        openMenuLoading_1.close();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        openMenuLoading_1.close();
                        _this.taskService.error(error);
                    }));
                }
            };
        /**
         * 返回动作列表，表单嵌流程用到
         * @param workItemId
         */
        /**
         * 返回动作列表，表单嵌流程用到
         * @param {?} workItemId
         * @return {?}
         */
        WfTaskHandlerService.prototype.refreshActions = /**
         * 返回动作列表，表单嵌流程用到
         * @param {?} workItemId
         * @return {?}
         */
            function (workItemId) {
                return this.taskService.getWorkItemActions(workItemId).pipe(operators.switchMap(( /**
                 * @param {?} actionList
                 * @return {?}
                 */function (actionList) {
                    return rxjs.of(actionList.filter(( /**
                     * @param {?} action
                     * @return {?}
                     */function (action) {
                        return action.code !== 'ViewBizLog' &&
                            action.code !== 'ViewFlowChart' &&
                            action.code !== 'ViewExecuteForm';
                    })));
                })));
            };
        /**
         * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei@2020.06.22）
         * @param procInstId 流程实例ID
         * @param state 任务状态
         * @param actionCode 动作Code
         */
        /**
         * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei\@2020.06.22）
         * @param {?} procInstId 流程实例ID
         * @param {?} state 任务状态
         * @param {?} actionCode 动作Code
         * @return {?}
         */
        WfTaskHandlerService.prototype.executeByProcInstId = /**
         * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei\@2020.06.22）
         * @param {?} procInstId 流程实例ID
         * @param {?} state 任务状态
         * @param {?} actionCode 动作Code
         * @return {?}
         */
            function (procInstId, state, actionCode) {
                var _this = this;
                /** @type {?} */
                var action = new TaskAction();
                action.code = actionCode;
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.taskService.getTaskByProcInstId(procInstId, state).subscribe(( /**
                 * @param {?} task
                 * @return {?}
                 */function (task) {
                    if (task) {
                        _this.execute(task, action).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            subject.next(re);
                        }));
                    }
                    else {
                        _this.notify.info(_this.i18nService.getValue('task.noTask'));
                    }
                }));
                return subject.asObservable();
            };
        /**
         * 根据workItemId 办理任务
         * @param workItemId 工作项ID
         * @param action 动作实体
         */
        /**
         * 根据workItemId 办理任务
         * @param {?} workItemId 工作项ID
         * @param {?} action 动作实体
         * @return {?}
         */
        WfTaskHandlerService.prototype.executeByWorkItemId = /**
         * 根据workItemId 办理任务
         * @param {?} workItemId 工作项ID
         * @param {?} action 动作实体
         * @return {?}
         */
            function (workItemId, action) {
                /** @type {?} */
                var task = new TaskEntity();
                task.sourceId = workItemId;
                return this.execute(task, action);
            };
        /**
         * 提交审批
         * @param payload 上下文参数
         * @returns subject true：提交成功，false：提交失败
         */
        /**
         * 提交审批
         * @param {?} payload 上下文参数
         * @return {?} subject true：提交成功，false：提交失败
         */
        WfTaskHandlerService.prototype.startProcess = /**
         * 提交审批
         * @param {?} payload 上下文参数
         * @return {?} subject true：提交成功，false：提交失败
         */
            function (payload) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var configLoad = this.loading.show();
                this.taskService.getTaskCenterConfigByCode(ConfigCode.If_Show_Submit_Dialog, OwnerType.BizDefKey, payload.bizDefKey).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    configLoad.close();
                    if (re && re.currentValue === 'false') { //自定义无需弹框
                        //自定义无需弹框
                        /** @type {?} */
                        var simulateLoad_1 = _this.loading.show();
                        _this.taskService.startProcessSimulate(payload).subscribe(( /**
                         * @param {?} response
                         * @return {?}
                         */function (response) {
                            simulateLoad_1.close();
                            if (!response || response.needInteraction === false) { //预解析无需交互
                                //预解析无需交互
                                /** @type {?} */
                                var executeLoad_1 = _this.loading.show();
                                _this.taskService.startProcess(payload).subscribe(( /**
                                 * @param {?} response
                                 * @return {?}
                                 */function (response) {
                                    executeLoad_1.close();
                                    if (payload.withResponse) {
                                        subject.next(response);
                                    }
                                    else {
                                        subject.next(true);
                                    }
                                    _this.handleSubmitMessage(ConfigCode.Info_After_Submit, payload.bizDefKey);
                                }), ( /**
                                 * @param {?} error
                                 * @return {?}
                                 */function (error) {
                                    executeLoad_1.close();
                                    if (payload.withResponse) {
                                        subject.next(null);
                                    }
                                    else {
                                        subject.next(false);
                                    }
                                    _this.taskService.error(error);
                                }));
                            }
                            else { //预解析需要交互
                                _this.showStartProcessDialog(payload).subscribe(( /**
                                 * @param {?} re
                                 * @return {?}
                                 */function (re) {
                                    subject.next(re);
                                }));
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            simulateLoad_1.close();
                            subject.next(null);
                            _this.taskService.error(error);
                        }));
                    }
                    else { //无是否弹框配置
                        _this.showStartProcessDialog(payload).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            subject.next(re);
                        }));
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    configLoad.close();
                    _this.taskService.error(error);
                }));
                return subject.asObservable();
            };
        /**
         * 提交审批弹框
         * @param payload 参数
         * @param withResponse 是否带返回值
         */
        /**
         * 提交审批弹框
         * @private
         * @param {?} payload 参数
         * @return {?}
         */
        WfTaskHandlerService.prototype.showStartProcessDialog = /**
         * 提交审批弹框
         * @private
         * @param {?} payload 参数
         * @return {?}
         */
            function (payload) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.setParam(payload).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    /** @type {?} */
                    var modalConfig = {
                        title: _this.i18nService.getValue('startProcess.title'),
                        width: 520,
                        height: re && re.dialogHeight,
                        showButtons: true,
                        buttons: compRef.instance.buttons,
                        opened: ( /**
                         * @return {?}
                         */function () {
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                compRef.changeDetectorRef && compRef.changeDetectorRef.detectChanges();
                            }), 100);
                        })
                    };
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                    if (payload.withResponse === true) { //内部使用
                        compRef.instance.getSubjectWithResponse().subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            subject.next(re);
                            dialog.close();
                        }));
                        compRef.instance.getSubjectCancel().subscribe(( /**
                         * @return {?}
                         */function () {
                            dialog.close();
                        }));
                    }
                    else { //已有业务组调用
                        compRef.instance.getSubject().subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            subject.next(re);
                            dialog.close();
                        }));
                        compRef.instance.getSubjectCancel().subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            subject.next(re);
                            dialog.close();
                        }));
                    }
                }));
                return subject.asObservable();
            };
        /**
         * 取消提交
         * @payload payload 参数
         */
        /**
         * 取消提交
         * \@payload payload 参数
         * @param {?} payload
         * @return {?}
         */
        WfTaskHandlerService.prototype.cancelSubmit = /**
         * 取消提交
         * \@payload payload 参数
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var load = this.loading.show();
                this.taskService.cancelSubmit(payload).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    load.close();
                    subject.next(true);
                    if (re && re.needInteraction) {
                        _this.notify.info(_this.i18nService.getValue('startProcess.cancelSubmitInfo'));
                    }
                    else {
                        _this.handleSubmitMessage(ConfigCode.Info_After_Cancel_Submit, payload.bizDefKey);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    subject.error(false);
                    _this.taskService.error(error);
                }));
                return subject.asObservable();
            };
        /**
         * 提交审批
         * @param dataId 表单id
         * @param bizDefKey 入口单据id
         * @param options 自定义配置
         */
        /**
         * 提交审批
         * @param {?} dataId 表单id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.submitWithBizDefKey = /**
         * 提交审批
         * @param {?} dataId 表单id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (dataId, bizDefKey) {
                if (!dataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var payload = new StartProcessPayload();
                payload.dataId = dataId;
                payload.bizDefKey = bizDefKey;
                payload.withResponse = true;
                return this.startProcess(payload);
            };
        /**
         * 取消提交审批
         * @param dataId 表单id
         * @param bizDefKey 入口单据id
         * @param options 自定义配置
         */
        /**
         * 取消提交审批
         * @param {?} dataId 表单id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.cancelSubmitWithDataId = /**
         * 取消提交审批
         * @param {?} dataId 表单id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (dataId, bizDefKey) {
                if (!dataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var cancelSubmitPayload = new CancelSubmitPayload();
                cancelSubmitPayload.dataId = dataId;
                cancelSubmitPayload.bizDefKey = bizDefKey;
                return this.cancelSubmit(cancelSubmitPayload);
            };
        /**
         * 批量提交审批
         * @param dataIds 表单ID集合
         * @param bizDefKey 入口单据id
         */
        /**
         * 批量提交审批
         * @param {?} dataIds 表单ID集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.batchSubmitWithBizDefKey = /**
         * 批量提交审批
         * @param {?} dataIds 表单ID集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (dataIds, bizDefKey) {
                if (!dataIds || !dataIds.length) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                if (dataIds.length === 1) {
                    /** @type {?} */
                    var startPayload = new StartProcessPayload();
                    startPayload.bizDefKey = bizDefKey;
                    startPayload.dataId = dataIds[0];
                    return this.startProcess(startPayload);
                }
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var load = this.loading.show();
                this.batchSubmitNum.successNum = 0;
                this.batchSubmitNum.failedNum = 0;
                this.batchSubmitNum.errorNum = 0;
                this.batchSubmitHelpFunction(__spread(dataIds), bizDefKey, ( /**
                 * @return {?}
                 */function () {
                    load.close();
                    subject.next(true);
                }));
                return subject.asObservable();
            };
        /**
         * 批量提交审批辅助函数
         */
        /**
         * 批量提交审批辅助函数
         * @private
         * @param {?} dataIds
         * @param {?} bizDefKey
         * @param {?} handler
         * @return {?}
         */
        WfTaskHandlerService.prototype.batchSubmitHelpFunction = /**
         * 批量提交审批辅助函数
         * @private
         * @param {?} dataIds
         * @param {?} bizDefKey
         * @param {?} handler
         * @return {?}
         */
            function (dataIds, bizDefKey, handler) {
                var _this = this;
                if (dataIds && dataIds.length > 0) {
                    /** @type {?} */
                    var dataId = dataIds.shift();
                    //引用类型转换
                    /** @type {?} */
                    var startPayload_1 = new StartProcessPayload();
                    startPayload_1.bizDefKey = bizDefKey;
                    startPayload_1.dataId = dataId;
                    startPayload_1.variables = { simulate: true };
                    this.taskService.startProcess(startPayload_1).subscribe(( /**
                     * @param {?} response
                     * @return {?}
                     */function (response) {
                        if (response.needInteraction) { //需要交互
                            _this.batchSubmitNum.failedNum++;
                            _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                        }
                        else { //不需要交互
                            startPayload_1.variables = { simulate: false };
                            _this.taskService.startProcess(startPayload_1).subscribe(( /**
                             * @param {?} response
                             * @return {?}
                             */function (response) {
                                _this.batchSubmitNum.successNum++;
                                _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                            }), ( /**
                             * @return {?}
                             */function () {
                                _this.batchSubmitNum.errorNum++;
                                _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                            }));
                        }
                    }), ( /**
                     * @return {?}
                     */function () {
                        _this.batchSubmitNum.errorNum++;
                        _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    }));
                }
                else { //批量执行完毕
                    this.showBatchSubmitInfo(this.batchSubmitNum, bizDefKey);
                    handler(); //执行回调函数
                }
            };
        /**
         * 批量取消提交审批
         * @param dataIds 表单ID集合
         * @param bizDefKey 入口单据id
         */
        /**
         * 批量取消提交审批
         * @param {?} dataIds 表单ID集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.batchCancelSubmitWithDataId = /**
         * 批量取消提交审批
         * @param {?} dataIds 表单ID集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (dataIds, bizDefKey) {
                if (!dataIds || !dataIds.length) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                if (dataIds.length === 1) {
                    return this.cancelSubmitWithDataId(dataIds[0], bizDefKey);
                }
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var load = this.loading.show();
                this.batchCancelNum.successNum = 0;
                this.batchCancelNum.errorNum = 0;
                this.batchCancelHelpFunction(__spread(dataIds), bizDefKey, ( /**
                 * @return {?}
                 */function () {
                    load.close();
                    subject.next(true);
                }));
                return subject.asObservable();
            };
        /**
         * 批量取消辅助函数
         */
        /**
         * 批量取消辅助函数
         * @private
         * @param {?} dataIds
         * @param {?} bizDefKey
         * @param {?} handler
         * @return {?}
         */
        WfTaskHandlerService.prototype.batchCancelHelpFunction = /**
         * 批量取消辅助函数
         * @private
         * @param {?} dataIds
         * @param {?} bizDefKey
         * @param {?} handler
         * @return {?}
         */
            function (dataIds, bizDefKey, handler) {
                var _this = this;
                if (dataIds && dataIds.length) {
                    /** @type {?} */
                    var dataId = dataIds.shift();
                    //引用类型转换
                    /** @type {?} */
                    var cancelPayload = new CancelSubmitPayload();
                    cancelPayload.dataId = dataId;
                    cancelPayload.bizDefKey = bizDefKey;
                    this.taskService.cancelSubmit(cancelPayload).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.batchCancelNum.successNum++;
                        _this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
                    }), ( /**
                     * @return {?}
                     */function () {
                        _this.batchCancelNum.errorNum++;
                        _this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
                    }));
                }
                else {
                    this.showBatchCancelSubmitInfo(this.batchCancelNum, bizDefKey);
                    handler();
                }
            };
        /**
         * 子表提交审批
         * @param parentDataId 主表id
         * @param childDataId 子表id
         * @param bizDefKey 入口单据id
         */
        /**
         * 子表提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataId 子表id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.childSubmit = /**
         * 子表提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataId 子表id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (parentDataId, childDataId, bizDefKey) {
                if (!parentDataId || !childDataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var startProcessPayload = new StartProcessPayload();
                startProcessPayload.dataId = parentDataId + "," + childDataId;
                startProcessPayload.bizDefKey = bizDefKey;
                return this.startProcess(startProcessPayload);
            };
        /**
         * 子表取消提交审批
         * @param parentDataId 主表id
         * @param childDataId 子表id
         * @param bizDefKey 入口单据id
         */
        /**
         * 子表取消提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataId 子表id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.childCancelSubmit = /**
         * 子表取消提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataId 子表id
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (parentDataId, childDataId, bizDefKey) {
                if (!parentDataId || !childDataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var cancelSubmitPayload = new CancelSubmitPayload();
                cancelSubmitPayload.dataId = parentDataId + "," + childDataId;
                cancelSubmitPayload.bizDefKey = bizDefKey;
                return this.cancelSubmit(cancelSubmitPayload);
            };
        /**
         * 子表批量提交审批
         * @param parentDataId 主表id
         * @param childDataIds 子表id集合
         * @param bizDefKey 入口单据id
         */
        /**
         * 子表批量提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataIds 子表id集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.childBatchSubmit = /**
         * 子表批量提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataIds 子表id集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (parentDataId, childDataIds, bizDefKey) {
                if (!parentDataId || !childDataIds) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var dataIds = childDataIds.map(( /**
                 * @param {?} childDataId
                 * @return {?}
                 */function (childDataId) { return parentDataId + "," + childDataId; }));
                return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
            };
        /**
         * 子表批量取消提交审批
         * @param parentDataId 主表id
         * @param childDataIds 子表id集合
         * @param bizDefKey 入口单据id
         */
        /**
         * 子表批量取消提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataIds 子表id集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.childBatchCancelSubmit = /**
         * 子表批量取消提交审批
         * @param {?} parentDataId 主表id
         * @param {?} childDataIds 子表id集合
         * @param {?} bizDefKey 入口单据id
         * @return {?}
         */
            function (parentDataId, childDataIds, bizDefKey) {
                if (!parentDataId || !childDataIds) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var dataIds = childDataIds.map(( /**
                 * @param {?} childDataId
                 * @return {?}
                 */function (childDataId) { return parentDataId + "," + childDataId; }));
                return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
            };
        /**
       * 批量提交提示信息
       * @param successNum 成功条数
       * @param failedNum 需要交互的条数
       * @param errorNum 执行报错的条数
       */
        /**
         * 批量提交提示信息
         * @private
         * @param {?} num
         * @param {?} bizDefKey
         * @return {?}
         */
        WfTaskHandlerService.prototype.showBatchSubmitInfo = /**
         * 批量提交提示信息
         * @private
         * @param {?} num
         * @param {?} bizDefKey
         * @return {?}
         */
            function (num, bizDefKey) {
                var _this = this;
                if (num.successNum && !num.failedNum && !num.errorNum) { //批量全部成功
                    this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Submit, OwnerType.BizDefKey, bizDefKey).subscribe(( /**
                     * @param {?} config
                     * @return {?}
                     */function (config) {
                        if (_this.curLanguage === 'en') {
                            _this.notify.success(JSON.parse(config.currentValue).en);
                        }
                        if (_this.curLanguage === 'zh-CHS') {
                            _this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                        }
                    }));
                }
                else { //非全部成功
                    //非全部成功
                    /** @type {?} */
                    var message = '';
                    num.successNum && (message += this.i18nService.getValue('batchStartProcess.success') + ("\u3010" + num.successNum + "\u3011") + this.i18nService.getValue('batchStartProcess.row'));
                    num.errorNum && (message += this.i18nService.getValue('batchStartProcess.error') + ("\u3010" + num.errorNum + "\u3011") + this.i18nService.getValue('batchStartProcess.row'));
                    num.failedNum && (message += this.i18nService.getValue('batchStartProcess.failed') + ("\u3010" + num.failedNum + "\u3011") + this.i18nService.getValue('batchStartProcess.row'));
                    message += this.i18nService.getValue('batchStartProcess.single');
                    this.message.show('warning', message, { safeHtml: false });
                }
            };
        /**
         * 批量取消提交提示信息
         */
        /**
         * 批量取消提交提示信息
         * @private
         * @param {?} num
         * @param {?} bizDefKey
         * @return {?}
         */
        WfTaskHandlerService.prototype.showBatchCancelSubmitInfo = /**
         * 批量取消提交提示信息
         * @private
         * @param {?} num
         * @param {?} bizDefKey
         * @return {?}
         */
            function (num, bizDefKey) {
                var _this = this;
                if (num.successNum && !num.errorNum) { //批量全部成功
                    this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Cancel_Submit, OwnerType.BizDefKey, bizDefKey).subscribe(( /**
                     * @param {?} config
                     * @return {?}
                     */function (config) {
                        if (_this.curLanguage === 'en') {
                            _this.notify.success(JSON.parse(config.currentValue).en);
                        }
                        if (_this.curLanguage === 'zh-CHS') {
                            _this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                        }
                    }));
                }
                else {
                    /** @type {?} */
                    var message = '';
                    num.successNum && (message += this.i18nService.getValue('startProcess.success') + ("\u3010" + num.successNum + "\u3011") + this.i18nService.getValue('startProcess.row'));
                    num.errorNum && (message += this.i18nService.getValue('startProcess.failed') + ("\u3010" + num.errorNum + "\u3011") + this.i18nService.getValue('startProcess.row'));
                    this.message.show('warning', message, { safeHtml: false });
                }
            };
        /**
         * @param {?} code
         * @param {?} ownerId
         * @return {?}
         */
        WfTaskHandlerService.prototype.handleSubmitMessage = /**
         * @param {?} code
         * @param {?} ownerId
         * @return {?}
         */
            function (code, ownerId) {
                var _this = this;
                /** @type {?} */
                var load = this.loading.show();
                this.taskService.getTaskCenterConfigByCode(code, OwnerType.BizDefKey, ownerId).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    load.close();
                    if (re && re.currentValue) {
                        /** @type {?} */
                        var message = '';
                        /** @type {?} */
                        var currentValue = JSON.parse(re.currentValue);
                        _this.curLanguage === 'zh-CHS' && (message = currentValue.zh_CHS);
                        _this.curLanguage === 'en' && (message = currentValue.en);
                        _this.curLanguage === 'zh-CHT' && (message = currentValue.zh_CHT);
                        _this.notify.success(message);
                    }
                    else {
                        code === ConfigCode.Info_After_Submit && _this.notify.success(_this.i18nService.getValue('startProcess.submitSuccess'));
                        code === ConfigCode.Info_After_Cancel_Submit && _this.notify.success(_this.i18nService.getValue('startProcess.cancelSubmitSuccess'));
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.taskService.error(error);
                }));
            };
        /**
         * 表单上触发流程预解析操作
         * 已封装为表单的命令操作
         */
        /**
         * 表单上触发流程预解析操作
         * 已封装为表单的命令操作
         * @return {?}
         */
        WfTaskHandlerService.prototype.processSimulate = /**
         * 表单上触发流程预解析操作
         * 已封装为表单的命令操作
         * @return {?}
         */
            function () {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var gspWfEventService = (( /** @type {?} */(window))).parent.gspWfEventService;
                gspWfEventService.simulate(( /**
                 * @return {?}
                 */function () {
                    subject.next(true);
                }));
                return subject.asObservable();
            };
        /**
         * 根据单据id查看流程图
         * 已封装为表单命令和操作
         */
        /**
         * 根据单据id查看流程图
         * 已封装为表单命令和操作
         * @param {?} dataId
         * @return {?}
         */
        WfTaskHandlerService.prototype.viewFlowChartByDataId = /**
         * 根据单据id查看流程图
         * 已封装为表单命令和操作
         * @param {?} dataId
         * @return {?}
         */
            function (dataId) {
                if (!dataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                this.flowchartService.viewFlowChartByDataId(dataId);
            };
        /**
         * 查看流程图（新，支持预览）
         * 已封装为表单命令和操作
         * @param bizDefKey 流程分类id
         * @param dataId 表单数据id
         */
        /**
         * 查看流程图（新，支持预览）
         * 已封装为表单命令和操作
         * @param {?} bizDefKey 流程分类id
         * @param {?} dataId 表单数据id
         * @return {?}
         */
        WfTaskHandlerService.prototype.viewFlowChartWithForecast = /**
         * 查看流程图（新，支持预览）
         * 已封装为表单命令和操作
         * @param {?} bizDefKey 流程分类id
         * @param {?} dataId 表单数据id
         * @return {?}
         */
            function (bizDefKey, dataId) {
                if (!dataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                if (!bizDefKey) {
                    this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
                    return;
                }
                /** @type {?} */
                var payload = new uiFlowchart.ForecastProcessPayload();
                payload.bizDefKey = bizDefKey;
                payload.dataId = dataId;
                this.flowchartService.viewProcess(payload);
            };
        /**
         * 查看审批记录（弹框）
         * 已封装为表单命令
         * @param dataId 表单数据id
         * @param style 其他参数
         */
        /**
         * 查看审批记录（弹框）
         * 已封装为表单命令
         * @param {?} dataId 表单数据id
         * @param {?} style 其他参数
         * @return {?}
         */
        WfTaskHandlerService.prototype.viewApprovalLog = /**
         * 查看审批记录（弹框）
         * 已封装为表单命令
         * @param {?} dataId 表单数据id
         * @param {?} style 其他参数
         * @return {?}
         */
            function (dataId, style) {
                if (!dataId) {
                    this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
                    return;
                }
                /** @type {?} */
                var parameters = {
                    dataId: dataId,
                    style: style,
                };
                this.logService.showApprovalLog(parameters);
            };
        /**
         * 获取用户的常用意见（已暴露给farris）
         * @returns 用户常用意见list
         */
        /**
         * 获取用户的常用意见（已暴露给farris）
         * @param {?} filter
         * @return {?} 用户常用意见list
         */
        WfTaskHandlerService.prototype.getCommonComments = /**
         * 获取用户的常用意见（已暴露给farris）
         * @param {?} filter
         * @return {?} 用户常用意见list
         */
            function (filter) {
                return this.taskService.getCommentList(filter);
            };
        /**
         * 展示常用意见管理dialog（已暴露给farris）
         */
        /**
         * 展示常用意见管理dialog（已暴露给farris）
         * @param {?} filter
         * @return {?}
         */
        WfTaskHandlerService.prototype.showCommentManageDialog = /**
         * 展示常用意见管理dialog（已暴露给farris）
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(CommentManageComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                /** @type {?} */
                var options = {
                    title: this.i18nService.getValue('comment.static.title'),
                    width: 740,
                    height: 440,
                    showButtons: true,
                    buttons: compRef.instance.buttons
                };
                compRef.instance.filter = filter;
                /** @type {?} */
                var dialog = this.modalService.show(compRef, options);
                compRef.instance.getConfirmSUbject().subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    dialog.close();
                    subject.next(re);
                }));
                compRef.instance.getCancelSubject().subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    dialog.close();
                    subject.next(re);
                }));
                return subject.asObservable();
            };
        WfTaskHandlerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WfTaskHandlerService.ctorParameters = function () {
            return [
                { type: wfApprovalLogs.WfApprovalLogsService },
                { type: uiFlowchart.WFFlowchartService },
                { type: core.Injector },
                { type: core.ComponentFactoryResolver },
                { type: uiModal.BsModalService },
                { type: TaskService },
                { type: uiNotify.NotifyService },
                { type: I18nService },
                { type: rtfCommon.FrameworkService },
                { type: core.ApplicationRef }
            ];
        };
        return WfTaskHandlerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(i18nService) {
            this.i18nService = i18nService;
        }
        /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
        TranslatePipe.prototype.transform = /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
            function (name, defaultVal) {
                if (defaultVal === void 0) {
                    defaultVal = '';
                }
                if (this.i18nService) {
                    /** @type {?} */
                    var r = this.i18nService.getValue(name);
                    return r ? r : defaultVal;
                }
                else {
                    return defaultVal;
                }
            };
        TranslatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'translate' },] }
        ];
        /** @nocollapse */
        TranslatePipe.ctorParameters = function () {
            return [
                { type: I18nService, decorators: [{ type: core.Optional }] }
            ];
        };
        return TranslatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskAssigninfoComponent = /** @class */ (function () {
        function TaskAssigninfoComponent() {
        }
        /**
         * @return {?}
         */
        TaskAssigninfoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        TaskAssigninfoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-task-assigninfo',
                        template: "",
                        styles: [""]
                    }] }
        ];
        return TaskAssigninfoComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * farris用户帮助参数
     */
    var /**
     * farris用户帮助参数
     */ UserHelpParam = /** @class */ (function () {
        function UserHelpParam() {
            this.readonly = false;
            this.includeJobLeavers = false;
            this.includeStopUser = false;
            this.personnelOrderField = "orderby_ordernum";
            this.userTypeMode = "WfMode";
        }
        return UserHelpParam;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AssigneeInfoComponent = /** @class */ (function () {
        function AssigneeInfoComponent(i18nService, notify, cd, taskService, injector) {
            var _this = this;
            this.i18nService = i18nService;
            this.notify = notify;
            this.cd = cd;
            this.taskService = taskService;
            this.injector = injector;
            //已经选中的指派人
            this.assignees = []; //返回选中人的ID数组
            //返回选中人的ID数组
            this.anonymous = false; // 是否匿名
            // 是否匿名
            this.anonymousText = ''; // 匿名显示文本
            //默认办理人（界面提示用）
            this.pscChange = null; //farris用户帮助
            //farris用户帮助
            this.disabled = false; //办理人员输入框是否禁用
            this.filter = { notGetCurrentUser: false, notGetStopUser: true, orderField: "order", withAllOrg: true, orgId: '' };
            this.ifShowBlank = true; //办理人为空时，是否显示选人框
            //办理人为空时，是否显示选人框
            this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
            //区分是哪个组件
            this.isUseNewSelectUserHelp = false; //是否直接启用新版选人组件
            //是否直接启用新版选人组件
            this.ifHorizontal = false; //是否水平排列
            //是否水平排列
            this.afterConfirm = new core.EventEmitter();
            this.groupIcon = '<i class="f-icon f-icon-plus-circle text-primary"></i>';
            this.extendUserHelp = false; //用户帮助是否扩展
            //是否使用farris用户帮助
            this.taskService.getWfUserHelpConfig().subscribe(( /**
             * @param {?} re
             * @return {?}
             */function (re) {
                if (re && re.userHelpConfig && re.userHelpConfig.isExtend == 'true') {
                    _this.extendUserHelp = true;
                    _this.extendUserHelpUrl = re.userHelpConfig.url + '?v=20221114';
                }
            }), ( /**
             * @param {?} error
             * @return {?}
             */function (error) {
                console.error(error);
            }));
        }
        /**
         * @return {?}
         */
        AssigneeInfoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                //引入farris用户帮助脚本
                if (this.openFromIframe) {
                    (( /** @type {?} */(top))).System.import("/platform/common/web/@farris/common-personnel-select/psc.js" + '?v=' + new Date().getTime().toString()).then(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        console.error(error);
                    }));
                }
            };
        Object.defineProperty(AssigneeInfoComponent.prototype, "assigneeInfo", {
            set: /**
             * @param {?} info
             * @return {?}
             */ function (info) {
                this.disabled = false;
                this.placeholder = null; //清空
                this.assignUserNgModule = null; //清空
                this._assigneeInfo = info; //可以传null
                if (!this._assigneeInfo) {
                    this.disabled = true;
                }
                else {
                    if (this._assigneeInfo.selectAssignee) {
                        this.disabled = false;
                        this.placeholder = this.i18nService.getValue('task.selectPlaceholder'); //请选择
                    }
                    else {
                        this.disabled = true;
                        if (this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length) {
                            this.defaultParticipant = this.anonymous ? this.anonymousText : this._assigneeInfo.assigneeUsers.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return user.name; })).join(); //解析人名
                        }
                        else {
                            this.defaultParticipant = this.i18nService.getValue('task.noUser'); //无
                        }
                    }
                    this.singleSelect = !this._assigneeInfo.multiSelect;
                    this.allowGlobalAssign = this._assigneeInfo.allowGlobalAssign;
                    if (this._assigneeInfo.organizationScope && this._assigneeInfo.organizationScope.length) {
                        /** @type {?} */
                        var orgList = this._assigneeInfo.organizationScope[0];
                        this.filter.orgId = orgList.id;
                        this.filter.withAllOrg = orgList.includeChildren;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssigneeInfoComponent.prototype, "setAnonymous", {
            set: /**
             * @param {?} anonymous
             * @return {?}
             */ function (anonymous) {
                this.anonymous = anonymous;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssigneeInfoComponent.prototype, "setAnonymousText", {
            set: /**
             * @param {?} anonymousText
             * @return {?}
             */ function (anonymousText) {
                this.anonymousText = anonymousText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssigneeInfoComponent.prototype, "selectedAssignees", {
            /**
             * 已选中的人（帮助不可用）
             */
            set: /**
             * 已选中的人（帮助不可用）
             * @param {?} selectedAssignees
             * @return {?}
             */ function (selectedAssignees) {
                !this._assigneeInfo && (this.placeholder = null);
                this._selectedAssignees = selectedAssignees;
                selectedAssignees.length && (this.defaultParticipant = this.anonymous ? this.anonymousText : selectedAssignees.map(( /**
                 * @param {?} user
                 * @return {?}
                 */function (user) { return user.name; })).join());
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 选择参与者
         */
        /**
         * 选择参与者
         * @return {?}
         */
        AssigneeInfoComponent.prototype.clickAssignUser = /**
         * 选择参与者
         * @return {?}
         */
            function () {
                if (this.isUseNewSelectUserHelp) {
                    this.extendUserHelp = true;
                    this.extendUserHelpUrl = '/platform/runtime/wf/web/wf-user-help/wf-user-help-farris/wf-user-help-farris.js' + '?v=' + new Date().getTime().toString();
                }
                /** @type {?} */
                var context = {
                    singleSelect: this.singleSelect,
                    allowGlobalAssign: this.allowGlobalAssign,
                    assigneeUsers: this._assigneeInfo && this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length ? this._assigneeInfo.assigneeUsers : [],
                    filter: this.filter,
                    selectedUsers: this.assignees && this.assignees.length ? this.assignees : this._selectedAssignees,
                    wfContext: this.wfContext
                };
                if (this.extendUserHelp) {
                    if (this.openFromIframe) {
                        this.showFarrisUserHelpFromWindow(context);
                    }
                    else {
                        this.showExtendUserHelp(context);
                    }
                }
                else {
                    this.showExtendUserHelp(context);
                }
            };
        /**
         * 加载扩展帮助
         */
        /**
         * 加载扩展帮助
         * @private
         * @param {?} context
         * @return {?}
         */
        AssigneeInfoComponent.prototype.showExtendUserHelp = /**
         * 加载扩展帮助
         * @private
         * @param {?} context
         * @return {?}
         */
            function (context) {
                var _this = this;
                System.import(this.extendUserHelpUrl).then(( /**
                 * @param {?} moduleFactories
                 * @return {?}
                 */function (moduleFactories) {
                    /** @type {?} */
                    var moduleFactory = Object.values(moduleFactories)[0];
                    /** @type {?} */
                    var moduleRef = moduleFactory.create(_this.injector);
                    moduleRef.instance.showHelp(context).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        /** @type {?} */
                        var userList = re.userList;
                        if (userList && userList.length) {
                            _this.assignees = userList.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return { id: user.id, name: user.name }; }));
                            _this.assignUserNgModule = _this.assignees.map(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) { return user.name; })).join();
                        }
                        else {
                            _this.assignees = [];
                            _this.assignUserNgModule = '';
                        }
                        _this.afterConfirm.emit(_this.assignees);
                        _this.cd.detectChanges();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        console.error(error);
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.error(error);
                }));
            };
        //从window上弹出用户帮助
        //从window上弹出用户帮助
        /**
         * @private
         * @param {?} context
         * @return {?}
         */
        AssigneeInfoComponent.prototype.showFarrisUserHelpFromWindow =
            //从window上弹出用户帮助
            /**
             * @private
             * @param {?} context
             * @return {?}
             */
            function (context) {
                var _this = this;
                /** @type {?} */
                var param = new UserHelpParam();
                if (context.wfContext) {
                    param.filterId = context.wfContext.processCategoryId;
                }
                param.multiSelect = !context.singleSelect;
                /** @type {?} */
                var showOrgTab = false;
                if (context.allowGlobalAssign || (context.filter && context.filter.orgId)) {
                    showOrgTab = true;
                }
                /** @type {?} */
                var farrisUnSelectedUserIds = '';
                if (context.assigneeUsers && context.assigneeUsers.length) {
                    farrisUnSelectedUserIds = context.assigneeUsers.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.id; })).join();
                    param.unSelectedUserIds = farrisUnSelectedUserIds;
                }
                //有参与者 + 允许全员
                if (showOrgTab && farrisUnSelectedUserIds) {
                    param.showTabIds = 'candidate,recent,organization,favorites,group';
                    param.activeTabId = 'candidate';
                }
                //允许全员
                if (showOrgTab && !farrisUnSelectedUserIds) {
                    param.showTabIds = 'recent,organization,favorites,group';
                    param.activeTabId = 'recent';
                }
                //仅有参与者
                if (!showOrgTab && farrisUnSelectedUserIds) {
                    param.showTabIds = 'candidate';
                    param.activeTabId = 'candidate';
                }
                if (context.filter) {
                    /** @type {?} */
                    var filter = context.filter;
                    param.includeCurrentUser = !filter.notGetCurrentUser;
                    param.orgId = filter.orgId ? filter.orgId : '*';
                    param.enableChildHierarchy = filter.withAllOrg;
                }
                if (context.selectedUsers && context.selectedUsers.length) {
                    param.userIds = context.selectedUsers.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.id; })).join();
                }
                /** @type {?} */
                var token = 'gspWfTask' + this.index;
                (( /** @type {?} */(top.window))).CommonPersonnelSelect.component.farrisDialogShowInWf(param, token);
                if (!this.pscChange) {
                    this.pscChange = (( /** @type {?} */(top.window))).FARRIS_PSC.selectionsChange.subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        if (re.token == token) {
                            /** @type {?} */
                            var userList = re.data;
                            if (userList && userList.length) {
                                _this.assignees = userList.map(( /**
                                 * @param {?} user
                                 * @return {?}
                                 */function (user) { return { id: user.userId, name: user.name }; }));
                                _this.assignUserNgModule = _this.assignees.map(( /**
                                 * @param {?} user
                                 * @return {?}
                                 */function (user) { return user.name; })).join();
                            }
                            else {
                                _this.assignees = [];
                                _this.assignUserNgModule = '';
                            }
                            _this.afterConfirm.emit(_this.assignees);
                            _this.cd.detectChanges();
                        }
                    }));
                }
            };
        //清除
        //清除
        /**
         * @return {?}
         */
        AssigneeInfoComponent.prototype.assignUserClear =
            //清除
            /**
             * @return {?}
             */
            function () {
                this.assignees = [];
                this.assignUserNgModule = null;
                this.afterConfirm.emit([]);
            };
        AssigneeInfoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-assignee-info',
                        template: "<!-- \u6307\u5B9A\u53C2\u4E0E\u8005\uFF08\u6307\u6D3E\uFF09 -->\r\n<div\r\n  *ngIf=\"\r\n    ifShowBlank ||\r\n    _assigneeInfo ||\r\n    (_selectedAssignees && _selectedAssignees.length)\r\n  \"\r\n  [ngClass]=\"\r\n    ifHorizontal\r\n      ? 'wf-task-handler-help-div wf-submit-item'\r\n      : 'wf-task-handler-help-div'\r\n  \"\r\n>\r\n  <div\r\n    [ngClass]=\"\r\n      ifHorizontal\r\n        ? 'wf-task-handler-help-text wf-submit-item-label'\r\n        : 'wf-task-handler-help-text'\r\n    \"\r\n    title=\"{{ activityName }}\"\r\n  >\r\n    {{ activityName ? activityName : (\"task.assignText\" | translate) }}\r\n  </div>\r\n  <div\r\n    style=\"flex: 1\"\r\n    title=\"{{ assignUserNgModule ? assignUserNgModule : placeholder }}\"\r\n  >\r\n    <input-group\r\n      [(ngModel)]=\"defaultParticipant\"\r\n      [editable]=\"false\"\r\n      [readonly]=\"disabled\"\r\n      [customCls]=\"'custom-cls'\"\r\n      [groupText]=\"groupIcon\"\r\n      [placeholder]=\"placeholder\"\r\n      [(value)]=\"assignUserNgModule\"\r\n      (clickHandle)=\"clickAssignUser()\"\r\n      (clear)=\"assignUserClear()\"\r\n    ></input-group>\r\n  </div>\r\n</div>\r\n",
                        styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
                    }] }
        ];
        /** @nocollapse */
        AssigneeInfoComponent.ctorParameters = function () {
            return [
                { type: I18nService },
                { type: uiNotify.NotifyService },
                { type: core.ChangeDetectorRef },
                { type: TaskService },
                { type: core.Injector }
            ];
        };
        AssigneeInfoComponent.propDecorators = {
            disabled: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            singleSelect: [{ type: core.Input }],
            filter: [{ type: core.Input }],
            ifShowBlank: [{ type: core.Input }],
            openFromIframe: [{ type: core.Input }],
            activityName: [{ type: core.Input }],
            allowGlobalAssign: [{ type: core.Input }],
            wfContext: [{ type: core.Input }],
            index: [{ type: core.Input }],
            isUseNewSelectUserHelp: [{ type: core.Input }],
            ifHorizontal: [{ type: core.Input }],
            afterConfirm: [{ type: core.Output }],
            assigneeInfo: [{ type: core.Input }],
            setAnonymous: [{ type: core.Input }],
            setAnonymousText: [{ type: core.Input }],
            selectedAssignees: [{ type: core.Input }]
        };
        return AssigneeInfoComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 点击节流器：避免连续点击
     */
    var ThrottleClickDirective = /** @class */ (function () {
        function ThrottleClickDirective() {
            // 一定的时间内只执行第一个事件
            this.THROTTLE_TIME = 2000;
            this.subject = new rxjs.Subject();
            // 事件方法
            this.throttleClick = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ThrottleClickDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var result = this.subject.pipe(operators.throttleTime(this.THROTTLE_TIME));
                this.click = result.subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    _this.throttleClick.emit(e);
                }));
            };
        /**
         * @return {?}
         */
        ThrottleClickDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.click.unsubscribe();
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        ThrottleClickDirective.prototype.onClick = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                this.subject.next(evt);
            };
        ThrottleClickDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[directive-throttle]'
                    },] }
        ];
        /** @nocollapse */
        ThrottleClickDirective.ctorParameters = function () { return []; };
        ThrottleClickDirective.propDecorators = {
            throttleClick: [{ type: core.Output }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return ThrottleClickDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 执行上传附件实体
     */
    var /**
     * 执行上传附件实体
     */ FileUploadEntity = /** @class */ (function () {
        function FileUploadEntity() {
        }
        return FileUploadEntity;
    }());
    var GspDocUploadEntity = /** @class */ (function () {
        function GspDocUploadEntity() {
        }
        return GspDocUploadEntity;
    }());
    var GspDocMetadata = /** @class */ (function () {
        function GspDocMetadata() {
        }
        return GspDocMetadata;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskCommentComponent = /** @class */ (function () {
        function TaskCommentComponent(taskService, uploadDialog, messageService, loadingService) {
            this.taskService = taskService;
            this.uploadDialog = uploadDialog;
            this.messageService = messageService;
            this.loadingService = loadingService;
            this.showAttachment = true; //是否显示附件上传，组件控制
            //是否显示附件上传，组件控制
            this.showSign = true; //是否显示签名，组件控制（不同动作可能会不显示）
            //是否显示签名，组件控制（不同动作可能会不显示）
            this.showCommonComment = true; //是否显示常用意见
            this.placeholder = '';
            this.textAreaHeight = 120; //文字框的高度
            this.attachment = new core.EventEmitter(); //附件
            //附件
            this.signature = new core.EventEmitter(); //上传签名之后，发送签名id
            //意见维护组件
            this._value = '';
            this.attachmentList = [];
            this.ifShowAttachment = false; //任务中心配置，是否显示附件上传
            //任务中心配置，是否显示附件上传
            this.ifShowSign = false; //任务中心配置，是否显示手写签名
            //临时保存上传的图片
            this.downloadService = new fileLoad.DownloadService();
            this.ifUseSign = false; //是否使用手写
            //是否使用手写
            this.ifUseImg = true; //是否使用上传图片
            //是否使用上传图片
            this.ifEnableSign = true; //是否默认启用签名
            //是否默认启用签名
            this.ifUploadImg = false; //是否上传过图片
            //是否上传过图片
            this.ifCanEditSign = true; //是否允许编辑签名
            //原始的签名id
            this.isShowCommonTips = false; //是否展示提示
            //是否展示提示
            this.commentList = [];
            this.btnHover = {
                //按钮hover样式变化
                commentHover: false,
                attachmentHover: false,
                signHover: false
            };
            this.onModelChange = ( /**
             * @param {?} obj
             * @return {?}
             */function (obj) { });
            this.onModelTouched = ( /**
             * @param {?} obj
             * @return {?}
             */function (obj) { });
        }
        Object.defineProperty(TaskCommentComponent.prototype, "TaskCenterConfig", {
            set: 
            //当前是任务列表打开还是任务办理界面打开
            /**
             * @param {?} configList
             * @return {?}
             */
            function (configList) {
                if (configList && configList.length) {
                    /** @type {?} */
                    var attachment = configList.find(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.configCode == ConfigCode.If_Show_Attachment; }));
                    /** @type {?} */
                    var sign = configList.find(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.configCode == ConfigCode.If_Show_Signature; }));
                    /** @type {?} */
                    var enableSign = configList.find(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.configCode == ConfigCode.If_Use_Sign_By_Default; }));
                    /** @type {?} */
                    var editSign = configList.find(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.configCode === ConfigCode.If_Can_Edit_Signature; }));
                    attachment && attachment.currentValue === 'true' && (this.ifShowAttachment = true);
                    sign && sign.currentValue === 'true' && (this.ifShowSign = true);
                    enableSign && enableSign.currentValue === 'false' && (this.ifEnableSign = false);
                    editSign && editSign.currentValue === 'false' && (this.ifCanEditSign = false);
                    if (this.ifShowSign && this.ifEnableSign) {
                        this.getUserSign(this.curUserId);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskCommentComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                if (this._value !== v) {
                    this._value = v;
                    this.onModelChange(v);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.commentManageComp.getConfirmSUbject().subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    _this.commentDialog && _this.commentDialog.close();
                }));
                this.commentManageComp.getCancelSubject().subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.commentDialog && _this.commentDialog.close();
                }));
            };
        /**
         * 弹出常用意见管理框
         */
        /**
         * 弹出常用意见管理框
         * @return {?}
         */
        TaskCommentComponent.prototype.showCommentDialog = /**
         * 弹出常用意见管理框
         * @return {?}
         */
            function () {
                this.dropDownEl && this.dropDownEl.close();
                this.commentDialog.show();
            };
        /**
         * 点击常用意见，获取用户常用意见列表
         */
        /**
         * 点击常用意见，获取用户常用意见列表
         * @return {?}
         */
        TaskCommentComponent.prototype.loadComments = /**
         * 点击常用意见，获取用户常用意见列表
         * @return {?}
         */
            function () {
                var _this = this;
                this.taskService.getCommentList().subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.commentList = data;
                }));
            };
        /**
         * ControlValueAccessor必须实现的方法
         */
        /**
         * ControlValueAccessor必须实现的方法
         * @param {?} value
         * @return {?}
         */
        TaskCommentComponent.prototype.writeValue = /**
         * ControlValueAccessor必须实现的方法
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    this.value = value;
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TaskCommentComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TaskCommentComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /**
         * 选择一条常用意见后事件
         */
        /**
         * 选择一条常用意见后事件
         * @param {?} data
         * @return {?}
         */
        TaskCommentComponent.prototype.buttonClick = /**
         * 选择一条常用意见后事件
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.dropDownEl.close();
                this.value = this.value == this.defaultComment ? data : this.value + data;
            };
        /**
         * 上传附件
         */
        /**
         * 上传附件
         * @return {?}
         */
        TaskCommentComponent.prototype.uploadAttachment = /**
         * 上传附件
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var isRepeat = false;
                this.uploadDialog.uploadFile(this.processInstanceId ? this.processInstanceId : 'gspwftaskattachment', 'wf_attachment').then(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    var e_1, _a, e_2, _b;
                    try {
                        for (var _c = __values((( /** @type {?} */(re)))), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var i = _d.value;
                            isRepeat = false;
                            try {
                                for (var _e = __values(_this.attachmentList), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var attach = _f.value;
                                    if (attach.fileName === i.fileName) {
                                        _this.messageService.info('包含重复文件' + i.fileName);
                                        isRepeat = true;
                                        break;
                                    }
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return))
                                        _b.call(_e);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                            if (!isRepeat) {
                                _this.attachmentList.push(i);
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return))
                                _a.call(_c);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    _this.attachment.emit(_this.attachmentList);
                    //执行上传附件
                    /** @type {?} */
                    var files = new FileUploadEntity();
                    files.rootId = "wf_attachment";
                    files.metadataIdList = [];
                    _this.attachmentList.forEach(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) {
                        files.metadataIdList.push(a.metadataId);
                    }));
                    files.metadataIdList.length && _this.taskService.uploadAttachment(files).subscribe(( /**
                     * @return {?}
                     */function () { }));
                }));
            };
        /**
         * 删除附件
         */
        /**
         * 删除附件
         * @param {?} attachment
         * @return {?}
         */
        TaskCommentComponent.prototype.attachmentDelete = /**
         * 删除附件
         * @param {?} attachment
         * @return {?}
         */
            function (attachment) {
                /** @type {?} */
                var gspDocDeleteEntity = {
                    rootId: "wf_attachment",
                    metadataId: attachment.metadataId,
                    mode: "Formal"
                };
                /** @type {?} */
                var index = this.attachmentList.indexOf(attachment);
                if (index > -1) {
                    this.attachmentList.splice(index, 1);
                }
                this.attachment.emit(this.attachmentList);
                this.taskService.deleteAttachment(gspDocDeleteEntity).subscribe(( /**
                 * @return {?}
                 */function () { }));
            };
        /**
        * web端打开附件预览
        */
        /**
         * web端打开附件预览
         * @param {?} metadataId
         * @return {?}
         */
        TaskCommentComponent.prototype.attachmentPreview = /**
         * web端打开附件预览
         * @param {?} metadataId
         * @return {?}
         */
            function (metadataId) {
                /** @type {?} */
                var options = {
                    appType: "app",
                    funcId: "",
                    tabName: "文档在线预览",
                    appId: "6ccb476b-f2ba-df8f-6f47-d37d100c56e2",
                    appEntrance: "docviewertab",
                    tabId: new Date().getTime(),
                    entityParams: {
                        metadataIdList: [metadataId],
                        rootId: "wf_attachment",
                        metadataId: null,
                        viewOptions: {
                            showHeader: true,
                            showPaging: true,
                            showThumbnails: true,
                            showDownload: true,
                            showSearch: true,
                            showZoom: true,
                            showPrint: true,
                            showSecondaryToolBar: true,
                        },
                    },
                };
                (( /** @type {?} */(window))).gspframeworkService.rtf.func.openMenu(options);
            };
        /**
         * 获取不同格式附件的缩略图
         */
        /**
         * 获取不同格式附件的缩略图
         * @param {?} attachmentInfo
         * @return {?}
         */
        TaskCommentComponent.prototype.imageUrl = /**
         * 获取不同格式附件的缩略图
         * @param {?} attachmentInfo
         * @return {?}
         */
            function (attachmentInfo) {
                /** @type {?} */
                var url = '/platform/runtime/wf/webapp/mobiletaskcenter/assets/accessory/';
                return url + this.taskService.createItem(attachmentInfo) + '.svg?v=20220303';
            };
        /**
         * 展示手写签名dialog
         */
        /**
         * 展示手写签名dialog
         * @return {?}
         */
        TaskCommentComponent.prototype.showSignDialog = /**
         * 展示手写签名dialog
         * @return {?}
         */
            function () {
                this.signDialog.show();
                if (!this.ifEnableSign) {
                    this.getUserSign(this.curUserId);
                }
            };
        /**
         * 点击删除签名
         */
        /**
         * 点击删除签名
         * @return {?}
         */
        TaskCommentComponent.prototype.clickToDeleteImage = /**
         * 点击删除签名
         * @return {?}
         */
            function () {
                this.signatureImage = '';
                this.signature.emit(null);
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.addUserConfig(ConfigCode.If_Use_Sign_By_Default, 'false').subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    load.close();
                }), ( /**
                 * @return {?}
                 */function () {
                    load.close();
                }));
            };
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.clickToUseSign = /**
         * @return {?}
         */
            function () {
                this.ifUseImg = false;
                this.ifUseSign = true;
                /** @type {?} */
                var canvas = this.signaturePad.canvasDiv.nativeElement.querySelector('canvas');
                canvas.height = 252;
                canvas.width = 665;
            };
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.clickToUploadImg = /**
         * @return {?}
         */
            function () {
                this.farrisAvatar.onClick();
            };
        /**
         * 手写签名点确定
         */
        /**
         * 手写签名点确定
         * @return {?}
         */
        TaskCommentComponent.prototype.clickToConfirm = /**
         * 手写签名点确定
         * @return {?}
         */
            function () {
                /** @type {?} */
                var image;
                if (this.signaturePad && this.signaturePad.isDraw) { //如果签过名
                    image = this.signaturePad.confirm();
                }
                else if (this.ifUploadImg) { //如果上传过图片
                    image = this.tmpSignatureImage;
                }
                if (image) {
                    this.uploadSignatureImg(image);
                }
                else {
                    this.signatureImage = this.tmpSignatureImage;
                    this.signature.emit(this.originSignId);
                    this.signDialog.close();
                }
                //添加启用签名配置
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.addUserConfig(ConfigCode.If_Use_Sign_By_Default, 'true').subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    load.close();
                }), ( /**
                 * @return {?}
                 */function () {
                    load.close();
                }));
            };
        /**
         * 点击清空
         */
        /**
         * 点击清空
         * @return {?}
         */
        TaskCommentComponent.prototype.clickToReset = /**
         * 点击清空
         * @return {?}
         */
            function () {
                this.ifUseSign = false;
                this.ifUseImg = true;
                this.signatureImage = '';
                this.tmpSignatureImage = '';
                this.signature.emit('');
                this.signaturePad && (this.signaturePad.isDraw = false);
                this.ifUploadImg = false;
            };
        /**
         * 点击取消
         */
        /**
         * 点击取消
         * @return {?}
         */
        TaskCommentComponent.prototype.clickToCancel = /**
         * 点击取消
         * @return {?}
         */
            function () {
                this.signDialog.close();
            };
        /**
         * 上传图片后事件
         * event.base64 是图片信息,event.name是带后缀的图片名，event.type如image/jpeg
         */
        /**
         * 上传图片后事件
         * event.base64 是图片信息,event.name是带后缀的图片名，event.type如image/jpeg
         * @param {?} event
         * @return {?}
         */
        TaskCommentComponent.prototype.imgChange = /**
         * 上传图片后事件
         * event.base64 是图片信息,event.name是带后缀的图片名，event.type如image/jpeg
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.ifUseImg = true;
                this.ifUseSign = false;
                this.ifUploadImg = true;
                /** @type {?} */
                var image = event.base64;
                this.tmpSignatureImage = image;
                this.signatureImage = image;
            };
        /**
         * 上传签名
         * @param image
         */
        /**
         * 上传签名
         * @private
         * @param {?} image
         * @return {?}
         */
        TaskCommentComponent.prototype.uploadSignatureImg = /**
         * 上传签名
         * @private
         * @param {?} image
         * @return {?}
         */
            function (image) {
                var _this = this;
                /** @type {?} */
                var uploadSignature = new GspDocUploadEntity();
                uploadSignature.fileContent = image.split(',')[1];
                uploadSignature.filePath = this.curUserId;
                uploadSignature.mode = "Formal";
                uploadSignature.metadata = new GspDocMetadata();
                uploadSignature.metadata.id = this.taskService.createNM();
                uploadSignature.metadata.fileName = this.taskService.createNM() + ".png";
                uploadSignature.metadata.rootId = "taskcentersignature";
                uploadSignature.metadata.docType = "png";
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.uploadSignature(uploadSignature).subscribe(( /**
                 * @param {?} signId
                 * @return {?}
                 */function (signId) {
                    load.close();
                    _this.originSignId = signId;
                    _this.signature.emit(signId);
                    _this.signatureImage = image;
                    _this.signDialog.close();
                    localStorage.setItem('gspWfTaskUserSign' + _this.curUserId + _this.taskService.getCurrentDateString(), signId);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                    _this.messageService.error('上传签名失败');
                }));
            };
        /**
         * 获取用户的最近一次签名
         */
        /**
         * 获取用户的最近一次签名
         * @private
         * @param {?} userId
         * @return {?}
         */
        TaskCommentComponent.prototype.getUserSign = /**
         * 获取用户的最近一次签名
         * @private
         * @param {?} userId
         * @return {?}
         */
            function (userId) {
                var _this = this;
                /** @type {?} */
                var load = this.loadingService.show();
                this.taskService.getUserSignId(userId).subscribe(( /**
                 * @param {?} signId
                 * @return {?}
                 */function (signId) {
                    load.close();
                    if (signId) {
                        _this.signature.emit(signId);
                        _this.originSignId = signId;
                        _this.signatureImage = _this.downloadService.getDownloadUrl(signId, 'taskcentersignature');
                        _this.tmpSignatureImage = _this.signatureImage;
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.error(error);
                    load.close();
                }));
            };
        //文本框值变动监听事件
        //文本框值变动监听事件
        /**
         * @param {?} e
         * @return {?}
         */
        TaskCommentComponent.prototype.valueChange =
            //文本框值变动监听事件
            /**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (this.taskService.getBytesLength(this.value) > 4000) {
                    this.isShowCommonTips = true;
                }
                else {
                    this.isShowCommonTips = false;
                }
            };
        TaskCommentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-comment',
                        template: "<div\r\n  class=\"fa-approve-comment fa-approve-common-gutter\"\r\n  style=\"margin-bottom: 14px\"\r\n>\r\n  <!-- \u8F93\u5165\u6846 -->\r\n  <div class=\"fa-approve-comment--content\">\r\n    <textarea\r\n      class=\"form-control content-textarea\"\r\n      style=\"font-size: 13px\"\r\n      [(ngModel)]=\"value\"\r\n      (ngModelChange)=\"valueChange($event)\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [style.height.px]=\"textAreaHeight\"\r\n    ></textarea>\r\n  </div>\r\n  <div\r\n    class=\"fa-approve-comment--footer wf-approve-comment--footer\"\r\n    *ngIf=\"isShowCommonTips\"\r\n  >\r\n    <div class=\"wf-feature-warning\"></div>\r\n    <span\r\n      ><span class=\"wf-feature-span\">{{\r\n        \"comment.static.comment\" | translate\r\n      }}</span\r\n      >{{ \"comment.static.tooLongTips\" | translate }}</span\r\n    >\r\n  </div>\r\n  <!-- \u8F93\u5165\u6846\u4E0B\u65B9\u4E00\u6392\u6309\u94AE -->\r\n  <div class=\"fa-approve-comment--footer\">\r\n    <div\r\n      *ngIf=\"showAttachment || showSign || showCommonComment\"\r\n      class=\"approve-comment--text-btns\"\r\n    >\r\n      <!-- \u5E38\u7528\u610F\u89C1 -->\r\n      <div\r\n        *ngIf=\"showCommonComment\"\r\n        class=\"text-btns-item\"\r\n        (click)=\"loadComments()\"\r\n        (mouseover)=\"btnHover.commentHover = true\"\r\n        (mouseleave)=\"btnHover.commentHover = false\"\r\n        [ngClass]=\"btnHover.commentHover && 'text-primary'\"\r\n      >\r\n        <div fDropdown #dropdownEl=\"fDropdown\">\r\n          <div fDropdownToggle>\r\n            <span class=\"f-icon f-icon-message\"></span>\r\n            <span>\r\n              {{ \"comment.static.inputLabel\" | translate }}\r\n            </span>\r\n          </div>\r\n          <div class=\"dropdown-menu task-drop-down-menu\" fDropdownMenu>\r\n            <li\r\n              class=\"dropdown-item\"\r\n              *ngFor=\"let comment of commentList\"\r\n              (click)=\"buttonClick(comment.message)\"\r\n            >\r\n              <span>{{ comment.message }}</span>\r\n            </li>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <!-- \u610F\u89C1\u7BA1\u7406 -->\r\n            <div\r\n              class=\"dropdown-item\"\r\n              style=\"display: flex; align-items: center\"\r\n              (click)=\"showCommentDialog()\"\r\n            >\r\n              <span class=\"f-icon f-icon-home-setup\"></span>\r\n              <span style=\"padding-left: 6px\">{{\r\n                \"comment.static.manage\" | translate\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- \u4E0A\u4F20\u9644\u4EF6 -->\r\n      <div\r\n        class=\"text-btns-item\"\r\n        *ngIf=\"ifShowAttachment && showAttachment\"\r\n        (click)=\"uploadAttachment()\"\r\n        (mouseover)=\"btnHover.attachmentHover = true\"\r\n        (mouseleave)=\"btnHover.attachmentHover = false\"\r\n        [ngClass]=\"btnHover.attachmentHover && 'text-primary'\"\r\n        title=\"{{ 'comment.attachment.tips' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-attachment\"></span>\r\n        <span class=\"text-btns-item--text\">\r\n          {{ \"comment.static.attachmentUpload\" | translate }}\r\n        </span>\r\n      </div>\r\n      <!-- \u624B\u5199\u7B7E\u540D -->\r\n      <div\r\n        class=\"text-btns-item\"\r\n        *ngIf=\"showSign && ifShowSign && ifCanEditSign && curUserId\"\r\n        title=\"{{ 'comment.signature.tips' | translate }}\"\r\n        (click)=\"showSignDialog()\"\r\n        (mouseover)=\"btnHover.signHover = true\"\r\n        (mouseleave)=\"btnHover.signHover = false\"\r\n        [ngClass]=\"btnHover.signHover && 'text-primary'\"\r\n      >\r\n        <span class=\"f-icon f-icon-edit\"></span>\r\n        <span>{{ \"comment.signature.title\" | translate }}</span>\r\n      </div>\r\n      <!-- \u624B\u5199\u7B7E\u540D\u9884\u89C8 -->\r\n      <div\r\n        *ngIf=\"showSign && ifShowSign && signatureImage\"\r\n        class=\"signatureImage\"\r\n      >\r\n        <img [src]=\"signatureImage\" style=\"width: 70px; height: 26px\" />\r\n        <div\r\n          *ngIf=\"ifCanEditSign\"\r\n          class=\"attachment-delete\"\r\n          (click)=\"clickToDeleteImage()\"\r\n          title=\"{{ 'comment.signature.disable' | translate }}\"\r\n        >\r\n          <span class=\"f-icon f-icon-x\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u4E0A\u4F20\u540E\u7684\u9644\u4EF6\u9884\u89C8 -->\r\n<div *ngIf=\"attachmentList?.length > 0\" style=\"margin-bottom: 20px\">\r\n  <div\r\n    class=\"task-comment-attachment\"\r\n    *ngFor=\"let attachment of attachmentList\"\r\n  >\r\n    <!-- \u9644\u4EF6\u540D\u79F0 -->\r\n    <div class=\"task-comment-attachment-title\">\r\n      <img class=\"task-comment-attachment-img\" [src]=\"imageUrl(attachment)\" />\r\n      <span>{{ attachment.fileName }}</span>\r\n    </div>\r\n    <div style=\"display: flex; align-items: center\">\r\n      <!-- \u9644\u4EF6\u5927\u5C0F -->\r\n      <div *ngIf=\"attachment.fileSize\" class=\"task-comment-attachment-size\">\r\n        {{ attachment.fileSize }}\r\n      </div>\r\n      <!-- \u67E5\u770B -->\r\n      <div\r\n        *ngIf=\"taskOrigin == 'TaskForm'\"\r\n        class=\"task-comment-attach-icon\"\r\n        (click)=\"attachmentPreview(attachment.metadataId)\"\r\n        title=\"{{ 'comment.signature.view' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-enclosure_browse\"></span>\r\n      </div>\r\n      <!-- \u5220\u9664 -->\r\n      <div\r\n        class=\"task-comment-attach-icon\"\r\n        (click)=\"attachmentDelete(attachment)\"\r\n        title=\"{{ 'comment.signature.delete' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-enclosure_delete\"></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4 -->\r\n<farris-dialog\r\n  #commentDialog\r\n  [width]=\"740\"\r\n  [height]=\"440\"\r\n  [buttons]=\"commentManageComp.buttons\"\r\n  [title]=\"'comment.static.title' | translate\"\r\n>\r\n  <lib-comment-manage #commentManageComp></lib-comment-manage>\r\n</farris-dialog>\r\n\r\n<!-- \u7B7E\u540D\u5F39\u6846 -->\r\n<farris-dialog\r\n  #signDialog\r\n  [buttons]=\"signButtons\"\r\n  [width]=\"710\"\r\n  [height]=\"420\"\r\n  [title]=\"'comment.signature.dialogTitle' | translate\"\r\n  [resizable]=\"false\"\r\n  [showMaxButton]=\"false\"\r\n>\r\n  <wf-sign-here\r\n    #wfSignHere\r\n    [title]=\"''\"\r\n    [ngStyle]=\"!ifUseSign ? { display: 'none' } : null\"\r\n  ></wf-sign-here>\r\n  <div *ngIf=\"ifUseImg && tmpSignatureImage\" class=\"signature-img-default\">\r\n    <img [src]=\"tmpSignatureImage\" style=\"height: 252px\" />\r\n  </div>\r\n  <div *ngIf=\"ifUseImg && !tmpSignatureImage\" class=\"signature-img-div\">\r\n    <div class=\"signature-img-main\">\r\n      <div style=\"margin-bottom: 28px\">\r\n        <img\r\n          src=\"/platform/runtime/common/web/@gsp-wf/wf-task-handler/assets/img/signIcon.svg?v=20210623\"\r\n        />\r\n      </div>\r\n      <div class=\"signature-img-text\">\r\n        <span>{{ \"comment.signature.note1\" | translate }}</span>\r\n        <span class=\"signature-text-action\" (click)=\"clickToUseSign()\">{{\r\n          \"comment.signature.sign\" | translate\r\n        }}</span>\r\n        <span>{{ \"comment.signature.note2\" | translate }}</span>\r\n        <span class=\"signature-text-action\" (click)=\"clickToUploadImg()\">{{\r\n          \"comment.signature.upload\" | translate\r\n        }}</span>\r\n        <span>{{ \"comment.signature.note3\" | translate }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<!-- \u624B\u5199\u7B7E\u540D\u6309\u94AE -->\r\n<ng-template #signButtons>\r\n  <button class=\"btn btn-secondary\" (click)=\"clickToCancel()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-secondary mr-2\" (click)=\"clickToReset()\">\r\n    {{ \"comment.signature.reset\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-primary mr-2\" (click)=\"clickToConfirm()\">\r\n    {{ \"comment.signature.ok\" | translate }}\r\n  </button>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u5934\u50CF\u7EC4\u4EF6\u505A\u56FE\u7247\u4E0A\u4F20 -->\r\n<farris-avatar\r\n  #farrisAvatar\r\n  (imgChange)=\"imgChange($event)\"\r\n  style=\"display: none\"\r\n></farris-avatar>\r\n",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return TaskCommentComponent; })),
                                multi: true
                            },],
                        styles: [":host ::ng-deep .dropdown .btn{padding:0}:host ::ng-deep .dropdown .btn-secondary{box-shadow:none}:host ::ng-deep .dropdown .btn-secondary:focus{box-shadow:none}:host ::ng-deep .dropdown .btn-secondary:hover{color:#388fff}.signatureImage:hover .attachment-delete{display:block}.fa-approve-common-gutter{margin:0 0 12px}.fa-approve-comment .approve-comment--title{display:inline-block;color:#667580;border-radius:4px 4px 0 0;height:26px;padding:0 9px;position:relative;background:#f7f7f7;cursor:pointer}.fa-approve-comment .approve-comment--title:after{content:\"\";height:100%;position:absolute;right:-10px;top:0;bottom:0;border-right:5px solid transparent;border-left:5px solid #f7f7f7;border-bottom:13px solid #f7f7f7;border-top:13px solid transparent}.fa-approve-comment .approve-comment--title .fa-btn-like-dropdown{font-size:12px;padding:2px 0}.fa-approve-comment .fa-approve-comment--content .content-textarea{border-color:#dcdcdc;border-radius:0 0 2px 2px}.fa-approve-comment .fa-approve-comment--footer{font-size:13px;color:#667580;background:#f7f7f7;align-items:center;padding:5px 0}.fa-approve-comment .approve-comment--text-btns{display:flex;flex-direction:row;padding:0 5px}.fa-approve-comment .approve-comment--text-btns .text-btns-item{display:flex;flex-direction:row;align-items:center;font-size:12px;line-height:18px;color:#667580;margin-right:12px;cursor:pointer}.fa-approve-comment .approve-comment--text-btns .text-btns-item .f-icon{margin-right:4px}li{list-style:none}.attachment-delete{float:right;cursor:pointer;display:none;text-align:right;padding-right:10px}.attachment-delete:hover{color:#4297fa}.signature-img-div{display:flex;justify-content:center;align-items:center;height:100%;background:#fafcfd;border:1px solid #d8dfed;border-radius:8px;margin:0 10px}.signature-img-main{display:flex;flex-direction:column;justify-content:center;align-items:center}.signature-img-text{font-size:13px;color:rgba(106,111,121,.85)}.signature-text-action{color:#529efe;padding:0 2px;cursor:pointer}.signature-img-default{display:flex;justify-content:center;align-items:center;height:inherit}.wf-feature-warning{display:inline-block;width:16px;height:16px;line-height:1px;vertical-align:text-bottom;background:url(/platform/runtime/wf/webapp/mobiletaskcenter/assets/img/icon_validator.png)}.wf-approve-comment--footer{font-weight:700;align-items:center;font-family:\"PingFang SC\",\"Lantinghei SC\",\"Helvetica Neue\",Arial,\"Microsoft YaHei\",\"WenQuanYi Micro Hei\",\"Heiti SC\",\"Segoe UI\",sans-serif}.wf-feature-span{color:#f60;padding:0 2px}.task-comment-attachment{display:flex;justify-content:space-between;align-items:center;background:rgba(249,252,255,.87);border:0 solid rgba(229,232,237,.71);border-radius:3px;margin-top:10px;padding:4px;cursor:pointer;font-size:13px}.task-comment-attachment-title{display:flex;align-items:center;font-size:12px}.task-comment-attachment-img{width:20px;margin-right:10px}.task-comment-attachment-size{font-size:12px;padding:0 10px;color:rgba(45,47,51,.45)}.task-comment-attach-icon{margin-left:10px;height:16px;width:16px;color:var(--primary);border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:10px;background:#e8f2ff;cursor:pointer}.task-drop-down-menu{max-height:200px;overflow:auto}"]
                    }] }
        ];
        /** @nocollapse */
        TaskCommentComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: formdocUpload.UploadDialogService },
                { type: uiMessager.MessagerService },
                { type: uiLoading.LoadingService }
            ];
        };
        TaskCommentComponent.propDecorators = {
            showAttachment: [{ type: core.Input }],
            showSign: [{ type: core.Input }],
            showCommonComment: [{ type: core.Input }],
            comment: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            processInstanceId: [{ type: core.Input }],
            textAreaHeight: [{ type: core.Input }],
            defaultComment: [{ type: core.Input }],
            curUserId: [{ type: core.Input }],
            taskOrigin: [{ type: core.Input }],
            TaskCenterConfig: [{ type: core.Input }],
            attachment: [{ type: core.Output }],
            signature: [{ type: core.Output }],
            commentDialog: [{ type: core.ViewChild, args: ['commentDialog',] }],
            signDialog: [{ type: core.ViewChild, args: ['signDialog',] }],
            dropDownEl: [{ type: core.ViewChild, args: ['dropdownEl',] }],
            signaturePad: [{ type: core.ViewChild, args: ['wfSignHere',] }],
            farrisAvatar: [{ type: core.ViewChild, args: ['farrisAvatar',] }],
            commentManageComp: [{ type: core.ViewChild, args: ['commentManageComp',] }]
        };
        return TaskCommentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WfTaskHandlerModule = /** @class */ (function () {
        function WfTaskHandlerModule() {
        }
        WfTaskHandlerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TranslatePipe,
                            TaskExecuteComponent,
                            TaskAssigninfoComponent,
                            ProcessSelectorComponent,
                            AssigneeInfoComponent,
                            ThrottleClickDirective,
                            TaskCommentComponent,
                            UrgeHandleComponent,
                            CommentManageComponent,
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiDatatable.DataTableModule,
                            uiDialog.FarrisDialogModule,
                            uiPagination.PaginationModule,
                            uiNotify.NotifyModule,
                            uiComboList.ComboListModule,
                            wfApprovalLogs.WfApprovalLogsModule,
                            uiFlowchart.UiFlowchartModule,
                            rtfCommon.CommonSharedModule,
                            uiLoading.LoadingModule,
                            taskImplApi.TaskImplApiModule,
                            uiMessager.MessagerModule,
                            uiInputGroup.InputGroupModule,
                            wfSign.WfSignModule,
                            uiAvatar.AvatarModule,
                            uiDropdown.FDropdownDirectiveTypeModule,
                            uiDatagrid.DatagridModule,
                            uiDatagridEditors.DatagridEditorsModule,
                            uiDatagrid.DatagridModule.forRoot(__spread(uiDatagridEditors.EditorProviders)),
                            uiForms.FarrisFormsModule,
                            uiSwitch.SwitchModule,
                            uiSection.FarrisSectionModule
                        ],
                        providers: [
                            TaskService,
                            I18nService,
                            WfTaskHandlerService,
                            rtfCommon.FrameworkService,
                            cafCommon.SessionService,
                            cafCommon.HttpService,
                            cafCommon.CacheService,
                            rtfCommon.FrmEventBus,
                            rtfCommon.FuncsService,
                        ],
                        exports: [
                            TaskExecuteComponent,
                            TaskAssigninfoComponent,
                            ProcessSelectorComponent,
                            AssigneeInfoComponent,
                            TaskCommentComponent,
                            CommentManageComponent
                        ],
                        entryComponents: [
                            TaskExecuteComponent,
                            TaskAssigninfoComponent,
                            ProcessSelectorComponent,
                            AssigneeInfoComponent,
                            TaskCommentComponent,
                            CommentManageComponent
                        ]
                    },] }
        ];
        return WfTaskHandlerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 常用意见过滤
     */
    var /**
     * 常用意见过滤
     */ CommonCommentFilter = /** @class */ (function () {
        function CommonCommentFilter() {
        }
        return CommonCommentFilter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.WfTaskHandlerService = WfTaskHandlerService;
    exports.WfTaskHandlerModule = WfTaskHandlerModule;
    exports.TaskService = TaskService;
    exports.I18nService = I18nService;
    exports.TranslatePipe = TranslatePipe;
    exports.StartProcessPayload = StartProcessPayload;
    exports.FlowNodeInfo = FlowNodeInfo;
    exports.Assignee = Assignee;
    exports.CancelSubmitPayload = CancelSubmitPayload;
    exports.CommonCommentFilter = CommonCommentFilter;
    exports.AssigneeInfoComponent = AssigneeInfoComponent;
    exports.TaskCommentComponent = TaskCommentComponent;
    exports.ProcessSelectorComponent = ProcessSelectorComponent;
    exports.TaskAssigninfoComponent = TaskAssigninfoComponent;
    exports.TaskExecuteComponent = TaskExecuteComponent;
    exports.CommentManageComponent = CommentManageComponent;
    exports.ɵa = UrgeHandleComponent;
    exports.ɵb = ThrottleClickDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-wf-wf-task-handler.umd.js.map