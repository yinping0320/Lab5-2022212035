/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Input, Injector } from '@angular/core';
import { TaskService } from '../../service/task.service';
import { StartProcessPayload, FlowNodeInfo } from '../../entity/start-process-payload';
import { LoadingService } from '@farris/ui-loading';
import { Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../service/i18n/i18n.service';
import { ComboListComponent } from '@farris/ui-combo-list';
import { MessageType } from '../../entity/postMessage';
import { MessagerService } from '@farris/ui-messager';
import { WfTaskHandlerService } from '../../wf-task-handler.service';
import { ConfigCode } from '../../entity/task-center-config';
import { WfContext } from '../../entity/wfContext';
import { TaskEntity } from '../../entity/task-entity';
import { TaskAction } from '../../entity/task-action';
import { SelectedProcessItem, StartProcessCache } from '../../entity/process-cache';
var ProcessSelectorComponent = /** @class */ (function () {
    // task center-ui中start-process-menu使用了此选择器，构造方法改动时，需重新编译
    function ProcessSelectorComponent(taskService, loadingService, notify, i18nService, messager, injector, handlerService) {
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.messager = messager;
        this.injector = injector;
        this.handlerService = handlerService;
        this.destProcesses = []; //候选流程
        //候选流程
        this.destNodes = []; //候选下一环节
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }]; //节点返回的指派信息（多个）
        //节点返回的指派信息（多个）
        this.otherAssignInfos = []; //节点返回的指派信息（多个）
        //选择的下一环节ID，后续环节id的拼接
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject(); //返回bool
        //返回bool
        this.subjectWithResponse = new Subject(); //返回流程上下文
        //返回流程上下文
        this.subjectCancel = new Subject(); //点击取消后的subject
        //点击取消后的subject
        this.submitDisable = false; //提交按钮是否禁用
        //提交按钮是否禁用
        this.showButtons = false;
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //选择流程的placeholder
        this.wfContext = new WfContext(); //工作流上下文
        //默认下一环节（提示用）
        this.dialogHeight = 240; //弹框基本高度
        //确认取消按钮
        this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
    }
    /**
     * @return {?}
     */
    ProcessSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    Object.defineProperty(ProcessSelectorComponent.prototype, "parameter", {
        set: 
        //是否从iframe打开，应用IDP提交审批集成
        /**
         * @param {?} parameter
         * @return {?}
         */
        function (parameter) {
            if (parameter) {
                this.showButtons = true;
                this.setParam(parameter);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} param
     * @return {?}
     */
    ProcessSelectorComponent.prototype.setParam = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        /** @type {?} */
        var subject = new Subject();
        if (!param) {
            return;
        }
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.payload.otherAssignNodes = [];
        this.wfContext.processCategoryId = param.bizDefKey;
        this.startProcessSimulate(this.payload, subject);
        return subject.asObservable();
    };
    /**
     * @param {?} payload
     * @param {?} subject
     * @return {?}
     */
    ProcessSelectorComponent.prototype.startProcessSimulate = /**
     * @param {?} payload
     * @param {?} subject
     * @return {?}
     */
    function (payload, subject) {
        var _this = this;
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            load.close();
            _this.response = response;
            response.priorityInfo && response.priorityInfo.enable && (_this.dialogHeight += 40);
            _this.destProcesses = response.procDefs.map((/**
             * @param {?} process
             * @return {?}
             */
            function (process) { return ({ id: process.procDefId, name: process.procDefName + ("(v" + process.version + ".0)") }); })); //增加流程的版本信息
            if (_this.destProcesses.length === 1) { //只有一个候选流程时
                _this.selectedProcessId = _this.destProcesses[0].id;
                _this.setNextNode(response);
                _this.processDefaultValue = _this.destProcesses[0].name;
            }
            else { //多个流程时，取上一次选择的
                //多个流程时，取上一次选择的
                /** @type {?} */
                var selectedProcessId_1 = _this.getSelectedProcessCache(_this.payload.bizDefKey);
                if (selectedProcessId_1 && _this.destProcesses.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === selectedProcessId_1.processDefinitionId; })) > -1) {
                    _this.getDestNodes(selectedProcessId_1.processDefinitionId);
                    _this.processDefaultValue = selectedProcessId_1.processDefinitionName;
                }
                else {
                    _this.processPlaceholder = _this.i18nService.getValue('task.selectPlaceholder');
                }
                _this.dialogHeight = 330;
            }
            if (_this.assignInfos && _this.assignInfos.length) {
                _this.dialogHeight += (_this.assignInfos.length) * 40;
            }
            if (_this.otherAssignInfos && _this.otherAssignInfos.length) {
                _this.dialogHeight += (_this.otherAssignInfos.length + 1) * 40;
            }
            _this.dialogHeight = _this.dialogHeight > 440 ? 440 : _this.dialogHeight;
            subject.next({ result: true, dialogHeight: _this.dialogHeight });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            subject.error(error);
            _this.taskService.error(error);
        }));
    };
    /**
     * 选择某个流程后
     * @param data
     */
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    ProcessSelectorComponent.prototype.selectProcessChange = /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.nodeCombo.onClear();
        this.getDestNodes(data.data.id);
    };
    /**
     * 根据选择的流程定义id获取下一环节信息
     * @param selectedProcessId
     */
    /**
     * 根据选择的流程定义id获取下一环节信息
     * @private
     * @param {?} selectedProcessId
     * @return {?}
     */
    ProcessSelectorComponent.prototype.getDestNodes = /**
     * 根据选择的流程定义id获取下一环节信息
     * @private
     * @param {?} selectedProcessId
     * @return {?}
     */
    function (selectedProcessId) {
        var _this = this;
        this.selectedProcessId = selectedProcessId;
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.clearAssignInfos();
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            load.close();
            _this.response = response;
            _this.setNextNode(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            _this.taskService.error(error);
        }));
    };
    /**
     * 选择节点后事件
     */
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    ProcessSelectorComponent.prototype.selectNodeChange = /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.clearAssignInfos();
        this.selectedNodeId = data.data.id;
        /** @type {?} */
        var nodeNames = data.data.name.split('，');
        if (this.response.simulationPaths[data.index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.resolved === true; }))) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index]);
            this.setOtherAssignInfo(this.response); //切换节点后，其他节点指派需要更新，重新去重
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            var payload_1 = new StartProcessPayload();
            payload_1.processDefinitionId = this.selectedProcessId;
            payload_1.dataId = this.payload.dataId;
            payload_1.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((/**
             * @param {?} nodeId
             * @param {?} index
             * @return {?}
             */
            function (nodeId, index) {
                /** @type {?} */
                var nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                nextFlowNode.activityDefinitionName = nodeNames[index];
                payload_1.nextFlowNodes.push(nextFlowNode);
            }));
            /** @type {?} */
            var load_1 = this.loadingService.show();
            this.taskService.startProcessSimulate(payload_1).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                load_1.close();
                _this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
                _this.setOtherAssignInfo(response); //切换节点后，其他节点指派需要更新，重新去重
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                load_1.close();
                _this.taskService.error(error);
            }));
        }
    };
    /**
   * 实现真正的提交
   */
    /**
     * 实现真正的提交
     * @return {?}
     */
    ProcessSelectorComponent.prototype.startProcessSubmit = /**
     * 实现真正的提交
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.selectedProcessId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectProcess')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectProcess'));
            return;
        }
        if (!this.selectedNodeId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectNode')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectNode'));
            return;
        }
        if (this.assignInfos.filter((/**
         * @param {?} info
         * @return {?}
         */
        function (info) { return (info.assigneeInfo || info.selectedAssignees.length) && !info.assignees.length; })).length) { //空参与者策略时，不提示选人
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectProcessor')) :
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
            return;
        }
        if (this.response.priorityInfo && this.response.priorityInfo.enable && !this.response.priorityInfo.priority) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectPriority')) :
                this.notify.warning(this.i18nService.getValue('task.selectPriority'));
            return;
        }
        /** @type {?} */
        var nodes = this.selectedNodeId.split('，');
        for (var i = 0; i < nodes.length; i++) {
            /** @type {?} */
            var nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            }
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            ;
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                    /** @type {?} */
                    var str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                    this.openFromIframe ? this.messager.warning(str) : this.notify.warning(str);
                    return;
                }
            }
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        //拼接其他节点选人结果
        if (this.otherAssignInfos && this.otherAssignInfos.length) {
            for (var i = 0; i < this.otherAssignInfos.length; i++) {
                /** @type {?} */
                var nextFlowNode = {
                    activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                    activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                    dependency: this.otherAssignInfos[i].dependency,
                    selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                    assigneeInfo: null,
                    resolved: false,
                    anonymous: false,
                    anonymousText: ''
                };
                this.payload.otherAssignNodes.push(nextFlowNode);
            }
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.submitDisable = true;
        //紧急程度
        if (this.response.priorityInfo && this.response.priorityInfo.enable) {
            this.payload.priority = this.response.priorityInfo.priority;
        }
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.startProcess(this.payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            load.close();
            _this.submitDisable = false;
            _this.subject.next(true);
            _this.subjectWithResponse.next(response);
            /** @type {?} */
            var messageAfterSubmit = _this.i18nService.getValue('startProcess.submitSuccess');
            if (_this.openFromIframe) {
                ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.SubmitSuccess, message: messageAfterSubmit } });
            }
            else {
                _this.handlerService.handleSubmitMessage(ConfigCode.Info_After_Submit, _this.payload.bizDefKey);
            }
            if (!_this.openFromIframe && response.needInteraction) { //提交审批后需要指派场景
                _this.notify.info(_this.i18nService.getValue('cueWords.select')
                    + response.nextFlowNodes[0].activityDefinitionName
                    + _this.i18nService.getValue('cueWords.processor'));
                /** @type {?} */
                var task = new TaskEntity();
                /** @type {?} */
                var action = new TaskAction();
                task.sourceId = response.nextFlowNodes[0].assigneeInfo.workItemId;
                action.code = 'AssignUser';
                action.name = _this.i18nService.getValue('cueWords.assignUser');
                _this.handlerService.execute(task, action).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) { }));
            }
            _this.setSelectedProcessCache();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            _this.payload.nextFlowNodes = [];
            _this.submitDisable = false;
            _this.subject.next(false); //已经有人用了这个subject，提交失败的话返回false by fangpengfei@20210324
            _this.taskService.error(error);
        }));
    };
    /**
     * 选择流程清空
     */
    /**
     * 选择流程清空
     * @return {?}
     */
    ProcessSelectorComponent.prototype.selectProcessClear = /**
     * 选择流程清空
     * @return {?}
     */
    function () {
        this.selectedProcessId = '';
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.selectedNodeId = '';
        this.clearAssignInfos();
        this.response = null;
    };
    /**
     * 选择节点清空
     */
    /**
     * 选择节点清空
     * @return {?}
     */
    ProcessSelectorComponent.prototype.selectNodeClear = /**
     * 选择节点清空
     * @return {?}
     */
    function () {
        this.selectedNodeId = '';
        this.clearAssignInfos();
    };
    /**
     * 用户帮助选人
     */
    /**
     * 用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    ProcessSelectorComponent.prototype.afterConfirm = /**
     * 用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (data, index) {
        this.assignInfos[index].assignees = data;
    };
    /**
     * 其他节点用户帮助选人
     * @param data
     * @param index
     */
    /**
     * 其他节点用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    ProcessSelectorComponent.prototype.otherAssignInfosAfterConfirm = /**
     * 其他节点用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (data, index) {
        this.otherAssignInfos[index].assignees = data;
    };
    /**
     * 弹框点击取消
     */
    /**
     * 弹框点击取消
     * @return {?}
     */
    ProcessSelectorComponent.prototype.cancel = /**
     * 弹框点击取消
     * @return {?}
     */
    function () {
        if (this.openFromIframe) {
            ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.Cancel, message: '' } });
        }
        else {
            this.subjectCancel.next(false);
        }
    };
    /**
     * 获取提交审批后返回值（bool型，兼容历史）
     */
    /**
     * 获取提交审批后返回值（bool型，兼容历史）
     * @return {?}
     */
    ProcessSelectorComponent.prototype.getSubject = /**
     * 获取提交审批后返回值（bool型，兼容历史）
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     */
    /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     * @return {?}
     */
    ProcessSelectorComponent.prototype.getSubjectWithResponse = /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     * @return {?}
     */
    function () {
        return this.subjectWithResponse.asObservable();
    };
    /**
     * 点击取消后的subject，关闭窗口使用
     * @returns
     */
    /**
     * 点击取消后的subject，关闭窗口使用
     * @return {?}
     */
    ProcessSelectorComponent.prototype.getSubjectCancel = /**
     * 点击取消后的subject，关闭窗口使用
     * @return {?}
     */
    function () {
        return this.subjectCancel.asObservable();
    };
    /**
     * 设置下一环节
     */
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    ProcessSelectorComponent.prototype.setNextNode = /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
         * @param {?} path
         * @return {?}
         */
        function (path) { return ({
            id: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionId; })).join('，'),
            name: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionName; })).join('，')
        }); }));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        var defaultIndex = response.simulationPaths.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.default; }));
        if (defaultIndex > -1) {
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.nodeDefaultValue = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
            this.setOtherAssignInfo(response);
        }
        else {
            this.nodePlaceholder = this.i18nService.getValue('task.selectPlaceholder');
        }
    };
    /**
     * 设置当前指派信息帮助参数
     */
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    ProcessSelectorComponent.prototype.setAssignInfo = /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    function (simulationPaths) {
        var _this = this;
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        function (nodeId) {
            /** @type {?} */
            var node = simulationPaths.nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionId === nodeId; }));
            if (node) {
                _this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }
            else {
                _this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        }));
    };
    /**
     * 设置其他节点指派
     * @param response
     */
    /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    ProcessSelectorComponent.prototype.setOtherAssignInfo = /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    function (response) {
        var _this = this;
        this.otherAssignInfos = [];
        /** @type {?} */
        var tmpOtherAssignInfos = [];
        /** @type {?} */
        var otherAssignNodes = response.otherAssignNodes;
        if (otherAssignNodes && otherAssignNodes.length) {
            otherAssignNodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                tmpOtherAssignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }));
            //其他节点与下一节点去重
            if (this.assignInfos && this.assignInfos.length) {
                tmpOtherAssignInfos = tmpOtherAssignInfos.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return _this.assignInfos.findIndex((/**
                 * @param {?} b
                 * @return {?}
                 */
                function (b) { return b.activityDefinitionId == a.activityDefinitionId; })) < 0; }));
            }
            this.otherAssignInfos = tmpOtherAssignInfos;
        }
    };
    /**
     * 清空当前指派信息帮助参数
     */
    /**
     * 清空当前指派信息帮助参数
     * @private
     * @return {?}
     */
    ProcessSelectorComponent.prototype.clearAssignInfos = /**
     * 清空当前指派信息帮助参数
     * @private
     * @return {?}
     */
    function () {
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
        this.otherAssignInfos = [];
    };
    /**
     * 获取浏览器缓存，上次流程选择的结果
     */
    /**
     * 获取浏览器缓存，上次流程选择的结果
     * @private
     * @param {?} processCategoryId
     * @return {?}
     */
    ProcessSelectorComponent.prototype.getSelectedProcessCache = /**
     * 获取浏览器缓存，上次流程选择的结果
     * @private
     * @param {?} processCategoryId
     * @return {?}
     */
    function (processCategoryId) {
        /** @type {?} */
        var browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            return browserCache.selectedProcessList.find((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.processCategory == processCategoryId; }));
        }
        return undefined;
    };
    /**
     * 浏览器缓存记下流程选择的结果
     */
    /**
     * 浏览器缓存记下流程选择的结果
     * @private
     * @return {?}
     */
    ProcessSelectorComponent.prototype.setSelectedProcessCache = /**
     * 浏览器缓存记下流程选择的结果
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var processCategoryId = this.payload.bizDefKey;
        /** @type {?} */
        var processDefinitionId = this.payload.processDefinitionId;
        /** @type {?} */
        var process = this.destProcesses.find((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.id == processDefinitionId; }));
        /** @type {?} */
        var processDefinitionName = process && process.name;
        /** @type {?} */
        var browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            /** @type {?} */
            var selectedProcessList = browserCache.selectedProcessList;
            if (selectedProcessList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.processCategory == processCategoryId; })) > -1) {
                selectedProcessList.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.processCategory == processCategoryId) {
                        item.processDefinitionId = processDefinitionId;
                        item.processDefinitionName = processDefinitionName;
                        item.logTime = new Date();
                    }
                }));
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
            else {
                /** @type {?} */
                var item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
                selectedProcessList.push(item);
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
        }
        else {
            /** @type {?} */
            var browserCache_1 = new StartProcessCache();
            /** @type {?} */
            var selectedProcessList = [];
            /** @type {?} */
            var item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
            selectedProcessList.push(item);
            browserCache_1.selectedProcessList = selectedProcessList;
            localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache_1));
        }
    };
    ProcessSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-process-selector',
                    template: "<div>\r\n  <!-- \u5373\u5C06\u6D41\u5411 -->\r\n  <farris-section\r\n    [mainTitle]=\"'startProcess.processTowards' | translate\"\r\n    style=\"padding: 0 24px\"\r\n  >\r\n    <div class=\"wf-submit-section\">\r\n      <!-- \u9009\u62E9\u6D41\u7A0B\u5B9A\u4E49\uFF0C\u4E0B\u62C9 -->\r\n      <div class=\"wf-task-handler-help-div wf-submit-item\">\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"startProcess.procDef\" | translate }}\r\n        </div>\r\n        <div class=\"d-flex\" style=\"flex: 1\">\r\n          <farris-combo-list\r\n            style=\"flex: 1\"\r\n            [(ngModel)]=\"processDefaultValue\"\r\n            [data]=\"destProcesses\"\r\n            [editable]=\"false\"\r\n            [textField]=\"'name'\"\r\n            [valueField]=\"'id'\"\r\n            [idField]=\"'id'\"\r\n            [readonly]=\"destProcesses.length > 1 ? false : true\"\r\n            (selectChange)=\"selectProcessChange($event)\"\r\n            (clear)=\"selectProcessClear()\"\r\n            [placeholder]=\"processPlaceholder\"\r\n          >\r\n          </farris-combo-list>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- \u4E0B\u4E00\u8282\u70B9\uFF0C\u4E0B\u62C9 -->\r\n      <div class=\"wf-task-handler-help-div wf-submit-item\">\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"task.nextNodeText\" | translate }}\r\n        </div>\r\n        <div class=\"d-flex\" style=\"flex: 1\">\r\n          <farris-combo-list\r\n            style=\"flex: 1\"\r\n            #nodeCombo\r\n            [(ngModel)]=\"nodeDefaultValue\"\r\n            [data]=\"destNodes\"\r\n            [editable]=\"false\"\r\n            [textField]=\"'name'\"\r\n            [valueField]=\"'id'\"\r\n            [idField]=\"'id'\"\r\n            [readonly]=\"destNodes.length > 1 ? false : true\"\r\n            [placeholder]=\"nodePlaceholder\"\r\n            (selectChange)=\"selectNodeChange($event)\"\r\n            (clear)=\"selectNodeClear()\"\r\n          >\r\n          </farris-combo-list>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- \u529E\u7406\u4EBA\u5458 -->\r\n      <lib-assignee-info\r\n        *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n        [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n        [setAnonymous]=\"assignInfo.anonymous\"\r\n        [setAnonymousText]=\"assignInfo.anonymousText\"\r\n        [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n        [activityName]=\"\r\n          assignInfos.length > 1 ? assignInfo.activityDefinitionName : ''\r\n        \"\r\n        [ifShowBlank]=\"assignInfos.length > 1 ? false : true\"\r\n        [openFromIframe]=\"openFromIframe\"\r\n        [wfContext]=\"wfContext\"\r\n        [index]=\"i\"\r\n        [ifHorizontal]=\"true\"\r\n        (afterConfirm)=\"afterConfirm($event, i)\"\r\n      ></lib-assignee-info>\r\n\r\n      <!-- \u7D27\u6025\u7A0B\u5EA6 -->\r\n      <div\r\n        *ngIf=\"\r\n          response?.priorityInfo?.enable &&\r\n          response?.priorityInfo?.priorityItemList?.length\r\n        \"\r\n        class=\"wf-task-handler-help-div wf-submit-item\"\r\n      >\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"task.priority\" | translate }}\r\n        </div>\r\n        <farris-radiogroup\r\n          [(ngModel)]=\"response.priorityInfo.priority\"\r\n          [data]=\"response.priorityInfo.priorityItemList\"\r\n          [horizontal]=\"true\"\r\n        >\r\n        </farris-radiogroup>\r\n      </div>\r\n    </div>\r\n  </farris-section>\r\n\r\n  <!-- \u4FEE\u6539\u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA -->\r\n  <farris-section\r\n    *ngIf=\"otherAssignInfos && otherAssignInfos.length\"\r\n    [mainTitle]=\"'startProcess.otherNodesAssign' | translate\"\r\n    style=\"padding: 0 24px\"\r\n  >\r\n    <div class=\"wf-submit-section\">\r\n      <!-- \u529E\u7406\u4EBA\u5458 -->\r\n      <lib-assignee-info\r\n        *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n        [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n        [setAnonymous]=\"assignInfo.anonymous\"\r\n        [setAnonymousText]=\"assignInfo.anonymousText\"\r\n        [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n        [activityName]=\"assignInfo.activityDefinitionName\"\r\n        [ifShowBlank]=\"true\"\r\n        [openFromIframe]=\"openFromIframe\"\r\n        [wfContext]=\"wfContext\"\r\n        [index]=\"i + 'other'\"\r\n        [ifHorizontal]=\"true\"\r\n        (afterConfirm)=\"otherAssignInfosAfterConfirm($event, i)\"\r\n      ></lib-assignee-info>\r\n    </div>\r\n  </farris-section>\r\n</div>\r\n\r\n<!-- \u5F39\u6846\u663E\u793A\u65F6\uFF0C\u663E\u793A\u6309\u94AE -->\r\n<div *ngIf=\"showButtons\" class=\"modal-footer\">\r\n  <div *ngIf=\"showButtons; then buttons\"></div>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #buttons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    [disabled]=\"submitDisable\"\r\n    directive-throttle\r\n    (throttleClick)=\"startProcessSubmit()\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                    styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
                }] }
    ];
    /** @nocollapse */
    ProcessSelectorComponent.ctorParameters = function () { return [
        { type: TaskService },
        { type: LoadingService },
        { type: NotifyService },
        { type: I18nService },
        { type: MessagerService },
        { type: Injector },
        { type: WfTaskHandlerService }
    ]; };
    ProcessSelectorComponent.propDecorators = {
        nodeCombo: [{ type: ViewChild, args: ['nodeCombo',] }],
        buttons: [{ type: ViewChild, args: ['buttons',] }],
        openFromIframe: [{ type: Input }],
        parameter: [{ type: Input }]
    };
    return ProcessSelectorComponent;
}());
export { ProcessSelectorComponent };
if (false) {
    /** @type {?} */
    ProcessSelectorComponent.prototype.destProcesses;
    /** @type {?} */
    ProcessSelectorComponent.prototype.destNodes;
    /** @type {?} */
    ProcessSelectorComponent.prototype.response;
    /** @type {?} */
    ProcessSelectorComponent.prototype.assignInfos;
    /** @type {?} */
    ProcessSelectorComponent.prototype.otherAssignInfos;
    /** @type {?} */
    ProcessSelectorComponent.prototype.selectedProcessId;
    /** @type {?} */
    ProcessSelectorComponent.prototype.selectedNodeId;
    /** @type {?} */
    ProcessSelectorComponent.prototype.payload;
    /** @type {?} */
    ProcessSelectorComponent.prototype.subject;
    /** @type {?} */
    ProcessSelectorComponent.prototype.subjectWithResponse;
    /** @type {?} */
    ProcessSelectorComponent.prototype.subjectCancel;
    /** @type {?} */
    ProcessSelectorComponent.prototype.submitDisable;
    /** @type {?} */
    ProcessSelectorComponent.prototype.showButtons;
    /** @type {?} */
    ProcessSelectorComponent.prototype.curLanguage;
    /** @type {?} */
    ProcessSelectorComponent.prototype.nodePlaceholder;
    /** @type {?} */
    ProcessSelectorComponent.prototype.processPlaceholder;
    /** @type {?} */
    ProcessSelectorComponent.prototype.wfContext;
    /** @type {?} */
    ProcessSelectorComponent.prototype.processDefaultValue;
    /** @type {?} */
    ProcessSelectorComponent.prototype.nodeDefaultValue;
    /** @type {?} */
    ProcessSelectorComponent.prototype.dialogHeight;
    /** @type {?} */
    ProcessSelectorComponent.prototype.nodeCombo;
    /** @type {?} */
    ProcessSelectorComponent.prototype.buttons;
    /** @type {?} */
    ProcessSelectorComponent.prototype.openFromIframe;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.i18nService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.handlerService;
}
//# sourceMappingURL=data:application/json;base64,