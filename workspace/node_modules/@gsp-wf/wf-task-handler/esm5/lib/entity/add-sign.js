/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BasePayload } from "./base-payload";
/**
 * 加签模拟接口返回
 */
var /**
 * 加签模拟接口返回
 */
AddSignSimulateResponse = /** @class */ (function () {
    function AddSignSimulateResponse() {
    }
    return AddSignSimulateResponse;
}());
/**
 * 加签模拟接口返回
 */
export { AddSignSimulateResponse };
if (false) {
    /**
     * 组织
     * @type {?}
     */
    AddSignSimulateResponse.prototype.organization;
    /**
     * 多人会签方式
     * @type {?}
     */
    AddSignSimulateResponse.prototype.multiInstanceType;
    /**
     * 是否允许再加签
     * @type {?}
     */
    AddSignSimulateResponse.prototype.showSignToSign;
}
/** @enum {string} */
var MultiInstanceType = {
    /**
     * 抢占
     */
    Preempt: 'Preempt',
    /**
     * 并行
     */
    Parallel: 'Parallel',
    /**
     * 串行
     */
    Sequential: 'Sequential',
};
export { MultiInstanceType };
/**
 * 加签提交的payload
 */
var /**
 * 加签提交的payload
 */
AddSignPayload = /** @class */ (function (_super) {
    tslib_1.__extends(AddSignPayload, _super);
    function AddSignPayload() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AddSignPayload;
}(BasePayload));
/**
 * 加签提交的payload
 */
export { AddSignPayload };
if (false) {
    /**
     * 加签方式：前加签、后加签、并加签（当前会签）、征询/协办
     * @type {?}
     */
    AddSignPayload.prototype.actionCode;
    /**
     * 多人会签方式：抢占 Preempt、并行会签 Parallel、串行会签Sequential
     * @type {?}
     */
    AddSignPayload.prototype.multiInstanceType;
    /**
     * 会签策略：全员通过allPass、一人通过onePass
     * @type {?}
     */
    AddSignPayload.prototype.counterSignRule;
    /**
     * 办理规则
     * all所有用户都办理
     * compliance符合规则往下流转
     * @type {?}
     */
    AddSignPayload.prototype.completedRule;
    /**
     * 加签人员
     * @type {?}
     */
    AddSignPayload.prototype.signAssignees;
    /**
     * 加签节点名称
     * @type {?}
     */
    AddSignPayload.prototype.activityName;
    /**
     * 允许再加签
     * @type {?}
     */
    AddSignPayload.prototype.allowSignToSign;
    /**
     * 紧急程度
     * @type {?}
     */
    AddSignPayload.prototype.priority;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXNpZ24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXRhc2staGFuZGxlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvYWRkLXNpZ24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFNN0M7Ozs7SUFBQTtJQWFBLENBQUM7SUFBRCw4QkFBQztBQUFELENBQUMsQUFiRCxJQWFDOzs7Ozs7Ozs7O0lBVEcsK0NBQWdDOzs7OztJQUloQyxvREFBcUM7Ozs7O0lBSXJDLGlEQUF3Qjs7OztJQU94Qjs7T0FFRztJQUNILFNBQVUsU0FBUztJQUNuQjs7T0FFRztJQUNILFVBQVcsVUFBVTtJQUNyQjs7T0FFRztJQUNILFlBQWEsWUFBWTs7Ozs7O0FBTzdCOzs7O0lBQW9DLDBDQUFXO0lBQS9DOztJQTZDQSxDQUFDO0lBQUQscUJBQUM7QUFBRCxDQUFDLEFBN0NELENBQW9DLFdBQVcsR0E2QzlDOzs7Ozs7Ozs7O0lBeENHLG9DQUFtQjs7Ozs7SUFLbkIsMkNBQTBCOzs7OztJQUsxQix5Q0FBd0I7Ozs7Ozs7SUFPeEIsdUNBQXNCOzs7OztJQUt0Qix1Q0FBd0I7Ozs7O0lBS3hCLHNDQUFxQjs7Ozs7SUFLckIseUNBQXlCOzs7OztJQUt6QixrQ0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlUGF5bG9hZCB9IGZyb20gXCIuL2Jhc2UtcGF5bG9hZFwiO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25TY29wZSB9IGZyb20gXCIuL29yZ2FuaXphdGlvbi1zY29wZVwiO1xyXG5cclxuLyoqXHJcbiAqIOWKoOetvuaooeaLn+aOpeWPo+i/lOWbnlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFkZFNpZ25TaW11bGF0ZVJlc3BvbnNlIHtcclxuICAgIC8qKlxyXG4gICAgICog57uE57uHXHJcbiAgICAgKi9cclxuICAgIG9yZ2FuaXphdGlvbjogT3JnYW5pemF0aW9uU2NvcGU7XHJcbiAgICAvKipcclxuICAgICAqIOWkmuS6uuS8muetvuaWueW8j1xyXG4gICAgICovXHJcbiAgICBtdWx0aUluc3RhbmNlVHlwZTogTXVsdGlJbnN0YW5jZVR5cGU7XHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuWFgeiuuOWGjeWKoOetvlxyXG4gICAgICovXHJcbiAgICBzaG93U2lnblRvU2lnbjogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqICDlpJrkurrkvJrnrb7mlrnlvI9cclxuICovXHJcbmV4cG9ydCBlbnVtIE11bHRpSW5zdGFuY2VUeXBlIHtcclxuICAgIC8qKlxyXG4gICAgICog5oqi5Y2gXHJcbiAgICAgKi9cclxuICAgIFByZWVtcHQgPSAnUHJlZW1wdCcsXHJcbiAgICAvKipcclxuICAgICAqIOW5tuihjFxyXG4gICAgICovXHJcbiAgICBQYXJhbGxlbCA9ICdQYXJhbGxlbCcsXHJcbiAgICAvKipcclxuICAgICAqIOS4suihjFxyXG4gICAgICovXHJcbiAgICBTZXF1ZW50aWFsID0gJ1NlcXVlbnRpYWwnXHJcblxyXG59XHJcblxyXG4vKipcclxuICog5Yqg562+5o+Q5Lqk55qEcGF5bG9hZFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFkZFNpZ25QYXlsb2FkIGV4dGVuZHMgQmFzZVBheWxvYWQge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg562+5pa55byP77ya5YmN5Yqg562+44CB5ZCO5Yqg562+44CB5bm25Yqg562+77yI5b2T5YmN5Lya562+77yJ44CB5b6B6K+iL+WNj+WKnlxyXG4gICAgICovXHJcbiAgICBhY3Rpb25Db2RlOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpJrkurrkvJrnrb7mlrnlvI/vvJrmiqLljaAgUHJlZW1wdOOAgeW5tuihjOS8muetviBQYXJhbGxlbOOAgeS4suihjOS8muetvlNlcXVlbnRpYWxcclxuICAgICAqL1xyXG4gICAgbXVsdGlJbnN0YW5jZVR5cGU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS8muetvuetlueVpe+8muWFqOWRmOmAmui/h2FsbFBhc3PjgIHkuIDkurrpgJrov4dvbmVQYXNzXHJcbiAgICAgKi9cclxuICAgIGNvdW50ZXJTaWduUnVsZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqe55CG6KeE5YiZXHJcbiAgICAgKiBhbGzmiYDmnInnlKjmiLfpg73lip7nkIZcclxuICAgICAqIGNvbXBsaWFuY2XnrKblkIjop4TliJnlvoDkuIvmtYHovaxcclxuICAgICAqL1xyXG4gICAgY29tcGxldGVkUnVsZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg562+5Lq65ZGYXHJcbiAgICAgKi9cclxuICAgIHNpZ25Bc3NpZ25lZXM6IHN0cmluZ1tdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg562+6IqC54K55ZCN56ewXHJcbiAgICAgKi9cclxuICAgIGFjdGl2aXR5TmFtZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWB6K645YaN5Yqg562+XHJcbiAgICAgKi9cclxuICAgIGFsbG93U2lnblRvU2lnbjogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOe0p+aApeeoi+W6plxyXG4gICAgICovXHJcbiAgICBwcmlvcml0eTogbnVtYmVyO1xyXG5cclxuXHJcbn0iXX0=