/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef, HostBinding, Injector, } from '@angular/core';
import { Addendum, VerifySigned, CompleteContext } from '../../entity/complete-context';
import { TaskService } from '../../service/task.service';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../service/i18n/i18n.service';
import { AssigneeInfo } from '../../entity/complete-response';
import { BehaviorSubject, Subject } from 'rxjs';
import { TaskAction } from '../../entity/task-action';
import { WfTaskHandlerService } from '../../wf-task-handler.service';
import { TaskEntity } from '../../entity/task-entity';
import { ActionBaseImplComponent, ActionOrigin } from '@gsp-wf/task-impl-api';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { ConfigCode } from '../../entity/task-center-config';
import { WorkItemExecuteParam } from '../../entity/workitem-execute-param';
import { UrgeHandleContext, UrgeHandleSimulateContext } from '../../entity/urge-handle';
import { BatchVerifySignedContext } from '../../entity/batchVerifysigned';
import { WfContext } from '../../entity/wfContext';
import { UrgeHandleComponent } from "../urge-handle/urge-handle.component";
import { MultiInstanceType } from '../../entity/add-sign';
import { SimulateSubject } from '../../entity/simulaite-subject';
var TaskExecuteComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaskExecuteComponent, _super);
    function TaskExecuteComponent(taskService, notify, i18nService, handlerService, loadingService, message, injector) {
        var _this = _super.call(this) || this;
        _this.taskService = taskService;
        _this.notify = notify;
        _this.i18nService = i18nService;
        _this.handlerService = handlerService;
        _this.loadingService = loadingService;
        _this.message = message;
        _this.injector = injector;
        // 流程实例ID
        _this.actionEntity = new TaskAction(); // 动作实体
        // 动作实体
        _this.comment = ''; // 审批意见
        // 审批意见
        _this.MAX_COMMENT_LENGTH = 4000; //审批意见最大长度
        //当前动作的默认意见
        _this.taskList = []; //批量审批接收到的任务list
        //批量审批接收到的任务list
        _this.batchSecond = 0; //批量操作的时间
        //批量操作的时间
        _this.ifSelectNode = false; // 是否显示选择下一环节
        // 是否显示选择下一环节
        _this.ifSelectUser = false; // 是否显示下一环节处理人
        // 是否显示下一环节处理人
        _this.ifAssignUser = false; // 是否显示办理人员框
        // 是否显示办理人员框
        _this.ifUrgeType = false; // 是否显示接收人框（催办消息接收人）
        // 是否显示接收人框（催办消息接收人）
        _this.ifShowCommentToMySelf = false; // 是否显示审批记录仅自己可见
        // 是否显示审批记录仅自己可见
        _this.singleSelect = false; // 用户帮助是否单选，默认多选
        // 用户帮助是否单选，默认多选
        _this.selectTargetAble = false; // 是否允许选择下一环节
        // 是否允许选择下一环节
        _this.hideComment = false; //审批记录仅自己可见
        //审批记录仅自己可见
        _this.filter = { notGetCurrentUser: true, notGetStopUser: true, orderField: 'order', withAllOrg: true, orgId: '' }; // 系统用户帮助是否过滤当前人
        // 系统用户帮助是否过滤当前人
        _this.selectedUsers = []; // 用户帮助选择后的Id数组
        _this.subject = new BehaviorSubject(null);
        _this.submitResult = { result: true, isClose: true }; // 动作执行完成后返回的实体结果
        // 动作执行完成后返回的实体结果
        _this.bindingData = {}; // 系统帮助多选时用到
        // 系统帮助多选时用到
        _this.selectNodeText = _this.i18nService.getValue('task.nextNodeText'); // 下一环节显示的文字,"下一环节"
        // 处理人员显示文字
        _this.commentPlaceHolder = _this.i18nService.getValue('static.inputHolder'); //审批意见框placeholder
        //审批意见框placeholder
        _this.showAttachment = true; //是否显示附件上传
        //是否显示附件上传
        _this.showSign = true; //是否显示签名
        //是否显示签名
        _this.showCommonComment = true; //是否显示常用意见
        //是否显示常用意见
        _this.textAreaHeight = 84; //文字框的高度
        //文字框的高度
        _this.billMethodConfigs = []; // 表单动作配置列表
        // 选择的下一环节ID，并行分支是，逗号隔开的
        _this.destNodes = []; // 候选下一环节
        // 候选下一环节
        _this.dialogHeight = 270; // 弹框的高度
        // 弹框的高度
        _this.dialogHeightBase = 70;
        _this.addendum = new Addendum(); // 附件、签名信息
        // 附件、签名信息
        _this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        _this.assignInfos = [{
                // 节点返回的指派信息（多个）
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }];
        _this.otherAssignInfos = []; //其他节点指派信息
        //其他节点指派信息
        _this.originOtherAssignInfos = []; //缓存一开始的其他节点指派信息
        // 表单对象
        _this.ifRegistered = false; // 表单是否注册
        // 表单是否注册
        _this.configList = []; //任务中心配置项
        //任务中心配置项
        _this.verifySigned = new VerifySigned(); // 数字验签参数
        // 数字验签参数
        _this.submitDisable = false; // 提交按钮是否禁用
        // 提交按钮是否禁用
        //加签使用
        _this.addSign = {
            showSignToSign: false,
            allowSignToSIgn: true,
            showMultiInstanceType: false,
            multiInstanceType: [
                { value: 'Parallel', name: _this.i18nService.getValue('addSign.parallel') },
                { value: 'Sequential', name: _this.i18nService.getValue('addSign.sequential') },
                { value: 'Preempt', name: _this.i18nService.getValue('addSign.preempt') },
            ],
            originMultiInstType: '',
            curMultiInstType: MultiInstanceType.Parallel.toString()
        };
        //动态驳回配置
        _this.showBackWardConfig = {
            title: _this.i18nService.getValue('backWardConfig.title'),
            dynamicBackWardRuleAble: false,
            displayPlaceholder: '',
            showTips: false,
            enable: false,
            backWardRules: [{
                    name: _this.i18nService.getValue('backWardConfig.sequence'),
                    value: 'sequence'
                }, {
                    name: _this.i18nService.getValue('backWardConfig.backToMe'),
                    value: 'backToMe'
                }, {
                    name: _this.i18nService.getValue('backWardConfig.backToCurrentNode'),
                    value: 'backToCurrentNode'
                }]
        };
        /**
         * 任务催办时使用
         */
        _this.showUrgeMessageSubject = false; // 是否显示催办消息主题（催办时使用）
        // 内容可编辑
        _this.wfContext = new WfContext(); //工作流上下文
        //工作流上下文
        _this.enablePriority = false; //是否显示密级（动作级别）
        //是否显示密级（动作级别）
        _this.cls = '';
        _this.POST_MESSAGE_TARGET = window.document.location.origin;
        _this.language = localStorage.getItem('languageCode') || 'zh-CHS'; //中英文
        /**
         * 监听事件处理
         */
        _this.eventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.messageSubject.next(event);
        });
        // 如果存在消息监听，先删掉
        if (TaskExecuteComponent.func) {
            window.removeEventListener('message', TaskExecuteComponent.func, false);
        }
        _this.addMessageListener();
        return _this;
    }
    /**
     * 组件销毁时，去掉subject注册
     */
    /**
     * 组件销毁时，去掉subject注册
     * @return {?}
     */
    TaskExecuteComponent.prototype.ngOnDestroy = /**
     * 组件销毁时，去掉subject注册
     * @return {?}
     */
    function () {
        if (this.actionToken) {
            this.taskService.subjectRemove(this.actionToken);
        }
        if (this.simulateToken) {
            this.taskService.subjectRemove(this.simulateToken);
        }
    };
    /**
     * @return {?}
     */
    TaskExecuteComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TaskExecuteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.getAllUserConfig().subscribe((/**
         * @param {?} configList
         * @return {?}
         */
        function (configList) {
            load.close();
            _this.configList = configList;
            /** @type {?} */
            var comment = configList.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.configCode === ConfigCode.Default_Approval_Comment; }));
            /** @type {?} */
            var if_store_comment = configList.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.configCode === ConfigCode.If_Store_Comment; }));
            /** @type {?} */
            var passComment;
            /** @type {?} */
            var backComment;
            if (comment && comment.currentValue) {
                if (_this.language == 'zh-CHS') {
                    passComment = JSON.parse(comment.currentValue).pass;
                    backComment = JSON.parse(comment.currentValue).back;
                }
                else {
                    passComment = JSON.parse(comment.currentValue)['pass_' + _this.language];
                    backComment = JSON.parse(comment.currentValue)['back_' + _this.language];
                }
                if (_this.actionEntity.code === 'Pass') {
                    _this.comment = passComment;
                    _this.defaultComment = passComment;
                }
                if (_this.actionEntity.code === 'Back') {
                    _this.comment = backComment;
                    _this.defaultComment = backComment;
                }
            }
            if (if_store_comment && if_store_comment.currentValue === 'true') {
                if (_this.wfCacheComment) { //开启暂存意见，当切换到驳回并且
                    if (_this.actionEntity.code == 'Back' && _this.wfCacheComment == passComment) {
                    }
                    else {
                        _this.comment = _this.wfCacheComment;
                    }
                }
            }
        }), (/**
         * @return {?}
         */
        function () {
            load.close();
        }));
        // 从任务办理界面打开时，才注册服务
        if (this.origin === ActionOrigin.TaskForm) {
            this.initFormEvent();
            // 获取表单操作配置
            this.taskService.getTaskFormInfo(this.workItemId).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (re && re.billMethodConfigs && re.billMethodConfigs.length) {
                    _this.billMethodConfigs = re.billMethodConfigs;
                }
            }));
        }
        /** @type {?} */
        var context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.addMessageListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('message', this.eventHandler, false);
        TaskExecuteComponent.func = this.eventHandler;
    };
    /**
     * 重写父类方法
     * @param task
     */
    /**
     * 重写父类方法
     * @param {?} task
     * @return {?}
     */
    TaskExecuteComponent.prototype.setTask = /**
     * 重写父类方法
     * @param {?} task
     * @return {?}
     */
    function (task) {
        if (task) {
            this.task = task;
            this.workItemId = task.sourceId;
            this.processInstanceId = task.processInstanceId;
            this.wfContext.processCategoryId = task.categoryId;
            this.selectedPriority = task.priority;
        }
    };
    /**
     * 批量办理 设置任务列表
     * @param taskList
     */
    /**
     * 批量办理 设置任务列表
     * @param {?} taskList
     * @return {?}
     */
    TaskExecuteComponent.prototype.setTaskList = /**
     * 批量办理 设置任务列表
     * @param {?} taskList
     * @return {?}
     */
    function (taskList) {
        if (taskList.length > 20) {
            this.dialogHeight = 290;
        }
        this.taskList = taskList;
        this.batchSecond = Math.ceil(this.taskList.length / 6);
    };
    /**
     * 重写父类方法
     * @param action
     */
    /**
     * 重写父类方法
     * @param {?} action
     * @return {?}
     */
    TaskExecuteComponent.prototype.setAction = /**
     * 重写父类方法
     * @param {?} action
     * @return {?}
     */
    function (action) {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var result = new SimulateSubject();
        if (action) {
            this.actionEntity = action;
            if (this.task) { // 单个、批量都setAction，单个才执行模拟
                return this.simulate(this.actionEntity);
            }
            if (this.taskList && this.taskList.length) {
                return this.batchSimulate();
            }
        }
        //批量时，也要返回
        setTimeout((/**
         * @return {?}
         */
        function () {
            subject.next(result);
        }), 100);
        return subject.asObservable();
    };
    /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     */
    /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.initFormEvent = /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 审批前事件
        this.actionToken = this.workItemId + 'action';
        /** @type {?} */
        var actionToken = this.actionToken;
        /** @type {?} */
        var subjectCode = 'FormSubjectCode';
        ((/** @type {?} */ (window))).gspWfEventService = ((/** @type {?} */ (window))).gspWfEventService || {};
        ((/** @type {?} */ (window))).gspWfEventService.register = (/**
         * @param {?} formObject
         * @return {?}
         */
        function (formObject) {
            _this.taskService.subjectRegister(subjectCode, actionToken);
            _this.ifRegistered = true;
            _this.formObject = formObject;
        });
        ((/** @type {?} */ (window))).gspWfEventService.notify = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.ifRegistered) {
                _this.taskService.subjectNotify(actionToken, value);
            }
            else { // 表单不注册，也可直接调用notify
                _this.simulateToken = _this.workItemId + 'simulate';
                /** @type {?} */
                var simulateToken = _this.simulateToken;
                _this.taskService.subjectRegister(subjectCode, simulateToken);
                _this.taskService.subjectResponse(simulateToken, '', (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    value && value.dataChanged && _this.completeSimulate();
                }));
                _this.taskService.subjectNotify(simulateToken, value);
            }
        });
    };
    /**
     * 点击提交的时候，执行表单的前事件
     */
    /**
     * 点击提交的时候，执行表单的前事件
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.beforeCompleteSubmit = /**
     * 点击提交的时候，执行表单的前事件
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.origin == ActionOrigin.TaskForm) {
            // 获取表单操作配置
            /** @type {?} */
            var passPreActions = this.billMethodConfigs.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.action === _this.actionEntity.code && action.executionTime === 'Pre'; })).sort((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            function (x, y) { return x.sortOrder - y.sortOrder; }));
            // 如果表单注册了事件
            if (passPreActions && passPreActions.length) {
                this.executeFormActions(tslib_1.__spread(passPreActions));
            }
            else { // 没有定义前后事件，直接提交
                this.completeSubmit();
            }
        }
        else {
            this.completeSubmit();
        }
    };
    /**
     * @param formActions 表单中要执行的动作
     */
    /**
     * @private
     * @param {?} formActions 表单中要执行的动作
     * @return {?}
     */
    TaskExecuteComponent.prototype.executeFormActions = /**
     * @private
     * @param {?} formActions 表单中要执行的动作
     * @return {?}
     */
    function (formActions) {
        var _this = this;
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                /** @type {?} */
                var data = re.data.data;
                if (data.result === true) {
                    if (data.dataChanged === true) { // 如果需要预解析，先预解析再继续执行
                        _this.completeSimulate().subscribe((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) {
                            if (r.result) { // 预解析正确
                                _this.executeFormActions(formActions);
                            }
                            else { // 预解析错误
                                _this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                            }
                        }));
                    }
                    else { // 不需要预解析，继续执行
                        _this.executeFormActions(formActions);
                    }
                }
                else {
                    _this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批前表单操作执行失败！');
                }
            }));
            // 执行表单动作
            /** @type {?} */
            var formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            this.completeSubmit();
        }
    };
    /**
     * 单个任务预解析
     * @param action
     */
    /**
     * 单个任务预解析
     * @private
     * @param {?} action
     * @return {?}
     */
    TaskExecuteComponent.prototype.simulate = /**
     * 单个任务预解析
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        switch (action.code) {
            case 'AssignUser': // 指派 单独参数
                return this.assignSimulate();
            case 'Claim': // 领用
                return this.defaultSubjectNext();
            case 'Unclaim': // 取消领用
                return this.defaultSubjectNext();
            case 'Retrieve': // 取回
                return this.defaultSubjectNext();
            case 'Transfer': // 移交 单独参数
                return this.transferSimulate();
            case 'AddSign': // 加签
                return this.addSignSimulate();
            case 'AddSignFront': // 征询
                return this.addSignFrontSimulate();
            case 'Notify': //知会
                return this.notifySimulate();
            case 'Refuse': // 否决
                return this.defaultSubjectNext();
            case 'Obsolete': // 作废
                return this.defaultSubjectNext();
            case 'Comment': // 评论
                return this.defaultSubjectNext();
            case 'ReadTask': // 已阅
                this.ifShowCommentToMySelf = true;
                return this.defaultSubjectNext(295);
            case 'UrgeHandle': //催办
                return this.urgeHandleSimulate();
            case 'CancelConsult': //取消征询
                return this.defaultSubjectNext();
            default: // 通过 驳回 重新提交 其他自定义的动作
                return this.completeSimulate();
        }
    };
    /**
     * 批量审批预解析
     * @returns
     */
    /**
     * 批量审批预解析
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchSimulate = /**
     * 批量审批预解析
     * @private
     * @return {?}
     */
    function () {
        switch (this.actionEntity.code) {
            case "ReadTask": //批量已阅
                this.ifShowCommentToMySelf = true;
                return this.defaultSubjectNext(295);
            case "Retrieve": //批量取回
                return this.defaultSubjectNext();
            case "Transfer": //批量移交
                this.ifSelectUser = true;
                this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
                this.singleSelect = true;
                return this.defaultSubjectNext(this.dialogHeight + this.dialogHeightBase);
            default:
                return this.defaultSubjectNext();
        }
    };
    /**
     * 默认的预解析返回结果，可控制弹框高度
     * @param dialogHeight
     * @returns
     */
    /**
     * 默认的预解析返回结果，可控制弹框高度
     * @private
     * @param {?=} dialogHeight
     * @return {?}
     */
    TaskExecuteComponent.prototype.defaultSubjectNext = /**
     * 默认的预解析返回结果，可控制弹框高度
     * @private
     * @param {?=} dialogHeight
     * @return {?}
     */
    function (dialogHeight) {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var s = new SimulateSubject();
        s.showDialog = true;
        s.dialogHeight = dialogHeight ? dialogHeight : this.dialogHeight;
        s.result = true;
        setTimeout((/**
         * @return {?}
         */
        function () {
            subject.next(s);
        }), 100);
        return subject.asObservable();
    };
    /**
     * 真正地提交
     * 重写父类方法
     */
    /**
     * 真正地提交
     * 重写父类方法
     * @return {?}
     */
    TaskExecuteComponent.prototype.submit = /**
     * 真正地提交
     * 重写父类方法
     * @return {?}
     */
    function () {
        switch (this.actionEntity.code) {
            case 'AssignUser': // 指派 单独参数
                this.assignSubmit();
                break;
            case 'Claim': // 领用
                this.claimSubmit();
                break;
            case 'Unclaim': // 取消领用
                this.unClaimSubmit();
                break;
            case 'Retrieve': // 取回
                this.retrieveSubmit();
                break;
            case 'Transfer': // 移交 单独参数
                this.transferSubmit();
                break;
            case 'AddSign': // 加签
                this.addSignSubmit();
                break;
            case 'AddSignFront': // 征询
                this.addSignFrontSubmit();
                break;
            case 'Comment': // 评论
                this.commentSubmit();
                break;
            case 'Notify': //知会
                this.notifySubmit();
                break;
            case 'ReadTask': // 已阅
                this.readSubmit();
                break;
            case 'UrgeHandle': //催办
                this.urgeHandleSubmit();
                break;
            case 'CancelConsult': //取消征询
                this.cancelConsultSubmit();
                break;
            default: // 通过 驳回 否决 作废 重新提交 其他自定义动作
                this.beforeCompleteSubmit();
        }
        return this.subject.asObservable();
    };
    /**
     * 批量办理点击提交
     * @param tasks
     * @returns
     */
    /**
     * 批量办理点击提交
     * @param {?} tasks
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchSubmit = /**
     * 批量办理点击提交
     * @param {?} tasks
     * @return {?}
     */
    function (tasks) {
        switch (this.actionEntity.code) {
            case "ReadTask": //批量已阅
                return this.batchReadTaskSubmit(tasks);
            case "Retrieve": //批量取回
                return this.batchRetrieveSubmit(tasks);
            case "Claim": //批量领用
                return this.batchClaimSubmit(tasks);
            case "Unclaim": //批量取消领用
                return this.batchUnclaimSubmit(tasks);
            case "Transfer": //批量移交
                return this.batchTransferSubmit(tasks);
            default:
                return this.batchCompleteSubmit(tasks);
        }
    };
    /**
     * 执行批量前事件
     * @param tasks 批量任务列表
     */
    /**
     * 执行批量前事件
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchCompleteSubmit = /**
     * 执行批量前事件
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    function (tasks) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var filterNum = 0;
        /** @type {?} */
        var subject = new BehaviorSubject(null);
        /** @type {?} */
        var successSubmit = { result: true, isClose: true };
        if ((this.actionEntity.code === 'Back' || this.actionEntity.code === 'Refuse') && !this.comment) { // 批量意见是否必填不支持根据审批项配置操作，批量驳回意见必填
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var noActionTasks = tasks.filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.actions.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.code === _this.actionEntity.code; })) === -1; }));
            if (noActionTasks && noActionTasks.length > 0) {
                try {
                    for (var noActionTasks_1 = tslib_1.__values(noActionTasks), noActionTasks_1_1 = noActionTasks_1.next(); !noActionTasks_1_1.done; noActionTasks_1_1 = noActionTasks_1.next()) {
                        var a = noActionTasks_1_1.value;
                        filterNum++;
                        if (filterNum === tasks.length) {
                            subject.next(successSubmit);
                            this.showBatchSubmitInfo(0, filterNum, 0, 0);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (noActionTasks_1_1 && !noActionTasks_1_1.done && (_a = noActionTasks_1.return)) _a.call(noActionTasks_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            /** @type {?} */
            var actTasks_1 = tasks.filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.actions.some((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.code === _this.actionEntity.code; })); }));
            if (actTasks_1 && actTasks_1.length > 0) {
                this.executeBatchEvent(tslib_1.__spread(this.actionEntity.preEvents.filter((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.batch; }))), actTasks_1, this.actionEntity, (/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    var e_2, _a;
                    if (re && re.result) {
                        if (re.passTasks) {
                            /** @type {?} */
                            var backTasks = actTasks_1.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            function (t) { return re.passTasks.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id === t.id; })) === -1; }));
                            if (backTasks && backTasks.length > 0) {
                                try {
                                    for (var backTasks_1 = tslib_1.__values(backTasks), backTasks_1_1 = backTasks_1.next(); !backTasks_1_1.done; backTasks_1_1 = backTasks_1.next()) {
                                        var t = backTasks_1_1.value;
                                        filterNum++;
                                        if (filterNum === tasks.length) {
                                            subject.next(successSubmit);
                                            _this.showBatchSubmitInfo(0, filterNum, 0, 0);
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (backTasks_1_1 && !backTasks_1_1.done && (_a = backTasks_1.return)) _a.call(backTasks_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                            }
                            actTasks_1 = actTasks_1.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            function (t) { return re.passTasks.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) { return id === t.id; })) > -1; }));
                        }
                        if (actTasks_1.length > 0) {
                            /** @type {?} */
                            var batchVerifySignedContext = new BatchVerifySignedContext();
                            _this.batchVerifySubmit(actTasks_1, filterNum, batchVerifySignedContext).subscribe((/**
                             * @param {?} r
                             * @return {?}
                             */
                            function (r) {
                                if (r && r.successSubmit && r.successSubmit.result) {
                                    _this.executeBatchEvent(tslib_1.__spread(_this.actionEntity.postEvents.filter((/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    function (e) { return e.batch; }))), r.successHandleTasks, _this.actionEntity, (/**
                                     * @return {?}
                                     */
                                    function () {
                                        subject.next(r.successSubmit);
                                    }), { result: true, passTasks: r.successHandleTasks.map((/**
                                         * @param {?} t
                                         * @return {?}
                                         */
                                        function (t) { return t.id; })) });
                                }
                            }));
                        }
                    }
                    else {
                        subject.next({ result: false, isClose: false });
                    }
                }), { result: true, passTasks: actTasks_1.map((/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) { return t.id; })) });
            }
        }
        return subject.asObservable();
    };
    /**
     * 批量数字签名
     * @param tasks
     * @param filterNum
     * @param batchVerifySignedContext
     * @returns
     */
    /**
     * 批量数字签名
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} batchVerifySignedContext
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchVerifySubmit = /**
     * 批量数字签名
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} batchVerifySignedContext
     * @return {?}
     */
    function (tasks, filterNum, batchVerifySignedContext) {
        var _this = this;
        if (filterNum === void 0) { filterNum = 0; }
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var verifyTasks = tasks.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var action = t.actions.find((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.code === _this.actionEntity.code; }));
            if (!action) {
                return false;
            }
            else {
                if (action.parameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.code === 'CertificationNecessary' && p.value === 'true'; }))) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }));
        /** @type {?} */
        var verifyTasksNum = verifyTasks.length;
        if (verifyTasks.length > 0) {
            /** @type {?} */
            var that_1 = this;
            if (((/** @type {?} */ (window))).gspframeworkService &&
                ((/** @type {?} */ (window))).gspframeworkService.rtf) {
                ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', (/**
                 * @param {?} signedData
                 * @return {?}
                 */
                function signMsgOver(signedData) {
                    if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                        // 证书对象
                        /** @type {?} */
                        var cert = gspCA.getCurCert();
                        // 验签参数
                        that_1.verifySigned = {
                            // 要验证的证书base64编码的字符流(certkey)
                            certBase64Info: gspCA.getCertBase64(cert),
                            // 签名原信息
                            msg: ['BatchDigitalSignature'],
                            // 要签名后信息
                            signedmsg: signedData[1][0],
                            // 用户使用场景，目前未使用，可以为空
                            useCase: null,
                        };
                        batchVerifySignedContext.verifySigned = that_1.verifySigned;
                        that_1.taskService.batchVerifySigned(batchVerifySignedContext).subscribe((/**
                         * @return {?}
                         */
                        function () {
                            /** @type {?} */
                            var verifyTasksNum = 0;
                            that_1.batchComplete(tasks, filterNum, verifyTasksNum).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            function (re) {
                                subject.next(re);
                            }));
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        function (error) {
                            /** @type {?} */
                            var otherTasks = tasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            function (t) { return verifyTasks.findIndex((/**
                             * @param {?} task
                             * @return {?}
                             */
                            function (task) { return task.id === t.id; })) === -1; }));
                            that_1.batchComplete(otherTasks, filterNum, verifyTasksNum).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            function (re) {
                                subject.next(re);
                            }));
                        }));
                    }
                    else {
                        that_1.notify.error(signedData[1]);
                        subject.next({ successSubmit: { result: false, isClose: false }, successHandleTasks: new Array() });
                    }
                }));
            }
            /** @type {?} */
            var msg = ['BatchDigitalSignature'];
            gspCA.getSignedMsg(msg);
        }
        else {
            this.batchComplete(tasks, filterNum, verifyTasksNum).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                subject.next(re);
            }));
        }
        return subject.asObservable();
    };
    /**
     * 真正的批量提交任务
     * @param tasks
     * @param filterNum
     * @param verifyTasksNum
     * @returns
     */
    /**
     * 真正的批量提交任务
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} verifyTasksNum
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchComplete = /**
     * 真正的批量提交任务
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} verifyTasksNum
     * @return {?}
     */
    function (tasks, filterNum, verifyTasksNum) {
        var _this = this;
        if (filterNum === void 0) { filterNum = 0; }
        var e_3, _a;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        /** @type {?} */
        var errorNum = 0;
        /** @type {?} */
        var successSubmit = { result: true, isClose: true };
        /** @type {?} */
        var successHandleTasks = new Array();
        /** @type {?} */
        var load = this.loadingService.show();
        var _loop_1 = function (task) {
            /** @type {?} */
            var context = new CompleteContext();
            context.workItemId = task.sourceId;
            context.conclusionValue = this_1.actionEntity.code;
            context.comment = this_1.comment;
            context.addendum = this_1.addendum;
            this_1.taskService.completeSimulate(context).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response && response.needInteraction === true) { // 需要交互
                    failedNum++;
                    if (successNum + failedNum + errorNum === tasks.length) {
                        load.close();
                        subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                        _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                    }
                }
                else { // 不需要交互
                    _this.taskService.complete(context).subscribe((/**
                     * @return {?}
                     */
                    function () {
                        successNum++;
                        successHandleTasks.push(task);
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                            _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }), (/**
                     * @return {?}
                     */
                    function () {
                        errorNum++;
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                            _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }));
                }
            }), (/**
             * @return {?}
             */
            function () {
                errorNum++;
                if (successNum + failedNum + errorNum === tasks.length) {
                    load.close();
                    subject.next({ successSubmit: successSubmit, successHandleTasks: successHandleTasks });
                    _this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                }
            }));
        };
        var this_1 = this;
        try {
            for (var tasks_1 = tslib_1.__values(tasks), tasks_1_1 = tasks_1.next(); !tasks_1_1.done; tasks_1_1 = tasks_1.next()) {
                var task = tasks_1_1.value;
                _loop_1(task);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (tasks_1_1 && !tasks_1_1.done && (_a = tasks_1.return)) _a.call(tasks_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return subject.asObservable();
    };
    /**
     * 批量已阅
     * @param tasks
     */
    /**
     * 批量已阅
     * @private
     * @param {?} tasks
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchReadTaskSubmit = /**
     * 批量已阅
     * @private
     * @param {?} tasks
     * @return {?}
     */
    function (tasks) {
        var _this = this;
        /** @type {?} */
        var subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var successNum_1 = 0;
            /** @type {?} */
            var errorNum_1 = 0;
            /** @type {?} */
            var load_1 = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            function (task) {
                /** @type {?} */
                var context = {
                    workItemId: task.sourceId,
                    comment: _this.comment,
                    addendum: _this.addendum,
                };
                _this.taskService.readTask(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    successNum_1++;
                    if (successNum_1 + errorNum_1 == tasks.length) {
                        load_1.close();
                        subject.next({ result: true, isClose: true });
                        _this.showBatchSubmitInfo(successNum_1, 0, errorNum_1, 0);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    errorNum_1++;
                    if (successNum_1 + errorNum_1 == tasks.length) {
                        load_1.close();
                        subject.next({ result: false, isClose: false });
                        _this.showBatchSubmitInfo(successNum_1, 0, errorNum_1, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    };
    /**
     * 批量取回
     * @param tasks
     */
    /**
     * 批量取回
     * @private
     * @param {?} tasks
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchRetrieveSubmit = /**
     * 批量取回
     * @private
     * @param {?} tasks
     * @return {?}
     */
    function (tasks) {
        var _this = this;
        /** @type {?} */
        var subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var successNum_2 = 0;
            /** @type {?} */
            var errorNum_2 = 0;
            /** @type {?} */
            var load_2 = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            function (task) {
                /** @type {?} */
                var context = {
                    workItemId: task.sourceId,
                    comment: _this.comment,
                    addendum: _this.addendum,
                };
                _this.taskService.retrieve(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    successNum_2++;
                    if (successNum_2 + errorNum_2 == tasks.length) {
                        load_2.close();
                        _this.showBatchSubmitInfo(successNum_2, 0, errorNum_2, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    errorNum_2++;
                    if (successNum_2 + errorNum_2 == tasks.length) {
                        load_2.close();
                        subject.next({ result: false, isClose: false });
                        _this.showBatchSubmitInfo(successNum_2, 0, errorNum_2, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    };
    /**
     * 批量领用
     */
    /**
     * 批量领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchClaimSubmit = /**
     * 批量领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    function (tasks) {
        var _this = this;
        /** @type {?} */
        var subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var successNum_3 = 0;
            /** @type {?} */
            var errorNum_3 = 0;
            /** @type {?} */
            var load_3 = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            function (task) {
                _this.taskService.claim(task.sourceId, _this.comment).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    successNum_3++;
                    if (successNum_3 + errorNum_3 == tasks.length) {
                        load_3.close();
                        _this.showBatchSubmitInfo(successNum_3, 0, errorNum_3, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    errorNum_3++;
                    if (successNum_3 + errorNum_3 == tasks.length) {
                        load_3.close();
                        subject.next({ result: false, isClose: false });
                        _this.showBatchSubmitInfo(successNum_3, 0, errorNum_3, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    };
    /**
     * 批量取消领用
     */
    /**
     * 批量取消领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchUnclaimSubmit = /**
     * 批量取消领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    function (tasks) {
        var _this = this;
        /** @type {?} */
        var subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var successNum_4 = 0;
            /** @type {?} */
            var errorNum_4 = 0;
            /** @type {?} */
            var load_4 = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            function (task) {
                _this.taskService.unClaim(task.sourceId, _this.comment).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    successNum_4++;
                    if (successNum_4 + errorNum_4 == tasks.length) {
                        load_4.close();
                        _this.showBatchSubmitInfo(successNum_4, 0, errorNum_4, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    errorNum_4++;
                    if (successNum_4 + errorNum_4 == tasks.length) {
                        load_4.close();
                        subject.next({ result: false, isClose: false });
                        _this.showBatchSubmitInfo(successNum_4, 0, errorNum_4, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    };
    /**
     * 批量移交
     * @param tasks 批量任务列表
     */
    /**
     * 批量移交
     * @private
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    TaskExecuteComponent.prototype.batchTransferSubmit = /**
     * 批量移交
     * @private
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    function (tasks) {
        var _this = this;
        /** @type {?} */
        var subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var successNum_5 = 0;
            /** @type {?} */
            var errorNum_5 = 0;
            /** @type {?} */
            var load_5 = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            function (task) {
                /** @type {?} */
                var context = {
                    workItemId: task.sourceId,
                    assignee: _this.selectedUsers[0],
                    comment: _this.comment,
                    addendum: _this.addendum,
                };
                _this.taskService.transfer(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    successNum_5++;
                    if (successNum_5 + errorNum_5 == tasks.length) {
                        load_5.close();
                        _this.showBatchSubmitInfo(successNum_5, 0, errorNum_5, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    errorNum_5++;
                    if (successNum_5 + errorNum_5 == tasks.length) {
                        load_5.close();
                        subject.next({ result: false, isClose: false });
                        _this.showBatchSubmitInfo(successNum_5, 0, errorNum_5, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    };
    /**
     * 批量提交提示信息
     * @param successNum 成功条数
     * @param failedNum 需要交互的条数
     * @param errorNum 执行报错的条数
     * @param verifyTasksNum 需要数字签名的条数
     */
    /**
     * 批量提交提示信息
     * @private
     * @param {?} successNum 成功条数
     * @param {?} failedNum 需要交互的条数
     * @param {?} errorNum 执行报错的条数
     * @param {?} verifyTasksNum 需要数字签名的条数
     * @return {?}
     */
    TaskExecuteComponent.prototype.showBatchSubmitInfo = /**
     * 批量提交提示信息
     * @private
     * @param {?} successNum 成功条数
     * @param {?} failedNum 需要交互的条数
     * @param {?} errorNum 执行报错的条数
     * @param {?} verifyTasksNum 需要数字签名的条数
     * @return {?}
     */
    function (successNum, failedNum, errorNum, verifyTasksNum) {
        /** @type {?} */
        var message = '';
        if (successNum && !failedNum && !errorNum && !verifyTasksNum) { // 批量全部成功
            this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
        }
        else { // 非全部成功
            successNum && (message += this.i18nService.getValue('batchSubmit.success') + ("\u3010" + successNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
            errorNum && (message += this.i18nService.getValue('batchSubmit.error') + ("\u3010" + errorNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
            failedNum && (message += this.i18nService.getValue('batchSubmit.failed') + ("\u3010" + failedNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
            verifyTasksNum && (message += this.i18nService.getValue('batchSubmit.validationFailed') + ("\u3010" + verifyTasksNum + "\u3011") + this.i18nService.getValue('batchSubmit.row'));
            message += this.i18nService.getValue('batchSubmit.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    };
    /**
     * @private
     * @param {?} events
     * @param {?} entities
     * @param {?} action
     * @param {?} handler
     * @param {?=} result
     * @return {?}
     */
    TaskExecuteComponent.prototype.executeBatchEvent = /**
     * @private
     * @param {?} events
     * @param {?} entities
     * @param {?} action
     * @param {?} handler
     * @param {?=} result
     * @return {?}
     */
    function (events, entities, action, handler, result) {
        var _this = this;
        if (this.injector) {
            if (events && events.length > 0 && entities && entities.length > 0) {
                /** @type {?} */
                var event_1 = events.shift();
                /** @type {?} */
                var url = event_1.eventImpl.split('#')[0];
                /** @type {?} */
                var func_1 = event_1.eventImpl.split('#')[1];
                System.import(url + '?v=' + new Date().getTime().toString())
                    .then((/**
                 * @param {?} moduleFactories
                 * @return {?}
                 */
                function (moduleFactories) {
                    /** @type {?} */
                    var moduleFactory = Object.values(moduleFactories)[0];
                    /** @type {?} */
                    var moduleRef = moduleFactory.create(_this.injector);
                    /** @type {?} */
                    var context = {
                        action: action,
                        taskList: entities,
                        origin: 'TaskCenter',
                        preEventResult: result
                    };
                    moduleRef.instance[func_1].apply(moduleRef.instance, [context]).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    function (re) {
                        if (re && re.result) {
                            _this.executeBatchEvent(events, entities, action, handler, re);
                        }
                        else {
                            handler(re);
                        }
                    }));
                }));
            }
            else {
                handler(result);
            }
        }
        else {
            handler(result);
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.assignSimulate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var simulateSubject = new SimulateSubject();
        this.ifAssignUser = true;
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        this.taskService.getAssigneeInfo(this.workItemId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        function (info) {
            _this.assignInfos = [{
                    selectedAssignees: info.selectedAssignees,
                    assigneeInfo: info.assigneeInfo,
                    assignees: info.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: info.activityDefinitionName,
                    activityDefinitionId: info.activityDefinitionId,
                    dependency: info.dependency,
                    anonymous: info.anonymous,
                    anonymousText: info.anonymousText,
                    resolved: info.resolved,
                }];
            simulateSubject.dialogHeight = _this.dialogHeight;
            simulateSubject.result = true;
            simulateSubject.showDialog = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            simulateSubject.result = false;
            simulateSubject.showDialog = false;
            subject.next(simulateSubject);
            _this.taskService.error(error);
        }));
        return subject.asObservable();
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.transferSimulate = /**
     * @private
     * @return {?}
     */
    function () {
        this.ifSelectUser = true;
        this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
        this.singleSelect = true;
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.addSignFrontSimulate = /**
     * @private
     * @return {?}
     */
    function () {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.addSignSimulate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 加签
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var simulateSubject = new SimulateSubject();
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase * 2;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.getAdhocConfig(this.workItemId).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            load.close();
            _this.addSign.showSignToSign = response.showSignToSign;
            _this.addSign.originMultiInstType = response.multiInstanceType;
            if (response.organization) {
                _this.filter.orgId = response.organization.id;
                _this.filter.withAllOrg = response.organization.includeChildren;
            }
            simulateSubject.dialogHeight = _this.dialogHeight;
            simulateSubject.showDialog = true;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            _this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.notifySimulate = /**
     * @private
     * @return {?}
     */
    function () {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.singleSelect = false;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    };
    //预解析组织、候选人范围
    //预解析组织、候选人范围
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.getOrganizationScope = 
    //预解析组织、候选人范围
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var simulateSubject = new SimulateSubject();
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.getOrganizationScope(this.workItemId, this.actionEntity.code).subscribe((/**
         * @param {?} orgList
         * @return {?}
         */
        function (orgList) {
            load.close();
            if (orgList.length) { // 全员会返回空数组
                _this.filter.orgId = orgList[0].id;
                _this.filter.withAllOrg = orgList[0].includeChildren;
            }
            simulateSubject.dialogHeight = _this.dialogHeight;
            simulateSubject.showDialog = true;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            _this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    };
    /**
     * 催办模拟
     */
    /**
     * 催办模拟
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.urgeHandleSimulate = /**
     * 催办模拟
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var simulateSubject = new SimulateSubject();
        this.ifSelectNode = false;
        this.ifSelectUser = false;
        this.ifAssignUser = false;
        this.ifUrgeType = true;
        this.commentPlaceHolder = this.i18nService.getValue('task.urgeComment');
        this.showCommonComment = false;
        this.showAttachment = false;
        this.showUrgeMessageSubject = true;
        this.showSign = false;
        this.dialogHeight += this.dialogHeightBase * 2;
        /** @type {?} */
        var load = this.loadingService.show();
        /** @type {?} */
        var context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
        this.taskService.urgeHandleSimulate(context).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            load.close();
            _this.urgeHandleResponse = re;
            if (re && re.urgeUsers && re.urgeUsers.length) {
                _this.urgeMessageSubject = re.urgeUsers[0].urgeInfos[0].urgeMessageSubject;
                _this.urgeMessageContent = re.urgeUsers[0].urgeInfos[0].urgeMessageContent;
                _this.subjectEditable = re.urgeUsers[0].urgeInfos[0].subjectEditable;
                _this.contentEditable = re.urgeUsers[0].urgeInfos[0].contentEditable;
                _this.addReminder = re.urgeUsers[0].urgeInfos[0].addReminder;
                /** @type {?} */
                var urgeUsers = re.urgeUsers;
                /** @type {?} */
                var assignInfo = new AssigneeInfo();
                urgeUsers.forEach((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) {
                    if (user.anonymousText) {
                        user.name = user.anonymousText;
                        user.code = '';
                        user.orgName = '';
                    }
                }));
                assignInfo.assigneeUsers = urgeUsers;
                assignInfo.selectAssignee = urgeUsers.length > 1 ? true : false;
                assignInfo.multiSelect = true;
                _this.assignInfos[0].assigneeInfo = assignInfo;
                _this.assignInfos[0].assignees = urgeUsers.length == 1 ? urgeUsers : [];
                simulateSubject.showDialog = true;
            }
            else {
                _this.notify.warning(_this.i18nService.getValue('task.noUrgeUsers'));
                simulateSubject.showDialog = false;
            }
            simulateSubject.dialogHeight = _this.dialogHeight;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            _this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    };
    /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     */
    /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.completeSimulate = /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var simulateSubject = new SimulateSubject();
        if (this.actionEntity.parameters && this.actionEntity.parameters.length) { // 是否允许加签
            this.actionEntity.parameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                if (p.code === 'AddSignBehindAble' && p.value === 'true') {
                    _this.ifSelectUser = true;
                    _this.selectUserText = _this.i18nService.getValue('task.addSign') + _this.i18nService.getValue('task.person');
                    _this.dialogHeight += _this.dialogHeightBase;
                    /** @type {?} */
                    var load_6 = _this.loadingService.show();
                    //获取加签范围
                    _this.taskService.getOrganizationScope(_this.workItemId, 'AddSignBehind').subscribe((/**
                     * @param {?} orgList
                     * @return {?}
                     */
                    function (orgList) {
                        load_6.close();
                        if (orgList.length) { // 全员会返回空数组
                            _this.filter.orgId = orgList[0].id;
                            _this.filter.withAllOrg = orgList[0].includeChildren;
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        load_6.close();
                        _this.taskService.error(error);
                    }));
                }
            }));
        }
        //驳回节点标签名称
        if (this.actionEntity.code === 'Back') {
            this.selectNodeText = this.actionEntity.name + this.i18nService.getValue('task.backNodeText');
        }
        /** @type {?} */
        var context = new CompleteContext();
        context.workItemId = this.workItemId;
        context.conclusionValue = this.actionEntity.code;
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.completeSimulate(context).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            load.close();
            _this.clearSimulateResult();
            _this.response = response;
            if (_this.task.priority) {
                _this.enablePriority = true;
                _this.dialogHeight += _this.dialogHeightBase;
            }
            _this.selectTargetAble = response.selectTargetAble;
            if (response.dynamicBackWardRuleConfig) {
                _this.showBackWardConfig.dynamicBackWardRuleAble = response.dynamicBackWardRuleConfig.dynamicBackWardRuleAble;
                _this.showBackWardConfig.displayPlaceholder = response.dynamicBackWardRuleConfig.resubmitEffect;
            }
            if (!response.simulationPaths.length) { // 模拟返回路径为空时
                _this.ifSelectNode = false;
                _this.ifAssignUser = false;
            }
            else { // 模拟返回了路径
                _this.ifSelectNode = true;
                _this.ifAssignUser = true;
                _this.dialogHeight += _this.dialogHeightBase * 2;
                _this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
                 * @param {?} path
                 * @return {?}
                 */
                function (path) { return ({
                    id: path.nodeInfoList.map((/**
                     * @param {?} node
                     * @return {?}
                     */
                    function (node) { return node.activityDefinitionId; })).join('，'),
                    name: path.nodeInfoList.map((/**
                     * @param {?} node
                     * @return {?}
                     */
                    function (node) { return node.activityDefinitionName; })).join('，')
                }); }));
                // 处理默认分支，无默认分支返回-1
                /** @type {?} */
                var defaultIndex = response.simulationPaths.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.default; }));
                //没有默认分支，且不允许选择目标节点时，取其中一个node展示（子流程参与者为空情况等）
                if (defaultIndex < 0 && !response.selectTargetAble) {
                    defaultIndex = response.simulationPaths.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return a.nodeInfoList && a.nodeInfoList.length > 0; }));
                }
                if (defaultIndex > -1) {
                    _this.selectedNodeId = _this.destNodes[defaultIndex].id;
                    _this.nodeDefaultValue = _this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : _this.destNodes[defaultIndex].name;
                    _this.setAssignInfo(response.simulationPaths[defaultIndex].nodeInfoList);
                    if (response.simulationPaths[defaultIndex].id.startsWith('EndEvent')) { //下一环节为结束时，不显示办理人员，弹框高度缩小
                        _this.dialogHeight = 340;
                    }
                }
            }
            //设置其他节点选人
            _this.setOtherAssignInfo(response);
            _this.dialogHeight = _this.showBackWardConfig.dynamicBackWardRuleAble ? _this.dialogHeight + _this.dialogHeightBase : _this.dialogHeight;
            simulateSubject.result = true;
            simulateSubject.showDialog = true;
            simulateSubject.dialogHeight = _this.dialogHeight;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            simulateSubject.result = false;
            simulateSubject.showDialog = false;
            subject.next(simulateSubject);
            _this.taskService.error(error);
        }));
        return subject.asObservable();
    };
    /**
     * 清空预解析结果
     */
    /**
     * 清空预解析结果
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.clearSimulateResult = /**
     * 清空预解析结果
     * @private
     * @return {?}
     */
    function () {
        this.assignInfos = [{
                // 重新预解析时清空
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
        this.destNodes = []; // 重新预解析时清空
        this.selectedNodeId = '';
    };
    /**
     * 设置当前指派信息帮助参数
     */
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    TaskExecuteComponent.prototype.setAssignInfo = /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    function (nodeInfoList) {
        var _this = this;
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        function (nodeId) {
            /** @type {?} */
            var node = nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionId === nodeId; }));
            if (node) {
                _this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved,
                });
            }
            else {
                _this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        }));
    };
    /**
     * 设置其他节点指派
     * @param response
     */
    /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    TaskExecuteComponent.prototype.setOtherAssignInfo = /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    function (response) {
        var _this = this;
        this.otherAssignInfos = [];
        /** @type {?} */
        var tmpOtherAssignInfos = [];
        /** @type {?} */
        var otherAssignNodes = response.otherAssignNodes;
        if (otherAssignNodes && otherAssignNodes.length) {
            otherAssignNodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                tmpOtherAssignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }));
            //保存最初的其他节点选人
            this.originOtherAssignInfos = tslib_1.__spread(tmpOtherAssignInfos);
            //其他节点与下一节点去重
            if (this.assignInfos && this.assignInfos.length) {
                tmpOtherAssignInfos = tmpOtherAssignInfos.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return _this.assignInfos.findIndex((/**
                 * @param {?} b
                 * @return {?}
                 */
                function (b) { return b.activityDefinitionId == a.activityDefinitionId; })) < 0; }));
            }
            this.otherAssignInfos = tmpOtherAssignInfos;
        }
    };
    /**
     * 选完节点后，重新设置其他节点指派
     * @param response
     */
    /**
     * 选完节点后，重新设置其他节点指派
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    TaskExecuteComponent.prototype.setOtherAssignInfoAgain = /**
     * 选完节点后，重新设置其他节点指派
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    function (nodeInfoList) {
        if (nodeInfoList && nodeInfoList.length) {
            this.otherAssignInfos = this.originOtherAssignInfos.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return nodeInfoList.findIndex((/**
             * @param {?} b
             * @return {?}
             */
            function (b) { return b.activityDefinitionId == a.activityDefinitionId; })) < 0; }));
        }
    };
    /**
     * 点击确定后方法
     */
    /**
     * 点击确定后方法
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.assignSubmit = /**
     * 点击确定后方法
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) {
            this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = {
                workItemId: this.workItemId,
                assigneeIds: this.assignInfos[0].assignees.map((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) { return user.id; })),
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.taskService.assignNextUsersByWorkItemId(context).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.i18nService.getValue('cueWords.operateSuccess'));
                _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.claimSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.claim(this.workItemId, this.comment).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.unClaimSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.unClaim(this.workItemId, this.comment).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success')),
                    _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.retrieveSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var retrieveContext = {
                workItemId: this.workItemId,
                comment: this.comment
            };
            this.taskService.retrieve(retrieveContext).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.transferSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = {
                workItemId: this.workItemId,
                assignee: this.selectedUsers[0],
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.transfer(context).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.commentSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.comment || this.comment.length === 0) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum
            };
            this.taskService.comment(context).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.submitResult.isClose = false;
                _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
            this.comment = '';
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.addSignFrontSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = {
                workItemId: this.workItemId,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.addSign(context).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next(_this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.addSignSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var payload = {
                workItemId: this.workItemId,
                comment: this.comment,
                conclusionValue: "Pass",
                signAssignees: this.selectedUsers,
                actionCode: "AddSignBehind",
                multiInstanceType: this.addSign.showMultiInstanceType ? this.addSign.curMultiInstType : this.addSign.originMultiInstType,
                counterSignRule: 'allPass',
                completedRule: 'all',
                allowSignToSign: this.addSign.allowSignToSIgn,
                activityName: '',
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            /** @type {?} */
            var load_7 = this.loadingService.show();
            this.taskService.adhocAssignee(payload).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next({ result: true, isClose: true });
                load_7.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                load_7.close();
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.readSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                hideComment: this.hideComment
            };
            this.taskService.readTask(context).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next({ result: true, isClose: true });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.taskService.error(error);
                _this.subject.next({ result: false, isClose: false });
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.notifySubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                priority: this.selectedPriority
            };
            this.taskService.addSign(context).subscribe((/**
             * @return {?}
             */
            function () {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next({ result: true, isClose: false });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * 催办提交
     */
    /**
     * 催办提交
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.urgeHandleSubmit = /**
     * 催办提交
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleResponse.urgeUsers || !this.urgeHandleResponse.urgeUsers.length) { //没有符合条件的催办用户
            this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) { //没有选人
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.i18nService.getValue('task.receiver'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageSubject) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeSubject'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageContent) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeContent'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            var context = new UrgeHandleContext();
            context.procInstId = this.processInstanceId;
            context.urgeUsers = this.urgeHandleResponse.urgeUsers.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return _this.assignInfos[0].assignees.some((/**
             * @param {?} b
             * @return {?}
             */
            function (b) { return b.id == a.id; })); }));
            context.urgeMessageSubject = this.urgeHandleComponent.urgeMessageSubject;
            context.urgeMessageContent = this.urgeHandleComponent.urgeMessageContent;
            context.addReminder = this.addReminder;
            /** @type {?} */
            var load_8 = this.loadingService.show();
            this.taskService.urgeHandle(context).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                _this.subject.next({ result: true, isClose: true });
                load_8.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                load_8.close();
                _this.subject.next({ result: false, isClose: false });
                _this.taskService.error(error);
            }));
        }
    };
    /**
     * 取消征询提交
     */
    /**
     * 取消征询提交
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.cancelConsultSubmit = /**
     * 取消征询提交
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var context = new WorkItemExecuteParam();
        context.workItemId = this.workItemId;
        context.comment = this.comment;
        context.addendum = this.addendum;
        /** @type {?} */
        var load = this.loadingService.show();
        this.taskService.cancelConsult(context).subscribe((/**
         * @return {?}
         */
        function () {
            load.close();
            _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
            _this.subject.next({ result: true, isClose: true });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            load.close();
            _this.subject.next({ result: false, isClose: false });
            _this.taskService.error(error);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TaskExecuteComponent.prototype.completeSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        // 通过、驳回、其他第三方动作
        /** @type {?} */
        var context = {
            workItemId: this.workItemId,
            conclusionValue: this.actionEntity.code,
            comment: this.comment,
            signAssignees: this.selectedUsers,
            nextFlowNodes: [],
            otherAssignNodes: [],
            addendum: this.addendum,
            //动态驳回规则
            dynamicBackWardRule: this.showBackWardConfig.dynamicBackWardRuleAble ? this.showBackWardConfig.displayPlaceholder : '',
            priority: this.selectedPriority
        };
        if (context.signAssignees.length || !this.response || !this.response.simulationPaths.length) { // 加签 or 仿真返回为空，直接往下走
            this.completeTask(context);
        }
        else {
            if (this.selectedNodeId) { // 加签时，选择下一环节被禁用，destNodeId为undefined
                // 加签时，选择下一环节被禁用，destNodeId为undefined
                /** @type {?} */
                var nextFlowNodes = [];
                /** @type {?} */
                var nodes = this.selectedNodeId.split('，');
                for (var i = 0; i < nodes.length; i++) {
                    /** @type {?} */
                    var nextFlowNode = {
                        activityDefinitionId: nodes[i],
                        activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                        dependency: this.assignInfos[i].dependency,
                        selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: this.assignInfos[i].anonymous,
                        anonymousText: this.assignInfos[i].anonymousText
                    };
                    //节点找不到人，且异常提示时，并行网关暂不处理
                    if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                        if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                            /** @type {?} */
                            var str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                            this.notify.warning(str);
                            this.subject.next({ result: false, isClose: false });
                            return;
                        }
                    }
                    nextFlowNodes.push(nextFlowNode);
                }
                context.nextFlowNodes = nextFlowNodes;
            }
            //其他节点指派信息
            if (this.otherAssignInfos && this.otherAssignInfos.length) {
                for (var i = 0; i < this.otherAssignInfos.length; i++) {
                    /** @type {?} */
                    var nextFlowNode = {
                        activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                        activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                        dependency: this.otherAssignInfos[i].dependency,
                        selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: false,
                        anonymousText: ''
                    };
                    context.otherAssignNodes.push(nextFlowNode);
                }
            }
            if (this.response.selectTargetAble && this.destNodes.length > 1 && context.nextFlowNodes.length <= 0) { // 用户没选择跳转节点，不允许提交
                this.notify.warning(this.i18nService.getValue('cueWords.selectNode'));
                this.subject.next({ result: false, isClose: false });
            }
            else if (this.assignInfos.filter((/**
             * @param {?} info
             * @return {?}
             */
            function (info) { return info.assigneeInfo && info.assigneeInfo.selectAssignee && !info.assignees.length; })).length) {
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
                this.subject.next({ result: false, isClose: false });
            }
            else {
                this.completeTask(context);
            }
        }
    };
    /**
     * @private
     * @param {?} completeContext
     * @return {?}
     */
    TaskExecuteComponent.prototype.completeTask = /**
     * @private
     * @param {?} completeContext
     * @return {?}
     */
    function (completeContext) {
        var _this = this;
        /** @type {?} */
        var attachmentNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) { return entity.code === 'AttachmentNecessary'; }));
        /** @type {?} */
        var certificationNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) { return entity.code === 'CertificationNecessary'; }));
        /** @type {?} */
        var commentNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) { return entity.code === 'CommentNecessary'; }));
        if (attachmentNecessary && attachmentNecessary.value === 'true' && (!completeContext.addendum.attachment || completeContext.addendum.attachment === '[]')) {
            this.notify.warning(this.i18nService.getValue('cueWords.attachmentsRequired'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (commentNecessary && commentNecessary.value === 'true' && !completeContext.comment) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            if (certificationNecessary && certificationNecessary.value === 'true') {
                this.verifySignature((/**
                 * @return {?}
                 */
                function () {
                    completeContext.verifySigned = _this.verifySigned;
                    _this.taskComplete(completeContext);
                }));
                /** @type {?} */
                var msg = [this.workItemId];
                gspCA.getSignedMsg(msg);
            }
            else {
                this.taskComplete(completeContext);
            }
        }
    };
    /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    TaskExecuteComponent.prototype.executeFormActionsAfterCompleteTask = /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    function (handler) {
        var _this = this;
        // 如果表单注册了事件
        if (this.origin == ActionOrigin.TaskForm && this.ifRegistered && this.formObject) {
            /** @type {?} */
            var postActions = this.billMethodConfigs.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.action === _this.actionEntity.code && action.executionTime === 'Post'; })).sort((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            function (x, y) { return x.sortOrder - y.sortOrder; }));
            if (postActions && postActions.length) {
                this.executePostFormActions(postActions, handler);
            }
        }
        else {
            handler();
        }
    };
    /**
     * @private
     * @param {?} formActions
     * @param {?} hander
     * @return {?}
     */
    TaskExecuteComponent.prototype.executePostFormActions = /**
     * @private
     * @param {?} formActions
     * @param {?} hander
     * @return {?}
     */
    function (formActions, hander) {
        var _this = this;
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                /** @type {?} */
                var data = re.data.data;
                if (data.result === true) {
                    _this.executePostFormActions(formActions, hander);
                }
                else {
                    _this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批后表单操作执行失败！');
                }
            }));
            // 执行表单动作
            /** @type {?} */
            var formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            hander();
        }
    };
    //帮助选人后
    //帮助选人后
    /**
     * @param {?} data
     * @return {?}
     */
    TaskExecuteComponent.prototype.afterConfirmForTransfer = 
    //帮助选人后
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length) {
            this.selectedUsers = data.map((/**
             * @param {?} user
             * @return {?}
             */
            function (user) { return user.id; }));
            this.selectedUserNgModule = data.map((/**
             * @param {?} user
             * @return {?}
             */
            function (user) { return user.name; })).join();
        }
        else {
            this.selectedUsers = [];
        }
        if (this.actionEntity.code == 'AddSign' && this.addSign.originMultiInstType == MultiInstanceType.Preempt.toString() && this.selectedUsers.length > 1) {
            this.addSign.showMultiInstanceType = true;
        }
        else {
            this.addSign.showMultiInstanceType = false;
        }
    };
    /**
     * @return {?}
     */
    TaskExecuteComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.submitResult.isClose = false;
        this.subject.next(this.submitResult);
        return this.subject.asObservable();
    };
    /**
     * @return {?}
     */
    TaskExecuteComponent.prototype.getSubject = /**
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    // 下一环节选择后事件
    // 下一环节选择后事件
    /**
     * @param {?} data
     * @return {?}
     */
    TaskExecuteComponent.prototype.selectNodeChange = 
    // 下一环节选择后事件
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.selectedNodeId = data && data.data && data.data.id;
        if (this.response.simulationPaths[data.index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.resolved === true; }))) { // 已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index].nodeInfoList);
            this.setOtherAssignInfoAgain(this.response.simulationPaths[data.index].nodeInfoList);
        }
        else {
            /** @type {?} */
            var nodeIds = this.selectedNodeId.split('，').map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return "\"" + node + "\""; })).join();
            // 注意一个中文逗号一个英文逗号
            /** @type {?} */
            var load_9 = this.loadingService.show();
            this.taskService.getSimulationAssigneeInfo(this.workItemId, nodeIds).subscribe((/**
             * @param {?} nodeInfoList
             * @return {?}
             */
            function (nodeInfoList) {
                load_9.close();
                _this.setAssignInfo(nodeInfoList);
                _this.setOtherAssignInfoAgain(nodeInfoList);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                load_9.close();
                _this.taskService.error(error);
            }));
        }
    };
    // 下一环节清空后事件
    // 下一环节清空后事件
    /**
     * @return {?}
     */
    TaskExecuteComponent.prototype.selectNodeClear = 
    // 下一环节清空后事件
    /**
     * @return {?}
     */
    function () {
        this.selectedNodeId = null;
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
    };
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    TaskExecuteComponent.prototype.afterConfirmForAssign = /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (data, index) {
        this.assignInfos[index].assignees = data;
    };
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    TaskExecuteComponent.prototype.afterConfirmForOtherAssign = /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (data, index) {
        this.otherAssignInfos[index].assignees = data;
    };
    /**
     * 上传附件后事件
     */
    /**
     * 上传附件后事件
     * @param {?} data
     * @return {?}
     */
    TaskExecuteComponent.prototype.addAttachment = /**
     * 上传附件后事件
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.addendum.attachment = JSON.stringify(data);
    };
    /**
     * 手写签名后事件
     */
    /**
     * 手写签名后事件
     * @param {?} data
     * @return {?}
     */
    TaskExecuteComponent.prototype.addSignature = /**
     * 手写签名后事件
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            /** @type {?} */
            var signInfo = {
                id: data,
                waterMarking: null
            };
            this.addendum.signature = JSON.stringify(signInfo);
        }
        else {
            this.addendum.signature = '';
        }
    };
    // 以服务方式打开组件时，左右加上padding
    // 以服务方式打开组件时，左右加上padding
    /**
     * @return {?}
     */
    TaskExecuteComponent.prototype.addPadding = 
    // 以服务方式打开组件时，左右加上padding
    /**
     * @return {?}
     */
    function () {
        this.cls = 'f-utils-fill-flex-column h-100 px-4 py-2';
    };
    /**
     * @private
     * @param {?} workItemId
     * @param {?} action
     * @return {?}
     */
    TaskExecuteComponent.prototype.sendMessage = /**
     * @private
     * @param {?} workItemId
     * @param {?} action
     * @return {?}
     */
    function (workItemId, action) {
        if (this.iframe) {
            /** @type {?} */
            var iframeWindow = this.iframe.nativeElement.contentWindow;
            /** @type {?} */
            var message = {
                target: workItemId,
                data: {
                    command: action.method,
                    arguments: action.methodParameters
                }
            };
            iframeWindow.postMessage(message, this.POST_MESSAGE_TARGET);
        }
        else {
            this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
            this.notify.warning('请等待表单加载完成后再试');
        }
    };
    // 提交审批前的数字签名及验签
    // 提交审批前的数字签名及验签
    /**
     * @param {?} handler
     * @return {?}
     */
    TaskExecuteComponent.prototype.verifySignature = 
    // 提交审批前的数字签名及验签
    /**
     * @param {?} handler
     * @return {?}
     */
    function (handler) {
        /** @type {?} */
        var that = this;
        if (((/** @type {?} */ (window))).gspframeworkService &&
            ((/** @type {?} */ (window))).gspframeworkService.rtf) {
            ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', (/**
             * @param {?} signedData
             * @return {?}
             */
            function signMsgOver(signedData) {
                if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                    // 证书对象
                    /** @type {?} */
                    var cert = gspCA.getCurCert();
                    // 验签参数
                    that.verifySigned = {
                        // 要验证的证书base64编码的字符流(certkey)
                        certBase64Info: gspCA.getCertBase64(cert),
                        // 签名原信息
                        msg: [that.workItemId],
                        // 要签名后信息
                        signedmsg: signedData[1][0],
                        // 用户使用场景，目前未使用，可以为空
                        useCase: null,
                    };
                    handler();
                }
                else {
                    that.loadingService.close();
                    that.subject.next({ result: false, isClose: false });
                    that.notify.error(signedData[1]);
                    throw new Error(signedData[1]);
                }
            }));
        }
    };
    // 通过、驳回、其他第三方动作
    // 通过、驳回、其他第三方动作
    /**
     * @param {?} completeContext
     * @return {?}
     */
    TaskExecuteComponent.prototype.taskComplete = 
    // 通过、驳回、其他第三方动作
    /**
     * @param {?} completeContext
     * @return {?}
     */
    function (completeContext) {
        var _this = this;
        this.taskService.complete(completeContext).subscribe((/**
         * @param {?} cr
         * @return {?}
         */
        function (cr) {
            _this.executeFormActionsAfterCompleteTask((/**
             * @return {?}
             */
            function () {
                if (cr.needInteraction) { // 通过后指派场景
                    if (_this.origin == ActionOrigin.TaskCenter) {
                        _this.subject.next({ result: true, isClose: false });
                    }
                    else {
                        _this.subject.next({ result: false, isClose: false }); //关掉loading
                    }
                    _this.notify.info(_this.i18nService.getValue('cueWords.select')
                        + '【' + cr.nextFlowNodes[0].activityDefinitionName + '】'
                        + _this.i18nService.getValue('cueWords.processor'));
                    /** @type {?} */
                    var task = new TaskEntity();
                    /** @type {?} */
                    var action = new TaskAction();
                    task.sourceId = cr.nextFlowNodes[0].assigneeInfo.workItemId;
                    action.code = 'AssignUser';
                    action.name = _this.i18nService.getValue('cueWords.assignUser');
                    _this.handlerService.execute(task, action).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    function (re) {
                        if (re) {
                            _this.subject.next({ result: true, isClose: true });
                        }
                    }));
                }
                else {
                    if (completeContext.conclusionValue === 'Pass') {
                        _this.notify.success(_this.i18nService.getValue('cueWords.successPass'));
                    }
                    else if (completeContext.conclusionValue === 'Back') {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                    }
                    else {
                        _this.notify.success(_this.actionEntity.name + _this.i18nService.getValue('static.success'));
                    }
                    _this.subject.next({ result: true, isClose: true });
                }
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.subject.next({ result: false, isClose: false });
            _this.taskService.error(error);
        }));
    };
    /**
     * 消息监听处理方法
     */
    TaskExecuteComponent.func = null;
    TaskExecuteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-task-execute',
                    template: "<!-- \u6279\u91CF\u5BA1\u6279\u65F6\u63D0\u793A -->\r\n<div *ngIf=\"taskList?.length > 20\" class=\"wf-task-batch-message\">\r\n  <span class=\"f-icon f-icon-info\"></span>\r\n  <span class=\"wf-task-batch-selected\">{{\r\n    \"batchSubmit.selected\" | translate\r\n  }}</span>\r\n  <span class=\"wf-task-batch-rows\">{{ taskList.length }}</span>\r\n  <span>{{ \"batchSubmit.item\" | translate }}</span>\r\n  <span>{{ \"batchSubmit.time\" | translate }}</span>\r\n  <span class=\"wf-task-batch-time\">{{ batchSecond }}</span>\r\n  <span>{{ \"batchSubmit.second\" | translate }}</span>\r\n</div>\r\n\r\n<!-- \u610F\u89C1\u8F93\u5165 -->\r\n<wf-comment\r\n  *ngIf=\"!showUrgeMessageSubject\"\r\n  class=\"w-100\"\r\n  name=\"comment\"\r\n  [(ngModel)]=\"comment\"\r\n  [defaultComment]=\"defaultComment\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [processInstanceId]=\"processInstanceId\"\r\n  [showAttachment]=\"showAttachment\"\r\n  [showCommonComment]=\"showCommonComment\"\r\n  [showSign]=\"showSign\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n  [TaskCenterConfig]=\"configList\"\r\n  [curUserId]=\"\r\n    task ? task.owner : taskList && taskList.length ? taskList[0].owner : ''\r\n  \"\r\n  [taskOrigin]=\"origin\"\r\n  (attachment)=\"addAttachment($event)\"\r\n  (signature)=\"addSignature($event)\"\r\n>\r\n</wf-comment>\r\n\r\n<!--\u50AC\u529E\u6D88\u606F-->\r\n<urge-handle\r\n  *ngIf=\"showUrgeMessageSubject\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [showMessageSubject]=\"showUrgeMessageSubject\"\r\n  [urgeMessageSubject]=\"urgeMessageSubject\"\r\n  [urgeMessageContent]=\"urgeMessageContent\"\r\n  [subjectEditable]=\"subjectEditable\"\r\n  [contentEditable]=\"contentEditable\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n>\r\n</urge-handle>\r\n\r\n<!-- \u5BA1\u6279\u8BB0\u5F55\u9690\u85CF\uFF08\u4EC5\u5BF9\u81EA\u5DF1\u53EF\u89C1\uFF09 -->\r\n<div\r\n  *ngIf=\"ifShowCommentToMySelf\"\r\n  class=\"custom-control custom-checkbox custom-control-inline\"\r\n  style=\"margin-bottom: 10px\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"custom-control-input\"\r\n    [(ngModel)]=\"hideComment\"\r\n    id=\"taskcenterhidecomment\"\r\n    name=\"taskcenterhidecomment\"\r\n  />\r\n  <label class=\"custom-control-label\" for=\"taskcenterhidecomment\">{{\r\n    \"static.hideComment\" | translate\r\n  }}</label>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282 -->\r\n<div *ngIf=\"ifSelectNode\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">{{ selectNodeText }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"nodeDefaultValue\"\r\n      [data]=\"destNodes\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'id'\"\r\n      [idField]=\"'id'\"\r\n      [readonly]=\"selectTargetAble && destNodes.length > 1 ? false : true\"\r\n      (selectChange)=\"selectNodeChange($event)\"\r\n      (clear)=\"selectNodeClear()\"\r\n      [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"ifAssignUser || ifUrgeType\">\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"\r\n      assignInfos.length > 1\r\n        ? assignInfo.activityDefinitionName\r\n        : ifUrgeType\r\n        ? ('task.urgeText' | translate)\r\n        : ''\r\n    \"\r\n    [ifShowBlank]=\"false\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u79FB\u4EA4\u3001\u52A0\u7B7E\u3001\u5F81\u8BE2\u3001\u77E5\u4F1A \u4EBA\u5458\u5E2E\u52A9-->\r\n<lib-assignee-info\r\n  *ngIf=\"ifSelectUser\"\r\n  [activityName]=\"selectUserText\"\r\n  [singleSelect]=\"singleSelect\"\r\n  [filter]=\"filter\"\r\n  [disabled]=\"false\"\r\n  [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n  [allowGlobalAssign]=\"true\"\r\n  [wfContext]=\"wfContext\"\r\n  (afterConfirm)=\"afterConfirmForTransfer($event)\"\r\n>\r\n</lib-assignee-info>\r\n\r\n<!-- \u52A0\u7B7E -->\r\n<!-- \u5BA1\u6279\u7B56\u7565 -->\r\n<div *ngIf=\"addSign.showMultiInstanceType\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.multiInstanceType\" | translate }}\r\n  </div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-radiogroup\r\n      [(ngModel)]=\"addSign.curMultiInstType\"\r\n      [data]=\"addSign.multiInstanceType\"\r\n      [horizontal]=\"true\"\r\n    >\r\n    </farris-radiogroup>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5141\u8BB8\u518D\u52A0\u7B7E -->\r\n<div *ngIf=\"addSign.showSignToSign\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.allowSignToSign\" | translate }}{{ actionEntity.name }}\r\n  </div>\r\n  <farris-switch [(ngModel)]=\"addSign.allowSignToSIgn\" [size]=\"'small'\">\r\n  </farris-switch>\r\n</div>\r\n\r\n<!-- \u9A73\u56DE\u540E\u518D\u6B21\u63D0\u4EA4\u65F6\u76F4\u63A5\u56DE\u5230\u672C\u8282\u70B9 -->\r\n<div\r\n  *ngIf=\"showBackWardConfig.dynamicBackWardRuleAble\"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">{{ showBackWardConfig.title }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"showBackWardConfig.displayPlaceholder\"\r\n      [data]=\"showBackWardConfig.backWardRules\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'value'\"\r\n      [idField]=\"'value'\"\r\n      [readonly]=\"false\"\r\n      [enableClear]=\"false\"\r\n      [placeholder]=\"showBackWardConfig.displayPlaceholder\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u7D27\u6025\u7A0B\u5EA6\uFF0C\u4E0B\u4E00\u73AF\u8282\u4E3A\u7ED3\u675F\u65F6\u4E0D\u5C55\u793A -->\r\n<div\r\n  *ngIf=\"\r\n    task?.priority &&\r\n    enablePriority &&\r\n    task.priorityItemList &&\r\n    !selectedNodeId?.startsWith('EndEvent')\r\n  \"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"task.priority\" | translate }}\r\n  </div>\r\n  <farris-radiogroup\r\n    [(ngModel)]=\"selectedPriority\"\r\n    [data]=\"task.priorityItemList\"\r\n    [horizontal]=\"true\"\r\n  >\r\n  </farris-radiogroup>\r\n</div>\r\n\r\n<!-- \u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"otherAssignInfos?.length\">\r\n  <div class=\"wf-task-splitter\">\r\n    {{ \"startProcess.otherNodesAssign\" | translate\r\n    }}<span class=\"wf-task-splitter-line\"></span>\r\n  </div>\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"assignInfo.activityDefinitionName\"\r\n    [ifShowBlank]=\"true\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForOtherAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #taskExecuteButtons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"submit()\"\r\n    [disabled]=\"submitDisable\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                    styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
                }] }
    ];
    /** @nocollapse */
    TaskExecuteComponent.ctorParameters = function () { return [
        { type: TaskService },
        { type: NotifyService },
        { type: I18nService },
        { type: WfTaskHandlerService },
        { type: LoadingService },
        { type: MessagerService },
        { type: Injector }
    ]; };
    TaskExecuteComponent.propDecorators = {
        buttons: [{ type: ViewChild, args: ['taskExecuteButtons',] }],
        sysUserHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
        urgeHandleComponent: [{ type: ViewChild, args: [UrgeHandleComponent,] }],
        cls: [{ type: HostBinding, args: ['class',] }]
    };
    return TaskExecuteComponent;
}(ActionBaseImplComponent));
export { TaskExecuteComponent };
if (false) {
    /**
     * 消息监听处理方法
     * @type {?}
     * @private
     */
    TaskExecuteComponent.func;
    /** @type {?} */
    TaskExecuteComponent.prototype.task;
    /** @type {?} */
    TaskExecuteComponent.prototype.workItemId;
    /** @type {?} */
    TaskExecuteComponent.prototype.processInstanceId;
    /** @type {?} */
    TaskExecuteComponent.prototype.actionEntity;
    /** @type {?} */
    TaskExecuteComponent.prototype.comment;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.MAX_COMMENT_LENGTH;
    /** @type {?} */
    TaskExecuteComponent.prototype.defaultComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.wfCacheComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.currentDefaultValue;
    /** @type {?} */
    TaskExecuteComponent.prototype.taskList;
    /** @type {?} */
    TaskExecuteComponent.prototype.batchSecond;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifSelectNode;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifSelectUser;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifAssignUser;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifUrgeType;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifShowCommentToMySelf;
    /** @type {?} */
    TaskExecuteComponent.prototype.singleSelect;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectTargetAble;
    /** @type {?} */
    TaskExecuteComponent.prototype.hideComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.filter;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedUsers;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedUserNgModule;
    /** @type {?} */
    TaskExecuteComponent.prototype.buttons;
    /** @type {?} */
    TaskExecuteComponent.prototype.sysUserHelp;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeHandleComponent;
    /** @type {?} */
    TaskExecuteComponent.prototype.subject;
    /** @type {?} */
    TaskExecuteComponent.prototype.submitResult;
    /** @type {?} */
    TaskExecuteComponent.prototype.bindingData;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectNodeText;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectUserText;
    /** @type {?} */
    TaskExecuteComponent.prototype.commentPlaceHolder;
    /** @type {?} */
    TaskExecuteComponent.prototype.showAttachment;
    /** @type {?} */
    TaskExecuteComponent.prototype.showSign;
    /** @type {?} */
    TaskExecuteComponent.prototype.showCommonComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.textAreaHeight;
    /** @type {?} */
    TaskExecuteComponent.prototype.billMethodConfigs;
    /** @type {?} */
    TaskExecuteComponent.prototype.nodeDefaultValue;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedNodeId;
    /** @type {?} */
    TaskExecuteComponent.prototype.destNodes;
    /** @type {?} */
    TaskExecuteComponent.prototype.dialogHeight;
    /** @type {?} */
    TaskExecuteComponent.prototype.dialogHeightBase;
    /** @type {?} */
    TaskExecuteComponent.prototype.addendum;
    /** @type {?} */
    TaskExecuteComponent.prototype.groupIcon;
    /** @type {?} */
    TaskExecuteComponent.prototype.assignInfos;
    /** @type {?} */
    TaskExecuteComponent.prototype.otherAssignInfos;
    /** @type {?} */
    TaskExecuteComponent.prototype.originOtherAssignInfos;
    /** @type {?} */
    TaskExecuteComponent.prototype.response;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeHandleResponse;
    /** @type {?} */
    TaskExecuteComponent.prototype.formObject;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifRegistered;
    /** @type {?} */
    TaskExecuteComponent.prototype.configList;
    /** @type {?} */
    TaskExecuteComponent.prototype.verifySigned;
    /** @type {?} */
    TaskExecuteComponent.prototype.submitDisable;
    /** @type {?} */
    TaskExecuteComponent.prototype.addSign;
    /** @type {?} */
    TaskExecuteComponent.prototype.showBackWardConfig;
    /**
     * 任务催办时使用
     * @type {?}
     */
    TaskExecuteComponent.prototype.showUrgeMessageSubject;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeMessageSubject;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeMessageContent;
    /** @type {?} */
    TaskExecuteComponent.prototype.addReminder;
    /** @type {?} */
    TaskExecuteComponent.prototype.subjectEditable;
    /** @type {?} */
    TaskExecuteComponent.prototype.contentEditable;
    /** @type {?} */
    TaskExecuteComponent.prototype.wfContext;
    /** @type {?} */
    TaskExecuteComponent.prototype.enablePriority;
    /** @type {?} */
    TaskExecuteComponent.prototype.cls;
    /** @type {?} */
    TaskExecuteComponent.prototype.POST_MESSAGE_TARGET;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.messageSubject;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.language;
    /** @type {?} */
    TaskExecuteComponent.prototype.actionToken;
    /** @type {?} */
    TaskExecuteComponent.prototype.simulateToken;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedPriority;
    /**
     * 监听事件处理
     * @type {?}
     */
    TaskExecuteComponent.prototype.eventHandler;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.i18nService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.handlerService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,