/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { forkJoin, Subject } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
var TaskService = /** @class */ (function () {
    function TaskService(httpSvc, message) {
        this.httpSvc = httpSvc;
        this.message = message;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    TaskService.prototype.getUsersByIds = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.httpSvc.get(pathUrl + ("/" + id) + "?mode=0002"); })));
    };
    /**
     * 获取工作项操作列表
     */
    /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    TaskService.prototype.getWorkItemActions = /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    function (workItemId) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/actions";
        return this.httpSvc.get(url);
    };
    /**
     * 执行审批操作
     * @param context 执行审批上下文
     */
    /**
     * 执行审批操作
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    TaskService.prototype.complete = /**
     * 执行审批操作
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/complete";
        return this.httpSvc.post(url, context);
    };
    /**
     * 执行审批预解析
     * @param context 执行审批上下文
     */
    /**
     * 执行审批预解析
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    TaskService.prototype.completeSimulate = /**
     * 执行审批预解析
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/complete-simulation";
        return this.httpSvc.post(url, context);
    };
    /**
     * 获取跳转活动信息
     * @param workItemId 工作项Id
     * @param action 动作编号
     */
    /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    TaskService.prototype.getDestinationScope = /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    function (workItemId, action) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/nextNodes/" + action;
        return this.httpSvc.get(url);
    };
    /**
     * 根据节点ID获取指定参与者的结果
     * @param workItemId
     * @param nodeId 说明：nodeIds=["node1","node2",···]
     * @returns 指派信息的数组 re: FlowNodeInfo[]
     */
    /**
     * 根据节点ID获取指定参与者的结果
     * @param {?} workItemId
     * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
     * @return {?} 指派信息的数组 re: FlowNodeInfo[]
     */
    TaskService.prototype.getSimulationAssigneeInfo = /**
     * 根据节点ID获取指定参与者的结果
     * @param {?} workItemId
     * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
     * @return {?} 指派信息的数组 re: FlowNodeInfo[]
     */
    function (workItemId, nodeId) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/simulation-assigneeInfo?nodeIds=[" + nodeId + "]";
        return this.httpSvc.get(url);
    };
    /**
     * 执行征询、知会
     * @param context 上下文
     */
    /**
     * 执行征询、知会
     * @param {?} context 上下文
     * @return {?}
     */
    TaskService.prototype.addSign = /**
     * 执行征询、知会
     * @param {?} context 上下文
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/counterSignAdd";
        return this.httpSvc.post(url, context);
    };
    /**
     * 已阅
     * @param context 参数
     */
    /**
     * 已阅
     * @param {?} context 参数
     * @return {?}
     */
    TaskService.prototype.readTask = /**
     * 已阅
     * @param {?} context 参数
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/read";
        return this.httpSvc.post(url, context);
    };
    /**
     * 查询单据信息（方法名不要动，其他地方有引用）
     * @param workItemId 工作项Id
     */
    /**
     * 查询单据信息（方法名不要动，其他地方有引用）
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    TaskService.prototype.getTaskFormInfo = /**
     * 查询单据信息（方法名不要动，其他地方有引用）
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    function (workItemId) {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var cacheCode = "gspWfTaskFormInfo" + workItemId;
        /** @type {?} */
        var taskForm = localStorage.getItem(cacheCode);
        if (taskForm) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                subject.next(JSON.parse(taskForm));
            }), 10);
        }
        else {
            /** @type {?} */
            var formParUrl = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/formInfo";
            this.httpSvc.get(formParUrl).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                subject.next(re);
                localStorage.setItem(cacheCode, JSON.stringify(re));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    };
    /**
     * 获取指派信息
     * @param taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     */
    /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     * @return {?}
     */
    TaskService.prototype.getAssigneeInfo = /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     * @return {?}
     */
    function (taskId) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/" + taskId + "/assigneeInfo";
        return this.httpSvc.get(url);
    };
    /**
     * 获取加签移交范围设置
     * @param workItemId
     * @param actionCode
     */
    /**
     * 获取加签移交范围设置
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    TaskService.prototype.getOrganizationScope = /**
     * 获取加签移交范围设置
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    function (workItemId, actionCode) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/organizationScope/" + actionCode;
        return this.httpSvc.get(url);
    };
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param procInstId 流程实例id
     * @param state 任务状态 2或5
     */
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param {?} procInstId 流程实例id
     * @param {?} state 任务状态 2或5
     * @return {?}
     */
    TaskService.prototype.getTaskByProcInstId = /**
     * 根据流程实例ID和任务状态办理任务
     * @param {?} procInstId 流程实例id
     * @param {?} state 任务状态 2或5
     * @return {?}
     */
    function (procInstId, state) {
        /** @type {?} */
        var url = "/api/runtime/task/v1.0/tasks/processInstanceId?procInstId=" + procInstId + "&state=" + state;
        return this.httpSvc.get(url);
    };
    /**
     * 根据workitemID获取任务实体
     * @param workItemId
     */
    /**
     * 根据workitemID获取任务实体
     * @param {?} workItemId
     * @return {?}
     */
    TaskService.prototype.getTaskByWorkItemId = /**
     * 根据workitemID获取任务实体
     * @param {?} workItemId
     * @return {?}
     */
    function (workItemId) {
        /** @type {?} */
        var url = "/api/runtime/task/v1.0/tasks/sourceId/" + workItemId;
        return this.httpSvc.get(url);
    };
    /**
     * 根据工作项ID指派任务
     * @param assigneesPa 指派参数
     */
    /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    TaskService.prototype.assignNextUsersByWorkItemId = /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    function (assigneesPa) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/assignUser";
        return this.httpSvc.post(url, assigneesPa);
    };
    /**
     * 取回
     * @param workItemId task id
     * @param comment comment
     */
    /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    TaskService.prototype.retrieve = /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/retrieve";
        return this.httpSvc.post(url, context);
    };
    /**
     * 任务移交
     * @param taskId 工作项Id
     * @param targetUId 目标用户Id
     */
    /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    TaskService.prototype.transfer = /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    function (transferContext) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/transfer";
        return this.httpSvc.post(url, transferContext);
    };
    /**
     * 任务评论
     * @param taskId 工作项Id
     * @param targetUId 目标用户Id
     */
    /**
     * 任务评论
     * @param {?} commentContext
     * @return {?}
     */
    TaskService.prototype.comment = /**
     * 任务评论
     * @param {?} commentContext
     * @return {?}
     */
    function (commentContext) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/comment";
        return this.httpSvc.post(url, commentContext);
    };
    /**
     * 领用任务
     * @param taskId 工作项Id
     */
    /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @param {?} comment
     * @return {?}
     */
    TaskService.prototype.claim = /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @param {?} comment
     * @return {?}
     */
    function (taskId, comment) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/claim";
        /** @type {?} */
        var options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    };
    /**
     * 取消领用
     * @param taskId 任务Id
     */
    /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @param {?} comment
     * @return {?}
     */
    TaskService.prototype.unClaim = /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @param {?} comment
     * @return {?}
     */
    function (taskId, comment) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/unclaim";
        /** @type {?} */
        var options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    };
    /**
     * 报错提示
     * @param error
     */
    /**
     * 报错提示
     * @param {?} error
     * @return {?}
     */
    TaskService.prototype.error = /**
     * 报错提示
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            this.message.show('warning', message, { safeHtml: false });
        }
    };
    /**
     * 启动流程接口
     * @param payload API所需的上下文参数
     */
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    TaskService.prototype.startProcess = /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/startProcess";
        return this.httpSvc.post(url, payload);
    };
    /**
     * 启动流程预解析
     * @param payload API所需的上下文参数
     */
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    TaskService.prototype.startProcessSimulate = /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/startProcess-simulation";
        return this.httpSvc.post(url, payload);
    };
    /**
     * 取消提交
     * @param param 参数
     */
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    TaskService.prototype.cancelSubmit = /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    function (param) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/cancelSubmit";
        return this.httpSvc.post(url, param);
    };
    /**
     * @return {?}
     */
    TaskService.newId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var S4 = (/**
         * @return {?}
         */
        function () { return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); });
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    };
    /**
     * 获取用户常用意见列表
     * @returns
     */
    /**
     * 获取用户常用意见列表
     * @param {?=} filter
     * @return {?}
     */
    TaskService.prototype.getCommentList = /**
     * 获取用户常用意见列表
     * @param {?=} filter
     * @return {?}
     */
    function (filter) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/commonComments";
        filter && filter.type && (url += "?type=" + filter.type);
        return this.httpSvc.get(url);
    };
    /**
     * 添加常用意见
     * @returns
     */
    /**
     * 添加常用意见
     * @param {?} comment
     * @return {?}
     */
    TaskService.prototype.addComment = /**
     * 添加常用意见
     * @param {?} comment
     * @return {?}
     */
    function (comment) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/commonComments";
        return this.httpSvc.post(url, comment);
    };
    /**
     * 删除一条常用意见
     * @param id 常用意见id
     * @returns
     */
    /**
     * 删除一条常用意见
     * @param {?} id 常用意见id
     * @return {?}
     */
    TaskService.prototype.deleteComment = /**
     * 删除一条常用意见
     * @param {?} id 常用意见id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/commonComments/" + id;
        return this.httpSvc.delete(url, null);
    };
    /**
     * 获取任务中心配置项
     * @param code 配置项的Code
     */
    /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    TaskService.prototype.getTaskCenterConfigByCode = /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    function (code, ownerType, ownerId) {
        /** @type {?} */
        var url = "/api/runtime/task/v1.0/task-center-setting/code?code=" + code;
        ownerType && (url += "&ownerType=" + ownerType);
        ownerId && (url += "&ownerId=" + ownerId);
        return this.httpSvc.get(url);
    };
    /**
     * 获取系统级别配置（缓存为一天）
     */
    /**
     * 获取系统级别配置（缓存为一天）
     * @return {?}
     */
    TaskService.prototype.getAllTaskCenterConfig = /**
     * 获取系统级别配置（缓存为一天）
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var code = "gspWfTaskAllConfig";
        /** @type {?} */
        var todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        var configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            var url = "/api/runtime/task/v1.0/task-center-setting/all?ownerType=all&ownerId=*";
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                localStorage.setItem(todayCode, JSON.stringify(re));
                subject.next(re);
                _this.removeConfig(code);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    };
    /**
     * 获取任务分类级别配置
     */
    /**
     * 获取任务分类级别配置
     * @param {?} categoryId
     * @return {?}
     */
    TaskService.prototype.getTaskCategoryCenterConfig = /**
     * 获取任务分类级别配置
     * @param {?} categoryId
     * @return {?}
     */
    function (categoryId) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var code = "gspWfTaskCategoryConfig" + categoryId;
        /** @type {?} */
        var todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        var configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            var url = "/api/runtime/task/v1.0/task-center-setting/all";
            url += "?ownerType=category&ownerId=" + categoryId;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                localStorage.setItem(todayCode, JSON.stringify(re));
                subject.next(re);
                _this.removeConfig(code);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    };
    /**
    * 获取任务中心个人用户配置（缓存为一天）
    */
    /**
     * 获取任务中心个人用户配置（缓存为一天）
     * @return {?}
     */
    TaskService.prototype.getAllUserConfig = /**
     * 获取任务中心个人用户配置（缓存为一天）
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var code = "gspWfTaskUserConfig";
        /** @type {?} */
        var todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        var configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            var url = "/api/runtime/task/v1.0/task-center-setting/all";
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                localStorage.setItem(todayCode, JSON.stringify(re));
                _this.removeConfig(code);
                subject.next(re);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    };
    /**
     * 添加用户级别自定义配置
     * @param code 配置项编号
     */
    /**
     * 添加用户级别自定义配置
     * @param {?} code 配置项编号
     * @param {?} currentValue
     * @return {?}
     */
    TaskService.prototype.addUserConfig = /**
     * 添加用户级别自定义配置
     * @param {?} code 配置项编号
     * @param {?} currentValue
     * @return {?}
     */
    function (code, currentValue) {
        /** @type {?} */
        var configCode = "gspWfTaskUserConfig";
        /** @type {?} */
        var todayCode = configCode + this.getCurrentDateString();
        /** @type {?} */
        var configStr = localStorage.getItem(todayCode);
        if (configStr) {
            /** @type {?} */
            var list = JSON.parse(configStr);
            if (list && list.length) {
                /** @type {?} */
                var item = ((/** @type {?} */ (list))).find((/**
                 * @param {?} l
                 * @return {?}
                 */
                function (l) { return l.configCode == code; }));
                if (item) {
                    item.currentValue = currentValue;
                    localStorage.setItem(todayCode, JSON.stringify(list));
                }
            }
        }
        /** @type {?} */
        var url = "/api/runtime/task/v1.0/task-center-setting/add?configCode=" + code + "&currentValue=" + currentValue;
        return this.httpSvc.post(url, null);
    };
    /**
     * 获取用户头像（已被任务中心调用）
     * @param userId 用户ID
     */
    /**
     * 获取用户头像（已被任务中心调用）
     * @param {?} userId 用户ID
     * @return {?}
     */
    TaskService.prototype.getUserAvatar = /**
     * 获取用户头像（已被任务中心调用）
     * @param {?} userId 用户ID
     * @return {?}
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var code = "gspWfTaskUserAvatar";
        /** @type {?} */
        var todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        var todayUserCode = todayCode + userId;
        /** @type {?} */
        var avatarStr = localStorage.getItem(todayUserCode);
        if (avatarStr) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                subject.next(JSON.parse(avatarStr));
            }), 100);
        }
        else {
            /** @type {?} */
            var url = "/api/runtime/sys/v1.0/userinfos/setting/users?userId=" + userId;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                subject.next(re);
                localStorage.setItem(todayUserCode, JSON.stringify(re));
                _this.removeConfig(code);
            }));
        }
        return subject.asObservable();
    };
    /**
     * 获取当前日期
     */
    /**
     * 获取当前日期
     * @return {?}
     */
    TaskService.prototype.getCurrentDateString = /**
     * 获取当前日期
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var year = date.getFullYear().toString();
        /** @type {?} */
        var month = (date.getMonth() + 1).toString();
        /** @type {?} */
        var day = date.getDate().toString();
        return year + month + day;
    };
    /**
     * 移除localStorage缓存
     * @param key
     */
    /**
     * 移除localStorage缓存
     * @private
     * @param {?} key
     * @return {?}
     */
    TaskService.prototype.removeConfig = /**
     * 移除localStorage缓存
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var todayKey = key + this.getCurrentDateString();
        for (var item in localStorage) {
            if (item.indexOf(key) > -1 && item.indexOf(todayKey) < 0) {
                localStorage.removeItem(item);
            }
        }
    };
    /**
     * 真正上传附件
     * @param files
     */
    /**
     * 真正上传附件
     * @param {?} files
     * @return {?}
     */
    TaskService.prototype.uploadAttachment = /**
     * 真正上传附件
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/doc/commit";
        return this.httpSvc.put(url, files);
    };
    /**
     * 删除附件
     * @param fileDeleteEntity
     */
    /**
     * 删除附件
     * @param {?} fileDeleteEntity
     * @return {?}
     */
    TaskService.prototype.deleteAttachment = /**
     * 删除附件
     * @param {?} fileDeleteEntity
     * @return {?}
     */
    function (fileDeleteEntity) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/doc";
        return this.httpSvc.delete(url, fileDeleteEntity);
    };
    /**
     * 创建内码
     */
    /**
     * 创建内码
     * @return {?}
     */
    TaskService.prototype.createNM = /**
     * 创建内码
     * @return {?}
     */
    function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            /** @type {?} */
            var r = Math.random() * 16 | 0;
            /** @type {?} */
            var v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }));
    };
    /**
     * 获取当前用户信息
     */
    /**
     * 获取当前用户信息
     * @return {?}
     */
    TaskService.prototype.getUserInfo = /**
     * 获取当前用户信息
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/userinfos?infoType=user";
        return this.httpSvc.get(url);
    };
    /**
     * 获取用户所有签名
     */
    /**
     * 获取用户所有签名
     * @param {?} userId
     * @return {?}
     */
    TaskService.prototype.getUserSignId = /**
     * 获取用户所有签名
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var code = 'gspWfTaskUserSign' + userId;
        /** @type {?} */
        var todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        var signId = localStorage.getItem(todayCode);
        if (signId) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                subject.next(signId);
            }), 100);
        }
        else {
            /** @type {?} */
            var url = "/api/runtime/dfs/v1.0/formdoc/fileinfo/form?formid=" + userId + "&rootid=taskcentersignature";
            this.httpSvc.get(url).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result && result.length) {
                    /** @type {?} */
                    var sign;
                    if (result.length == 1) {
                        sign = result[0];
                    }
                    else {
                        /** @type {?} */
                        var list = result.filter((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) { return a && a.lastModifiedTime; }));
                        sign = list.reduce((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) {
                            return a.lastModifiedTime > b.lastModifiedTime ? a : b;
                        }));
                    }
                    subject.next(sign.id);
                    localStorage.setItem(todayCode, sign.id);
                    _this.removeConfig(code);
                }
                else {
                    subject.next('');
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    };
    /**
     * 上传签名，返回长传后的签名id
     */
    /**
     * 上传签名，返回长传后的签名id
     * @param {?} gspDocUploadEntity
     * @return {?}
     */
    TaskService.prototype.uploadSignature = /**
     * 上传签名，返回长传后的签名id
     * @param {?} gspDocUploadEntity
     * @return {?}
     */
    function (gspDocUploadEntity) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/doc";
        /** @type {?} */
        var header = this.httpSvc.setHeader({
            body: gspDocUploadEntity,
            responseType: 'text'
        });
        return this.httpSvc.request('Post', url, header);
    };
    /**
     * 解析文件类型，给出缩略图
     * @param attachmentInfo
     */
    /**
     * 解析文件类型，给出缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    TaskService.prototype.createItem = /**
     * 解析文件类型，给出缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    function (attachmentInfo) {
        /** @type {?} */
        var pos = attachmentInfo.fileName.lastIndexOf(".");
        /** @type {?} */
        var type = attachmentInfo.fileName.substring(pos + 1);
        type = (type == '' ? 'Default' : type.toLowerCase());
        /** @type {?} */
        var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
        /** @type {?} */
        var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
        /** @type {?} */
        var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
        /** @type {?} */
        var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
        if (docLib.indexOf(type) >= 0) {
            type = type.toLowerCase();
        }
        else if (videoLib.indexOf(type) >= 0) {
            type = 'video';
        }
        else if (audioLib.indexOf(type) >= 0) {
            type = 'audio';
        }
        else if (imgLib.indexOf(type) >= 0) {
            type = 'picture';
        }
        else {
            type = 'default';
        }
        return type;
    };
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param token 主题唯一标识。
     * @returns 主题的唯一标识。
     */
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param {?} token 主题唯一标识。
     * @return {?} 主题的唯一标识。
     */
    TaskService.prototype.subjectRegister = /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param {?} token 主题唯一标识。
     * @return {?} 主题的唯一标识。
     */
    function (subjectCode, token) {
        return ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRegister(subjectCode, { funcId: token });
    };
    /**
     * 监听移除
     * @param token
     */
    /**
     * 监听移除
     * @param {?} token
     * @return {?}
     */
    TaskService.prototype.subjectRemove = /**
     * 监听移除
     * @param {?} token
     * @return {?}
     */
    function (token) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRemove(token);
    };
    /**
     * 通过某个token发送消息
     * @param subjectToken 主题唯一的token标识
     * @param message 要发送的消息
     */
    /**
     * 通过某个token发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} message 要发送的消息
     * @return {?}
     */
    TaskService.prototype.subjectNotify = /**
     * 通过某个token发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} message 要发送的消息
     * @return {?}
     */
    function (subjectToken, message) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.notify(subjectToken, message);
    };
    /**
     * 添加观察者，并监听消息
     * @param subjectToken 主题token
     * @param observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param handler 监听到消息后执行的动作
     */
    /**
     * 添加观察者，并监听消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param {?} handler 监听到消息后执行的动作
     * @return {?}
     */
    TaskService.prototype.subjectResponse = /**
     * 添加观察者，并监听消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param {?} handler 监听到消息后执行的动作
     * @return {?}
     */
    function (subjectToken, observerToken, handler) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.response(subjectToken, observerToken, handler);
    };
    /**
     * 获取催办模拟结果
     * @param context 参数
     * @returns
     */
    /**
     * 获取催办模拟结果
     * @param {?} context 参数
     * @return {?}
     */
    TaskService.prototype.urgeHandleSimulate = /**
     * 获取催办模拟结果
     * @param {?} context 参数
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/getUrgeHandleInfo";
        return this.httpSvc.post(url, context);
    };
    /**
     * 执行催办
     * @param context 参数
     * @returns
     */
    /**
     * 执行催办
     * @param {?} context 参数
     * @return {?}
     */
    TaskService.prototype.urgeHandle = /**
     * 执行催办
     * @param {?} context 参数
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/urgeHandle";
        return this.httpSvc.post(url, context);
    };
    /**批量数字签名
     * @param context 参数
     */
    /**
     * 批量数字签名
     * @param {?} context 参数
     * @return {?}
     */
    TaskService.prototype.batchVerifySigned = /**
     * 批量数字签名
     * @param {?} context 参数
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/batchVerifySigned";
        return this.httpSvc.post(url, context);
    };
    /**
     * 获取用户帮助前端配置
     * @returns
     */
    /**
     * 获取用户帮助前端配置
     * @return {?}
     */
    TaskService.prototype.getWfUserHelpConfig = /**
     * 获取用户帮助前端配置
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var year = date.getFullYear();
        /** @type {?} */
        var month = date.getMonth() + 1;
        /** @type {?} */
        var day = date.getDate();
        /** @type {?} */
        var url = "/platform/runtime/wf/web/wf-user-help/config.json?v=" + year + month + day;
        return this.httpSvc.get(url);
    };
    /**
     * 获取加签配置
     */
    /**
     * 获取加签配置
     * @param {?} workItemId
     * @return {?}
     */
    TaskService.prototype.getAdhocConfig = /**
     * 获取加签配置
     * @param {?} workItemId
     * @return {?}
     */
    function (workItemId) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/adhocConfig/AddSignBehind";
        return this.httpSvc.get(url);
    };
    /**
     * 加签提交
     */
    /**
     * 加签提交
     * @param {?} payload
     * @return {?}
     */
    TaskService.prototype.adhocAssignee = /**
     * 加签提交
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/adhocAssignee";
        return this.httpSvc.post(url, payload);
    };
    /**
     * 取消征询
     */
    /**
     * 取消征询
     * @param {?} payload
     * @return {?}
     */
    TaskService.prototype.cancelConsult = /**
     * 取消征询
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/workItems/cancelConsult";
        return this.httpSvc.post(url, payload);
    };
    /**
     * 判断是否inSuite环境
     */
    /**
     * 判断是否inSuite环境
     * @return {?}
     */
    TaskService.prototype.isInSuite = /**
     * 判断是否inSuite环境
     * @return {?}
     */
    function () {
        /** @type {?} */
        var frameWorkService = ((/** @type {?} */ (window))).gspframeworkService;
        if (frameWorkService && frameWorkService.rtf) {
            /** @type {?} */
            var extendMethod = frameWorkService.rtf.extendMethod;
            if (extendMethod && extendMethod.getExtObj()) {
                /** @type {?} */
                var extObj = extendMethod.getExtObj();
                /** @type {?} */
                var mode = extObj.iGIX4inSuiteMode();
                if (mode) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 获取字符串字节长度
     */
    /**
     * 获取字符串字节长度
     * @param {?} str
     * @return {?}
     */
    TaskService.prototype.getBytesLength = /**
     * 获取字符串字节长度
     * @param {?} str
     * @return {?}
     */
    function (str) {
        // 在GBK编码里，除了ASCII字符，其它都占两个字符宽
        return str.replace(/[^\x00-\xff]/g, 'xx').length;
    };
    /**
     * 获取top window
     * @returns
     */
    /**
     * 获取top window
     * @return {?}
     */
    TaskService.prototype.getTopWindow = /**
     * 获取top window
     * @return {?}
     */
    function () {
        /** @type {?} */
        var curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    };
    /**
     * 弹出错误提示
     * @param error
     */
    /**
     * 弹出错误提示
     * @param {?} errorMessage
     * @return {?}
     */
    TaskService.prototype.handleErrorLevel = /**
     * 弹出错误提示
     * @param {?} errorMessage
     * @return {?}
     */
    function (errorMessage) {
        var _this = this;
        if (errorMessage && errorMessage.status < 500) {
            return;
        }
        /** @type {?} */
        var error = (/** @type {?} */ (errorMessage.error));
        /** @type {?} */
        var exceptionMsg = error.Message || '';
        /** @type {?} */
        var date = error.date || new Date();
        /** @type {?} */
        var localDate = date;
        /** @type {?} */
        var detail = error.Detail || error.Message + "\r\n\u53D1\u751F\u65F6\u95F4\uFF1A" + localDate + "\r\n\u8BE6\u7EC6\u4FE1\u606F\uFF1A" + error.innerMessage || '';
        /** @type {?} */
        var innerMessage = error.innerMessage || null;
        /** @type {?} */
        var bsModalRef;
        /** @type {?} */
        var options = {
            showMaxButton: false,
            buttons: [
                {
                    text: '知道了',
                    cls: 'btn btn-primary btn-lg',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        bsModalRef.close();
                    })
                }
            ],
            width: 440,
            height: 200,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: '复制详细信息',
                    onClick: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var result = _this.copyToClipboard(detail);
                        bsModalRef.content.showMiniNotify(result, 1500);
                    })
                }
            }
        };
        bsModalRef = this.message.show('exception', exceptionMsg, options);
    };
    /**
     * 赋值到粘贴板
     * @param text
     * @returns
     */
    /**
     * 赋值到粘贴板
     * @private
     * @param {?} text
     * @return {?}
     */
    TaskService.prototype.copyToClipboard = /**
     * 赋值到粘贴板
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        /** @type {?} */
        var windowRef = window;
        if (windowRef.clipboardData && windowRef.clipboardData.setData) {
            return windowRef.clipboardData.setData("Text", text);
        }
        else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            /** @type {?} */
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");
            }
            catch (ex) {
                console.warn("Copy to clipboard failed.", ex);
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return false;
    };
    TaskService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TaskService.ctorParameters = function () { return [
        { type: HttpService },
        { type: MessagerService }
    ]; };
    return TaskService;
}());
export { TaskService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.httpSvc;
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,