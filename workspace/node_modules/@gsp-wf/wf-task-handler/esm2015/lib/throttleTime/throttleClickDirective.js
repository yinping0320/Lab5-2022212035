/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
/**
 * 点击节流器：避免连续点击
 */
export class ThrottleClickDirective {
    constructor() {
        // 一定的时间内只执行第一个事件
        this.THROTTLE_TIME = 2000;
        this.subject = new Subject();
        // 事件方法
        this.throttleClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const result = this.subject.pipe(throttleTime(this.THROTTLE_TIME));
        this.click = result.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.throttleClick.emit(e);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.click.unsubscribe();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        this.subject.next(evt);
    }
}
ThrottleClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[directive-throttle]'
            },] }
];
/** @nocollapse */
ThrottleClickDirective.ctorParameters = () => [];
ThrottleClickDirective.propDecorators = {
    throttleClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.THROTTLE_TIME;
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    ThrottleClickDirective.prototype.click;
    /** @type {?} */
    ThrottleClickDirective.prototype.throttleClick;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3R0bGVDbGlja0RpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtdGFzay1oYW5kbGVyLyIsInNvdXJjZXMiOlsibGliL3Rocm90dGxlVGltZS90aHJvdHRsZUNsaWNrRGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQVUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQU85QyxNQUFNLE9BQU8sc0JBQXNCO0lBUWpDOztRQU5RLGtCQUFhLEdBQVcsSUFBSSxDQUFDO1FBQzdCLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBYyxDQUFDOztRQUdsQyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFN0IsQ0FBQzs7OztJQUVqQixRQUFROztjQUNBLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDOUIsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FDakM7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDNUIsQ0FBQyxFQUFDLENBQUE7SUFFSixDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFHRCxPQUFPLENBQUMsR0FBZTtRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7WUE5QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7YUFDakM7Ozs7OzRCQU9FLE1BQU07c0JBa0JOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7SUF0QmpDLCtDQUFxQzs7Ozs7SUFDckMseUNBQTRDOzs7OztJQUM1Qyx1Q0FBNEI7O0lBRTVCLCtDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIE9uSW5pdCwgT3V0cHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRocm90dGxlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuLyoqXHJcbiAqIOeCueWHu+iKgua1geWZqO+8mumBv+WFjei/nue7reeCueWHu1xyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZGlyZWN0aXZlLXRocm90dGxlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRocm90dGxlQ2xpY2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgLy8g5LiA5a6a55qE5pe26Ze05YaF5Y+q5omn6KGM56ys5LiA5Liq5LqL5Lu2XHJcbiAgcHJpdmF0ZSBUSFJPVFRMRV9USU1FOiBudW1iZXIgPSAyMDAwO1xyXG4gIHByaXZhdGUgc3ViamVjdCA9IG5ldyBTdWJqZWN0PE1vdXNlRXZlbnQ+KCk7XHJcbiAgcHJpdmF0ZSBjbGljazogU3Vic2NyaXB0aW9uO1xyXG4gIC8vIOS6i+S7tuaWueazlVxyXG4gIEBPdXRwdXQoKSB0aHJvdHRsZUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc3ViamVjdC5waXBlKFxyXG4gICAgICB0aHJvdHRsZVRpbWUodGhpcy5USFJPVFRMRV9USU1FKVxyXG4gICAgKTtcclxuICAgIHRoaXMuY2xpY2sgPSByZXN1bHQuc3Vic2NyaWJlKGUgPT4ge1xyXG4gICAgICB0aGlzLnRocm90dGxlQ2xpY2suZW1pdChlKVxyXG4gICAgfSlcclxuXHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuY2xpY2sudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICBvbkNsaWNrKGV2dDogTW91c2VFdmVudCkge1xyXG4gICAgdGhpcy5zdWJqZWN0Lm5leHQoZXZ0KTtcclxuICB9XHJcbn0iXX0=