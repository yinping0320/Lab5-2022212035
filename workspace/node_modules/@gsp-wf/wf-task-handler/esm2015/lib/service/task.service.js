/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { forkJoin, Subject } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
export class TaskService {
    /**
     * @param {?} httpSvc
     * @param {?} message
     */
    constructor(httpSvc, message) {
        this.httpSvc = httpSvc;
        this.message = message;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getUsersByIds(ids) {
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map((/**
         * @param {?} id
         * @return {?}
         */
        id => this.httpSvc.get(pathUrl + `/${id}` + `?mode=0002`))));
    }
    /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    getWorkItemActions(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/actions`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行审批操作
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    complete(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行审批预解析
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    completeSimulate(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete-simulation`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    getDestinationScope(workItemId, action) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/nextNodes/${action}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据节点ID获取指定参与者的结果
     * @param {?} workItemId
     * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
     * @return {?} 指派信息的数组 re: FlowNodeInfo[]
     */
    getSimulationAssigneeInfo(workItemId, nodeId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/simulation-assigneeInfo?nodeIds=[${nodeId}]`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行征询、知会
     * @param {?} context 上下文
     * @return {?}
     */
    addSign(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/counterSignAdd`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 已阅
     * @param {?} context 参数
     * @return {?}
     */
    readTask(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/read`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 查询单据信息（方法名不要动，其他地方有引用）
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    getTaskFormInfo(workItemId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let cacheCode = "gspWfTaskFormInfo" + workItemId;
        /** @type {?} */
        const taskForm = localStorage.getItem(cacheCode);
        if (taskForm) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(taskForm));
            }), 10);
        }
        else {
            /** @type {?} */
            const formParUrl = `/api/runtime/wf/v1.0/workItems/${workItemId}/formInfo`;
            this.httpSvc.get(formParUrl).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                subject.next(re);
                localStorage.setItem(cacheCode, JSON.stringify(re));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     * @return {?}
     */
    getAssigneeInfo(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${taskId}/assigneeInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签移交范围设置
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    getOrganizationScope(workItemId, actionCode) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/organizationScope/${actionCode}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param {?} procInstId 流程实例id
     * @param {?} state 任务状态 2或5
     * @return {?}
     */
    getTaskByProcInstId(procInstId, state) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/processInstanceId?procInstId=${procInstId}&state=${state}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据workitemID获取任务实体
     * @param {?} workItemId
     * @return {?}
     */
    getTaskByWorkItemId(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/sourceId/${workItemId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    assignNextUsersByWorkItemId(assigneesPa) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/assignUser`;
        return this.httpSvc.post(url, assigneesPa);
    }
    /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    retrieve(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/retrieve`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    transfer(transferContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/transfer`;
        return this.httpSvc.post(url, transferContext);
    }
    /**
     * 任务评论
     * @param {?} commentContext
     * @return {?}
     */
    comment(commentContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/comment`;
        return this.httpSvc.post(url, commentContext);
    }
    /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @param {?} comment
     * @return {?}
     */
    claim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/claim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @param {?} comment
     * @return {?}
     */
    unClaim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/unclaim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 报错提示
     * @param {?} error
     * @return {?}
     */
    error(error) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcessSimulate(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess-simulation`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    cancelSubmit(param) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/cancelSubmit`;
        return this.httpSvc.post(url, param);
    }
    /**
     * @return {?}
     */
    static newId() {
        /** @type {?} */
        const S4 = (/**
         * @return {?}
         */
        () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1));
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * 获取用户常用意见列表
     * @param {?=} filter
     * @return {?}
     */
    getCommentList(filter) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/commonComments`;
        filter && filter.type && (url += `?type=${filter.type}`);
        return this.httpSvc.get(url);
    }
    /**
     * 添加常用意见
     * @param {?} comment
     * @return {?}
     */
    addComment(comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        return this.httpSvc.post(url, comment);
    }
    /**
     * 删除一条常用意见
     * @param {?} id 常用意见id
     * @return {?}
     */
    deleteComment(id) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments/${id}`;
        return this.httpSvc.delete(url, null);
    }
    /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    getTaskCenterConfigByCode(code, ownerType, ownerId) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/code?code=${code}`;
        ownerType && (url += `&ownerType=${ownerType}`);
        ownerId && (url += `&ownerId=${ownerId}`);
        return this.httpSvc.get(url);
    }
    /**
     * 获取系统级别配置（缓存为一天）
     * @return {?}
     */
    getAllTaskCenterConfig() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskAllConfig";
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/task/v1.0/task-center-setting/all?ownerType=all&ownerId=*`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                localStorage.setItem(todayCode, JSON.stringify(re));
                subject.next(re);
                this.removeConfig(code);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取任务分类级别配置
     * @param {?} categoryId
     * @return {?}
     */
    getTaskCategoryCenterConfig(categoryId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskCategoryConfig" + categoryId;
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/task/v1.0/task-center-setting/all`;
            url += `?ownerType=category&ownerId=${categoryId}`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                localStorage.setItem(todayCode, JSON.stringify(re));
                subject.next(re);
                this.removeConfig(code);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取任务中心个人用户配置（缓存为一天）
     * @return {?}
     */
    getAllUserConfig() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskUserConfig";
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/task/v1.0/task-center-setting/all`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                localStorage.setItem(todayCode, JSON.stringify(re));
                this.removeConfig(code);
                subject.next(re);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 添加用户级别自定义配置
     * @param {?} code 配置项编号
     * @param {?} currentValue
     * @return {?}
     */
    addUserConfig(code, currentValue) {
        /** @type {?} */
        let configCode = "gspWfTaskUserConfig";
        /** @type {?} */
        let todayCode = configCode + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            /** @type {?} */
            let list = JSON.parse(configStr);
            if (list && list.length) {
                /** @type {?} */
                let item = ((/** @type {?} */ (list))).find((/**
                 * @param {?} l
                 * @return {?}
                 */
                l => l.configCode == code));
                if (item) {
                    item.currentValue = currentValue;
                    localStorage.setItem(todayCode, JSON.stringify(list));
                }
            }
        }
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/add?configCode=${code}&currentValue=${currentValue}`;
        return this.httpSvc.post(url, null);
    }
    /**
     * 获取用户头像（已被任务中心调用）
     * @param {?} userId 用户ID
     * @return {?}
     */
    getUserAvatar(userId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskUserAvatar";
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let todayUserCode = todayCode + userId;
        /** @type {?} */
        let avatarStr = localStorage.getItem(todayUserCode);
        if (avatarStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(avatarStr));
            }), 100);
        }
        else {
            /** @type {?} */
            const url = `/api/runtime/sys/v1.0/userinfos/setting/users?userId=${userId}`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                subject.next(re);
                localStorage.setItem(todayUserCode, JSON.stringify(re));
                this.removeConfig(code);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取当前日期
     * @return {?}
     */
    getCurrentDateString() {
        /** @type {?} */
        let date = new Date();
        /** @type {?} */
        let year = date.getFullYear().toString();
        /** @type {?} */
        let month = (date.getMonth() + 1).toString();
        /** @type {?} */
        let day = date.getDate().toString();
        return year + month + day;
    }
    /**
     * 移除localStorage缓存
     * @private
     * @param {?} key
     * @return {?}
     */
    removeConfig(key) {
        /** @type {?} */
        let todayKey = key + this.getCurrentDateString();
        for (let item in localStorage) {
            if (item.indexOf(key) > -1 && item.indexOf(todayKey) < 0) {
                localStorage.removeItem(item);
            }
        }
    }
    /**
     * 真正上传附件
     * @param {?} files
     * @return {?}
     */
    uploadAttachment(files) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc/commit`;
        return this.httpSvc.put(url, files);
    }
    /**
     * 删除附件
     * @param {?} fileDeleteEntity
     * @return {?}
     */
    deleteAttachment(fileDeleteEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        return this.httpSvc.delete(url, fileDeleteEntity);
    }
    /**
     * 创建内码
     * @return {?}
     */
    createNM() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            /** @type {?} */
            const r = Math.random() * 16 | 0;
            /** @type {?} */
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }));
    }
    /**
     * 获取当前用户信息
     * @return {?}
     */
    getUserInfo() {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/userinfos?infoType=user`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取用户所有签名
     * @param {?} userId
     * @return {?}
     */
    getUserSignId(userId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = 'gspWfTaskUserSign' + userId;
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let signId = localStorage.getItem(todayCode);
        if (signId) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(signId);
            }), 100);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/dfs/v1.0/formdoc/fileinfo/form?formid=${userId}&rootid=taskcentersignature`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result && result.length) {
                    /** @type {?} */
                    var sign;
                    if (result.length == 1) {
                        sign = result[0];
                    }
                    else {
                        /** @type {?} */
                        const list = result.filter((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => a && a.lastModifiedTime));
                        sign = list.reduce((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) {
                            return a.lastModifiedTime > b.lastModifiedTime ? a : b;
                        }));
                    }
                    subject.next(sign.id);
                    localStorage.setItem(todayCode, sign.id);
                    this.removeConfig(code);
                }
                else {
                    subject.next('');
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 上传签名，返回长传后的签名id
     * @param {?} gspDocUploadEntity
     * @return {?}
     */
    uploadSignature(gspDocUploadEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        /** @type {?} */
        let header = this.httpSvc.setHeader({
            body: gspDocUploadEntity,
            responseType: 'text'
        });
        return this.httpSvc.request('Post', url, header);
    }
    /**
     * 解析文件类型，给出缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    createItem(attachmentInfo) {
        /** @type {?} */
        var pos = attachmentInfo.fileName.lastIndexOf(".");
        /** @type {?} */
        var type = attachmentInfo.fileName.substring(pos + 1);
        type = (type == '' ? 'Default' : type.toLowerCase());
        /** @type {?} */
        var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
        /** @type {?} */
        var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
        /** @type {?} */
        var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
        /** @type {?} */
        var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
        if (docLib.indexOf(type) >= 0) {
            type = type.toLowerCase();
        }
        else if (videoLib.indexOf(type) >= 0) {
            type = 'video';
        }
        else if (audioLib.indexOf(type) >= 0) {
            type = 'audio';
        }
        else if (imgLib.indexOf(type) >= 0) {
            type = 'picture';
        }
        else {
            type = 'default';
        }
        return type;
    }
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param {?} token 主题唯一标识。
     * @return {?} 主题的唯一标识。
     */
    subjectRegister(subjectCode, token) {
        return ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRegister(subjectCode, { funcId: token });
    }
    /**
     * 监听移除
     * @param {?} token
     * @return {?}
     */
    subjectRemove(token) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRemove(token);
    }
    /**
     * 通过某个token发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} message 要发送的消息
     * @return {?}
     */
    subjectNotify(subjectToken, message) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.notify(subjectToken, message);
    }
    /**
     * 添加观察者，并监听消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param {?} handler 监听到消息后执行的动作
     * @return {?}
     */
    subjectResponse(subjectToken, observerToken, handler) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.response(subjectToken, observerToken, handler);
    }
    /**
     * 获取催办模拟结果
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandleSimulate(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/getUrgeHandleInfo`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行催办
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandle(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/urgeHandle`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 批量数字签名
     * @param {?} context 参数
     * @return {?}
     */
    batchVerifySigned(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/batchVerifySigned`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取用户帮助前端配置
     * @return {?}
     */
    getWfUserHelpConfig() {
        /** @type {?} */
        let date = new Date();
        /** @type {?} */
        let year = date.getFullYear();
        /** @type {?} */
        let month = date.getMonth() + 1;
        /** @type {?} */
        let day = date.getDate();
        /** @type {?} */
        const url = `/platform/runtime/wf/web/wf-user-help/config.json?v=` + year + month + day;
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签配置
     * @param {?} workItemId
     * @return {?}
     */
    getAdhocConfig(workItemId) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/${workItemId}/adhocConfig/AddSignBehind`;
        return this.httpSvc.get(url);
    }
    /**
     * 加签提交
     * @param {?} payload
     * @return {?}
     */
    adhocAssignee(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/adhocAssignee`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消征询
     * @param {?} payload
     * @return {?}
     */
    cancelConsult(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/cancelConsult`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 判断是否inSuite环境
     * @return {?}
     */
    isInSuite() {
        /** @type {?} */
        const frameWorkService = ((/** @type {?} */ (window))).gspframeworkService;
        if (frameWorkService && frameWorkService.rtf) {
            /** @type {?} */
            const extendMethod = frameWorkService.rtf.extendMethod;
            if (extendMethod && extendMethod.getExtObj()) {
                /** @type {?} */
                var extObj = extendMethod.getExtObj();
                /** @type {?} */
                const mode = extObj.iGIX4inSuiteMode();
                if (mode) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * 获取字符串字节长度
     * @param {?} str
     * @return {?}
     */
    getBytesLength(str) {
        // 在GBK编码里，除了ASCII字符，其它都占两个字符宽
        return str.replace(/[^\x00-\xff]/g, 'xx').length;
    }
    /**
     * 获取top window
     * @return {?}
     */
    getTopWindow() {
        /** @type {?} */
        let curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    }
    /**
     * 弹出错误提示
     * @param {?} errorMessage
     * @return {?}
     */
    handleErrorLevel(errorMessage) {
        if (errorMessage && errorMessage.status < 500) {
            return;
        }
        /** @type {?} */
        let error = (/** @type {?} */ (errorMessage.error));
        /** @type {?} */
        const exceptionMsg = error.Message || '';
        /** @type {?} */
        const date = error.date || new Date();
        /** @type {?} */
        const localDate = date;
        /** @type {?} */
        const detail = error.Detail || `${error.Message}\r\n发生时间：${localDate}\r\n详细信息：${error.innerMessage}` || '';
        /** @type {?} */
        const innerMessage = error.innerMessage || null;
        /** @type {?} */
        let bsModalRef;
        /** @type {?} */
        const options = {
            showMaxButton: false,
            buttons: [
                {
                    text: '知道了',
                    cls: 'btn btn-primary btn-lg',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        bsModalRef.close();
                    })
                }
            ],
            width: 440,
            height: 200,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: '复制详细信息',
                    onClick: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        const result = this.copyToClipboard(detail);
                        bsModalRef.content.showMiniNotify(result, 1500);
                    })
                }
            }
        };
        bsModalRef = this.message.show('exception', exceptionMsg, options);
    }
    /**
     * 赋值到粘贴板
     * @private
     * @param {?} text
     * @return {?}
     */
    copyToClipboard(text) {
        /** @type {?} */
        const windowRef = window;
        if (windowRef.clipboardData && windowRef.clipboardData.setData) {
            return windowRef.clipboardData.setData("Text", text);
        }
        else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            /** @type {?} */
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");
            }
            catch (ex) {
                console.warn("Copy to clipboard failed.", ex);
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return false;
    }
}
TaskService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskService.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.httpSvc;
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,