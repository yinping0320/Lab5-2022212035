/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, HostBinding, Injector, } from '@angular/core';
import { Addendum, VerifySigned, CompleteContext } from '../../entity/complete-context';
import { TaskService } from '../../service/task.service';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../service/i18n/i18n.service';
import { AssigneeInfo } from '../../entity/complete-response';
import { BehaviorSubject, Subject } from 'rxjs';
import { TaskAction } from '../../entity/task-action';
import { WfTaskHandlerService } from '../../wf-task-handler.service';
import { TaskEntity } from '../../entity/task-entity';
import { ActionBaseImplComponent, ActionOrigin } from '@gsp-wf/task-impl-api';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { ConfigCode } from '../../entity/task-center-config';
import { WorkItemExecuteParam } from '../../entity/workitem-execute-param';
import { UrgeHandleContext, UrgeHandleSimulateContext } from '../../entity/urge-handle';
import { BatchVerifySignedContext } from '../../entity/batchVerifysigned';
import { WfContext } from '../../entity/wfContext';
import { UrgeHandleComponent } from "../urge-handle/urge-handle.component";
import { MultiInstanceType } from '../../entity/add-sign';
import { SimulateSubject } from '../../entity/simulaite-subject';
export class TaskExecuteComponent extends ActionBaseImplComponent {
    //任务办理选中后的紧急程度
    /**
     * @param {?} taskService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} handlerService
     * @param {?} loadingService
     * @param {?} message
     * @param {?} injector
     */
    constructor(taskService, notify, i18nService, handlerService, loadingService, message, injector) {
        super();
        this.taskService = taskService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.handlerService = handlerService;
        this.loadingService = loadingService;
        this.message = message;
        this.injector = injector;
        // 流程实例ID
        this.actionEntity = new TaskAction(); // 动作实体
        // 动作实体
        this.comment = ''; // 审批意见
        // 审批意见
        this.MAX_COMMENT_LENGTH = 4000; //审批意见最大长度
        //当前动作的默认意见
        this.taskList = []; //批量审批接收到的任务list
        //批量审批接收到的任务list
        this.batchSecond = 0; //批量操作的时间
        //批量操作的时间
        this.ifSelectNode = false; // 是否显示选择下一环节
        // 是否显示选择下一环节
        this.ifSelectUser = false; // 是否显示下一环节处理人
        // 是否显示下一环节处理人
        this.ifAssignUser = false; // 是否显示办理人员框
        // 是否显示办理人员框
        this.ifUrgeType = false; // 是否显示接收人框（催办消息接收人）
        // 是否显示接收人框（催办消息接收人）
        this.ifShowCommentToMySelf = false; // 是否显示审批记录仅自己可见
        // 是否显示审批记录仅自己可见
        this.singleSelect = false; // 用户帮助是否单选，默认多选
        // 用户帮助是否单选，默认多选
        this.selectTargetAble = false; // 是否允许选择下一环节
        // 是否允许选择下一环节
        this.hideComment = false; //审批记录仅自己可见
        //审批记录仅自己可见
        this.filter = { notGetCurrentUser: true, notGetStopUser: true, orderField: 'order', withAllOrg: true, orgId: '' }; // 系统用户帮助是否过滤当前人
        // 系统用户帮助是否过滤当前人
        this.selectedUsers = []; // 用户帮助选择后的Id数组
        this.subject = new BehaviorSubject(null);
        this.submitResult = { result: true, isClose: true }; // 动作执行完成后返回的实体结果
        // 动作执行完成后返回的实体结果
        this.bindingData = {}; // 系统帮助多选时用到
        // 系统帮助多选时用到
        this.selectNodeText = this.i18nService.getValue('task.nextNodeText'); // 下一环节显示的文字,"下一环节"
        // 处理人员显示文字
        this.commentPlaceHolder = this.i18nService.getValue('static.inputHolder'); //审批意见框placeholder
        //审批意见框placeholder
        this.showAttachment = true; //是否显示附件上传
        //是否显示附件上传
        this.showSign = true; //是否显示签名
        //是否显示签名
        this.showCommonComment = true; //是否显示常用意见
        //是否显示常用意见
        this.textAreaHeight = 84; //文字框的高度
        //文字框的高度
        this.billMethodConfigs = []; // 表单动作配置列表
        // 选择的下一环节ID，并行分支是，逗号隔开的
        this.destNodes = []; // 候选下一环节
        // 候选下一环节
        this.dialogHeight = 270; // 弹框的高度
        // 弹框的高度
        this.dialogHeightBase = 70;
        this.addendum = new Addendum(); // 附件、签名信息
        // 附件、签名信息
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.assignInfos = [{
                // 节点返回的指派信息（多个）
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }];
        this.otherAssignInfos = []; //其他节点指派信息
        //其他节点指派信息
        this.originOtherAssignInfos = []; //缓存一开始的其他节点指派信息
        // 表单对象
        this.ifRegistered = false; // 表单是否注册
        // 表单是否注册
        this.configList = []; //任务中心配置项
        //任务中心配置项
        this.verifySigned = new VerifySigned(); // 数字验签参数
        // 数字验签参数
        this.submitDisable = false; // 提交按钮是否禁用
        // 提交按钮是否禁用
        //加签使用
        this.addSign = {
            showSignToSign: false,
            allowSignToSIgn: true,
            showMultiInstanceType: false,
            multiInstanceType: [
                { value: 'Parallel', name: this.i18nService.getValue('addSign.parallel') },
                { value: 'Sequential', name: this.i18nService.getValue('addSign.sequential') },
                { value: 'Preempt', name: this.i18nService.getValue('addSign.preempt') },
            ],
            originMultiInstType: '',
            curMultiInstType: MultiInstanceType.Parallel.toString()
        };
        //动态驳回配置
        this.showBackWardConfig = {
            title: this.i18nService.getValue('backWardConfig.title'),
            dynamicBackWardRuleAble: false,
            displayPlaceholder: '',
            showTips: false,
            enable: false,
            backWardRules: [{
                    name: this.i18nService.getValue('backWardConfig.sequence'),
                    value: 'sequence'
                }, {
                    name: this.i18nService.getValue('backWardConfig.backToMe'),
                    value: 'backToMe'
                }, {
                    name: this.i18nService.getValue('backWardConfig.backToCurrentNode'),
                    value: 'backToCurrentNode'
                }]
        };
        /**
         * 任务催办时使用
         */
        this.showUrgeMessageSubject = false; // 是否显示催办消息主题（催办时使用）
        // 内容可编辑
        this.wfContext = new WfContext(); //工作流上下文
        //工作流上下文
        this.enablePriority = false; //是否显示密级（动作级别）
        //是否显示密级（动作级别）
        this.cls = '';
        this.POST_MESSAGE_TARGET = window.document.location.origin;
        this.language = localStorage.getItem('languageCode') || 'zh-CHS'; //中英文
        /**
         * 监听事件处理
         */
        this.eventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.messageSubject.next(event);
        });
        // 如果存在消息监听，先删掉
        if (TaskExecuteComponent.func) {
            window.removeEventListener('message', TaskExecuteComponent.func, false);
        }
        this.addMessageListener();
    }
    /**
     * 组件销毁时，去掉subject注册
     * @return {?}
     */
    ngOnDestroy() {
        if (this.actionToken) {
            this.taskService.subjectRemove(this.actionToken);
        }
        if (this.simulateToken) {
            this.taskService.subjectRemove(this.simulateToken);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getAllUserConfig().subscribe((/**
         * @param {?} configList
         * @return {?}
         */
        (configList) => {
            load.close();
            this.configList = configList;
            /** @type {?} */
            const comment = configList.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.configCode === ConfigCode.Default_Approval_Comment));
            /** @type {?} */
            const if_store_comment = configList.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.configCode === ConfigCode.If_Store_Comment));
            /** @type {?} */
            let passComment;
            /** @type {?} */
            let backComment;
            if (comment && comment.currentValue) {
                if (this.language == 'zh-CHS') {
                    passComment = JSON.parse(comment.currentValue).pass;
                    backComment = JSON.parse(comment.currentValue).back;
                }
                else {
                    passComment = JSON.parse(comment.currentValue)['pass_' + this.language];
                    backComment = JSON.parse(comment.currentValue)['back_' + this.language];
                }
                if (this.actionEntity.code === 'Pass') {
                    this.comment = passComment;
                    this.defaultComment = passComment;
                }
                if (this.actionEntity.code === 'Back') {
                    this.comment = backComment;
                    this.defaultComment = backComment;
                }
            }
            if (if_store_comment && if_store_comment.currentValue === 'true') {
                if (this.wfCacheComment) { //开启暂存意见，当切换到驳回并且
                    if (this.actionEntity.code == 'Back' && this.wfCacheComment == passComment) {
                    }
                    else {
                        this.comment = this.wfCacheComment;
                    }
                }
            }
        }), (/**
         * @return {?}
         */
        () => {
            load.close();
        }));
        // 从任务办理界面打开时，才注册服务
        if (this.origin === ActionOrigin.TaskForm) {
            this.initFormEvent();
            // 获取表单操作配置
            this.taskService.getTaskFormInfo(this.workItemId).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re && re.billMethodConfigs && re.billMethodConfigs.length) {
                    this.billMethodConfigs = re.billMethodConfigs;
                }
            }));
        }
        /** @type {?} */
        let context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
    }
    /**
     * @private
     * @return {?}
     */
    addMessageListener() {
        window.addEventListener('message', this.eventHandler, false);
        TaskExecuteComponent.func = this.eventHandler;
    }
    /**
     * 重写父类方法
     * @param {?} task
     * @return {?}
     */
    setTask(task) {
        if (task) {
            this.task = task;
            this.workItemId = task.sourceId;
            this.processInstanceId = task.processInstanceId;
            this.wfContext.processCategoryId = task.categoryId;
            this.selectedPriority = task.priority;
        }
    }
    /**
     * 批量办理 设置任务列表
     * @param {?} taskList
     * @return {?}
     */
    setTaskList(taskList) {
        if (taskList.length > 20) {
            this.dialogHeight = 290;
        }
        this.taskList = taskList;
        this.batchSecond = Math.ceil(this.taskList.length / 6);
    }
    /**
     * 重写父类方法
     * @param {?} action
     * @return {?}
     */
    setAction(action) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let result = new SimulateSubject();
        if (action) {
            this.actionEntity = action;
            if (this.task) { // 单个、批量都setAction，单个才执行模拟
                return this.simulate(this.actionEntity);
            }
            if (this.taskList && this.taskList.length) {
                return this.batchSimulate();
            }
        }
        //批量时，也要返回
        setTimeout((/**
         * @return {?}
         */
        () => {
            subject.next(result);
        }), 100);
        return subject.asObservable();
    }
    /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     * @private
     * @return {?}
     */
    initFormEvent() {
        // 审批前事件
        this.actionToken = this.workItemId + 'action';
        /** @type {?} */
        const actionToken = this.actionToken;
        /** @type {?} */
        const subjectCode = 'FormSubjectCode';
        ((/** @type {?} */ (window))).gspWfEventService = ((/** @type {?} */ (window))).gspWfEventService || {};
        ((/** @type {?} */ (window))).gspWfEventService.register = (/**
         * @param {?} formObject
         * @return {?}
         */
        (formObject) => {
            this.taskService.subjectRegister(subjectCode, actionToken);
            this.ifRegistered = true;
            this.formObject = formObject;
        });
        ((/** @type {?} */ (window))).gspWfEventService.notify = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (this.ifRegistered) {
                this.taskService.subjectNotify(actionToken, value);
            }
            else { // 表单不注册，也可直接调用notify
                this.simulateToken = this.workItemId + 'simulate';
                /** @type {?} */
                const simulateToken = this.simulateToken;
                this.taskService.subjectRegister(subjectCode, simulateToken);
                this.taskService.subjectResponse(simulateToken, '', (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    value && value.dataChanged && this.completeSimulate();
                }));
                this.taskService.subjectNotify(simulateToken, value);
            }
        });
    }
    /**
     * 点击提交的时候，执行表单的前事件
     * @private
     * @return {?}
     */
    beforeCompleteSubmit() {
        if (this.origin == ActionOrigin.TaskForm) {
            // 获取表单操作配置
            /** @type {?} */
            const passPreActions = this.billMethodConfigs.filter((/**
             * @param {?} action
             * @return {?}
             */
            action => action.action === this.actionEntity.code && action.executionTime === 'Pre')).sort((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            (x, y) => x.sortOrder - y.sortOrder));
            // 如果表单注册了事件
            if (passPreActions && passPreActions.length) {
                this.executeFormActions([...passPreActions]);
            }
            else { // 没有定义前后事件，直接提交
                this.completeSubmit();
            }
        }
        else {
            this.completeSubmit();
        }
    }
    /**
     * @private
     * @param {?} formActions 表单中要执行的动作
     * @return {?}
     */
    executeFormActions(formActions) {
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const data = re.data.data;
                if (data.result === true) {
                    if (data.dataChanged === true) { // 如果需要预解析，先预解析再继续执行
                        this.completeSimulate().subscribe((/**
                         * @param {?} r
                         * @return {?}
                         */
                        (r) => {
                            if (r.result) { // 预解析正确
                                this.executeFormActions(formActions);
                            }
                            else { // 预解析错误
                                this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                            }
                        }));
                    }
                    else { // 不需要预解析，继续执行
                        this.executeFormActions(formActions);
                    }
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批前表单操作执行失败！');
                }
            }));
            // 执行表单动作
            /** @type {?} */
            const formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            this.completeSubmit();
        }
    }
    /**
     * 单个任务预解析
     * @private
     * @param {?} action
     * @return {?}
     */
    simulate(action) {
        switch (action.code) {
            case 'AssignUser': // 指派 单独参数
                return this.assignSimulate();
            case 'Claim': // 领用
                return this.defaultSubjectNext();
            case 'Unclaim': // 取消领用
                return this.defaultSubjectNext();
            case 'Retrieve': // 取回
                return this.defaultSubjectNext();
            case 'Transfer': // 移交 单独参数
                return this.transferSimulate();
            case 'AddSign': // 加签
                return this.addSignSimulate();
            case 'AddSignFront': // 征询
                return this.addSignFrontSimulate();
            case 'Notify': //知会
                return this.notifySimulate();
            case 'Refuse': // 否决
                return this.defaultSubjectNext();
            case 'Obsolete': // 作废
                return this.defaultSubjectNext();
            case 'Comment': // 评论
                return this.defaultSubjectNext();
            case 'ReadTask': // 已阅
                this.ifShowCommentToMySelf = true;
                return this.defaultSubjectNext(295);
            case 'UrgeHandle': //催办
                return this.urgeHandleSimulate();
            case 'CancelConsult': //取消征询
                return this.defaultSubjectNext();
            default: // 通过 驳回 重新提交 其他自定义的动作
                return this.completeSimulate();
        }
    }
    /**
     * 批量审批预解析
     * @private
     * @return {?}
     */
    batchSimulate() {
        switch (this.actionEntity.code) {
            case "ReadTask": //批量已阅
                this.ifShowCommentToMySelf = true;
                return this.defaultSubjectNext(295);
            case "Retrieve": //批量取回
                return this.defaultSubjectNext();
            case "Transfer": //批量移交
                this.ifSelectUser = true;
                this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
                this.singleSelect = true;
                return this.defaultSubjectNext(this.dialogHeight + this.dialogHeightBase);
            default:
                return this.defaultSubjectNext();
        }
    }
    /**
     * 默认的预解析返回结果，可控制弹框高度
     * @private
     * @param {?=} dialogHeight
     * @return {?}
     */
    defaultSubjectNext(dialogHeight) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let s = new SimulateSubject();
        s.showDialog = true;
        s.dialogHeight = dialogHeight ? dialogHeight : this.dialogHeight;
        s.result = true;
        setTimeout((/**
         * @return {?}
         */
        () => {
            subject.next(s);
        }), 100);
        return subject.asObservable();
    }
    /**
     * 真正地提交
     * 重写父类方法
     * @return {?}
     */
    submit() {
        switch (this.actionEntity.code) {
            case 'AssignUser': // 指派 单独参数
                this.assignSubmit();
                break;
            case 'Claim': // 领用
                this.claimSubmit();
                break;
            case 'Unclaim': // 取消领用
                this.unClaimSubmit();
                break;
            case 'Retrieve': // 取回
                this.retrieveSubmit();
                break;
            case 'Transfer': // 移交 单独参数
                this.transferSubmit();
                break;
            case 'AddSign': // 加签
                this.addSignSubmit();
                break;
            case 'AddSignFront': // 征询
                this.addSignFrontSubmit();
                break;
            case 'Comment': // 评论
                this.commentSubmit();
                break;
            case 'Notify': //知会
                this.notifySubmit();
                break;
            case 'ReadTask': // 已阅
                this.readSubmit();
                break;
            case 'UrgeHandle': //催办
                this.urgeHandleSubmit();
                break;
            case 'CancelConsult': //取消征询
                this.cancelConsultSubmit();
                break;
            default: // 通过 驳回 否决 作废 重新提交 其他自定义动作
                this.beforeCompleteSubmit();
        }
        return this.subject.asObservable();
    }
    /**
     * 批量办理点击提交
     * @param {?} tasks
     * @return {?}
     */
    batchSubmit(tasks) {
        switch (this.actionEntity.code) {
            case "ReadTask": //批量已阅
                return this.batchReadTaskSubmit(tasks);
            case "Retrieve": //批量取回
                return this.batchRetrieveSubmit(tasks);
            case "Claim": //批量领用
                return this.batchClaimSubmit(tasks);
            case "Unclaim": //批量取消领用
                return this.batchUnclaimSubmit(tasks);
            case "Transfer": //批量移交
                return this.batchTransferSubmit(tasks);
            default:
                return this.batchCompleteSubmit(tasks);
        }
    }
    /**
     * 执行批量前事件
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    batchCompleteSubmit(tasks) {
        /** @type {?} */
        let filterNum = 0;
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        /** @type {?} */
        const successSubmit = { result: true, isClose: true };
        if ((this.actionEntity.code === 'Back' || this.actionEntity.code === 'Refuse') && !this.comment) { // 批量意见是否必填不支持根据审批项配置操作，批量驳回意见必填
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const noActionTasks = tasks.filter((/**
             * @param {?} t
             * @return {?}
             */
            t => t.actions.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code === this.actionEntity.code)) === -1));
            if (noActionTasks && noActionTasks.length > 0) {
                for (const a of noActionTasks) {
                    filterNum++;
                    if (filterNum === tasks.length) {
                        subject.next(successSubmit);
                        this.showBatchSubmitInfo(0, filterNum, 0, 0);
                    }
                }
            }
            /** @type {?} */
            let actTasks = tasks.filter((/**
             * @param {?} t
             * @return {?}
             */
            t => t.actions.some((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code === this.actionEntity.code))));
            if (actTasks && actTasks.length > 0) {
                this.executeBatchEvent([...this.actionEntity.preEvents.filter((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => e.batch))], actTasks, this.actionEntity, (/**
                 * @param {?} re
                 * @return {?}
                 */
                (re) => {
                    if (re && re.result) {
                        if (re.passTasks) {
                            /** @type {?} */
                            const backTasks = actTasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => re.passTasks.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === t.id)) === -1));
                            if (backTasks && backTasks.length > 0) {
                                for (const t of backTasks) {
                                    filterNum++;
                                    if (filterNum === tasks.length) {
                                        subject.next(successSubmit);
                                        this.showBatchSubmitInfo(0, filterNum, 0, 0);
                                    }
                                }
                            }
                            actTasks = actTasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => re.passTasks.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === t.id)) > -1));
                        }
                        if (actTasks.length > 0) {
                            /** @type {?} */
                            const batchVerifySignedContext = new BatchVerifySignedContext();
                            this.batchVerifySubmit(actTasks, filterNum, batchVerifySignedContext).subscribe((/**
                             * @param {?} r
                             * @return {?}
                             */
                            (r) => {
                                if (r && r.successSubmit && r.successSubmit.result) {
                                    this.executeBatchEvent([...this.actionEntity.postEvents.filter((/**
                                         * @param {?} e
                                         * @return {?}
                                         */
                                        e => e.batch))], r.successHandleTasks, this.actionEntity, (/**
                                     * @return {?}
                                     */
                                    () => {
                                        subject.next(r.successSubmit);
                                    }), { result: true, passTasks: r.successHandleTasks.map((/**
                                         * @param {?} t
                                         * @return {?}
                                         */
                                        t => t.id)) });
                                }
                            }));
                        }
                    }
                    else {
                        subject.next({ result: false, isClose: false });
                    }
                }), { result: true, passTasks: actTasks.map((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => t.id)) });
            }
        }
        return subject.asObservable();
    }
    /**
     * 批量数字签名
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} batchVerifySignedContext
     * @return {?}
     */
    batchVerifySubmit(tasks, filterNum = 0, batchVerifySignedContext) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const verifyTasks = tasks.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const action = t.actions.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code === this.actionEntity.code));
            if (!action) {
                return false;
            }
            else {
                if (action.parameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.code === 'CertificationNecessary' && p.value === 'true'))) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }));
        /** @type {?} */
        const verifyTasksNum = verifyTasks.length;
        if (verifyTasks.length > 0) {
            /** @type {?} */
            const that = this;
            if (((/** @type {?} */ (window))).gspframeworkService &&
                ((/** @type {?} */ (window))).gspframeworkService.rtf) {
                ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', (/**
                 * @param {?} signedData
                 * @return {?}
                 */
                function signMsgOver(signedData) {
                    if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                        // 证书对象
                        /** @type {?} */
                        const cert = gspCA.getCurCert();
                        // 验签参数
                        that.verifySigned = {
                            // 要验证的证书base64编码的字符流(certkey)
                            certBase64Info: gspCA.getCertBase64(cert),
                            // 签名原信息
                            msg: ['BatchDigitalSignature'],
                            // 要签名后信息
                            signedmsg: signedData[1][0],
                            // 用户使用场景，目前未使用，可以为空
                            useCase: null,
                        };
                        batchVerifySignedContext.verifySigned = that.verifySigned;
                        that.taskService.batchVerifySigned(batchVerifySignedContext).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const verifyTasksNum = 0;
                            that.batchComplete(tasks, filterNum, verifyTasksNum).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            re => {
                                subject.next(re);
                            }));
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        (error) => {
                            /** @type {?} */
                            const otherTasks = tasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => verifyTasks.findIndex((/**
                             * @param {?} task
                             * @return {?}
                             */
                            task => task.id === t.id)) === -1));
                            that.batchComplete(otherTasks, filterNum, verifyTasksNum).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            re => {
                                subject.next(re);
                            }));
                        }));
                    }
                    else {
                        that.notify.error(signedData[1]);
                        subject.next({ successSubmit: { result: false, isClose: false }, successHandleTasks: new Array() });
                    }
                }));
            }
            /** @type {?} */
            const msg = ['BatchDigitalSignature'];
            gspCA.getSignedMsg(msg);
        }
        else {
            this.batchComplete(tasks, filterNum, verifyTasksNum).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                subject.next(re);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 真正的批量提交任务
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} verifyTasksNum
     * @return {?}
     */
    batchComplete(tasks, filterNum = 0, verifyTasksNum) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let successNum = 0;
        /** @type {?} */
        let failedNum = 0;
        /** @type {?} */
        let errorNum = 0;
        /** @type {?} */
        const successSubmit = { result: true, isClose: true };
        /** @type {?} */
        const successHandleTasks = new Array();
        /** @type {?} */
        const load = this.loadingService.show();
        for (const task of tasks) {
            /** @type {?} */
            const context = new CompleteContext();
            context.workItemId = task.sourceId;
            context.conclusionValue = this.actionEntity.code;
            context.comment = this.comment;
            context.addendum = this.addendum;
            this.taskService.completeSimulate(context).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response && response.needInteraction === true) { // 需要交互
                    failedNum++;
                    if (successNum + failedNum + errorNum === tasks.length) {
                        load.close();
                        subject.next({ successSubmit, successHandleTasks });
                        this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                    }
                }
                else { // 不需要交互
                    this.taskService.complete(context).subscribe((/**
                     * @return {?}
                     */
                    () => {
                        successNum++;
                        successHandleTasks.push(task);
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit, successHandleTasks });
                            this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }), (/**
                     * @return {?}
                     */
                    () => {
                        errorNum++;
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit, successHandleTasks });
                            this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }));
                }
            }), (/**
             * @return {?}
             */
            () => {
                errorNum++;
                if (successNum + failedNum + errorNum === tasks.length) {
                    load.close();
                    subject.next({ successSubmit, successHandleTasks });
                    this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                }
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量已阅
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchReadTaskSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                /** @type {?} */
                let context = {
                    workItemId: task.sourceId,
                    comment: this.comment,
                    addendum: this.addendum,
                };
                this.taskService.readTask(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: true, isClose: true });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量取回
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchRetrieveSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                /** @type {?} */
                let context = {
                    workItemId: task.sourceId,
                    comment: this.comment,
                    addendum: this.addendum,
                };
                this.taskService.retrieve(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchClaimSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                this.taskService.claim(task.sourceId, this.comment).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量取消领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchUnclaimSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                this.taskService.unClaim(task.sourceId, this.comment).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量移交
     * @private
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    batchTransferSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                /** @type {?} */
                const context = {
                    workItemId: task.sourceId,
                    assignee: this.selectedUsers[0],
                    comment: this.comment,
                    addendum: this.addendum,
                };
                this.taskService.transfer(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量提交提示信息
     * @private
     * @param {?} successNum 成功条数
     * @param {?} failedNum 需要交互的条数
     * @param {?} errorNum 执行报错的条数
     * @param {?} verifyTasksNum 需要数字签名的条数
     * @return {?}
     */
    showBatchSubmitInfo(successNum, failedNum, errorNum, verifyTasksNum) {
        /** @type {?} */
        let message = '';
        if (successNum && !failedNum && !errorNum && !verifyTasksNum) { // 批量全部成功
            this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
        }
        else { // 非全部成功
            successNum && (message += this.i18nService.getValue('batchSubmit.success') + `【${successNum}】` + this.i18nService.getValue('batchSubmit.row'));
            errorNum && (message += this.i18nService.getValue('batchSubmit.error') + `【${errorNum}】` + this.i18nService.getValue('batchSubmit.row'));
            failedNum && (message += this.i18nService.getValue('batchSubmit.failed') + `【${failedNum}】` + this.i18nService.getValue('batchSubmit.row'));
            verifyTasksNum && (message += this.i18nService.getValue('batchSubmit.validationFailed') + `【${verifyTasksNum}】` + this.i18nService.getValue('batchSubmit.row'));
            message += this.i18nService.getValue('batchSubmit.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * @private
     * @param {?} events
     * @param {?} entities
     * @param {?} action
     * @param {?} handler
     * @param {?=} result
     * @return {?}
     */
    executeBatchEvent(events, entities, action, handler, result) {
        if (this.injector) {
            if (events && events.length > 0 && entities && entities.length > 0) {
                /** @type {?} */
                const event = events.shift();
                /** @type {?} */
                const url = event.eventImpl.split('#')[0];
                /** @type {?} */
                const func = event.eventImpl.split('#')[1];
                System.import(url + '?v=' + new Date().getTime().toString())
                    .then((/**
                 * @param {?} moduleFactories
                 * @return {?}
                 */
                (moduleFactories) => {
                    /** @type {?} */
                    const moduleFactory = Object.values(moduleFactories)[0];
                    /** @type {?} */
                    const moduleRef = moduleFactory.create(this.injector);
                    /** @type {?} */
                    const context = {
                        action,
                        taskList: entities,
                        origin: 'TaskCenter',
                        preEventResult: result
                    };
                    moduleRef.instance[func].apply(moduleRef.instance, [context]).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    (re) => {
                        if (re && re.result) {
                            this.executeBatchEvent(events, entities, action, handler, re);
                        }
                        else {
                            handler(re);
                        }
                    }));
                }));
            }
            else {
                handler(result);
            }
        }
        else {
            handler(result);
        }
    }
    /**
     * @private
     * @return {?}
     */
    assignSimulate() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        this.ifAssignUser = true;
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        this.taskService.getAssigneeInfo(this.workItemId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            this.assignInfos = [{
                    selectedAssignees: info.selectedAssignees,
                    assigneeInfo: info.assigneeInfo,
                    assignees: info.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: info.activityDefinitionName,
                    activityDefinitionId: info.activityDefinitionId,
                    dependency: info.dependency,
                    anonymous: info.anonymous,
                    anonymousText: info.anonymousText,
                    resolved: info.resolved,
                }];
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.result = true;
            simulateSubject.showDialog = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            simulateSubject.result = false;
            simulateSubject.showDialog = false;
            subject.next(simulateSubject);
            this.taskService.error(error);
        }));
        return subject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    transferSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
        this.singleSelect = true;
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    addSignFrontSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    addSignSimulate() {
        // 加签
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase * 2;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getAdhocConfig(this.workItemId).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.addSign.showSignToSign = response.showSignToSign;
            this.addSign.originMultiInstType = response.multiInstanceType;
            if (response.organization) {
                this.filter.orgId = response.organization.id;
                this.filter.withAllOrg = response.organization.includeChildren;
            }
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.showDialog = true;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    notifySimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.singleSelect = false;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    }
    //预解析组织、候选人范围
    /**
     * @private
     * @return {?}
     */
    getOrganizationScope() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getOrganizationScope(this.workItemId, this.actionEntity.code).subscribe((/**
         * @param {?} orgList
         * @return {?}
         */
        (orgList) => {
            load.close();
            if (orgList.length) { // 全员会返回空数组
                this.filter.orgId = orgList[0].id;
                this.filter.withAllOrg = orgList[0].includeChildren;
            }
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.showDialog = true;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    }
    /**
     * 催办模拟
     * @private
     * @return {?}
     */
    urgeHandleSimulate() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        this.ifSelectNode = false;
        this.ifSelectUser = false;
        this.ifAssignUser = false;
        this.ifUrgeType = true;
        this.commentPlaceHolder = this.i18nService.getValue('task.urgeComment');
        this.showCommonComment = false;
        this.showAttachment = false;
        this.showUrgeMessageSubject = true;
        this.showSign = false;
        this.dialogHeight += this.dialogHeightBase * 2;
        /** @type {?} */
        const load = this.loadingService.show();
        /** @type {?} */
        let context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
        this.taskService.urgeHandleSimulate(context).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            load.close();
            this.urgeHandleResponse = re;
            if (re && re.urgeUsers && re.urgeUsers.length) {
                this.urgeMessageSubject = re.urgeUsers[0].urgeInfos[0].urgeMessageSubject;
                this.urgeMessageContent = re.urgeUsers[0].urgeInfos[0].urgeMessageContent;
                this.subjectEditable = re.urgeUsers[0].urgeInfos[0].subjectEditable;
                this.contentEditable = re.urgeUsers[0].urgeInfos[0].contentEditable;
                this.addReminder = re.urgeUsers[0].urgeInfos[0].addReminder;
                /** @type {?} */
                let urgeUsers = re.urgeUsers;
                /** @type {?} */
                let assignInfo = new AssigneeInfo();
                urgeUsers.forEach((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    if (user.anonymousText) {
                        user.name = user.anonymousText;
                        user.code = '';
                        user.orgName = '';
                    }
                }));
                assignInfo.assigneeUsers = urgeUsers;
                assignInfo.selectAssignee = urgeUsers.length > 1 ? true : false;
                assignInfo.multiSelect = true;
                this.assignInfos[0].assigneeInfo = assignInfo;
                this.assignInfos[0].assignees = urgeUsers.length == 1 ? urgeUsers : [];
                simulateSubject.showDialog = true;
            }
            else {
                this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
                simulateSubject.showDialog = false;
            }
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    }
    /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     * @private
     * @return {?}
     */
    completeSimulate() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        if (this.actionEntity.parameters && this.actionEntity.parameters.length) { // 是否允许加签
            this.actionEntity.parameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            (p) => {
                if (p.code === 'AddSignBehindAble' && p.value === 'true') {
                    this.ifSelectUser = true;
                    this.selectUserText = this.i18nService.getValue('task.addSign') + this.i18nService.getValue('task.person');
                    this.dialogHeight += this.dialogHeightBase;
                    /** @type {?} */
                    const load = this.loadingService.show();
                    //获取加签范围
                    this.taskService.getOrganizationScope(this.workItemId, 'AddSignBehind').subscribe((/**
                     * @param {?} orgList
                     * @return {?}
                     */
                    (orgList) => {
                        load.close();
                        if (orgList.length) { // 全员会返回空数组
                            this.filter.orgId = orgList[0].id;
                            this.filter.withAllOrg = orgList[0].includeChildren;
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        load.close();
                        this.taskService.error(error);
                    }));
                }
            }));
        }
        //驳回节点标签名称
        if (this.actionEntity.code === 'Back') {
            this.selectNodeText = this.actionEntity.name + this.i18nService.getValue('task.backNodeText');
        }
        /** @type {?} */
        const context = new CompleteContext();
        context.workItemId = this.workItemId;
        context.conclusionValue = this.actionEntity.code;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.completeSimulate(context).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.clearSimulateResult();
            this.response = response;
            if (this.task.priority) {
                this.enablePriority = true;
                this.dialogHeight += this.dialogHeightBase;
            }
            this.selectTargetAble = response.selectTargetAble;
            if (response.dynamicBackWardRuleConfig) {
                this.showBackWardConfig.dynamicBackWardRuleAble = response.dynamicBackWardRuleConfig.dynamicBackWardRuleAble;
                this.showBackWardConfig.displayPlaceholder = response.dynamicBackWardRuleConfig.resubmitEffect;
            }
            if (!response.simulationPaths.length) { // 模拟返回路径为空时
                this.ifSelectNode = false;
                this.ifAssignUser = false;
            }
            else { // 模拟返回了路径
                this.ifSelectNode = true;
                this.ifAssignUser = true;
                this.dialogHeight += this.dialogHeightBase * 2;
                this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
                 * @param {?} path
                 * @return {?}
                 */
                path => ({
                    id: path.nodeInfoList.map((/**
                     * @param {?} node
                     * @return {?}
                     */
                    node => node.activityDefinitionId)).join('，'),
                    name: path.nodeInfoList.map((/**
                     * @param {?} node
                     * @return {?}
                     */
                    node => node.activityDefinitionName)).join('，')
                })));
                // 处理默认分支，无默认分支返回-1
                /** @type {?} */
                let defaultIndex = response.simulationPaths.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.default));
                //没有默认分支，且不允许选择目标节点时，取其中一个node展示（子流程参与者为空情况等）
                if (defaultIndex < 0 && !response.selectTargetAble) {
                    defaultIndex = response.simulationPaths.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.nodeInfoList && a.nodeInfoList.length > 0));
                }
                if (defaultIndex > -1) {
                    this.selectedNodeId = this.destNodes[defaultIndex].id;
                    this.nodeDefaultValue = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
                    this.setAssignInfo(response.simulationPaths[defaultIndex].nodeInfoList);
                    if (response.simulationPaths[defaultIndex].id.startsWith('EndEvent')) { //下一环节为结束时，不显示办理人员，弹框高度缩小
                        this.dialogHeight = 340;
                    }
                }
            }
            //设置其他节点选人
            this.setOtherAssignInfo(response);
            this.dialogHeight = this.showBackWardConfig.dynamicBackWardRuleAble ? this.dialogHeight + this.dialogHeightBase : this.dialogHeight;
            simulateSubject.result = true;
            simulateSubject.showDialog = true;
            simulateSubject.dialogHeight = this.dialogHeight;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            simulateSubject.result = false;
            simulateSubject.showDialog = false;
            subject.next(simulateSubject);
            this.taskService.error(error);
        }));
        return subject.asObservable();
    }
    /**
     * 清空预解析结果
     * @private
     * @return {?}
     */
    clearSimulateResult() {
        this.assignInfos = [{
                // 重新预解析时清空
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
        this.destNodes = []; // 重新预解析时清空
        this.selectedNodeId = '';
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    setAssignInfo(nodeInfoList) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        nodeId => {
            /** @type {?} */
            const node = nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId === nodeId));
            if (node) {
                this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved,
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        }));
    }
    /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    setOtherAssignInfo(response) {
        this.otherAssignInfos = [];
        /** @type {?} */
        let tmpOtherAssignInfos = [];
        /** @type {?} */
        let otherAssignNodes = response.otherAssignNodes;
        if (otherAssignNodes && otherAssignNodes.length) {
            otherAssignNodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => {
                tmpOtherAssignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }));
            //保存最初的其他节点选人
            this.originOtherAssignInfos = [...tmpOtherAssignInfos];
            //其他节点与下一节点去重
            if (this.assignInfos && this.assignInfos.length) {
                tmpOtherAssignInfos = tmpOtherAssignInfos.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => this.assignInfos.findIndex((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => b.activityDefinitionId == a.activityDefinitionId)) < 0));
            }
            this.otherAssignInfos = tmpOtherAssignInfos;
        }
    }
    /**
     * 选完节点后，重新设置其他节点指派
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    setOtherAssignInfoAgain(nodeInfoList) {
        if (nodeInfoList && nodeInfoList.length) {
            this.otherAssignInfos = this.originOtherAssignInfos.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => nodeInfoList.findIndex((/**
             * @param {?} b
             * @return {?}
             */
            b => b.activityDefinitionId == a.activityDefinitionId)) < 0));
        }
    }
    /**
     * 点击确定后方法
     * @private
     * @return {?}
     */
    assignSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) {
            this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                assigneeIds: this.assignInfos[0].assignees.map((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => user.id)),
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.taskService.assignNextUsersByWorkItemId(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.i18nService.getValue('cueWords.operateSuccess'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    claimSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.claim(this.workItemId, this.comment).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    unClaimSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.unClaim(this.workItemId, this.comment).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success')),
                    this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    retrieveSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const retrieveContext = {
                workItemId: this.workItemId,
                comment: this.comment
            };
            this.taskService.retrieve(retrieveContext).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    transferSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                assignee: this.selectedUsers[0],
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.transfer(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    commentSubmit() {
        if (!this.comment || this.comment.length === 0) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum
            };
            this.taskService.comment(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.submitResult.isClose = false;
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
            this.comment = '';
        }
    }
    /**
     * @private
     * @return {?}
     */
    addSignFrontSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.addSign(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    addSignSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let payload = {
                workItemId: this.workItemId,
                comment: this.comment,
                conclusionValue: "Pass",
                signAssignees: this.selectedUsers,
                actionCode: "AddSignBehind",
                multiInstanceType: this.addSign.showMultiInstanceType ? this.addSign.curMultiInstType : this.addSign.originMultiInstType,
                counterSignRule: 'allPass',
                completedRule: 'all',
                allowSignToSign: this.addSign.allowSignToSIgn,
                activityName: '',
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.adhocAssignee(payload).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: true });
                load.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    readSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                hideComment: this.hideComment
            };
            this.taskService.readTask(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: true });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.taskService.error(error);
                this.subject.next({ result: false, isClose: false });
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    notifySubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                priority: this.selectedPriority
            };
            this.taskService.addSign(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: false });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * 催办提交
     * @private
     * @return {?}
     */
    urgeHandleSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleResponse.urgeUsers || !this.urgeHandleResponse.urgeUsers.length) { //没有符合条件的催办用户
            this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) { //没有选人
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.i18nService.getValue('task.receiver'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageSubject) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeSubject'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageContent) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeContent'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let context = new UrgeHandleContext();
            context.procInstId = this.processInstanceId;
            context.urgeUsers = this.urgeHandleResponse.urgeUsers.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => this.assignInfos[0].assignees.some((/**
             * @param {?} b
             * @return {?}
             */
            b => b.id == a.id))));
            context.urgeMessageSubject = this.urgeHandleComponent.urgeMessageSubject;
            context.urgeMessageContent = this.urgeHandleComponent.urgeMessageContent;
            context.addReminder = this.addReminder;
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.urgeHandle(context).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: true });
                load.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * 取消征询提交
     * @private
     * @return {?}
     */
    cancelConsultSubmit() {
        /** @type {?} */
        let context = new WorkItemExecuteParam();
        context.workItemId = this.workItemId;
        context.comment = this.comment;
        context.addendum = this.addendum;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.cancelConsult(context).subscribe((/**
         * @return {?}
         */
        () => {
            load.close();
            this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
            this.subject.next({ result: true, isClose: true });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.subject.next({ result: false, isClose: false });
            this.taskService.error(error);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    completeSubmit() {
        // 通过、驳回、其他第三方动作
        /** @type {?} */
        const context = {
            workItemId: this.workItemId,
            conclusionValue: this.actionEntity.code,
            comment: this.comment,
            signAssignees: this.selectedUsers,
            nextFlowNodes: [],
            otherAssignNodes: [],
            addendum: this.addendum,
            //动态驳回规则
            dynamicBackWardRule: this.showBackWardConfig.dynamicBackWardRuleAble ? this.showBackWardConfig.displayPlaceholder : '',
            priority: this.selectedPriority
        };
        if (context.signAssignees.length || !this.response || !this.response.simulationPaths.length) { // 加签 or 仿真返回为空，直接往下走
            this.completeTask(context);
        }
        else {
            if (this.selectedNodeId) { // 加签时，选择下一环节被禁用，destNodeId为undefined
                // 加签时，选择下一环节被禁用，destNodeId为undefined
                /** @type {?} */
                const nextFlowNodes = [];
                /** @type {?} */
                const nodes = this.selectedNodeId.split('，');
                for (let i = 0; i < nodes.length; i++) {
                    /** @type {?} */
                    const nextFlowNode = {
                        activityDefinitionId: nodes[i],
                        activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                        dependency: this.assignInfos[i].dependency,
                        selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: this.assignInfos[i].anonymous,
                        anonymousText: this.assignInfos[i].anonymousText
                    };
                    //节点找不到人，且异常提示时，并行网关暂不处理
                    if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                        if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                            /** @type {?} */
                            const str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                            this.notify.warning(str);
                            this.subject.next({ result: false, isClose: false });
                            return;
                        }
                    }
                    nextFlowNodes.push(nextFlowNode);
                }
                context.nextFlowNodes = nextFlowNodes;
            }
            //其他节点指派信息
            if (this.otherAssignInfos && this.otherAssignInfos.length) {
                for (let i = 0; i < this.otherAssignInfos.length; i++) {
                    /** @type {?} */
                    let nextFlowNode = {
                        activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                        activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                        dependency: this.otherAssignInfos[i].dependency,
                        selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: false,
                        anonymousText: ''
                    };
                    context.otherAssignNodes.push(nextFlowNode);
                }
            }
            if (this.response.selectTargetAble && this.destNodes.length > 1 && context.nextFlowNodes.length <= 0) { // 用户没选择跳转节点，不允许提交
                this.notify.warning(this.i18nService.getValue('cueWords.selectNode'));
                this.subject.next({ result: false, isClose: false });
            }
            else if (this.assignInfos.filter((/**
             * @param {?} info
             * @return {?}
             */
            info => info.assigneeInfo && info.assigneeInfo.selectAssignee && !info.assignees.length)).length) {
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
                this.subject.next({ result: false, isClose: false });
            }
            else {
                this.completeTask(context);
            }
        }
    }
    /**
     * @private
     * @param {?} completeContext
     * @return {?}
     */
    completeTask(completeContext) {
        /** @type {?} */
        const attachmentNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        entity => entity.code === 'AttachmentNecessary'));
        /** @type {?} */
        const certificationNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        entity => entity.code === 'CertificationNecessary'));
        /** @type {?} */
        const commentNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        entity => entity.code === 'CommentNecessary'));
        if (attachmentNecessary && attachmentNecessary.value === 'true' && (!completeContext.addendum.attachment || completeContext.addendum.attachment === '[]')) {
            this.notify.warning(this.i18nService.getValue('cueWords.attachmentsRequired'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (commentNecessary && commentNecessary.value === 'true' && !completeContext.comment) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            if (certificationNecessary && certificationNecessary.value === 'true') {
                this.verifySignature((/**
                 * @return {?}
                 */
                () => {
                    completeContext.verifySigned = this.verifySigned;
                    this.taskComplete(completeContext);
                }));
                /** @type {?} */
                const msg = [this.workItemId];
                gspCA.getSignedMsg(msg);
            }
            else {
                this.taskComplete(completeContext);
            }
        }
    }
    /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    executeFormActionsAfterCompleteTask(handler) {
        // 如果表单注册了事件
        if (this.origin == ActionOrigin.TaskForm && this.ifRegistered && this.formObject) {
            /** @type {?} */
            const postActions = this.billMethodConfigs.filter((/**
             * @param {?} action
             * @return {?}
             */
            action => action.action === this.actionEntity.code && action.executionTime === 'Post')).sort((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            (x, y) => x.sortOrder - y.sortOrder));
            if (postActions && postActions.length) {
                this.executePostFormActions(postActions, handler);
            }
        }
        else {
            handler();
        }
    }
    /**
     * @private
     * @param {?} formActions
     * @param {?} hander
     * @return {?}
     */
    executePostFormActions(formActions, hander) {
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const data = re.data.data;
                if (data.result === true) {
                    this.executePostFormActions(formActions, hander);
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批后表单操作执行失败！');
                }
            }));
            // 执行表单动作
            /** @type {?} */
            const formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            hander();
        }
    }
    //帮助选人后
    /**
     * @param {?} data
     * @return {?}
     */
    afterConfirmForTransfer(data) {
        if (data && data.length) {
            this.selectedUsers = data.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.id));
            this.selectedUserNgModule = data.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.name)).join();
        }
        else {
            this.selectedUsers = [];
        }
        if (this.actionEntity.code == 'AddSign' && this.addSign.originMultiInstType == MultiInstanceType.Preempt.toString() && this.selectedUsers.length > 1) {
            this.addSign.showMultiInstanceType = true;
        }
        else {
            this.addSign.showMultiInstanceType = false;
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.submitResult.isClose = false;
        this.subject.next(this.submitResult);
        return this.subject.asObservable();
    }
    /**
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    // 下一环节选择后事件
    /**
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.selectedNodeId = data && data.data && data.data.id;
        if (this.response.simulationPaths[data.index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        node => node.resolved === true))) { // 已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index].nodeInfoList);
            this.setOtherAssignInfoAgain(this.response.simulationPaths[data.index].nodeInfoList);
        }
        else {
            /** @type {?} */
            const nodeIds = this.selectedNodeId.split('，').map((/**
             * @param {?} node
             * @return {?}
             */
            node => `"${node}"`)).join();
            // 注意一个中文逗号一个英文逗号
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.getSimulationAssigneeInfo(this.workItemId, nodeIds).subscribe((/**
             * @param {?} nodeInfoList
             * @return {?}
             */
            (nodeInfoList) => {
                load.close();
                this.setAssignInfo(nodeInfoList);
                this.setOtherAssignInfoAgain(nodeInfoList);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.taskService.error(error);
            }));
        }
    }
    // 下一环节清空后事件
    /**
     * @return {?}
     */
    selectNodeClear() {
        this.selectedNodeId = null;
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
    }
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirmForAssign(data, index) {
        this.assignInfos[index].assignees = data;
    }
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirmForOtherAssign(data, index) {
        this.otherAssignInfos[index].assignees = data;
    }
    /**
     * 上传附件后事件
     * @param {?} data
     * @return {?}
     */
    addAttachment(data) {
        this.addendum.attachment = JSON.stringify(data);
    }
    /**
     * 手写签名后事件
     * @param {?} data
     * @return {?}
     */
    addSignature(data) {
        if (data) {
            /** @type {?} */
            const signInfo = {
                id: data,
                waterMarking: null
            };
            this.addendum.signature = JSON.stringify(signInfo);
        }
        else {
            this.addendum.signature = '';
        }
    }
    // 以服务方式打开组件时，左右加上padding
    /**
     * @return {?}
     */
    addPadding() {
        this.cls = 'f-utils-fill-flex-column h-100 px-4 py-2';
    }
    /**
     * @private
     * @param {?} workItemId
     * @param {?} action
     * @return {?}
     */
    sendMessage(workItemId, action) {
        if (this.iframe) {
            /** @type {?} */
            const iframeWindow = this.iframe.nativeElement.contentWindow;
            /** @type {?} */
            const message = {
                target: workItemId,
                data: {
                    command: action.method,
                    arguments: action.methodParameters
                }
            };
            iframeWindow.postMessage(message, this.POST_MESSAGE_TARGET);
        }
        else {
            this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
            this.notify.warning('请等待表单加载完成后再试');
        }
    }
    // 提交审批前的数字签名及验签
    /**
     * @param {?} handler
     * @return {?}
     */
    verifySignature(handler) {
        /** @type {?} */
        const that = this;
        if (((/** @type {?} */ (window))).gspframeworkService &&
            ((/** @type {?} */ (window))).gspframeworkService.rtf) {
            ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', (/**
             * @param {?} signedData
             * @return {?}
             */
            function signMsgOver(signedData) {
                if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                    // 证书对象
                    /** @type {?} */
                    const cert = gspCA.getCurCert();
                    // 验签参数
                    that.verifySigned = {
                        // 要验证的证书base64编码的字符流(certkey)
                        certBase64Info: gspCA.getCertBase64(cert),
                        // 签名原信息
                        msg: [that.workItemId],
                        // 要签名后信息
                        signedmsg: signedData[1][0],
                        // 用户使用场景，目前未使用，可以为空
                        useCase: null,
                    };
                    handler();
                }
                else {
                    that.loadingService.close();
                    that.subject.next({ result: false, isClose: false });
                    that.notify.error(signedData[1]);
                    throw new Error(signedData[1]);
                }
            }));
        }
    }
    // 通过、驳回、其他第三方动作
    /**
     * @param {?} completeContext
     * @return {?}
     */
    taskComplete(completeContext) {
        this.taskService.complete(completeContext).subscribe((/**
         * @param {?} cr
         * @return {?}
         */
        (cr) => {
            this.executeFormActionsAfterCompleteTask((/**
             * @return {?}
             */
            () => {
                if (cr.needInteraction) { // 通过后指派场景
                    if (this.origin == ActionOrigin.TaskCenter) {
                        this.subject.next({ result: true, isClose: false });
                    }
                    else {
                        this.subject.next({ result: false, isClose: false }); //关掉loading
                    }
                    this.notify.info(this.i18nService.getValue('cueWords.select')
                        + '【' + cr.nextFlowNodes[0].activityDefinitionName + '】'
                        + this.i18nService.getValue('cueWords.processor'));
                    /** @type {?} */
                    let task = new TaskEntity();
                    /** @type {?} */
                    let action = new TaskAction();
                    task.sourceId = cr.nextFlowNodes[0].assigneeInfo.workItemId;
                    action.code = 'AssignUser';
                    action.name = this.i18nService.getValue('cueWords.assignUser');
                    this.handlerService.execute(task, action).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    re => {
                        if (re) {
                            this.subject.next({ result: true, isClose: true });
                        }
                    }));
                }
                else {
                    if (completeContext.conclusionValue === 'Pass') {
                        this.notify.success(this.i18nService.getValue('cueWords.successPass'));
                    }
                    else if (completeContext.conclusionValue === 'Back') {
                        this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                    }
                    else {
                        this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                    }
                    this.subject.next({ result: true, isClose: true });
                }
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.subject.next({ result: false, isClose: false });
            this.taskService.error(error);
        }));
    }
}
/**
 * 消息监听处理方法
 */
TaskExecuteComponent.func = null;
TaskExecuteComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-task-execute',
                template: "<!-- \u6279\u91CF\u5BA1\u6279\u65F6\u63D0\u793A -->\r\n<div *ngIf=\"taskList?.length > 20\" class=\"wf-task-batch-message\">\r\n  <span class=\"f-icon f-icon-info\"></span>\r\n  <span class=\"wf-task-batch-selected\">{{\r\n    \"batchSubmit.selected\" | translate\r\n  }}</span>\r\n  <span class=\"wf-task-batch-rows\">{{ taskList.length }}</span>\r\n  <span>{{ \"batchSubmit.item\" | translate }}</span>\r\n  <span>{{ \"batchSubmit.time\" | translate }}</span>\r\n  <span class=\"wf-task-batch-time\">{{ batchSecond }}</span>\r\n  <span>{{ \"batchSubmit.second\" | translate }}</span>\r\n</div>\r\n\r\n<!-- \u610F\u89C1\u8F93\u5165 -->\r\n<wf-comment\r\n  *ngIf=\"!showUrgeMessageSubject\"\r\n  class=\"w-100\"\r\n  name=\"comment\"\r\n  [(ngModel)]=\"comment\"\r\n  [defaultComment]=\"defaultComment\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [processInstanceId]=\"processInstanceId\"\r\n  [showAttachment]=\"showAttachment\"\r\n  [showCommonComment]=\"showCommonComment\"\r\n  [showSign]=\"showSign\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n  [TaskCenterConfig]=\"configList\"\r\n  [curUserId]=\"\r\n    task ? task.owner : taskList && taskList.length ? taskList[0].owner : ''\r\n  \"\r\n  [taskOrigin]=\"origin\"\r\n  (attachment)=\"addAttachment($event)\"\r\n  (signature)=\"addSignature($event)\"\r\n>\r\n</wf-comment>\r\n\r\n<!--\u50AC\u529E\u6D88\u606F-->\r\n<urge-handle\r\n  *ngIf=\"showUrgeMessageSubject\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [showMessageSubject]=\"showUrgeMessageSubject\"\r\n  [urgeMessageSubject]=\"urgeMessageSubject\"\r\n  [urgeMessageContent]=\"urgeMessageContent\"\r\n  [subjectEditable]=\"subjectEditable\"\r\n  [contentEditable]=\"contentEditable\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n>\r\n</urge-handle>\r\n\r\n<!-- \u5BA1\u6279\u8BB0\u5F55\u9690\u85CF\uFF08\u4EC5\u5BF9\u81EA\u5DF1\u53EF\u89C1\uFF09 -->\r\n<div\r\n  *ngIf=\"ifShowCommentToMySelf\"\r\n  class=\"custom-control custom-checkbox custom-control-inline\"\r\n  style=\"margin-bottom: 10px\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"custom-control-input\"\r\n    [(ngModel)]=\"hideComment\"\r\n    id=\"taskcenterhidecomment\"\r\n    name=\"taskcenterhidecomment\"\r\n  />\r\n  <label class=\"custom-control-label\" for=\"taskcenterhidecomment\">{{\r\n    \"static.hideComment\" | translate\r\n  }}</label>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282 -->\r\n<div *ngIf=\"ifSelectNode\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">{{ selectNodeText }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"nodeDefaultValue\"\r\n      [data]=\"destNodes\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'id'\"\r\n      [idField]=\"'id'\"\r\n      [readonly]=\"selectTargetAble && destNodes.length > 1 ? false : true\"\r\n      (selectChange)=\"selectNodeChange($event)\"\r\n      (clear)=\"selectNodeClear()\"\r\n      [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"ifAssignUser || ifUrgeType\">\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"\r\n      assignInfos.length > 1\r\n        ? assignInfo.activityDefinitionName\r\n        : ifUrgeType\r\n        ? ('task.urgeText' | translate)\r\n        : ''\r\n    \"\r\n    [ifShowBlank]=\"false\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u79FB\u4EA4\u3001\u52A0\u7B7E\u3001\u5F81\u8BE2\u3001\u77E5\u4F1A \u4EBA\u5458\u5E2E\u52A9-->\r\n<lib-assignee-info\r\n  *ngIf=\"ifSelectUser\"\r\n  [activityName]=\"selectUserText\"\r\n  [singleSelect]=\"singleSelect\"\r\n  [filter]=\"filter\"\r\n  [disabled]=\"false\"\r\n  [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n  [allowGlobalAssign]=\"true\"\r\n  [wfContext]=\"wfContext\"\r\n  (afterConfirm)=\"afterConfirmForTransfer($event)\"\r\n>\r\n</lib-assignee-info>\r\n\r\n<!-- \u52A0\u7B7E -->\r\n<!-- \u5BA1\u6279\u7B56\u7565 -->\r\n<div *ngIf=\"addSign.showMultiInstanceType\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.multiInstanceType\" | translate }}\r\n  </div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-radiogroup\r\n      [(ngModel)]=\"addSign.curMultiInstType\"\r\n      [data]=\"addSign.multiInstanceType\"\r\n      [horizontal]=\"true\"\r\n    >\r\n    </farris-radiogroup>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5141\u8BB8\u518D\u52A0\u7B7E -->\r\n<div *ngIf=\"addSign.showSignToSign\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.allowSignToSign\" | translate }}{{ actionEntity.name }}\r\n  </div>\r\n  <farris-switch [(ngModel)]=\"addSign.allowSignToSIgn\" [size]=\"'small'\">\r\n  </farris-switch>\r\n</div>\r\n\r\n<!-- \u9A73\u56DE\u540E\u518D\u6B21\u63D0\u4EA4\u65F6\u76F4\u63A5\u56DE\u5230\u672C\u8282\u70B9 -->\r\n<div\r\n  *ngIf=\"showBackWardConfig.dynamicBackWardRuleAble\"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">{{ showBackWardConfig.title }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"showBackWardConfig.displayPlaceholder\"\r\n      [data]=\"showBackWardConfig.backWardRules\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'value'\"\r\n      [idField]=\"'value'\"\r\n      [readonly]=\"false\"\r\n      [enableClear]=\"false\"\r\n      [placeholder]=\"showBackWardConfig.displayPlaceholder\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u7D27\u6025\u7A0B\u5EA6\uFF0C\u4E0B\u4E00\u73AF\u8282\u4E3A\u7ED3\u675F\u65F6\u4E0D\u5C55\u793A -->\r\n<div\r\n  *ngIf=\"\r\n    task?.priority &&\r\n    enablePriority &&\r\n    task.priorityItemList &&\r\n    !selectedNodeId?.startsWith('EndEvent')\r\n  \"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"task.priority\" | translate }}\r\n  </div>\r\n  <farris-radiogroup\r\n    [(ngModel)]=\"selectedPriority\"\r\n    [data]=\"task.priorityItemList\"\r\n    [horizontal]=\"true\"\r\n  >\r\n  </farris-radiogroup>\r\n</div>\r\n\r\n<!-- \u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"otherAssignInfos?.length\">\r\n  <div class=\"wf-task-splitter\">\r\n    {{ \"startProcess.otherNodesAssign\" | translate\r\n    }}<span class=\"wf-task-splitter-line\"></span>\r\n  </div>\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"assignInfo.activityDefinitionName\"\r\n    [ifShowBlank]=\"true\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForOtherAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #taskExecuteButtons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"submit()\"\r\n    [disabled]=\"submitDisable\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
            }] }
];
/** @nocollapse */
TaskExecuteComponent.ctorParameters = () => [
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService },
    { type: WfTaskHandlerService },
    { type: LoadingService },
    { type: MessagerService },
    { type: Injector }
];
TaskExecuteComponent.propDecorators = {
    buttons: [{ type: ViewChild, args: ['taskExecuteButtons',] }],
    sysUserHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    urgeHandleComponent: [{ type: ViewChild, args: [UrgeHandleComponent,] }],
    cls: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /**
     * 消息监听处理方法
     * @type {?}
     * @private
     */
    TaskExecuteComponent.func;
    /** @type {?} */
    TaskExecuteComponent.prototype.task;
    /** @type {?} */
    TaskExecuteComponent.prototype.workItemId;
    /** @type {?} */
    TaskExecuteComponent.prototype.processInstanceId;
    /** @type {?} */
    TaskExecuteComponent.prototype.actionEntity;
    /** @type {?} */
    TaskExecuteComponent.prototype.comment;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.MAX_COMMENT_LENGTH;
    /** @type {?} */
    TaskExecuteComponent.prototype.defaultComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.wfCacheComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.currentDefaultValue;
    /** @type {?} */
    TaskExecuteComponent.prototype.taskList;
    /** @type {?} */
    TaskExecuteComponent.prototype.batchSecond;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifSelectNode;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifSelectUser;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifAssignUser;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifUrgeType;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifShowCommentToMySelf;
    /** @type {?} */
    TaskExecuteComponent.prototype.singleSelect;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectTargetAble;
    /** @type {?} */
    TaskExecuteComponent.prototype.hideComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.filter;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedUsers;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedUserNgModule;
    /** @type {?} */
    TaskExecuteComponent.prototype.buttons;
    /** @type {?} */
    TaskExecuteComponent.prototype.sysUserHelp;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeHandleComponent;
    /** @type {?} */
    TaskExecuteComponent.prototype.subject;
    /** @type {?} */
    TaskExecuteComponent.prototype.submitResult;
    /** @type {?} */
    TaskExecuteComponent.prototype.bindingData;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectNodeText;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectUserText;
    /** @type {?} */
    TaskExecuteComponent.prototype.commentPlaceHolder;
    /** @type {?} */
    TaskExecuteComponent.prototype.showAttachment;
    /** @type {?} */
    TaskExecuteComponent.prototype.showSign;
    /** @type {?} */
    TaskExecuteComponent.prototype.showCommonComment;
    /** @type {?} */
    TaskExecuteComponent.prototype.textAreaHeight;
    /** @type {?} */
    TaskExecuteComponent.prototype.billMethodConfigs;
    /** @type {?} */
    TaskExecuteComponent.prototype.nodeDefaultValue;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedNodeId;
    /** @type {?} */
    TaskExecuteComponent.prototype.destNodes;
    /** @type {?} */
    TaskExecuteComponent.prototype.dialogHeight;
    /** @type {?} */
    TaskExecuteComponent.prototype.dialogHeightBase;
    /** @type {?} */
    TaskExecuteComponent.prototype.addendum;
    /** @type {?} */
    TaskExecuteComponent.prototype.groupIcon;
    /** @type {?} */
    TaskExecuteComponent.prototype.assignInfos;
    /** @type {?} */
    TaskExecuteComponent.prototype.otherAssignInfos;
    /** @type {?} */
    TaskExecuteComponent.prototype.originOtherAssignInfos;
    /** @type {?} */
    TaskExecuteComponent.prototype.response;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeHandleResponse;
    /** @type {?} */
    TaskExecuteComponent.prototype.formObject;
    /** @type {?} */
    TaskExecuteComponent.prototype.ifRegistered;
    /** @type {?} */
    TaskExecuteComponent.prototype.configList;
    /** @type {?} */
    TaskExecuteComponent.prototype.verifySigned;
    /** @type {?} */
    TaskExecuteComponent.prototype.submitDisable;
    /** @type {?} */
    TaskExecuteComponent.prototype.addSign;
    /** @type {?} */
    TaskExecuteComponent.prototype.showBackWardConfig;
    /**
     * 任务催办时使用
     * @type {?}
     */
    TaskExecuteComponent.prototype.showUrgeMessageSubject;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeMessageSubject;
    /** @type {?} */
    TaskExecuteComponent.prototype.urgeMessageContent;
    /** @type {?} */
    TaskExecuteComponent.prototype.addReminder;
    /** @type {?} */
    TaskExecuteComponent.prototype.subjectEditable;
    /** @type {?} */
    TaskExecuteComponent.prototype.contentEditable;
    /** @type {?} */
    TaskExecuteComponent.prototype.wfContext;
    /** @type {?} */
    TaskExecuteComponent.prototype.enablePriority;
    /** @type {?} */
    TaskExecuteComponent.prototype.cls;
    /** @type {?} */
    TaskExecuteComponent.prototype.POST_MESSAGE_TARGET;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.messageSubject;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.language;
    /** @type {?} */
    TaskExecuteComponent.prototype.actionToken;
    /** @type {?} */
    TaskExecuteComponent.prototype.simulateToken;
    /** @type {?} */
    TaskExecuteComponent.prototype.selectedPriority;
    /**
     * 监听事件处理
     * @type {?}
     */
    TaskExecuteComponent.prototype.eventHandler;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.i18nService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.handlerService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    TaskExecuteComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,