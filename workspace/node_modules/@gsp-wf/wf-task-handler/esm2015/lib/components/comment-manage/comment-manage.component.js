/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { of, Subject } from 'rxjs';
import { CommonComment } from '../../entity/comment';
import { CommonCommentFilter } from '../../entity/commonCommentFilter';
import { I18nService } from '../../service/i18n/i18n.service';
import { TaskService } from '../../service/task.service';
export class CommentManageComponent {
    //取消确认按钮
    /**
     * @param {?} i18nService
     * @param {?} taskService
     * @param {?} notify
     * @param {?} loadingService
     */
    constructor(i18nService, taskService, notify, loadingService) {
        this.i18nService = i18nService;
        this.taskService = taskService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.commentList = [];
        this.originCommentList = [];
        this.commentColumns = [];
        this.confirmSubject = new Subject(); //点击确定
        //点击确定
        this.cancelSubject = new Subject(); //点击取消
        /**
         * 系统预置的不允许编辑删除
         * @param data data.rowData为实体数据
         * @return
         */
        this.beforeEdit = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data.rowData.userId == '*') {
                return of(false);
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.commentColumns = [{
                field: 'message',
                width: 100,
                title: this.i18nService.getValue('comment.static.content'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'userId',
                width: 20,
                title: this.i18nService.getValue('comment.static.type'),
                template: this.commentTypeCell
            }, {
                field: 'operate',
                width: 20,
                title: this.i18nService.getValue('comment.static.operate'),
                template: this.commentOperateCell
            }];
        //加载意见列表
        this.loadComments();
    }
    /**
     * 点击常用意见，获取用户常用意见列表
     * @return {?}
     */
    loadComments() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getCommentList(this.filter).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            load.close();
            this.commentList = data;
            this.originCommentList = JSON.parse(JSON.stringify(data));
        }), (/**
         * @return {?}
         */
        () => {
            load.close();
        }));
    }
    /**
     * 新增一条常用意见
     * @return {?}
     */
    addCommonComment() {
        /** @type {?} */
        const newEntity = CommonComment.newEntity();
        newEntity.sortOrder = this.commentList.length + 1;
        if (this.filter && this.filter.type) {
            newEntity.type = this.filter.type;
        }
        this.commentList = this.commentList.concat(newEntity);
        //新增后直接编辑单元格
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.dataGrid.editCell(newEntity.id, 'message');
        }), 100);
    }
    /**
     * 删除一条意见 data.rowData
     * @param {?} data
     * @return {?}
     */
    deleteComment(data) {
        if (data.rowData.userId !== '*') {
            this.commentList = this.commentList.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id != data.rowData.id));
            this.originCommentList = this.originCommentList.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id != data.rowData.id));
            this.dataGrid.loadData(this.commentList);
            this.taskService.deleteComment(data.rowData.id).subscribe((/**
             * @return {?}
             */
            () => { }));
        }
    }
    /**
     * 常用意见点击保存
     * @return {?}
     */
    saveCommonComment() {
        this.dataGrid.endCellEdit();
        this.commentList = this.commentList.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.message));
        this.commentList.forEach((/**
         * @param {?} comment
         * @return {?}
         */
        comment => {
            if (this.taskService.getBytesLength(comment.message) > 255) {
                this.notify.warning(this.i18nService.getValue('cueWords.commonCommentTooLong'));
                this.dataGrid.editCell(comment.id, 'message');
                throw new Error("");
            }
        }));
        this.commentList.forEach((/**
         * @param {?} comment
         * @return {?}
         */
        comment => {
            /** @type {?} */
            let origin = this.originCommentList.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id == comment.id));
            if (!origin || comment.message !== origin.message || comment.sortOrder != origin.sortOrder) {
                this.taskService.addComment(comment).subscribe((/**
                 * @return {?}
                 */
                () => { }));
            }
        }));
        //此处已返回给farris
        this.confirmSubject.next({ action: 'submit', data: this.commentList });
    }
    /**
     * 点击取消（此处已返回给farris）
     * @return {?}
     */
    clickCancel() {
        this.commentList = this.commentList.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.message));
        this.cancelSubject.next({ action: 'cancel', data: this.originCommentList });
    }
    /**
     * @return {?}
     */
    getConfirmSUbject() {
        return this.confirmSubject.asObservable();
    }
    /**
     * @return {?}
     */
    getCancelSubject() {
        return this.cancelSubject.asObservable();
    }
}
CommentManageComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-comment-manage',
                template: "<div class=\"task-comment-div\">\r\n  <div class=\"task-comment-datagrid-div\">\r\n    <farris-datagrid\r\n      #dataGrid\r\n      [data]=\"commentList\"\r\n      [columns]=\"commentColumns\"\r\n      [editable]=\"true\"\r\n      [fit]=\"true\"\r\n      [editMode]=\"'cell'\"\r\n      [pagination]=\"false\"\r\n      [fitColumns]=\"true\"\r\n      [clickToEdit]=\"true\"\r\n      [beforeEdit]=\"beforeEdit\"\r\n      [idField]=\"'id'\"\r\n    >\r\n    </farris-datagrid>\r\n  </div>\r\n  <div\r\n    class=\"task-comment-add task-comment-add-common\"\r\n    (click)=\"addCommonComment()\"\r\n  >\r\n    <span class=\"f-icon f-icon-plus mr-1\"></span>\r\n    <span>{{ \"comment.static.clickToAdd\" | translate }}</span>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7C7B\u522B -->\r\n<ng-template #commentTypeCell let-ctx>\r\n  <div>\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId === '*'\"\r\n      class=\"task-comment-type task-comment-type-blue\"\r\n      >{{ \"comment.static.public\" | translate }}</span\r\n    >\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId !== '*'\"\r\n      class=\"task-comment-type task-comment-type-yellow\"\r\n      >{{ \"comment.static.private\" | translate }}</span\r\n    >\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u64CD\u4F5C -->\r\n<ng-template #commentOperateCell let-ctx>\r\n  <div\r\n    *ngIf=\"ctx.rowData.userId !== '*'\"\r\n    class=\"btn-link\"\r\n    style=\"padding: 5px 0\"\r\n    (click)=\"deleteComment(ctx)\"\r\n  >\r\n    {{ \"comment.static.delete\" | translate }}\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4\u6309\u94AE -->\r\n<ng-template #formButtonRef>\r\n  <button class=\"btn btn-secondary mr-2\" (click)=\"clickCancel()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-primary\" (click)=\"saveCommonComment()\">\r\n    {{ \"comment.static.confirm\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".task-comment-div{display:flex;flex-direction:column;height:100%}.task-comment-datagrid-div{display:flex;flex-grow:0;overflow:hidden;padding:0 24px;height:100%}.task-comment-type{padding:2px 6px;border-radius:4px;font-size:12px}.task-comment-type-blue{background:#eef5ff;border:0 solid #aed1ff;color:#5ea4ff}.task-comment-type-yellow{background:#fef5ec;border:0 solid #fad0a1;color:#f5a144}.task-comment-add{display:flex;justify-content:center;align-items:center;margin:0 24px;cursor:pointer;overflow:hidden;font-size:12px;text-align:center;padding:6px;border-radius:4px}.task-comment-add-common{color:#a8adb8;background:#f4f6fc;border:1px dashed #d2d7e2}.task-comment-add:hover{background:rgba(238,245,255,.8);border:1px solid rgba(82,157,255,.4)}"]
            }] }
];
/** @nocollapse */
CommentManageComponent.ctorParameters = () => [
    { type: I18nService },
    { type: TaskService },
    { type: NotifyService },
    { type: LoadingService }
];
CommentManageComponent.propDecorators = {
    filter: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: ['dataGrid',] }],
    commentTypeCell: [{ type: ViewChild, args: ['commentTypeCell',] }],
    commentOperateCell: [{ type: ViewChild, args: ['commentOperateCell',] }],
    buttons: [{ type: ViewChild, args: ['formButtonRef',] }]
};
if (false) {
    /** @type {?} */
    CommentManageComponent.prototype.commentList;
    /** @type {?} */
    CommentManageComponent.prototype.originCommentList;
    /** @type {?} */
    CommentManageComponent.prototype.commentColumns;
    /** @type {?} */
    CommentManageComponent.prototype.confirmSubject;
    /** @type {?} */
    CommentManageComponent.prototype.cancelSubject;
    /** @type {?} */
    CommentManageComponent.prototype.filter;
    /** @type {?} */
    CommentManageComponent.prototype.dataGrid;
    /** @type {?} */
    CommentManageComponent.prototype.commentTypeCell;
    /** @type {?} */
    CommentManageComponent.prototype.commentOperateCell;
    /** @type {?} */
    CommentManageComponent.prototype.buttons;
    /**
     * 系统预置的不允许编辑删除
     * \@param data data.rowData为实体数据
     * \@return
     * @type {?}
     */
    CommentManageComponent.prototype.beforeEdit;
    /**
     * @type {?}
     * @private
     */
    CommentManageComponent.prototype.i18nService;
    /**
     * @type {?}
     * @private
     */
    CommentManageComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    CommentManageComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    CommentManageComponent.prototype.loadingService;
}
//# sourceMappingURL=data:application/json;base64,