import { BsModalService } from '@farris/ui-modal';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { CommonModule } from '@angular/common';
import { DataTableModule } from '@farris/ui-datatable';
import { PaginationModule } from '@farris/ui-pagination';
import { ComboListModule } from '@farris/ui-combo-list';
import { InputGroupModule } from '@farris/ui-input-group';
import { DatagridModule } from '@farris/ui-datagrid';
import { EditorTypes, DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { FarrisFormsModule } from '@farris/ui-forms';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisSectionModule } from '@farris/ui-section';
import { WfApprovalLogsService, WfApprovalLogsModule } from '@gsp-wf/wf-approval-logs';
import { ForecastProcessPayload, WFFlowchartService, UiFlowchartModule } from '@gsp-wf/ui-flowchart';
import { ActionBaseImplComponent, ActionOrigin, TaskImplApiModule } from '@gsp-wf/task-impl-api';
import { FrameworkService, CommonSharedModule, FrmEventBus, FuncsService } from '@gsp-sys/rtf-common';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { forkJoin, Subject, BehaviorSubject, of } from 'rxjs';
import { switchMap, throttleTime } from 'rxjs/operators';
import { Injectable, Component, Input, ViewChild, HostBinding, Injector, ComponentFactoryResolver, ApplicationRef, Pipe, Optional, Output, EventEmitter, ChangeDetectorRef, Directive, HostListener, forwardRef, NgModule } from '@angular/core';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { UploadDialogService } from '@gsp-svc/formdoc-upload';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { WfSignModule } from '@gsp-wf/wf-sign';
import { AvatarModule } from '@farris/ui-avatar';
import { DownloadService } from '@gsp-svc/file-load';
import { LoadingService, LoadingModule } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskService {
    /**
     * @param {?} httpSvc
     * @param {?} message
     */
    constructor(httpSvc, message) {
        this.httpSvc = httpSvc;
        this.message = message;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getUsersByIds(ids) {
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map((/**
         * @param {?} id
         * @return {?}
         */
        id => this.httpSvc.get(pathUrl + `/${id}` + `?mode=0002`))));
    }
    /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    getWorkItemActions(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/actions`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行审批操作
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    complete(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行审批预解析
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    completeSimulate(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete-simulation`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    getDestinationScope(workItemId, action) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/nextNodes/${action}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据节点ID获取指定参与者的结果
     * @param {?} workItemId
     * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
     * @return {?} 指派信息的数组 re: FlowNodeInfo[]
     */
    getSimulationAssigneeInfo(workItemId, nodeId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/simulation-assigneeInfo?nodeIds=[${nodeId}]`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行征询、知会
     * @param {?} context 上下文
     * @return {?}
     */
    addSign(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/counterSignAdd`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 已阅
     * @param {?} context 参数
     * @return {?}
     */
    readTask(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/read`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 查询单据信息（方法名不要动，其他地方有引用）
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    getTaskFormInfo(workItemId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let cacheCode = "gspWfTaskFormInfo" + workItemId;
        /** @type {?} */
        const taskForm = localStorage.getItem(cacheCode);
        if (taskForm) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(taskForm));
            }), 10);
        }
        else {
            /** @type {?} */
            const formParUrl = `/api/runtime/wf/v1.0/workItems/${workItemId}/formInfo`;
            this.httpSvc.get(formParUrl).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                subject.next(re);
                localStorage.setItem(cacheCode, JSON.stringify(re));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     * @return {?}
     */
    getAssigneeInfo(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${taskId}/assigneeInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签移交范围设置
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    getOrganizationScope(workItemId, actionCode) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/organizationScope/${actionCode}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param {?} procInstId 流程实例id
     * @param {?} state 任务状态 2或5
     * @return {?}
     */
    getTaskByProcInstId(procInstId, state) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/processInstanceId?procInstId=${procInstId}&state=${state}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据workitemID获取任务实体
     * @param {?} workItemId
     * @return {?}
     */
    getTaskByWorkItemId(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/sourceId/${workItemId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    assignNextUsersByWorkItemId(assigneesPa) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/assignUser`;
        return this.httpSvc.post(url, assigneesPa);
    }
    /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    retrieve(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/retrieve`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    transfer(transferContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/transfer`;
        return this.httpSvc.post(url, transferContext);
    }
    /**
     * 任务评论
     * @param {?} commentContext
     * @return {?}
     */
    comment(commentContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/comment`;
        return this.httpSvc.post(url, commentContext);
    }
    /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @param {?} comment
     * @return {?}
     */
    claim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/claim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @param {?} comment
     * @return {?}
     */
    unClaim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/unclaim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 报错提示
     * @param {?} error
     * @return {?}
     */
    error(error) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcessSimulate(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess-simulation`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    cancelSubmit(param) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/cancelSubmit`;
        return this.httpSvc.post(url, param);
    }
    /**
     * @return {?}
     */
    static newId() {
        /** @type {?} */
        const S4 = (/**
         * @return {?}
         */
        () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1));
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * 获取用户常用意见列表
     * @param {?=} filter
     * @return {?}
     */
    getCommentList(filter) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/commonComments`;
        filter && filter.type && (url += `?type=${filter.type}`);
        return this.httpSvc.get(url);
    }
    /**
     * 添加常用意见
     * @param {?} comment
     * @return {?}
     */
    addComment(comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        return this.httpSvc.post(url, comment);
    }
    /**
     * 删除一条常用意见
     * @param {?} id 常用意见id
     * @return {?}
     */
    deleteComment(id) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments/${id}`;
        return this.httpSvc.delete(url, null);
    }
    /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    getTaskCenterConfigByCode(code, ownerType, ownerId) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/code?code=${code}`;
        ownerType && (url += `&ownerType=${ownerType}`);
        ownerId && (url += `&ownerId=${ownerId}`);
        return this.httpSvc.get(url);
    }
    /**
     * 获取系统级别配置（缓存为一天）
     * @return {?}
     */
    getAllTaskCenterConfig() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskAllConfig";
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/task/v1.0/task-center-setting/all?ownerType=all&ownerId=*`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                localStorage.setItem(todayCode, JSON.stringify(re));
                subject.next(re);
                this.removeConfig(code);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取任务分类级别配置
     * @param {?} categoryId
     * @return {?}
     */
    getTaskCategoryCenterConfig(categoryId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskCategoryConfig" + categoryId;
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/task/v1.0/task-center-setting/all`;
            url += `?ownerType=category&ownerId=${categoryId}`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                localStorage.setItem(todayCode, JSON.stringify(re));
                subject.next(re);
                this.removeConfig(code);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取任务中心个人用户配置（缓存为一天）
     * @return {?}
     */
    getAllUserConfig() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskUserConfig";
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(configStr));
            }), 10);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/task/v1.0/task-center-setting/all`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                localStorage.setItem(todayCode, JSON.stringify(re));
                this.removeConfig(code);
                subject.next(re);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 添加用户级别自定义配置
     * @param {?} code 配置项编号
     * @param {?} currentValue
     * @return {?}
     */
    addUserConfig(code, currentValue) {
        /** @type {?} */
        let configCode = "gspWfTaskUserConfig";
        /** @type {?} */
        let todayCode = configCode + this.getCurrentDateString();
        /** @type {?} */
        let configStr = localStorage.getItem(todayCode);
        if (configStr) {
            /** @type {?} */
            let list = JSON.parse(configStr);
            if (list && list.length) {
                /** @type {?} */
                let item = ((/** @type {?} */ (list))).find((/**
                 * @param {?} l
                 * @return {?}
                 */
                l => l.configCode == code));
                if (item) {
                    item.currentValue = currentValue;
                    localStorage.setItem(todayCode, JSON.stringify(list));
                }
            }
        }
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/add?configCode=${code}&currentValue=${currentValue}`;
        return this.httpSvc.post(url, null);
    }
    /**
     * 获取用户头像（已被任务中心调用）
     * @param {?} userId 用户ID
     * @return {?}
     */
    getUserAvatar(userId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = "gspWfTaskUserAvatar";
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let todayUserCode = todayCode + userId;
        /** @type {?} */
        let avatarStr = localStorage.getItem(todayUserCode);
        if (avatarStr) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(JSON.parse(avatarStr));
            }), 100);
        }
        else {
            /** @type {?} */
            const url = `/api/runtime/sys/v1.0/userinfos/setting/users?userId=${userId}`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                subject.next(re);
                localStorage.setItem(todayUserCode, JSON.stringify(re));
                this.removeConfig(code);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 获取当前日期
     * @return {?}
     */
    getCurrentDateString() {
        /** @type {?} */
        let date = new Date();
        /** @type {?} */
        let year = date.getFullYear().toString();
        /** @type {?} */
        let month = (date.getMonth() + 1).toString();
        /** @type {?} */
        let day = date.getDate().toString();
        return year + month + day;
    }
    /**
     * 移除localStorage缓存
     * @private
     * @param {?} key
     * @return {?}
     */
    removeConfig(key) {
        /** @type {?} */
        let todayKey = key + this.getCurrentDateString();
        for (let item in localStorage) {
            if (item.indexOf(key) > -1 && item.indexOf(todayKey) < 0) {
                localStorage.removeItem(item);
            }
        }
    }
    /**
     * 真正上传附件
     * @param {?} files
     * @return {?}
     */
    uploadAttachment(files) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc/commit`;
        return this.httpSvc.put(url, files);
    }
    /**
     * 删除附件
     * @param {?} fileDeleteEntity
     * @return {?}
     */
    deleteAttachment(fileDeleteEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        return this.httpSvc.delete(url, fileDeleteEntity);
    }
    /**
     * 创建内码
     * @return {?}
     */
    createNM() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            /** @type {?} */
            const r = Math.random() * 16 | 0;
            /** @type {?} */
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }));
    }
    /**
     * 获取当前用户信息
     * @return {?}
     */
    getUserInfo() {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/userinfos?infoType=user`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取用户所有签名
     * @param {?} userId
     * @return {?}
     */
    getUserSignId(userId) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let code = 'gspWfTaskUserSign' + userId;
        /** @type {?} */
        let todayCode = code + this.getCurrentDateString();
        /** @type {?} */
        let signId = localStorage.getItem(todayCode);
        if (signId) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                subject.next(signId);
            }), 100);
        }
        else {
            /** @type {?} */
            let url = `/api/runtime/dfs/v1.0/formdoc/fileinfo/form?formid=${userId}&rootid=taskcentersignature`;
            this.httpSvc.get(url).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result && result.length) {
                    /** @type {?} */
                    var sign;
                    if (result.length == 1) {
                        sign = result[0];
                    }
                    else {
                        /** @type {?} */
                        const list = result.filter((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => a && a.lastModifiedTime));
                        sign = list.reduce((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) {
                            return a.lastModifiedTime > b.lastModifiedTime ? a : b;
                        }));
                    }
                    subject.next(sign.id);
                    localStorage.setItem(todayCode, sign.id);
                    this.removeConfig(code);
                }
                else {
                    subject.next('');
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                subject.error(error);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 上传签名，返回长传后的签名id
     * @param {?} gspDocUploadEntity
     * @return {?}
     */
    uploadSignature(gspDocUploadEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        /** @type {?} */
        let header = this.httpSvc.setHeader({
            body: gspDocUploadEntity,
            responseType: 'text'
        });
        return this.httpSvc.request('Post', url, header);
    }
    /**
     * 解析文件类型，给出缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    createItem(attachmentInfo) {
        /** @type {?} */
        var pos = attachmentInfo.fileName.lastIndexOf(".");
        /** @type {?} */
        var type = attachmentInfo.fileName.substring(pos + 1);
        type = (type == '' ? 'Default' : type.toLowerCase());
        /** @type {?} */
        var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
        /** @type {?} */
        var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
        /** @type {?} */
        var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
        /** @type {?} */
        var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
        if (docLib.indexOf(type) >= 0) {
            type = type.toLowerCase();
        }
        else if (videoLib.indexOf(type) >= 0) {
            type = 'video';
        }
        else if (audioLib.indexOf(type) >= 0) {
            type = 'audio';
        }
        else if (imgLib.indexOf(type) >= 0) {
            type = 'picture';
        }
        else {
            type = 'default';
        }
        return type;
    }
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param {?} token 主题唯一标识。
     * @return {?} 主题的唯一标识。
     */
    subjectRegister(subjectCode, token) {
        return ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRegister(subjectCode, { funcId: token });
    }
    /**
     * 监听移除
     * @param {?} token
     * @return {?}
     */
    subjectRemove(token) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRemove(token);
    }
    /**
     * 通过某个token发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} message 要发送的消息
     * @return {?}
     */
    subjectNotify(subjectToken, message) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.notify(subjectToken, message);
    }
    /**
     * 添加观察者，并监听消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param {?} handler 监听到消息后执行的动作
     * @return {?}
     */
    subjectResponse(subjectToken, observerToken, handler) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.response(subjectToken, observerToken, handler);
    }
    /**
     * 获取催办模拟结果
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandleSimulate(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/getUrgeHandleInfo`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行催办
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandle(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/urgeHandle`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 批量数字签名
     * @param {?} context 参数
     * @return {?}
     */
    batchVerifySigned(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/batchVerifySigned`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取用户帮助前端配置
     * @return {?}
     */
    getWfUserHelpConfig() {
        /** @type {?} */
        let date = new Date();
        /** @type {?} */
        let year = date.getFullYear();
        /** @type {?} */
        let month = date.getMonth() + 1;
        /** @type {?} */
        let day = date.getDate();
        /** @type {?} */
        const url = `/platform/runtime/wf/web/wf-user-help/config.json?v=` + year + month + day;
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签配置
     * @param {?} workItemId
     * @return {?}
     */
    getAdhocConfig(workItemId) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/${workItemId}/adhocConfig/AddSignBehind`;
        return this.httpSvc.get(url);
    }
    /**
     * 加签提交
     * @param {?} payload
     * @return {?}
     */
    adhocAssignee(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/adhocAssignee`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消征询
     * @param {?} payload
     * @return {?}
     */
    cancelConsult(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/cancelConsult`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 判断是否inSuite环境
     * @return {?}
     */
    isInSuite() {
        /** @type {?} */
        const frameWorkService = ((/** @type {?} */ (window))).gspframeworkService;
        if (frameWorkService && frameWorkService.rtf) {
            /** @type {?} */
            const extendMethod = frameWorkService.rtf.extendMethod;
            if (extendMethod && extendMethod.getExtObj()) {
                /** @type {?} */
                var extObj = extendMethod.getExtObj();
                /** @type {?} */
                const mode = extObj.iGIX4inSuiteMode();
                if (mode) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * 获取字符串字节长度
     * @param {?} str
     * @return {?}
     */
    getBytesLength(str) {
        // 在GBK编码里，除了ASCII字符，其它都占两个字符宽
        return str.replace(/[^\x00-\xff]/g, 'xx').length;
    }
    /**
     * 获取top window
     * @return {?}
     */
    getTopWindow() {
        /** @type {?} */
        let curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    }
    /**
     * 弹出错误提示
     * @param {?} errorMessage
     * @return {?}
     */
    handleErrorLevel(errorMessage) {
        if (errorMessage && errorMessage.status < 500) {
            return;
        }
        /** @type {?} */
        let error = (/** @type {?} */ (errorMessage.error));
        /** @type {?} */
        const exceptionMsg = error.Message || '';
        /** @type {?} */
        const date = error.date || new Date();
        /** @type {?} */
        const localDate = date;
        /** @type {?} */
        const detail = error.Detail || `${error.Message}\r\n发生时间：${localDate}\r\n详细信息：${error.innerMessage}` || '';
        /** @type {?} */
        const innerMessage = error.innerMessage || null;
        /** @type {?} */
        let bsModalRef;
        /** @type {?} */
        const options = {
            showMaxButton: false,
            buttons: [
                {
                    text: '知道了',
                    cls: 'btn btn-primary btn-lg',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        bsModalRef.close();
                    })
                }
            ],
            width: 440,
            height: 200,
            safeHtml: false,
            exception: {
                date: localDate,
                message: innerMessage,
                copyButton: {
                    text: '复制详细信息',
                    onClick: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        const result = this.copyToClipboard(detail);
                        bsModalRef.content.showMiniNotify(result, 1500);
                    })
                }
            }
        };
        bsModalRef = this.message.show('exception', exceptionMsg, options);
    }
    /**
     * 赋值到粘贴板
     * @private
     * @param {?} text
     * @return {?}
     */
    copyToClipboard(text) {
        /** @type {?} */
        const windowRef = window;
        if (windowRef.clipboardData && windowRef.clipboardData.setData) {
            return windowRef.clipboardData.setData("Text", text);
        }
        else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            /** @type {?} */
            var textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");
            }
            catch (ex) {
                console.warn("Copy to clipboard failed.", ex);
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return false;
    }
}
TaskService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskService.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 任务动作定义
 */
class TaskActionDef {
}
/**
 * 任务动作定义
 */
class TaskAction extends TaskActionDef {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const en = {
    static: {
        assignee: {
            noAssignee: 'Please select at least one approver.',
        },
        columnName: {
            name: 'Name',
            code: 'Code',
            department: 'Department',
        },
        title: 'Approval confirmation',
        inputLabel: 'Approval comments',
        inputHolder: 'comments',
        footOk: 'OK',
        footCancel: 'Cancel',
        selectUser: 'Select User',
        hideComment: 'Hide comment',
        taskForm: 'Task Handle',
        success: ' success'
    },
    cueWords: {
        successPass: 'Approved successfully.',
        inputOpinion: 'Please input your opinion',
        selectNode: 'Please select target nodes',
        select: 'Please select',
        processor: 'processor',
        attachmentsRequired: 'Please upload the attachment',
        signatureRequired: 'Please upload the signature',
        assignUser: 'Assign user',
        operateSuccess: 'Operate successfully',
        commonCommentTooLong: 'Comment is too long',
    },
    task: {
        selectPlaceholder: 'Please select',
        passComment: 'Pass',
        processAlone: 'Please handle it separately',
        urgeText: 'Receiver',
        backNodeText: ' node',
        selectProcessor: 'Please select the user',
        notFoundBill: 'This document cannot be processed on the computer. Please try to process it on the mobile terminal',
        nextNodeText: 'Next node',
        assignText: 'Assign to',
        noUser: 'No one',
        title: 'Handle Task',
        noTask: 'There is no task.',
        commentTooLong: 'Comments exceed the 4000 English character limit, it is recommended to submit comments by uploading attachments',
        activityName: 'processor',
        receiver: 'receiver',
        urgeComment: "Please input your comment",
        noUrgeUsers: "There is no user to urge handle",
        noUrgeSubject: "no urge subject",
        noUrgeContent: "no urge content",
        person: " people",
        addSign: "Add sign",
        priority: "Priority",
        selectPriority: "Please select the priority"
    },
    startProcess: {
        selectProcess: 'Please select process',
        title: 'Select process',
        selectNode: 'Please select next node',
        submitSuccess: 'Start process successfully',
        submitFailed: 'Start process failed',
        cancelSubmitSuccess: 'Cancel submit successfully',
        cancelSubmitFailed: 'Cancel submit failed',
        dataIdIsNull: 'Please select a data',
        dataIdIsEmpty: 'Please select a data',
        bizDefKeyIsNull: 'Biz definition key is null',
        success: 'Success',
        row: '',
        failed: ', failed',
        node: 'node, ',
        noUser: 'no suitable handler was found',
        cancelSubmitInfo: 'Please resubmit',
        procDef: 'Process',
        processTowards: 'Process towards',
        otherNodesAssign: 'Assign other nodes'
    },
    batchSubmit: {
        row: '',
        success: 'Success',
        error: 'Error',
        failed: 'Failed',
        validationFailed: 'Signature verification failed',
        single: 'Failed tasks please process it singly',
        selected: 'Selected',
        item: 'items,',
        time: 'time more than',
        second: 'seconds'
    },
    batchStartProcess: {
        row: '<br/>',
        success: 'Success',
        error: 'Error',
        failed: 'Failed',
        single: 'Failed tasks please process it singly'
    },
    comment: {
        static: {
            title: 'Approval comments',
            add: 'Add',
            delete: 'Delete',
            save: 'Save',
            cancel: 'Cancel',
            content: 'Content',
            order: 'Order',
            inputLabel: 'Comments',
            manage: 'Comments management',
            attachmentUpload: 'Attachment',
            repeatFile: 'Contains repeat files:',
            type: 'Type',
            operate: 'Operate',
            confirm: 'Confirm',
            clickToAdd: 'Click to add',
            public: 'public',
            private: 'private',
            messageSubject: 'message subject',
            messageContent: 'message content',
            comment: 'Comments',
            tooLongTips: 'exceed the 4000 English character limit, it is recommended to submit comments by uploading attachments'
        },
        attachment: {
            tips: 'click to upload attachments'
        },
        signature: {
            title: 'Signature',
            reset: 'Reset',
            ok: 'OK',
            sign: 'Sign, ',
            upload: 'Upload',
            tips: 'click to sign or upload a picture',
            dialogTitle: 'Signature',
            note1: '',
            note2: 'or',
            note3: '',
            disable: 'disable signature',
            download: "download",
            view: "view",
            delete: "delete"
        }
    },
    addSign: {
        allowSignToSign: 'Allow',
        multiInstanceType: 'Multi instance type',
        parallel: 'parallel',
        preempt: 'preempt',
        sequential: 'sequential'
    },
    backWardConfig: {
        sequence: 'Sequence',
        backToMe: 'Back to me',
        backToCurrentNode: 'Back to current node',
        allowResubmitToThisNode: ',resubmit to this node'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHT = {
    static: {
        assignee: {
            noAssignee: '請選擇辦理人員',
        },
        columnName: {
            name: '名稱',
            code: '編號',
            department: '組織信息',
        },
        title: '審批確認',
        inputLabel: '審批意見',
        inputHolder: '請輸入審批意見',
        footOk: '確定',
        footCancel: '取消',
        selectUser: '選擇用戶',
        hideComment: '意見隱藏',
        taskForm: '任务办理',
        success: '成功'
    },
    cueWords: {
        successPass: '審批通過',
        inputOpinion: '請輸入審批意見',
        selectNode: '請選擇下一環節',
        select: '請選擇',
        processor: '辦理人',
        attachmentsRequired: '請上傳附件',
        signatureRequired: '請設置簽名',
        assignUser: '指派',
        operateSuccess: '操作成功',
        commonCommentTooLong: '意見超長（最長255字符），請重新編輯',
    },
    task: {
        selectPlaceholder: '請選擇',
        passComment: '通過',
        processAlone: '請單獨處理',
        urgeText: '接收人员',
        backNodeText: '節點',
        selectProcessor: '請選擇辦理人員',
        notFoundBill: '該單據不支持在電腦端辦理，請嘗試去移動端進行辦理',
        nextNodeText: '下一環節',
        assignText: '辦理人員',
        noUser: '無',
        title: '任務辦理',
        noTask: '未找到對應的任務',
        commentTooLong: '處理意見超出 4000 個英文字符限制，建議以附件方式提交意見',
        activityName: '辦理人員',
        receiver: "接收人員",
        urgeComment: "請輸入催辦信息",
        noUrgeUsers: "沒有符合條件的催辦用戶",
        noUrgeSubject: "消息主題未配置",
        noUrgeContent: "消息內容未配置",
        person: "人员",
        addSign: "加签",
        priority: "紧急程度",
        selectPriority: "请选择紧急程度"
    },
    startProcess: {
        selectProcess: '請選擇流程',
        title: '提交確認',
        selectNode: '請選擇下一環節',
        submitSuccess: '提交審批成功',
        submitFailed: '提交審批失敗',
        cancelSubmitSuccess: '取消提交成功',
        cancelSubmitFailed: '取消提交失敗',
        dataIdIsNull: '請選擇一條數據',
        dataIdIsEmpty: '請選擇一條數據',
        bizDefKeyIsNull: '流程分類ID不能為空',
        success: '取消成功',
        row: '條<br/>',
        failed: '取消失敗',
        node: '節點，',
        noUser: '沒有找到合適的辦理人',
        cancelSubmitInfo: '已撤回至流程的開始節點，請修改後重新提交',
        procDef: '流程定义',
        processTowards: '即將流向',
        otherNodesAssign: '指定其他節點辦理人'
    },
    batchSubmit: {
        row: '條，<br/>',
        success: '辦理成功',
        error: '辦理失敗',
        failed: '需要交互',
        single: '失敗的任務請單獨處理',
        selected: '已選中',
        item: '項，',
        time: '預計處理時間較長（大於',
        second: '秒）'
    },
    batchStartProcess: {
        row: '條，<br/>',
        success: '提交成功',
        error: '提交失敗',
        failed: '需要交互',
        validationFailed: '驗簽失敗',
        single: '失敗的單據請單獨處理'
    },
    comment: {
        static: {
            title: '常用意見管理',
            add: '新增',
            delete: '刪除',
            save: '保存',
            cancel: '取消',
            content: '常用意見',
            order: '順序',
            inputLabel: '常用意見',
            manage: '意見管理',
            attachmentUpload: '附件',
            repeatFile: '包含重復文件：',
            type: '類別',
            operate: '操作',
            confirm: '確認',
            clickToAdd: '新增常用意見',
            public: '公有',
            private: '個人',
            messageSubject: '消息主題',
            messageContent: '消息內容',
            comment: '處理意見',
            tooLongTips: '超出 4000 個英文字符限制，建議以附件方式提交意見'
        },
        attachment: {
            tips: '點擊上傳附件'
        },
        signature: {
            title: '簽名',
            reset: '清空',
            ok: '確定',
            sign: '手寫簽名，',
            upload: '上傳圖片',
            tips: '點擊設置簽名',
            dialogTitle: '電子簽名',
            note1: '電子簽名可',
            note2: '也可通過',
            note3: '進行設置',
            disable: '不啟用簽名',
            download: "下載",
            view: "查看",
            delete: "删除"
        }
    },
    addSign: {
        allowSignToSign: '允許再',
        multiInstanceType: '多人審批方式',
        parallel: '並行會簽',
        preempt: '任意人處理',
        sequential: '按順序依次處理'
    },
    backWardConfig: {
        sequence: '按順序流轉',
        backToMe: '返回我',
        backToCurrentNode: '返回本節點',
        allowResubmitToThisNode: '后再次提交时直接回到本节点'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHS = {
    static: {
        assignee: {
            noAssignee: '请选择办理人员',
        },
        columnName: {
            name: '名称',
            code: '编号',
            department: '组织信息',
        },
        title: '审批确认',
        inputLabel: '审批意见',
        inputHolder: '请输入审批意见',
        footOk: '确定',
        footCancel: '取消',
        selectUser: '选择用户',
        hideComment: '意见隐藏',
        taskForm: '任务办理',
        success: '成功'
    },
    cueWords: {
        successPass: '审批通过',
        inputOpinion: '请输入审批意见',
        selectNode: '请选择下一环节',
        select: '请选择',
        processor: '办理人',
        attachmentsRequired: '请上传附件',
        signatureRequired: '请设置签名',
        assignUser: '指派',
        operateSuccess: '操作成功',
        commonCommentTooLong: '意见超长（最长255字符），请重新编辑',
    },
    task: {
        selectPlaceholder: '请选择',
        passComment: '通过',
        processAlone: '请单独处理',
        urgeText: '接收人员',
        backNodeText: '节点',
        selectProcessor: '请选择办理人员',
        notFoundBill: '该单据不支持在电脑端办理，请尝试去移动端进行办理',
        nextNodeText: '下一环节',
        assignText: '办理人员',
        noUser: '无',
        title: '任务办理',
        noTask: '未找到对应的任务',
        commentTooLong: '处理意见超出 4000 个英文字符限制，建议以附件方式提交意见',
        activityName: '办理人员',
        receiver: "接收人员",
        urgeComment: "请输入催办信息",
        noUrgeUsers: "没有符合条件的催办用户",
        noUrgeSubject: "消息主题未配置",
        noUrgeContent: "消息内容未配置",
        person: "人员",
        addSign: "加签",
        priority: "紧急程度",
        selectPriority: "请选择紧急程度"
    },
    startProcess: {
        selectProcess: '请选择流程',
        title: '提交确认',
        selectNode: '请选择下一环节',
        submitSuccess: '提交审批成功',
        submitFailed: '提交审批失败',
        cancelSubmitSuccess: '取消提交成功',
        cancelSubmitFailed: '取消提交失败',
        dataIdIsNull: '请选择一条数据',
        dataIdIsEmpty: '请选择一条数据',
        bizDefKeyIsNull: '流程分类ID不能为空',
        success: '取消成功',
        row: '条<br/>',
        failed: '取消失败',
        node: '节点，',
        noUser: '没有找到合适的办理人',
        cancelSubmitInfo: '已撤回至流程的开始节点，请修改后重新提交',
        procDef: '流程定义',
        processTowards: '即将流向',
        otherNodesAssign: '指定其他节点办理人'
    },
    batchSubmit: {
        row: '条，<br/>',
        success: '办理成功',
        error: '办理失败',
        failed: '需要交互',
        single: '失败的任务请单独处理',
        selected: '已选择',
        item: '项，',
        time: '预计处理时间较长（大于',
        second: '秒）'
    },
    batchStartProcess: {
        row: '条，<br/>',
        success: '提交成功',
        error: '提交失败',
        failed: '需要交互',
        validationFailed: '验签失败',
        single: '失败的单据请单独处理'
    },
    comment: {
        static: {
            title: '常用意见管理',
            add: '新增',
            delete: '删除',
            save: '保存',
            cancel: '取消',
            content: '常用意见',
            order: '顺序',
            inputLabel: '常用意见',
            manage: '意见管理',
            attachmentUpload: '附件',
            repeatFile: '包含重复文件：',
            type: '类别',
            operate: '操作',
            confirm: '确认',
            clickToAdd: '新增常用意见',
            public: '公有',
            private: '个人',
            messageSubject: '消息主题',
            messageContent: '消息内容',
            comment: '处理意见',
            tooLongTips: '超出 4000 个英文字符限制，建议以附件方式提交意见'
        },
        attachment: {
            tips: '点击上传附件'
        },
        signature: {
            title: '签名',
            reset: '清空',
            ok: '确定',
            sign: '手写签名，',
            upload: '上传图片',
            tips: '点击设置签名',
            dialogTitle: '电子签名',
            note1: '电子签名可',
            note2: '也可通过',
            note3: '进行设置',
            disable: '不启用签名',
            download: "下载",
            view: "查看",
            delete: "删除"
        }
    },
    addSign: {
        allowSignToSign: '允许再',
        multiInstanceType: '多人审批方式',
        parallel: '并行会签',
        preempt: '任意人处理',
        sequential: '按顺序依次处理'
    },
    backWardConfig: {
        sequence: '按顺序流转',
        backToMe: '返回我',
        backToCurrentNode: '返回本节点',
        title: '驳回的节点通过后',
        allowResubmitToThisNode: '后再次提交时直接回到本节点'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const translate = {
    'zh-CHS': zh_CHS,
    'en': en,
    'zh-CHT': zh_CHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class I18nService {
    constructor() {
        this.defaultLang = localStorage.getItem('languageCode');
        if (!this.defaultLang) {
            this.langData = translate['zh-CHS'];
        }
        else {
            this.langData = translate[this.defaultLang];
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = this.langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), this.langData);
        }
        return resultVal;
    }
}
I18nService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
I18nService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 任务实体定义
 */
class TaskEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CompleteContext {
}
class Addendum {
}
class VerifySigned {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 指定参与者信息：需要指定参与者的活动、待指定用户列表
 */
class AssigneeInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ConfigCode = {
    If_Show_Submit_Dialog: 'If_Show_Submit_Dialog',
    Info_After_Submit: 'Info_After_Submit',
    Info_After_Cancel_Submit: 'Info_After_Cancel_Submit',
    If_Use_Sign_By_Default: 'If_Use_Sign_By_Default',
    If_Show_Attachment: 'If_Show_Attachment',
    If_Show_Signature: 'If_Show_Signature',
    Default_Approval_Comment: 'Default_Approval_Comment',
    If_Store_Comment: 'If_Store_Comment',
    User_Help_Type: 'User_Help_Type',
    If_Can_Edit_Signature: 'If_Can_Edit_Signature',
};
/** @enum {string} */
const OwnerType = {
    User: 'user',
    Category: 'category',
    BizDefKey: 'bizdefkey',
    All: 'all',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 任务办理参数
 */
class WorkItemExecuteParam {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 催办模拟接口请求body
 */
class UrgeHandleSimulateContext {
}
/**
 * 执行催办请求body
 */
class UrgeHandleContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BatchVerifySignedContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 工作流上下文
 */
class WfContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UrgeHandleComponent {
    // 消息内容是否可编辑
    constructor() {
        this.placeholder = '';
        this.showMessageSubject = false; // 是否显示消息主题
        // 消息内容文本
        this.subjectEditable = false; // 消息主题是否可编辑
        // 消息主题是否可编辑
        this.contentEditable = false; // 消息内容是否可编辑
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
UrgeHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'urge-handle',
                template: "<div class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"comment.static.messageSubject\" | translate }}\r\n  </div>\r\n  <div class=\"farris-input-wrap\">\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      value=\"subject\"\r\n      name=\"subject\"\r\n      [placeholder]=\"placeholder\"\r\n      [(ngModel)]=\"urgeMessageSubject\"\r\n      [readOnly]=\"!subjectEditable\"\r\n    />\r\n  </div>\r\n</div>\r\n\r\n<div class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"comment.static.messageContent\" | translate }}\r\n  </div>\r\n  <textarea\r\n    class=\"form-control content-textarea\"\r\n    [(ngModel)]=\"urgeMessageContent\"\r\n    [attr.placeholder]=\"placeholder\"\r\n    [style.height.px]=\"textAreaHeight\"\r\n    [readOnly]=\"!contentEditable\"\r\n  ></textarea>\r\n</div>\r\n",
                styles: ["", ".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
            }] }
];
/** @nocollapse */
UrgeHandleComponent.ctorParameters = () => [];
UrgeHandleComponent.propDecorators = {
    placeholder: [{ type: Input }],
    showMessageSubject: [{ type: Input }],
    textAreaHeight: [{ type: Input }],
    urgeMessageSubject: [{ type: Input }],
    urgeMessageContent: [{ type: Input }],
    subjectEditable: [{ type: Input }],
    contentEditable: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const MultiInstanceType = {
    /**
     * 抢占
     */
    Preempt: 'Preempt',
    /**
     * 并行
     */
    Parallel: 'Parallel',
    /**
     * 串行
     */
    Sequential: 'Sequential',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 预解析返回的subject
 */
class SimulateSubject {
    constructor() {
        this.showDialog = true; //任务列表是否弹框
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskExecuteComponent extends ActionBaseImplComponent {
    //任务办理选中后的紧急程度
    /**
     * @param {?} taskService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} handlerService
     * @param {?} loadingService
     * @param {?} message
     * @param {?} injector
     */
    constructor(taskService, notify, i18nService, handlerService, loadingService, message, injector) {
        super();
        this.taskService = taskService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.handlerService = handlerService;
        this.loadingService = loadingService;
        this.message = message;
        this.injector = injector;
        // 流程实例ID
        this.actionEntity = new TaskAction(); // 动作实体
        // 动作实体
        this.comment = ''; // 审批意见
        // 审批意见
        this.MAX_COMMENT_LENGTH = 4000; //审批意见最大长度
        //当前动作的默认意见
        this.taskList = []; //批量审批接收到的任务list
        //批量审批接收到的任务list
        this.batchSecond = 0; //批量操作的时间
        //批量操作的时间
        this.ifSelectNode = false; // 是否显示选择下一环节
        // 是否显示选择下一环节
        this.ifSelectUser = false; // 是否显示下一环节处理人
        // 是否显示下一环节处理人
        this.ifAssignUser = false; // 是否显示办理人员框
        // 是否显示办理人员框
        this.ifUrgeType = false; // 是否显示接收人框（催办消息接收人）
        // 是否显示接收人框（催办消息接收人）
        this.ifShowCommentToMySelf = false; // 是否显示审批记录仅自己可见
        // 是否显示审批记录仅自己可见
        this.singleSelect = false; // 用户帮助是否单选，默认多选
        // 用户帮助是否单选，默认多选
        this.selectTargetAble = false; // 是否允许选择下一环节
        // 是否允许选择下一环节
        this.hideComment = false; //审批记录仅自己可见
        //审批记录仅自己可见
        this.filter = { notGetCurrentUser: true, notGetStopUser: true, orderField: 'order', withAllOrg: true, orgId: '' }; // 系统用户帮助是否过滤当前人
        // 系统用户帮助是否过滤当前人
        this.selectedUsers = []; // 用户帮助选择后的Id数组
        this.subject = new BehaviorSubject(null);
        this.submitResult = { result: true, isClose: true }; // 动作执行完成后返回的实体结果
        // 动作执行完成后返回的实体结果
        this.bindingData = {}; // 系统帮助多选时用到
        // 系统帮助多选时用到
        this.selectNodeText = this.i18nService.getValue('task.nextNodeText'); // 下一环节显示的文字,"下一环节"
        // 处理人员显示文字
        this.commentPlaceHolder = this.i18nService.getValue('static.inputHolder'); //审批意见框placeholder
        //审批意见框placeholder
        this.showAttachment = true; //是否显示附件上传
        //是否显示附件上传
        this.showSign = true; //是否显示签名
        //是否显示签名
        this.showCommonComment = true; //是否显示常用意见
        //是否显示常用意见
        this.textAreaHeight = 84; //文字框的高度
        //文字框的高度
        this.billMethodConfigs = []; // 表单动作配置列表
        // 选择的下一环节ID，并行分支是，逗号隔开的
        this.destNodes = []; // 候选下一环节
        // 候选下一环节
        this.dialogHeight = 270; // 弹框的高度
        // 弹框的高度
        this.dialogHeightBase = 70;
        this.addendum = new Addendum(); // 附件、签名信息
        // 附件、签名信息
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.assignInfos = [{
                // 节点返回的指派信息（多个）
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }];
        this.otherAssignInfos = []; //其他节点指派信息
        //其他节点指派信息
        this.originOtherAssignInfos = []; //缓存一开始的其他节点指派信息
        // 表单对象
        this.ifRegistered = false; // 表单是否注册
        // 表单是否注册
        this.configList = []; //任务中心配置项
        //任务中心配置项
        this.verifySigned = new VerifySigned(); // 数字验签参数
        // 数字验签参数
        this.submitDisable = false; // 提交按钮是否禁用
        // 提交按钮是否禁用
        //加签使用
        this.addSign = {
            showSignToSign: false,
            allowSignToSIgn: true,
            showMultiInstanceType: false,
            multiInstanceType: [
                { value: 'Parallel', name: this.i18nService.getValue('addSign.parallel') },
                { value: 'Sequential', name: this.i18nService.getValue('addSign.sequential') },
                { value: 'Preempt', name: this.i18nService.getValue('addSign.preempt') },
            ],
            originMultiInstType: '',
            curMultiInstType: MultiInstanceType.Parallel.toString()
        };
        //动态驳回配置
        this.showBackWardConfig = {
            title: this.i18nService.getValue('backWardConfig.title'),
            dynamicBackWardRuleAble: false,
            displayPlaceholder: '',
            showTips: false,
            enable: false,
            backWardRules: [{
                    name: this.i18nService.getValue('backWardConfig.sequence'),
                    value: 'sequence'
                }, {
                    name: this.i18nService.getValue('backWardConfig.backToMe'),
                    value: 'backToMe'
                }, {
                    name: this.i18nService.getValue('backWardConfig.backToCurrentNode'),
                    value: 'backToCurrentNode'
                }]
        };
        /**
         * 任务催办时使用
         */
        this.showUrgeMessageSubject = false; // 是否显示催办消息主题（催办时使用）
        // 内容可编辑
        this.wfContext = new WfContext(); //工作流上下文
        //工作流上下文
        this.enablePriority = false; //是否显示密级（动作级别）
        //是否显示密级（动作级别）
        this.cls = '';
        this.POST_MESSAGE_TARGET = window.document.location.origin;
        this.language = localStorage.getItem('languageCode') || 'zh-CHS'; //中英文
        /**
         * 监听事件处理
         */
        this.eventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.messageSubject.next(event);
        });
        // 如果存在消息监听，先删掉
        if (TaskExecuteComponent.func) {
            window.removeEventListener('message', TaskExecuteComponent.func, false);
        }
        this.addMessageListener();
    }
    /**
     * 组件销毁时，去掉subject注册
     * @return {?}
     */
    ngOnDestroy() {
        if (this.actionToken) {
            this.taskService.subjectRemove(this.actionToken);
        }
        if (this.simulateToken) {
            this.taskService.subjectRemove(this.simulateToken);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getAllUserConfig().subscribe((/**
         * @param {?} configList
         * @return {?}
         */
        (configList) => {
            load.close();
            this.configList = configList;
            /** @type {?} */
            const comment = configList.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.configCode === ConfigCode.Default_Approval_Comment));
            /** @type {?} */
            const if_store_comment = configList.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.configCode === ConfigCode.If_Store_Comment));
            /** @type {?} */
            let passComment;
            /** @type {?} */
            let backComment;
            if (comment && comment.currentValue) {
                if (this.language == 'zh-CHS') {
                    passComment = JSON.parse(comment.currentValue).pass;
                    backComment = JSON.parse(comment.currentValue).back;
                }
                else {
                    passComment = JSON.parse(comment.currentValue)['pass_' + this.language];
                    backComment = JSON.parse(comment.currentValue)['back_' + this.language];
                }
                if (this.actionEntity.code === 'Pass') {
                    this.comment = passComment;
                    this.defaultComment = passComment;
                }
                if (this.actionEntity.code === 'Back') {
                    this.comment = backComment;
                    this.defaultComment = backComment;
                }
            }
            if (if_store_comment && if_store_comment.currentValue === 'true') {
                if (this.wfCacheComment) { //开启暂存意见，当切换到驳回并且
                    if (this.actionEntity.code == 'Back' && this.wfCacheComment == passComment) ;
                    else {
                        this.comment = this.wfCacheComment;
                    }
                }
            }
        }), (/**
         * @return {?}
         */
        () => {
            load.close();
        }));
        // 从任务办理界面打开时，才注册服务
        if (this.origin === ActionOrigin.TaskForm) {
            this.initFormEvent();
            // 获取表单操作配置
            this.taskService.getTaskFormInfo(this.workItemId).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re && re.billMethodConfigs && re.billMethodConfigs.length) {
                    this.billMethodConfigs = re.billMethodConfigs;
                }
            }));
        }
        /** @type {?} */
        let context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
    }
    /**
     * @private
     * @return {?}
     */
    addMessageListener() {
        window.addEventListener('message', this.eventHandler, false);
        TaskExecuteComponent.func = this.eventHandler;
    }
    /**
     * 重写父类方法
     * @param {?} task
     * @return {?}
     */
    setTask(task) {
        if (task) {
            this.task = task;
            this.workItemId = task.sourceId;
            this.processInstanceId = task.processInstanceId;
            this.wfContext.processCategoryId = task.categoryId;
            this.selectedPriority = task.priority;
        }
    }
    /**
     * 批量办理 设置任务列表
     * @param {?} taskList
     * @return {?}
     */
    setTaskList(taskList) {
        if (taskList.length > 20) {
            this.dialogHeight = 290;
        }
        this.taskList = taskList;
        this.batchSecond = Math.ceil(this.taskList.length / 6);
    }
    /**
     * 重写父类方法
     * @param {?} action
     * @return {?}
     */
    setAction(action) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let result = new SimulateSubject();
        if (action) {
            this.actionEntity = action;
            if (this.task) { // 单个、批量都setAction，单个才执行模拟
                return this.simulate(this.actionEntity);
            }
            if (this.taskList && this.taskList.length) {
                return this.batchSimulate();
            }
        }
        //批量时，也要返回
        setTimeout((/**
         * @return {?}
         */
        () => {
            subject.next(result);
        }), 100);
        return subject.asObservable();
    }
    /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     * @private
     * @return {?}
     */
    initFormEvent() {
        // 审批前事件
        this.actionToken = this.workItemId + 'action';
        /** @type {?} */
        const actionToken = this.actionToken;
        /** @type {?} */
        const subjectCode = 'FormSubjectCode';
        ((/** @type {?} */ (window))).gspWfEventService = ((/** @type {?} */ (window))).gspWfEventService || {};
        ((/** @type {?} */ (window))).gspWfEventService.register = (/**
         * @param {?} formObject
         * @return {?}
         */
        (formObject) => {
            this.taskService.subjectRegister(subjectCode, actionToken);
            this.ifRegistered = true;
            this.formObject = formObject;
        });
        ((/** @type {?} */ (window))).gspWfEventService.notify = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (this.ifRegistered) {
                this.taskService.subjectNotify(actionToken, value);
            }
            else { // 表单不注册，也可直接调用notify
                this.simulateToken = this.workItemId + 'simulate';
                /** @type {?} */
                const simulateToken = this.simulateToken;
                this.taskService.subjectRegister(subjectCode, simulateToken);
                this.taskService.subjectResponse(simulateToken, '', (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    value && value.dataChanged && this.completeSimulate();
                }));
                this.taskService.subjectNotify(simulateToken, value);
            }
        });
    }
    /**
     * 点击提交的时候，执行表单的前事件
     * @private
     * @return {?}
     */
    beforeCompleteSubmit() {
        if (this.origin == ActionOrigin.TaskForm) {
            // 获取表单操作配置
            /** @type {?} */
            const passPreActions = this.billMethodConfigs.filter((/**
             * @param {?} action
             * @return {?}
             */
            action => action.action === this.actionEntity.code && action.executionTime === 'Pre')).sort((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            (x, y) => x.sortOrder - y.sortOrder));
            // 如果表单注册了事件
            if (passPreActions && passPreActions.length) {
                this.executeFormActions([...passPreActions]);
            }
            else { // 没有定义前后事件，直接提交
                this.completeSubmit();
            }
        }
        else {
            this.completeSubmit();
        }
    }
    /**
     * @private
     * @param {?} formActions 表单中要执行的动作
     * @return {?}
     */
    executeFormActions(formActions) {
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const data = re.data.data;
                if (data.result === true) {
                    if (data.dataChanged === true) { // 如果需要预解析，先预解析再继续执行
                        this.completeSimulate().subscribe((/**
                         * @param {?} r
                         * @return {?}
                         */
                        (r) => {
                            if (r.result) { // 预解析正确
                                this.executeFormActions(formActions);
                            }
                            else { // 预解析错误
                                this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                            }
                        }));
                    }
                    else { // 不需要预解析，继续执行
                        this.executeFormActions(formActions);
                    }
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批前表单操作执行失败！');
                }
            }));
            // 执行表单动作
            /** @type {?} */
            const formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            this.completeSubmit();
        }
    }
    /**
     * 单个任务预解析
     * @private
     * @param {?} action
     * @return {?}
     */
    simulate(action) {
        switch (action.code) {
            case 'AssignUser': // 指派 单独参数
                return this.assignSimulate();
            case 'Claim': // 领用
                return this.defaultSubjectNext();
            case 'Unclaim': // 取消领用
                return this.defaultSubjectNext();
            case 'Retrieve': // 取回
                return this.defaultSubjectNext();
            case 'Transfer': // 移交 单独参数
                return this.transferSimulate();
            case 'AddSign': // 加签
                return this.addSignSimulate();
            case 'AddSignFront': // 征询
                return this.addSignFrontSimulate();
            case 'Notify': //知会
                return this.notifySimulate();
            case 'Refuse': // 否决
                return this.defaultSubjectNext();
            case 'Obsolete': // 作废
                return this.defaultSubjectNext();
            case 'Comment': // 评论
                return this.defaultSubjectNext();
            case 'ReadTask': // 已阅
                this.ifShowCommentToMySelf = true;
                return this.defaultSubjectNext(295);
            case 'UrgeHandle': //催办
                return this.urgeHandleSimulate();
            case 'CancelConsult': //取消征询
                return this.defaultSubjectNext();
            default: // 通过 驳回 重新提交 其他自定义的动作
                return this.completeSimulate();
        }
    }
    /**
     * 批量审批预解析
     * @private
     * @return {?}
     */
    batchSimulate() {
        switch (this.actionEntity.code) {
            case "ReadTask": //批量已阅
                this.ifShowCommentToMySelf = true;
                return this.defaultSubjectNext(295);
            case "Retrieve": //批量取回
                return this.defaultSubjectNext();
            case "Transfer": //批量移交
                this.ifSelectUser = true;
                this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
                this.singleSelect = true;
                return this.defaultSubjectNext(this.dialogHeight + this.dialogHeightBase);
            default:
                return this.defaultSubjectNext();
        }
    }
    /**
     * 默认的预解析返回结果，可控制弹框高度
     * @private
     * @param {?=} dialogHeight
     * @return {?}
     */
    defaultSubjectNext(dialogHeight) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let s = new SimulateSubject();
        s.showDialog = true;
        s.dialogHeight = dialogHeight ? dialogHeight : this.dialogHeight;
        s.result = true;
        setTimeout((/**
         * @return {?}
         */
        () => {
            subject.next(s);
        }), 100);
        return subject.asObservable();
    }
    /**
     * 真正地提交
     * 重写父类方法
     * @return {?}
     */
    submit() {
        switch (this.actionEntity.code) {
            case 'AssignUser': // 指派 单独参数
                this.assignSubmit();
                break;
            case 'Claim': // 领用
                this.claimSubmit();
                break;
            case 'Unclaim': // 取消领用
                this.unClaimSubmit();
                break;
            case 'Retrieve': // 取回
                this.retrieveSubmit();
                break;
            case 'Transfer': // 移交 单独参数
                this.transferSubmit();
                break;
            case 'AddSign': // 加签
                this.addSignSubmit();
                break;
            case 'AddSignFront': // 征询
                this.addSignFrontSubmit();
                break;
            case 'Comment': // 评论
                this.commentSubmit();
                break;
            case 'Notify': //知会
                this.notifySubmit();
                break;
            case 'ReadTask': // 已阅
                this.readSubmit();
                break;
            case 'UrgeHandle': //催办
                this.urgeHandleSubmit();
                break;
            case 'CancelConsult': //取消征询
                this.cancelConsultSubmit();
                break;
            default: // 通过 驳回 否决 作废 重新提交 其他自定义动作
                this.beforeCompleteSubmit();
        }
        return this.subject.asObservable();
    }
    /**
     * 批量办理点击提交
     * @param {?} tasks
     * @return {?}
     */
    batchSubmit(tasks) {
        switch (this.actionEntity.code) {
            case "ReadTask": //批量已阅
                return this.batchReadTaskSubmit(tasks);
            case "Retrieve": //批量取回
                return this.batchRetrieveSubmit(tasks);
            case "Claim": //批量领用
                return this.batchClaimSubmit(tasks);
            case "Unclaim": //批量取消领用
                return this.batchUnclaimSubmit(tasks);
            case "Transfer": //批量移交
                return this.batchTransferSubmit(tasks);
            default:
                return this.batchCompleteSubmit(tasks);
        }
    }
    /**
     * 执行批量前事件
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    batchCompleteSubmit(tasks) {
        /** @type {?} */
        let filterNum = 0;
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        /** @type {?} */
        const successSubmit = { result: true, isClose: true };
        if ((this.actionEntity.code === 'Back' || this.actionEntity.code === 'Refuse') && !this.comment) { // 批量意见是否必填不支持根据审批项配置操作，批量驳回意见必填
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const noActionTasks = tasks.filter((/**
             * @param {?} t
             * @return {?}
             */
            t => t.actions.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code === this.actionEntity.code)) === -1));
            if (noActionTasks && noActionTasks.length > 0) {
                for (const a of noActionTasks) {
                    filterNum++;
                    if (filterNum === tasks.length) {
                        subject.next(successSubmit);
                        this.showBatchSubmitInfo(0, filterNum, 0, 0);
                    }
                }
            }
            /** @type {?} */
            let actTasks = tasks.filter((/**
             * @param {?} t
             * @return {?}
             */
            t => t.actions.some((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code === this.actionEntity.code))));
            if (actTasks && actTasks.length > 0) {
                this.executeBatchEvent([...this.actionEntity.preEvents.filter((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => e.batch))], actTasks, this.actionEntity, (/**
                 * @param {?} re
                 * @return {?}
                 */
                (re) => {
                    if (re && re.result) {
                        if (re.passTasks) {
                            /** @type {?} */
                            const backTasks = actTasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => re.passTasks.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === t.id)) === -1));
                            if (backTasks && backTasks.length > 0) {
                                for (const t of backTasks) {
                                    filterNum++;
                                    if (filterNum === tasks.length) {
                                        subject.next(successSubmit);
                                        this.showBatchSubmitInfo(0, filterNum, 0, 0);
                                    }
                                }
                            }
                            actTasks = actTasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => re.passTasks.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === t.id)) > -1));
                        }
                        if (actTasks.length > 0) {
                            /** @type {?} */
                            const batchVerifySignedContext = new BatchVerifySignedContext();
                            this.batchVerifySubmit(actTasks, filterNum, batchVerifySignedContext).subscribe((/**
                             * @param {?} r
                             * @return {?}
                             */
                            (r) => {
                                if (r && r.successSubmit && r.successSubmit.result) {
                                    this.executeBatchEvent([...this.actionEntity.postEvents.filter((/**
                                         * @param {?} e
                                         * @return {?}
                                         */
                                        e => e.batch))], r.successHandleTasks, this.actionEntity, (/**
                                     * @return {?}
                                     */
                                    () => {
                                        subject.next(r.successSubmit);
                                    }), { result: true, passTasks: r.successHandleTasks.map((/**
                                         * @param {?} t
                                         * @return {?}
                                         */
                                        t => t.id)) });
                                }
                            }));
                        }
                    }
                    else {
                        subject.next({ result: false, isClose: false });
                    }
                }), { result: true, passTasks: actTasks.map((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => t.id)) });
            }
        }
        return subject.asObservable();
    }
    /**
     * 批量数字签名
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} batchVerifySignedContext
     * @return {?}
     */
    batchVerifySubmit(tasks, filterNum = 0, batchVerifySignedContext) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const verifyTasks = tasks.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const action = t.actions.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code === this.actionEntity.code));
            if (!action) {
                return false;
            }
            else {
                if (action.parameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.code === 'CertificationNecessary' && p.value === 'true'))) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }));
        /** @type {?} */
        const verifyTasksNum = verifyTasks.length;
        if (verifyTasks.length > 0) {
            /** @type {?} */
            const that = this;
            if (((/** @type {?} */ (window))).gspframeworkService &&
                ((/** @type {?} */ (window))).gspframeworkService.rtf) {
                ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', (/**
                 * @param {?} signedData
                 * @return {?}
                 */
                function signMsgOver(signedData) {
                    if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                        // 证书对象
                        /** @type {?} */
                        const cert = gspCA.getCurCert();
                        // 验签参数
                        that.verifySigned = {
                            // 要验证的证书base64编码的字符流(certkey)
                            certBase64Info: gspCA.getCertBase64(cert),
                            // 签名原信息
                            msg: ['BatchDigitalSignature'],
                            // 要签名后信息
                            signedmsg: signedData[1][0],
                            // 用户使用场景，目前未使用，可以为空
                            useCase: null,
                        };
                        batchVerifySignedContext.verifySigned = that.verifySigned;
                        that.taskService.batchVerifySigned(batchVerifySignedContext).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const verifyTasksNum = 0;
                            that.batchComplete(tasks, filterNum, verifyTasksNum).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            re => {
                                subject.next(re);
                            }));
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        (error) => {
                            /** @type {?} */
                            const otherTasks = tasks.filter((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => verifyTasks.findIndex((/**
                             * @param {?} task
                             * @return {?}
                             */
                            task => task.id === t.id)) === -1));
                            that.batchComplete(otherTasks, filterNum, verifyTasksNum).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            re => {
                                subject.next(re);
                            }));
                        }));
                    }
                    else {
                        that.notify.error(signedData[1]);
                        subject.next({ successSubmit: { result: false, isClose: false }, successHandleTasks: new Array() });
                    }
                }));
            }
            /** @type {?} */
            const msg = ['BatchDigitalSignature'];
            gspCA.getSignedMsg(msg);
        }
        else {
            this.batchComplete(tasks, filterNum, verifyTasksNum).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                subject.next(re);
            }));
        }
        return subject.asObservable();
    }
    /**
     * 真正的批量提交任务
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} verifyTasksNum
     * @return {?}
     */
    batchComplete(tasks, filterNum = 0, verifyTasksNum) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let successNum = 0;
        /** @type {?} */
        let failedNum = 0;
        /** @type {?} */
        let errorNum = 0;
        /** @type {?} */
        const successSubmit = { result: true, isClose: true };
        /** @type {?} */
        const successHandleTasks = new Array();
        /** @type {?} */
        const load = this.loadingService.show();
        for (const task of tasks) {
            /** @type {?} */
            const context = new CompleteContext();
            context.workItemId = task.sourceId;
            context.conclusionValue = this.actionEntity.code;
            context.comment = this.comment;
            context.addendum = this.addendum;
            this.taskService.completeSimulate(context).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response && response.needInteraction === true) { // 需要交互
                    failedNum++;
                    if (successNum + failedNum + errorNum === tasks.length) {
                        load.close();
                        subject.next({ successSubmit, successHandleTasks });
                        this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                    }
                }
                else { // 不需要交互
                    this.taskService.complete(context).subscribe((/**
                     * @return {?}
                     */
                    () => {
                        successNum++;
                        successHandleTasks.push(task);
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit, successHandleTasks });
                            this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }), (/**
                     * @return {?}
                     */
                    () => {
                        errorNum++;
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit, successHandleTasks });
                            this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }));
                }
            }), (/**
             * @return {?}
             */
            () => {
                errorNum++;
                if (successNum + failedNum + errorNum === tasks.length) {
                    load.close();
                    subject.next({ successSubmit, successHandleTasks });
                    this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                }
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量已阅
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchReadTaskSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                /** @type {?} */
                let context = {
                    workItemId: task.sourceId,
                    comment: this.comment,
                    addendum: this.addendum,
                };
                this.taskService.readTask(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: true, isClose: true });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量取回
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchRetrieveSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                /** @type {?} */
                let context = {
                    workItemId: task.sourceId,
                    comment: this.comment,
                    addendum: this.addendum,
                };
                this.taskService.retrieve(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchClaimSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                this.taskService.claim(task.sourceId, this.comment).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量取消领用
     * @private
     * @param {?} tasks
     * @return {?}
     */
    batchUnclaimSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                this.taskService.unClaim(task.sourceId, this.comment).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量移交
     * @private
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    batchTransferSubmit(tasks) {
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let successNum = 0;
            /** @type {?} */
            let errorNum = 0;
            /** @type {?} */
            const load = this.loadingService.show();
            tasks.forEach((/**
             * @param {?} task
             * @return {?}
             */
            task => {
                /** @type {?} */
                const context = {
                    workItemId: task.sourceId,
                    assignee: this.selectedUsers[0],
                    comment: this.comment,
                    addendum: this.addendum,
                };
                this.taskService.transfer(context).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    successNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                        subject.next({ result: true, isClose: true });
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    errorNum++;
                    if (successNum + errorNum == tasks.length) {
                        load.close();
                        subject.next({ result: false, isClose: false });
                        this.showBatchSubmitInfo(successNum, 0, errorNum, 0);
                    }
                }));
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量提交提示信息
     * @private
     * @param {?} successNum 成功条数
     * @param {?} failedNum 需要交互的条数
     * @param {?} errorNum 执行报错的条数
     * @param {?} verifyTasksNum 需要数字签名的条数
     * @return {?}
     */
    showBatchSubmitInfo(successNum, failedNum, errorNum, verifyTasksNum) {
        /** @type {?} */
        let message = '';
        if (successNum && !failedNum && !errorNum && !verifyTasksNum) { // 批量全部成功
            this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
        }
        else { // 非全部成功
            successNum && (message += this.i18nService.getValue('batchSubmit.success') + `【${successNum}】` + this.i18nService.getValue('batchSubmit.row'));
            errorNum && (message += this.i18nService.getValue('batchSubmit.error') + `【${errorNum}】` + this.i18nService.getValue('batchSubmit.row'));
            failedNum && (message += this.i18nService.getValue('batchSubmit.failed') + `【${failedNum}】` + this.i18nService.getValue('batchSubmit.row'));
            verifyTasksNum && (message += this.i18nService.getValue('batchSubmit.validationFailed') + `【${verifyTasksNum}】` + this.i18nService.getValue('batchSubmit.row'));
            message += this.i18nService.getValue('batchSubmit.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * @private
     * @param {?} events
     * @param {?} entities
     * @param {?} action
     * @param {?} handler
     * @param {?=} result
     * @return {?}
     */
    executeBatchEvent(events, entities, action, handler, result) {
        if (this.injector) {
            if (events && events.length > 0 && entities && entities.length > 0) {
                /** @type {?} */
                const event = events.shift();
                /** @type {?} */
                const url = event.eventImpl.split('#')[0];
                /** @type {?} */
                const func = event.eventImpl.split('#')[1];
                System.import(url + '?v=' + new Date().getTime().toString())
                    .then((/**
                 * @param {?} moduleFactories
                 * @return {?}
                 */
                (moduleFactories) => {
                    /** @type {?} */
                    const moduleFactory = Object.values(moduleFactories)[0];
                    /** @type {?} */
                    const moduleRef = moduleFactory.create(this.injector);
                    /** @type {?} */
                    const context = {
                        action,
                        taskList: entities,
                        origin: 'TaskCenter',
                        preEventResult: result
                    };
                    moduleRef.instance[func].apply(moduleRef.instance, [context]).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    (re) => {
                        if (re && re.result) {
                            this.executeBatchEvent(events, entities, action, handler, re);
                        }
                        else {
                            handler(re);
                        }
                    }));
                }));
            }
            else {
                handler(result);
            }
        }
        else {
            handler(result);
        }
    }
    /**
     * @private
     * @return {?}
     */
    assignSimulate() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        this.ifAssignUser = true;
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        this.taskService.getAssigneeInfo(this.workItemId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            this.assignInfos = [{
                    selectedAssignees: info.selectedAssignees,
                    assigneeInfo: info.assigneeInfo,
                    assignees: info.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: info.activityDefinitionName,
                    activityDefinitionId: info.activityDefinitionId,
                    dependency: info.dependency,
                    anonymous: info.anonymous,
                    anonymousText: info.anonymousText,
                    resolved: info.resolved,
                }];
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.result = true;
            simulateSubject.showDialog = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            simulateSubject.result = false;
            simulateSubject.showDialog = false;
            subject.next(simulateSubject);
            this.taskService.error(error);
        }));
        return subject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    transferSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.i18nService.getValue('task.receiver'); //接收人员
        this.singleSelect = true;
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    addSignFrontSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    addSignSimulate() {
        // 加签
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase * 2;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getAdhocConfig(this.workItemId).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.addSign.showSignToSign = response.showSignToSign;
            this.addSign.originMultiInstType = response.multiInstanceType;
            if (response.organization) {
                this.filter.orgId = response.organization.id;
                this.filter.withAllOrg = response.organization.includeChildren;
            }
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.showDialog = true;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    notifySimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.singleSelect = false;
        this.enablePriority = true;
        if (this.task.priority) {
            this.dialogHeight += this.dialogHeightBase;
        }
        return this.getOrganizationScope();
    }
    //预解析组织、候选人范围
    /**
     * @private
     * @return {?}
     */
    getOrganizationScope() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getOrganizationScope(this.workItemId, this.actionEntity.code).subscribe((/**
         * @param {?} orgList
         * @return {?}
         */
        (orgList) => {
            load.close();
            if (orgList.length) { // 全员会返回空数组
                this.filter.orgId = orgList[0].id;
                this.filter.withAllOrg = orgList[0].includeChildren;
            }
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.showDialog = true;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    }
    /**
     * 催办模拟
     * @private
     * @return {?}
     */
    urgeHandleSimulate() {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        this.ifSelectNode = false;
        this.ifSelectUser = false;
        this.ifAssignUser = false;
        this.ifUrgeType = true;
        this.commentPlaceHolder = this.i18nService.getValue('task.urgeComment');
        this.showCommonComment = false;
        this.showAttachment = false;
        this.showUrgeMessageSubject = true;
        this.showSign = false;
        this.dialogHeight += this.dialogHeightBase * 2;
        /** @type {?} */
        const load = this.loadingService.show();
        /** @type {?} */
        let context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
        this.taskService.urgeHandleSimulate(context).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            load.close();
            this.urgeHandleResponse = re;
            if (re && re.urgeUsers && re.urgeUsers.length) {
                this.urgeMessageSubject = re.urgeUsers[0].urgeInfos[0].urgeMessageSubject;
                this.urgeMessageContent = re.urgeUsers[0].urgeInfos[0].urgeMessageContent;
                this.subjectEditable = re.urgeUsers[0].urgeInfos[0].subjectEditable;
                this.contentEditable = re.urgeUsers[0].urgeInfos[0].contentEditable;
                this.addReminder = re.urgeUsers[0].urgeInfos[0].addReminder;
                /** @type {?} */
                let urgeUsers = re.urgeUsers;
                /** @type {?} */
                let assignInfo = new AssigneeInfo();
                urgeUsers.forEach((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    if (user.anonymousText) {
                        user.name = user.anonymousText;
                        user.code = '';
                        user.orgName = '';
                    }
                }));
                assignInfo.assigneeUsers = urgeUsers;
                assignInfo.selectAssignee = urgeUsers.length > 1 ? true : false;
                assignInfo.multiSelect = true;
                this.assignInfos[0].assigneeInfo = assignInfo;
                this.assignInfos[0].assignees = urgeUsers.length == 1 ? urgeUsers : [];
                simulateSubject.showDialog = true;
            }
            else {
                this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
                simulateSubject.showDialog = false;
            }
            simulateSubject.dialogHeight = this.dialogHeight;
            simulateSubject.result = true;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
            simulateSubject.showDialog = false;
            simulateSubject.result = false;
            subject.next(simulateSubject);
        }));
        return subject.asObservable();
    }
    /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     * @private
     * @return {?}
     */
    completeSimulate() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let simulateSubject = new SimulateSubject();
        if (this.actionEntity.parameters && this.actionEntity.parameters.length) { // 是否允许加签
            this.actionEntity.parameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            (p) => {
                if (p.code === 'AddSignBehindAble' && p.value === 'true') {
                    this.ifSelectUser = true;
                    this.selectUserText = this.i18nService.getValue('task.addSign') + this.i18nService.getValue('task.person');
                    this.dialogHeight += this.dialogHeightBase;
                    /** @type {?} */
                    const load = this.loadingService.show();
                    //获取加签范围
                    this.taskService.getOrganizationScope(this.workItemId, 'AddSignBehind').subscribe((/**
                     * @param {?} orgList
                     * @return {?}
                     */
                    (orgList) => {
                        load.close();
                        if (orgList.length) { // 全员会返回空数组
                            this.filter.orgId = orgList[0].id;
                            this.filter.withAllOrg = orgList[0].includeChildren;
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        load.close();
                        this.taskService.error(error);
                    }));
                }
            }));
        }
        //驳回节点标签名称
        if (this.actionEntity.code === 'Back') {
            this.selectNodeText = this.actionEntity.name + this.i18nService.getValue('task.backNodeText');
        }
        /** @type {?} */
        const context = new CompleteContext();
        context.workItemId = this.workItemId;
        context.conclusionValue = this.actionEntity.code;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.completeSimulate(context).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.clearSimulateResult();
            this.response = response;
            if (this.task.priority) {
                this.enablePriority = true;
                this.dialogHeight += this.dialogHeightBase;
            }
            this.selectTargetAble = response.selectTargetAble;
            if (response.dynamicBackWardRuleConfig) {
                this.showBackWardConfig.dynamicBackWardRuleAble = response.dynamicBackWardRuleConfig.dynamicBackWardRuleAble;
                this.showBackWardConfig.displayPlaceholder = response.dynamicBackWardRuleConfig.resubmitEffect;
            }
            if (!response.simulationPaths.length) { // 模拟返回路径为空时
                this.ifSelectNode = false;
                this.ifAssignUser = false;
            }
            else { // 模拟返回了路径
                this.ifSelectNode = true;
                this.ifAssignUser = true;
                this.dialogHeight += this.dialogHeightBase * 2;
                this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
                 * @param {?} path
                 * @return {?}
                 */
                path => ({
                    id: path.nodeInfoList.map((/**
                     * @param {?} node
                     * @return {?}
                     */
                    node => node.activityDefinitionId)).join('，'),
                    name: path.nodeInfoList.map((/**
                     * @param {?} node
                     * @return {?}
                     */
                    node => node.activityDefinitionName)).join('，')
                })));
                // 处理默认分支，无默认分支返回-1
                /** @type {?} */
                let defaultIndex = response.simulationPaths.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.default));
                //没有默认分支，且不允许选择目标节点时，取其中一个node展示（子流程参与者为空情况等）
                if (defaultIndex < 0 && !response.selectTargetAble) {
                    defaultIndex = response.simulationPaths.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.nodeInfoList && a.nodeInfoList.length > 0));
                }
                if (defaultIndex > -1) {
                    this.selectedNodeId = this.destNodes[defaultIndex].id;
                    this.nodeDefaultValue = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
                    this.setAssignInfo(response.simulationPaths[defaultIndex].nodeInfoList);
                    if (response.simulationPaths[defaultIndex].id.startsWith('EndEvent')) { //下一环节为结束时，不显示办理人员，弹框高度缩小
                        this.dialogHeight = 340;
                    }
                }
            }
            //设置其他节点选人
            this.setOtherAssignInfo(response);
            this.dialogHeight = this.showBackWardConfig.dynamicBackWardRuleAble ? this.dialogHeight + this.dialogHeightBase : this.dialogHeight;
            simulateSubject.result = true;
            simulateSubject.showDialog = true;
            simulateSubject.dialogHeight = this.dialogHeight;
            subject.next(simulateSubject);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            simulateSubject.result = false;
            simulateSubject.showDialog = false;
            subject.next(simulateSubject);
            this.taskService.error(error);
        }));
        return subject.asObservable();
    }
    /**
     * 清空预解析结果
     * @private
     * @return {?}
     */
    clearSimulateResult() {
        this.assignInfos = [{
                // 重新预解析时清空
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
        this.destNodes = []; // 重新预解析时清空
        this.selectedNodeId = '';
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    setAssignInfo(nodeInfoList) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        nodeId => {
            /** @type {?} */
            const node = nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId === nodeId));
            if (node) {
                this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved,
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        }));
    }
    /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    setOtherAssignInfo(response) {
        this.otherAssignInfos = [];
        /** @type {?} */
        let tmpOtherAssignInfos = [];
        /** @type {?} */
        let otherAssignNodes = response.otherAssignNodes;
        if (otherAssignNodes && otherAssignNodes.length) {
            otherAssignNodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => {
                tmpOtherAssignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }));
            //保存最初的其他节点选人
            this.originOtherAssignInfos = [...tmpOtherAssignInfos];
            //其他节点与下一节点去重
            if (this.assignInfos && this.assignInfos.length) {
                tmpOtherAssignInfos = tmpOtherAssignInfos.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => this.assignInfos.findIndex((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => b.activityDefinitionId == a.activityDefinitionId)) < 0));
            }
            this.otherAssignInfos = tmpOtherAssignInfos;
        }
    }
    /**
     * 选完节点后，重新设置其他节点指派
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    setOtherAssignInfoAgain(nodeInfoList) {
        if (nodeInfoList && nodeInfoList.length) {
            this.otherAssignInfos = this.originOtherAssignInfos.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => nodeInfoList.findIndex((/**
             * @param {?} b
             * @return {?}
             */
            b => b.activityDefinitionId == a.activityDefinitionId)) < 0));
        }
    }
    /**
     * 点击确定后方法
     * @private
     * @return {?}
     */
    assignSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) {
            this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                assigneeIds: this.assignInfos[0].assignees.map((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => user.id)),
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.taskService.assignNextUsersByWorkItemId(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.i18nService.getValue('cueWords.operateSuccess'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    claimSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.claim(this.workItemId, this.comment).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    unClaimSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.unClaim(this.workItemId, this.comment).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success')),
                    this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    retrieveSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const retrieveContext = {
                workItemId: this.workItemId,
                comment: this.comment
            };
            this.taskService.retrieve(retrieveContext).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    transferSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                assignee: this.selectedUsers[0],
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.transfer(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    commentSubmit() {
        if (!this.comment || this.comment.length === 0) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum
            };
            this.taskService.comment(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.submitResult.isClose = false;
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
            this.comment = '';
        }
    }
    /**
     * @private
     * @return {?}
     */
    addSignFrontSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                comment: this.comment,
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.addSign(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next(this.submitResult);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    addSignSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let payload = {
                workItemId: this.workItemId,
                comment: this.comment,
                conclusionValue: "Pass",
                signAssignees: this.selectedUsers,
                actionCode: "AddSignBehind",
                multiInstanceType: this.addSign.showMultiInstanceType ? this.addSign.curMultiInstType : this.addSign.originMultiInstType,
                counterSignRule: 'allPass',
                completedRule: 'all',
                allowSignToSign: this.addSign.allowSignToSIgn,
                activityName: '',
                addendum: this.addendum,
                priority: this.selectedPriority
            };
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.adhocAssignee(payload).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: true });
                load.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    readSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                hideComment: this.hideComment
            };
            this.taskService.readTask(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: true });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.taskService.error(error);
                this.subject.next({ result: false, isClose: false });
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    notifySubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                priority: this.selectedPriority
            };
            this.taskService.addSign(context).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: false });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * 催办提交
     * @private
     * @return {?}
     */
    urgeHandleSubmit() {
        if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleResponse.urgeUsers || !this.urgeHandleResponse.urgeUsers.length) { //没有符合条件的催办用户
            this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) { //没有选人
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.i18nService.getValue('task.receiver'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageSubject) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeSubject'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageContent) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeContent'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let context = new UrgeHandleContext();
            context.procInstId = this.processInstanceId;
            context.urgeUsers = this.urgeHandleResponse.urgeUsers.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => this.assignInfos[0].assignees.some((/**
             * @param {?} b
             * @return {?}
             */
            b => b.id == a.id))));
            context.urgeMessageSubject = this.urgeHandleComponent.urgeMessageSubject;
            context.urgeMessageContent = this.urgeHandleComponent.urgeMessageContent;
            context.addReminder = this.addReminder;
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.urgeHandle(context).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                this.subject.next({ result: true, isClose: true });
                load.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            }));
        }
    }
    /**
     * 取消征询提交
     * @private
     * @return {?}
     */
    cancelConsultSubmit() {
        /** @type {?} */
        let context = new WorkItemExecuteParam();
        context.workItemId = this.workItemId;
        context.comment = this.comment;
        context.addendum = this.addendum;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.cancelConsult(context).subscribe((/**
         * @return {?}
         */
        () => {
            load.close();
            this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
            this.subject.next({ result: true, isClose: true });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.subject.next({ result: false, isClose: false });
            this.taskService.error(error);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    completeSubmit() {
        // 通过、驳回、其他第三方动作
        /** @type {?} */
        const context = {
            workItemId: this.workItemId,
            conclusionValue: this.actionEntity.code,
            comment: this.comment,
            signAssignees: this.selectedUsers,
            nextFlowNodes: [],
            otherAssignNodes: [],
            addendum: this.addendum,
            //动态驳回规则
            dynamicBackWardRule: this.showBackWardConfig.dynamicBackWardRuleAble ? this.showBackWardConfig.displayPlaceholder : '',
            priority: this.selectedPriority
        };
        if (context.signAssignees.length || !this.response || !this.response.simulationPaths.length) { // 加签 or 仿真返回为空，直接往下走
            this.completeTask(context);
        }
        else {
            if (this.selectedNodeId) { // 加签时，选择下一环节被禁用，destNodeId为undefined
                // 加签时，选择下一环节被禁用，destNodeId为undefined
                /** @type {?} */
                const nextFlowNodes = [];
                /** @type {?} */
                const nodes = this.selectedNodeId.split('，');
                for (let i = 0; i < nodes.length; i++) {
                    /** @type {?} */
                    const nextFlowNode = {
                        activityDefinitionId: nodes[i],
                        activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                        dependency: this.assignInfos[i].dependency,
                        selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: this.assignInfos[i].anonymous,
                        anonymousText: this.assignInfos[i].anonymousText
                    };
                    //节点找不到人，且异常提示时，并行网关暂不处理
                    if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                        if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                            /** @type {?} */
                            const str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                            this.notify.warning(str);
                            this.subject.next({ result: false, isClose: false });
                            return;
                        }
                    }
                    nextFlowNodes.push(nextFlowNode);
                }
                context.nextFlowNodes = nextFlowNodes;
            }
            //其他节点指派信息
            if (this.otherAssignInfos && this.otherAssignInfos.length) {
                for (let i = 0; i < this.otherAssignInfos.length; i++) {
                    /** @type {?} */
                    let nextFlowNode = {
                        activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                        activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                        dependency: this.otherAssignInfos[i].dependency,
                        selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: false,
                        anonymousText: ''
                    };
                    context.otherAssignNodes.push(nextFlowNode);
                }
            }
            if (this.response.selectTargetAble && this.destNodes.length > 1 && context.nextFlowNodes.length <= 0) { // 用户没选择跳转节点，不允许提交
                this.notify.warning(this.i18nService.getValue('cueWords.selectNode'));
                this.subject.next({ result: false, isClose: false });
            }
            else if (this.assignInfos.filter((/**
             * @param {?} info
             * @return {?}
             */
            info => info.assigneeInfo && info.assigneeInfo.selectAssignee && !info.assignees.length)).length) {
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
                this.subject.next({ result: false, isClose: false });
            }
            else {
                this.completeTask(context);
            }
        }
    }
    /**
     * @private
     * @param {?} completeContext
     * @return {?}
     */
    completeTask(completeContext) {
        /** @type {?} */
        const attachmentNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        entity => entity.code === 'AttachmentNecessary'));
        /** @type {?} */
        const certificationNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        entity => entity.code === 'CertificationNecessary'));
        /** @type {?} */
        const commentNecessary = this.actionEntity.parameters.find((/**
         * @param {?} entity
         * @return {?}
         */
        entity => entity.code === 'CommentNecessary'));
        if (attachmentNecessary && attachmentNecessary.value === 'true' && (!completeContext.addendum.attachment || completeContext.addendum.attachment === '[]')) {
            this.notify.warning(this.i18nService.getValue('cueWords.attachmentsRequired'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (commentNecessary && commentNecessary.value === 'true' && !completeContext.comment) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.taskService.getBytesLength(this.comment) > this.MAX_COMMENT_LENGTH) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            if (certificationNecessary && certificationNecessary.value === 'true') {
                this.verifySignature((/**
                 * @return {?}
                 */
                () => {
                    completeContext.verifySigned = this.verifySigned;
                    this.taskComplete(completeContext);
                }));
                /** @type {?} */
                const msg = [this.workItemId];
                gspCA.getSignedMsg(msg);
            }
            else {
                this.taskComplete(completeContext);
            }
        }
    }
    /**
     * @private
     * @param {?} handler
     * @return {?}
     */
    executeFormActionsAfterCompleteTask(handler) {
        // 如果表单注册了事件
        if (this.origin == ActionOrigin.TaskForm && this.ifRegistered && this.formObject) {
            /** @type {?} */
            const postActions = this.billMethodConfigs.filter((/**
             * @param {?} action
             * @return {?}
             */
            action => action.action === this.actionEntity.code && action.executionTime === 'Post')).sort((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            (x, y) => x.sortOrder - y.sortOrder));
            if (postActions && postActions.length) {
                this.executePostFormActions(postActions, handler);
            }
        }
        else {
            handler();
        }
    }
    /**
     * @private
     * @param {?} formActions
     * @param {?} hander
     * @return {?}
     */
    executePostFormActions(formActions, hander) {
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const data = re.data.data;
                if (data.result === true) {
                    this.executePostFormActions(formActions, hander);
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批后表单操作执行失败！');
                }
            }));
            // 执行表单动作
            /** @type {?} */
            const formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            hander();
        }
    }
    //帮助选人后
    /**
     * @param {?} data
     * @return {?}
     */
    afterConfirmForTransfer(data) {
        if (data && data.length) {
            this.selectedUsers = data.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.id));
            this.selectedUserNgModule = data.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.name)).join();
        }
        else {
            this.selectedUsers = [];
        }
        if (this.actionEntity.code == 'AddSign' && this.addSign.originMultiInstType == MultiInstanceType.Preempt.toString() && this.selectedUsers.length > 1) {
            this.addSign.showMultiInstanceType = true;
        }
        else {
            this.addSign.showMultiInstanceType = false;
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.submitResult.isClose = false;
        this.subject.next(this.submitResult);
        return this.subject.asObservable();
    }
    /**
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    // 下一环节选择后事件
    /**
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.selectedNodeId = data && data.data && data.data.id;
        if (this.response.simulationPaths[data.index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        node => node.resolved === true))) { // 已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index].nodeInfoList);
            this.setOtherAssignInfoAgain(this.response.simulationPaths[data.index].nodeInfoList);
        }
        else {
            /** @type {?} */
            const nodeIds = this.selectedNodeId.split('，').map((/**
             * @param {?} node
             * @return {?}
             */
            node => `"${node}"`)).join();
            // 注意一个中文逗号一个英文逗号
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.getSimulationAssigneeInfo(this.workItemId, nodeIds).subscribe((/**
             * @param {?} nodeInfoList
             * @return {?}
             */
            (nodeInfoList) => {
                load.close();
                this.setAssignInfo(nodeInfoList);
                this.setOtherAssignInfoAgain(nodeInfoList);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.taskService.error(error);
            }));
        }
    }
    // 下一环节清空后事件
    /**
     * @return {?}
     */
    selectNodeClear() {
        this.selectedNodeId = null;
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
    }
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirmForAssign(data, index) {
        this.assignInfos[index].assignees = data;
    }
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirmForOtherAssign(data, index) {
        this.otherAssignInfos[index].assignees = data;
    }
    /**
     * 上传附件后事件
     * @param {?} data
     * @return {?}
     */
    addAttachment(data) {
        this.addendum.attachment = JSON.stringify(data);
    }
    /**
     * 手写签名后事件
     * @param {?} data
     * @return {?}
     */
    addSignature(data) {
        if (data) {
            /** @type {?} */
            const signInfo = {
                id: data,
                waterMarking: null
            };
            this.addendum.signature = JSON.stringify(signInfo);
        }
        else {
            this.addendum.signature = '';
        }
    }
    // 以服务方式打开组件时，左右加上padding
    /**
     * @return {?}
     */
    addPadding() {
        this.cls = 'f-utils-fill-flex-column h-100 px-4 py-2';
    }
    /**
     * @private
     * @param {?} workItemId
     * @param {?} action
     * @return {?}
     */
    sendMessage(workItemId, action) {
        if (this.iframe) {
            /** @type {?} */
            const iframeWindow = this.iframe.nativeElement.contentWindow;
            /** @type {?} */
            const message = {
                target: workItemId,
                data: {
                    command: action.method,
                    arguments: action.methodParameters
                }
            };
            iframeWindow.postMessage(message, this.POST_MESSAGE_TARGET);
        }
        else {
            this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
            this.notify.warning('请等待表单加载完成后再试');
        }
    }
    // 提交审批前的数字签名及验签
    /**
     * @param {?} handler
     * @return {?}
     */
    verifySignature(handler) {
        /** @type {?} */
        const that = this;
        if (((/** @type {?} */ (window))).gspframeworkService &&
            ((/** @type {?} */ (window))).gspframeworkService.rtf) {
            ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', (/**
             * @param {?} signedData
             * @return {?}
             */
            function signMsgOver(signedData) {
                if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                    // 证书对象
                    /** @type {?} */
                    const cert = gspCA.getCurCert();
                    // 验签参数
                    that.verifySigned = {
                        // 要验证的证书base64编码的字符流(certkey)
                        certBase64Info: gspCA.getCertBase64(cert),
                        // 签名原信息
                        msg: [that.workItemId],
                        // 要签名后信息
                        signedmsg: signedData[1][0],
                        // 用户使用场景，目前未使用，可以为空
                        useCase: null,
                    };
                    handler();
                }
                else {
                    that.loadingService.close();
                    that.subject.next({ result: false, isClose: false });
                    that.notify.error(signedData[1]);
                    throw new Error(signedData[1]);
                }
            }));
        }
    }
    // 通过、驳回、其他第三方动作
    /**
     * @param {?} completeContext
     * @return {?}
     */
    taskComplete(completeContext) {
        this.taskService.complete(completeContext).subscribe((/**
         * @param {?} cr
         * @return {?}
         */
        (cr) => {
            this.executeFormActionsAfterCompleteTask((/**
             * @return {?}
             */
            () => {
                if (cr.needInteraction) { // 通过后指派场景
                    if (this.origin == ActionOrigin.TaskCenter) {
                        this.subject.next({ result: true, isClose: false });
                    }
                    else {
                        this.subject.next({ result: false, isClose: false }); //关掉loading
                    }
                    this.notify.info(this.i18nService.getValue('cueWords.select')
                        + '【' + cr.nextFlowNodes[0].activityDefinitionName + '】'
                        + this.i18nService.getValue('cueWords.processor'));
                    /** @type {?} */
                    let task = new TaskEntity();
                    /** @type {?} */
                    let action = new TaskAction();
                    task.sourceId = cr.nextFlowNodes[0].assigneeInfo.workItemId;
                    action.code = 'AssignUser';
                    action.name = this.i18nService.getValue('cueWords.assignUser');
                    this.handlerService.execute(task, action).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    re => {
                        if (re) {
                            this.subject.next({ result: true, isClose: true });
                        }
                    }));
                }
                else {
                    if (completeContext.conclusionValue === 'Pass') {
                        this.notify.success(this.i18nService.getValue('cueWords.successPass'));
                    }
                    else if (completeContext.conclusionValue === 'Back') {
                        this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                    }
                    else {
                        this.notify.success(this.actionEntity.name + this.i18nService.getValue('static.success'));
                    }
                    this.subject.next({ result: true, isClose: true });
                }
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.subject.next({ result: false, isClose: false });
            this.taskService.error(error);
        }));
    }
}
/**
 * 消息监听处理方法
 */
TaskExecuteComponent.func = null;
TaskExecuteComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-task-execute',
                template: "<!-- \u6279\u91CF\u5BA1\u6279\u65F6\u63D0\u793A -->\r\n<div *ngIf=\"taskList?.length > 20\" class=\"wf-task-batch-message\">\r\n  <span class=\"f-icon f-icon-info\"></span>\r\n  <span class=\"wf-task-batch-selected\">{{\r\n    \"batchSubmit.selected\" | translate\r\n  }}</span>\r\n  <span class=\"wf-task-batch-rows\">{{ taskList.length }}</span>\r\n  <span>{{ \"batchSubmit.item\" | translate }}</span>\r\n  <span>{{ \"batchSubmit.time\" | translate }}</span>\r\n  <span class=\"wf-task-batch-time\">{{ batchSecond }}</span>\r\n  <span>{{ \"batchSubmit.second\" | translate }}</span>\r\n</div>\r\n\r\n<!-- \u610F\u89C1\u8F93\u5165 -->\r\n<wf-comment\r\n  *ngIf=\"!showUrgeMessageSubject\"\r\n  class=\"w-100\"\r\n  name=\"comment\"\r\n  [(ngModel)]=\"comment\"\r\n  [defaultComment]=\"defaultComment\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [processInstanceId]=\"processInstanceId\"\r\n  [showAttachment]=\"showAttachment\"\r\n  [showCommonComment]=\"showCommonComment\"\r\n  [showSign]=\"showSign\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n  [TaskCenterConfig]=\"configList\"\r\n  [curUserId]=\"\r\n    task ? task.owner : taskList && taskList.length ? taskList[0].owner : ''\r\n  \"\r\n  [taskOrigin]=\"origin\"\r\n  (attachment)=\"addAttachment($event)\"\r\n  (signature)=\"addSignature($event)\"\r\n>\r\n</wf-comment>\r\n\r\n<!--\u50AC\u529E\u6D88\u606F-->\r\n<urge-handle\r\n  *ngIf=\"showUrgeMessageSubject\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [showMessageSubject]=\"showUrgeMessageSubject\"\r\n  [urgeMessageSubject]=\"urgeMessageSubject\"\r\n  [urgeMessageContent]=\"urgeMessageContent\"\r\n  [subjectEditable]=\"subjectEditable\"\r\n  [contentEditable]=\"contentEditable\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n>\r\n</urge-handle>\r\n\r\n<!-- \u5BA1\u6279\u8BB0\u5F55\u9690\u85CF\uFF08\u4EC5\u5BF9\u81EA\u5DF1\u53EF\u89C1\uFF09 -->\r\n<div\r\n  *ngIf=\"ifShowCommentToMySelf\"\r\n  class=\"custom-control custom-checkbox custom-control-inline\"\r\n  style=\"margin-bottom: 10px\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"custom-control-input\"\r\n    [(ngModel)]=\"hideComment\"\r\n    id=\"taskcenterhidecomment\"\r\n    name=\"taskcenterhidecomment\"\r\n  />\r\n  <label class=\"custom-control-label\" for=\"taskcenterhidecomment\">{{\r\n    \"static.hideComment\" | translate\r\n  }}</label>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282 -->\r\n<div *ngIf=\"ifSelectNode\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">{{ selectNodeText }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"nodeDefaultValue\"\r\n      [data]=\"destNodes\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'id'\"\r\n      [idField]=\"'id'\"\r\n      [readonly]=\"selectTargetAble && destNodes.length > 1 ? false : true\"\r\n      (selectChange)=\"selectNodeChange($event)\"\r\n      (clear)=\"selectNodeClear()\"\r\n      [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"ifAssignUser || ifUrgeType\">\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"\r\n      assignInfos.length > 1\r\n        ? assignInfo.activityDefinitionName\r\n        : ifUrgeType\r\n        ? ('task.urgeText' | translate)\r\n        : ''\r\n    \"\r\n    [ifShowBlank]=\"false\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u79FB\u4EA4\u3001\u52A0\u7B7E\u3001\u5F81\u8BE2\u3001\u77E5\u4F1A \u4EBA\u5458\u5E2E\u52A9-->\r\n<lib-assignee-info\r\n  *ngIf=\"ifSelectUser\"\r\n  [activityName]=\"selectUserText\"\r\n  [singleSelect]=\"singleSelect\"\r\n  [filter]=\"filter\"\r\n  [disabled]=\"false\"\r\n  [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n  [allowGlobalAssign]=\"true\"\r\n  [wfContext]=\"wfContext\"\r\n  (afterConfirm)=\"afterConfirmForTransfer($event)\"\r\n>\r\n</lib-assignee-info>\r\n\r\n<!-- \u52A0\u7B7E -->\r\n<!-- \u5BA1\u6279\u7B56\u7565 -->\r\n<div *ngIf=\"addSign.showMultiInstanceType\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.multiInstanceType\" | translate }}\r\n  </div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-radiogroup\r\n      [(ngModel)]=\"addSign.curMultiInstType\"\r\n      [data]=\"addSign.multiInstanceType\"\r\n      [horizontal]=\"true\"\r\n    >\r\n    </farris-radiogroup>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5141\u8BB8\u518D\u52A0\u7B7E -->\r\n<div *ngIf=\"addSign.showSignToSign\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.allowSignToSign\" | translate }}{{ actionEntity.name }}\r\n  </div>\r\n  <farris-switch [(ngModel)]=\"addSign.allowSignToSIgn\" [size]=\"'small'\">\r\n  </farris-switch>\r\n</div>\r\n\r\n<!-- \u9A73\u56DE\u540E\u518D\u6B21\u63D0\u4EA4\u65F6\u76F4\u63A5\u56DE\u5230\u672C\u8282\u70B9 -->\r\n<div\r\n  *ngIf=\"showBackWardConfig.dynamicBackWardRuleAble\"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">{{ showBackWardConfig.title }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [(ngModel)]=\"showBackWardConfig.displayPlaceholder\"\r\n      [data]=\"showBackWardConfig.backWardRules\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'value'\"\r\n      [idField]=\"'value'\"\r\n      [readonly]=\"false\"\r\n      [enableClear]=\"false\"\r\n      [placeholder]=\"showBackWardConfig.displayPlaceholder\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u7D27\u6025\u7A0B\u5EA6\uFF0C\u4E0B\u4E00\u73AF\u8282\u4E3A\u7ED3\u675F\u65F6\u4E0D\u5C55\u793A -->\r\n<div\r\n  *ngIf=\"\r\n    task?.priority &&\r\n    enablePriority &&\r\n    task.priorityItemList &&\r\n    !selectedNodeId?.startsWith('EndEvent')\r\n  \"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"task.priority\" | translate }}\r\n  </div>\r\n  <farris-radiogroup\r\n    [(ngModel)]=\"selectedPriority\"\r\n    [data]=\"task.priorityItemList\"\r\n    [horizontal]=\"true\"\r\n  >\r\n  </farris-radiogroup>\r\n</div>\r\n\r\n<!-- \u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"otherAssignInfos?.length\">\r\n  <div class=\"wf-task-splitter\">\r\n    {{ \"startProcess.otherNodesAssign\" | translate\r\n    }}<span class=\"wf-task-splitter-line\"></span>\r\n  </div>\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"assignInfo.activityDefinitionName\"\r\n    [ifShowBlank]=\"true\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForOtherAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #taskExecuteButtons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"submit()\"\r\n    [disabled]=\"submitDisable\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
            }] }
];
/** @nocollapse */
TaskExecuteComponent.ctorParameters = () => [
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService },
    { type: WfTaskHandlerService },
    { type: LoadingService },
    { type: MessagerService },
    { type: Injector }
];
TaskExecuteComponent.propDecorators = {
    buttons: [{ type: ViewChild, args: ['taskExecuteButtons',] }],
    sysUserHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    urgeHandleComponent: [{ type: ViewChild, args: [UrgeHandleComponent,] }],
    cls: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批上下文参数
 */
class StartProcessPayload {
}
class FlowNodeInfo {
}
class Assignee {
}
class CancelSubmitPayload {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const MessageType = {
    SubmitSuccess: 'SubmitSuccess',
    SubmitFailed: 'SubmitFailed',
    InfoSelectProcess: 'InfoSelectProcess',
    InfoSelectNode: 'InfoSelectNode',
    InfoSelectParticipant: 'InfoSelectParticipant',
    Cancel: 'Cancel',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批时，记下选择的流程
 */
class StartProcessCache {
}
/**
 * 提交审批时，记下选择的流程
 */
class SelectedProcessItem {
    /**
     * @param {?} processCategoryId
     * @param {?} processDefinitionId
     * @param {?} processDefinitionName
     */
    constructor(processCategoryId, processDefinitionId, processDefinitionName) {
        /**
         * 记录时间
         */
        this.logTime = new Date();
        this.processCategory = processCategoryId;
        this.processDefinitionId = processDefinitionId;
        this.processDefinitionName = processDefinitionName;
        this.logTime = new Date();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessSelectorComponent {
    // task center-ui中start-process-menu使用了此选择器，构造方法改动时，需重新编译
    /**
     * @param {?} taskService
     * @param {?} loadingService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} messager
     * @param {?} injector
     * @param {?} handlerService
     */
    constructor(taskService, loadingService, notify, i18nService, messager, injector, handlerService) {
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.messager = messager;
        this.injector = injector;
        this.handlerService = handlerService;
        this.destProcesses = []; //候选流程
        //候选流程
        this.destNodes = []; //候选下一环节
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }]; //节点返回的指派信息（多个）
        //节点返回的指派信息（多个）
        this.otherAssignInfos = []; //节点返回的指派信息（多个）
        //选择的下一环节ID，后续环节id的拼接
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject(); //返回bool
        //返回bool
        this.subjectWithResponse = new Subject(); //返回流程上下文
        //返回流程上下文
        this.subjectCancel = new Subject(); //点击取消后的subject
        //点击取消后的subject
        this.submitDisable = false; //提交按钮是否禁用
        //提交按钮是否禁用
        this.showButtons = false;
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //选择流程的placeholder
        this.wfContext = new WfContext(); //工作流上下文
        //默认下一环节（提示用）
        this.dialogHeight = 240; //弹框基本高度
        //确认取消按钮
        this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    //是否从iframe打开，应用IDP提交审批集成
    /**
     * @param {?} parameter
     * @return {?}
     */
    set parameter(parameter) {
        if (parameter) {
            this.showButtons = true;
            this.setParam(parameter);
        }
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setParam(param) {
        /** @type {?} */
        let subject = new Subject();
        if (!param) {
            return;
        }
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.payload.otherAssignNodes = [];
        this.wfContext.processCategoryId = param.bizDefKey;
        this.startProcessSimulate(this.payload, subject);
        return subject.asObservable();
    }
    /**
     * @param {?} payload
     * @param {?} subject
     * @return {?}
     */
    startProcessSimulate(payload, subject) {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.response = response;
            response.priorityInfo && response.priorityInfo.enable && (this.dialogHeight += 40);
            this.destProcesses = response.procDefs.map((/**
             * @param {?} process
             * @return {?}
             */
            process => ({ id: process.procDefId, name: process.procDefName + `(v${process.version}.0)` }))); //增加流程的版本信息
            if (this.destProcesses.length === 1) { //只有一个候选流程时
                this.selectedProcessId = this.destProcesses[0].id;
                this.setNextNode(response);
                this.processDefaultValue = this.destProcesses[0].name;
            }
            else { //多个流程时，取上一次选择的
                //多个流程时，取上一次选择的
                /** @type {?} */
                const selectedProcessId = this.getSelectedProcessCache(this.payload.bizDefKey);
                if (selectedProcessId && this.destProcesses.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === selectedProcessId.processDefinitionId)) > -1) {
                    this.getDestNodes(selectedProcessId.processDefinitionId);
                    this.processDefaultValue = selectedProcessId.processDefinitionName;
                }
                else {
                    this.processPlaceholder = this.i18nService.getValue('task.selectPlaceholder');
                }
                this.dialogHeight = 330;
            }
            if (this.assignInfos && this.assignInfos.length) {
                this.dialogHeight += (this.assignInfos.length) * 40;
            }
            if (this.otherAssignInfos && this.otherAssignInfos.length) {
                this.dialogHeight += (this.otherAssignInfos.length + 1) * 40;
            }
            this.dialogHeight = this.dialogHeight > 440 ? 440 : this.dialogHeight;
            subject.next({ result: true, dialogHeight: this.dialogHeight });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            subject.error(error);
            this.taskService.error(error);
        }));
    }
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    selectProcessChange(data) {
        this.nodeCombo.onClear();
        this.getDestNodes(data.data.id);
    }
    /**
     * 根据选择的流程定义id获取下一环节信息
     * @private
     * @param {?} selectedProcessId
     * @return {?}
     */
    getDestNodes(selectedProcessId) {
        this.selectedProcessId = selectedProcessId;
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.clearAssignInfos();
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.response = response;
            this.setNextNode(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
        }));
    }
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.clearAssignInfos();
        this.selectedNodeId = data.data.id;
        /** @type {?} */
        const nodeNames = data.data.name.split('，');
        if (this.response.simulationPaths[data.index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        node => node.resolved === true))) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index]);
            this.setOtherAssignInfo(this.response); //切换节点后，其他节点指派需要更新，重新去重
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            let payload = new StartProcessPayload();
            payload.processDefinitionId = this.selectedProcessId;
            payload.dataId = this.payload.dataId;
            payload.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((/**
             * @param {?} nodeId
             * @param {?} index
             * @return {?}
             */
            (nodeId, index) => {
                /** @type {?} */
                let nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                nextFlowNode.activityDefinitionName = nodeNames[index];
                payload.nextFlowNodes.push(nextFlowNode);
            }));
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.startProcessSimulate(payload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                load.close();
                this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
                this.setOtherAssignInfo(response); //切换节点后，其他节点指派需要更新，重新去重
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                load.close();
                this.taskService.error(error);
            }));
        }
    }
    /**
     * 实现真正的提交
     * @return {?}
     */
    startProcessSubmit() {
        if (!this.selectedProcessId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectProcess')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectProcess'));
            return;
        }
        if (!this.selectedNodeId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectNode')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectNode'));
            return;
        }
        if (this.assignInfos.filter((/**
         * @param {?} info
         * @return {?}
         */
        info => (info.assigneeInfo || info.selectedAssignees.length) && !info.assignees.length)).length) { //空参与者策略时，不提示选人
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectProcessor')) :
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
            return;
        }
        if (this.response.priorityInfo && this.response.priorityInfo.enable && !this.response.priorityInfo.priority) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectPriority')) :
                this.notify.warning(this.i18nService.getValue('task.selectPriority'));
            return;
        }
        /** @type {?} */
        const nodes = this.selectedNodeId.split('，');
        for (let i = 0; i < nodes.length; i++) {
            /** @type {?} */
            let nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityDefinitionName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            }
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            ;
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                    /** @type {?} */
                    const str = this.assignInfos[i].activityDefinitionName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                    this.openFromIframe ? this.messager.warning(str) : this.notify.warning(str);
                    return;
                }
            }
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        //拼接其他节点选人结果
        if (this.otherAssignInfos && this.otherAssignInfos.length) {
            for (let i = 0; i < this.otherAssignInfos.length; i++) {
                /** @type {?} */
                let nextFlowNode = {
                    activityDefinitionId: this.otherAssignInfos[i].activityDefinitionId,
                    activityDefinitionName: this.otherAssignInfos[i].activityDefinitionName,
                    dependency: this.otherAssignInfos[i].dependency,
                    selectedAssignees: this.otherAssignInfos[i].assigneeInfo ? this.otherAssignInfos[i].assignees : [],
                    assigneeInfo: null,
                    resolved: false,
                    anonymous: false,
                    anonymousText: ''
                };
                this.payload.otherAssignNodes.push(nextFlowNode);
            }
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.submitDisable = true;
        //紧急程度
        if (this.response.priorityInfo && this.response.priorityInfo.enable) {
            this.payload.priority = this.response.priorityInfo.priority;
        }
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcess(this.payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            load.close();
            this.submitDisable = false;
            this.subject.next(true);
            this.subjectWithResponse.next(response);
            /** @type {?} */
            let messageAfterSubmit = this.i18nService.getValue('startProcess.submitSuccess');
            if (this.openFromIframe) {
                ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.SubmitSuccess, message: messageAfterSubmit } });
            }
            else {
                this.handlerService.handleSubmitMessage(ConfigCode.Info_After_Submit, this.payload.bizDefKey);
            }
            if (!this.openFromIframe && response.needInteraction) { //提交审批后需要指派场景
                this.notify.info(this.i18nService.getValue('cueWords.select')
                    + response.nextFlowNodes[0].activityDefinitionName
                    + this.i18nService.getValue('cueWords.processor'));
                /** @type {?} */
                let task = new TaskEntity();
                /** @type {?} */
                let action = new TaskAction();
                task.sourceId = response.nextFlowNodes[0].assigneeInfo.workItemId;
                action.code = 'AssignUser';
                action.name = this.i18nService.getValue('cueWords.assignUser');
                this.handlerService.execute(task, action).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => { }));
            }
            this.setSelectedProcessCache();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            load.close();
            this.payload.nextFlowNodes = [];
            this.submitDisable = false;
            this.subject.next(false); //已经有人用了这个subject，提交失败的话返回false by fangpengfei@20210324
            this.taskService.error(error);
        }));
    }
    /**
     * 选择流程清空
     * @return {?}
     */
    selectProcessClear() {
        this.selectedProcessId = '';
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.selectedNodeId = '';
        this.clearAssignInfos();
        this.response = null;
    }
    /**
     * 选择节点清空
     * @return {?}
     */
    selectNodeClear() {
        this.selectedNodeId = '';
        this.clearAssignInfos();
    }
    /**
     * 用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirm(data, index) {
        this.assignInfos[index].assignees = data;
    }
    /**
     * 其他节点用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    otherAssignInfosAfterConfirm(data, index) {
        this.otherAssignInfos[index].assignees = data;
    }
    /**
     * 弹框点击取消
     * @return {?}
     */
    cancel() {
        if (this.openFromIframe) {
            ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.Cancel, message: '' } });
        }
        else {
            this.subjectCancel.next(false);
        }
    }
    /**
     * 获取提交审批后返回值（bool型，兼容历史）
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     * @return {?}
     */
    getSubjectWithResponse() {
        return this.subjectWithResponse.asObservable();
    }
    /**
     * 点击取消后的subject，关闭窗口使用
     * @return {?}
     */
    getSubjectCancel() {
        return this.subjectCancel.asObservable();
    }
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    setNextNode(response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
         * @param {?} path
         * @return {?}
         */
        path => ({
            id: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId)).join('，'),
            name: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionName)).join('，')
        })));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        const defaultIndex = response.simulationPaths.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.default));
        if (defaultIndex > -1) {
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.nodeDefaultValue = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
            this.setOtherAssignInfo(response);
        }
        else {
            this.nodePlaceholder = this.i18nService.getValue('task.selectPlaceholder');
        }
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    setAssignInfo(simulationPaths) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        nodeId => {
            /** @type {?} */
            const node = simulationPaths.nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId === nodeId));
            if (node) {
                this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityDefinitionName: '',
                    activityDefinitionId: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        }));
    }
    /**
     * 设置其他节点指派
     * @private
     * @param {?} response
     * @return {?}
     */
    setOtherAssignInfo(response) {
        this.otherAssignInfos = [];
        /** @type {?} */
        let tmpOtherAssignInfos = [];
        /** @type {?} */
        let otherAssignNodes = response.otherAssignNodes;
        if (otherAssignNodes && otherAssignNodes.length) {
            otherAssignNodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => {
                tmpOtherAssignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityDefinitionName: node.activityDefinitionName,
                    activityDefinitionId: node.activityDefinitionId,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }));
            //其他节点与下一节点去重
            if (this.assignInfos && this.assignInfos.length) {
                tmpOtherAssignInfos = tmpOtherAssignInfos.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => this.assignInfos.findIndex((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => b.activityDefinitionId == a.activityDefinitionId)) < 0));
            }
            this.otherAssignInfos = tmpOtherAssignInfos;
        }
    }
    /**
     * 清空当前指派信息帮助参数
     * @private
     * @return {?}
     */
    clearAssignInfos() {
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityDefinitionName: '',
                activityDefinitionId: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
        this.otherAssignInfos = [];
    }
    /**
     * 获取浏览器缓存，上次流程选择的结果
     * @private
     * @param {?} processCategoryId
     * @return {?}
     */
    getSelectedProcessCache(processCategoryId) {
        /** @type {?} */
        let browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            return browserCache.selectedProcessList.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.processCategory == processCategoryId));
        }
        return undefined;
    }
    /**
     * 浏览器缓存记下流程选择的结果
     * @private
     * @return {?}
     */
    setSelectedProcessCache() {
        /** @type {?} */
        const processCategoryId = this.payload.bizDefKey;
        /** @type {?} */
        const processDefinitionId = this.payload.processDefinitionId;
        /** @type {?} */
        let process = this.destProcesses.find((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id == processDefinitionId));
        /** @type {?} */
        const processDefinitionName = process && process.name;
        /** @type {?} */
        let browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            /** @type {?} */
            let selectedProcessList = browserCache.selectedProcessList;
            if (selectedProcessList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.processCategory == processCategoryId)) > -1) {
                selectedProcessList.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (item.processCategory == processCategoryId) {
                        item.processDefinitionId = processDefinitionId;
                        item.processDefinitionName = processDefinitionName;
                        item.logTime = new Date();
                    }
                }));
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
            else {
                /** @type {?} */
                let item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
                selectedProcessList.push(item);
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
        }
        else {
            /** @type {?} */
            let browserCache = new StartProcessCache();
            /** @type {?} */
            let selectedProcessList = [];
            /** @type {?} */
            let item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
            selectedProcessList.push(item);
            browserCache.selectedProcessList = selectedProcessList;
            localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
        }
    }
}
ProcessSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-process-selector',
                template: "<div>\r\n  <!-- \u5373\u5C06\u6D41\u5411 -->\r\n  <farris-section\r\n    [mainTitle]=\"'startProcess.processTowards' | translate\"\r\n    style=\"padding: 0 24px\"\r\n  >\r\n    <div class=\"wf-submit-section\">\r\n      <!-- \u9009\u62E9\u6D41\u7A0B\u5B9A\u4E49\uFF0C\u4E0B\u62C9 -->\r\n      <div class=\"wf-task-handler-help-div wf-submit-item\">\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"startProcess.procDef\" | translate }}\r\n        </div>\r\n        <div class=\"d-flex\" style=\"flex: 1\">\r\n          <farris-combo-list\r\n            style=\"flex: 1\"\r\n            [(ngModel)]=\"processDefaultValue\"\r\n            [data]=\"destProcesses\"\r\n            [editable]=\"false\"\r\n            [textField]=\"'name'\"\r\n            [valueField]=\"'id'\"\r\n            [idField]=\"'id'\"\r\n            [readonly]=\"destProcesses.length > 1 ? false : true\"\r\n            (selectChange)=\"selectProcessChange($event)\"\r\n            (clear)=\"selectProcessClear()\"\r\n            [placeholder]=\"processPlaceholder\"\r\n          >\r\n          </farris-combo-list>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- \u4E0B\u4E00\u8282\u70B9\uFF0C\u4E0B\u62C9 -->\r\n      <div class=\"wf-task-handler-help-div wf-submit-item\">\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"task.nextNodeText\" | translate }}\r\n        </div>\r\n        <div class=\"d-flex\" style=\"flex: 1\">\r\n          <farris-combo-list\r\n            style=\"flex: 1\"\r\n            #nodeCombo\r\n            [(ngModel)]=\"nodeDefaultValue\"\r\n            [data]=\"destNodes\"\r\n            [editable]=\"false\"\r\n            [textField]=\"'name'\"\r\n            [valueField]=\"'id'\"\r\n            [idField]=\"'id'\"\r\n            [readonly]=\"destNodes.length > 1 ? false : true\"\r\n            [placeholder]=\"nodePlaceholder\"\r\n            (selectChange)=\"selectNodeChange($event)\"\r\n            (clear)=\"selectNodeClear()\"\r\n          >\r\n          </farris-combo-list>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- \u529E\u7406\u4EBA\u5458 -->\r\n      <lib-assignee-info\r\n        *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n        [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n        [setAnonymous]=\"assignInfo.anonymous\"\r\n        [setAnonymousText]=\"assignInfo.anonymousText\"\r\n        [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n        [activityName]=\"\r\n          assignInfos.length > 1 ? assignInfo.activityDefinitionName : ''\r\n        \"\r\n        [ifShowBlank]=\"assignInfos.length > 1 ? false : true\"\r\n        [openFromIframe]=\"openFromIframe\"\r\n        [wfContext]=\"wfContext\"\r\n        [index]=\"i\"\r\n        [ifHorizontal]=\"true\"\r\n        (afterConfirm)=\"afterConfirm($event, i)\"\r\n      ></lib-assignee-info>\r\n\r\n      <!-- \u7D27\u6025\u7A0B\u5EA6 -->\r\n      <div\r\n        *ngIf=\"\r\n          response?.priorityInfo?.enable &&\r\n          response?.priorityInfo?.priorityItemList?.length\r\n        \"\r\n        class=\"wf-task-handler-help-div wf-submit-item\"\r\n      >\r\n        <div class=\"wf-task-handler-help-text wf-submit-item-label\">\r\n          {{ \"task.priority\" | translate }}\r\n        </div>\r\n        <farris-radiogroup\r\n          [(ngModel)]=\"response.priorityInfo.priority\"\r\n          [data]=\"response.priorityInfo.priorityItemList\"\r\n          [horizontal]=\"true\"\r\n        >\r\n        </farris-radiogroup>\r\n      </div>\r\n    </div>\r\n  </farris-section>\r\n\r\n  <!-- \u4FEE\u6539\u5176\u4ED6\u8282\u70B9\u529E\u7406\u4EBA -->\r\n  <farris-section\r\n    *ngIf=\"otherAssignInfos && otherAssignInfos.length\"\r\n    [mainTitle]=\"'startProcess.otherNodesAssign' | translate\"\r\n    style=\"padding: 0 24px\"\r\n  >\r\n    <div class=\"wf-submit-section\">\r\n      <!-- \u529E\u7406\u4EBA\u5458 -->\r\n      <lib-assignee-info\r\n        *ngFor=\"let assignInfo of otherAssignInfos; let i = index\"\r\n        [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n        [setAnonymous]=\"assignInfo.anonymous\"\r\n        [setAnonymousText]=\"assignInfo.anonymousText\"\r\n        [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n        [activityName]=\"assignInfo.activityDefinitionName\"\r\n        [ifShowBlank]=\"true\"\r\n        [openFromIframe]=\"openFromIframe\"\r\n        [wfContext]=\"wfContext\"\r\n        [index]=\"i + 'other'\"\r\n        [ifHorizontal]=\"true\"\r\n        (afterConfirm)=\"otherAssignInfosAfterConfirm($event, i)\"\r\n      ></lib-assignee-info>\r\n    </div>\r\n  </farris-section>\r\n</div>\r\n\r\n<!-- \u5F39\u6846\u663E\u793A\u65F6\uFF0C\u663E\u793A\u6309\u94AE -->\r\n<div *ngIf=\"showButtons\" class=\"modal-footer\">\r\n  <div *ngIf=\"showButtons; then buttons\"></div>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #buttons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    [disabled]=\"submitDisable\"\r\n    directive-throttle\r\n    (throttleClick)=\"startProcessSubmit()\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
            }] }
];
/** @nocollapse */
ProcessSelectorComponent.ctorParameters = () => [
    { type: TaskService },
    { type: LoadingService },
    { type: NotifyService },
    { type: I18nService },
    { type: MessagerService },
    { type: Injector },
    { type: WfTaskHandlerService }
];
ProcessSelectorComponent.propDecorators = {
    nodeCombo: [{ type: ViewChild, args: ['nodeCombo',] }],
    buttons: [{ type: ViewChild, args: ['buttons',] }],
    openFromIframe: [{ type: Input }],
    parameter: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonComment {
    /**
     * @return {?}
     */
    static newEntity() {
        return {
            id: TaskService.newId(),
            message: ''
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 常用意见过滤
 */
class CommonCommentFilter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommentManageComponent {
    //取消确认按钮
    /**
     * @param {?} i18nService
     * @param {?} taskService
     * @param {?} notify
     * @param {?} loadingService
     */
    constructor(i18nService, taskService, notify, loadingService) {
        this.i18nService = i18nService;
        this.taskService = taskService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.commentList = [];
        this.originCommentList = [];
        this.commentColumns = [];
        this.confirmSubject = new Subject(); //点击确定
        //点击确定
        this.cancelSubject = new Subject(); //点击取消
        /**
         * 系统预置的不允许编辑删除
         * @param data data.rowData为实体数据
         * @return
         */
        this.beforeEdit = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data.rowData.userId == '*') {
                return of(false);
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.commentColumns = [{
                field: 'message',
                width: 100,
                title: this.i18nService.getValue('comment.static.content'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'userId',
                width: 20,
                title: this.i18nService.getValue('comment.static.type'),
                template: this.commentTypeCell
            }, {
                field: 'operate',
                width: 20,
                title: this.i18nService.getValue('comment.static.operate'),
                template: this.commentOperateCell
            }];
        //加载意见列表
        this.loadComments();
    }
    /**
     * 点击常用意见，获取用户常用意见列表
     * @return {?}
     */
    loadComments() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getCommentList(this.filter).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            load.close();
            this.commentList = data;
            this.originCommentList = JSON.parse(JSON.stringify(data));
        }), (/**
         * @return {?}
         */
        () => {
            load.close();
        }));
    }
    /**
     * 新增一条常用意见
     * @return {?}
     */
    addCommonComment() {
        /** @type {?} */
        const newEntity = CommonComment.newEntity();
        newEntity.sortOrder = this.commentList.length + 1;
        if (this.filter && this.filter.type) {
            newEntity.type = this.filter.type;
        }
        this.commentList = this.commentList.concat(newEntity);
        //新增后直接编辑单元格
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.dataGrid.editCell(newEntity.id, 'message');
        }), 100);
    }
    /**
     * 删除一条意见 data.rowData
     * @param {?} data
     * @return {?}
     */
    deleteComment(data) {
        if (data.rowData.userId !== '*') {
            this.commentList = this.commentList.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id != data.rowData.id));
            this.originCommentList = this.originCommentList.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id != data.rowData.id));
            this.dataGrid.loadData(this.commentList);
            this.taskService.deleteComment(data.rowData.id).subscribe((/**
             * @return {?}
             */
            () => { }));
        }
    }
    /**
     * 常用意见点击保存
     * @return {?}
     */
    saveCommonComment() {
        this.dataGrid.endCellEdit();
        this.commentList = this.commentList.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.message));
        this.commentList.forEach((/**
         * @param {?} comment
         * @return {?}
         */
        comment => {
            if (this.taskService.getBytesLength(comment.message) > 255) {
                this.notify.warning(this.i18nService.getValue('cueWords.commonCommentTooLong'));
                this.dataGrid.editCell(comment.id, 'message');
                throw new Error("");
            }
        }));
        this.commentList.forEach((/**
         * @param {?} comment
         * @return {?}
         */
        comment => {
            /** @type {?} */
            let origin = this.originCommentList.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id == comment.id));
            if (!origin || comment.message !== origin.message || comment.sortOrder != origin.sortOrder) {
                this.taskService.addComment(comment).subscribe((/**
                 * @return {?}
                 */
                () => { }));
            }
        }));
        //此处已返回给farris
        this.confirmSubject.next({ action: 'submit', data: this.commentList });
    }
    /**
     * 点击取消（此处已返回给farris）
     * @return {?}
     */
    clickCancel() {
        this.commentList = this.commentList.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.message));
        this.cancelSubject.next({ action: 'cancel', data: this.originCommentList });
    }
    /**
     * @return {?}
     */
    getConfirmSUbject() {
        return this.confirmSubject.asObservable();
    }
    /**
     * @return {?}
     */
    getCancelSubject() {
        return this.cancelSubject.asObservable();
    }
}
CommentManageComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-comment-manage',
                template: "<div class=\"task-comment-div\">\r\n  <div class=\"task-comment-datagrid-div\">\r\n    <farris-datagrid\r\n      #dataGrid\r\n      [data]=\"commentList\"\r\n      [columns]=\"commentColumns\"\r\n      [editable]=\"true\"\r\n      [fit]=\"true\"\r\n      [editMode]=\"'cell'\"\r\n      [pagination]=\"false\"\r\n      [fitColumns]=\"true\"\r\n      [clickToEdit]=\"true\"\r\n      [beforeEdit]=\"beforeEdit\"\r\n      [idField]=\"'id'\"\r\n    >\r\n    </farris-datagrid>\r\n  </div>\r\n  <div\r\n    class=\"task-comment-add task-comment-add-common\"\r\n    (click)=\"addCommonComment()\"\r\n  >\r\n    <span class=\"f-icon f-icon-plus mr-1\"></span>\r\n    <span>{{ \"comment.static.clickToAdd\" | translate }}</span>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7C7B\u522B -->\r\n<ng-template #commentTypeCell let-ctx>\r\n  <div>\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId === '*'\"\r\n      class=\"task-comment-type task-comment-type-blue\"\r\n      >{{ \"comment.static.public\" | translate }}</span\r\n    >\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId !== '*'\"\r\n      class=\"task-comment-type task-comment-type-yellow\"\r\n      >{{ \"comment.static.private\" | translate }}</span\r\n    >\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u64CD\u4F5C -->\r\n<ng-template #commentOperateCell let-ctx>\r\n  <div\r\n    *ngIf=\"ctx.rowData.userId !== '*'\"\r\n    class=\"btn-link\"\r\n    style=\"padding: 5px 0\"\r\n    (click)=\"deleteComment(ctx)\"\r\n  >\r\n    {{ \"comment.static.delete\" | translate }}\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4\u6309\u94AE -->\r\n<ng-template #formButtonRef>\r\n  <button class=\"btn btn-secondary mr-2\" (click)=\"clickCancel()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-primary\" (click)=\"saveCommonComment()\">\r\n    {{ \"comment.static.confirm\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".task-comment-div{display:flex;flex-direction:column;height:100%}.task-comment-datagrid-div{display:flex;flex-grow:0;overflow:hidden;padding:0 24px;height:100%}.task-comment-type{padding:2px 6px;border-radius:4px;font-size:12px}.task-comment-type-blue{background:#eef5ff;border:0 solid #aed1ff;color:#5ea4ff}.task-comment-type-yellow{background:#fef5ec;border:0 solid #fad0a1;color:#f5a144}.task-comment-add{display:flex;justify-content:center;align-items:center;margin:0 24px;cursor:pointer;overflow:hidden;font-size:12px;text-align:center;padding:6px;border-radius:4px}.task-comment-add-common{color:#a8adb8;background:#f4f6fc;border:1px dashed #d2d7e2}.task-comment-add:hover{background:rgba(238,245,255,.8);border:1px solid rgba(82,157,255,.4)}"]
            }] }
];
/** @nocollapse */
CommentManageComponent.ctorParameters = () => [
    { type: I18nService },
    { type: TaskService },
    { type: NotifyService },
    { type: LoadingService }
];
CommentManageComponent.propDecorators = {
    filter: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: ['dataGrid',] }],
    commentTypeCell: [{ type: ViewChild, args: ['commentTypeCell',] }],
    commentOperateCell: [{ type: ViewChild, args: ['commentOperateCell',] }],
    buttons: [{ type: ViewChild, args: ['formButtonRef',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfTaskHandlerService {
    /**
     * @param {?} logService
     * @param {?} flowchartService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} taskService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} frameworkService
     * @param {?} appRef
     */
    constructor(logService, flowchartService, injector, resolver, modalService, taskService, notify, i18nService, frameworkService, appRef) {
        this.logService = logService;
        this.flowchartService = flowchartService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.taskService = taskService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.frameworkService = frameworkService;
        this.appRef = appRef;
        this.subject = new Subject();
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //系统当前语言
        this.batchSubmitNum = {
            //批量提交数量
            successNum: 0,
            failedNum: 0,
            errorNum: 0,
        };
        this.batchCancelNum = {
            //批量取消提交数量
            successNum: 0,
            errorNum: 0
        };
        this.loading = this.injector.get(LoadingService);
        this.message = this.injector.get(MessagerService);
    }
    /**
     * 处理单条任务
     * @param {?} task
     * @param {?} action 任务动作
     * @param {?=} otherParams
     * @return {?}
     */
    execute(task, action, otherParams) {
        switch (action.code) {
            case 'ViewBizLog': //审批日志。如果是inSuite，根据流程实例打开
                this.logService.showByProcInstId(task.processInstanceId);
                break;
            case 'ViewFlowChart': //查看流程
                this.flowchartService.viewFlowchartByProcInstIdAndDataId(task.processInstanceId, task.refBizId);
                break;
            case 'ViewExecuteForm': // 联查单据
                this.openApp(task, action, otherParams);
                break;
            default: //办理类任务
                this.complete(task, action);
        }
        return this.subject.asObservable();
    }
    /**
     * @param {?} assigneeInfo
     * @param {?} openFromIframe
     * @return {?}
     */
    assignByInfo(assigneeInfo, openFromIframe) {
        /** @type {?} */
        const assignSubject = new Subject();
        return assignSubject.asObservable();
    }
    /**
     * @private
     * @param {?} task
     * @param {?} action
     * @return {?}
     */
    complete(task, action) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(TaskExecuteComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.setTask(task);
        compRef.instance.setAction(action);
        compRef.instance.addPadding();
        /** @type {?} */
        const modalConfig = {
            title: action.name ? action.name : this.i18nService.getValue('task.title'),
            width: 550,
            height: compRef.instance.dialogHeight,
            showButtons: true,
            buttons: compRef.instance.buttons
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.getSubject().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            re && re.result && this.subject.next(true);
            re && re.result && dialog.close();
        }));
    }
    /**
     * 打开审批联查界面
     * @param {?} entity 任务实体
     * @param {?} action 动作实体
     * @param {?=} otherParams
     * @return {?}
     */
    openApp(entity, action, otherParams) {
        /** @type {?} */
        const sourceId = entity.sourceId;
        /** @type {?} */
        const formInfoLoading = this.loading.show();
        this.taskService.getTaskFormInfo(sourceId).subscribe((/**
         * @param {?} formInfo
         * @return {?}
         */
        (formInfo) => {
            formInfoLoading.close();
            if (!formInfo) {
                this.notify.info(this.i18nService.getValue('task.notFoundBill'));
                return;
            }
            /** @type {?} */
            const options = {
                appType: 'menu',
                funcId: '',
                appId: '',
                appEntrance: '',
                tabId: sourceId,
                isNewTab: true
            };
            // 传工作流上下文参数
            /** @type {?} */
            const parameters = new Map();
            // 功能菜单情况
            if (formInfo.appId) {
                // 默认联查审批界面
                if (formInfo.formType === '1') { //表单嵌流程
                    parameters.set('workItemId', sourceId);
                    parameters.set('procInstId', action.parameters[0].value);
                    parameters.set('taskState', entity.state);
                    parameters.set('isAssign', entity.actions.some((/**
                     * @param {?} action
                     * @return {?}
                     */
                    action => action.code === 'AssignUser')));
                    formInfo.parameters.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => parameters.set(item.code, item.value)));
                    options.funcId = formInfo.appId;
                }
                else { //流程嵌表单
                    options.funcId = 'WF0120';
                    parameters.set('task', entity);
                    parameters.set('formInfo', formInfo);
                    otherParams && parameters.set('taskFilter', otherParams.taskFilter);
                }
            }
            else if (formInfo.url) { //表单格式
                options.funcId = 'WF0120';
                parameters.set('task', entity);
                parameters.set('formInfo', formInfo);
                otherParams && parameters.set('taskFilter', otherParams.taskFilter);
            }
            else {
                this.notify.info(this.i18nService.getValue('task.notFoundBill'));
                return;
            }
            options.entityParams = parameters;
            options.queryStringParams = parameters; //兼容IDP表单
            this.openMenu(options, this.i18nService.getValue('static.taskForm'));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            formInfoLoading.close();
            this.taskService.error(error);
        }));
    }
    /**
     * 打开菜单，区分是否inSuite环境，用不同方式打开菜单
     * @private
     * @param {?} options 打开参数
     * @param {?} menuTitle 菜单名称
     * @return {?}
     */
    openMenu(options, menuTitle) {
        if (this.taskService.isInSuite()) {
            options.menuTitle = menuTitle;
            /** @type {?} */
            var extObj = ((/** @type {?} */ (window))).gspframeworkService.rtf.extendMethod.getExtObj();
            extObj.iGIXMenuOpen(options);
        }
        else {
            /** @type {?} */
            const openMenuLoading = this.loading.show();
            this.frameworkService.openMenu$(options).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                openMenuLoading.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                openMenuLoading.close();
                this.taskService.error(error);
            }));
        }
    }
    /**
     * 返回动作列表，表单嵌流程用到
     * @param {?} workItemId
     * @return {?}
     */
    refreshActions(workItemId) {
        return this.taskService.getWorkItemActions(workItemId).pipe(switchMap((/**
         * @param {?} actionList
         * @return {?}
         */
        (actionList) => {
            return of(actionList.filter((/**
             * @param {?} action
             * @return {?}
             */
            action => action.code !== 'ViewBizLog' &&
                action.code !== 'ViewFlowChart' &&
                action.code !== 'ViewExecuteForm')));
        })));
    }
    /**
     * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei\@2020.06.22）
     * @param {?} procInstId 流程实例ID
     * @param {?} state 任务状态
     * @param {?} actionCode 动作Code
     * @return {?}
     */
    executeByProcInstId(procInstId, state, actionCode) {
        /** @type {?} */
        var action = new TaskAction();
        action.code = actionCode;
        /** @type {?} */
        const subject = new Subject();
        this.taskService.getTaskByProcInstId(procInstId, state).subscribe((/**
         * @param {?} task
         * @return {?}
         */
        (task) => {
            if (task) {
                this.execute(task, action).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    subject.next(re);
                }));
            }
            else {
                this.notify.info(this.i18nService.getValue('task.noTask'));
            }
        }));
        return subject.asObservable();
    }
    /**
     * 根据workItemId 办理任务
     * @param {?} workItemId 工作项ID
     * @param {?} action 动作实体
     * @return {?}
     */
    executeByWorkItemId(workItemId, action) {
        /** @type {?} */
        let task = new TaskEntity();
        task.sourceId = workItemId;
        return this.execute(task, action);
    }
    /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?} subject true：提交成功，false：提交失败
     */
    startProcess(payload) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const configLoad = this.loading.show();
        this.taskService.getTaskCenterConfigByCode(ConfigCode.If_Show_Submit_Dialog, OwnerType.BizDefKey, payload.bizDefKey).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            configLoad.close();
            if (re && re.currentValue === 'false') { //自定义无需弹框
                //自定义无需弹框
                /** @type {?} */
                const simulateLoad = this.loading.show();
                this.taskService.startProcessSimulate(payload).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    simulateLoad.close();
                    if (!response || response.needInteraction === false) { //预解析无需交互
                        //预解析无需交互
                        /** @type {?} */
                        const executeLoad = this.loading.show();
                        this.taskService.startProcess(payload).subscribe((/**
                         * @param {?} response
                         * @return {?}
                         */
                        (response) => {
                            executeLoad.close();
                            if (payload.withResponse) {
                                subject.next(response);
                            }
                            else {
                                subject.next(true);
                            }
                            this.handleSubmitMessage(ConfigCode.Info_After_Submit, payload.bizDefKey);
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        error => {
                            executeLoad.close();
                            if (payload.withResponse) {
                                subject.next(null);
                            }
                            else {
                                subject.next(false);
                            }
                            this.taskService.error(error);
                        }));
                    }
                    else { //预解析需要交互
                        this.showStartProcessDialog(payload).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            subject.next(re);
                        }));
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    simulateLoad.close();
                    subject.next(null);
                    this.taskService.error(error);
                }));
            }
            else { //无是否弹框配置
                this.showStartProcessDialog(payload).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    subject.next(re);
                }));
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            configLoad.close();
            this.taskService.error(error);
        }));
        return subject.asObservable();
    }
    /**
     * 提交审批弹框
     * @private
     * @param {?} payload 参数
     * @return {?}
     */
    showStartProcessDialog(payload) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.setParam(payload).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            /** @type {?} */
            const modalConfig = {
                title: this.i18nService.getValue('startProcess.title'),
                width: 520,
                height: re && re.dialogHeight,
                showButtons: true,
                buttons: compRef.instance.buttons,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        compRef.changeDetectorRef && compRef.changeDetectorRef.detectChanges();
                    }), 100);
                })
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            if (payload.withResponse === true) { //内部使用
                compRef.instance.getSubjectWithResponse().subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    subject.next(re);
                    dialog.close();
                }));
                compRef.instance.getSubjectCancel().subscribe((/**
                 * @return {?}
                 */
                () => {
                    dialog.close();
                }));
            }
            else { //已有业务组调用
                compRef.instance.getSubject().subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    subject.next(re);
                    dialog.close();
                }));
                compRef.instance.getSubjectCancel().subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    subject.next(re);
                    dialog.close();
                }));
            }
        }));
        return subject.asObservable();
    }
    /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    cancelSubmit(payload) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const load = this.loading.show();
        this.taskService.cancelSubmit(payload).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            load.close();
            subject.next(true);
            if (re && re.needInteraction) {
                this.notify.info(this.i18nService.getValue('startProcess.cancelSubmitInfo'));
            }
            else {
                this.handleSubmitMessage(ConfigCode.Info_After_Cancel_Submit, payload.bizDefKey);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            subject.error(false);
            this.taskService.error(error);
        }));
        return subject.asObservable();
    }
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    submitWithBizDefKey(dataId, bizDefKey) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.dataId = dataId;
        payload.bizDefKey = bizDefKey;
        payload.withResponse = true;
        return this.startProcess(payload);
    }
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    cancelSubmitWithDataId(dataId, bizDefKey) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = dataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchSubmitWithBizDefKey(dataIds, bizDefKey) {
        if (!dataIds || !dataIds.length) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        if (dataIds.length === 1) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[0];
            return this.startProcess(startPayload);
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const load = this.loading.show();
        this.batchSubmitNum.successNum = 0;
        this.batchSubmitNum.failedNum = 0;
        this.batchSubmitNum.errorNum = 0;
        this.batchSubmitHelpFunction([...dataIds], bizDefKey, (/**
         * @return {?}
         */
        () => {
            load.close();
            subject.next(true);
        }));
        return subject.asObservable();
    }
    /**
     * 批量提交审批辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    batchSubmitHelpFunction(dataIds, bizDefKey, handler) {
        if (dataIds && dataIds.length > 0) {
            /** @type {?} */
            const dataId = dataIds.shift();
            //引用类型转换
            /** @type {?} */
            let startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataId;
            startPayload.variables = { simulate: true };
            this.taskService.startProcess(startPayload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response.needInteraction) { //需要交互
                    this.batchSubmitNum.failedNum++;
                    this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                }
                else { //不需要交互
                    startPayload.variables = { simulate: false };
                    this.taskService.startProcess(startPayload).subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    (response) => {
                        this.batchSubmitNum.successNum++;
                        this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    }), (/**
                     * @return {?}
                     */
                    () => {
                        this.batchSubmitNum.errorNum++;
                        this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    }));
                }
            }), (/**
             * @return {?}
             */
            () => {
                this.batchSubmitNum.errorNum++;
                this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
            }));
        }
        else { //批量执行完毕
            this.showBatchSubmitInfo(this.batchSubmitNum, bizDefKey);
            handler(); //执行回调函数
        }
    }
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchCancelSubmitWithDataId(dataIds, bizDefKey) {
        if (!dataIds || !dataIds.length) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        if (dataIds.length === 1) {
            return this.cancelSubmitWithDataId(dataIds[0], bizDefKey);
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const load = this.loading.show();
        this.batchCancelNum.successNum = 0;
        this.batchCancelNum.errorNum = 0;
        this.batchCancelHelpFunction([...dataIds], bizDefKey, (/**
         * @return {?}
         */
        () => {
            load.close();
            subject.next(true);
        }));
        return subject.asObservable();
    }
    /**
     * 批量取消辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    batchCancelHelpFunction(dataIds, bizDefKey, handler) {
        if (dataIds && dataIds.length) {
            /** @type {?} */
            const dataId = dataIds.shift();
            //引用类型转换
            /** @type {?} */
            let cancelPayload = new CancelSubmitPayload();
            cancelPayload.dataId = dataId;
            cancelPayload.bizDefKey = bizDefKey;
            this.taskService.cancelSubmit(cancelPayload).subscribe((/**
             * @return {?}
             */
            () => {
                this.batchCancelNum.successNum++;
                this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
            }), (/**
             * @return {?}
             */
            () => {
                this.batchCancelNum.errorNum++;
                this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
            }));
        }
        else {
            this.showBatchCancelSubmitInfo(this.batchCancelNum, bizDefKey);
            handler();
        }
    }
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = `${parentDataId},${childDataId}`;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    }
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childCancelSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = `${parentDataId},${childDataId}`;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        childDataId => `${parentDataId},${childDataId}`));
        return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    }
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        childDataId => `${parentDataId},${childDataId}`));
        return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    }
    /**
     * 批量提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    showBatchSubmitInfo(num, bizDefKey) {
        if (num.successNum && !num.failedNum && !num.errorNum) { //批量全部成功
            this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Submit, OwnerType.BizDefKey, bizDefKey).subscribe((/**
             * @param {?} config
             * @return {?}
             */
            (config) => {
                if (this.curLanguage === 'en') {
                    this.notify.success(JSON.parse(config.currentValue).en);
                }
                if (this.curLanguage === 'zh-CHS') {
                    this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                }
            }));
        }
        else { //非全部成功
            //非全部成功
            /** @type {?} */
            let message = '';
            num.successNum && (message += this.i18nService.getValue('batchStartProcess.success') + `【${num.successNum}】` + this.i18nService.getValue('batchStartProcess.row'));
            num.errorNum && (message += this.i18nService.getValue('batchStartProcess.error') + `【${num.errorNum}】` + this.i18nService.getValue('batchStartProcess.row'));
            num.failedNum && (message += this.i18nService.getValue('batchStartProcess.failed') + `【${num.failedNum}】` + this.i18nService.getValue('batchStartProcess.row'));
            message += this.i18nService.getValue('batchStartProcess.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * 批量取消提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    showBatchCancelSubmitInfo(num, bizDefKey) {
        if (num.successNum && !num.errorNum) { //批量全部成功
            this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Cancel_Submit, OwnerType.BizDefKey, bizDefKey).subscribe((/**
             * @param {?} config
             * @return {?}
             */
            (config) => {
                if (this.curLanguage === 'en') {
                    this.notify.success(JSON.parse(config.currentValue).en);
                }
                if (this.curLanguage === 'zh-CHS') {
                    this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                }
            }));
        }
        else {
            /** @type {?} */
            let message = '';
            num.successNum && (message += this.i18nService.getValue('startProcess.success') + `【${num.successNum}】` + this.i18nService.getValue('startProcess.row'));
            num.errorNum && (message += this.i18nService.getValue('startProcess.failed') + `【${num.errorNum}】` + this.i18nService.getValue('startProcess.row'));
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * @param {?} code
     * @param {?} ownerId
     * @return {?}
     */
    handleSubmitMessage(code, ownerId) {
        /** @type {?} */
        const load = this.loading.show();
        this.taskService.getTaskCenterConfigByCode(code, OwnerType.BizDefKey, ownerId).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            load.close();
            if (re && re.currentValue) {
                /** @type {?} */
                let message = '';
                /** @type {?} */
                const currentValue = JSON.parse(re.currentValue);
                this.curLanguage === 'zh-CHS' && (message = currentValue.zh_CHS);
                this.curLanguage === 'en' && (message = currentValue.en);
                this.curLanguage === 'zh-CHT' && (message = currentValue.zh_CHT);
                this.notify.success(message);
            }
            else {
                code === ConfigCode.Info_After_Submit && this.notify.success(this.i18nService.getValue('startProcess.submitSuccess'));
                code === ConfigCode.Info_After_Cancel_Submit && this.notify.success(this.i18nService.getValue('startProcess.cancelSubmitSuccess'));
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.taskService.error(error);
        }));
    }
    /**
     * 表单上触发流程预解析操作
     * 已封装为表单的命令操作
     * @return {?}
     */
    processSimulate() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const gspWfEventService = ((/** @type {?} */ (window))).parent.gspWfEventService;
        gspWfEventService.simulate((/**
         * @return {?}
         */
        () => {
            subject.next(true);
        }));
        return subject.asObservable();
    }
    /**
     * 根据单据id查看流程图
     * 已封装为表单命令和操作
     * @param {?} dataId
     * @return {?}
     */
    viewFlowChartByDataId(dataId) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        this.flowchartService.viewFlowChartByDataId(dataId);
    }
    /**
     * 查看流程图（新，支持预览）
     * 已封装为表单命令和操作
     * @param {?} bizDefKey 流程分类id
     * @param {?} dataId 表单数据id
     * @return {?}
     */
    viewFlowChartWithForecast(bizDefKey, dataId) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        let payload = new ForecastProcessPayload();
        payload.bizDefKey = bizDefKey;
        payload.dataId = dataId;
        this.flowchartService.viewProcess(payload);
    }
    /**
     * 查看审批记录（弹框）
     * 已封装为表单命令
     * @param {?} dataId 表单数据id
     * @param {?} style 其他参数
     * @return {?}
     */
    viewApprovalLog(dataId, style) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        /** @type {?} */
        const parameters = {
            dataId: dataId,
            style: style,
        };
        this.logService.showApprovalLog(parameters);
    }
    /**
     * 获取用户的常用意见（已暴露给farris）
     * @param {?} filter
     * @return {?} 用户常用意见list
     */
    getCommonComments(filter) {
        return this.taskService.getCommentList(filter);
    }
    /**
     * 展示常用意见管理dialog（已暴露给farris）
     * @param {?} filter
     * @return {?}
     */
    showCommentManageDialog(filter) {
        /** @type {?} */
        let subject = new Subject();
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(CommentManageComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const options = {
            title: this.i18nService.getValue('comment.static.title'),
            width: 740,
            height: 440,
            showButtons: true,
            buttons: compRef.instance.buttons
        };
        compRef.instance.filter = filter;
        /** @type {?} */
        const dialog = this.modalService.show(compRef, options);
        compRef.instance.getConfirmSUbject().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
            subject.next(re);
        }));
        compRef.instance.getCancelSubject().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
            subject.next(re);
        }));
        return subject.asObservable();
    }
}
WfTaskHandlerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WfTaskHandlerService.ctorParameters = () => [
    { type: WfApprovalLogsService },
    { type: WFFlowchartService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService },
    { type: FrameworkService },
    { type: ApplicationRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslatePipe {
    /**
     * @param {?} i18nService
     */
    constructor(i18nService) {
        this.i18nService = i18nService;
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(name, defaultVal = '') {
        if (this.i18nService) {
            /** @type {?} */
            const r = this.i18nService.getValue(name);
            return r ? r : defaultVal;
        }
        else {
            return defaultVal;
        }
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'translate' },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [
    { type: I18nService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 组件已弃用
 */
class TaskAssigninfoComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TaskAssigninfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-task-assigninfo',
                template: "",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * farris用户帮助参数
 */
class UserHelpParam {
    constructor() {
        this.readonly = false;
        this.includeJobLeavers = false;
        this.includeStopUser = false;
        this.personnelOrderField = "orderby_ordernum";
        this.userTypeMode = "WfMode";
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssigneeInfoComponent {
    //扩展帮助的url
    /**
     * @param {?} i18nService
     * @param {?} notify
     * @param {?} cd
     * @param {?} taskService
     * @param {?} injector
     */
    constructor(i18nService, notify, cd, taskService, injector) {
        this.i18nService = i18nService;
        this.notify = notify;
        this.cd = cd;
        this.taskService = taskService;
        this.injector = injector;
        //已经选中的指派人
        this.assignees = []; //返回选中人的ID数组
        //返回选中人的ID数组
        this.anonymous = false; // 是否匿名
        // 是否匿名
        this.anonymousText = ''; // 匿名显示文本
        //默认办理人（界面提示用）
        this.pscChange = null; //farris用户帮助
        //farris用户帮助
        this.disabled = false; //办理人员输入框是否禁用
        this.filter = { notGetCurrentUser: false, notGetStopUser: true, orderField: "order", withAllOrg: true, orgId: '' };
        this.ifShowBlank = true; //办理人为空时，是否显示选人框
        //办理人为空时，是否显示选人框
        this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
        //区分是哪个组件
        this.isUseNewSelectUserHelp = false; //是否直接启用新版选人组件
        //是否直接启用新版选人组件
        this.ifHorizontal = false; //是否水平排列
        //是否水平排列
        this.afterConfirm = new EventEmitter();
        this.groupIcon = '<i class="f-icon f-icon-plus-circle text-primary"></i>';
        this.extendUserHelp = false; //用户帮助是否扩展
        //是否使用farris用户帮助
        this.taskService.getWfUserHelpConfig().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (re && re.userHelpConfig && re.userHelpConfig.isExtend == 'true') {
                this.extendUserHelp = true;
                this.extendUserHelpUrl = re.userHelpConfig.url + '?v=20221114';
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.error(error);
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //引入farris用户帮助脚本
        if (this.openFromIframe) {
            ((/** @type {?} */ (top))).System.import("/platform/common/web/@farris/common-personnel-select/psc.js" + '?v=' + new Date().getTime().toString()).then((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.error(error);
            }));
        }
    }
    /**
     * @param {?} info
     * @return {?}
     */
    set assigneeInfo(info) {
        this.disabled = false;
        this.placeholder = null; //清空
        this.assignUserNgModule = null; //清空
        this._assigneeInfo = info; //可以传null
        if (!this._assigneeInfo) {
            this.disabled = true;
        }
        else {
            if (this._assigneeInfo.selectAssignee) {
                this.disabled = false;
                this.placeholder = this.i18nService.getValue('task.selectPlaceholder'); //请选择
            }
            else {
                this.disabled = true;
                if (this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length) {
                    this.defaultParticipant = this.anonymous ? this.anonymousText : this._assigneeInfo.assigneeUsers.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => user.name)).join(); //解析人名
                }
                else {
                    this.defaultParticipant = this.i18nService.getValue('task.noUser'); //无
                }
            }
            this.singleSelect = !this._assigneeInfo.multiSelect;
            this.allowGlobalAssign = this._assigneeInfo.allowGlobalAssign;
            if (this._assigneeInfo.organizationScope && this._assigneeInfo.organizationScope.length) {
                /** @type {?} */
                const orgList = this._assigneeInfo.organizationScope[0];
                this.filter.orgId = orgList.id;
                this.filter.withAllOrg = orgList.includeChildren;
            }
        }
    }
    /**
     * @param {?} anonymous
     * @return {?}
     */
    set setAnonymous(anonymous) {
        this.anonymous = anonymous;
    }
    /**
     * @param {?} anonymousText
     * @return {?}
     */
    set setAnonymousText(anonymousText) {
        this.anonymousText = anonymousText;
    }
    /**
     * 已选中的人（帮助不可用）
     * @param {?} selectedAssignees
     * @return {?}
     */
    set selectedAssignees(selectedAssignees) {
        !this._assigneeInfo && (this.placeholder = null);
        this._selectedAssignees = selectedAssignees;
        selectedAssignees.length && (this.defaultParticipant = this.anonymous ? this.anonymousText : selectedAssignees.map((/**
         * @param {?} user
         * @return {?}
         */
        user => user.name)).join());
    }
    /**
     * 选择参与者
     * @return {?}
     */
    clickAssignUser() {
        if (this.isUseNewSelectUserHelp) {
            this.extendUserHelp = true;
            this.extendUserHelpUrl = '/platform/runtime/wf/web/wf-user-help/wf-user-help-farris/wf-user-help-farris.js' + '?v=' + new Date().getTime().toString();
        }
        /** @type {?} */
        let context = {
            singleSelect: this.singleSelect,
            allowGlobalAssign: this.allowGlobalAssign,
            assigneeUsers: this._assigneeInfo && this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length ? this._assigneeInfo.assigneeUsers : [],
            filter: this.filter,
            selectedUsers: this.assignees && this.assignees.length ? this.assignees : this._selectedAssignees,
            wfContext: this.wfContext
        };
        if (this.extendUserHelp) {
            if (this.openFromIframe) {
                this.showFarrisUserHelpFromWindow(context);
            }
            else {
                this.showExtendUserHelp(context);
            }
        }
        else {
            this.showExtendUserHelp(context);
        }
    }
    /**
     * 加载扩展帮助
     * @private
     * @param {?} context
     * @return {?}
     */
    showExtendUserHelp(context) {
        System.import(this.extendUserHelpUrl).then((/**
         * @param {?} moduleFactories
         * @return {?}
         */
        (moduleFactories) => {
            /** @type {?} */
            const moduleFactory = Object.values(moduleFactories)[0];
            /** @type {?} */
            const moduleRef = moduleFactory.create(this.injector);
            moduleRef.instance.showHelp(context).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                /** @type {?} */
                let userList = re.userList;
                if (userList && userList.length) {
                    this.assignees = userList.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; }));
                    this.assignUserNgModule = this.assignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => user.name)).join();
                }
                else {
                    this.assignees = [];
                    this.assignUserNgModule = '';
                }
                this.afterConfirm.emit(this.assignees);
                this.cd.detectChanges();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.error(error);
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.error(error);
        }));
    }
    //从window上弹出用户帮助
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    showFarrisUserHelpFromWindow(context) {
        /** @type {?} */
        let param = new UserHelpParam();
        if (context.wfContext) {
            param.filterId = context.wfContext.processCategoryId;
        }
        param.multiSelect = !context.singleSelect;
        /** @type {?} */
        let showOrgTab = false;
        if (context.allowGlobalAssign || (context.filter && context.filter.orgId)) {
            showOrgTab = true;
        }
        /** @type {?} */
        let farrisUnSelectedUserIds = '';
        if (context.assigneeUsers && context.assigneeUsers.length) {
            farrisUnSelectedUserIds = context.assigneeUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.id)).join();
            param.unSelectedUserIds = farrisUnSelectedUserIds;
        }
        //有参与者 + 允许全员
        if (showOrgTab && farrisUnSelectedUserIds) {
            param.showTabIds = 'candidate,recent,organization,favorites,group';
            param.activeTabId = 'candidate';
        }
        //允许全员
        if (showOrgTab && !farrisUnSelectedUserIds) {
            param.showTabIds = 'recent,organization,favorites,group';
            param.activeTabId = 'recent';
        }
        //仅有参与者
        if (!showOrgTab && farrisUnSelectedUserIds) {
            param.showTabIds = 'candidate';
            param.activeTabId = 'candidate';
        }
        if (context.filter) {
            /** @type {?} */
            let filter = context.filter;
            param.includeCurrentUser = !filter.notGetCurrentUser;
            param.orgId = filter.orgId ? filter.orgId : '*';
            param.enableChildHierarchy = filter.withAllOrg;
        }
        if (context.selectedUsers && context.selectedUsers.length) {
            param.userIds = context.selectedUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.id)).join();
        }
        /** @type {?} */
        const token = 'gspWfTask' + this.index;
        ((/** @type {?} */ (top.window))).CommonPersonnelSelect.component.farrisDialogShowInWf(param, token);
        if (!this.pscChange) {
            this.pscChange = ((/** @type {?} */ (top.window))).FARRIS_PSC.selectionsChange.subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re.token == token) {
                    /** @type {?} */
                    let userList = re.data;
                    if (userList && userList.length) {
                        this.assignees = userList.map((/**
                         * @param {?} user
                         * @return {?}
                         */
                        user => { return { id: user.userId, name: user.name }; }));
                        this.assignUserNgModule = this.assignees.map((/**
                         * @param {?} user
                         * @return {?}
                         */
                        user => user.name)).join();
                    }
                    else {
                        this.assignees = [];
                        this.assignUserNgModule = '';
                    }
                    this.afterConfirm.emit(this.assignees);
                    this.cd.detectChanges();
                }
            }));
        }
    }
    //清除
    /**
     * @return {?}
     */
    assignUserClear() {
        this.assignees = [];
        this.assignUserNgModule = null;
        this.afterConfirm.emit([]);
    }
}
AssigneeInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-assignee-info',
                template: "<!-- \u6307\u5B9A\u53C2\u4E0E\u8005\uFF08\u6307\u6D3E\uFF09 -->\r\n<div\r\n  *ngIf=\"\r\n    ifShowBlank ||\r\n    _assigneeInfo ||\r\n    (_selectedAssignees && _selectedAssignees.length)\r\n  \"\r\n  [ngClass]=\"\r\n    ifHorizontal\r\n      ? 'wf-task-handler-help-div wf-submit-item'\r\n      : 'wf-task-handler-help-div'\r\n  \"\r\n>\r\n  <div\r\n    [ngClass]=\"\r\n      ifHorizontal\r\n        ? 'wf-task-handler-help-text wf-submit-item-label'\r\n        : 'wf-task-handler-help-text'\r\n    \"\r\n    title=\"{{ activityName }}\"\r\n  >\r\n    {{ activityName ? activityName : (\"task.assignText\" | translate) }}\r\n  </div>\r\n  <div\r\n    style=\"flex: 1\"\r\n    title=\"{{ assignUserNgModule ? assignUserNgModule : placeholder }}\"\r\n  >\r\n    <input-group\r\n      [(ngModel)]=\"defaultParticipant\"\r\n      [editable]=\"false\"\r\n      [readonly]=\"disabled\"\r\n      [customCls]=\"'custom-cls'\"\r\n      [groupText]=\"groupIcon\"\r\n      [placeholder]=\"placeholder\"\r\n      [(value)]=\"assignUserNgModule\"\r\n      (clickHandle)=\"clickAssignUser()\"\r\n      (clear)=\"assignUserClear()\"\r\n    ></input-group>\r\n  </div>\r\n</div>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:14px}.wf-task-handler-help-div-submit{margin-bottom:14px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.wf-task-batch-selected{padding-left:8px}.wf-task-batch-rows{font-size:13px;font-weight:500;padding:0 4px;color:#2a87ff}.wf-task-batch-time{font-size:13px;font-weight:500;padding:0 4px;color:#424347}.wf-task-batch-message{display:flex;background:#edf9ff;border:1px solid rgba(196,235,255,1);border-radius:8px;margin-bottom:6px;align-items:center;font-size:12px;padding:4px 10px}.wf-submit-section{padding:4px 24px 0}.wf-submit-item{display:flex;align-items:baseline}.wf-submit-item-label{padding-right:10px;width:88px;text-align:right}.wf-task-splitter{display:flex;align-items:center;color:rgba(0,0,0,.4);font-size:12px;margin-bottom:10px}.wf-task-splitter-line{border-bottom:1px dashed rgba(0,0,0,.1);flex-grow:1}"]
            }] }
];
/** @nocollapse */
AssigneeInfoComponent.ctorParameters = () => [
    { type: I18nService },
    { type: NotifyService },
    { type: ChangeDetectorRef },
    { type: TaskService },
    { type: Injector }
];
AssigneeInfoComponent.propDecorators = {
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    singleSelect: [{ type: Input }],
    filter: [{ type: Input }],
    ifShowBlank: [{ type: Input }],
    openFromIframe: [{ type: Input }],
    activityName: [{ type: Input }],
    allowGlobalAssign: [{ type: Input }],
    wfContext: [{ type: Input }],
    index: [{ type: Input }],
    isUseNewSelectUserHelp: [{ type: Input }],
    ifHorizontal: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    assigneeInfo: [{ type: Input }],
    setAnonymous: [{ type: Input }],
    setAnonymousText: [{ type: Input }],
    selectedAssignees: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 点击节流器：避免连续点击
 */
class ThrottleClickDirective {
    constructor() {
        // 一定的时间内只执行第一个事件
        this.THROTTLE_TIME = 2000;
        this.subject = new Subject();
        // 事件方法
        this.throttleClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const result = this.subject.pipe(throttleTime(this.THROTTLE_TIME));
        this.click = result.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.throttleClick.emit(e);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.click.unsubscribe();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        this.subject.next(evt);
    }
}
ThrottleClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[directive-throttle]'
            },] }
];
/** @nocollapse */
ThrottleClickDirective.ctorParameters = () => [];
ThrottleClickDirective.propDecorators = {
    throttleClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 执行上传附件实体
 */
class FileUploadEntity {
}
class GspDocUploadEntity {
}
class GspDocMetadata {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskCommentComponent {
    /**
     * @param {?} taskService
     * @param {?} uploadDialog
     * @param {?} messageService
     * @param {?} loadingService
     */
    constructor(taskService, uploadDialog, messageService, loadingService) {
        this.taskService = taskService;
        this.uploadDialog = uploadDialog;
        this.messageService = messageService;
        this.loadingService = loadingService;
        this.showAttachment = true; //是否显示附件上传，组件控制
        //是否显示附件上传，组件控制
        this.showSign = true; //是否显示签名，组件控制（不同动作可能会不显示）
        //是否显示签名，组件控制（不同动作可能会不显示）
        this.showCommonComment = true; //是否显示常用意见
        this.placeholder = '';
        this.textAreaHeight = 120; //文字框的高度
        this.attachment = new EventEmitter(); //附件
        //附件
        this.signature = new EventEmitter(); //上传签名之后，发送签名id
        //意见维护组件
        this._value = '';
        this.attachmentList = [];
        this.ifShowAttachment = false; //任务中心配置，是否显示附件上传
        //任务中心配置，是否显示附件上传
        this.ifShowSign = false; //任务中心配置，是否显示手写签名
        //临时保存上传的图片
        this.downloadService = new DownloadService();
        this.ifUseSign = false; //是否使用手写
        //是否使用手写
        this.ifUseImg = true; //是否使用上传图片
        //是否使用上传图片
        this.ifEnableSign = true; //是否默认启用签名
        //是否默认启用签名
        this.ifUploadImg = false; //是否上传过图片
        //是否上传过图片
        this.ifCanEditSign = true; //是否允许编辑签名
        //原始的签名id
        this.isShowCommonTips = false; //是否展示提示
        //是否展示提示
        this.commentList = [];
        this.btnHover = {
            //按钮hover样式变化
            commentHover: false,
            attachmentHover: false,
            signHover: false
        };
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => { });
        this.onModelTouched = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => { });
    }
    //当前是任务列表打开还是任务办理界面打开
    /**
     * @param {?} configList
     * @return {?}
     */
    set TaskCenterConfig(configList) {
        if (configList && configList.length) {
            /** @type {?} */
            const attachment = configList.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.configCode == ConfigCode.If_Show_Attachment));
            /** @type {?} */
            const sign = configList.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.configCode == ConfigCode.If_Show_Signature));
            /** @type {?} */
            const enableSign = configList.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.configCode == ConfigCode.If_Use_Sign_By_Default));
            /** @type {?} */
            const editSign = configList.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.configCode === ConfigCode.If_Can_Edit_Signature));
            attachment && attachment.currentValue === 'true' && (this.ifShowAttachment = true);
            sign && sign.currentValue === 'true' && (this.ifShowSign = true);
            enableSign && enableSign.currentValue === 'false' && (this.ifEnableSign = false);
            editSign && editSign.currentValue === 'false' && (this.ifCanEditSign = false);
            if (this.ifShowSign && this.ifEnableSign) {
                this.getUserSign(this.curUserId);
            }
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (this._value !== v) {
            this._value = v;
            this.onModelChange(v);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.commentManageComp.getConfirmSUbject().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            this.commentDialog && this.commentDialog.close();
        }));
        this.commentManageComp.getCancelSubject().subscribe((/**
         * @return {?}
         */
        () => {
            this.commentDialog && this.commentDialog.close();
        }));
    }
    /**
     * 弹出常用意见管理框
     * @return {?}
     */
    showCommentDialog() {
        this.dropDownEl && this.dropDownEl.close();
        this.commentDialog.show();
    }
    /**
     * 点击常用意见，获取用户常用意见列表
     * @return {?}
     */
    loadComments() {
        this.taskService.getCommentList().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.commentList = data;
        }));
    }
    /**
     * ControlValueAccessor必须实现的方法
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.value) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * 选择一条常用意见后事件
     * @param {?} data
     * @return {?}
     */
    buttonClick(data) {
        this.dropDownEl.close();
        this.value = this.value == this.defaultComment ? data : this.value + data;
    }
    /**
     * 上传附件
     * @return {?}
     */
    uploadAttachment() {
        /** @type {?} */
        let isRepeat = false;
        this.uploadDialog.uploadFile(this.processInstanceId ? this.processInstanceId : 'gspwftaskattachment', 'wf_attachment').then((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            for (let i of ((/** @type {?} */ (re)))) {
                isRepeat = false;
                for (let attach of this.attachmentList) {
                    if (attach.fileName === i.fileName) {
                        this.messageService.info('包含重复文件' + i.fileName);
                        isRepeat = true;
                        break;
                    }
                }
                if (!isRepeat) {
                    this.attachmentList.push(i);
                }
            }
            this.attachment.emit(this.attachmentList);
            //执行上传附件
            /** @type {?} */
            let files = new FileUploadEntity();
            files.rootId = "wf_attachment";
            files.metadataIdList = [];
            this.attachmentList.forEach((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                files.metadataIdList.push(a.metadataId);
            }));
            files.metadataIdList.length && this.taskService.uploadAttachment(files).subscribe((/**
             * @return {?}
             */
            () => { }));
        }));
    }
    /**
     * 删除附件
     * @param {?} attachment
     * @return {?}
     */
    attachmentDelete(attachment) {
        /** @type {?} */
        var gspDocDeleteEntity = {
            rootId: "wf_attachment",
            metadataId: attachment.metadataId,
            mode: "Formal"
        };
        /** @type {?} */
        let index = this.attachmentList.indexOf(attachment);
        if (index > -1) {
            this.attachmentList.splice(index, 1);
        }
        this.attachment.emit(this.attachmentList);
        this.taskService.deleteAttachment(gspDocDeleteEntity).subscribe((/**
         * @return {?}
         */
        () => { }));
    }
    /**
     * web端打开附件预览
     * @param {?} metadataId
     * @return {?}
     */
    attachmentPreview(metadataId) {
        /** @type {?} */
        const options = {
            appType: "app",
            funcId: "",
            tabName: "文档在线预览",
            appId: "6ccb476b-f2ba-df8f-6f47-d37d100c56e2",
            appEntrance: "docviewertab",
            tabId: new Date().getTime(),
            entityParams: {
                metadataIdList: [metadataId],
                rootId: "wf_attachment",
                metadataId: null,
                viewOptions: {
                    showHeader: true,
                    showPaging: true,
                    showThumbnails: true,
                    showDownload: true,
                    showSearch: true,
                    showZoom: true,
                    showPrint: true,
                    showSecondaryToolBar: true,
                },
            },
        };
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu(options);
    }
    /**
     * 获取不同格式附件的缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    imageUrl(attachmentInfo) {
        /** @type {?} */
        const url = '/platform/runtime/wf/webapp/mobiletaskcenter/assets/accessory/';
        return url + this.taskService.createItem(attachmentInfo) + '.svg?v=20220303';
    }
    /**
     * 展示手写签名dialog
     * @return {?}
     */
    showSignDialog() {
        this.signDialog.show();
        if (!this.ifEnableSign) {
            this.getUserSign(this.curUserId);
        }
    }
    /**
     * 点击删除签名
     * @return {?}
     */
    clickToDeleteImage() {
        this.signatureImage = '';
        this.signature.emit(null);
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.addUserConfig(ConfigCode.If_Use_Sign_By_Default, 'false').subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            load.close();
        }), (/**
         * @return {?}
         */
        () => {
            load.close();
        }));
    }
    /**
     * @return {?}
     */
    clickToUseSign() {
        this.ifUseImg = false;
        this.ifUseSign = true;
        /** @type {?} */
        const canvas = this.signaturePad.canvasDiv.nativeElement.querySelector('canvas');
        canvas.height = 252;
        canvas.width = 665;
    }
    /**
     * @return {?}
     */
    clickToUploadImg() {
        this.farrisAvatar.onClick();
    }
    /**
     * 手写签名点确定
     * @return {?}
     */
    clickToConfirm() {
        /** @type {?} */
        let image;
        if (this.signaturePad && this.signaturePad.isDraw) { //如果签过名
            image = this.signaturePad.confirm();
        }
        else if (this.ifUploadImg) { //如果上传过图片
            image = this.tmpSignatureImage;
        }
        if (image) {
            this.uploadSignatureImg(image);
        }
        else {
            this.signatureImage = this.tmpSignatureImage;
            this.signature.emit(this.originSignId);
            this.signDialog.close();
        }
        //添加启用签名配置
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.addUserConfig(ConfigCode.If_Use_Sign_By_Default, 'true').subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            load.close();
        }), (/**
         * @return {?}
         */
        () => {
            load.close();
        }));
    }
    /**
     * 点击清空
     * @return {?}
     */
    clickToReset() {
        this.ifUseSign = false;
        this.ifUseImg = true;
        this.signatureImage = '';
        this.tmpSignatureImage = '';
        this.signature.emit('');
        this.signaturePad && (this.signaturePad.isDraw = false);
        this.ifUploadImg = false;
    }
    /**
     * 点击取消
     * @return {?}
     */
    clickToCancel() {
        this.signDialog.close();
    }
    /**
     * 上传图片后事件
     * event.base64 是图片信息,event.name是带后缀的图片名，event.type如image/jpeg
     * @param {?} event
     * @return {?}
     */
    imgChange(event) {
        this.ifUseImg = true;
        this.ifUseSign = false;
        this.ifUploadImg = true;
        /** @type {?} */
        const image = event.base64;
        this.tmpSignatureImage = image;
        this.signatureImage = image;
    }
    /**
     * 上传签名
     * @private
     * @param {?} image
     * @return {?}
     */
    uploadSignatureImg(image) {
        /** @type {?} */
        var uploadSignature = new GspDocUploadEntity();
        uploadSignature.fileContent = image.split(',')[1];
        uploadSignature.filePath = this.curUserId;
        uploadSignature.mode = "Formal";
        uploadSignature.metadata = new GspDocMetadata();
        uploadSignature.metadata.id = this.taskService.createNM();
        uploadSignature.metadata.fileName = this.taskService.createNM() + ".png";
        uploadSignature.metadata.rootId = "taskcentersignature";
        uploadSignature.metadata.docType = "png";
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.uploadSignature(uploadSignature).subscribe((/**
         * @param {?} signId
         * @return {?}
         */
        signId => {
            load.close();
            this.originSignId = signId;
            this.signature.emit(signId);
            this.signatureImage = image;
            this.signDialog.close();
            localStorage.setItem('gspWfTaskUserSign' + this.curUserId + this.taskService.getCurrentDateString(), signId);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
            this.messageService.error('上传签名失败');
        }));
    }
    /**
     * 获取用户的最近一次签名
     * @private
     * @param {?} userId
     * @return {?}
     */
    getUserSign(userId) {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getUserSignId(userId).subscribe((/**
         * @param {?} signId
         * @return {?}
         */
        signId => {
            load.close();
            if (signId) {
                this.signature.emit(signId);
                this.originSignId = signId;
                this.signatureImage = this.downloadService.getDownloadUrl(signId, 'taskcentersignature');
                this.tmpSignatureImage = this.signatureImage;
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.error(error);
            load.close();
        }));
    }
    //文本框值变动监听事件
    /**
     * @param {?} e
     * @return {?}
     */
    valueChange(e) {
        if (this.taskService.getBytesLength(this.value) > 4000) {
            this.isShowCommonTips = true;
        }
        else {
            this.isShowCommonTips = false;
        }
    }
}
TaskCommentComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-comment',
                template: "<div\r\n  class=\"fa-approve-comment fa-approve-common-gutter\"\r\n  style=\"margin-bottom: 14px\"\r\n>\r\n  <!-- \u8F93\u5165\u6846 -->\r\n  <div class=\"fa-approve-comment--content\">\r\n    <textarea\r\n      class=\"form-control content-textarea\"\r\n      style=\"font-size: 13px\"\r\n      [(ngModel)]=\"value\"\r\n      (ngModelChange)=\"valueChange($event)\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [style.height.px]=\"textAreaHeight\"\r\n    ></textarea>\r\n  </div>\r\n  <div\r\n    class=\"fa-approve-comment--footer wf-approve-comment--footer\"\r\n    *ngIf=\"isShowCommonTips\"\r\n  >\r\n    <div class=\"wf-feature-warning\"></div>\r\n    <span\r\n      ><span class=\"wf-feature-span\">{{\r\n        \"comment.static.comment\" | translate\r\n      }}</span\r\n      >{{ \"comment.static.tooLongTips\" | translate }}</span\r\n    >\r\n  </div>\r\n  <!-- \u8F93\u5165\u6846\u4E0B\u65B9\u4E00\u6392\u6309\u94AE -->\r\n  <div class=\"fa-approve-comment--footer\">\r\n    <div\r\n      *ngIf=\"showAttachment || showSign || showCommonComment\"\r\n      class=\"approve-comment--text-btns\"\r\n    >\r\n      <!-- \u5E38\u7528\u610F\u89C1 -->\r\n      <div\r\n        *ngIf=\"showCommonComment\"\r\n        class=\"text-btns-item\"\r\n        (click)=\"loadComments()\"\r\n        (mouseover)=\"btnHover.commentHover = true\"\r\n        (mouseleave)=\"btnHover.commentHover = false\"\r\n        [ngClass]=\"btnHover.commentHover && 'text-primary'\"\r\n      >\r\n        <div fDropdown #dropdownEl=\"fDropdown\">\r\n          <div fDropdownToggle>\r\n            <span class=\"f-icon f-icon-message\"></span>\r\n            <span>\r\n              {{ \"comment.static.inputLabel\" | translate }}\r\n            </span>\r\n          </div>\r\n          <div class=\"dropdown-menu task-drop-down-menu\" fDropdownMenu>\r\n            <li\r\n              class=\"dropdown-item\"\r\n              *ngFor=\"let comment of commentList\"\r\n              (click)=\"buttonClick(comment.message)\"\r\n            >\r\n              <span>{{ comment.message }}</span>\r\n            </li>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <!-- \u610F\u89C1\u7BA1\u7406 -->\r\n            <div\r\n              class=\"dropdown-item\"\r\n              style=\"display: flex; align-items: center\"\r\n              (click)=\"showCommentDialog()\"\r\n            >\r\n              <span class=\"f-icon f-icon-home-setup\"></span>\r\n              <span style=\"padding-left: 6px\">{{\r\n                \"comment.static.manage\" | translate\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- \u4E0A\u4F20\u9644\u4EF6 -->\r\n      <div\r\n        class=\"text-btns-item\"\r\n        *ngIf=\"ifShowAttachment && showAttachment\"\r\n        (click)=\"uploadAttachment()\"\r\n        (mouseover)=\"btnHover.attachmentHover = true\"\r\n        (mouseleave)=\"btnHover.attachmentHover = false\"\r\n        [ngClass]=\"btnHover.attachmentHover && 'text-primary'\"\r\n        title=\"{{ 'comment.attachment.tips' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-attachment\"></span>\r\n        <span class=\"text-btns-item--text\">\r\n          {{ \"comment.static.attachmentUpload\" | translate }}\r\n        </span>\r\n      </div>\r\n      <!-- \u624B\u5199\u7B7E\u540D -->\r\n      <div\r\n        class=\"text-btns-item\"\r\n        *ngIf=\"showSign && ifShowSign && ifCanEditSign && curUserId\"\r\n        title=\"{{ 'comment.signature.tips' | translate }}\"\r\n        (click)=\"showSignDialog()\"\r\n        (mouseover)=\"btnHover.signHover = true\"\r\n        (mouseleave)=\"btnHover.signHover = false\"\r\n        [ngClass]=\"btnHover.signHover && 'text-primary'\"\r\n      >\r\n        <span class=\"f-icon f-icon-edit\"></span>\r\n        <span>{{ \"comment.signature.title\" | translate }}</span>\r\n      </div>\r\n      <!-- \u624B\u5199\u7B7E\u540D\u9884\u89C8 -->\r\n      <div\r\n        *ngIf=\"showSign && ifShowSign && signatureImage\"\r\n        class=\"signatureImage\"\r\n      >\r\n        <img [src]=\"signatureImage\" style=\"width: 70px; height: 26px\" />\r\n        <div\r\n          *ngIf=\"ifCanEditSign\"\r\n          class=\"attachment-delete\"\r\n          (click)=\"clickToDeleteImage()\"\r\n          title=\"{{ 'comment.signature.disable' | translate }}\"\r\n        >\r\n          <span class=\"f-icon f-icon-x\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u4E0A\u4F20\u540E\u7684\u9644\u4EF6\u9884\u89C8 -->\r\n<div *ngIf=\"attachmentList?.length > 0\" style=\"margin-bottom: 20px\">\r\n  <div\r\n    class=\"task-comment-attachment\"\r\n    *ngFor=\"let attachment of attachmentList\"\r\n  >\r\n    <!-- \u9644\u4EF6\u540D\u79F0 -->\r\n    <div class=\"task-comment-attachment-title\">\r\n      <img class=\"task-comment-attachment-img\" [src]=\"imageUrl(attachment)\" />\r\n      <span>{{ attachment.fileName }}</span>\r\n    </div>\r\n    <div style=\"display: flex; align-items: center\">\r\n      <!-- \u9644\u4EF6\u5927\u5C0F -->\r\n      <div *ngIf=\"attachment.fileSize\" class=\"task-comment-attachment-size\">\r\n        {{ attachment.fileSize }}\r\n      </div>\r\n      <!-- \u67E5\u770B -->\r\n      <div\r\n        *ngIf=\"taskOrigin == 'TaskForm'\"\r\n        class=\"task-comment-attach-icon\"\r\n        (click)=\"attachmentPreview(attachment.metadataId)\"\r\n        title=\"{{ 'comment.signature.view' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-enclosure_browse\"></span>\r\n      </div>\r\n      <!-- \u5220\u9664 -->\r\n      <div\r\n        class=\"task-comment-attach-icon\"\r\n        (click)=\"attachmentDelete(attachment)\"\r\n        title=\"{{ 'comment.signature.delete' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-enclosure_delete\"></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4 -->\r\n<farris-dialog\r\n  #commentDialog\r\n  [width]=\"740\"\r\n  [height]=\"440\"\r\n  [buttons]=\"commentManageComp.buttons\"\r\n  [title]=\"'comment.static.title' | translate\"\r\n>\r\n  <lib-comment-manage #commentManageComp></lib-comment-manage>\r\n</farris-dialog>\r\n\r\n<!-- \u7B7E\u540D\u5F39\u6846 -->\r\n<farris-dialog\r\n  #signDialog\r\n  [buttons]=\"signButtons\"\r\n  [width]=\"710\"\r\n  [height]=\"420\"\r\n  [title]=\"'comment.signature.dialogTitle' | translate\"\r\n  [resizable]=\"false\"\r\n  [showMaxButton]=\"false\"\r\n>\r\n  <wf-sign-here\r\n    #wfSignHere\r\n    [title]=\"''\"\r\n    [ngStyle]=\"!ifUseSign ? { display: 'none' } : null\"\r\n  ></wf-sign-here>\r\n  <div *ngIf=\"ifUseImg && tmpSignatureImage\" class=\"signature-img-default\">\r\n    <img [src]=\"tmpSignatureImage\" style=\"height: 252px\" />\r\n  </div>\r\n  <div *ngIf=\"ifUseImg && !tmpSignatureImage\" class=\"signature-img-div\">\r\n    <div class=\"signature-img-main\">\r\n      <div style=\"margin-bottom: 28px\">\r\n        <img\r\n          src=\"/platform/runtime/common/web/@gsp-wf/wf-task-handler/assets/img/signIcon.svg?v=20210623\"\r\n        />\r\n      </div>\r\n      <div class=\"signature-img-text\">\r\n        <span>{{ \"comment.signature.note1\" | translate }}</span>\r\n        <span class=\"signature-text-action\" (click)=\"clickToUseSign()\">{{\r\n          \"comment.signature.sign\" | translate\r\n        }}</span>\r\n        <span>{{ \"comment.signature.note2\" | translate }}</span>\r\n        <span class=\"signature-text-action\" (click)=\"clickToUploadImg()\">{{\r\n          \"comment.signature.upload\" | translate\r\n        }}</span>\r\n        <span>{{ \"comment.signature.note3\" | translate }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<!-- \u624B\u5199\u7B7E\u540D\u6309\u94AE -->\r\n<ng-template #signButtons>\r\n  <button class=\"btn btn-secondary\" (click)=\"clickToCancel()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-secondary mr-2\" (click)=\"clickToReset()\">\r\n    {{ \"comment.signature.reset\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-primary mr-2\" (click)=\"clickToConfirm()\">\r\n    {{ \"comment.signature.ok\" | translate }}\r\n  </button>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u5934\u50CF\u7EC4\u4EF6\u505A\u56FE\u7247\u4E0A\u4F20 -->\r\n<farris-avatar\r\n  #farrisAvatar\r\n  (imgChange)=\"imgChange($event)\"\r\n  style=\"display: none\"\r\n></farris-avatar>\r\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaskCommentComponent)),
                        multi: true
                    },],
                styles: [":host ::ng-deep .dropdown .btn{padding:0}:host ::ng-deep .dropdown .btn-secondary{box-shadow:none}:host ::ng-deep .dropdown .btn-secondary:focus{box-shadow:none}:host ::ng-deep .dropdown .btn-secondary:hover{color:#388fff}.signatureImage:hover .attachment-delete{display:block}.fa-approve-common-gutter{margin:0 0 12px}.fa-approve-comment .approve-comment--title{display:inline-block;color:#667580;border-radius:4px 4px 0 0;height:26px;padding:0 9px;position:relative;background:#f7f7f7;cursor:pointer}.fa-approve-comment .approve-comment--title:after{content:\"\";height:100%;position:absolute;right:-10px;top:0;bottom:0;border-right:5px solid transparent;border-left:5px solid #f7f7f7;border-bottom:13px solid #f7f7f7;border-top:13px solid transparent}.fa-approve-comment .approve-comment--title .fa-btn-like-dropdown{font-size:12px;padding:2px 0}.fa-approve-comment .fa-approve-comment--content .content-textarea{border-color:#dcdcdc;border-radius:0 0 2px 2px}.fa-approve-comment .fa-approve-comment--footer{font-size:13px;color:#667580;background:#f7f7f7;align-items:center;padding:5px 0}.fa-approve-comment .approve-comment--text-btns{display:flex;flex-direction:row;padding:0 5px}.fa-approve-comment .approve-comment--text-btns .text-btns-item{display:flex;flex-direction:row;align-items:center;font-size:12px;line-height:18px;color:#667580;margin-right:12px;cursor:pointer}.fa-approve-comment .approve-comment--text-btns .text-btns-item .f-icon{margin-right:4px}li{list-style:none}.attachment-delete{float:right;cursor:pointer;display:none;text-align:right;padding-right:10px}.attachment-delete:hover{color:#4297fa}.signature-img-div{display:flex;justify-content:center;align-items:center;height:100%;background:#fafcfd;border:1px solid #d8dfed;border-radius:8px;margin:0 10px}.signature-img-main{display:flex;flex-direction:column;justify-content:center;align-items:center}.signature-img-text{font-size:13px;color:rgba(106,111,121,.85)}.signature-text-action{color:#529efe;padding:0 2px;cursor:pointer}.signature-img-default{display:flex;justify-content:center;align-items:center;height:inherit}.wf-feature-warning{display:inline-block;width:16px;height:16px;line-height:1px;vertical-align:text-bottom;background:url(/platform/runtime/wf/webapp/mobiletaskcenter/assets/img/icon_validator.png)}.wf-approve-comment--footer{font-weight:700;align-items:center;font-family:\"PingFang SC\",\"Lantinghei SC\",\"Helvetica Neue\",Arial,\"Microsoft YaHei\",\"WenQuanYi Micro Hei\",\"Heiti SC\",\"Segoe UI\",sans-serif}.wf-feature-span{color:#f60;padding:0 2px}.task-comment-attachment{display:flex;justify-content:space-between;align-items:center;background:rgba(249,252,255,.87);border:0 solid rgba(229,232,237,.71);border-radius:3px;margin-top:10px;padding:4px;cursor:pointer;font-size:13px}.task-comment-attachment-title{display:flex;align-items:center;font-size:12px}.task-comment-attachment-img{width:20px;margin-right:10px}.task-comment-attachment-size{font-size:12px;padding:0 10px;color:rgba(45,47,51,.45)}.task-comment-attach-icon{margin-left:10px;height:16px;width:16px;color:var(--primary);border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:10px;background:#e8f2ff;cursor:pointer}.task-drop-down-menu{max-height:200px;overflow:auto}"]
            }] }
];
/** @nocollapse */
TaskCommentComponent.ctorParameters = () => [
    { type: TaskService },
    { type: UploadDialogService },
    { type: MessagerService },
    { type: LoadingService }
];
TaskCommentComponent.propDecorators = {
    showAttachment: [{ type: Input }],
    showSign: [{ type: Input }],
    showCommonComment: [{ type: Input }],
    comment: [{ type: Input }],
    placeholder: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    textAreaHeight: [{ type: Input }],
    defaultComment: [{ type: Input }],
    curUserId: [{ type: Input }],
    taskOrigin: [{ type: Input }],
    TaskCenterConfig: [{ type: Input }],
    attachment: [{ type: Output }],
    signature: [{ type: Output }],
    commentDialog: [{ type: ViewChild, args: ['commentDialog',] }],
    signDialog: [{ type: ViewChild, args: ['signDialog',] }],
    dropDownEl: [{ type: ViewChild, args: ['dropdownEl',] }],
    signaturePad: [{ type: ViewChild, args: ['wfSignHere',] }],
    farrisAvatar: [{ type: ViewChild, args: ['farrisAvatar',] }],
    commentManageComp: [{ type: ViewChild, args: ['commentManageComp',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfTaskHandlerModule {
}
WfTaskHandlerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TranslatePipe,
                    TaskExecuteComponent,
                    TaskAssigninfoComponent,
                    ProcessSelectorComponent,
                    AssigneeInfoComponent,
                    ThrottleClickDirective,
                    TaskCommentComponent,
                    UrgeHandleComponent,
                    CommentManageComponent,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    DataTableModule,
                    FarrisDialogModule,
                    PaginationModule,
                    NotifyModule,
                    ComboListModule,
                    WfApprovalLogsModule,
                    UiFlowchartModule,
                    CommonSharedModule,
                    LoadingModule,
                    TaskImplApiModule,
                    MessagerModule,
                    InputGroupModule,
                    WfSignModule,
                    AvatarModule,
                    FDropdownDirectiveTypeModule,
                    DatagridModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    FarrisFormsModule,
                    SwitchModule,
                    FarrisSectionModule
                ],
                providers: [
                    TaskService,
                    I18nService,
                    WfTaskHandlerService,
                    FrameworkService,
                    SessionService,
                    HttpService,
                    CacheService,
                    FrmEventBus,
                    FuncsService,
                ],
                exports: [
                    TaskExecuteComponent,
                    TaskAssigninfoComponent,
                    ProcessSelectorComponent,
                    AssigneeInfoComponent,
                    TaskCommentComponent,
                    CommentManageComponent
                ],
                entryComponents: [
                    TaskExecuteComponent,
                    TaskAssigninfoComponent,
                    ProcessSelectorComponent,
                    AssigneeInfoComponent,
                    TaskCommentComponent,
                    CommentManageComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfTaskHandlerService, WfTaskHandlerModule, TaskService, I18nService, TranslatePipe, StartProcessPayload, FlowNodeInfo, Assignee, CancelSubmitPayload, CommonCommentFilter, AssigneeInfoComponent, TaskCommentComponent, ProcessSelectorComponent, TaskAssigninfoComponent, TaskExecuteComponent, CommentManageComponent, UrgeHandleComponent as ɵa, ThrottleClickDirective as ɵb };

//# sourceMappingURL=gsp-wf-wf-task-handler.js.map