/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { TaskService } from '../services/task.service';
import { CompleteContext } from '../../entity';
import { NotifyService } from '@farris/ui-notify';
import { TaskSignaddComponent } from '../components/task-signadd/task-signadd.component';
import { DialogComponent } from '@farris/ui-dialog';
import { from } from 'rxjs';
import { I18nService } from '../services/i18n.service';
export class WfWorkitemHandleComponent {
    /**
     * @param {?} taskSvc
     * @param {?} notify
     * @param {?} i18nService
     */
    constructor(taskSvc, notify, i18nService) {
        this.taskSvc = taskSvc;
        this.notify = notify;
        this.i18nService = i18nService;
        this.completeContext = new CompleteContext();
        // 加签选中人
        this.displayPlaceholder = "请选择"; //跳转的默认显示节点
        //跳转的默认显示节点
        this.hasDefaultBranch = true;
        /**
         * 任务办理动作列表
         */
        this.actions = new EventEmitter();
        /**
         * 任务办理完成事件
         */
        this.completed = new EventEmitter();
        // 当前选中动作和动作实现
        this.preFuncList = [];
        this.postFuncList = [];
        // 弹框高度设置
        this.height = 420;
        this.actionsTitle = {
            pass: '',
            back: '',
            refuse: '',
            more: '',
            viewLog: '',
            viewFlowChart: '',
            viewBizlog: ''
        };
        /** @type {?} */
        const titles = this.i18nService.getValue('static.taskActions');
        Object.keys(this.actionsTitle).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.actionsTitle[key] = titles[key];
        }));
    }
    /**
     * 任务Id
     * @param {?} workitemId
     * @return {?}
     */
    set workitemId(workitemId) {
        this.inWorkitemId = (workitemId && workitemId.trim());
        if (this.inWorkitemId) {
            this.refreshActions();
        }
    }
    /**
     * @return {?}
     */
    get workitemId() {
        return this.inWorkitemId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 刷新动作列表
     * @private
     * @return {?}
     */
    refreshActions() {
        this.taskSvc.getWorkItemActions(this.inWorkitemId).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            // 临时方案：oData不支持自定义function $expand展开，临时序列化处理
            this.taskActions = re.map((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                action.parameters = JSON.parse(action.parameters);
                return action;
            }));
            this.taskActions = this.taskActions.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code !== 'ViewBizLog'
                && a.code !== 'ViewFlowChart'
                && a.code !== 'ViewExecuteForm'));
            this.actions.emit(this.taskActions);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    /**
     * 动作完成后事件
     * @private
     * @param {?=} result 事件结果
     * @return {?}
     */
    completedEvt(result = true) {
        if (result) {
            this.refreshActions();
        }
        this.completed.emit(result);
    }
    /**
     * 完成审批任务
     * @param {?} actionCode 任务办理动作编号
     * @param {?=} comment
     * @return {?}
     */
    complete(actionCode, comment) {
        switch (actionCode) {
            case 'AssignUser': { // 指派
                this.assignee(this.inWorkitemId);
                break;
            }
            case 'Claim': // 领用
                this.taskSvc.claim(this.inWorkitemId).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    this.notify.success(this.i18nService.getValue('cueWords.successClaim'));
                    this.refreshActions();
                    this.completed.emit(false);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.showError(error);
                }));
                break;
            case 'Unclaim': // 取消领用
                this.taskSvc.unClaim(this.inWorkitemId).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    this.notify.success(this.i18nService.getValue('cueWords.successUnClaim'));
                    this.refreshActions();
                    this.completed.emit(false);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.showError(error);
                }));
                break;
            case 'Retrieve': // 取回
                this.taskSvc.retrieve({ workItemId: this.inWorkitemId, comment }).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    this.notify.success(this.i18nService.getValue('cueWords.successRetrieve'));
                    this.completedEvt();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.showError(error);
                }));
                break;
            case 'Transfer': { // 移交
                this.transferContext = {
                    workItemId: this.inWorkitemId,
                    comment
                };
                break;
            }
            case 'AddSignFront': // 征询
                this.addSignContext = {
                    workItemId: this.inWorkitemId,
                    action: 'AddSignFront'
                };
                break;
            default:
                this.executeTask(actionCode, comment);
        }
    }
    /**
     * @param {?} sucess
     * @return {?}
     */
    refreshList(sucess) {
        this.completedEvt(sucess);
    }
    // 弹出加签帮助
    /**
     * @return {?}
     */
    runAddSign() {
        this.addSignContext = {
            workItemId: this.inWorkitemId,
            action: 'AddSignBehind'
        };
    }
    // 加签完成
    /**
     * @param {?} sucess
     * @return {?}
     */
    addSignComplete(sucess) {
        if (this.addSignContext.action === 'AddSignFront') {
            this.refreshList(sucess);
        }
        else {
            this.completeContext.signAssignees = this.addSignCmp.selectedUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.ID));
            this.selectAddSignees = this.addSignCmp.selectedUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.Name)).join(',');
        }
    }
    // 审批确认
    /**
     * @return {?}
     */
    handleOk() {
        if (!this.completeContext.comment) {
            this.notify.info("请输入审批意见");
            return;
        }
        if (!this.hasDefaultBranch && this.completeContext.destinationActivityId.length <= 0) { //没有默认分支并且用户没选择跳转节点，不允许提交
            this.notify.info("请选择目标节点");
            return;
        }
        this.taskSvc.excuteTask(this.inWorkitemId, this.completeContext).subscribe((/**
         * @param {?} cr
         * @return {?}
         */
        (cr) => {
            this.commentModal.close();
            // 完成工作项后，检查是否需要执行后事件
            this.excutePostEvent();
            if (this.completeContext.conclusionValue === 'Pass') {
                this.notify.success(this.i18nService.getValue('cueWords.successPass'));
            }
            else if (this.completeContext.conclusionValue === 'Back') {
                this.notify.success(this.i18nService.getValue('cueWords.successBack'));
            }
            else if (this.completeContext.conclusionValue === 'Refuse') {
                this.notify.success(this.i18nService.getValue('cueWords.successRefuse'));
            }
            else {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
            }
            if (cr.needInteraction) {
                this.refreshActions(); //通过后弹出指派 add by fpf
                this.assigneeInfos = [cr.nextFlowNodes[0].assigneeInfo];
            }
            else {
                this.completedEvt();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    // 取消操作
    /**
     * @return {?}
     */
    handleCancel() {
        this.completeContext = new CompleteContext();
        this.commentModal.close();
    }
    // 指派操作
    /**
     * @private
     * @param {?} workItemId
     * @return {?}
     */
    assignee(workItemId) {
        this.taskSvc.getAssigneeInfo(workItemId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            info.assigneeInfo.workItemId = workItemId; //兼容处理，此处返回的workitemid为null
            this.assigneeInfos = [info.assigneeInfo];
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    // 重新初始化当前参数
    /**
     * @private
     * @return {?}
     */
    initState() {
        this.selectAddSignees = '';
        this.destActivities = null;
        this.needAddSign = false;
    }
    /**
     * @private
     * @param {?} actionCode
     * @param {?=} opinion
     * @return {?}
     */
    executeTask(actionCode, opinion) {
        this.initState();
        this.completeContext = {
            workItemId: this.inWorkitemId,
            conclusionValue: actionCode,
            comment: '',
            signAssignees: [],
            // 加签人员
            destinationActivityId: '' // 目标节点
        };
        this.completeContext.comment = actionCode === 'Pass' ? this.actionsTitle.pass : '';
        if (opinion) {
            this.completeContext.comment = opinion;
        }
        /** @type {?} */
        const action = this.taskActions.find((/**
         * @param {?} a
         * @return {?}
         */
        a => a.code === actionCode));
        this.taskSvc.getActionEntity(this.workitemId, actionCode).subscribe((/**
         * @param {?} act
         * @return {?}
         */
        (act) => {
            if (!act) { // 审批动作已删除，走完成工作项  TODO: 非完成工作项动作如何处理？
                this.showExcuteModal(action);
            }
            else {
                from(this.excuteAction(act)).subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (!act.webComponent) {
                        this.showExcuteModal(action);
                    }
                }));
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    /**
     * 加签，跳转情况
     * @private
     * @param {?} action 动作
     * @return {?}
     */
    showExcuteModal(action) {
        // 动作参数按照
        if (action && action.parameters) {
            // 跳转、驳回场景
            if (action.parameters.SelectTargetAble === 'True' || action.parameters.SelectTargetAble === 'true') {
                // this.taskSvc.getDestinationScope(this.inWorkitemId, action.code).subscribe((re: { id: string, name: string }[]) => {
                //   this.destActivities = re;
                // });
                this.getDestinationNodes(this.inWorkitemId, action.code);
            }
            // 需要加签
            if (action.parameters.AddSignBehindAble === 'True' || action.parameters.AddSignBehindAble === 'true') {
                this.needAddSign = true;
            }
        }
        this.commentModal.show();
    }
    /**
     * @private
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    getDestinationNodes(workItemId, actionCode) {
        /** @type {?} */
        var nextNodes = [];
        this.taskSvc.getDestinationScope(workItemId, actionCode).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            nextNodes = re;
            /** @type {?} */
            const des = re.map((/**
             * @param {?} a
             * @return {?}
             */
            a => a.nodeInfoList));
            /** @type {?} */
            let list = [];
            des.forEach((/**
             * @param {?} i
             * @return {?}
             */
            i => {
                list = list.concat(i);
            }));
            this.destActivities = list.map((/**
             * @param {?} i
             * @return {?}
             */
            i => ({ id: i.activityDefinitionId, name: i.activityDefinitionName })));
            this.hasDefaultBranch = this.hasDefaultBranchFunc(nextNodes);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    /**
     * 跳转，返回的数据是否有默认分支
     * 如果返回的没有默认节点，跳转节点又没选的话，不允许提交
     * @private
     * @param {?} nextNodes
     * @return {?}
     */
    hasDefaultBranchFunc(nextNodes) {
        for (let i = 0; i < nextNodes.length; i++) {
            if (nextNodes[i].defaultBranch) {
                this.displayPlaceholder = nextNodes[i].nodeInfoList[0].activityDefinitionName;
                return true;
            }
        }
        return false;
    }
    /**
     * @private
     * @param {?} act
     * @return {?}
     */
    excuteAction(act) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.getActionWebEventsFunc(act);
            if (this.preFuncList && this.preFuncList.length > 0) {
                for (let i = 0; i < this.preFuncList.length; i++) {
                    this.preFuncList.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.index === i))[0].func();
                }
            }
            if (this.webCptFunc) {
                this.webCptFunc();
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    excutePostEvent() {
        if (this.postFuncList && this.postFuncList.length > 0) {
            for (let i = 0; i < this.postFuncList.length; i++) {
                this.postFuncList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.index === i))[0].func();
            }
        }
    }
    /**
     * 获取动作的前后事件和实现方法
     * @private
     * @param {?} act 动作
     * @return {?}
     */
    getActionWebEventsFunc(act) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.preFuncList = [];
            this.webCptFunc = null;
            this.postFuncList = [];
            /** @type {?} */
            const reqMap = [];
            /** @type {?} */
            let preIndex = 0;
            /** @type {?} */
            let postIndex = 0;
            if (act.preEvent && act.preEvent.length > 0) {
                for (const e of act.preEvent) {
                    /** @type {?} */
                    const pre = {
                        event: 'pre',
                        index: preIndex++,
                        funcName: e.component.split('#')[1],
                        req: System.import(e.component.split('#')[0])
                    };
                    reqMap.push(pre);
                }
            }
            if (act.webComponent) {
                /** @type {?} */
                const cpt = {
                    event: 'cpt',
                    index: 0,
                    funcName: act.webComponent.split('#')[1],
                    req: System.import(act.webComponent.split('#')[0])
                };
                reqMap.push(cpt);
            }
            if (act.postEvent && act.postEvent.length > 0) {
                for (const a of act.postEvent) {
                    /** @type {?} */
                    const post = {
                        event: 'post',
                        index: postIndex++,
                        funcName: a.component.split('#')[1],
                        req: System.import(a.component.split('#')[0])
                    };
                    reqMap.push(post);
                }
            }
            for (const r of reqMap) {
                /** @type {?} */
                const m = yield r.req;
                if (r.event === 'pre') {
                    this.preFuncList.push({
                        index: r.index,
                        func: m.default[r.funcName]
                    });
                }
                else if (r.event === 'post') {
                    this.postFuncList.push({
                        index: r.index,
                        func: m.default[r.funcName]
                    });
                }
                else {
                    this.webCptFunc = m.default[r.funcName];
                }
            }
        });
    }
    /**
     * 显示报错信息
     * @private
     * @param {?} error
     * @return {?}
     */
    showError(error) {
        if (error && error.error && error.error.Message) {
            this.notify.error(error.error.Message);
        }
        else {
            this.notify.error(error);
        }
    }
}
WfWorkitemHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-workitem-handle',
                template: "<farris-dialog #commentModal [enableScroll]= \"false\" [buttons]=\"buttonRef\" [width]=\"550\" [height]=\"360\" [title]=\"'static.title' | translate\">\r\n    <div style=\"padding: 20px;\">\r\n        <div>\r\n            <wf-comment class=\"w-100\" [(ngModel)]=\"completeContext.comment\" name=\"comment\"\r\n                [placeholder]=\"'static.inputHolder' | translate\"></wf-comment>\r\n        </div>\r\n        <div class=\"d-flex\" style=\"height:28px;overflow: hidden;\">\r\n            <div *ngIf=\"needAddSign\" style=\"flex:1;display: flex;height:28px;overflow: hidden;\" [ngStyle]=\"{'padding-right': destActivities ? '20px' : '0px'}\">\r\n                <label style=\"padding-right: 10px;line-height: 24px;\">{{ 'static.addSignee' | translate }}</label>\r\n                <div class=\"d-flex\" style=\"flex: 1\">\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectAddSignees\" [readOnly]=\"true\" placeholder=\"\u8BF7\u9009\u62E9\"/>\r\n                        <button class=\"k-button k-bare\" type=\"button\" (click)=\"runAddSign()\">\r\n                            <i class=\"f-icon f-icon-lookup\" style=\"color: #bfbfbf; margin: 0 -8px 0 0;\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"destActivities\" style=\"flex:1;display: flex;height:28px;overflow: hidden;\">\r\n                <label style=\"padding-right: 10px;line-height: 24px;\">{{ 'static.selectActivity' | translate }}</label>\r\n                <div class=\"d-flex\" style=\"flex:1\">\r\n                    <farris-combo-list  [data]=\"destActivities\" [textField]=\"'name'\" [valueField]=\"'id'\" [idField]=\"'id'\"\r\n                        [(ngModel)]=\"completeContext.destinationActivityId\" style=\"flex: 1;\" [placeholder] = \"displayPlaceholder\">\r\n                    </farris-combo-list >\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n    <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">{{\r\n            'static.footOk' | translate }}</button>\r\n    <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">{{\r\n            'static.footCancel' | translate }}</button>\r\n</ng-template>\r\n\r\n<!-- \u6307\u6D3E -->\r\n<wf-task-assign [assigneeInfo]=\"assigneeInfos\" (completed)=\"refreshList($event)\"></wf-task-assign>\r\n<!-- \u79FB\u4EA4 -->\r\n<wf-task-transfer [transfer_context]=\"transferContext\" (completed)=\"refreshList($event)\"></wf-task-transfer>\r\n<!-- \u52A0\u7B7E\u3001\u5F81\u8BE2 -->\r\n<wf-task-signadd [addsign_context]=\"addSignContext\" (completed)=\"addSignComplete($event)\"></wf-task-signadd>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
WfWorkitemHandleComponent.ctorParameters = () => [
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService }
];
WfWorkitemHandleComponent.propDecorators = {
    addSignCmp: [{ type: ViewChild, args: [TaskSignaddComponent,] }],
    commentModal: [{ type: ViewChild, args: ['commentModal',] }],
    workitemId: [{ type: Input }],
    actions: [{ type: Output }],
    completed: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    WfWorkitemHandleComponent.prototype.inWorkitemId;
    /**
     * @type {?}
     * @private
     */
    WfWorkitemHandleComponent.prototype.taskActions;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.completeContext;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.assigneeInfos;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.transferContext;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.destActivities;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.addSignContext;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.needAddSign;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.selectAddSignees;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.displayPlaceholder;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.hasDefaultBranch;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.addSignCmp;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.commentModal;
    /**
     * 任务办理动作列表
     * @type {?}
     */
    WfWorkitemHandleComponent.prototype.actions;
    /**
     * 任务办理完成事件
     * @type {?}
     */
    WfWorkitemHandleComponent.prototype.completed;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.preFuncList;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.webCptFunc;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.postFuncList;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.height;
    /** @type {?} */
    WfWorkitemHandleComponent.prototype.actionsTitle;
    /**
     * @type {?}
     * @private
     */
    WfWorkitemHandleComponent.prototype.taskSvc;
    /**
     * @type {?}
     * @private
     */
    WfWorkitemHandleComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    WfWorkitemHandleComponent.prototype.i18nService;
}
//# sourceMappingURL=data:application/json;base64,