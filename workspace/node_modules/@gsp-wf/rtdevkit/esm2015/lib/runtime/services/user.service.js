/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { SessionService, HttpService } from '@ecp-caf/caf-common';
import { forkJoin } from 'rxjs';
export class UserService {
    /**
     * @param {?} http
     * @param {?} httpSvc
     * @param {?} sessionSvc
     */
    constructor(http, httpSvc, sessionSvc) {
        this.http = http;
        this.httpSvc = httpSvc;
        this.sessionSvc = sessionSvc;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getUsersByIds(ids) {
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map((/**
         * @param {?} id
         * @return {?}
         */
        id => this.http.get(pathUrl + `/${id}` + `?mode=0002`)))); //mode用于获取组织全路径
    }
    /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    getUserList(searchValue, index, size) {
        if (searchValue) {
            return this.getUser('codeorname', searchValue, index, size);
        }
        else {
            return this.getUser('', '', index, size);
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    getUser(field, value, index, size) {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/users`;
        url += field ?
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"${field}":'${value}',"orderField":"order", "withAllOrg": "true", "queryMode":"0002"}` :
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"orderField":"order", "withAllOrg": "true", "queryMode":"0002"}`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @param {?=} withAllOrg
     * @param {?=} orgId
     * @return {?}
     */
    getUserList_Assign(searchValue, index, size, withAllOrg, orgId) {
        if (searchValue) {
            return this.getUser_Assign('codeorname', searchValue, index, size, withAllOrg, orgId);
        }
        else {
            return this.getUser_Assign('', '', index, size, withAllOrg, orgId);
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @param {?} withAllOrg
     * @param {?} orgId
     * @return {?}
     */
    getUser_Assign(field, value, index, size, withAllOrg, orgId) {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/users`;
        url += field ?
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"${field}":'${value}',"orderField":"order", "withAllOrg": "true", "queryMode":"0002"}` :
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"orderField":"order", "withAllOrg":'${withAllOrg}',"orgId":'${orgId}', "queryMode":"0002"}`;
        return this.httpSvc.get(url);
    }
    /**
     * 构造Header
     * @private
     * @return {?}
     */
    getBatchHeader() {
        /** @type {?} */
        const sessionId = this.sessionSvc.getCurrentSeesionId();
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId).set('Accept', 'application/json');
        // 此处key必须是headers
        return headers;
    }
    /**
     * 转换配置大小写
     * @param {?} jsonObj Object
     * @return {?}
     */
    toUpperCase(jsonObj) {
        if (typeof (jsonObj) === 'object') {
            for (const key of Object.keys(jsonObj)) {
                jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                delete (jsonObj[key]);
            }
        }
        return jsonObj;
    }
}
UserService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UserService.ctorParameters = () => [
    { type: HttpClient },
    { type: HttpService },
    { type: SessionService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.httpSvc;
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.sessionSvc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi9ydGRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9ydW50aW1lL3NlcnZpY2VzL3VzZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdoQyxNQUFNLE9BQU8sV0FBVzs7Ozs7O0lBRXRCLFlBQ1UsSUFBZ0IsRUFDaEIsT0FBb0IsRUFDcEIsVUFBMEI7UUFGMUIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixZQUFPLEdBQVAsT0FBTyxDQUFhO1FBQ3BCLGVBQVUsR0FBVixVQUFVLENBQWdCO0lBQ2hDLENBQUM7Ozs7O0lBRUwsYUFBYSxDQUFDLEdBQWE7O1lBQ3JCLE9BQU8sR0FBRyw2QkFBNkI7UUFDM0MsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUc7Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLFlBQVksQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLGVBQWU7SUFDbEcsQ0FBQzs7Ozs7OztJQUVELFdBQVcsQ0FBQyxXQUFtQixFQUFFLEtBQWEsRUFBRSxJQUFZO1FBQzFELElBQUksV0FBVyxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzdEO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzs7Ozs7Ozs7SUFFTyxPQUFPLENBQUMsS0FBYSxFQUFFLEtBQWEsRUFBRSxLQUFhLEVBQUUsSUFBWTs7WUFDbkUsR0FBRyxHQUFHLDZCQUE2QjtRQUN2QyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUM7WUFDWixpREFBaUQsS0FBSyxlQUFlLElBQUksS0FBSyxLQUFLLE1BQU0sS0FBSyxtRUFBbUUsQ0FBQyxDQUFDO1lBQ25LLGlEQUFpRCxLQUFLLGVBQWUsSUFBSSxrRUFBa0UsQ0FBQztRQUM5SSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7Ozs7OztJQUVELGtCQUFrQixDQUFDLFdBQW1CLEVBQUUsS0FBYSxFQUFFLElBQVksRUFBRSxVQUFvQixFQUFFLEtBQWM7UUFDdkcsSUFBSSxXQUFXLEVBQUU7WUFDZixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2RjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDcEU7SUFDSCxDQUFDOzs7Ozs7Ozs7OztJQUVPLGNBQWMsQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFBRSxJQUFZLEVBQUUsVUFBbUIsRUFBRSxLQUFhOztZQUM5RyxHQUFHLEdBQUcsNkJBQTZCO1FBQ3ZDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQztZQUNaLGlEQUFpRCxLQUFLLGVBQWUsSUFBSSxLQUFLLEtBQUssTUFBTSxLQUFLLG1FQUFtRSxDQUFDLENBQUM7WUFDbkssaURBQWlELEtBQUssZUFBZSxJQUFJLHdDQUF3QyxVQUFVLGNBQWMsS0FBSyx3QkFBd0IsQ0FBQztRQUN6SyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7OztJQUtPLGNBQWM7O2NBQ2QsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUU7O2NBQ2pELE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQztRQUMvRixrQkFBa0I7UUFDbEIsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Ozs7O0lBTUQsV0FBVyxDQUFDLE9BQWU7UUFDekIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ2pDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN2QjtTQUNGO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7O1lBcEVGLFVBQVU7Ozs7WUFKRixVQUFVO1lBQ00sV0FBVztZQUEzQixjQUFjOzs7Ozs7O0lBT25CLDJCQUF3Qjs7Ozs7SUFDeEIsOEJBQTRCOzs7OztJQUM1QixpQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlLCBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBmb3JrSm9pbiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgaHR0cFN2YzogSHR0cFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHNlc3Npb25TdmM6IFNlc3Npb25TZXJ2aWNlLFxyXG4gICkgeyB9XHJcblxyXG4gIGdldFVzZXJzQnlJZHMoaWRzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICB2YXIgcGF0aFVybCA9ICcvYXBpL3J1bnRpbWUvc3lzL3YxLjAvdXNlcnMnO1xyXG4gICAgcmV0dXJuIGZvcmtKb2luKGlkcy5tYXAoaWQgPT4gdGhpcy5odHRwLmdldChwYXRoVXJsICsgYC8ke2lkfWAgKyBgP21vZGU9MDAwMmApKSk7Ly9tb2Rl55So5LqO6I635Y+W57uE57uH5YWo6Lev5b6EXHJcbiAgfVxyXG5cclxuICBnZXRVc2VyTGlzdChzZWFyY2hWYWx1ZTogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHNlYXJjaFZhbHVlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFVzZXIoJ2NvZGVvcm5hbWUnLCBzZWFyY2hWYWx1ZSwgaW5kZXgsIHNpemUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlcignJywgJycsIGluZGV4LCBzaXplKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VXNlcihmaWVsZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgbGV0IHVybCA9IGAvYXBpL3J1bnRpbWUvc3lzL3YxLjAvdXNlcnNgO1xyXG4gICAgdXJsICs9IGZpZWxkID8gXHJcbiAgICAgIGA/cGFyYW09e1wibm90R2V0Q3VycmVudFVzZXJcIjpmYWxzZSxcInBhZ2VJbmRleFwiOiR7aW5kZXh9LFwicGFnZVNpemVcIjoke3NpemV9LFwiJHtmaWVsZH1cIjonJHt2YWx1ZX0nLFwib3JkZXJGaWVsZFwiOlwib3JkZXJcIiwgXCJ3aXRoQWxsT3JnXCI6IFwidHJ1ZVwiLCBcInF1ZXJ5TW9kZVwiOlwiMDAwMlwifWAgOlxyXG4gICAgICBgP3BhcmFtPXtcIm5vdEdldEN1cnJlbnRVc2VyXCI6ZmFsc2UsXCJwYWdlSW5kZXhcIjoke2luZGV4fSxcInBhZ2VTaXplXCI6JHtzaXplfSxcIm9yZGVyRmllbGRcIjpcIm9yZGVyXCIsIFwid2l0aEFsbE9yZ1wiOiBcInRydWVcIiwgXCJxdWVyeU1vZGVcIjpcIjAwMDJcIn1gO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFN2Yy5nZXQodXJsKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJMaXN0X0Fzc2lnbihzZWFyY2hWYWx1ZTogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIsIHdpdGhBbGxPcmc/OiBib29sZWFuLCBvcmdJZD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAoc2VhcmNoVmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlcl9Bc3NpZ24oJ2NvZGVvcm5hbWUnLCBzZWFyY2hWYWx1ZSwgaW5kZXgsIHNpemUsIHdpdGhBbGxPcmcsIG9yZ0lkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFVzZXJfQXNzaWduKCcnLCAnJywgaW5kZXgsIHNpemUsIHdpdGhBbGxPcmcsIG9yZ0lkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VXNlcl9Bc3NpZ24oZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZywgaW5kZXg6IG51bWJlciwgc2l6ZTogbnVtYmVyLCB3aXRoQWxsT3JnOiBib29sZWFuLCBvcmdJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGxldCB1cmwgPSBgL2FwaS9ydW50aW1lL3N5cy92MS4wL3VzZXJzYDtcclxuICAgIHVybCArPSBmaWVsZCA/IFxyXG4gICAgICBgP3BhcmFtPXtcIm5vdEdldEN1cnJlbnRVc2VyXCI6ZmFsc2UsXCJwYWdlSW5kZXhcIjoke2luZGV4fSxcInBhZ2VTaXplXCI6JHtzaXplfSxcIiR7ZmllbGR9XCI6JyR7dmFsdWV9JyxcIm9yZGVyRmllbGRcIjpcIm9yZGVyXCIsIFwid2l0aEFsbE9yZ1wiOiBcInRydWVcIiwgXCJxdWVyeU1vZGVcIjpcIjAwMDJcIn1gIDpcclxuICAgICAgYD9wYXJhbT17XCJub3RHZXRDdXJyZW50VXNlclwiOmZhbHNlLFwicGFnZUluZGV4XCI6JHtpbmRleH0sXCJwYWdlU2l6ZVwiOiR7c2l6ZX0sXCJvcmRlckZpZWxkXCI6XCJvcmRlclwiLCBcIndpdGhBbGxPcmdcIjonJHt3aXRoQWxsT3JnfScsXCJvcmdJZFwiOicke29yZ0lkfScsIFwicXVlcnlNb2RlXCI6XCIwMDAyXCJ9YDtcclxuICAgIHJldHVybiB0aGlzLmh0dHBTdmMuZ2V0KHVybCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKBIZWFkZXJcclxuICAgKi9cclxuICBwcml2YXRlIGdldEJhdGNoSGVhZGVyKCk6IGFueSB7XHJcbiAgICBjb25zdCBzZXNzaW9uSWQgPSB0aGlzLnNlc3Npb25TdmMuZ2V0Q3VycmVudFNlZXNpb25JZCgpO1xyXG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLnNldCgnU2Vzc2lvbklkJywgc2Vzc2lvbklkKS5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICAvLyDmraTlpIRrZXnlv4XpobvmmK9oZWFkZXJzXHJcbiAgICByZXR1cm4gaGVhZGVycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNoumFjee9ruWkp+Wwj+WGmVxyXG4gICAqIEBwYXJhbSBqc29uT2JqIE9iamVjdFxyXG4gICAqL1xyXG4gIHRvVXBwZXJDYXNlKGpzb25PYmo6IG9iamVjdCk6IGFueSB7XHJcbiAgICBpZiAodHlwZW9mIChqc29uT2JqKSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoanNvbk9iaikpIHtcclxuICAgICAgICBqc29uT2JqW2tleS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSldID0ganNvbk9ialtrZXldO1xyXG4gICAgICAgIGRlbGV0ZSAoanNvbk9ialtrZXldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGpzb25PYmo7XHJcbiAgfVxyXG59XHJcbiJdfQ==