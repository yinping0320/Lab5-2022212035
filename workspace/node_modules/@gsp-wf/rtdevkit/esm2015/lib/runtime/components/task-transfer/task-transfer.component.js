/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { TaskService } from '../../services/task.service';
import { UserService } from '../../services/user.service';
import { UserHelperComponent } from '../user-helper/user-helper.component';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../services/i18n.service';
export class TaskTransferComponent extends UserHelperComponent {
    /**
     * @param {?} taskSvc
     * @param {?} userSvc
     * @param {?} notify
     * @param {?} i18nService
     */
    constructor(taskSvc, userSvc, notify, i18nService) {
        super(i18nService, userSvc);
        this.taskSvc = taskSvc;
        this.userSvc = userSvc;
        this.notify = notify;
        this.i18nService = i18nService;
        this.completed = new EventEmitter();
        this.singleSelect = true;
        this.paginationOptions.id = 'WF-TaskTransfer-DataTable-Pagination';
    }
    /**
     * @param {?} context
     * @return {?}
     */
    set transfer_context(context) {
        this.transferContext = Object.assign({}, context, { assignee: '' });
        this.selectedUsers = [];
        this.showModal(!!this.transferContext.workItemId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    handleOk() {
        this.selectedUsers = this.userTable.selections;
        // 需要校验选中唯一用户
        if (!this.selectedUsers) {
            this.notify.info(this.i18nService.getValue('static.transfer.selectHandover'));
            return;
        }
        this.transferContext.assignee = this.selectedUsers['ID'];
        this.taskSvc.transfer(this.transferContext).subscribe((/**
         * @return {?}
         */
        () => {
            this.notify.success(this.i18nService.getValue('static.transfer.successTransfer'));
            this.completed.emit(true);
            this.showModal(false);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            if (error && error.error && error.error.Message) {
                this.notify.error(error.error.Message);
            }
        }));
    }
}
TaskTransferComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-task-transfer',
                template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
            }] }
];
/** @nocollapse */
TaskTransferComponent.ctorParameters = () => [
    { type: TaskService },
    { type: UserService },
    { type: NotifyService },
    { type: I18nService }
];
TaskTransferComponent.propDecorators = {
    transfer_context: [{ type: Input }],
    completed: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    TaskTransferComponent.prototype.completed;
    /** @type {?} */
    TaskTransferComponent.prototype.transferContext;
    /**
     * @type {?}
     * @private
     */
    TaskTransferComponent.prototype.taskSvc;
    /**
     * @type {?}
     * @protected
     */
    TaskTransferComponent.prototype.userSvc;
    /**
     * @type {?}
     * @protected
     */
    TaskTransferComponent.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    TaskTransferComponent.prototype.i18nService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay10cmFuc2Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3J0ZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3J1bnRpbWUvY29tcG9uZW50cy90YXNrLXRyYW5zZmVyL3Rhc2stdHJhbnNmZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU8xRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsbUJBQW1COzs7Ozs7O0lBZ0I1RCxZQUNVLE9BQW9CLEVBQ2xCLE9BQW9CLEVBQ3BCLE1BQXFCLEVBQ3JCLFdBQXdCO1FBRWxDLEtBQUssQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFMcEIsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUNsQixZQUFPLEdBQVAsT0FBTyxDQUFhO1FBQ3BCLFdBQU0sR0FBTixNQUFNLENBQWU7UUFDckIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFYcEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFjdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsR0FBRyxzQ0FBc0MsQ0FBQztJQUNyRSxDQUFDOzs7OztJQXZCRCxJQUNXLGdCQUFnQixDQUFDLE9BQWdEO1FBQzFFLElBQUksQ0FBQyxlQUFlLHFCQUFRLE9BQU8sSUFBRSxRQUFRLEVBQUUsRUFBRSxHQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7O0lBb0JELFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDL0MsYUFBYTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztZQUM5RSxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsQ0FBQzs7OztRQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ1QsSUFBRyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN4QztRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBckRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qiw4b0NBQXdEOzthQUV6RDs7OztZQVZRLFdBQVc7WUFDWCxXQUFXO1lBRVgsYUFBYTtZQUNiLFdBQVc7OzsrQkFTakIsS0FBSzt3QkFNTCxNQUFNOzs7O0lBQVAsMENBQ3dDOztJQUV4QyxnREFJRTs7Ozs7SUFFQSx3Q0FBNEI7Ozs7O0lBQzVCLHdDQUE4Qjs7Ozs7SUFDOUIsdUNBQStCOzs7OztJQUMvQiw0Q0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRhc2tTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGFzay5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy91c2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VySGVscGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vdXNlci1oZWxwZXIvdXNlci1oZWxwZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9pMThuLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd3Zi10YXNrLXRyYW5zZmVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4uL3VzZXItaGVscGVyL3VzZXItaGVscGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi90YXNrLXRyYW5zZmVyLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFza1RyYW5zZmVyQ29tcG9uZW50IGV4dGVuZHMgVXNlckhlbHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHNldCB0cmFuc2Zlcl9jb250ZXh0KGNvbnRleHQ6IHsgd29ya0l0ZW1JZDogc3RyaW5nLCBjb21tZW50Pzogc3RyaW5nfSkge1xyXG4gICAgdGhpcy50cmFuc2ZlckNvbnRleHQgPSB7IC4uLmNvbnRleHQsIGFzc2lnbmVlOiAnJyB9O1xyXG4gICAgdGhpcy5zZWxlY3RlZFVzZXJzID0gW107XHJcbiAgICB0aGlzLnNob3dNb2RhbCghIXRoaXMudHJhbnNmZXJDb250ZXh0LndvcmtJdGVtSWQpO1xyXG4gIH1cclxuICBAT3V0cHV0KClcclxuICBjb21wbGV0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XHJcblxyXG4gIHRyYW5zZmVyQ29udGV4dDoge1xyXG4gICAgd29ya0l0ZW1JZDogc3RyaW5nLFxyXG4gICAgYXNzaWduZWU6IHN0cmluZyxcclxuICAgIGNvbW1lbnQ/OiBzdHJpbmcgLy8gVE9ET++8muenu+S6pOWkh+azqFxyXG4gIH07XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHRhc2tTdmM6IFRhc2tTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHVzZXJTdmM6IFVzZXJTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIG5vdGlmeTogTm90aWZ5U2VydmljZSxcclxuICAgIHByb3RlY3RlZCBpMThuU2VydmljZTogSTE4blNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKGkxOG5TZXJ2aWNlLCB1c2VyU3ZjKTtcclxuICAgIHRoaXMuc2luZ2xlU2VsZWN0ID0gdHJ1ZTtcclxuICAgIHRoaXMucGFnaW5hdGlvbk9wdGlvbnMuaWQgPSAnV0YtVGFza1RyYW5zZmVyLURhdGFUYWJsZS1QYWdpbmF0aW9uJztcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlT2soKTogdm9pZCB7XHJcbiAgICB0aGlzLnNlbGVjdGVkVXNlcnMgPSB0aGlzLnVzZXJUYWJsZS5zZWxlY3Rpb25zO1xyXG4gICAgLy8g6ZyA6KaB5qCh6aqM6YCJ5Lit5ZSv5LiA55So5oi3XHJcbiAgICBpZiAoIXRoaXMuc2VsZWN0ZWRVc2Vycykge1xyXG4gICAgICB0aGlzLm5vdGlmeS5pbmZvKHRoaXMuaTE4blNlcnZpY2UuZ2V0VmFsdWUoJ3N0YXRpYy50cmFuc2Zlci5zZWxlY3RIYW5kb3ZlcicpKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudHJhbnNmZXJDb250ZXh0LmFzc2lnbmVlID0gdGhpcy5zZWxlY3RlZFVzZXJzWydJRCddO1xyXG4gICAgdGhpcy50YXNrU3ZjLnRyYW5zZmVyKHRoaXMudHJhbnNmZXJDb250ZXh0KS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHRoaXMuaTE4blNlcnZpY2UuZ2V0VmFsdWUoJ3N0YXRpYy50cmFuc2Zlci5zdWNjZXNzVHJhbnNmZXInKSk7XHJcbiAgICAgIHRoaXMuY29tcGxldGVkLmVtaXQodHJ1ZSk7XHJcbiAgICAgIHRoaXMuc2hvd01vZGFsKGZhbHNlKTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgaWYoZXJyb3IgJiYgZXJyb3IuZXJyb3IgJiYgZXJyb3IuZXJyb3IuTWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmVycm9yKGVycm9yLmVycm9yLk1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19