/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
// import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { DataTableModule } from '@farris/ui-datatable';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { PaginationModule } from '@farris/ui-pagination';
import { MessagerModule } from '@farris/ui-messager';
import { NotifyModule } from '@farris/ui-notify';
import { ProcessSelectorComponent } from './submit/process-selector/process-selector.component';
import { TaskService } from './runtime/services/task.service';
import { UserService } from './runtime/services/user.service';
import { WfWorkitemHandleComponent } from './runtime/wf-workitem-handle/wf-workitem-handle.component';
import { TaskAssignComponent } from './runtime/components/task-assign/task-assign.component';
import { UserHelperComponent } from './runtime/components/user-helper/user-helper.component';
import { TaskSignaddComponent } from './runtime/components/task-signadd/task-signadd.component';
import { TaskTransferComponent } from './runtime/components/task-transfer/task-transfer.component';
import { WFSubmiteService } from './submit/service/wf-submite.service';
import { AssignParticipantComponent } from './submit/assign-participant/assign-participant.component';
import { DatagridModule } from '@farris/ui-datagrid';
import { WFCommentModule } from '@gsp-wf/ui-comment';
import { I18nService } from './runtime/services/i18n.service';
import { TranslatePipe } from './runtime/services/translate.pipe';
import { ComboListModule } from '@farris/ui-combo-list';
import { LoadingModule } from '@farris/ui-loading';
export class WFRuntimeModule {
}
WFRuntimeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    DataTableModule,
                    FarrisDialogModule,
                    PaginationModule,
                    NotifyModule,
                    MessagerModule.forRoot({
                        width: 500
                    }),
                    DatagridModule,
                    WFCommentModule,
                    ComboListModule,
                    LoadingModule
                ],
                declarations: [
                    ProcessSelectorComponent,
                    WfWorkitemHandleComponent,
                    UserHelperComponent,
                    TaskAssignComponent,
                    TaskSignaddComponent,
                    TaskTransferComponent,
                    AssignParticipantComponent,
                    TranslatePipe
                ],
                providers: [
                    HttpService,
                    TaskService,
                    UserService,
                    SessionService,
                    WFSubmiteService,
                    I18nService,
                ],
                exports: [
                    ProcessSelectorComponent,
                    WfWorkitemHandleComponent,
                    UserHelperComponent,
                    TaskAssignComponent,
                    TaskSignaddComponent,
                    TaskTransferComponent,
                    AssignParticipantComponent,
                ],
                entryComponents: [
                    ProcessSelectorComponent,
                    WfWorkitemHandleComponent,
                    UserHelperComponent,
                    TaskAssignComponent,
                    TaskSignaddComponent,
                    TaskTransferComponent,
                    AssignParticipantComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtcnVudGltZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3J0ZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3dmLXJ1bnRpbWUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFrQyxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRS9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBbUIsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQzdGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQzdGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ25HLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBeURsRCxNQUFNLE9BQU8sZUFBZTs7O1lBdkQzQixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxnQkFBZ0I7b0JBQ2hCLGVBQWU7b0JBQ2Ysa0JBQWtCO29CQUNsQixnQkFBZ0I7b0JBQ2hCLFlBQVk7b0JBQ1osY0FBYyxDQUFDLE9BQU8sQ0FBQzt3QkFDckIsS0FBSyxFQUFFLEdBQUc7cUJBQ1gsQ0FBQztvQkFDRixjQUFjO29CQUNkLGVBQWU7b0JBQ2YsZUFBZTtvQkFDZixhQUFhO2lCQUNkO2dCQUNELFlBQVksRUFBRTtvQkFDWix3QkFBd0I7b0JBQ3hCLHlCQUF5QjtvQkFDekIsbUJBQW1CO29CQUNuQixtQkFBbUI7b0JBQ25CLG9CQUFvQjtvQkFDcEIscUJBQXFCO29CQUNyQiwwQkFBMEI7b0JBQzFCLGFBQWE7aUJBQ2Q7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULFdBQVc7b0JBQ1gsV0FBVztvQkFDWCxXQUFXO29CQUNYLGNBQWM7b0JBQ2QsZ0JBQWdCO29CQUNoQixXQUFXO2lCQUVaO2dCQUNELE9BQU8sRUFBRTtvQkFDUCx3QkFBd0I7b0JBQ3hCLHlCQUF5QjtvQkFDekIsbUJBQW1CO29CQUNuQixtQkFBbUI7b0JBQ25CLG9CQUFvQjtvQkFDcEIscUJBQXFCO29CQUNyQiwwQkFBMEI7aUJBQzNCO2dCQUNELGVBQWUsRUFBRTtvQkFDZix3QkFBd0I7b0JBQ3hCLHlCQUF5QjtvQkFDekIsbUJBQW1CO29CQUNuQixtQkFBbUI7b0JBQ25CLG9CQUFvQjtvQkFDcEIscUJBQXFCO29CQUNyQiwwQkFBMEI7aUJBQzNCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTE9DQUxFX0lELCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbi8vIGltcG9ydCB7IEJyb3dzZXJBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUsIEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlLCBTZXNzaW9uU2VydmljZSwgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IERhdGFUYWJsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YXRhYmxlJztcclxuaW1wb3J0IHsgRmFycmlzRGlhbG9nTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kaWFsb2cnO1xyXG5pbXBvcnQgeyBQYWdpbmF0aW9uTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1wYWdpbmF0aW9uJztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBQcm9jZXNzU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL3N1Ym1pdC9wcm9jZXNzLXNlbGVjdG9yL3Byb2Nlc3Mtc2VsZWN0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVGFza1NlcnZpY2UgfSBmcm9tICcuL3J1bnRpbWUvc2VydmljZXMvdGFzay5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuL3J1bnRpbWUvc2VydmljZXMvdXNlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgV2ZXb3JraXRlbUhhbmRsZUNvbXBvbmVudCB9IGZyb20gJy4vcnVudGltZS93Zi13b3JraXRlbS1oYW5kbGUvd2Ytd29ya2l0ZW0taGFuZGxlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRhc2tBc3NpZ25Db21wb25lbnQgfSBmcm9tICcuL3J1bnRpbWUvY29tcG9uZW50cy90YXNrLWFzc2lnbi90YXNrLWFzc2lnbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBVc2VySGVscGVyQ29tcG9uZW50IH0gZnJvbSAnLi9ydW50aW1lL2NvbXBvbmVudHMvdXNlci1oZWxwZXIvdXNlci1oZWxwZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVGFza1NpZ25hZGRDb21wb25lbnQgfSBmcm9tICcuL3J1bnRpbWUvY29tcG9uZW50cy90YXNrLXNpZ25hZGQvdGFzay1zaWduYWRkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRhc2tUcmFuc2ZlckNvbXBvbmVudCB9IGZyb20gJy4vcnVudGltZS9jb21wb25lbnRzL3Rhc2stdHJhbnNmZXIvdGFzay10cmFuc2Zlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXRlN1Ym1pdGVTZXJ2aWNlIH0gZnJvbSAnLi9zdWJtaXQvc2VydmljZS93Zi1zdWJtaXRlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBc3NpZ25QYXJ0aWNpcGFudENvbXBvbmVudCB9IGZyb20gJy4vc3VibWl0L2Fzc2lnbi1wYXJ0aWNpcGFudC9hc3NpZ24tcGFydGljaXBhbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0YWdyaWRNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgV0ZDb21tZW50TW9kdWxlIH0gZnJvbSAnQGdzcC13Zi91aS1jb21tZW50JztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICcuL3J1bnRpbWUvc2VydmljZXMvaTE4bi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJy4vcnVudGltZS9zZXJ2aWNlcy90cmFuc2xhdGUucGlwZSc7XHJcbmltcG9ydCB7IENvbWJvTGlzdE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbGlzdCc7XHJcbmltcG9ydCB7IExvYWRpbmdNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWxvYWRpbmcnXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgSHR0cENsaWVudE1vZHVsZSxcclxuICAgIERhdGFUYWJsZU1vZHVsZSxcclxuICAgIEZhcnJpc0RpYWxvZ01vZHVsZSxcclxuICAgIFBhZ2luYXRpb25Nb2R1bGUsXHJcbiAgICBOb3RpZnlNb2R1bGUsXHJcbiAgICBNZXNzYWdlck1vZHVsZS5mb3JSb290KHtcclxuICAgICAgd2lkdGg6IDUwMFxyXG4gICAgfSksXHJcbiAgICBEYXRhZ3JpZE1vZHVsZSxcclxuICAgIFdGQ29tbWVudE1vZHVsZSxcclxuICAgIENvbWJvTGlzdE1vZHVsZSxcclxuICAgIExvYWRpbmdNb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgUHJvY2Vzc1NlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgV2ZXb3JraXRlbUhhbmRsZUNvbXBvbmVudCxcclxuICAgIFVzZXJIZWxwZXJDb21wb25lbnQsXHJcbiAgICBUYXNrQXNzaWduQ29tcG9uZW50LFxyXG4gICAgVGFza1NpZ25hZGRDb21wb25lbnQsXHJcbiAgICBUYXNrVHJhbnNmZXJDb21wb25lbnQsXHJcbiAgICBBc3NpZ25QYXJ0aWNpcGFudENvbXBvbmVudCxcclxuICAgIFRyYW5zbGF0ZVBpcGVcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgSHR0cFNlcnZpY2UsXHJcbiAgICBUYXNrU2VydmljZSxcclxuICAgIFVzZXJTZXJ2aWNlLFxyXG4gICAgU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBXRlN1Ym1pdGVTZXJ2aWNlLFxyXG4gICAgSTE4blNlcnZpY2UsXHJcbiAgICAvLyB7IHByb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKSB8fCAnemgtQ0hTJyB9XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBQcm9jZXNzU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICBXZldvcmtpdGVtSGFuZGxlQ29tcG9uZW50LFxyXG4gICAgVXNlckhlbHBlckNvbXBvbmVudCxcclxuICAgIFRhc2tBc3NpZ25Db21wb25lbnQsXHJcbiAgICBUYXNrU2lnbmFkZENvbXBvbmVudCxcclxuICAgIFRhc2tUcmFuc2ZlckNvbXBvbmVudCxcclxuICAgIEFzc2lnblBhcnRpY2lwYW50Q29tcG9uZW50LFxyXG4gIF0sXHJcbiAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICBQcm9jZXNzU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICBXZldvcmtpdGVtSGFuZGxlQ29tcG9uZW50LFxyXG4gICAgVXNlckhlbHBlckNvbXBvbmVudCxcclxuICAgIFRhc2tBc3NpZ25Db21wb25lbnQsXHJcbiAgICBUYXNrU2lnbmFkZENvbXBvbmVudCxcclxuICAgIFRhc2tUcmFuc2ZlckNvbXBvbmVudCxcclxuICAgIEFzc2lnblBhcnRpY2lwYW50Q29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgV0ZSdW50aW1lTW9kdWxlIHtcclxufVxyXG4iXX0=