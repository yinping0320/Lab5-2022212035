/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, Optional } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { ProcessSelectorComponent } from '../process-selector/process-selector.component';
import { InteractionResponse } from '../../entity/interaction-response';
import { AssignParticipantComponent } from '../assign-participant/assign-participant.component';
import { of } from 'rxjs';
import { I18nService } from '../../runtime/services/i18n.service';
/**
 * 提交审批客户端交互服务
 */
export class WFSubmiteService {
    /**
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} i18nService
     */
    constructor(injector, resolver, modalService, i18nService) {
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.i18nService = i18nService;
    }
    /**
     * 客户端交互处理服务端返回结果
     * @param {?} excutionRe 提交审批服务器端返回结果
     * @param {?} handler 处理结果回调页面
     * @return {?}
     */
    excute(excutionRe, handler) {
        /** @type {?} */
        const response = new InteractionResponse();
        // 无需交互
        if (excutionRe.needInteraction === false) {
            response.message = '无需交互';
            handler(response);
            return;
        }
        // 选择要提交的流程
        if (excutionRe.procDefs && excutionRe.procDefs.length > 1) {
            this.selectProcess(excutionRe.procDefs, handler);
            return;
        }
        // 指定下一步参与者
        if (excutionRe.nextFlowNodes[0].assigneeInfo) {
            this.assignee([excutionRe.nextFlowNodes[0].assigneeInfo], handler);
            return;
        }
    }
    /**
     * 处理选择流程结果
     * @private
     * @param {?} prcesses
     * @param {?} handler
     * @return {?}
     */
    selectProcess(prcesses, handler) {
        /** @type {?} */
        const response = new InteractionResponse();
        /** @type {?} */
        const modalConfig = {
            title: this.i18nService ? this.i18nService.getValue('static.submit.selectProcess') : '流程选择',
            width: 520,
            height: 290,
            showButtons: false,
            showMaxButton: false,
            beforeClose: (/**
             * @param {?} modelRef
             * @return {?}
             */
            (modelRef) => {
                handler(response);
                return of(true);
            })
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.gridData = prcesses;
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.subscribe().subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            response.processDefinitionId = val;
            dialog.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            response.message = err;
            dialog.close();
        }));
    }
    /**
     * 处理指定下一步人员结果
     * @private
     * @param {?} assigneeInfos
     * @param {?=} handler
     * @return {?}
     */
    assignee(assigneeInfos, handler) {
        /** @type {?} */
        const response = new InteractionResponse();
        /** @type {?} */
        const modalConfig = {
            title: this.i18nService ? this.i18nService.getValue('static.assignee.title') : '请选择操作用户',
            width: 850,
            height: 520,
            showMaxButton: false,
            showButtons: false,
            beforeClose: (/**
             * @param {?} modelRef
             * @return {?}
             */
            (modelRef) => {
                handler(response);
                return of(true);
            })
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AssignParticipantComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.assigneeInfo = assigneeInfos;
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.subscribe().subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            dialog.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            dialog.close();
        }));
    }
}
WFSubmiteService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFSubmiteService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: I18nService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WFSubmiteService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WFSubmiteService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WFSubmiteService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    WFSubmiteService.prototype.i18nService;
}
//# sourceMappingURL=data:application/json;base64,