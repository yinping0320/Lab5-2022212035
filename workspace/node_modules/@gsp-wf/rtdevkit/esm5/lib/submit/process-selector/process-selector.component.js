/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
import { I18nService } from '../../runtime/services/i18n.service';
var ProcessSelectorComponent = /** @class */ (function () {
    function ProcessSelectorComponent(msgService, i18nService) {
        this.msgService = msgService;
        this.i18nService = i18nService;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.prcessName') : '流程名称', field: 'procDefName', width: 200 },
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.version') : '版本', field: 'version', width: 100 }
        ];
        this.idField = 'procDefId';
        this.mySelection = [];
        this.subject = new Subject();
    }
    /**
     * @return {?}
     */
    ProcessSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ProcessSelectorComponent.prototype.btnOKClick = /**
     * @return {?}
     */
    function () {
        if (this.mySelection.length < 1) {
            this.msgService.warning(this.i18nService ? this.i18nService.getValue('static.submit.noProcess') : '尚未选择流程定义，请了解。');
            return;
        }
        this.subject.next(this.mySelection[0]);
    };
    /**
     * @return {?}
     */
    ProcessSelectorComponent.prototype.btnCancelClick = /**
     * @return {?}
     */
    function () {
        this.subject.next(null);
    };
    /**
     * @return {?}
     */
    ProcessSelectorComponent.prototype.subscribe = /**
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessSelectorComponent.prototype.onSelectionChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.data) {
            this.mySelection = [data.data.procDefId];
        }
        else {
            this.mySelection = [];
        }
    };
    ProcessSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wf-process-selector',
                    template: "<div style=\"background-color: white; overflow: auto;\">\r\n    <farris-datatable class=\"f-utils-fill\" [data]=\"gridData\" [idField]=\"idField\" [columns]=\"columns\" [pagination]=\"false\" [showFilterBar]='false'\r\n        [singleSelect]=\"true\" (selectedRow)=\"onSelectionChange($event)\" [fill]=\"true\" [height]=\"250\">\r\n    </farris-datatable>\r\n</div>\r\n<div class=\"modal-footer flex-shrink-0\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"btnOKClick()\">{{('static.footOk' | translate)?('static.footOk' | translate):'\u786E\u5B9A' }}</button>\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"btnCancelClick()\">{{('static.footCancel' | translate)?('static.footCancel' | translate):'\u53D6\u6D88' }}</button>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessSelectorComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: I18nService, decorators: [{ type: Optional }] }
    ]; };
    ProcessSelectorComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }]
    };
    return ProcessSelectorComponent;
}());
export { ProcessSelectorComponent };
if (false) {
    /** @type {?} */
    ProcessSelectorComponent.prototype.cls;
    /** @type {?} */
    ProcessSelectorComponent.prototype.gridData;
    /** @type {?} */
    ProcessSelectorComponent.prototype.columns;
    /** @type {?} */
    ProcessSelectorComponent.prototype.idField;
    /** @type {?} */
    ProcessSelectorComponent.prototype.mySelection;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.i18nService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1zZWxlY3Rvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3J0ZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3N1Ym1pdC9wcm9jZXNzLXNlbGVjdG9yL3Byb2Nlc3Mtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUczQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRWxFO0lBaUJFLGtDQUNVLFVBQTJCLEVBQ2YsV0FBd0I7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDZixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQVo5QyxRQUFHLEdBQUcsOEJBQThCLENBQUM7UUFHckMsWUFBTyxHQUFHO1lBQ1IsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUNsSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1NBQUMsQ0FBQztRQUM3SCxZQUFPLEdBQUcsV0FBVyxDQUFDO1FBQ3RCLGdCQUFXLEdBQWEsRUFBRSxDQUFDO1FBRW5CLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0lBS3hDLENBQUM7Ozs7SUFFRCwyQ0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsNkNBQVU7OztJQUFWO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDbkgsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFDRCxpREFBYzs7O0lBQWQ7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsNENBQVM7OztJQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsb0RBQWlCOzs7O0lBQWpCLFVBQWtCLElBQUk7UUFDcEIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7U0FDdkI7SUFDSCxDQUFDOztnQkEvQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLG14QkFBZ0Q7O2lCQUVqRDs7OztnQkFQUSxlQUFlO2dCQUNmLFdBQVcsdUJBcUJmLFFBQVE7OztzQkFiVixXQUFXLFNBQUMsT0FBTzs7SUEyQ3RCLCtCQUFDO0NBQUEsQUFqREQsSUFpREM7U0E1Q1ksd0JBQXdCOzs7SUFDbkMsdUNBQ3FDOztJQUVyQyw0Q0FBOEI7O0lBQzlCLDJDQUU2SDs7SUFDN0gsMkNBQXNCOztJQUN0QiwrQ0FBMkI7Ozs7O0lBRTNCLDJDQUF3Qzs7Ozs7SUFFdEMsOENBQW1DOzs7OztJQUNuQywrQ0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUHJvY2Vzc0RlZmluaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcHJvY2Vzc2RlZmluaXRpb24nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcnVudGltZS9zZXJ2aWNlcy9pMThuLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd3Zi1wcm9jZXNzLXNlbGVjdG9yJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcHJvY2Vzcy1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vcHJvY2Vzcy1zZWxlY3Rvci5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFByb2Nlc3NTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgY2xzID0gJ2ZhcnJpcy1tYWluLWFyZWEgZmxleC1jb2x1bW4nO1xyXG5cclxuICBncmlkRGF0YTogUHJvY2Vzc0RlZmluaXRpb25bXTtcclxuICBjb2x1bW5zID0gW1xyXG4gICAgeyB0aXRsZTogdGhpcy5pMThuU2VydmljZSA/IHRoaXMuaTE4blNlcnZpY2UuZ2V0VmFsdWUoJ3N0YXRpYy5jb2x1bW5OYW1lLnByY2Vzc05hbWUnKSA6ICfmtYHnqIvlkI3np7AnLCBmaWVsZDogJ3Byb2NEZWZOYW1lJywgd2lkdGg6IDIwMCB9LFxyXG4gICAgeyB0aXRsZTogdGhpcy5pMThuU2VydmljZSA/IHRoaXMuaTE4blNlcnZpY2UuZ2V0VmFsdWUoJ3N0YXRpYy5jb2x1bW5OYW1lLnZlcnNpb24nKSA6ICfniYjmnKwnLCBmaWVsZDogJ3ZlcnNpb24nLCB3aWR0aDogMTAwIH1dO1xyXG4gIGlkRmllbGQgPSAncHJvY0RlZklkJztcclxuICBteVNlbGVjdGlvbjogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGkxOG5TZXJ2aWNlOiBJMThuU2VydmljZVxyXG4gICAgKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIGJ0bk9LQ2xpY2soKSB7XHJcbiAgICBpZiAodGhpcy5teVNlbGVjdGlvbi5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHRoaXMubXNnU2VydmljZS53YXJuaW5nKHRoaXMuaTE4blNlcnZpY2UgPyB0aGlzLmkxOG5TZXJ2aWNlLmdldFZhbHVlKCdzdGF0aWMuc3VibWl0Lm5vUHJvY2VzcycpIDogJ+WwmuacqumAieaLqea1geeoi+WumuS5ie+8jOivt+S6huino+OAgicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnN1YmplY3QubmV4dCh0aGlzLm15U2VsZWN0aW9uWzBdKTtcclxuICB9XHJcbiAgYnRuQ2FuY2VsQ2xpY2soKSB7XHJcbiAgICB0aGlzLnN1YmplY3QubmV4dChudWxsKTtcclxuICB9XHJcblxyXG4gIHN1YnNjcmliZSgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIG9uU2VsZWN0aW9uQ2hhbmdlKGRhdGEpIHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEuZGF0YSkge1xyXG4gICAgICB0aGlzLm15U2VsZWN0aW9uID0gW2RhdGEuZGF0YS5wcm9jRGVmSWRdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5teVNlbGVjdGlvbiA9IFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19