/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { SessionService, HttpService } from '@ecp-caf/caf-common';
import { forkJoin } from 'rxjs';
var UserService = /** @class */ (function () {
    function UserService(http, httpSvc, sessionSvc) {
        this.http = http;
        this.httpSvc = httpSvc;
        this.sessionSvc = sessionSvc;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    UserService.prototype.getUsersByIds = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.http.get(pathUrl + ("/" + id) + "?mode=0002"); }))); //mode用于获取组织全路径
    };
    /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    UserService.prototype.getUserList = /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    function (searchValue, index, size) {
        if (searchValue) {
            return this.getUser('codeorname', searchValue, index, size);
        }
        else {
            return this.getUser('', '', index, size);
        }
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    UserService.prototype.getUser = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    function (field, value, index, size) {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/users";
        url += field ?
            "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"" + field + "\":'" + value + "',\"orderField\":\"order\", \"withAllOrg\": \"true\", \"queryMode\":\"0002\"}" :
            "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"orderField\":\"order\", \"withAllOrg\": \"true\", \"queryMode\":\"0002\"}";
        return this.httpSvc.get(url);
    };
    /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @param {?=} withAllOrg
     * @param {?=} orgId
     * @return {?}
     */
    UserService.prototype.getUserList_Assign = /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @param {?=} withAllOrg
     * @param {?=} orgId
     * @return {?}
     */
    function (searchValue, index, size, withAllOrg, orgId) {
        if (searchValue) {
            return this.getUser_Assign('codeorname', searchValue, index, size, withAllOrg, orgId);
        }
        else {
            return this.getUser_Assign('', '', index, size, withAllOrg, orgId);
        }
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @param {?} withAllOrg
     * @param {?} orgId
     * @return {?}
     */
    UserService.prototype.getUser_Assign = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @param {?} withAllOrg
     * @param {?} orgId
     * @return {?}
     */
    function (field, value, index, size, withAllOrg, orgId) {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/users";
        url += field ?
            "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"" + field + "\":'" + value + "',\"orderField\":\"order\", \"withAllOrg\": \"true\", \"queryMode\":\"0002\"}" :
            "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"orderField\":\"order\", \"withAllOrg\":'" + withAllOrg + "',\"orgId\":'" + orgId + "', \"queryMode\":\"0002\"}";
        return this.httpSvc.get(url);
    };
    /**
     * 构造Header
     */
    /**
     * 构造Header
     * @private
     * @return {?}
     */
    UserService.prototype.getBatchHeader = /**
     * 构造Header
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionId = this.sessionSvc.getCurrentSeesionId();
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', sessionId).set('Accept', 'application/json');
        // 此处key必须是headers
        return headers;
    };
    /**
     * 转换配置大小写
     * @param jsonObj Object
     */
    /**
     * 转换配置大小写
     * @param {?} jsonObj Object
     * @return {?}
     */
    UserService.prototype.toUpperCase = /**
     * 转换配置大小写
     * @param {?} jsonObj Object
     * @return {?}
     */
    function (jsonObj) {
        var e_1, _a;
        if (typeof (jsonObj) === 'object') {
            try {
                for (var _b = tslib_1.__values(Object.keys(jsonObj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                    delete (jsonObj[key]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return jsonObj;
    };
    UserService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UserService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: HttpService },
        { type: SessionService }
    ]; };
    return UserService;
}());
export { UserService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.httpSvc;
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.sessionSvc;
}
//# sourceMappingURL=data:application/json;base64,