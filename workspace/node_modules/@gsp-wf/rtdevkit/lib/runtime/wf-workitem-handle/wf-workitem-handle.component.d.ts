import { OnInit, EventEmitter } from '@angular/core';
import { TaskService } from '../services/task.service';
import { WorkitemAction } from '../../entity/workitem-action';
import { CompleteContext, AssigneeInfo } from '../../entity';
import { NotifyService } from '@farris/ui-notify';
import { TaskSignaddComponent } from '../components/task-signadd/task-signadd.component';
import { DialogComponent } from '@farris/ui-dialog';
import { I18nService } from '../services/i18n.service';
export declare class WfWorkitemHandleComponent implements OnInit {
    private taskSvc;
    private notify;
    private i18nService;
    private inWorkitemId;
    private taskActions;
    completeContext: CompleteContext;
    assigneeInfos: AssigneeInfo[];
    transferContext: {
        workItemId: string;
        comment: string;
    };
    destActivities: {
        id: string;
        name: string;
    }[];
    addSignContext: {
        workItemId: string;
        action: 'AddSignFront' | 'AddSignBehind';
    };
    needAddSign: boolean;
    selectAddSignees: string;
    displayPlaceholder: string;
    hasDefaultBranch: boolean;
    addSignCmp: TaskSignaddComponent;
    commentModal: DialogComponent;
    /**
     * 任务Id
     */
    workitemId: string;
    /**
     * 任务办理动作列表
     */
    actions: EventEmitter<WorkitemAction[]>;
    /**
     * 任务办理完成事件
     */
    completed: EventEmitter<boolean>;
    preFuncList: any[];
    webCptFunc: any;
    postFuncList: any[];
    height: number;
    actionsTitle: {
        pass: string;
        back: string;
        refuse: string;
        more: string;
        viewLog: string;
        viewFlowChart: string;
        viewBizlog: string;
    };
    constructor(taskSvc: TaskService, notify: NotifyService, i18nService: I18nService);
    ngOnInit(): void;
    /**
     * 刷新动作列表
     */
    private refreshActions;
    /**
     * 动作完成后事件
     * @param result 事件结果
     */
    private completedEvt;
    /**
     * 完成审批任务
     * @param actionCode 任务办理动作编号
     * @param comment? 办理意见
     */
    complete(actionCode: string, comment?: string): void;
    refreshList(sucess: boolean): void;
    runAddSign(): void;
    addSignComplete(sucess: boolean): void;
    handleOk(): void;
    handleCancel(): void;
    private assignee;
    private initState;
    private executeTask;
    /**
     * 加签，跳转情况
     * @param action 动作
     */
    private showExcuteModal;
    private getDestinationNodes;
    /**
     * 跳转，返回的数据是否有默认分支
     * 如果返回的没有默认节点，跳转节点又没选的话，不允许提交
     * @param nextNodes
     */
    private hasDefaultBranchFunc;
    private excuteAction;
    private excutePostEvent;
    /**
     * 获取动作的前后事件和实现方法
     * @param act 动作
     */
    private getActionWebEventsFunc;
    /**
     * 显示报错信息
     */
    private showError;
}
