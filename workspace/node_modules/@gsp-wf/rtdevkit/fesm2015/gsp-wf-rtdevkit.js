import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PaginationModule } from '@farris/ui-pagination';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { __awaiter } from 'tslib';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { DataTableModule } from '@farris/ui-datatable';
import { Subject, forkJoin, from, of } from 'rxjs';
import { DatagridModule } from '@farris/ui-datagrid';
import { WFCommentModule } from '@gsp-wf/ui-comment';
import { Injectable, Component, HostBinding, Optional, ViewChild, Output, EventEmitter, Input, ComponentFactoryResolver, Injector, Pipe, NgModule } from '@angular/core';
import { ComboListModule } from '@farris/ui-combo-list';
import { LoadingService, LoadingModule } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const en = {
    static: {
        taskActions: {
            pass: 'Agree',
            back: 'Reject',
            refuse: 'Veto',
            more: 'More',
            viewLog: 'View Log',
            viewFlowChart: 'View FlowChart',
            viewBizlog: 'Approval Log'
        },
        title: 'Approval confirmation',
        inputLabel: 'Approval comments',
        inputHolder: 'Please enter an approval opinion',
        selectActivity: 'Please select approve note',
        addSignee: 'Add signee',
        footOk: 'Ok',
        footCancel: 'Cancel',
        assignee: {
            title: 'Select Operator',
            cancelAssign: 'Cancel to operate.',
            noAssignee: 'Please select at least one approver.',
            successAssign: 'Operate successfully.',
            errorAssign: 'Operation failed, please contact the administrator!'
        },
        addsign: {
            title: 'Select signee',
            selectConsultant: 'Please select persons to consult.',
            successConsult: 'Consult successfully.',
            cancelSignUp: 'Cancel to sign up.'
        },
        transfer: {
            title: 'Select transfer person',
            selectHandover: 'Please select transfer persons.',
            successTransfer: 'Tranfer successfully.'
        },
        columnName: {
            name: 'Name',
            code: 'Code',
            department: 'Department',
            organization: 'Organization',
            prcessName: 'Process',
            version: 'Version'
        },
        common: {
            placeHolder: 'Please enter search name'
        },
        submit: {
            selectProcess: 'Select Process',
            noProcess: 'Process has not been selected.'
        },
    },
    cueWords: {
        successClaim: 'Claim successfully.',
        successUnClaim: 'Cancel to claim successfully.',
        successRetrieve: 'Retrieve successfully.',
        successPass: 'Approved successfully.',
        successBack: 'Dismissed successfully.',
        successRefuse: 'Veto successfully.',
        success: 'Operate successfully.'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const cn = {
    static: {
        taskActions: {
            pass: '通过',
            back: '驳回',
            refuse: '否决',
            more: '更多',
            viewLog: '审批日志',
            viewFlowChart: '查看流程',
            viewBizlog: '审批日志'
        },
        assignee: {
            title: '请选择用户',
            cancelAssign: '已取消操作。',
            noAssignee: '请至少选择一个审批人。',
            successAssign: '操作成功。',
            errorAssign: '操作失败，请联系管理员查看原因！'
        },
        addsign: {
            title: '请选择用户',
            selectConsultant: '请选择用户。',
            successConsult: '征询成功。',
            cancelSignUp: '已取消。'
        },
        transfer: {
            title: '请选择用户',
            selectHandover: '请选择用户。',
            successTransfer: '任务移交成功。'
        },
        columnName: {
            name: '名称',
            code: '编号',
            department: '组织信息',
            organization: '组织',
            prcessName: '流程名称',
            version: '版本'
        },
        common: {
            placeHolder: '请输入'
        },
        submit: {
            selectProcess: '选择流程',
            noProcess: '请选择流程'
        },
        title: '审批确认',
        inputLabel: '审批意见',
        inputHolder: '请输入审批意见',
        selectActivity: '目标节点',
        addSignee: '加签人员',
        footOk: '确定',
        footCancel: '取消',
    },
    cueWords: {
        successClaim: '领用成功。',
        successUnClaim: '取消领用成功。',
        successRetrieve: '任务取回成功。',
        successPass: '审批通过。',
        successBack: '驳回成功。',
        successRefuse: '否决成功。',
        success: '操作成功'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const translate = {
    'zh-CHS': cn,
    en
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class I18nService {
    constructor() {
        this.defaultLang = localStorage.getItem('languageCode');
        if (!this.defaultLang) {
            this.langData = translate['zh-CHS'];
        }
        else {
            this.langData = translate[this.defaultLang];
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = this.langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), this.langData);
        }
        return resultVal;
    }
}
I18nService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
I18nService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessSelectorComponent {
    /**
     * @param {?} msgService
     * @param {?} i18nService
     */
    constructor(msgService, i18nService) {
        this.msgService = msgService;
        this.i18nService = i18nService;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.prcessName') : '流程名称', field: 'procDefName', width: 200 },
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.version') : '版本', field: 'version', width: 100 }
        ];
        this.idField = 'procDefId';
        this.mySelection = [];
        this.subject = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    btnOKClick() {
        if (this.mySelection.length < 1) {
            this.msgService.warning(this.i18nService ? this.i18nService.getValue('static.submit.noProcess') : '尚未选择流程定义，请了解。');
            return;
        }
        this.subject.next(this.mySelection[0]);
    }
    /**
     * @return {?}
     */
    btnCancelClick() {
        this.subject.next(null);
    }
    /**
     * @return {?}
     */
    subscribe() {
        return this.subject.asObservable();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onSelectionChange(data) {
        if (data && data.data) {
            this.mySelection = [data.data.procDefId];
        }
        else {
            this.mySelection = [];
        }
    }
}
ProcessSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-process-selector',
                template: "<div style=\"background-color: white; overflow: auto;\">\r\n    <farris-datatable class=\"f-utils-fill\" [data]=\"gridData\" [idField]=\"idField\" [columns]=\"columns\" [pagination]=\"false\" [showFilterBar]='false'\r\n        [singleSelect]=\"true\" (selectedRow)=\"onSelectionChange($event)\" [fill]=\"true\" [height]=\"250\">\r\n    </farris-datatable>\r\n</div>\r\n<div class=\"modal-footer flex-shrink-0\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"btnOKClick()\">{{('static.footOk' | translate)?('static.footOk' | translate):'\u786E\u5B9A' }}</button>\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"btnCancelClick()\">{{('static.footCancel' | translate)?('static.footCancel' | translate):'\u53D6\u6D88' }}</button>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
ProcessSelectorComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: I18nService, decorators: [{ type: Optional }] }
];
ProcessSelectorComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskService {
    /**
     * @param {?} httpSvc
     */
    constructor(httpSvc) {
        this.httpSvc = httpSvc;
    }
    /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    getWorkItemActions(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/actions`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行审批操作
     * @param {?} taskId 任务Id
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    excuteTask(taskId, context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete`;
        context.workItemId = taskId;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    getDestinationScope(workItemId, action) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/nextNodes/${action}`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取动作实体进而获取web实现和前后事件
     * @param {?} taskId 任务ID
     * @param {?} action 动作编号
     * @return {?}
     */
    getActionEntity(taskId, action) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/approvalAction?code=${action}`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行加签操作
     * @param {?} context 加签上下文
     * @return {?}
     */
    addSign(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/counterSignAdd`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 查询单据信息
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    getAppInfo(workItemId) {
        /** @type {?} */
        const formParUrl = `/api/runtime/wf/v1.0/workItems/${workItemId}/formInfo`;
        return this.httpSvc.get(formParUrl);
    }
    //#region 查看流程
    /**
     * 基于工作项ID获取bpmnModel
     * @param {?} workitemId 工作项id
     * @return {?}
     */
    getBpmnModelbyWorkItemId(workitemId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workitemId}/bpmnModel`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于工作项Id获取所有活动实例
     * @param {?} id taskId
     * @return {?}
     */
    getAllActiInstsbyTaskId(id) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/activityInstanceSlims?workItemId=${id}`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于活动实例Id获取日志
     * @param {?} actInstId 活动实例Id
     * @return {?}
     */
    getActivityInstanceLogs(actInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/activityInstanceLogs?activityInstanceId=${actInstId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取审批日志信息
     * @param {?} taskId 工作项Id
     * @return {?}
     */
    getBizlogByTaskId(taskId) {
        /** @type {?} */
        const logUrl = `/api/runtime/wf/v1.0/workItems/${taskId}/fullComments`;
        // if (false === environment.production) {
        //     logUrl = '/assets/mock/taskbizlog.json';
        // }
        return this.httpSvc.get(logUrl);
    }
    //#endregion
    /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * @return {?}
     */
    getAssigneeInfo(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${taskId}/assigneeInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据流程实例Id批量指派（提交审批或执行审批后指派弹框调用，_后续调整与工作项的一致_）
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    assignNextUsersByProcInstId(assigneesPa) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/assignNextUsers`;
        return this.httpSvc.post(url, assigneesPa);
    }
    /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    assignNextUsersByWorkItemId(assigneesPa) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/assignUser`;
        return this.httpSvc.post(url, assigneesPa);
    }
    /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    retrieve(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/retrieve`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    transfer(transferContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/transfer`;
        return this.httpSvc.post(url, transferContext);
    }
    //#region  任务领用
    /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @return {?}
     */
    claim(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/claim`;
        /** @type {?} */
        const options = {
            workItemId: taskId
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @return {?}
     */
    unClaim(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/unclaim`;
        /** @type {?} */
        const options = {
            workItemId: taskId
        };
        return this.httpSvc.post(url, options);
    }
}
TaskService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserService {
    /**
     * @param {?} http
     * @param {?} httpSvc
     * @param {?} sessionSvc
     */
    constructor(http, httpSvc, sessionSvc) {
        this.http = http;
        this.httpSvc = httpSvc;
        this.sessionSvc = sessionSvc;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getUsersByIds(ids) {
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map((/**
         * @param {?} id
         * @return {?}
         */
        id => this.http.get(pathUrl + `/${id}` + `?mode=0002`)))); //mode用于获取组织全路径
    }
    /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    getUserList(searchValue, index, size) {
        if (searchValue) {
            return this.getUser('codeorname', searchValue, index, size);
        }
        else {
            return this.getUser('', '', index, size);
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @return {?}
     */
    getUser(field, value, index, size) {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/users`;
        url += field ?
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"${field}":'${value}',"orderField":"order", "withAllOrg": "true", "queryMode":"0002"}` :
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"orderField":"order", "withAllOrg": "true", "queryMode":"0002"}`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} searchValue
     * @param {?} index
     * @param {?} size
     * @param {?=} withAllOrg
     * @param {?=} orgId
     * @return {?}
     */
    getUserList_Assign(searchValue, index, size, withAllOrg, orgId) {
        if (searchValue) {
            return this.getUser_Assign('codeorname', searchValue, index, size, withAllOrg, orgId);
        }
        else {
            return this.getUser_Assign('', '', index, size, withAllOrg, orgId);
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @param {?} index
     * @param {?} size
     * @param {?} withAllOrg
     * @param {?} orgId
     * @return {?}
     */
    getUser_Assign(field, value, index, size, withAllOrg, orgId) {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/users`;
        url += field ?
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"${field}":'${value}',"orderField":"order", "withAllOrg": "true", "queryMode":"0002"}` :
            `?param={"notGetCurrentUser":false,"pageIndex":${index},"pageSize":${size},"orderField":"order", "withAllOrg":'${withAllOrg}',"orgId":'${orgId}', "queryMode":"0002"}`;
        return this.httpSvc.get(url);
    }
    /**
     * 构造Header
     * @private
     * @return {?}
     */
    getBatchHeader() {
        /** @type {?} */
        const sessionId = this.sessionSvc.getCurrentSeesionId();
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId).set('Accept', 'application/json');
        // 此处key必须是headers
        return headers;
    }
    /**
     * 转换配置大小写
     * @param {?} jsonObj Object
     * @return {?}
     */
    toUpperCase(jsonObj) {
        if (typeof (jsonObj) === 'object') {
            for (const key of Object.keys(jsonObj)) {
                jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                delete (jsonObj[key]);
            }
        }
        return jsonObj;
    }
}
UserService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UserService.ctorParameters = () => [
    { type: HttpClient },
    { type: HttpService },
    { type: SessionService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CompleteContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserHelperComponent {
    /**
     * @param {?} i18nService
     * @param {?} userSvc
     * @param {?=} notify
     */
    constructor(i18nService, userSvc, notify) {
        this.i18nService = i18nService;
        this.userSvc = userSvc;
        this.notify = notify;
        this.pageList = [10, 20, 30, 50, 100];
        this.paginationOptions = {
            id: 'WF-Users-DataTable-Pagination',
            currentPage: 1,
            itemsPerPage: 10,
            pageList: this.pageList,
            totalItems: 0
        };
        this.columns = [
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.code') : '编号', field: 'Code', width: 80 },
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.name') : '姓名', field: 'Name', width: 90 },
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.department') : '部门', field: 'OrgName', width: 200 }
        ];
        this.searchValue = null;
        this.userListData = [];
        // 是否允许多选,默认多选
        this.singleSelect = false;
        this.selectedUsers = [];
        this.completed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    handleOk() {
        throw new Error('没有实现，需要子组件实现');
    }
    /**
     * @return {?}
     */
    handleCancel() {
        this.completed.emit(false);
        this.showModal(false);
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    onPageSizeChange(pageSize) {
        this.paginationOptions.itemsPerPage = pageSize;
        this.getUserList();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageChange(event) {
        this.paginationOptions.currentPage = event.pageIndex;
        this.getUserList();
    }
    /**
     * @protected
     * @return {?}
     */
    getUserList() {
        this.userSvc.getUserList(this.searchValue, this.paginationOptions.currentPage, this.paginationOptions.itemsPerPage)
            .subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.paginationOptions.totalItems = re.totalCount;
            this.userListData = re.data.map((/**
             * @param {?} u
             * @return {?}
             */
            u => ({
                ID: u.id,
                Code: u.code,
                Name: u.name,
                OrgId: u.sysOrgId,
                OrgName: u.sysOrgName,
                Checked: false
            })));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    search(event) {
        this.paginationOptions.currentPage = 1;
        this.searchValue = encodeURIComponent(event.value);
        if (event.field === '*') {
            this.getUserList();
        }
        else if (event.field === 'Name') {
            this.getUserList();
        }
        else {
            this.notify.warning('只支持用户名称过滤！');
        }
    }
    /**
     * @protected
     * @param {?} show
     * @return {?}
     */
    showModal(show) {
        if (show) {
            this.userDialog.show();
            this.getUserList();
        }
        else {
            // 临时处理方案
            if (this.userDialog.beforeClose) {
                this.userDialog.close();
            }
        }
    }
}
UserHelperComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-user-helper',
                template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
            }] }
];
/** @nocollapse */
UserHelperComponent.ctorParameters = () => [
    { type: I18nService, decorators: [{ type: Optional }] },
    { type: UserService },
    { type: NotifyService }
];
UserHelperComponent.propDecorators = {
    userTable: [{ type: ViewChild, args: ['allUserTable',] }],
    userDialog: [{ type: ViewChild, args: ['allUserDialog',] }],
    completed: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskSignaddComponent extends UserHelperComponent {
    /**
     * @param {?} taskSvc
     * @param {?} userSvc
     * @param {?} notify
     * @param {?} i18nService
     */
    constructor(taskSvc, userSvc, notify, i18nService) {
        super(i18nService, userSvc);
        this.taskSvc = taskSvc;
        this.userSvc = userSvc;
        this.notify = notify;
        this.i18nService = i18nService;
        this.completed = new EventEmitter();
        this.paginationOptions.id = 'WF-SignAdd-DataTable-Pagination';
    }
    /**
     * @param {?} context
     * @return {?}
     */
    set addsign_context(context) {
        this.selectedUsers = [];
        this.addSignContext = Object.assign({}, context, { assignees: [] });
        this.showModal(!!this.addSignContext.workItemId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    handleOk() {
        this.selectedUsers = this.userTable.selections;
        // 征询
        if (this.addSignContext.action === 'AddSignFront') {
            // 需要校验选中用户
            if (!this.selectedUsers || this.selectedUsers.length < 1) {
                this.notify.info(this.i18nService.getValue('static.addsign.selectConsultant'));
                return;
            }
            this.addSignContext.assignees = this.selectedUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.ID));
            this.taskSvc.addSign(this.addSignContext).subscribe((/**
             * @return {?}
             */
            () => {
                this.notify.success(this.i18nService.getValue('static.addsign.successConsult'));
                this.completed.emit(true);
                this.showModal(false);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                if (error && error.error && error.error.Message) {
                    this.notify.error(error.error.Message);
                }
            }));
        }
        else {
            // 加签
            this.completed.emit(true);
            this.showModal(false);
        }
    }
}
TaskSignaddComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-task-signadd',
                template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
            }] }
];
/** @nocollapse */
TaskSignaddComponent.ctorParameters = () => [
    { type: TaskService },
    { type: UserService },
    { type: NotifyService },
    { type: I18nService }
];
TaskSignaddComponent.propDecorators = {
    addsign_context: [{ type: Input }],
    completed: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfWorkitemHandleComponent {
    /**
     * @param {?} taskSvc
     * @param {?} notify
     * @param {?} i18nService
     */
    constructor(taskSvc, notify, i18nService) {
        this.taskSvc = taskSvc;
        this.notify = notify;
        this.i18nService = i18nService;
        this.completeContext = new CompleteContext();
        // 加签选中人
        this.displayPlaceholder = "请选择"; //跳转的默认显示节点
        //跳转的默认显示节点
        this.hasDefaultBranch = true;
        /**
         * 任务办理动作列表
         */
        this.actions = new EventEmitter();
        /**
         * 任务办理完成事件
         */
        this.completed = new EventEmitter();
        // 当前选中动作和动作实现
        this.preFuncList = [];
        this.postFuncList = [];
        // 弹框高度设置
        this.height = 420;
        this.actionsTitle = {
            pass: '',
            back: '',
            refuse: '',
            more: '',
            viewLog: '',
            viewFlowChart: '',
            viewBizlog: ''
        };
        /** @type {?} */
        const titles = this.i18nService.getValue('static.taskActions');
        Object.keys(this.actionsTitle).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.actionsTitle[key] = titles[key];
        }));
    }
    /**
     * 任务Id
     * @param {?} workitemId
     * @return {?}
     */
    set workitemId(workitemId) {
        this.inWorkitemId = (workitemId && workitemId.trim());
        if (this.inWorkitemId) {
            this.refreshActions();
        }
    }
    /**
     * @return {?}
     */
    get workitemId() {
        return this.inWorkitemId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 刷新动作列表
     * @private
     * @return {?}
     */
    refreshActions() {
        this.taskSvc.getWorkItemActions(this.inWorkitemId).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            // 临时方案：oData不支持自定义function $expand展开，临时序列化处理
            this.taskActions = re.map((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                action.parameters = JSON.parse(action.parameters);
                return action;
            }));
            this.taskActions = this.taskActions.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.code !== 'ViewBizLog'
                && a.code !== 'ViewFlowChart'
                && a.code !== 'ViewExecuteForm'));
            this.actions.emit(this.taskActions);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    /**
     * 动作完成后事件
     * @private
     * @param {?=} result 事件结果
     * @return {?}
     */
    completedEvt(result = true) {
        if (result) {
            this.refreshActions();
        }
        this.completed.emit(result);
    }
    /**
     * 完成审批任务
     * @param {?} actionCode 任务办理动作编号
     * @param {?=} comment
     * @return {?}
     */
    complete(actionCode, comment) {
        switch (actionCode) {
            case 'AssignUser': { // 指派
                this.assignee(this.inWorkitemId);
                break;
            }
            case 'Claim': // 领用
                this.taskSvc.claim(this.inWorkitemId).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    this.notify.success(this.i18nService.getValue('cueWords.successClaim'));
                    this.refreshActions();
                    this.completed.emit(false);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.showError(error);
                }));
                break;
            case 'Unclaim': // 取消领用
                this.taskSvc.unClaim(this.inWorkitemId).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    this.notify.success(this.i18nService.getValue('cueWords.successUnClaim'));
                    this.refreshActions();
                    this.completed.emit(false);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.showError(error);
                }));
                break;
            case 'Retrieve': // 取回
                this.taskSvc.retrieve({ workItemId: this.inWorkitemId, comment }).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    this.notify.success(this.i18nService.getValue('cueWords.successRetrieve'));
                    this.completedEvt();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.showError(error);
                }));
                break;
            case 'Transfer': { // 移交
                this.transferContext = {
                    workItemId: this.inWorkitemId,
                    comment
                };
                break;
            }
            case 'AddSignFront': // 征询
                this.addSignContext = {
                    workItemId: this.inWorkitemId,
                    action: 'AddSignFront'
                };
                break;
            default:
                this.executeTask(actionCode, comment);
        }
    }
    /**
     * @param {?} sucess
     * @return {?}
     */
    refreshList(sucess) {
        this.completedEvt(sucess);
    }
    // 弹出加签帮助
    /**
     * @return {?}
     */
    runAddSign() {
        this.addSignContext = {
            workItemId: this.inWorkitemId,
            action: 'AddSignBehind'
        };
    }
    // 加签完成
    /**
     * @param {?} sucess
     * @return {?}
     */
    addSignComplete(sucess) {
        if (this.addSignContext.action === 'AddSignFront') {
            this.refreshList(sucess);
        }
        else {
            this.completeContext.signAssignees = this.addSignCmp.selectedUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.ID));
            this.selectAddSignees = this.addSignCmp.selectedUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => user.Name)).join(',');
        }
    }
    // 审批确认
    /**
     * @return {?}
     */
    handleOk() {
        if (!this.completeContext.comment) {
            this.notify.info("请输入审批意见");
            return;
        }
        if (!this.hasDefaultBranch && this.completeContext.destinationActivityId.length <= 0) { //没有默认分支并且用户没选择跳转节点，不允许提交
            this.notify.info("请选择目标节点");
            return;
        }
        this.taskSvc.excuteTask(this.inWorkitemId, this.completeContext).subscribe((/**
         * @param {?} cr
         * @return {?}
         */
        (cr) => {
            this.commentModal.close();
            // 完成工作项后，检查是否需要执行后事件
            this.excutePostEvent();
            if (this.completeContext.conclusionValue === 'Pass') {
                this.notify.success(this.i18nService.getValue('cueWords.successPass'));
            }
            else if (this.completeContext.conclusionValue === 'Back') {
                this.notify.success(this.i18nService.getValue('cueWords.successBack'));
            }
            else if (this.completeContext.conclusionValue === 'Refuse') {
                this.notify.success(this.i18nService.getValue('cueWords.successRefuse'));
            }
            else {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
            }
            if (cr.needInteraction) {
                this.refreshActions(); //通过后弹出指派 add by fpf
                this.assigneeInfos = [cr.nextFlowNodes[0].assigneeInfo];
            }
            else {
                this.completedEvt();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    // 取消操作
    /**
     * @return {?}
     */
    handleCancel() {
        this.completeContext = new CompleteContext();
        this.commentModal.close();
    }
    // 指派操作
    /**
     * @private
     * @param {?} workItemId
     * @return {?}
     */
    assignee(workItemId) {
        this.taskSvc.getAssigneeInfo(workItemId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            info.assigneeInfo.workItemId = workItemId; //兼容处理，此处返回的workitemid为null
            this.assigneeInfos = [info.assigneeInfo];
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    // 重新初始化当前参数
    /**
     * @private
     * @return {?}
     */
    initState() {
        this.selectAddSignees = '';
        this.destActivities = null;
        this.needAddSign = false;
    }
    /**
     * @private
     * @param {?} actionCode
     * @param {?=} opinion
     * @return {?}
     */
    executeTask(actionCode, opinion) {
        this.initState();
        this.completeContext = {
            workItemId: this.inWorkitemId,
            conclusionValue: actionCode,
            comment: '',
            signAssignees: [],
            // 加签人员
            destinationActivityId: '' // 目标节点
        };
        this.completeContext.comment = actionCode === 'Pass' ? this.actionsTitle.pass : '';
        if (opinion) {
            this.completeContext.comment = opinion;
        }
        /** @type {?} */
        const action = this.taskActions.find((/**
         * @param {?} a
         * @return {?}
         */
        a => a.code === actionCode));
        this.taskSvc.getActionEntity(this.workitemId, actionCode).subscribe((/**
         * @param {?} act
         * @return {?}
         */
        (act) => {
            if (!act) { // 审批动作已删除，走完成工作项  TODO: 非完成工作项动作如何处理？
                this.showExcuteModal(action);
            }
            else {
                from(this.excuteAction(act)).subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (!act.webComponent) {
                        this.showExcuteModal(action);
                    }
                }));
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    /**
     * 加签，跳转情况
     * @private
     * @param {?} action 动作
     * @return {?}
     */
    showExcuteModal(action) {
        // 动作参数按照
        if (action && action.parameters) {
            // 跳转、驳回场景
            if (action.parameters.SelectTargetAble === 'True' || action.parameters.SelectTargetAble === 'true') {
                // this.taskSvc.getDestinationScope(this.inWorkitemId, action.code).subscribe((re: { id: string, name: string }[]) => {
                //   this.destActivities = re;
                // });
                this.getDestinationNodes(this.inWorkitemId, action.code);
            }
            // 需要加签
            if (action.parameters.AddSignBehindAble === 'True' || action.parameters.AddSignBehindAble === 'true') {
                this.needAddSign = true;
            }
        }
        this.commentModal.show();
    }
    /**
     * @private
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    getDestinationNodes(workItemId, actionCode) {
        /** @type {?} */
        var nextNodes = [];
        this.taskSvc.getDestinationScope(workItemId, actionCode).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            nextNodes = re;
            /** @type {?} */
            const des = re.map((/**
             * @param {?} a
             * @return {?}
             */
            a => a.nodeInfoList));
            /** @type {?} */
            let list = [];
            des.forEach((/**
             * @param {?} i
             * @return {?}
             */
            i => {
                list = list.concat(i);
            }));
            this.destActivities = list.map((/**
             * @param {?} i
             * @return {?}
             */
            i => ({ id: i.activityDefinitionId, name: i.activityDefinitionName })));
            this.hasDefaultBranch = this.hasDefaultBranchFunc(nextNodes);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.showError(error);
        }));
    }
    /**
     * 跳转，返回的数据是否有默认分支
     * 如果返回的没有默认节点，跳转节点又没选的话，不允许提交
     * @private
     * @param {?} nextNodes
     * @return {?}
     */
    hasDefaultBranchFunc(nextNodes) {
        for (let i = 0; i < nextNodes.length; i++) {
            if (nextNodes[i].defaultBranch) {
                this.displayPlaceholder = nextNodes[i].nodeInfoList[0].activityDefinitionName;
                return true;
            }
        }
        return false;
    }
    /**
     * @private
     * @param {?} act
     * @return {?}
     */
    excuteAction(act) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getActionWebEventsFunc(act);
            if (this.preFuncList && this.preFuncList.length > 0) {
                for (let i = 0; i < this.preFuncList.length; i++) {
                    this.preFuncList.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.index === i))[0].func();
                }
            }
            if (this.webCptFunc) {
                this.webCptFunc();
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    excutePostEvent() {
        if (this.postFuncList && this.postFuncList.length > 0) {
            for (let i = 0; i < this.postFuncList.length; i++) {
                this.postFuncList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.index === i))[0].func();
            }
        }
    }
    /**
     * 获取动作的前后事件和实现方法
     * @private
     * @param {?} act 动作
     * @return {?}
     */
    getActionWebEventsFunc(act) {
        return __awaiter(this, void 0, void 0, function* () {
            this.preFuncList = [];
            this.webCptFunc = null;
            this.postFuncList = [];
            /** @type {?} */
            const reqMap = [];
            /** @type {?} */
            let preIndex = 0;
            /** @type {?} */
            let postIndex = 0;
            if (act.preEvent && act.preEvent.length > 0) {
                for (const e of act.preEvent) {
                    /** @type {?} */
                    const pre = {
                        event: 'pre',
                        index: preIndex++,
                        funcName: e.component.split('#')[1],
                        req: System.import(e.component.split('#')[0])
                    };
                    reqMap.push(pre);
                }
            }
            if (act.webComponent) {
                /** @type {?} */
                const cpt = {
                    event: 'cpt',
                    index: 0,
                    funcName: act.webComponent.split('#')[1],
                    req: System.import(act.webComponent.split('#')[0])
                };
                reqMap.push(cpt);
            }
            if (act.postEvent && act.postEvent.length > 0) {
                for (const a of act.postEvent) {
                    /** @type {?} */
                    const post = {
                        event: 'post',
                        index: postIndex++,
                        funcName: a.component.split('#')[1],
                        req: System.import(a.component.split('#')[0])
                    };
                    reqMap.push(post);
                }
            }
            for (const r of reqMap) {
                /** @type {?} */
                const m = yield r.req;
                if (r.event === 'pre') {
                    this.preFuncList.push({
                        index: r.index,
                        func: m.default[r.funcName]
                    });
                }
                else if (r.event === 'post') {
                    this.postFuncList.push({
                        index: r.index,
                        func: m.default[r.funcName]
                    });
                }
                else {
                    this.webCptFunc = m.default[r.funcName];
                }
            }
        });
    }
    /**
     * 显示报错信息
     * @private
     * @param {?} error
     * @return {?}
     */
    showError(error) {
        if (error && error.error && error.error.Message) {
            this.notify.error(error.error.Message);
        }
        else {
            this.notify.error(error);
        }
    }
}
WfWorkitemHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-workitem-handle',
                template: "<farris-dialog #commentModal [enableScroll]= \"false\" [buttons]=\"buttonRef\" [width]=\"550\" [height]=\"360\" [title]=\"'static.title' | translate\">\r\n    <div style=\"padding: 20px;\">\r\n        <div>\r\n            <wf-comment class=\"w-100\" [(ngModel)]=\"completeContext.comment\" name=\"comment\"\r\n                [placeholder]=\"'static.inputHolder' | translate\"></wf-comment>\r\n        </div>\r\n        <div class=\"d-flex\" style=\"height:28px;overflow: hidden;\">\r\n            <div *ngIf=\"needAddSign\" style=\"flex:1;display: flex;height:28px;overflow: hidden;\" [ngStyle]=\"{'padding-right': destActivities ? '20px' : '0px'}\">\r\n                <label style=\"padding-right: 10px;line-height: 24px;\">{{ 'static.addSignee' | translate }}</label>\r\n                <div class=\"d-flex\" style=\"flex: 1\">\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectAddSignees\" [readOnly]=\"true\" placeholder=\"\u8BF7\u9009\u62E9\"/>\r\n                        <button class=\"k-button k-bare\" type=\"button\" (click)=\"runAddSign()\">\r\n                            <i class=\"f-icon f-icon-lookup\" style=\"color: #bfbfbf; margin: 0 -8px 0 0;\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"destActivities\" style=\"flex:1;display: flex;height:28px;overflow: hidden;\">\r\n                <label style=\"padding-right: 10px;line-height: 24px;\">{{ 'static.selectActivity' | translate }}</label>\r\n                <div class=\"d-flex\" style=\"flex:1\">\r\n                    <farris-combo-list  [data]=\"destActivities\" [textField]=\"'name'\" [valueField]=\"'id'\" [idField]=\"'id'\"\r\n                        [(ngModel)]=\"completeContext.destinationActivityId\" style=\"flex: 1;\" [placeholder] = \"displayPlaceholder\">\r\n                    </farris-combo-list >\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n    <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">{{\r\n            'static.footOk' | translate }}</button>\r\n    <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">{{\r\n            'static.footCancel' | translate }}</button>\r\n</ng-template>\r\n\r\n<!-- \u6307\u6D3E -->\r\n<wf-task-assign [assigneeInfo]=\"assigneeInfos\" (completed)=\"refreshList($event)\"></wf-task-assign>\r\n<!-- \u79FB\u4EA4 -->\r\n<wf-task-transfer [transfer_context]=\"transferContext\" (completed)=\"refreshList($event)\"></wf-task-transfer>\r\n<!-- \u52A0\u7B7E\u3001\u5F81\u8BE2 -->\r\n<wf-task-signadd [addsign_context]=\"addSignContext\" (completed)=\"addSignComplete($event)\"></wf-task-signadd>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
WfWorkitemHandleComponent.ctorParameters = () => [
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService }
];
WfWorkitemHandleComponent.propDecorators = {
    addSignCmp: [{ type: ViewChild, args: [TaskSignaddComponent,] }],
    commentModal: [{ type: ViewChild, args: ['commentModal',] }],
    workitemId: [{ type: Input }],
    actions: [{ type: Output }],
    completed: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskAssignComponent extends UserHelperComponent {
    //是否允许全员指派
    /**
     * @param {?} taskSvc
     * @param {?} userSvc
     * @param {?} notify
     * @param {?} i18nService
     */
    constructor(taskSvc, userSvc, notify, i18nService) {
        super(i18nService, userSvc);
        this.taskSvc = taskSvc;
        this.userSvc = userSvc;
        this.notify = notify;
        this.i18nService = i18nService;
        this.completed = new EventEmitter();
        this.paginationOptions.id = 'WF-TaskAss-DataTable-Pagination';
        // this.title = this.i18nService.getValue('static.assignee.title');
    }
    // title = '请选择指派用户';
    /**
     * @param {?} assigneeInfos
     * @return {?}
     */
    set assigneeInfo(assigneeInfos) {
        if (assigneeInfos && assigneeInfos.length > 0) {
            this.assignees = assigneeInfos;
            this.showModal(true);
            this.execute();
        }
        else {
            this.showModal(false);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    execute() {
        this.assigneesPa = {
            workItemId: this.assignees[0].workItemId,
            assigneeIds: [],
            comment: ''
        };
        this.singleSelect = !this.assignees[0].multiSelect;
        this.allowGlobalAssign = this.assignees[0].allowGlobalAssign;
        if (this.assignees[0].assigneeUsers && this.assignees[0].assigneeUsers.length) {
            this.getAssignedUsers();
        }
        else {
            if (this.allowGlobalAssign) {
                this.getUserList();
            }
        }
    }
    /**
     * @return {?}
     */
    getAssignedUsers() {
        this.allUserData = this.assignees[0].assigneeUsers.map((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            return {
                ID: user.id,
                Name: user.name,
                Code: user.code,
                OrgId: user.orgId,
                OrgName: user.orgNamePath
            };
        }));
        this.userListData = this.allUserData;
    }
    /**
     * @return {?}
     */
    handleOk() {
        this.selectedUsers = this.singleSelect ? [this.userTable.selections] : this.userTable.selections;
        if (!this.selectedUsers || this.selectedUsers.length < 1) {
            this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
            return;
        }
        this.assignees.shift();
        this.assigneesPa.assigneeIds = this.selectedUsers.map((/**
         * @param {?} user
         * @return {?}
         */
        user => user.ID));
        // 检查指定是否完成，如果完成提交，否则继续指派任务
        if (this.assignees.length > 0) {
            this.userListData = []; // clear source
            this.execute();
        }
        else {
            this.taskSvc.assignNextUsersByWorkItemId(this.assigneesPa).subscribe((/**
             * @return {?}
             */
            () => {
                this.showModal(false);
                this.notify.success(this.i18nService.getValue('static.assignee.successAssign'));
                this.completed.emit(true);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                if (error && error.error && error.error.Message) {
                    this.notify.error(error.error.Message);
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    search(event) {
        if (!this.assignees[0].assigneeUsers || !this.assignees[0].assigneeUsers.length) {
            super.search(event);
        }
        else {
            this.searchValue = event.value;
            if (this.searchValue) {
                this.userListData = this.allUserData.filter((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => (user.Name) && user.Name.includes(this.searchValue) ||
                    (user.Code) && user.Code.includes(this.searchValue)));
            }
            else {
                this.getAssignedUsers();
            }
        }
    }
    /**
     * @protected
     * @param {?} show
     * @return {?}
     */
    showModal(show) {
        if (show) {
            this.userDialog.show();
        }
        else {
            // 临时处理方案
            if (this.userDialog.beforeClose) {
                this.userDialog.close();
            }
        }
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    onPageSizeChange(pageSize) {
        this.paginationOptions.itemsPerPage = pageSize;
        if (this.allowGlobalAssign) {
            this.getUserList();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageChange(event) {
        this.paginationOptions.currentPage = event.pageIndex;
        if (this.allowGlobalAssign) {
            this.getUserList();
        }
    }
}
TaskAssignComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-task-assign',
                template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
            }] }
];
/** @nocollapse */
TaskAssignComponent.ctorParameters = () => [
    { type: TaskService },
    { type: UserService },
    { type: NotifyService },
    { type: I18nService }
];
TaskAssignComponent.propDecorators = {
    assigneeInfo: [{ type: Input }],
    completed: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskTransferComponent extends UserHelperComponent {
    /**
     * @param {?} taskSvc
     * @param {?} userSvc
     * @param {?} notify
     * @param {?} i18nService
     */
    constructor(taskSvc, userSvc, notify, i18nService) {
        super(i18nService, userSvc);
        this.taskSvc = taskSvc;
        this.userSvc = userSvc;
        this.notify = notify;
        this.i18nService = i18nService;
        this.completed = new EventEmitter();
        this.singleSelect = true;
        this.paginationOptions.id = 'WF-TaskTransfer-DataTable-Pagination';
    }
    /**
     * @param {?} context
     * @return {?}
     */
    set transfer_context(context) {
        this.transferContext = Object.assign({}, context, { assignee: '' });
        this.selectedUsers = [];
        this.showModal(!!this.transferContext.workItemId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    handleOk() {
        this.selectedUsers = this.userTable.selections;
        // 需要校验选中唯一用户
        if (!this.selectedUsers) {
            this.notify.info(this.i18nService.getValue('static.transfer.selectHandover'));
            return;
        }
        this.transferContext.assignee = this.selectedUsers['ID'];
        this.taskSvc.transfer(this.transferContext).subscribe((/**
         * @return {?}
         */
        () => {
            this.notify.success(this.i18nService.getValue('static.transfer.successTransfer'));
            this.completed.emit(true);
            this.showModal(false);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            if (error && error.error && error.error.Message) {
                this.notify.error(error.error.Message);
            }
        }));
    }
}
TaskTransferComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-task-transfer',
                template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
            }] }
];
/** @nocollapse */
TaskTransferComponent.ctorParameters = () => [
    { type: TaskService },
    { type: UserService },
    { type: NotifyService },
    { type: I18nService }
];
TaskTransferComponent.propDecorators = {
    transfer_context: [{ type: Input }],
    completed: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批客户端交互返回结果
 */
class InteractionResponse {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignParticipantComponent {
    /**
     * @param {?} userSvc
     * @param {?} notify
     * @param {?} taskSvc
     * @param {?} loadingService
     * @param {?} i18nService
     */
    constructor(userSvc, notify, taskSvc, loadingService, i18nService) {
        this.userSvc = userSvc;
        this.notify = notify;
        this.taskSvc = taskSvc;
        this.loadingService = loadingService;
        this.i18nService = i18nService;
        this.cls = 'farris-main-area flex-column';
        this.pageList = [10, 20, 30, 50, 100];
        this.paginationOptions = {
            id: 'WF-Users-DataTable-Pagination',
            currentPage: 1,
            itemsPerPage: 10,
            pageList: this.pageList,
            totalItems: 0
        };
        this.subject = new Subject();
        this.withAllOrg = true;
        this.orgId = '';
        this.userListData = [];
        // 是否允许多选,默认多选
        this.singleSelect = false;
        this.searchValue = null;
        this.selectedUsers = [];
        this.columns = [
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.code') : '编号', field: 'Code', width: 80 },
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.name') : '姓名', field: 'Name', width: 90 },
            { title: this.i18nService ? this.i18nService.getValue('static.columnName.department') : '组织信息', field: 'OrgName', width: 180 }
        ];
    }
    /**
     * @param {?} assigneeInfos
     * @return {?}
     */
    set assigneeInfo(assigneeInfos) {
        this.assignees = assigneeInfos;
        this.assigneesPa = {
            procInstId: '',
            //后端用不到 先为空
            assigneeInfos: []
        };
        this.getUserList();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getUserList() {
        this.singleSelect = !this.assignees[0].multiSelect;
        if (this.assignees[0].assigneeUsers && this.assignees[0].assigneeUsers.length) {
            this.getAssignedUsers();
        }
        else {
            if (this.assignees[0].allowGlobalAssign) {
                if (this.assignees[0].organizationScope && this.assignees[0].organizationScope.length) {
                    this.withAllOrg = this.assignees[0].organizationScope[0].includeChildren;
                    this.orgId = this.assignees[0].organizationScope[0].id;
                }
                this.getAllUserList();
            }
            else {
                this.getAssignedUsers();
            }
        }
    }
    /**
     * @return {?}
     */
    getAssignedUsers() {
        if (this.assignees.length > 0) {
            this.selectedUsers = this.assignees[0].assigneeUsers.map((/**
             * @param {?} user
             * @return {?}
             */
            user => {
                return {
                    ID: user.id,
                    Name: user.name,
                    Code: user.code,
                    OrgId: user.orgId,
                    OrgName: user.orgNamePath
                };
            })),
                this.userListData = this.selectedUsers;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    getAllUserList() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.userSvc.getUserList_Assign(this.searchValue, this.paginationOptions.currentPage, this.paginationOptions.itemsPerPage, this.withAllOrg, this.orgId)
            .subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            load.close();
            this.paginationOptions.totalItems = re.totalCount;
            this.userListData = re.data.map((/**
             * @param {?} u
             * @return {?}
             */
            u => ({
                ID: u.id,
                Code: u.code,
                Name: u.name,
                OrgId: u.sysOrgId,
                OrgName: u.orgNamePath,
                Checked: false
            })));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            load.close();
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    search(event) {
        this.searchValue = event.value;
        if (this.assignees[0].assigneeUsers && this.assignees[0].assigneeUsers.length) { //有候选人，在候选人中筛选
            if (this.searchValue) {
                this.userListData = this.selectedUsers.filter((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => (user.Name) && user.Name.includes(this.searchValue) ||
                    (user.Code) && user.Code.includes(this.searchValue)));
            }
            else {
                this.getAssignedUsers();
            }
        }
        else { //无候选人，在全员中选择
            this.paginationOptions.currentPage = 1;
            this.getUserList();
        }
    }
    /**
     * @return {?}
     */
    btnCancelClick() {
        this.notify.info(this.i18nService ? this.i18nService.getValue('static.assignee.cancelAssign') : '已取消操作。');
        this.subject.next(null);
    }
    /**
     * @return {?}
     */
    btnOKClick() {
        this.selectedUsers = this.singleSelect ? [this.userTable.selections] : this.userTable.selections;
        if (!this.selectedUsers || this.selectedUsers.length < 1) {
            this.notify.warning(this.i18nService ? this.i18nService.getValue('static.assignee.noAssignee') : '请至少选择一个审批人。');
            return;
        }
        // 添加已选人员
        /** @type {?} */
        const assigneeInfo = this.assignees.shift();
        assigneeInfo.assigneeIds = this.selectedUsers.map((/**
         * @param {?} user
         * @return {?}
         */
        user => user.ID));
        this.assigneesPa.assigneeInfos.push(assigneeInfo);
        // 检查指定是否完成，如果完成提交，否则继续指派任务
        if (this.assignees.length > 0) {
            this.userListData = []; // clear source
            this.getUserList();
        }
        else {
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskSvc.assignNextUsersByProcInstId(this.assigneesPa).subscribe((/**
             * @return {?}
             */
            () => {
                load.close();
                this.notify.success(this.i18nService ? this.i18nService.getValue('static.assignee.successAssign') : '操作成功。');
                this.subject.next(this.assigneesPa);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.notify.error(this.i18nService ? this.i18nService.getValue('static.assignee.errorAssign') : '操作失败，请联系管理员查看原因！');
                this.subject.error(this.i18nService ? this.i18nService.getValue('static.assignee.errorAssign') : '操作失败，请联系管理员查看原因！');
            }));
        }
    }
    /**
     * @return {?}
     */
    subscribe() {
        return this.subject.asObservable();
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    onPageSizeChange(pageSize) {
        this.paginationOptions.itemsPerPage = pageSize;
        this.getUserList();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageChange(event) {
        this.paginationOptions.currentPage = event.pageIndex;
        this.getUserList();
    }
}
AssignParticipantComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-assign-participant',
                template: "<div class=\"modal-body farris-overflow-hidden f-utils-flex-column\" style=\"background-color: white;\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto h-100\" style=\"position:relative; overflow: auto;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\"\r\n        (search)=\"search($event)\" [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\" [showPageList]=\"false\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer flex-shrink-0\">\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"btnOKClick()\">{{('static.footOk' | translate)?('static.footOk' | translate):'\u786E\u5B9A' }}</button>\r\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"btnCancelClick()\">{{('static.footCancel' | translate)?('static.footCancel' | translate):'\u53D6\u6D88' }}</button>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AssignParticipantComponent.ctorParameters = () => [
    { type: UserService },
    { type: NotifyService },
    { type: TaskService },
    { type: LoadingService },
    { type: I18nService, decorators: [{ type: Optional }] }
];
AssignParticipantComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    assigneeInfo: [{ type: Input }],
    userTable: [{ type: ViewChild, args: ['allUserTable',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批客户端交互服务
 */
class WFSubmiteService {
    /**
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} i18nService
     */
    constructor(injector, resolver, modalService, i18nService) {
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.i18nService = i18nService;
    }
    /**
     * 客户端交互处理服务端返回结果
     * @param {?} excutionRe 提交审批服务器端返回结果
     * @param {?} handler 处理结果回调页面
     * @return {?}
     */
    excute(excutionRe, handler) {
        /** @type {?} */
        const response = new InteractionResponse();
        // 无需交互
        if (excutionRe.needInteraction === false) {
            response.message = '无需交互';
            handler(response);
            return;
        }
        // 选择要提交的流程
        if (excutionRe.procDefs && excutionRe.procDefs.length > 1) {
            this.selectProcess(excutionRe.procDefs, handler);
            return;
        }
        // 指定下一步参与者
        if (excutionRe.nextFlowNodes[0].assigneeInfo) {
            this.assignee([excutionRe.nextFlowNodes[0].assigneeInfo], handler);
            return;
        }
    }
    /**
     * 处理选择流程结果
     * @private
     * @param {?} prcesses
     * @param {?} handler
     * @return {?}
     */
    selectProcess(prcesses, handler) {
        /** @type {?} */
        const response = new InteractionResponse();
        /** @type {?} */
        const modalConfig = {
            title: this.i18nService ? this.i18nService.getValue('static.submit.selectProcess') : '流程选择',
            width: 520,
            height: 290,
            showButtons: false,
            showMaxButton: false,
            beforeClose: (/**
             * @param {?} modelRef
             * @return {?}
             */
            (modelRef) => {
                handler(response);
                return of(true);
            })
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.gridData = prcesses;
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.subscribe().subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            response.processDefinitionId = val;
            dialog.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            response.message = err;
            dialog.close();
        }));
    }
    /**
     * 处理指定下一步人员结果
     * @private
     * @param {?} assigneeInfos
     * @param {?=} handler
     * @return {?}
     */
    assignee(assigneeInfos, handler) {
        /** @type {?} */
        const response = new InteractionResponse();
        /** @type {?} */
        const modalConfig = {
            title: this.i18nService ? this.i18nService.getValue('static.assignee.title') : '请选择操作用户',
            width: 850,
            height: 520,
            showMaxButton: false,
            showButtons: false,
            beforeClose: (/**
             * @param {?} modelRef
             * @return {?}
             */
            (modelRef) => {
                handler(response);
                return of(true);
            })
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AssignParticipantComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.assigneeInfo = assigneeInfos;
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.subscribe().subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            dialog.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            dialog.close();
        }));
    }
}
WFSubmiteService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFSubmiteService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: I18nService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslatePipe {
    /**
     * @param {?} i18nService
     */
    constructor(i18nService) {
        this.i18nService = i18nService;
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(name, defaultVal = '') {
        if (this.i18nService) {
            /** @type {?} */
            const r = this.i18nService.getValue(name);
            return r ? r : defaultVal;
        }
        else {
            return defaultVal;
        }
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'translate' },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [
    { type: I18nService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFRuntimeModule {
}
WFRuntimeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    DataTableModule,
                    FarrisDialogModule,
                    PaginationModule,
                    NotifyModule,
                    MessagerModule.forRoot({
                        width: 500
                    }),
                    DatagridModule,
                    WFCommentModule,
                    ComboListModule,
                    LoadingModule
                ],
                declarations: [
                    ProcessSelectorComponent,
                    WfWorkitemHandleComponent,
                    UserHelperComponent,
                    TaskAssignComponent,
                    TaskSignaddComponent,
                    TaskTransferComponent,
                    AssignParticipantComponent,
                    TranslatePipe
                ],
                providers: [
                    HttpService,
                    TaskService,
                    UserService,
                    SessionService,
                    WFSubmiteService,
                    I18nService,
                ],
                exports: [
                    ProcessSelectorComponent,
                    WfWorkitemHandleComponent,
                    UserHelperComponent,
                    TaskAssignComponent,
                    TaskSignaddComponent,
                    TaskTransferComponent,
                    AssignParticipantComponent,
                ],
                entryComponents: [
                    ProcessSelectorComponent,
                    WfWorkitemHandleComponent,
                    UserHelperComponent,
                    TaskAssignComponent,
                    TaskSignaddComponent,
                    TaskTransferComponent,
                    AssignParticipantComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批操作返回结果
 */
class ExcutionResponse {
    constructor() { }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 审批动作定义
 */
class WorkitemAction {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WFRuntimeModule, InteractionResponse, ExcutionResponse, WorkitemAction, WFSubmiteService, WfWorkitemHandleComponent, TaskAssignComponent, TaskSignaddComponent, TaskTransferComponent, UserHelperComponent, TaskService, UserService, I18nService, TranslatePipe, ProcessSelectorComponent, AssignParticipantComponent as ɵa };

//# sourceMappingURL=gsp-wf-rtdevkit.js.map