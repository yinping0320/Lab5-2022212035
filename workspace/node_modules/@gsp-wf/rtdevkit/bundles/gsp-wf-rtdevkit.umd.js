(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@farris/ui-datatable'), require('@farris/ui-dialog'), require('@farris/ui-pagination'), require('@farris/ui-messager'), require('@angular/common/http'), require('@ecp-caf/caf-common'), require('@farris/ui-modal'), require('@farris/ui-notify'), require('rxjs'), require('@farris/ui-datagrid'), require('@gsp-wf/ui-comment'), require('@angular/core'), require('@farris/ui-combo-list'), require('@farris/ui-loading')) :
    typeof define === 'function' && define.amd ? define('@gsp-wf/rtdevkit', ['exports', '@angular/common', '@angular/forms', '@farris/ui-datatable', '@farris/ui-dialog', '@farris/ui-pagination', '@farris/ui-messager', '@angular/common/http', '@ecp-caf/caf-common', '@farris/ui-modal', '@farris/ui-notify', 'rxjs', '@farris/ui-datagrid', '@gsp-wf/ui-comment', '@angular/core', '@farris/ui-combo-list', '@farris/ui-loading'], factory) :
    (factory((global['gsp-wf'] = global['gsp-wf'] || {}, global['gsp-wf'].rtdevkit = {}),global.ng.common,global.ng.forms,global.uiDatatable,global.uiDialog,global.uiPagination,global.uiMessager,global.ng.common.http,global.cafCommon,global.uiModal,global.uiNotify,global.rxjs,global.uiDatagrid,global.uiComment,global.ng.core,global.uiComboList,global.uiLoading));
}(this, (function (exports,common,forms,uiDatatable,uiDialog,uiPagination,uiMessager,http,cafCommon,uiModal,uiNotify,rxjs,uiDatagrid,uiComment,core,uiComboList,uiLoading) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var en = {
        static: {
            taskActions: {
                pass: 'Agree',
                back: 'Reject',
                refuse: 'Veto',
                more: 'More',
                viewLog: 'View Log',
                viewFlowChart: 'View FlowChart',
                viewBizlog: 'Approval Log'
            },
            title: 'Approval confirmation',
            inputLabel: 'Approval comments',
            inputHolder: 'Please enter an approval opinion',
            selectActivity: 'Please select approve note',
            addSignee: 'Add signee',
            footOk: 'Ok',
            footCancel: 'Cancel',
            assignee: {
                title: 'Select Operator',
                cancelAssign: 'Cancel to operate.',
                noAssignee: 'Please select at least one approver.',
                successAssign: 'Operate successfully.',
                errorAssign: 'Operation failed, please contact the administrator!'
            },
            addsign: {
                title: 'Select signee',
                selectConsultant: 'Please select persons to consult.',
                successConsult: 'Consult successfully.',
                cancelSignUp: 'Cancel to sign up.'
            },
            transfer: {
                title: 'Select transfer person',
                selectHandover: 'Please select transfer persons.',
                successTransfer: 'Tranfer successfully.'
            },
            columnName: {
                name: 'Name',
                code: 'Code',
                department: 'Department',
                organization: 'Organization',
                prcessName: 'Process',
                version: 'Version'
            },
            common: {
                placeHolder: 'Please enter search name'
            },
            submit: {
                selectProcess: 'Select Process',
                noProcess: 'Process has not been selected.'
            },
        },
        cueWords: {
            successClaim: 'Claim successfully.',
            successUnClaim: 'Cancel to claim successfully.',
            successRetrieve: 'Retrieve successfully.',
            successPass: 'Approved successfully.',
            successBack: 'Dismissed successfully.',
            successRefuse: 'Veto successfully.',
            success: 'Operate successfully.'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var cn = {
        static: {
            taskActions: {
                pass: '通过',
                back: '驳回',
                refuse: '否决',
                more: '更多',
                viewLog: '审批日志',
                viewFlowChart: '查看流程',
                viewBizlog: '审批日志'
            },
            assignee: {
                title: '请选择用户',
                cancelAssign: '已取消操作。',
                noAssignee: '请至少选择一个审批人。',
                successAssign: '操作成功。',
                errorAssign: '操作失败，请联系管理员查看原因！'
            },
            addsign: {
                title: '请选择用户',
                selectConsultant: '请选择用户。',
                successConsult: '征询成功。',
                cancelSignUp: '已取消。'
            },
            transfer: {
                title: '请选择用户',
                selectHandover: '请选择用户。',
                successTransfer: '任务移交成功。'
            },
            columnName: {
                name: '名称',
                code: '编号',
                department: '组织信息',
                organization: '组织',
                prcessName: '流程名称',
                version: '版本'
            },
            common: {
                placeHolder: '请输入'
            },
            submit: {
                selectProcess: '选择流程',
                noProcess: '请选择流程'
            },
            title: '审批确认',
            inputLabel: '审批意见',
            inputHolder: '请输入审批意见',
            selectActivity: '目标节点',
            addSignee: '加签人员',
            footOk: '确定',
            footCancel: '取消',
        },
        cueWords: {
            successClaim: '领用成功。',
            successUnClaim: '取消领用成功。',
            successRetrieve: '任务取回成功。',
            successPass: '审批通过。',
            successBack: '驳回成功。',
            successRefuse: '否决成功。',
            success: '操作成功'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var translate = {
        'zh-CHS': cn,
        en: en
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nService = /** @class */ (function () {
        function I18nService() {
            this.defaultLang = localStorage.getItem('languageCode');
            if (!this.defaultLang) {
                this.langData = translate['zh-CHS'];
            }
            else {
                this.langData = translate[this.defaultLang];
            }
        }
        /**
         * @param {?} name
         * @return {?}
         */
        I18nService.prototype.getValue = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!name) {
                    return '';
                }
                /** @type {?} */
                var resultVal = '';
                if (name.indexOf('.') === -1) {
                    resultVal = this.langData[name];
                }
                else {
                    resultVal = name.split('.').reduce(( /**
                     * @param {?} obj
                     * @param {?} key
                     * @return {?}
                     */function (obj, key) {
                        if (obj) {
                            return obj[key];
                        }
                        else {
                            return null;
                        }
                    }), this.langData);
                }
                return resultVal;
            };
        I18nService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        I18nService.ctorParameters = function () { return []; };
        return I18nService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessSelectorComponent = /** @class */ (function () {
        function ProcessSelectorComponent(msgService, i18nService) {
            this.msgService = msgService;
            this.i18nService = i18nService;
            this.cls = 'farris-main-area flex-column';
            this.columns = [
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.prcessName') : '流程名称', field: 'procDefName', width: 200 },
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.version') : '版本', field: 'version', width: 100 }
            ];
            this.idField = 'procDefId';
            this.mySelection = [];
            this.subject = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        ProcessSelectorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ProcessSelectorComponent.prototype.btnOKClick = /**
         * @return {?}
         */
            function () {
                if (this.mySelection.length < 1) {
                    this.msgService.warning(this.i18nService ? this.i18nService.getValue('static.submit.noProcess') : '尚未选择流程定义，请了解。');
                    return;
                }
                this.subject.next(this.mySelection[0]);
            };
        /**
         * @return {?}
         */
        ProcessSelectorComponent.prototype.btnCancelClick = /**
         * @return {?}
         */
            function () {
                this.subject.next(null);
            };
        /**
         * @return {?}
         */
        ProcessSelectorComponent.prototype.subscribe = /**
         * @return {?}
         */
            function () {
                return this.subject.asObservable();
            };
        /**
         * @param {?} data
         * @return {?}
         */
        ProcessSelectorComponent.prototype.onSelectionChange = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (data && data.data) {
                    this.mySelection = [data.data.procDefId];
                }
                else {
                    this.mySelection = [];
                }
            };
        ProcessSelectorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-process-selector',
                        template: "<div style=\"background-color: white; overflow: auto;\">\r\n    <farris-datatable class=\"f-utils-fill\" [data]=\"gridData\" [idField]=\"idField\" [columns]=\"columns\" [pagination]=\"false\" [showFilterBar]='false'\r\n        [singleSelect]=\"true\" (selectedRow)=\"onSelectionChange($event)\" [fill]=\"true\" [height]=\"250\">\r\n    </farris-datatable>\r\n</div>\r\n<div class=\"modal-footer flex-shrink-0\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"btnOKClick()\">{{('static.footOk' | translate)?('static.footOk' | translate):'\u786E\u5B9A' }}</button>\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"btnCancelClick()\">{{('static.footCancel' | translate)?('static.footCancel' | translate):'\u53D6\u6D88' }}</button>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ProcessSelectorComponent.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: I18nService, decorators: [{ type: core.Optional }] }
            ];
        };
        ProcessSelectorComponent.propDecorators = {
            cls: [{ type: core.HostBinding, args: ['class',] }]
        };
        return ProcessSelectorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskService = /** @class */ (function () {
        function TaskService(httpSvc) {
            this.httpSvc = httpSvc;
        }
        /**
         * 获取工作项操作列表
         */
        /**
         * 获取工作项操作列表
         * @param {?} workItemId
         * @return {?}
         */
        TaskService.prototype.getWorkItemActions = /**
         * 获取工作项操作列表
         * @param {?} workItemId
         * @return {?}
         */
            function (workItemId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/actions";
                return this.httpSvc.get(url);
            };
        /**
         * 执行审批操作
         * @param taskId 任务Id
         * @param context 执行审批上下文
         */
        /**
         * 执行审批操作
         * @param {?} taskId 任务Id
         * @param {?} context 执行审批上下文
         * @return {?}
         */
        TaskService.prototype.excuteTask = /**
         * 执行审批操作
         * @param {?} taskId 任务Id
         * @param {?} context 执行审批上下文
         * @return {?}
         */
            function (taskId, context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/complete";
                context.workItemId = taskId;
                return this.httpSvc.post(url, context);
            };
        /**
         * 获取跳转活动信息
         * @param workItemId 工作项Id
         * @param action 动作编号
         */
        /**
         * 获取跳转活动信息
         * @param {?} workItemId 工作项Id
         * @param {?} action 动作编号
         * @return {?}
         */
        TaskService.prototype.getDestinationScope = /**
         * 获取跳转活动信息
         * @param {?} workItemId 工作项Id
         * @param {?} action 动作编号
         * @return {?}
         */
            function (workItemId, action) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/nextNodes/" + action;
                return this.httpSvc.get(url);
            };
        /**
         * 获取动作实体进而获取web实现和前后事件
         * @param taskId 任务ID
         * @param action 动作编号
         */
        /**
         * 获取动作实体进而获取web实现和前后事件
         * @param {?} taskId 任务ID
         * @param {?} action 动作编号
         * @return {?}
         */
        TaskService.prototype.getActionEntity = /**
         * 获取动作实体进而获取web实现和前后事件
         * @param {?} taskId 任务ID
         * @param {?} action 动作编号
         * @return {?}
         */
            function (taskId, action) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/approvalAction?code=" + action;
                return this.httpSvc.get(url);
            };
        /**
         * 执行加签操作
         * @param context 加签上下文
         */
        /**
         * 执行加签操作
         * @param {?} context 加签上下文
         * @return {?}
         */
        TaskService.prototype.addSign = /**
         * 执行加签操作
         * @param {?} context 加签上下文
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/counterSignAdd";
                return this.httpSvc.post(url, context);
            };
        /**
         * 查询单据信息
         * @param workItemId 工作项Id
         */
        /**
         * 查询单据信息
         * @param {?} workItemId 工作项Id
         * @return {?}
         */
        TaskService.prototype.getAppInfo = /**
         * 查询单据信息
         * @param {?} workItemId 工作项Id
         * @return {?}
         */
            function (workItemId) {
                /** @type {?} */
                var formParUrl = "/api/runtime/wf/v1.0/workItems/" + workItemId + "/formInfo";
                return this.httpSvc.get(formParUrl);
            };
        //#region 查看流程
        /**
         * 基于工作项ID获取bpmnModel
         * @param workitemId 工作项id
         */
        //#region 查看流程
        /**
         * 基于工作项ID获取bpmnModel
         * @param {?} workitemId 工作项id
         * @return {?}
         */
        TaskService.prototype.getBpmnModelbyWorkItemId =
            //#region 查看流程
            /**
             * 基于工作项ID获取bpmnModel
             * @param {?} workitemId 工作项id
             * @return {?}
             */
            function (workitemId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + workitemId + "/bpmnModel";
                return this.httpSvc.get(url);
            };
        /**
         * 基于工作项Id获取所有活动实例
         * @param id taskId
         */
        /**
         * 基于工作项Id获取所有活动实例
         * @param {?} id taskId
         * @return {?}
         */
        TaskService.prototype.getAllActiInstsbyTaskId = /**
         * 基于工作项Id获取所有活动实例
         * @param {?} id taskId
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/activityInstanceSlims?workItemId=" + id;
                return this.httpSvc.get(url);
            };
        /**
         * 基于活动实例Id获取日志
         * @param actInstId 活动实例Id
         */
        /**
         * 基于活动实例Id获取日志
         * @param {?} actInstId 活动实例Id
         * @return {?}
         */
        TaskService.prototype.getActivityInstanceLogs = /**
         * 基于活动实例Id获取日志
         * @param {?} actInstId 活动实例Id
         * @return {?}
         */
            function (actInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/activityInstanceLogs?activityInstanceId=" + actInstId;
                return this.httpSvc.get(url);
            };
        /**
         * 获取审批日志信息
         * @param taskId 工作项Id
         */
        /**
         * 获取审批日志信息
         * @param {?} taskId 工作项Id
         * @return {?}
         */
        TaskService.prototype.getBizlogByTaskId = /**
         * 获取审批日志信息
         * @param {?} taskId 工作项Id
         * @return {?}
         */
            function (taskId) {
                /** @type {?} */
                var logUrl = "/api/runtime/wf/v1.0/workItems/" + taskId + "/fullComments";
                // if (false === environment.production) {
                //     logUrl = '/assets/mock/taskbizlog.json';
                // }
                return this.httpSvc.get(logUrl);
            };
        //#endregion
        /**
         * 获取指派信息
         * @param taskId 工作项Id
         */
        //#endregion
        /**
         * 获取指派信息
         * @param {?} taskId 工作项Id
         * @return {?}
         */
        TaskService.prototype.getAssigneeInfo =
            //#endregion
            /**
             * 获取指派信息
             * @param {?} taskId 工作项Id
             * @return {?}
             */
            function (taskId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/" + taskId + "/assigneeInfo";
                return this.httpSvc.get(url);
            };
        /**
         * 根据流程实例Id批量指派（提交审批或执行审批后指派弹框调用，_后续调整与工作项的一致_）
         * @param assigneesPa 指派参数
         */
        /**
         * 根据流程实例Id批量指派（提交审批或执行审批后指派弹框调用，_后续调整与工作项的一致_）
         * @param {?} assigneesPa 指派参数
         * @return {?}
         */
        TaskService.prototype.assignNextUsersByProcInstId = /**
         * 根据流程实例Id批量指派（提交审批或执行审批后指派弹框调用，_后续调整与工作项的一致_）
         * @param {?} assigneesPa 指派参数
         * @return {?}
         */
            function (assigneesPa) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/assignNextUsers";
                return this.httpSvc.post(url, assigneesPa);
            };
        /**
         * 根据工作项ID指派任务
         * @param assigneesPa 指派参数
         */
        /**
         * 根据工作项ID指派任务
         * @param {?} assigneesPa 指派参数
         * @return {?}
         */
        TaskService.prototype.assignNextUsersByWorkItemId = /**
         * 根据工作项ID指派任务
         * @param {?} assigneesPa 指派参数
         * @return {?}
         */
            function (assigneesPa) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/assignUser";
                return this.httpSvc.post(url, assigneesPa);
            };
        /**
         * 取回
         * @param workItemId task id
         * @param comment comment
         */
        /**
         * 取回
         * @param {?} context
         * @return {?}
         */
        TaskService.prototype.retrieve = /**
         * 取回
         * @param {?} context
         * @return {?}
         */
            function (context) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/retrieve";
                return this.httpSvc.post(url, context);
            };
        /**
         * 任务移交
         * @param taskId 工作项Id
         * @param targetUId 目标用户Id
         */
        /**
         * 任务移交
         * @param {?} transferContext
         * @return {?}
         */
        TaskService.prototype.transfer = /**
         * 任务移交
         * @param {?} transferContext
         * @return {?}
         */
            function (transferContext) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/transfer";
                return this.httpSvc.post(url, transferContext);
            };
        //#region  任务领用
        /**
         * 领用任务
         * @param taskId 工作项Id
         */
        //#region  任务领用
        /**
         * 领用任务
         * @param {?} taskId 工作项Id
         * @return {?}
         */
        TaskService.prototype.claim =
            //#region  任务领用
            /**
             * 领用任务
             * @param {?} taskId 工作项Id
             * @return {?}
             */
            function (taskId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/claim";
                /** @type {?} */
                var options = {
                    workItemId: taskId
                };
                return this.httpSvc.post(url, options);
            };
        /**
         * 取消领用
         * @param taskId 任务Id
         */
        /**
         * 取消领用
         * @param {?} taskId 任务Id
         * @return {?}
         */
        TaskService.prototype.unClaim = /**
         * 取消领用
         * @param {?} taskId 任务Id
         * @return {?}
         */
            function (taskId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/workItems/unclaim";
                /** @type {?} */
                var options = {
                    workItemId: taskId
                };
                return this.httpSvc.post(url, options);
            };
        TaskService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TaskService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService }
            ];
        };
        return TaskService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserService = /** @class */ (function () {
        function UserService(http$$1, httpSvc, sessionSvc) {
            this.http = http$$1;
            this.httpSvc = httpSvc;
            this.sessionSvc = sessionSvc;
        }
        /**
         * @param {?} ids
         * @return {?}
         */
        UserService.prototype.getUsersByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                var _this = this;
                /** @type {?} */
                var pathUrl = '/api/runtime/sys/v1.0/users';
                return rxjs.forkJoin(ids.map(( /**
                 * @param {?} id
                 * @return {?}
                 */function (id) { return _this.http.get(pathUrl + ("/" + id) + "?mode=0002"); }))); //mode用于获取组织全路径
            };
        /**
         * @param {?} searchValue
         * @param {?} index
         * @param {?} size
         * @return {?}
         */
        UserService.prototype.getUserList = /**
         * @param {?} searchValue
         * @param {?} index
         * @param {?} size
         * @return {?}
         */
            function (searchValue, index, size) {
                if (searchValue) {
                    return this.getUser('codeorname', searchValue, index, size);
                }
                else {
                    return this.getUser('', '', index, size);
                }
            };
        /**
         * @private
         * @param {?} field
         * @param {?} value
         * @param {?} index
         * @param {?} size
         * @return {?}
         */
        UserService.prototype.getUser = /**
         * @private
         * @param {?} field
         * @param {?} value
         * @param {?} index
         * @param {?} size
         * @return {?}
         */
            function (field, value, index, size) {
                /** @type {?} */
                var url = "/api/runtime/sys/v1.0/users";
                url += field ?
                    "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"" + field + "\":'" + value + "',\"orderField\":\"order\", \"withAllOrg\": \"true\", \"queryMode\":\"0002\"}" :
                    "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"orderField\":\"order\", \"withAllOrg\": \"true\", \"queryMode\":\"0002\"}";
                return this.httpSvc.get(url);
            };
        /**
         * @param {?} searchValue
         * @param {?} index
         * @param {?} size
         * @param {?=} withAllOrg
         * @param {?=} orgId
         * @return {?}
         */
        UserService.prototype.getUserList_Assign = /**
         * @param {?} searchValue
         * @param {?} index
         * @param {?} size
         * @param {?=} withAllOrg
         * @param {?=} orgId
         * @return {?}
         */
            function (searchValue, index, size, withAllOrg, orgId) {
                if (searchValue) {
                    return this.getUser_Assign('codeorname', searchValue, index, size, withAllOrg, orgId);
                }
                else {
                    return this.getUser_Assign('', '', index, size, withAllOrg, orgId);
                }
            };
        /**
         * @private
         * @param {?} field
         * @param {?} value
         * @param {?} index
         * @param {?} size
         * @param {?} withAllOrg
         * @param {?} orgId
         * @return {?}
         */
        UserService.prototype.getUser_Assign = /**
         * @private
         * @param {?} field
         * @param {?} value
         * @param {?} index
         * @param {?} size
         * @param {?} withAllOrg
         * @param {?} orgId
         * @return {?}
         */
            function (field, value, index, size, withAllOrg, orgId) {
                /** @type {?} */
                var url = "/api/runtime/sys/v1.0/users";
                url += field ?
                    "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"" + field + "\":'" + value + "',\"orderField\":\"order\", \"withAllOrg\": \"true\", \"queryMode\":\"0002\"}" :
                    "?param={\"notGetCurrentUser\":false,\"pageIndex\":" + index + ",\"pageSize\":" + size + ",\"orderField\":\"order\", \"withAllOrg\":'" + withAllOrg + "',\"orgId\":'" + orgId + "', \"queryMode\":\"0002\"}";
                return this.httpSvc.get(url);
            };
        /**
         * 构造Header
         */
        /**
         * 构造Header
         * @private
         * @return {?}
         */
        UserService.prototype.getBatchHeader = /**
         * 构造Header
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sessionId = this.sessionSvc.getCurrentSeesionId();
                /** @type {?} */
                var headers = new http.HttpHeaders().set('SessionId', sessionId).set('Accept', 'application/json');
                // 此处key必须是headers
                return headers;
            };
        /**
         * 转换配置大小写
         * @param jsonObj Object
         */
        /**
         * 转换配置大小写
         * @param {?} jsonObj Object
         * @return {?}
         */
        UserService.prototype.toUpperCase = /**
         * 转换配置大小写
         * @param {?} jsonObj Object
         * @return {?}
         */
            function (jsonObj) {
                var e_1, _a;
                if (typeof (jsonObj) === 'object') {
                    try {
                        for (var _b = __values(Object.keys(jsonObj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var key = _c.value;
                            jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                            delete (jsonObj[key]);
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                return jsonObj;
            };
        UserService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UserService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: cafCommon.HttpService },
                { type: cafCommon.SessionService }
            ];
        };
        return UserService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CompleteContext = /** @class */ (function () {
        function CompleteContext() {
        }
        return CompleteContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserHelperComponent = /** @class */ (function () {
        function UserHelperComponent(i18nService, userSvc, notify) {
            this.i18nService = i18nService;
            this.userSvc = userSvc;
            this.notify = notify;
            this.pageList = [10, 20, 30, 50, 100];
            this.paginationOptions = {
                id: 'WF-Users-DataTable-Pagination',
                currentPage: 1,
                itemsPerPage: 10,
                pageList: this.pageList,
                totalItems: 0
            };
            this.columns = [
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.code') : '编号', field: 'Code', width: 80 },
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.name') : '姓名', field: 'Name', width: 90 },
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.department') : '部门', field: 'OrgName', width: 200 }
            ];
            this.searchValue = null;
            this.userListData = [];
            // 是否允许多选,默认多选
            this.singleSelect = false;
            this.selectedUsers = [];
            this.completed = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        UserHelperComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        UserHelperComponent.prototype.handleOk = /**
         * @return {?}
         */
            function () {
                throw new Error('没有实现，需要子组件实现');
            };
        /**
         * @return {?}
         */
        UserHelperComponent.prototype.handleCancel = /**
         * @return {?}
         */
            function () {
                this.completed.emit(false);
                this.showModal(false);
            };
        /**
         * @param {?} pageSize
         * @return {?}
         */
        UserHelperComponent.prototype.onPageSizeChange = /**
         * @param {?} pageSize
         * @return {?}
         */
            function (pageSize) {
                this.paginationOptions.itemsPerPage = pageSize;
                this.getUserList();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        UserHelperComponent.prototype.onPageChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.paginationOptions.currentPage = event.pageIndex;
                this.getUserList();
            };
        /**
         * @protected
         * @return {?}
         */
        UserHelperComponent.prototype.getUserList = /**
         * @protected
         * @return {?}
         */
            function () {
                var _this = this;
                this.userSvc.getUserList(this.searchValue, this.paginationOptions.currentPage, this.paginationOptions.itemsPerPage)
                    .subscribe(( /**
             * @param {?} re
             * @return {?}
             */function (re) {
                    _this.paginationOptions.totalItems = re.totalCount;
                    _this.userListData = re.data.map(( /**
                     * @param {?} u
                     * @return {?}
                     */function (u) {
                        return ({
                            ID: u.id,
                            Code: u.code,
                            Name: u.name,
                            OrgId: u.sysOrgId,
                            OrgName: u.sysOrgName,
                            Checked: false
                        });
                    }));
                }));
            };
        /**
         * @param {?} event
         * @return {?}
         */
        UserHelperComponent.prototype.search = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.paginationOptions.currentPage = 1;
                this.searchValue = encodeURIComponent(event.value);
                if (event.field === '*') {
                    this.getUserList();
                }
                else if (event.field === 'Name') {
                    this.getUserList();
                }
                else {
                    this.notify.warning('只支持用户名称过滤！');
                }
            };
        /**
         * @protected
         * @param {?} show
         * @return {?}
         */
        UserHelperComponent.prototype.showModal = /**
         * @protected
         * @param {?} show
         * @return {?}
         */
            function (show) {
                if (show) {
                    this.userDialog.show();
                    this.getUserList();
                }
                else {
                    // 临时处理方案
                    if (this.userDialog.beforeClose) {
                        this.userDialog.close();
                    }
                }
            };
        UserHelperComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-user-helper',
                        template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                        styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
                    }] }
        ];
        /** @nocollapse */
        UserHelperComponent.ctorParameters = function () {
            return [
                { type: I18nService, decorators: [{ type: core.Optional }] },
                { type: UserService },
                { type: uiNotify.NotifyService }
            ];
        };
        UserHelperComponent.propDecorators = {
            userTable: [{ type: core.ViewChild, args: ['allUserTable',] }],
            userDialog: [{ type: core.ViewChild, args: ['allUserDialog',] }],
            completed: [{ type: core.Output }]
        };
        return UserHelperComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskSignaddComponent = /** @class */ (function (_super) {
        __extends(TaskSignaddComponent, _super);
        function TaskSignaddComponent(taskSvc, userSvc, notify, i18nService) {
            var _this = _super.call(this, i18nService, userSvc) || this;
            _this.taskSvc = taskSvc;
            _this.userSvc = userSvc;
            _this.notify = notify;
            _this.i18nService = i18nService;
            _this.completed = new core.EventEmitter();
            _this.paginationOptions.id = 'WF-SignAdd-DataTable-Pagination';
            return _this;
        }
        Object.defineProperty(TaskSignaddComponent.prototype, "addsign_context", {
            set: /**
             * @param {?} context
             * @return {?}
             */ function (context) {
                this.selectedUsers = [];
                this.addSignContext = __assign({}, context, { assignees: [] });
                this.showModal(!!this.addSignContext.workItemId);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TaskSignaddComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        TaskSignaddComponent.prototype.handleOk = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectedUsers = this.userTable.selections;
                // 征询
                if (this.addSignContext.action === 'AddSignFront') {
                    // 需要校验选中用户
                    if (!this.selectedUsers || this.selectedUsers.length < 1) {
                        this.notify.info(this.i18nService.getValue('static.addsign.selectConsultant'));
                        return;
                    }
                    this.addSignContext.assignees = this.selectedUsers.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.ID; }));
                    this.taskSvc.addSign(this.addSignContext).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.notify.success(_this.i18nService.getValue('static.addsign.successConsult'));
                        _this.completed.emit(true);
                        _this.showModal(false);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        if (error && error.error && error.error.Message) {
                            _this.notify.error(error.error.Message);
                        }
                    }));
                }
                else {
                    // 加签
                    this.completed.emit(true);
                    this.showModal(false);
                }
            };
        TaskSignaddComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-task-signadd',
                        template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                        styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
                    }] }
        ];
        /** @nocollapse */
        TaskSignaddComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: UserService },
                { type: uiNotify.NotifyService },
                { type: I18nService }
            ];
        };
        TaskSignaddComponent.propDecorators = {
            addsign_context: [{ type: core.Input }],
            completed: [{ type: core.Output }]
        };
        return TaskSignaddComponent;
    }(UserHelperComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WfWorkitemHandleComponent = /** @class */ (function () {
        function WfWorkitemHandleComponent(taskSvc, notify, i18nService) {
            var _this = this;
            this.taskSvc = taskSvc;
            this.notify = notify;
            this.i18nService = i18nService;
            this.completeContext = new CompleteContext();
            // 加签选中人
            this.displayPlaceholder = "请选择"; //跳转的默认显示节点
            //跳转的默认显示节点
            this.hasDefaultBranch = true;
            /**
             * 任务办理动作列表
             */
            this.actions = new core.EventEmitter();
            /**
             * 任务办理完成事件
             */
            this.completed = new core.EventEmitter();
            // 当前选中动作和动作实现
            this.preFuncList = [];
            this.postFuncList = [];
            // 弹框高度设置
            this.height = 420;
            this.actionsTitle = {
                pass: '',
                back: '',
                refuse: '',
                more: '',
                viewLog: '',
                viewFlowChart: '',
                viewBizlog: ''
            };
            /** @type {?} */
            var titles = this.i18nService.getValue('static.taskActions');
            Object.keys(this.actionsTitle).forEach(( /**
             * @param {?} key
             * @return {?}
             */function (key) {
                _this.actionsTitle[key] = titles[key];
            }));
        }
        Object.defineProperty(WfWorkitemHandleComponent.prototype, "workitemId", {
            get: /**
             * @return {?}
             */ function () {
                return this.inWorkitemId;
            },
            /**
             * 任务Id
             */
            set: /**
             * 任务Id
             * @param {?} workitemId
             * @return {?}
             */ function (workitemId) {
                this.inWorkitemId = (workitemId && workitemId.trim());
                if (this.inWorkitemId) {
                    this.refreshActions();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 刷新动作列表
         */
        /**
         * 刷新动作列表
         * @private
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.refreshActions = /**
         * 刷新动作列表
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.taskSvc.getWorkItemActions(this.inWorkitemId).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    // 临时方案：oData不支持自定义function $expand展开，临时序列化处理
                    _this.taskActions = re.map(( /**
                     * @param {?} action
                     * @return {?}
                     */function (action) {
                        action.parameters = JSON.parse(action.parameters);
                        return action;
                    }));
                    _this.taskActions = _this.taskActions.filter(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) {
                        return a.code !== 'ViewBizLog'
                            && a.code !== 'ViewFlowChart'
                            && a.code !== 'ViewExecuteForm';
                    }));
                    _this.actions.emit(_this.taskActions);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.showError(error);
                }));
            };
        /**
         * 动作完成后事件
         * @param result 事件结果
         */
        /**
         * 动作完成后事件
         * @private
         * @param {?=} result 事件结果
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.completedEvt = /**
         * 动作完成后事件
         * @private
         * @param {?=} result 事件结果
         * @return {?}
         */
            function (result) {
                if (result === void 0) {
                    result = true;
                }
                if (result) {
                    this.refreshActions();
                }
                this.completed.emit(result);
            };
        /**
         * 完成审批任务
         * @param actionCode 任务办理动作编号
         * @param comment? 办理意见
         */
        /**
         * 完成审批任务
         * @param {?} actionCode 任务办理动作编号
         * @param {?=} comment
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.complete = /**
         * 完成审批任务
         * @param {?} actionCode 任务办理动作编号
         * @param {?=} comment
         * @return {?}
         */
            function (actionCode, comment) {
                var _this = this;
                switch (actionCode) {
                    case 'AssignUser': { // 指派
                        this.assignee(this.inWorkitemId);
                        break;
                    }
                    case 'Claim': // 领用
                        this.taskSvc.claim(this.inWorkitemId).subscribe(( /**
                         * @param {?} r
                         * @return {?}
                         */function (r) {
                            _this.notify.success(_this.i18nService.getValue('cueWords.successClaim'));
                            _this.refreshActions();
                            _this.completed.emit(false);
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            _this.showError(error);
                        }));
                        break;
                    case 'Unclaim': // 取消领用
                        this.taskSvc.unClaim(this.inWorkitemId).subscribe(( /**
                         * @param {?} r
                         * @return {?}
                         */function (r) {
                            _this.notify.success(_this.i18nService.getValue('cueWords.successUnClaim'));
                            _this.refreshActions();
                            _this.completed.emit(false);
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            _this.showError(error);
                        }));
                        break;
                    case 'Retrieve': // 取回
                        this.taskSvc.retrieve({ workItemId: this.inWorkitemId, comment: comment }).subscribe(( /**
                         * @param {?} r
                         * @return {?}
                         */function (r) {
                            _this.notify.success(_this.i18nService.getValue('cueWords.successRetrieve'));
                            _this.completedEvt();
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            _this.showError(error);
                        }));
                        break;
                    case 'Transfer': { // 移交
                        this.transferContext = {
                            workItemId: this.inWorkitemId,
                            comment: comment
                        };
                        break;
                    }
                    case 'AddSignFront': // 征询
                        this.addSignContext = {
                            workItemId: this.inWorkitemId,
                            action: 'AddSignFront'
                        };
                        break;
                    default:
                        this.executeTask(actionCode, comment);
                }
            };
        /**
         * @param {?} sucess
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.refreshList = /**
         * @param {?} sucess
         * @return {?}
         */
            function (sucess) {
                this.completedEvt(sucess);
            };
        // 弹出加签帮助
        // 弹出加签帮助
        /**
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.runAddSign =
            // 弹出加签帮助
            /**
             * @return {?}
             */
            function () {
                this.addSignContext = {
                    workItemId: this.inWorkitemId,
                    action: 'AddSignBehind'
                };
            };
        // 加签完成
        // 加签完成
        /**
         * @param {?} sucess
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.addSignComplete =
            // 加签完成
            /**
             * @param {?} sucess
             * @return {?}
             */
            function (sucess) {
                if (this.addSignContext.action === 'AddSignFront') {
                    this.refreshList(sucess);
                }
                else {
                    this.completeContext.signAssignees = this.addSignCmp.selectedUsers.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.ID; }));
                    this.selectAddSignees = this.addSignCmp.selectedUsers.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.Name; })).join(',');
                }
            };
        // 审批确认
        // 审批确认
        /**
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.handleOk =
            // 审批确认
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (!this.completeContext.comment) {
                    this.notify.info("请输入审批意见");
                    return;
                }
                if (!this.hasDefaultBranch && this.completeContext.destinationActivityId.length <= 0) { //没有默认分支并且用户没选择跳转节点，不允许提交
                    this.notify.info("请选择目标节点");
                    return;
                }
                this.taskSvc.excuteTask(this.inWorkitemId, this.completeContext).subscribe(( /**
                 * @param {?} cr
                 * @return {?}
                 */function (cr) {
                    _this.commentModal.close();
                    // 完成工作项后，检查是否需要执行后事件
                    _this.excutePostEvent();
                    if (_this.completeContext.conclusionValue === 'Pass') {
                        _this.notify.success(_this.i18nService.getValue('cueWords.successPass'));
                    }
                    else if (_this.completeContext.conclusionValue === 'Back') {
                        _this.notify.success(_this.i18nService.getValue('cueWords.successBack'));
                    }
                    else if (_this.completeContext.conclusionValue === 'Refuse') {
                        _this.notify.success(_this.i18nService.getValue('cueWords.successRefuse'));
                    }
                    else {
                        _this.notify.success(_this.i18nService.getValue('cueWords.success'));
                    }
                    if (cr.needInteraction) {
                        _this.refreshActions(); //通过后弹出指派 add by fpf
                        _this.assigneeInfos = [cr.nextFlowNodes[0].assigneeInfo];
                    }
                    else {
                        _this.completedEvt();
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.showError(error);
                }));
            };
        // 取消操作
        // 取消操作
        /**
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.handleCancel =
            // 取消操作
            /**
             * @return {?}
             */
            function () {
                this.completeContext = new CompleteContext();
                this.commentModal.close();
            };
        // 指派操作
        // 指派操作
        /**
         * @private
         * @param {?} workItemId
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.assignee =
            // 指派操作
            /**
             * @private
             * @param {?} workItemId
             * @return {?}
             */
            function (workItemId) {
                var _this = this;
                this.taskSvc.getAssigneeInfo(workItemId).subscribe(( /**
                 * @param {?} info
                 * @return {?}
                 */function (info) {
                    info.assigneeInfo.workItemId = workItemId; //兼容处理，此处返回的workitemid为null
                    _this.assigneeInfos = [info.assigneeInfo];
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.showError(error);
                }));
            };
        // 重新初始化当前参数
        // 重新初始化当前参数
        /**
         * @private
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.initState =
            // 重新初始化当前参数
            /**
             * @private
             * @return {?}
             */
            function () {
                this.selectAddSignees = '';
                this.destActivities = null;
                this.needAddSign = false;
            };
        /**
         * @private
         * @param {?} actionCode
         * @param {?=} opinion
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.executeTask = /**
         * @private
         * @param {?} actionCode
         * @param {?=} opinion
         * @return {?}
         */
            function (actionCode, opinion) {
                var _this = this;
                this.initState();
                this.completeContext = {
                    workItemId: this.inWorkitemId,
                    conclusionValue: actionCode,
                    comment: '',
                    signAssignees: [],
                    // 加签人员
                    destinationActivityId: '' // 目标节点
                };
                this.completeContext.comment = actionCode === 'Pass' ? this.actionsTitle.pass : '';
                if (opinion) {
                    this.completeContext.comment = opinion;
                }
                /** @type {?} */
                var action = this.taskActions.find(( /**
                 * @param {?} a
                 * @return {?}
                 */function (a) { return a.code === actionCode; }));
                this.taskSvc.getActionEntity(this.workitemId, actionCode).subscribe(( /**
                 * @param {?} act
                 * @return {?}
                 */function (act) {
                    if (!act) { // 审批动作已删除，走完成工作项  TODO: 非完成工作项动作如何处理？
                        _this.showExcuteModal(action);
                    }
                    else {
                        rxjs.from(_this.excuteAction(act)).subscribe(( /**
                         * @return {?}
                         */function () {
                            if (!act.webComponent) {
                                _this.showExcuteModal(action);
                            }
                        }));
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.showError(error);
                }));
            };
        /**
         * 加签，跳转情况
         * @param action 动作
         */
        /**
         * 加签，跳转情况
         * @private
         * @param {?} action 动作
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.showExcuteModal = /**
         * 加签，跳转情况
         * @private
         * @param {?} action 动作
         * @return {?}
         */
            function (action) {
                // 动作参数按照
                if (action && action.parameters) {
                    // 跳转、驳回场景
                    if (action.parameters.SelectTargetAble === 'True' || action.parameters.SelectTargetAble === 'true') {
                        // this.taskSvc.getDestinationScope(this.inWorkitemId, action.code).subscribe((re: { id: string, name: string }[]) => {
                        //   this.destActivities = re;
                        // });
                        this.getDestinationNodes(this.inWorkitemId, action.code);
                    }
                    // 需要加签
                    if (action.parameters.AddSignBehindAble === 'True' || action.parameters.AddSignBehindAble === 'true') {
                        this.needAddSign = true;
                    }
                }
                this.commentModal.show();
            };
        /**
         * @private
         * @param {?} workItemId
         * @param {?} actionCode
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.getDestinationNodes = /**
         * @private
         * @param {?} workItemId
         * @param {?} actionCode
         * @return {?}
         */
            function (workItemId, actionCode) {
                var _this = this;
                /** @type {?} */
                var nextNodes = [];
                this.taskSvc.getDestinationScope(workItemId, actionCode).subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    nextNodes = re;
                    /** @type {?} */
                    var des = re.map(( /**
                     * @param {?} a
                     * @return {?}
                     */function (a) { return a.nodeInfoList; }));
                    /** @type {?} */
                    var list = [];
                    des.forEach(( /**
                     * @param {?} i
                     * @return {?}
                     */function (i) {
                        list = list.concat(i);
                    }));
                    _this.destActivities = list.map(( /**
                     * @param {?} i
                     * @return {?}
                     */function (i) { return ({ id: i.activityDefinitionId, name: i.activityDefinitionName }); }));
                    _this.hasDefaultBranch = _this.hasDefaultBranchFunc(nextNodes);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.showError(error);
                }));
            };
        /**
         * 跳转，返回的数据是否有默认分支
         * 如果返回的没有默认节点，跳转节点又没选的话，不允许提交
         * @param nextNodes
         */
        /**
         * 跳转，返回的数据是否有默认分支
         * 如果返回的没有默认节点，跳转节点又没选的话，不允许提交
         * @private
         * @param {?} nextNodes
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.hasDefaultBranchFunc = /**
         * 跳转，返回的数据是否有默认分支
         * 如果返回的没有默认节点，跳转节点又没选的话，不允许提交
         * @private
         * @param {?} nextNodes
         * @return {?}
         */
            function (nextNodes) {
                for (var i = 0; i < nextNodes.length; i++) {
                    if (nextNodes[i].defaultBranch) {
                        this.displayPlaceholder = nextNodes[i].nodeInfoList[0].activityDefinitionName;
                        return true;
                    }
                }
                return false;
            };
        /**
         * @private
         * @param {?} act
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.excuteAction = /**
         * @private
         * @param {?} act
         * @return {?}
         */
            function (act) {
                return __awaiter(this, void 0, void 0, function () {
                    var _loop_1, this_1, i;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.getActionWebEventsFunc(act)];
                            case 1:
                                _a.sent();
                                if (this.preFuncList && this.preFuncList.length > 0) {
                                    _loop_1 = function (i) {
                                        this_1.preFuncList.filter(( /**
                                         * @param {?} item
                                         * @return {?}
                                         */function (item) { return item.index === i; }))[0].func();
                                    };
                                    this_1 = this;
                                    for (i = 0; i < this.preFuncList.length; i++) {
                                        _loop_1(i);
                                    }
                                }
                                if (this.webCptFunc) {
                                    this.webCptFunc();
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @private
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.excutePostEvent = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.postFuncList && this.postFuncList.length > 0) {
                    var _loop_2 = function (i) {
                        this_2.postFuncList.filter(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item.index === i; }))[0].func();
                    };
                    var this_2 = this;
                    for (var i = 0; i < this.postFuncList.length; i++) {
                        _loop_2(i);
                    }
                }
            };
        /**
         * 获取动作的前后事件和实现方法
         * @param act 动作
         */
        /**
         * 获取动作的前后事件和实现方法
         * @private
         * @param {?} act 动作
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.getActionWebEventsFunc = /**
         * 获取动作的前后事件和实现方法
         * @private
         * @param {?} act 动作
         * @return {?}
         */
            function (act) {
                return __awaiter(this, void 0, void 0, function () {
                    var e_1, _a, e_2, _b, e_3, _c, reqMap, preIndex, postIndex, _d, _e, e, pre, cpt, _f, _g, a, post, reqMap_1, reqMap_1_1, r, m, e_3_1;
                    return __generator(this, function (_h) {
                        switch (_h.label) {
                            case 0:
                                this.preFuncList = [];
                                this.webCptFunc = null;
                                this.postFuncList = [];
                                reqMap = [];
                                preIndex = 0;
                                postIndex = 0;
                                if (act.preEvent && act.preEvent.length > 0) {
                                    try {
                                        for (_d = __values(act.preEvent), _e = _d.next(); !_e.done; _e = _d.next()) {
                                            e = _e.value;
                                            pre = {
                                                event: 'pre',
                                                index: preIndex++,
                                                funcName: e.component.split('#')[1],
                                                req: System.import(e.component.split('#')[0])
                                            };
                                            reqMap.push(pre);
                                        }
                                    }
                                    catch (e_1_1) {
                                        e_1 = { error: e_1_1 };
                                    }
                                    finally {
                                        try {
                                            if (_e && !_e.done && (_a = _d.return))
                                                _a.call(_d);
                                        }
                                        finally {
                                            if (e_1)
                                                throw e_1.error;
                                        }
                                    }
                                }
                                if (act.webComponent) {
                                    cpt = {
                                        event: 'cpt',
                                        index: 0,
                                        funcName: act.webComponent.split('#')[1],
                                        req: System.import(act.webComponent.split('#')[0])
                                    };
                                    reqMap.push(cpt);
                                }
                                if (act.postEvent && act.postEvent.length > 0) {
                                    try {
                                        for (_f = __values(act.postEvent), _g = _f.next(); !_g.done; _g = _f.next()) {
                                            a = _g.value;
                                            post = {
                                                event: 'post',
                                                index: postIndex++,
                                                funcName: a.component.split('#')[1],
                                                req: System.import(a.component.split('#')[0])
                                            };
                                            reqMap.push(post);
                                        }
                                    }
                                    catch (e_2_1) {
                                        e_2 = { error: e_2_1 };
                                    }
                                    finally {
                                        try {
                                            if (_g && !_g.done && (_b = _f.return))
                                                _b.call(_f);
                                        }
                                        finally {
                                            if (e_2)
                                                throw e_2.error;
                                        }
                                    }
                                }
                                _h.label = 1;
                            case 1:
                                _h.trys.push([1, 6, 7, 8]);
                                reqMap_1 = __values(reqMap), reqMap_1_1 = reqMap_1.next();
                                _h.label = 2;
                            case 2:
                                if (!!reqMap_1_1.done)
                                    return [3 /*break*/, 5];
                                r = reqMap_1_1.value;
                                return [4 /*yield*/, r.req];
                            case 3:
                                m = _h.sent();
                                if (r.event === 'pre') {
                                    this.preFuncList.push({
                                        index: r.index,
                                        func: m.default[r.funcName]
                                    });
                                }
                                else if (r.event === 'post') {
                                    this.postFuncList.push({
                                        index: r.index,
                                        func: m.default[r.funcName]
                                    });
                                }
                                else {
                                    this.webCptFunc = m.default[r.funcName];
                                }
                                _h.label = 4;
                            case 4:
                                reqMap_1_1 = reqMap_1.next();
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_3_1 = _h.sent();
                                e_3 = { error: e_3_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (reqMap_1_1 && !reqMap_1_1.done && (_c = reqMap_1.return))
                                        _c.call(reqMap_1);
                                }
                                finally {
                                    if (e_3)
                                        throw e_3.error;
                                }
                                return [7 /*endfinally*/];
                            case 8: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * 显示报错信息
         */
        /**
         * 显示报错信息
         * @private
         * @param {?} error
         * @return {?}
         */
        WfWorkitemHandleComponent.prototype.showError = /**
         * 显示报错信息
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                if (error && error.error && error.error.Message) {
                    this.notify.error(error.error.Message);
                }
                else {
                    this.notify.error(error);
                }
            };
        WfWorkitemHandleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-workitem-handle',
                        template: "<farris-dialog #commentModal [enableScroll]= \"false\" [buttons]=\"buttonRef\" [width]=\"550\" [height]=\"360\" [title]=\"'static.title' | translate\">\r\n    <div style=\"padding: 20px;\">\r\n        <div>\r\n            <wf-comment class=\"w-100\" [(ngModel)]=\"completeContext.comment\" name=\"comment\"\r\n                [placeholder]=\"'static.inputHolder' | translate\"></wf-comment>\r\n        </div>\r\n        <div class=\"d-flex\" style=\"height:28px;overflow: hidden;\">\r\n            <div *ngIf=\"needAddSign\" style=\"flex:1;display: flex;height:28px;overflow: hidden;\" [ngStyle]=\"{'padding-right': destActivities ? '20px' : '0px'}\">\r\n                <label style=\"padding-right: 10px;line-height: 24px;\">{{ 'static.addSignee' | translate }}</label>\r\n                <div class=\"d-flex\" style=\"flex: 1\">\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectAddSignees\" [readOnly]=\"true\" placeholder=\"\u8BF7\u9009\u62E9\"/>\r\n                        <button class=\"k-button k-bare\" type=\"button\" (click)=\"runAddSign()\">\r\n                            <i class=\"f-icon f-icon-lookup\" style=\"color: #bfbfbf; margin: 0 -8px 0 0;\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"destActivities\" style=\"flex:1;display: flex;height:28px;overflow: hidden;\">\r\n                <label style=\"padding-right: 10px;line-height: 24px;\">{{ 'static.selectActivity' | translate }}</label>\r\n                <div class=\"d-flex\" style=\"flex:1\">\r\n                    <farris-combo-list  [data]=\"destActivities\" [textField]=\"'name'\" [valueField]=\"'id'\" [idField]=\"'id'\"\r\n                        [(ngModel)]=\"completeContext.destinationActivityId\" style=\"flex: 1;\" [placeholder] = \"displayPlaceholder\">\r\n                    </farris-combo-list >\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n    <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">{{\r\n            'static.footOk' | translate }}</button>\r\n    <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">{{\r\n            'static.footCancel' | translate }}</button>\r\n</ng-template>\r\n\r\n<!-- \u6307\u6D3E -->\r\n<wf-task-assign [assigneeInfo]=\"assigneeInfos\" (completed)=\"refreshList($event)\"></wf-task-assign>\r\n<!-- \u79FB\u4EA4 -->\r\n<wf-task-transfer [transfer_context]=\"transferContext\" (completed)=\"refreshList($event)\"></wf-task-transfer>\r\n<!-- \u52A0\u7B7E\u3001\u5F81\u8BE2 -->\r\n<wf-task-signadd [addsign_context]=\"addSignContext\" (completed)=\"addSignComplete($event)\"></wf-task-signadd>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        WfWorkitemHandleComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: uiNotify.NotifyService },
                { type: I18nService }
            ];
        };
        WfWorkitemHandleComponent.propDecorators = {
            addSignCmp: [{ type: core.ViewChild, args: [TaskSignaddComponent,] }],
            commentModal: [{ type: core.ViewChild, args: ['commentModal',] }],
            workitemId: [{ type: core.Input }],
            actions: [{ type: core.Output }],
            completed: [{ type: core.Output }]
        };
        return WfWorkitemHandleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskAssignComponent = /** @class */ (function (_super) {
        __extends(TaskAssignComponent, _super);
        function TaskAssignComponent(taskSvc, userSvc, notify, i18nService) {
            var _this = _super.call(this, i18nService, userSvc) || this;
            _this.taskSvc = taskSvc;
            _this.userSvc = userSvc;
            _this.notify = notify;
            _this.i18nService = i18nService;
            _this.completed = new core.EventEmitter();
            _this.paginationOptions.id = 'WF-TaskAss-DataTable-Pagination';
            return _this;
            // this.title = this.i18nService.getValue('static.assignee.title');
        }
        Object.defineProperty(TaskAssignComponent.prototype, "assigneeInfo", {
            // title = '请选择指派用户';
            set: 
            // title = '请选择指派用户';
            /**
             * @param {?} assigneeInfos
             * @return {?}
             */
            function (assigneeInfos) {
                if (assigneeInfos && assigneeInfos.length > 0) {
                    this.assignees = assigneeInfos;
                    this.showModal(true);
                    this.execute();
                }
                else {
                    this.showModal(false);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TaskAssignComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        TaskAssignComponent.prototype.execute = /**
         * @return {?}
         */
            function () {
                this.assigneesPa = {
                    workItemId: this.assignees[0].workItemId,
                    assigneeIds: [],
                    comment: ''
                };
                this.singleSelect = !this.assignees[0].multiSelect;
                this.allowGlobalAssign = this.assignees[0].allowGlobalAssign;
                if (this.assignees[0].assigneeUsers && this.assignees[0].assigneeUsers.length) {
                    this.getAssignedUsers();
                }
                else {
                    if (this.allowGlobalAssign) {
                        this.getUserList();
                    }
                }
            };
        /**
         * @return {?}
         */
        TaskAssignComponent.prototype.getAssignedUsers = /**
         * @return {?}
         */
            function () {
                this.allUserData = this.assignees[0].assigneeUsers.map(( /**
                 * @param {?} user
                 * @return {?}
                 */function (user) {
                    return {
                        ID: user.id,
                        Name: user.name,
                        Code: user.code,
                        OrgId: user.orgId,
                        OrgName: user.orgNamePath
                    };
                }));
                this.userListData = this.allUserData;
            };
        /**
         * @return {?}
         */
        TaskAssignComponent.prototype.handleOk = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectedUsers = this.singleSelect ? [this.userTable.selections] : this.userTable.selections;
                if (!this.selectedUsers || this.selectedUsers.length < 1) {
                    this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
                    return;
                }
                this.assignees.shift();
                this.assigneesPa.assigneeIds = this.selectedUsers.map(( /**
                 * @param {?} user
                 * @return {?}
                 */function (user) { return user.ID; }));
                // 检查指定是否完成，如果完成提交，否则继续指派任务
                if (this.assignees.length > 0) {
                    this.userListData = []; // clear source
                    this.execute();
                }
                else {
                    this.taskSvc.assignNextUsersByWorkItemId(this.assigneesPa).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.showModal(false);
                        _this.notify.success(_this.i18nService.getValue('static.assignee.successAssign'));
                        _this.completed.emit(true);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        if (error && error.error && error.error.Message) {
                            _this.notify.error(error.error.Message);
                        }
                    }));
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskAssignComponent.prototype.search = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (!this.assignees[0].assigneeUsers || !this.assignees[0].assigneeUsers.length) {
                    _super.prototype.search.call(this, event);
                }
                else {
                    this.searchValue = event.value;
                    if (this.searchValue) {
                        this.userListData = this.allUserData.filter(( /**
                         * @param {?} user
                         * @return {?}
                         */function (user) {
                            return (user.Name) && user.Name.includes(_this.searchValue) ||
                                (user.Code) && user.Code.includes(_this.searchValue);
                        }));
                    }
                    else {
                        this.getAssignedUsers();
                    }
                }
            };
        /**
         * @protected
         * @param {?} show
         * @return {?}
         */
        TaskAssignComponent.prototype.showModal = /**
         * @protected
         * @param {?} show
         * @return {?}
         */
            function (show) {
                if (show) {
                    this.userDialog.show();
                }
                else {
                    // 临时处理方案
                    if (this.userDialog.beforeClose) {
                        this.userDialog.close();
                    }
                }
            };
        /**
         * @param {?} pageSize
         * @return {?}
         */
        TaskAssignComponent.prototype.onPageSizeChange = /**
         * @param {?} pageSize
         * @return {?}
         */
            function (pageSize) {
                this.paginationOptions.itemsPerPage = pageSize;
                if (this.allowGlobalAssign) {
                    this.getUserList();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskAssignComponent.prototype.onPageChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.paginationOptions.currentPage = event.pageIndex;
                if (this.allowGlobalAssign) {
                    this.getUserList();
                }
            };
        TaskAssignComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-task-assign',
                        template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                        styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
                    }] }
        ];
        /** @nocollapse */
        TaskAssignComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: UserService },
                { type: uiNotify.NotifyService },
                { type: I18nService }
            ];
        };
        TaskAssignComponent.propDecorators = {
            assigneeInfo: [{ type: core.Input }],
            completed: [{ type: core.Output }]
        };
        return TaskAssignComponent;
    }(UserHelperComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskTransferComponent = /** @class */ (function (_super) {
        __extends(TaskTransferComponent, _super);
        function TaskTransferComponent(taskSvc, userSvc, notify, i18nService) {
            var _this = _super.call(this, i18nService, userSvc) || this;
            _this.taskSvc = taskSvc;
            _this.userSvc = userSvc;
            _this.notify = notify;
            _this.i18nService = i18nService;
            _this.completed = new core.EventEmitter();
            _this.singleSelect = true;
            _this.paginationOptions.id = 'WF-TaskTransfer-DataTable-Pagination';
            return _this;
        }
        Object.defineProperty(TaskTransferComponent.prototype, "transfer_context", {
            set: /**
             * @param {?} context
             * @return {?}
             */ function (context) {
                this.transferContext = __assign({}, context, { assignee: '' });
                this.selectedUsers = [];
                this.showModal(!!this.transferContext.workItemId);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TaskTransferComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        TaskTransferComponent.prototype.handleOk = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectedUsers = this.userTable.selections;
                // 需要校验选中唯一用户
                if (!this.selectedUsers) {
                    this.notify.info(this.i18nService.getValue('static.transfer.selectHandover'));
                    return;
                }
                this.transferContext.assignee = this.selectedUsers['ID'];
                this.taskSvc.transfer(this.transferContext).subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.notify.success(_this.i18nService.getValue('static.transfer.successTransfer'));
                    _this.completed.emit(true);
                    _this.showModal(false);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    if (error && error.error && error.error.Message) {
                        _this.notify.error(error.error.Message);
                    }
                }));
            };
        TaskTransferComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-task-transfer',
                        template: "<farris-dialog #allUserDialog [buttons]=\"buttonRef\" [width]=\"850\" [height]=\"520\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto\" style=\"position:relative;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\" (search)=\"search($event)\"\r\n        [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"handleOk()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"handleCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                        styles: [".my-data-grid .filter-row .search-fields{padding-left:0!important}.my-data-grid .filter-row .search-text{padding-right:0!important}"]
                    }] }
        ];
        /** @nocollapse */
        TaskTransferComponent.ctorParameters = function () {
            return [
                { type: TaskService },
                { type: UserService },
                { type: uiNotify.NotifyService },
                { type: I18nService }
            ];
        };
        TaskTransferComponent.propDecorators = {
            transfer_context: [{ type: core.Input }],
            completed: [{ type: core.Output }]
        };
        return TaskTransferComponent;
    }(UserHelperComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 提交审批客户端交互返回结果
     */
    var /**
     * 提交审批客户端交互返回结果
     */ InteractionResponse = /** @class */ (function () {
        function InteractionResponse() {
        }
        return InteractionResponse;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AssignParticipantComponent = /** @class */ (function () {
        function AssignParticipantComponent(userSvc, notify, taskSvc, loadingService, i18nService) {
            this.userSvc = userSvc;
            this.notify = notify;
            this.taskSvc = taskSvc;
            this.loadingService = loadingService;
            this.i18nService = i18nService;
            this.cls = 'farris-main-area flex-column';
            this.pageList = [10, 20, 30, 50, 100];
            this.paginationOptions = {
                id: 'WF-Users-DataTable-Pagination',
                currentPage: 1,
                itemsPerPage: 10,
                pageList: this.pageList,
                totalItems: 0
            };
            this.subject = new rxjs.Subject();
            this.withAllOrg = true;
            this.orgId = '';
            this.userListData = [];
            // 是否允许多选,默认多选
            this.singleSelect = false;
            this.searchValue = null;
            this.selectedUsers = [];
            this.columns = [
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.code') : '编号', field: 'Code', width: 80 },
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.name') : '姓名', field: 'Name', width: 90 },
                { title: this.i18nService ? this.i18nService.getValue('static.columnName.department') : '组织信息', field: 'OrgName', width: 180 }
            ];
        }
        Object.defineProperty(AssignParticipantComponent.prototype, "assigneeInfo", {
            set: /**
             * @param {?} assigneeInfos
             * @return {?}
             */ function (assigneeInfos) {
                this.assignees = assigneeInfos;
                this.assigneesPa = {
                    procInstId: '',
                    //后端用不到 先为空
                    assigneeInfos: []
                };
                this.getUserList();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AssignParticipantComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        AssignParticipantComponent.prototype.getUserList = /**
         * @return {?}
         */
            function () {
                this.singleSelect = !this.assignees[0].multiSelect;
                if (this.assignees[0].assigneeUsers && this.assignees[0].assigneeUsers.length) {
                    this.getAssignedUsers();
                }
                else {
                    if (this.assignees[0].allowGlobalAssign) {
                        if (this.assignees[0].organizationScope && this.assignees[0].organizationScope.length) {
                            this.withAllOrg = this.assignees[0].organizationScope[0].includeChildren;
                            this.orgId = this.assignees[0].organizationScope[0].id;
                        }
                        this.getAllUserList();
                    }
                    else {
                        this.getAssignedUsers();
                    }
                }
            };
        /**
         * @return {?}
         */
        AssignParticipantComponent.prototype.getAssignedUsers = /**
         * @return {?}
         */
            function () {
                if (this.assignees.length > 0) {
                    this.selectedUsers = this.assignees[0].assigneeUsers.map(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) {
                        return {
                            ID: user.id,
                            Name: user.name,
                            Code: user.code,
                            OrgId: user.orgId,
                            OrgName: user.orgNamePath
                        };
                    })),
                        this.userListData = this.selectedUsers;
                }
            };
        /**
         * @protected
         * @return {?}
         */
        AssignParticipantComponent.prototype.getAllUserList = /**
         * @protected
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var load = this.loadingService.show();
                this.userSvc.getUserList_Assign(this.searchValue, this.paginationOptions.currentPage, this.paginationOptions.itemsPerPage, this.withAllOrg, this.orgId)
                    .subscribe(( /**
             * @param {?} re
             * @return {?}
             */function (re) {
                    load.close();
                    _this.paginationOptions.totalItems = re.totalCount;
                    _this.userListData = re.data.map(( /**
                     * @param {?} u
                     * @return {?}
                     */function (u) {
                        return ({
                            ID: u.id,
                            Code: u.code,
                            Name: u.name,
                            OrgId: u.sysOrgId,
                            OrgName: u.orgNamePath,
                            Checked: false
                        });
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    load.close();
                }));
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AssignParticipantComponent.prototype.search = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                this.searchValue = event.value;
                if (this.assignees[0].assigneeUsers && this.assignees[0].assigneeUsers.length) { //有候选人，在候选人中筛选
                    if (this.searchValue) {
                        this.userListData = this.selectedUsers.filter(( /**
                         * @param {?} user
                         * @return {?}
                         */function (user) {
                            return (user.Name) && user.Name.includes(_this.searchValue) ||
                                (user.Code) && user.Code.includes(_this.searchValue);
                        }));
                    }
                    else {
                        this.getAssignedUsers();
                    }
                }
                else { //无候选人，在全员中选择
                    this.paginationOptions.currentPage = 1;
                    this.getUserList();
                }
            };
        /**
         * @return {?}
         */
        AssignParticipantComponent.prototype.btnCancelClick = /**
         * @return {?}
         */
            function () {
                this.notify.info(this.i18nService ? this.i18nService.getValue('static.assignee.cancelAssign') : '已取消操作。');
                this.subject.next(null);
            };
        /**
         * @return {?}
         */
        AssignParticipantComponent.prototype.btnOKClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectedUsers = this.singleSelect ? [this.userTable.selections] : this.userTable.selections;
                if (!this.selectedUsers || this.selectedUsers.length < 1) {
                    this.notify.warning(this.i18nService ? this.i18nService.getValue('static.assignee.noAssignee') : '请至少选择一个审批人。');
                    return;
                }
                // 添加已选人员
                /** @type {?} */
                var assigneeInfo = this.assignees.shift();
                assigneeInfo.assigneeIds = this.selectedUsers.map(( /**
                 * @param {?} user
                 * @return {?}
                 */function (user) { return user.ID; }));
                this.assigneesPa.assigneeInfos.push(assigneeInfo);
                // 检查指定是否完成，如果完成提交，否则继续指派任务
                if (this.assignees.length > 0) {
                    this.userListData = []; // clear source
                    this.getUserList();
                }
                else {
                    /** @type {?} */
                    var load_1 = this.loadingService.show();
                    this.taskSvc.assignNextUsersByProcInstId(this.assigneesPa).subscribe(( /**
                     * @return {?}
                     */function () {
                        load_1.close();
                        _this.notify.success(_this.i18nService ? _this.i18nService.getValue('static.assignee.successAssign') : '操作成功。');
                        _this.subject.next(_this.assigneesPa);
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.notify.error(_this.i18nService ? _this.i18nService.getValue('static.assignee.errorAssign') : '操作失败，请联系管理员查看原因！');
                        _this.subject.error(_this.i18nService ? _this.i18nService.getValue('static.assignee.errorAssign') : '操作失败，请联系管理员查看原因！');
                    }));
                }
            };
        /**
         * @return {?}
         */
        AssignParticipantComponent.prototype.subscribe = /**
         * @return {?}
         */
            function () {
                return this.subject.asObservable();
            };
        /**
         * @param {?} pageSize
         * @return {?}
         */
        AssignParticipantComponent.prototype.onPageSizeChange = /**
         * @param {?} pageSize
         * @return {?}
         */
            function (pageSize) {
                this.paginationOptions.itemsPerPage = pageSize;
                this.getUserList();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AssignParticipantComponent.prototype.onPageChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.paginationOptions.currentPage = event.pageIndex;
                this.getUserList();
            };
        AssignParticipantComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-assign-participant',
                        template: "<div class=\"modal-body farris-overflow-hidden f-utils-flex-column\" style=\"background-color: white;\">\r\n  <div class=\"d-flex flex-column my-data-grid h-100\" style=\"padding: 0 14px;\">\r\n    <div class=\"flex-auto h-100\" style=\"position:relative; overflow: auto;\">\r\n      <farris-datatable #allUserTable [columns]=\"columns\" [data]=\"userListData | paginate: paginationOptions\"\r\n        [showFilterBar]='true' [singleSelect]=\"singleSelect\" [idField]=\"'ID'\" [remote]=\"'server'\"\r\n        (search)=\"search($event)\" [pagination]='false'></farris-datatable>\r\n    </div>\r\n    <div style=\"position:relative;\">\r\n      <pagination-controls [id]=\"paginationOptions.id\" [previousLabel]=\"' '\" [nextLabel]=\"' '\" [showPageList]=\"false\"\r\n        (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </pagination-controls>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer flex-shrink-0\">\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"btnOKClick()\">{{('static.footOk' | translate)?('static.footOk' | translate):'\u786E\u5B9A' }}</button>\r\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"btnCancelClick()\">{{('static.footCancel' | translate)?('static.footCancel' | translate):'\u53D6\u6D88' }}</button>\r\n</div>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AssignParticipantComponent.ctorParameters = function () {
            return [
                { type: UserService },
                { type: uiNotify.NotifyService },
                { type: TaskService },
                { type: uiLoading.LoadingService },
                { type: I18nService, decorators: [{ type: core.Optional }] }
            ];
        };
        AssignParticipantComponent.propDecorators = {
            cls: [{ type: core.HostBinding, args: ['class',] }],
            assigneeInfo: [{ type: core.Input }],
            userTable: [{ type: core.ViewChild, args: ['allUserTable',] }]
        };
        return AssignParticipantComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 提交审批客户端交互服务
     */
    var WFSubmiteService = /** @class */ (function () {
        function WFSubmiteService(injector, resolver, modalService, i18nService) {
            this.injector = injector;
            this.resolver = resolver;
            this.modalService = modalService;
            this.i18nService = i18nService;
        }
        /**
         * 客户端交互处理服务端返回结果
         * @param excutionRe 提交审批服务器端返回结果
         * @param handler 处理结果回调页面
         */
        /**
         * 客户端交互处理服务端返回结果
         * @param {?} excutionRe 提交审批服务器端返回结果
         * @param {?} handler 处理结果回调页面
         * @return {?}
         */
        WFSubmiteService.prototype.excute = /**
         * 客户端交互处理服务端返回结果
         * @param {?} excutionRe 提交审批服务器端返回结果
         * @param {?} handler 处理结果回调页面
         * @return {?}
         */
            function (excutionRe, handler) {
                /** @type {?} */
                var response = new InteractionResponse();
                // 无需交互
                if (excutionRe.needInteraction === false) {
                    response.message = '无需交互';
                    handler(response);
                    return;
                }
                // 选择要提交的流程
                if (excutionRe.procDefs && excutionRe.procDefs.length > 1) {
                    this.selectProcess(excutionRe.procDefs, handler);
                    return;
                }
                // 指定下一步参与者
                if (excutionRe.nextFlowNodes[0].assigneeInfo) {
                    this.assignee([excutionRe.nextFlowNodes[0].assigneeInfo], handler);
                    return;
                }
            };
        /**
         * 处理选择流程结果
         */
        /**
         * 处理选择流程结果
         * @private
         * @param {?} prcesses
         * @param {?} handler
         * @return {?}
         */
        WFSubmiteService.prototype.selectProcess = /**
         * 处理选择流程结果
         * @private
         * @param {?} prcesses
         * @param {?} handler
         * @return {?}
         */
            function (prcesses, handler) {
                /** @type {?} */
                var response = new InteractionResponse();
                /** @type {?} */
                var modalConfig = {
                    title: this.i18nService ? this.i18nService.getValue('static.submit.selectProcess') : '流程选择',
                    width: 520,
                    height: 290,
                    showButtons: false,
                    showMaxButton: false,
                    beforeClose: ( /**
                     * @param {?} modelRef
                     * @return {?}
                     */function (modelRef) {
                        handler(response);
                        return rxjs.of(true);
                    })
                };
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.gridData = prcesses;
                /** @type {?} */
                var dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.subscribe().subscribe(( /**
                 * @param {?} val
                 * @return {?}
                 */function (val) {
                    response.processDefinitionId = val;
                    dialog.close();
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    response.message = err;
                    dialog.close();
                }));
            };
        /**
         * 处理指定下一步人员结果
         */
        /**
         * 处理指定下一步人员结果
         * @private
         * @param {?} assigneeInfos
         * @param {?=} handler
         * @return {?}
         */
        WFSubmiteService.prototype.assignee = /**
         * 处理指定下一步人员结果
         * @private
         * @param {?} assigneeInfos
         * @param {?=} handler
         * @return {?}
         */
            function (assigneeInfos, handler) {
                /** @type {?} */
                var response = new InteractionResponse();
                /** @type {?} */
                var modalConfig = {
                    title: this.i18nService ? this.i18nService.getValue('static.assignee.title') : '请选择操作用户',
                    width: 850,
                    height: 520,
                    showMaxButton: false,
                    showButtons: false,
                    beforeClose: ( /**
                     * @param {?} modelRef
                     * @return {?}
                     */function (modelRef) {
                        handler(response);
                        return rxjs.of(true);
                    })
                };
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(AssignParticipantComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.assigneeInfo = assigneeInfos;
                /** @type {?} */
                var dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.subscribe().subscribe(( /**
                 * @param {?} val
                 * @return {?}
                 */function (val) {
                    dialog.close();
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    dialog.close();
                }));
            };
        WFSubmiteService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WFSubmiteService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ComponentFactoryResolver },
                { type: uiModal.BsModalService },
                { type: I18nService, decorators: [{ type: core.Optional }] }
            ];
        };
        return WFSubmiteService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(i18nService) {
            this.i18nService = i18nService;
        }
        /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
        TranslatePipe.prototype.transform = /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
            function (name, defaultVal) {
                if (defaultVal === void 0) {
                    defaultVal = '';
                }
                if (this.i18nService) {
                    /** @type {?} */
                    var r = this.i18nService.getValue(name);
                    return r ? r : defaultVal;
                }
                else {
                    return defaultVal;
                }
            };
        TranslatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'translate' },] }
        ];
        /** @nocollapse */
        TranslatePipe.ctorParameters = function () {
            return [
                { type: I18nService, decorators: [{ type: core.Optional }] }
            ];
        };
        return TranslatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFRuntimeModule = /** @class */ (function () {
        function WFRuntimeModule() {
        }
        WFRuntimeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            http.HttpClientModule,
                            uiDatatable.DataTableModule,
                            uiDialog.FarrisDialogModule,
                            uiPagination.PaginationModule,
                            uiNotify.NotifyModule,
                            uiMessager.MessagerModule.forRoot({
                                width: 500
                            }),
                            uiDatagrid.DatagridModule,
                            uiComment.WFCommentModule,
                            uiComboList.ComboListModule,
                            uiLoading.LoadingModule
                        ],
                        declarations: [
                            ProcessSelectorComponent,
                            WfWorkitemHandleComponent,
                            UserHelperComponent,
                            TaskAssignComponent,
                            TaskSignaddComponent,
                            TaskTransferComponent,
                            AssignParticipantComponent,
                            TranslatePipe
                        ],
                        providers: [
                            cafCommon.HttpService,
                            TaskService,
                            UserService,
                            cafCommon.SessionService,
                            WFSubmiteService,
                            I18nService,
                        ],
                        exports: [
                            ProcessSelectorComponent,
                            WfWorkitemHandleComponent,
                            UserHelperComponent,
                            TaskAssignComponent,
                            TaskSignaddComponent,
                            TaskTransferComponent,
                            AssignParticipantComponent,
                        ],
                        entryComponents: [
                            ProcessSelectorComponent,
                            WfWorkitemHandleComponent,
                            UserHelperComponent,
                            TaskAssignComponent,
                            TaskSignaddComponent,
                            TaskTransferComponent,
                            AssignParticipantComponent
                        ]
                    },] }
        ];
        return WFRuntimeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 提交审批操作返回结果
     */
    var /**
     * 提交审批操作返回结果
     */ ExcutionResponse = /** @class */ (function () {
        function ExcutionResponse() {
        }
        return ExcutionResponse;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 审批动作定义
     */
    var WorkitemAction = /** @class */ (function () {
        function WorkitemAction() {
        }
        return WorkitemAction;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.WFRuntimeModule = WFRuntimeModule;
    exports.InteractionResponse = InteractionResponse;
    exports.ExcutionResponse = ExcutionResponse;
    exports.WorkitemAction = WorkitemAction;
    exports.WFSubmiteService = WFSubmiteService;
    exports.WfWorkitemHandleComponent = WfWorkitemHandleComponent;
    exports.TaskAssignComponent = TaskAssignComponent;
    exports.TaskSignaddComponent = TaskSignaddComponent;
    exports.TaskTransferComponent = TaskTransferComponent;
    exports.UserHelperComponent = UserHelperComponent;
    exports.TaskService = TaskService;
    exports.UserService = UserService;
    exports.I18nService = I18nService;
    exports.TranslatePipe = TranslatePipe;
    exports.ProcessSelectorComponent = ProcessSelectorComponent;
    exports.ɵa = AssignParticipantComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-wf-rtdevkit.umd.js.map