/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
import { translate } from './service/i18n/index';
import { WfApprovalLogsComponent } from './wf-approval-logs.component';
export class WfApprovalLogsService {
    //弹框
    /**
     * @param {?} msgService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     */
    constructor(msgService, injector, resolver, modalService) {
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
    }
    /**
     * 根据流程实例id打开审批记录弹框
     * @param {?} procInstId 流程实例id
     * @return {?}
     */
    showByProcInstId(procInstId) {
        if (!procInstId) {
            console.error("查看审批记录，procInstId参数为空");
            return;
        }
        /** @type {?} */
        const parameters = {
            procInstId: procInstId
        };
        this.showApprovalLog(parameters);
    }
    /**
     * 根据表单数据id打开审批记录弹框
     * @param {?} dataId 表单数据id
     * @return {?}
     */
    showByDataId(dataId) {
        if (!dataId) {
            console.error("查看审批记录，dataId参数为空");
            return;
        }
        /** @type {?} */
        const parameters = {
            dataId: dataId
        };
        this.showApprovalLog(parameters);
    }
    /**
     * 查看审批记录
     * @param {?} parameters
     * @return {?}
     */
    showApprovalLog(parameters) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.DataId = parameters.dataId;
        compRef.instance.Style = parameters.style;
        compRef.instance.ProcInstId = parameters.procInstId;
        compRef.instance.IncludeAdminOperate = parameters.includeAdminOperate;
        compRef.instance.IncludeHistory = parameters.includeHistory;
        compRef.instance.fill();
        /** @type {?} */
        const modalConfig = {
            title: this.getI18nValue('static.approvalLogs.title'),
            width: parameters.style == 'datagrid' ? 960 : 520,
            height: parameters.style == 'datagrid' ? 500 : 520,
            showButtons: parameters.style == 'datagrid' ? true : false,
            buttons: compRef.instance.taskDialogFooter,
            beforeClose: this.beforeClose,
        };
        this.dialog = this.modalService.show(compRef, modalConfig);
        this.addEventListener();
    }
    /**
     * 获取多语
     * @private
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    }
    //SPA模式下，点击附件，窗口关闭
    /**
     * @private
     * @return {?}
     */
    addEventListener() {
        window.addEventListener("message", (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (window.document.location.origin.search(event.origin) > -1) {
                if (event.data == 'TaskCloseLogDialog' && this.dialog) {
                    this.dialog.close();
                }
            }
        }), false);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    beforeClose(event) {
        window.removeEventListener("message", (/**
         * @return {?}
         */
        () => { }));
        return of(true);
    }
}
WfApprovalLogsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WfApprovalLogsService.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];
if (false) {
    /** @type {?} */
    WfApprovalLogsService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,