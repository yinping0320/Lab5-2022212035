/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { translate } from './i18n/index';
export class TranslatePipe {
    constructor() { }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(name, defaultVal = '') {
        /** @type {?} */
        const r = this.getI18nValue(name);
        return r ? r : defaultVal;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'translate' },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLWFwcHJvdmFsLWxvZ3MvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS90cmFuc2xhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUd6QyxNQUFNLE9BQU8sYUFBYTtJQUV0QixnQkFDSSxDQUFDOzs7Ozs7SUFFTCxTQUFTLENBQUMsSUFBUyxFQUFFLFVBQVUsR0FBRyxFQUFFOztjQUMxQixDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDakMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLElBQVk7UUFDckIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUFFLE9BQU8sRUFBRSxDQUFDO1NBQUU7O1lBQ3JCLFdBQVcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQzs7WUFDbEQsUUFBUSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDOztZQUNyRSxTQUFTLEdBQUcsRUFBRTtRQUNsQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDNUIsU0FBUyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0wsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTTs7Ozs7WUFBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDOUMsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2pCO3FCQUFNO29CQUNMLE9BQU8sSUFBSSxDQUFDO2lCQUNiO1lBQ0gsQ0FBQyxHQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7WUE1Qk4sSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAnLi9pMThuL2luZGV4JztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ3RyYW5zbGF0ZScgfSlcclxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICkgeyB9XHJcblxyXG4gICAgdHJhbnNmb3JtKG5hbWU6IGFueSwgZGVmYXVsdFZhbCA9ICcnKTogYW55IHtcclxuICAgICAgICBjb25zdCByID0gdGhpcy5nZXRJMThuVmFsdWUobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHIgPyByIDogZGVmYXVsdFZhbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJMThuVmFsdWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCFuYW1lKSB7IHJldHVybiAnJzsgfVxyXG4gICAgICAgIHZhciBkZWZhdWx0TGFuZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKTtcclxuICAgICAgICB2YXIgbGFuZ0RhdGEgPSBkZWZhdWx0TGFuZyA/IHRyYW5zbGF0ZVtkZWZhdWx0TGFuZ10gOiB0cmFuc2xhdGVbJ3poLUNIUyddO1xyXG4gICAgICAgIGxldCByZXN1bHRWYWwgPSAnJztcclxuICAgICAgICBpZiAobmFtZS5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgICAgICByZXN1bHRWYWwgPSBsYW5nRGF0YVtuYW1lXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzdWx0VmFsID0gbmFtZS5zcGxpdCgnLicpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgbGFuZ0RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0VmFsO1xyXG4gICAgICB9XHJcbn1cclxuIl19