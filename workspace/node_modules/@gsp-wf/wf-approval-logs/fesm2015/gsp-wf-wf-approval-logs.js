import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
import { Component, Input, HostBinding, ViewChild, Injectable, Injector, ComponentFactoryResolver, Pipe, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FileListModule } from '@gsp-svc/file-viewer';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const en = {
    static: {
        approvalLogs: {
            title: 'Approval Logs',
            approvalOpinion: 'Approval opinion',
            startTime: 'StartTime',
            endTime: 'EndTime',
            processTime: 'ProcessTime',
            todo: 'Todo',
            done: 'Done',
            undo: 'Undo',
            toAssign: 'To assign',
            toRead: 'To read',
            processNotFound: 'process instance id is null',
            workItemNotFound: 'work item id is null',
            attachment: 'attachment',
            noResolvedUser: 'No Resolved User',
            terminal: 'From',
            web: 'Web',
            mobile: 'Mobile',
            submit: 'Submit'
        },
        flowchart: {
            title: 'Flow Chart',
            processNotFound: 'process instance id is null'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHS = {
    static: {
        approvalLogs: {
            title: '审批记录',
            approvalOpinion: '审批意见',
            startTime: '接收时间',
            endTime: '处理时间',
            processTime: '处理时长',
            todo: '待办理',
            done: '已办理',
            undo: '未分配',
            toAssign: '未指派',
            toRead: '待阅',
            processNotFound: '流程实例ID为空',
            workItemNotFound: '工作项ID为空',
            attachment: '附件',
            noResolvedUser: '未解析出用户',
            terminal: '来自',
            web: '电脑端',
            mobile: '移动端',
            submit: '已提交'
        },
        flowchart: {
            title: '查看流程',
            processNotFound: '流程实例ID为空'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHT = {
    static: {
        approvalLogs: {
            title: '審批記錄',
            approvalOpinion: '審批意見',
            startTime: '接收時間',
            endTime: '處理時間',
            processTime: '處理時長',
            todo: '待辦理',
            done: '已辦理',
            undo: '未分配',
            toAssign: '未指派',
            toRead: '待阅',
            processNotFound: '流程實例ID為空',
            workItemNotFound: '工作項ID為空',
            attachment: '附件',
            noResolvedUser: '未解析出用戶',
            terminal: '來自',
            web: '電腦端',
            mobile: '移動端',
            submit: '已提交'
        },
        flowchart: {
            title: '查看流程',
            processNotFound: '流程實例ID為空'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const translate = {
    'zh-CHS': zh_CHS,
    'en': en,
    'zh-CHT': zh_CHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfApprovalLogsComponent {
    //样式，card 卡片版；datagrid 表格版
    constructor() {
        // 流程实例id
        this.ifForecast = false; // 是否预测日志
        //查看日志类型
        this.cls = ''; // 弹框显示时，增加样式
        // 弹框显示时，增加样式
        this.ShowHeader = false; //是否显示日志头部
        //是否显示日志头部
        this.ShowViewProcess = false; //是否显示查看流程按钮
        //是否显示查看流程按钮
        this.OnlyIncludeCurrentProcInst = false; //是否只包含当前流程的日志
        //是否只包含当前流程的日志
        this.IncludeAdminOperate = false; //是否显示操作日志
        //是否显示操作日志
        this.IncludeHistory = false; //是否包含历史日志
    }
    //日志容器
    /**
     * @param {?} dataId
     * @return {?}
     */
    set DataId(dataId) {
        if (dataId) {
            this.dataId = dataId;
            this.dataIdSubStr = dataId.substring(0, 5);
            this.getTaskLogs();
        }
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    set ProcInstId(procInstId) {
        if (procInstId) {
            this.procInstId = procInstId;
            this.getTaskLogs();
        }
    }
    /**
     * @param {?} actDefId
     * @return {?}
     */
    set ActivityDefinitionId(actDefId) {
        if (actDefId) {
            this.getTaskLogs(actDefId);
        }
    }
    /**
     * @param {?} ifForecast
     * @return {?}
     */
    set IfForecast(ifForecast) {
        if (ifForecast) {
            this.ifForecast = ifForecast == 'true' ? true : false;
            this.getTaskLogs();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    set Type(type) {
        if ((type == 'process' || type == 'activity') && this.type != type) {
            this.type = type;
            if (type === 'process') { // type = 'process'查看流程日志；type = 'activity'，查看节点日志 sequence，转移线
                this.getTaskLogs();
            }
        }
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    set processForecastPayload(payload) {
        if (payload) {
            this.ifForecast = true;
            this.getTaskLogs('', payload);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.getTaskLogs();
    }
    /**
     * @return {?}
     */
    fill() {
        this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all px-4 py-3';
    }
    /**
     * @private
     * @param {?=} actDefId
     * @param {?=} wfForecastPayload
     * @return {?}
     */
    getTaskLogs(actDefId, wfForecastPayload) {
        if (this.dataId || this.procInstId || wfForecastPayload) {
            System.import('/platform/runtime/wf/webapp/mobiletaskcenter/taskComment.js' + '?v=20230602').then((/**
             * @return {?}
             */
            () => {
                if (this.dataId) {
                    this.logContainer = window.document.querySelector('.dataId' + this.dataIdSubStr);
                }
                else {
                    this.logContainer = window.document.querySelector('.procInstId' + this.procInstId);
                }
                /** @type {?} */
                let payload = {
                    bizInstId: this.dataId,
                    processInstanceId: this.procInstId,
                    activityDefinitionId: actDefId,
                    container: this.logContainer,
                    terminal: 'web',
                    typeId: 'wf',
                    ifForecast: this.ifForecast,
                    showHeader: this.ShowHeader,
                    showViewProcess: this.ShowViewProcess,
                    wfForecastPayload: wfForecastPayload,
                    onlyIncludeCurrentProcInst: this.OnlyIncludeCurrentProcInst,
                    isIncludeHistory: this.IncludeHistory,
                    includeRetrieve: this.IncludeAdminOperate,
                    includeAdminOperate: this.IncludeAdminOperate,
                };
                if (this.Style && this.Style == 'datagrid') { //表格版
                    ((/** @type {?} */ (window))).gspTaskCenterBizLog.ApprovalLogUtil.getWebHtml(payload).then((/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => { }));
                }
                else { //卡片版
                    ((/** @type {?} */ (window))).gspTaskCenterBizLog.ApprovalLogUtil.getWebLogsHtml(payload).then((/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => { }));
                }
            }));
        }
    }
    /**
     * 是否显示操作日志
     * @return {?}
     */
    ifShowOperateLogChange() {
        this.getTaskLogs();
    }
    /**
     * 国际化
     * @param {?} code
     * @return {?}
     */
    i18nTranslate(code) {
        /** @type {?} */
        var result;
        /** @type {?} */
        const supportLanguage = ["zh-CHS", "zh-CHT", "en"];
        /** @type {?} */
        const curLanguage = localStorage.getItem("languageCode");
        /** @type {?} */
        const translate = {
            "zh-CHS": {
                showOperateLog: "显示操作日志"
            },
            "zh-CHT": {
                showOperateLog: "顯示操作日誌"
            },
            en: {
                showOperateLog: "Show operate log"
            },
        };
        if (curLanguage && supportLanguage.indexOf(curLanguage) > -1) {
            result = translate[curLanguage][code];
        }
        else {
            result = translate["zh-CHS"][code];
        }
        return result;
    }
}
WfApprovalLogsComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-approval-logs',
                template: "<div\r\n  [class]=\"dataId ? 'dataId' + dataIdSubStr : 'procInstId' + procInstId\"\r\n  style=\"width: 100%; height: 100%; overflow: auto\"\r\n></div>\r\n\r\n<ng-template #taskDialogFooter>\r\n  <div style=\"display: flex; flex-grow: 1\">\r\n    <div class=\"custom-control custom-checkbox custom-control-inline\">\r\n      <input\r\n        type=\"checkbox\"\r\n        class=\"custom-control-input\"\r\n        [(ngModel)]=\"IncludeAdminOperate\"\r\n        (ngModelChange)=\"ifShowOperateLogChange()\"\r\n        id=\"taskShowOperateLog\"\r\n        name=\"taskShowOperateLog\"\r\n      />\r\n      <label class=\"custom-control-label\" for=\"taskShowOperateLog\">\r\n        {{ i18nTranslate(\"showOperateLog\") }}\r\n      </label>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                styles: [".approval-log-background{width:100%;background:#f9f9f9;padding:16px 14px;border-radius:4px}.log-activity-name{font-size:14px}.receive-time{font-size:12px;-moz-columns:#565656;columns:#565656;padding-left:40px;white-space:nowrap;color:#a1a1a1}.log-creator-name{font-size:14px;color:#4297fa;text-align:left}.log-action-name-do{font-size:12px;color:#fff;margin-left:40px;margin-right:16px;border-radius:10px;padding:2px 8px;background:#59a1ff;white-space:nowrap;float:right}.log-action-name-todo{font-size:12px;color:#fff;margin-left:40px;margin-right:16px;border-radius:10px;padding:2px 8px;background:#f59c24;white-space:nowrap;float:right}.log-action-name-undo{font-size:12px;color:#fff;margin-left:40px;margin-right:16px;border-radius:10px;padding:2px 8px;background:#5ac1c3;white-space:nowrap;float:right}.work-item-state-done{font-size:13px;border-radius:2px;padding:0 10px;background:#f6faff;margin-left:20px;color:#5f637a;border:1px solid #e6e6e6}.timeline-item{position:relative;padding:0 0 14px 10px;margin:0;font-size:14px;list-style:none}.timeline-item-tail{position:absolute;top:.75em;left:7px;height:100%;border-left:2px dashed #e8e8e8}.timeline-item-head-blue{position:absolute;width:16px;height:16px;background-color:#388fff;border:4px solid #bdd9ff;border-radius:100px;left:0;top:10px}.timeline-item-head-green{position:absolute;width:16px;height:16px;background-color:#5ac1c3;border:4px solid #7fffd4;border-radius:100px;left:0;top:10px}.timeline-item-head-yellow{position:absolute;width:16px;height:16px;background-color:#f59c24;border:4px solid #fbd7a7;border-radius:100px;left:0;top:10px}.timeline-item-content{position:relative;top:-6px;margin:0 0 0 18px}.user-avatar{height:30px;width:30px;border-radius:50%}li{list-style:none}.wf-docFile{flex-shrink:1;flex-grow:1;flex-basis:0;display:flex;flex-direction:row;align-items:flex-start;border-top:1px solid #f8f9fa;border-left:1px solid #f8f9fa}.wf-docFileIcon{width:20px;height:20px;line-height:20px;text-align:center;overflow:hidden;white-space:nowrap;padding:2px}.wf-docFileInfo{flex-shrink:1;flex-grow:1;flex-basis:0;padding:2px 6px 0 0;margin-left:0}.wf-docFileSize{font-size:11px;color:#888}.wf-doc-delete{margin:auto;font-size:18px;color:#f8f9fa}.attachment-delete:hover{color:#4297fa}.approval-log-message{font-size:14px;padding:10px 0 10px 40px}.approval-log-signature{padding-left:40px;display:flex;justify-content:flex-end}.approval-log-user-name{display:flex;align-items:center;justify-content:space-between;padding-top:14px}.log-attachment-array{padding-top:10px;padding-left:40px}.log-attachment-file-name{font-size:12px;color:#4297fa;float:left;cursor:pointer;margin-left:5px}"]
            }] }
];
/** @nocollapse */
WfApprovalLogsComponent.ctorParameters = () => [];
WfApprovalLogsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    ShowHeader: [{ type: Input }],
    ShowViewProcess: [{ type: Input }],
    OnlyIncludeCurrentProcInst: [{ type: Input }],
    IncludeAdminOperate: [{ type: Input }],
    IncludeHistory: [{ type: Input }],
    taskDialogFooter: [{ type: ViewChild, args: ['taskDialogFooter',] }],
    DataId: [{ type: Input }],
    ProcInstId: [{ type: Input }],
    ActivityDefinitionId: [{ type: Input }],
    IfForecast: [{ type: Input }],
    Type: [{ type: Input }],
    processForecastPayload: [{ type: Input }],
    Style: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfApprovalLogsService {
    //弹框
    /**
     * @param {?} msgService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     */
    constructor(msgService, injector, resolver, modalService) {
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
    }
    /**
     * 根据流程实例id打开审批记录弹框
     * @param {?} procInstId 流程实例id
     * @return {?}
     */
    showByProcInstId(procInstId) {
        if (!procInstId) {
            console.error("查看审批记录，procInstId参数为空");
            return;
        }
        /** @type {?} */
        const parameters = {
            procInstId: procInstId
        };
        this.showApprovalLog(parameters);
    }
    /**
     * 根据表单数据id打开审批记录弹框
     * @param {?} dataId 表单数据id
     * @return {?}
     */
    showByDataId(dataId) {
        if (!dataId) {
            console.error("查看审批记录，dataId参数为空");
            return;
        }
        /** @type {?} */
        const parameters = {
            dataId: dataId
        };
        this.showApprovalLog(parameters);
    }
    /**
     * 查看审批记录
     * @param {?} parameters
     * @return {?}
     */
    showApprovalLog(parameters) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.DataId = parameters.dataId;
        compRef.instance.Style = parameters.style;
        compRef.instance.ProcInstId = parameters.procInstId;
        compRef.instance.IncludeAdminOperate = parameters.includeAdminOperate;
        compRef.instance.IncludeHistory = parameters.includeHistory;
        compRef.instance.fill();
        /** @type {?} */
        const modalConfig = {
            title: this.getI18nValue('static.approvalLogs.title'),
            width: parameters.style == 'datagrid' ? 960 : 520,
            height: parameters.style == 'datagrid' ? 500 : 520,
            showButtons: parameters.style == 'datagrid' ? true : false,
            buttons: compRef.instance.taskDialogFooter,
            beforeClose: this.beforeClose,
        };
        this.dialog = this.modalService.show(compRef, modalConfig);
        this.addEventListener();
    }
    /**
     * 获取多语
     * @private
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    }
    //SPA模式下，点击附件，窗口关闭
    /**
     * @private
     * @return {?}
     */
    addEventListener() {
        window.addEventListener("message", (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (window.document.location.origin.search(event.origin) > -1) {
                if (event.data == 'TaskCloseLogDialog' && this.dialog) {
                    this.dialog.close();
                }
            }
        }), false);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    beforeClose(event) {
        window.removeEventListener("message", (/**
         * @return {?}
         */
        () => { }));
        return of(true);
    }
}
WfApprovalLogsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WfApprovalLogsService.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslatePipe {
    constructor() { }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(name, defaultVal = '') {
        /** @type {?} */
        const r = this.getI18nValue(name);
        return r ? r : defaultVal;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'translate' },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfApprovalLogsModule {
}
WfApprovalLogsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    WfApprovalLogsComponent,
                    TranslatePipe,
                ],
                imports: [
                    CommonModule,
                    FileListModule,
                    FormsModule
                ],
                providers: [
                    WfApprovalLogsService,
                ],
                exports: [
                    WfApprovalLogsComponent
                ],
                entryComponents: [
                    WfApprovalLogsComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfApprovalLogsService, WfApprovalLogsComponent, WfApprovalLogsModule, TranslatePipe as ɵa };

//# sourceMappingURL=gsp-wf-wf-approval-logs.js.map