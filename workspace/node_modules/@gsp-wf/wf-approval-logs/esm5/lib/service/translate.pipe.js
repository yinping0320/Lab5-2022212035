/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { translate } from './i18n/index';
var TranslatePipe = /** @class */ (function () {
    function TranslatePipe() {
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    TranslatePipe.prototype.transform = /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    function (name, defaultVal) {
        if (defaultVal === void 0) { defaultVal = ''; }
        /** @type {?} */
        var r = this.getI18nValue(name);
        return r ? r : defaultVal;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    TranslatePipe.prototype.getI18nValue = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        var resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    };
    TranslatePipe.decorators = [
        { type: Pipe, args: [{ name: 'translate' },] }
    ];
    /** @nocollapse */
    TranslatePipe.ctorParameters = function () { return []; };
    return TranslatePipe;
}());
export { TranslatePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLWFwcHJvdmFsLWxvZ3MvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS90cmFuc2xhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QztJQUdJO0lBQ0ksQ0FBQzs7Ozs7O0lBRUwsaUNBQVM7Ozs7O0lBQVQsVUFBVSxJQUFTLEVBQUUsVUFBZTtRQUFmLDJCQUFBLEVBQUEsZUFBZTs7WUFDMUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELG9DQUFZOzs7O0lBQVosVUFBYSxJQUFZO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFOztZQUNyQixXQUFXLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7O1lBQ2xELFFBQVEsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7WUFDckUsU0FBUyxHQUFHLEVBQUU7UUFDbEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzVCLFNBQVMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O1lBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRztnQkFDMUMsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2pCO3FCQUFNO29CQUNMLE9BQU8sSUFBSSxDQUFDO2lCQUNiO1lBQ0gsQ0FBQyxHQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOztnQkE1Qk4sSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTs7OztJQTZCM0Isb0JBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTVCWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICcuL2kxOG4vaW5kZXgnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAndHJhbnNsYXRlJyB9KVxyXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgKSB7IH1cclxuXHJcbiAgICB0cmFuc2Zvcm0obmFtZTogYW55LCBkZWZhdWx0VmFsID0gJycpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLmdldEkxOG5WYWx1ZShuYW1lKTtcclxuICAgICAgICByZXR1cm4gciA/IHIgOiBkZWZhdWx0VmFsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEkxOG5WYWx1ZShuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuICcnOyB9XHJcbiAgICAgICAgdmFyIGRlZmF1bHRMYW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpO1xyXG4gICAgICAgIHZhciBsYW5nRGF0YSA9IGRlZmF1bHRMYW5nID8gdHJhbnNsYXRlW2RlZmF1bHRMYW5nXSA6IHRyYW5zbGF0ZVsnemgtQ0hTJ107XHJcbiAgICAgICAgbGV0IHJlc3VsdFZhbCA9ICcnO1xyXG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcclxuICAgICAgICAgIHJlc3VsdFZhbCA9IGxhbmdEYXRhW25hbWVdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHRWYWwgPSBuYW1lLnNwbGl0KCcuJykucmVkdWNlKChvYmosIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LCBsYW5nRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRWYWw7XHJcbiAgICAgIH1cclxufVxyXG4iXX0=