import { Injectable, NgModule, Component, defineInjectable } from '@angular/core';
import { Subject } from 'rxjs';
import { __extends } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskImplApiService = /** @class */ (function () {
    function TaskImplApiService() {
    }
    TaskImplApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskImplApiService.ctorParameters = function () { return []; };
    /** @nocollapse */ TaskImplApiService.ngInjectableDef = defineInjectable({ factory: function TaskImplApiService_Factory() { return new TaskImplApiService(); }, token: TaskImplApiService, providedIn: "root" });
    return TaskImplApiService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskImplApiComponent = /** @class */ (function () {
    function TaskImplApiComponent() {
    }
    /**
     * @return {?}
     */
    TaskImplApiComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    TaskImplApiComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-task-impl-api',
                    template: "\n    <p>\n      task-impl-api works!\n    </p>\n  "
                }] }
    ];
    /** @nocollapse */
    TaskImplApiComponent.ctorParameters = function () { return []; };
    return TaskImplApiComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActionBaseImplComponent = /** @class */ (function () {
    function ActionBaseImplComponent() {
        /**
         * 是否为批量操作
         */
        this.isBatch = false;
    }
    /**
     * @return {?}
     */
    ActionBaseImplComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 任务赋值
     */
    /**
     * 任务赋值
     * @param {?} t
     * @return {?}
     */
    ActionBaseImplComponent.prototype.setTask = /**
     * 任务赋值
     * @param {?} t
     * @return {?}
     */
    function (t) {
    };
    /**
     * 动作赋值
     */
    /**
     * 动作赋值
     * @param {?} a
     * @return {?}
     */
    ActionBaseImplComponent.prototype.setAction = /**
     * 动作赋值
     * @param {?} a
     * @return {?}
     */
    function (a) {
    };
    /**
     * 执行操作
     */
    /**
     * 执行操作
     * @return {?}
     */
    ActionBaseImplComponent.prototype.submit = /**
     * 执行操作
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sub = new Subject();
        setTimeout(function () {
            console.log('重写动作执行逻辑');
            sub.next({
                result: true,
                isClose: true
            });
        }, 500);
        return sub.asObservable();
    };
    /**
     * 批量执行操作
     */
    /**
     * 批量执行操作
     * @param {?} tasks
     * @return {?}
     */
    ActionBaseImplComponent.prototype.batchSubmit = /**
     * 批量执行操作
     * @param {?} tasks
     * @return {?}
     */
    function (tasks) {
        /** @type {?} */
        var sub = new Subject();
        setTimeout(function () {
            console.log('重写动作执行逻辑');
            sub.next({
                result: true,
                isClose: true
            });
        }, 500);
        return sub.asObservable();
    };
    ActionBaseImplComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-action-base-impl',
                    template: "<p>\r\n  action-base-impl works!\r\n</p>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ActionBaseImplComponent.ctorParameters = function () { return []; };
    return ActionBaseImplComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskImplApiModule = /** @class */ (function () {
    function TaskImplApiModule() {
    }
    TaskImplApiModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TaskImplApiComponent, ActionBaseImplComponent],
                    imports: [],
                    exports: [TaskImplApiComponent,
                        ActionBaseImplComponent]
                },] }
    ];
    return TaskImplApiModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 业务动作参数
 */
var  /**
 * 业务动作参数
 */
ActionParameter = /** @class */ (function () {
    function ActionParameter() {
    }
    return ActionParameter;
}());
/**
 * 任务动作定义
 */
var  /**
 * 任务动作定义
 */
TaskActionDef = /** @class */ (function () {
    function TaskActionDef() {
    }
    return TaskActionDef;
}());
/**
 * 任务动作定义
 */
var  /**
 * 任务动作定义
 */
TaskAction = /** @class */ (function (_super) {
    __extends(TaskAction, _super);
    function TaskAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TaskAction;
}(TaskActionDef));
var ActionEvent = /** @class */ (function () {
    function ActionEvent() {
    }
    return ActionEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var TaskState = {
    /**
     * 待办
     */
    todo: 2,
    /**
     * 已办
     */
    done: 5,
};
TaskState[TaskState.todo] = 'todo';
TaskState[TaskState.done] = 'done';
var TaskEntity = /** @class */ (function () {
    function TaskEntity() {
    }
    return TaskEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SubmitResult = /** @class */ (function () {
    function SubmitResult() {
    }
    return SubmitResult;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskEventContext = /** @class */ (function () {
    function TaskEventContext() {
    }
    return TaskEventContext;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskEventResult = /** @class */ (function () {
    function TaskEventResult() {
    }
    return TaskEventResult;
}());
var BackMessage = /** @class */ (function () {
    function BackMessage() {
    }
    return BackMessage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ActionOrigin = {
    TaskCenter: 'TaskCenter',
    TaskForm: 'TaskForm',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TaskImplApiService, TaskImplApiComponent, TaskImplApiModule, ActionBaseImplComponent, ActionParameter, TaskActionDef, TaskAction, ActionEvent, TaskState, TaskEntity, SubmitResult, TaskEventContext, TaskEventResult, BackMessage, ActionOrigin };

//# sourceMappingURL=gsp-wf-task-impl-api.js.map