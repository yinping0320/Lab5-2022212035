(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@gsp-wf/task-impl-api', ['exports', '@angular/core', 'rxjs'], factory) :
    (factory((global['gsp-wf'] = global['gsp-wf'] || {}, global['gsp-wf']['task-impl-api'] = {}),global.ng.core,global.rxjs));
}(this, (function (exports,i0,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskImplApiService = /** @class */ (function () {
        function TaskImplApiService() {
        }
        TaskImplApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TaskImplApiService.ctorParameters = function () { return []; };
        /** @nocollapse */ TaskImplApiService.ngInjectableDef = i0.defineInjectable({ factory: function TaskImplApiService_Factory() { return new TaskImplApiService(); }, token: TaskImplApiService, providedIn: "root" });
        return TaskImplApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskImplApiComponent = /** @class */ (function () {
        function TaskImplApiComponent() {
        }
        /**
         * @return {?}
         */
        TaskImplApiComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        TaskImplApiComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-task-impl-api',
                        template: "\n    <p>\n      task-impl-api works!\n    </p>\n  "
                    }] }
        ];
        /** @nocollapse */
        TaskImplApiComponent.ctorParameters = function () { return []; };
        return TaskImplApiComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ActionBaseImplComponent = /** @class */ (function () {
        function ActionBaseImplComponent() {
            /**
             * 是否为批量操作
             */
            this.isBatch = false;
        }
        /**
         * @return {?}
         */
        ActionBaseImplComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 任务赋值
         */
        /**
         * 任务赋值
         * @param {?} t
         * @return {?}
         */
        ActionBaseImplComponent.prototype.setTask = /**
         * 任务赋值
         * @param {?} t
         * @return {?}
         */
            function (t) {
            };
        /**
         * 动作赋值
         */
        /**
         * 动作赋值
         * @param {?} a
         * @return {?}
         */
        ActionBaseImplComponent.prototype.setAction = /**
         * 动作赋值
         * @param {?} a
         * @return {?}
         */
            function (a) {
            };
        /**
         * 执行操作
         */
        /**
         * 执行操作
         * @return {?}
         */
        ActionBaseImplComponent.prototype.submit = /**
         * 执行操作
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sub = new rxjs.Subject();
                setTimeout(function () {
                    console.log('重写动作执行逻辑');
                    sub.next({
                        result: true,
                        isClose: true
                    });
                }, 500);
                return sub.asObservable();
            };
        /**
         * 批量执行操作
         */
        /**
         * 批量执行操作
         * @param {?} tasks
         * @return {?}
         */
        ActionBaseImplComponent.prototype.batchSubmit = /**
         * 批量执行操作
         * @param {?} tasks
         * @return {?}
         */
            function (tasks) {
                /** @type {?} */
                var sub = new rxjs.Subject();
                setTimeout(function () {
                    console.log('重写动作执行逻辑');
                    sub.next({
                        result: true,
                        isClose: true
                    });
                }, 500);
                return sub.asObservable();
            };
        ActionBaseImplComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-action-base-impl',
                        template: "<p>\r\n  action-base-impl works!\r\n</p>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ActionBaseImplComponent.ctorParameters = function () { return []; };
        return ActionBaseImplComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskImplApiModule = /** @class */ (function () {
        function TaskImplApiModule() {
        }
        TaskImplApiModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [TaskImplApiComponent, ActionBaseImplComponent],
                        imports: [],
                        exports: [TaskImplApiComponent,
                            ActionBaseImplComponent]
                    },] }
        ];
        return TaskImplApiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 业务动作参数
     */
    var /**
     * 业务动作参数
     */ ActionParameter = /** @class */ (function () {
        function ActionParameter() {
        }
        return ActionParameter;
    }());
    /**
     * 任务动作定义
     */
    var /**
     * 任务动作定义
     */ TaskActionDef = /** @class */ (function () {
        function TaskActionDef() {
        }
        return TaskActionDef;
    }());
    /**
     * 任务动作定义
     */
    var /**
     * 任务动作定义
     */ TaskAction = /** @class */ (function (_super) {
        __extends(TaskAction, _super);
        function TaskAction() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TaskAction;
    }(TaskActionDef));
    var ActionEvent = /** @class */ (function () {
        function ActionEvent() {
        }
        return ActionEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var TaskState = {
        /**
         * 待办
         */
        todo: 2,
        /**
         * 已办
         */
        done: 5,
    };
    TaskState[TaskState.todo] = 'todo';
    TaskState[TaskState.done] = 'done';
    var TaskEntity = /** @class */ (function () {
        function TaskEntity() {
        }
        return TaskEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SubmitResult = /** @class */ (function () {
        function SubmitResult() {
        }
        return SubmitResult;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskEventContext = /** @class */ (function () {
        function TaskEventContext() {
        }
        return TaskEventContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskEventResult = /** @class */ (function () {
        function TaskEventResult() {
        }
        return TaskEventResult;
    }());
    var BackMessage = /** @class */ (function () {
        function BackMessage() {
        }
        return BackMessage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ActionOrigin = {
        TaskCenter: 'TaskCenter',
        TaskForm: 'TaskForm',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TaskImplApiService = TaskImplApiService;
    exports.TaskImplApiComponent = TaskImplApiComponent;
    exports.TaskImplApiModule = TaskImplApiModule;
    exports.ActionBaseImplComponent = ActionBaseImplComponent;
    exports.ActionParameter = ActionParameter;
    exports.TaskActionDef = TaskActionDef;
    exports.TaskAction = TaskAction;
    exports.ActionEvent = ActionEvent;
    exports.TaskState = TaskState;
    exports.TaskEntity = TaskEntity;
    exports.SubmitResult = SubmitResult;
    exports.TaskEventContext = TaskEventContext;
    exports.TaskEventResult = TaskEventResult;
    exports.BackMessage = BackMessage;
    exports.ActionOrigin = ActionOrigin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-wf-task-impl-api.umd.js.map