import { Injectable, NgModule, Component, defineInjectable } from '@angular/core';
import { Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskImplApiService {
    constructor() { }
}
TaskImplApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskImplApiService.ctorParameters = () => [];
/** @nocollapse */ TaskImplApiService.ngInjectableDef = defineInjectable({ factory: function TaskImplApiService_Factory() { return new TaskImplApiService(); }, token: TaskImplApiService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskImplApiComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TaskImplApiComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-task-impl-api',
                template: `
    <p>
      task-impl-api works!
    </p>
  `
            }] }
];
/** @nocollapse */
TaskImplApiComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActionBaseImplComponent {
    constructor() {
        /**
         * 是否为批量操作
         */
        this.isBatch = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 任务赋值
     * @param {?} t
     * @return {?}
     */
    setTask(t) {
    }
    /**
     * 动作赋值
     * @param {?} a
     * @return {?}
     */
    setAction(a) {
    }
    /**
     * 执行操作
     * @return {?}
     */
    submit() {
        /** @type {?} */
        const sub = new Subject();
        setTimeout(() => {
            console.log('重写动作执行逻辑');
            sub.next({
                result: true,
                isClose: true
            });
        }, 500);
        return sub.asObservable();
    }
    /**
     * 批量执行操作
     * @param {?} tasks
     * @return {?}
     */
    batchSubmit(tasks) {
        /** @type {?} */
        const sub = new Subject();
        setTimeout(() => {
            console.log('重写动作执行逻辑');
            sub.next({
                result: true,
                isClose: true
            });
        }, 500);
        return sub.asObservable();
    }
}
ActionBaseImplComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-action-base-impl',
                template: "<p>\r\n  action-base-impl works!\r\n</p>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ActionBaseImplComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskImplApiModule {
}
TaskImplApiModule.decorators = [
    { type: NgModule, args: [{
                declarations: [TaskImplApiComponent, ActionBaseImplComponent],
                imports: [],
                exports: [TaskImplApiComponent,
                    ActionBaseImplComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 业务动作参数
 */
class ActionParameter {
}
/**
 * 任务动作定义
 */
class TaskActionDef {
}
/**
 * 任务动作定义
 */
class TaskAction extends TaskActionDef {
}
class ActionEvent {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const TaskState = {
    /**
     * 待办
     */
    todo: 2,
    /**
     * 已办
     */
    done: 5,
};
TaskState[TaskState.todo] = 'todo';
TaskState[TaskState.done] = 'done';
class TaskEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SubmitResult {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskEventContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskEventResult {
}
class BackMessage {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ActionOrigin = {
    TaskCenter: 'TaskCenter',
    TaskForm: 'TaskForm',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TaskImplApiService, TaskImplApiComponent, TaskImplApiModule, ActionBaseImplComponent, ActionParameter, TaskActionDef, TaskAction, ActionEvent, TaskState, TaskEntity, SubmitResult, TaskEventContext, TaskEventResult, BackMessage, ActionOrigin };

//# sourceMappingURL=gsp-wf-task-impl-api.js.map