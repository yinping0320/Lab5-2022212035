/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { mxGraph, mxEvent, mxConstants, mxPoint, mxRectangle, mxUtils, mxGeometry } from "@edp-pmf/mxgraph-ts";
import { EndEvent, BpmnModel, Process, BPMNDiagram, SequenceFlow, FlowNode, Node, Edge, FlowNodeState, SequenceFlowState } from "@edp-pmf/bpmn-model";
import { StartActivity, UserActivity, CallActivitySubProcess, AutoActivity, IntermediateCatchEventImpl, OperationActivity, MessageActivity, NotifyActivity, AifCreationBillActivity } from "@gsp-wf/wf-process-model";
import { Cell } from "./entity/Cell";
var FlowGraph = /** @class */ (function (_super) {
    tslib_1.__extends(FlowGraph, _super);
    function FlowGraph(container, cellStyleConfig) {
        var _this = _super.call(this, container) || this;
        _this.scrollTileSize = new mxRectangle(0, 0, 400, 600);
        _this.cellStyleConfig = {
            edgeStyleDic: {},
            shapeStyleDic: {},
        };
        _this.actList = [];
        _this.transInsList = [];
        _this.rootPath = ''; //基路径
        //基路径
        /**
         * 当前语言
         */
        _this.langCode = ((/** @type {?} */ (window))).gspframeworkService && ((/** @type {?} */ (window))).gspframeworkService.rtf.language.getLanguageCode() || localStorage.getItem('languageCode') || 'zh-CHS';
        //获取基路径
        try {
            _this.rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
        _this.cellStyleConfig = cellStyleConfig ? cellStyleConfig : _this.cellStyleConfig;
        _this.autoScroll = false;
        _this.autoExtend = true;
        _this.pageVisible = false;
        //this.panningHandler.ignoreCell = true;
        //this.setPanning(true);
        _this.setCellsSelectable(true);
        _this.setDisconnectOnMove(false);
        //节点不可改变大小
        _this.setCellsResizable(false);
        //cell是否可以连线
        _this.setConnectable(false);
        //禁止操作
        _this.setEnabled(true);
        //设置cell文本是否可移动
        _this.setVertexLabelsMovable(false);
        _this.setCellsLocked(true);
        //不允许图上存在没有连接活动节点的线（防止拖动线连接点导致失去连接）,还没有找到不允许拖动连接控制点的属性
        _this.setAllowDanglingEdges(false);
        mxEvent.disableContextMenu(container);
        // 设置默认样式
        _this.setDefaultStyles();
        return _this;
    }
    /**
     * 重写创建节点对象方法
     * @param parent
     * @param id
     * @param value
     * @param x
     * @param y
     * @param width
     * @param height
     * @param style
     * @param relative
     * @returns
     */
    /**
     * 重写创建节点对象方法
     * @param {?} parent
     * @param {?} id
     * @param {?} value
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} style
     * @param {?} relative
     * @return {?}
     */
    FlowGraph.prototype.createVertex = /**
     * 重写创建节点对象方法
     * @param {?} parent
     * @param {?} id
     * @param {?} value
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} style
     * @param {?} relative
     * @return {?}
     */
    function (parent, id, value, x, y, width, height, style, relative) {
        // Creates the geometry for the vertex
        /** @type {?} */
        var geometry = new mxGeometry(x, y, width, height);
        geometry.relative = (relative != null) ? relative : false;
        // Creates the vertex
        /** @type {?} */
        var vertex = new Cell(value, geometry, style);
        vertex.setId(id);
        vertex.setVertex(true);
        vertex.setConnectable(true);
        return vertex;
    };
    /**
     * 重写创建边对象方法
     * @param parent
     * @param id
     * @param value
     * @param source
     * @param target
     * @param style
     * @returns
     */
    /**
     * 重写创建边对象方法
     * @param {?} parent
     * @param {?} id
     * @param {?} value
     * @param {?} source
     * @param {?} target
     * @param {?} style
     * @return {?}
     */
    FlowGraph.prototype.createEdge = /**
     * 重写创建边对象方法
     * @param {?} parent
     * @param {?} id
     * @param {?} value
     * @param {?} source
     * @param {?} target
     * @param {?} style
     * @return {?}
     */
    function (parent, id, value, source, target, style) {
        // Creates the edge
        /** @type {?} */
        var edge = new Cell(value, new mxGeometry(), style);
        edge.setId(id);
        edge.setEdge(true);
        edge.geometry.relative = true;
        return edge;
    };
    /**
     * 设置默认样式
     */
    /**
     * 设置默认样式
     * @return {?}
     */
    FlowGraph.prototype.setDefaultStyles = /**
     * 设置默认样式
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styleSheet = this.getStylesheet();
        // 节点默认样式
        /** @type {?} */
        var vertexStyle = styleSheet.getDefaultVertexStyle();
        vertexStyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;
        vertexStyle[mxConstants.STYLE_VERTICAL_LABEL_POSITION] = mxConstants.ALIGN_BOTTOM;
        vertexStyle[mxConstants.STYLE_FONTSIZE] = 12;
        vertexStyle[mxConstants.STYLE_FONTFAMILY] = 'Helvetica';
        vertexStyle[mxConstants.STYLE_FONTCOLOR] = "#333";
        // 连线样式默认为正交
        /** @type {?} */
        var edgeStyle = styleSheet.getDefaultEdgeStyle();
        edgeStyle[mxConstants.STYLE_SOURCE_PORT] = 'e';
        edgeStyle[mxConstants.STYLE_TARGET_PORT] = 'w';
        edgeStyle[mxConstants.STYLE_EDGE] = mxConstants.EDGESTYLE_ORTHOGONAL;
        edgeStyle[mxConstants.STYLE_ROUNDED] = 1;
        edgeStyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';
        edgeStyle[mxConstants.STYLE_FONTSIZE] = 12;
        edgeStyle[mxConstants.STYLE_FONTFAMILY] = 'Helvetica';
    };
    /**
     * 创建无限大画布
     */
    /**
     * 创建无限大画布
     * @return {?}
     */
    FlowGraph.prototype.createInfiniteCanvas = /**
     * 创建无限大画布
     * @return {?}
     */
    function () {
        var _this = this;
        this.getPagePadding = (/**
         * @return {?}
         */
        function () {
            return new mxPoint(Math.max(0, Math.round(_this.container.offsetWidth - 34)), Math.max(0, Math.round(_this.container.offsetHeight - 34)));
        });
        this.getScrollTileSize = (/**
         * @return {?}
         */
        function () {
            if (_this.scrollTileSize == null) {
                _this.scrollTileSize = new mxRectangle(0, 0, 400, 600);
            }
            return _this.scrollTileSize;
        });
        this.getPageSize = (/**
         * @return {?}
         */
        function () {
            return (_this.pageVisible) ? new mxRectangle(0, 0, _this.pageFormat.width * _this.pageScale, _this.pageFormat.height * _this.pageScale) : _this.getScrollTileSize();
        });
        this.getPageLayout = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var size = (_this.pageVisible) ? _this.getPageSize() : _this.getScrollTileSize();
            /** @type {?} */
            var bounds = _this.getGraphBounds();
            if (bounds.width == 0 || bounds.height == 0) {
                return new mxRectangle(0, 0, 1, 1);
            }
            else {
                // Computes untransformed graph bounds
                /** @type {?} */
                var x = Math.ceil(bounds.x / _this.view.scale - _this.view.translate.x);
                /** @type {?} */
                var y = Math.ceil(bounds.y / _this.view.scale - _this.view.translate.y);
                /** @type {?} */
                var w = Math.floor(bounds.width / _this.view.scale);
                /** @type {?} */
                var h = Math.floor(bounds.height / _this.view.scale);
                /** @type {?} */
                var x0 = Math.floor(x / size.width);
                /** @type {?} */
                var y0 = Math.floor(y / size.height);
                /** @type {?} */
                var w0 = Math.ceil((x + w) / size.width) - x0;
                /** @type {?} */
                var h0 = Math.ceil((y + h) / size.height) - y0;
                return new mxRectangle(x0, y0, w0, h0);
            }
        });
        this.getPreferredPageSize = (/**
         * @param {?} bounds
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        function (bounds, width, height) {
            /** @type {?} */
            var pages = _this.getPageLayout();
            /** @type {?} */
            var size = _this.getPageSize();
            return new mxRectangle(0, 0, pages.width * size.width, pages.height * size.height);
        });
        // 重写画布大小变化后方法
        /** @type {?} */
        var graphSizeDidChange = this.sizeDidChange;
        this.sizeDidChange = (/**
         * @return {?}
         */
        function () {
            if (_this.container != null && mxUtils.hasScrollbars(_this.container)) {
                /** @type {?} */
                var pages = _this.getPageLayout();
                /** @type {?} */
                var pad = _this.getPagePadding();
                /** @type {?} */
                var size = _this.getPageSize();
                // Updates the minimum graph size
                /** @type {?} */
                var minw = Math.ceil(2 * pad.x / _this.view.scale + pages.width * size.width);
                /** @type {?} */
                var minh = Math.ceil(2 * pad.y / _this.view.scale + pages.height * size.height);
                /** @type {?} */
                var min = _this.minimumGraphSize;
                // LATER: Fix flicker of scrollbar size in IE quirks mode
                // after delayed call in window.resize event handler
                if (min == null || min.width != minw || min.height != minh) {
                    _this.minimumGraphSize = new mxRectangle(0, 0, minw, minh);
                }
                // Updates auto-translate to include padding and graph size
                /** @type {?} */
                var dx = pad.x / _this.view.scale - pages.x * size.width;
                /** @type {?} */
                var dy = pad.y / _this.view.scale - pages.y * size.height;
                if (!_this.autoTranslate && (_this.view.translate.x != dx || _this.view.translate.y != dy)) {
                    _this.autoTranslate = true;
                    ((/** @type {?} */ (_this.view))).x0 = pages.x;
                    ((/** @type {?} */ (_this.view))).y0 = pages.y;
                    /** @type {?} */
                    var tx = _this.view.translate.x;
                    /** @type {?} */
                    var ty = _this.view.translate.y;
                    _this.view.setTranslate(dx, dy);
                    _this.container.scrollLeft += (dx - tx) * _this.view.scale;
                    _this.container.scrollTop += (dy - ty) * _this.view.scale;
                    _this.autoTranslate = false;
                    return;
                }
                graphSizeDidChange.apply(_this, []);
            }
        });
        // 重写view获取背景页大小
        this.view.getBackgroundPageBounds = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var layout = _this.getPageLayout();
            /** @type {?} */
            var page = _this.getPageSize();
            return new mxRectangle(_this.view.scale * (_this.view.translate.x + layout.x * page.width), _this.view.scale * (_this.view.translate.y + layout.y * page.height), _this.view.scale * layout.width * page.width, _this.view.scale * layout.height * page.height);
        });
        // 重写view validate方法
        /** @type {?} */
        var graphViewValidate = this.view.validate;
        this.view.validate = (/**
         * @param {?=} cell
         * @return {?}
         */
        function (cell) {
            if (_this.container != null && mxUtils.hasScrollbars(_this.container)) {
                /** @type {?} */
                var pad = _this.getPagePadding();
                /** @type {?} */
                var size = _this.getPageSize();
                /** @type {?} */
                var tx = _this.view.translate.x;
                /** @type {?} */
                var ty = _this.view.translate.y;
                _this.view.translate.x = pad.x / _this.view.scale - (((/** @type {?} */ (_this.view))).x0 || 0) * size.width;
                _this.view.translate.y = pad.y / _this.view.scale - (((/** @type {?} */ (_this.view))).y0 || 0) * size.height;
            }
            graphViewValidate.apply(_this.view, [cell]);
        });
    };
    /**
     * 创建BpmnModel
     */
    /**
     * 创建BpmnModel
     * @return {?}
     */
    FlowGraph.prototype.createBpmnModel = /**
     * 创建BpmnModel
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bpmnModel = new BpmnModel();
        bpmnModel.TargetNamespace = "Default_Namespace";
        bpmnModel.DefaultProcess = new Process(bpmnModel);
        bpmnModel.DefaultDiagram = new BPMNDiagram(bpmnModel);
        bpmnModel.DefaultDiagram.BpmnPlane.BpmnElementId = bpmnModel.DefaultProcess.Id;
        return bpmnModel;
    };
    /**
     * 加载BpmnModel并画图
     */
    /**
     * 加载BpmnModel并画图
     * @param {?} json
     * @return {?}
     */
    FlowGraph.prototype.loadBpmnModel = /**
     * 加载BpmnModel并画图
     * @param {?} json
     * @return {?}
     */
    function (json) {
        this.removeCells(this.getChildCells(this.getDefaultParent()));
        this.bpmnModel = this.createBpmnModel();
        this.bpmnModel.LoadFromJson(json);
        this.drawBpmnGraph(this.bpmnModel);
    };
    /**
     * 重新加载BpmnModel并画图
     * @param json
     */
    /**
     * 重新加载BpmnModel并画图
     * @param {?=} json
     * @return {?}
     */
    FlowGraph.prototype.reloadBpmnModel = /**
     * 重新加载BpmnModel并画图
     * @param {?=} json
     * @return {?}
     */
    function (json) {
        this.removeCells(this.getChildCells(this.getDefaultParent()));
        if (json) {
            this.loadBpmnModel(json);
        }
        else {
            this.drawBpmnGraph(this.bpmnModel);
        }
    };
    /**
     * 根据BpmnModel画图
     */
    /**
     * 根据BpmnModel画图
     * @param {?} bpmnModel
     * @return {?}
     */
    FlowGraph.prototype.drawBpmnGraph = /**
     * 根据BpmnModel画图
     * @param {?} bpmnModel
     * @return {?}
     */
    function (bpmnModel) {
        var _a = this.buildFlowDiagDict(bpmnModel), nodeDict = _a.nodeDict, edgeDict = _a.edgeDict;
        /** @type {?} */
        var flowDict = this.buildFlowDict(bpmnModel);
        this.drawNodeCells(flowDict, nodeDict);
        this.drawEdgeCells(flowDict, edgeDict);
        this.getModel().beginUpdate();
        if (this.mode === 'simulation') {
            this.drawInterceptGraph(flowDict, nodeDict, edgeDict);
            this.addJumpEdges(flowDict);
        }
        this.getModel().endUpdate();
    };
    /**
     * @private
     * @param {?} flowDict
     * @param {?} nodeDict
     * @param {?} edgeDict
     * @return {?}
     */
    FlowGraph.prototype.drawInterceptGraph = /**
     * @private
     * @param {?} flowDict
     * @param {?} nodeDict
     * @param {?} edgeDict
     * @return {?}
     */
    function (flowDict, nodeDict, edgeDict) {
        var _this = this;
        /** @type {?} */
        var firstAct = this.findFirstStartActivityInstance(this.actList);
        // todo：此处待修复
        /** @type {?} */
        var endActDef;
        for (var key in flowDict) {
            if (flowDict[key] instanceof EndEvent) {
                endActDef = (/** @type {?} */ (flowDict[key]));
            }
        }
        if (firstAct) {
            /** @type {?} */
            var endActiInstList = this.findEndActiInstList(firstAct, this.actList, this.transInsList);
            endActiInstList.forEach(((/**
             * @param {?} endActiInst
             * @return {?}
             */
            function (endActiInst) {
                if (endActiInst.activityDefinitionId !== endActDef.Id) {
                    _this.drawNextFlowChart(endActiInst.activityDefinitionId, nodeDict, edgeDict);
                }
            })));
        }
    };
    /**
     * @param {?} flowDict
     * @return {?}
     */
    FlowGraph.prototype.addJumpEdges = /**
     * @param {?} flowDict
     * @return {?}
     */
    function (flowDict) {
        var e_1, _a;
        /** @type {?} */
        var nodeCells = (/** @type {?} */ ((this.getChildCells(this.getDefaultParent(), true) || [])));
        /** @type {?} */
        var noIncomingNodes = this.findNoIncomingNodes(nodeCells);
        var _loop_1 = function (node) {
            /** @type {?} */
            var actInst = this_1.actList.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.activityDefinitionId === node.flowElement.Id; }))[0];
            /** @type {?} */
            var cellId = actInst.precursorActivityDefinitionId + '_' + actInst.activityDefinitionId;
            /** @type {?} */
            var source = nodeCells.find((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                return it.flowElement && it.flowElement.Id === actInst.precursorActivityDefinitionId;
            }));
            /** @type {?} */
            var target = nodeCells.find((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                return it.flowElement && it.flowElement.Id === actInst.activityDefinitionId;
            }));
            /** @type {?} */
            var map = new Map();
            map.set('jump', true);
            /** @type {?} */
            var style = this_1.getEdgeStyle(null, null, map);
            /** @type {?} */
            var cell = (/** @type {?} */ (this_1.insertEdge(this_1.getDefaultParent(), cellId, '', source, target, style)));
            if (cell !== null) {
                cell.source = source;
                cell.target = target;
                cell.geometry.points = [
                // new mxPoint(source.geometry.x+ source.geometry.width/2, target.geometry.y+target.geometry.height/2)
                ];
                console.log(cell);
                this_1.moveCells([cell], undefined, undefined, undefined, this_1.getDefaultParent());
            }
        };
        var this_1 = this;
        try {
            for (var noIncomingNodes_1 = tslib_1.__values(noIncomingNodes), noIncomingNodes_1_1 = noIncomingNodes_1.next(); !noIncomingNodes_1_1.done; noIncomingNodes_1_1 = noIncomingNodes_1.next()) {
                var node = noIncomingNodes_1_1.value;
                _loop_1(node);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (noIncomingNodes_1_1 && !noIncomingNodes_1_1.done && (_a = noIncomingNodes_1.return)) _a.call(noIncomingNodes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * 画节点
     */
    /**
     * 画节点
     * @param {?} flowDict
     * @param {?} nodeDict
     * @param {?=} additional
     * @return {?}
     */
    FlowGraph.prototype.drawNodeCells = /**
     * 画节点
     * @param {?} flowDict
     * @param {?} nodeDict
     * @param {?=} additional
     * @return {?}
     */
    function (flowDict, nodeDict, additional) {
        var _this = this;
        if (additional === void 0) { additional = false; }
        Object.keys(nodeDict).forEach((/**
         * @param {?} bpmnModelElementId
         * @return {?}
         */
        function (bpmnModelElementId) {
            /** @type {?} */
            var flowElt = flowDict[bpmnModelElementId];
            /** @type {?} */
            var diagElt = (/** @type {?} */ (nodeDict[bpmnModelElementId]));
            if (flowElt == null) {
                return;
            }
            _this.drawNodeCell(flowElt, diagElt, additional);
        }));
    };
    /**
     * 画单个节点
     * @param flowElt
     * @param diagElt
     * @param additional
     */
    /**
     * 画单个节点
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @return {?}
     */
    FlowGraph.prototype.drawNodeCell = /**
     * 画单个节点
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @return {?}
     */
    function (flowElt, diagElt, additional) {
        /** @type {?} */
        var style = this.getVertexStyle(flowElt, diagElt, additional);
        /** @type {?} */
        var cell = null;
        /** @type {?} */
        var label = "";
        if (flowElt != null) {
            label = flowElt.Name;
            if (flowElt.NameLanguage && flowElt.NameLanguage[this.langCode] != null) {
                label = flowElt.NameLanguage[this.langCode];
            }
        }
        if (this.mode === 'simulation') {
            if (this.actList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.activityDefinitionId === flowElt.Id; })) > -1) {
                cell = (/** @type {?} */ (this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style)));
            }
            else if (additional) {
                cell = (/** @type {?} */ (this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style)));
            }
        }
        else {
            cell = (/** @type {?} */ (this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style)));
        }
        if (cell == null) {
            return;
        }
        // const cell = this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style) as Cell;
        cell.flowElement = flowElt;
        cell.diagramElement = diagElt;
        this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
    };
    /**
     * 画连线
     */
    /**
     * 画连线
     * @param {?} flowDict
     * @param {?} edgeDict
     * @param {?=} additional
     * @param {?=} cut
     * @return {?}
     */
    FlowGraph.prototype.drawEdgeCells = /**
     * 画连线
     * @param {?} flowDict
     * @param {?} edgeDict
     * @param {?=} additional
     * @param {?=} cut
     * @return {?}
     */
    function (flowDict, edgeDict, additional, cut) {
        var _this = this;
        if (additional === void 0) { additional = false; }
        if (cut === void 0) { cut = false; }
        Object.keys(edgeDict).forEach((/**
         * @param {?} bpmnModelElementId
         * @return {?}
         */
        function (bpmnModelElementId) {
            /** @type {?} */
            var flowElt = (/** @type {?} */ (flowDict[bpmnModelElementId]));
            /** @type {?} */
            var diagElt = (/** @type {?} */ (edgeDict[bpmnModelElementId]));
            if (flowElt == null) {
                return;
            }
            _this.drawEdgeCell(flowElt, diagElt, additional, cut);
        }));
    };
    /**
     * @private
     * @param {?} flowDict
     * @param {?} sourceId
     * @param {?} targetId
     * @return {?}
     */
    FlowGraph.prototype.judgeConnectBetweenTwoNodes = /**
     * @private
     * @param {?} flowDict
     * @param {?} sourceId
     * @param {?} targetId
     * @return {?}
     */
    function (flowDict, sourceId, targetId) {
        var e_2, _a;
        /** @type {?} */
        var source = (/** @type {?} */ (flowDict[sourceId]));
        /** @type {?} */
        var outGoings = source.Outgoings;
        if (!outGoings || outGoings.length === 0) {
            return false;
        }
        try {
            for (var outGoings_1 = tslib_1.__values(outGoings), outGoings_1_1 = outGoings_1.next(); !outGoings_1_1.done; outGoings_1_1 = outGoings_1.next()) {
                var outGoing = outGoings_1_1.value;
                /** @type {?} */
                var sequenceFlow = (/** @type {?} */ (flowDict[outGoing]));
                if (sequenceFlow.TargetRef === targetId) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (outGoings_1_1 && !outGoings_1_1.done && (_a = outGoings_1.return)) _a.call(outGoings_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    /**
     * 画单条连线
     * @param flowElt
     * @param diagElt
     * @param additional
     * @param cut
     * @returns
     */
    /**
     * 画单条连线
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    FlowGraph.prototype.drawEdgeCell = /**
     * 画单条连线
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    function (flowElt, diagElt, additional, cut) {
        // 获取已插入的节点元素
        /** @type {?} */
        var nodeCells = (/** @type {?} */ ((this.getChildCells(this.getDefaultParent(), true) || [])));
        /** @type {?} */
        var source = nodeCells.find((/**
         * @param {?} it
         * @return {?}
         */
        function (it) {
            return it.flowElement && it.flowElement.Id === flowElt.SourceRef;
        }));
        /** @type {?} */
        var target = nodeCells.find((/**
         * @param {?} it
         * @return {?}
         */
        function (it) {
            return it.flowElement && it.flowElement.Id === flowElt.TargetRef;
        }));
        /** @type {?} */
        var map = new Map();
        map.set('additional', additional);
        map.set('cut', cut);
        /** @type {?} */
        var style = this.getEdgeStyle(flowElt, diagElt, map);
        /** @type {?} */
        var cell = null;
        /** @type {?} */
        var label = "";
        if (flowElt != null) {
            label = flowElt.Name;
            if (flowElt.NameLanguage && flowElt.NameLanguage[this.langCode] != null) {
                label = flowElt.NameLanguage[this.langCode];
            }
        }
        if (this.mode === 'simulation') {
            if (this.transInsList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.sourceActivityDefinitionId === flowElt.SourceRef
                && a.destinationActivityDefinitionId === flowElt.TargetRef; })) > -1) {
                cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style)));
            }
            else if (additional || cut) {
                cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style)));
            }
        }
        else {
            cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style)));
        }
        if (cell == null) {
            return;
        }
        // const cell = this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style) as Cell;
        // cell.geometry.relative = true;
        cell.flowElement = flowElt;
        cell.diagramElement = diagElt;
        cell.source = source;
        cell.target = target;
        cell.geometry.points = cell.geometry.points || [];
        // 判断是否为旧版本连线
        if (this.isOldBpmnEdge(diagElt)) {
            for (var i = 2; i < diagElt.Points.length; i++) {
                /** @type {?} */
                var pt = diagElt.Points[i];
                cell.geometry.points.push(new mxPoint(pt.X, pt.Y));
            }
            // 此行代码执行后可获取mxCellState
            this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
            //按坐标插入label
            /** @type {?} */
            var state = this.view.getState(cell);
            if (diagElt.BpmnLabel && state) {
                if (diagElt.BpmnLabel.Bounds.X === 0 && diagElt.BpmnLabel.Bounds.Y === 0) {
                    return;
                }
                /** @type {?} */
                var x = diagElt.BpmnLabel.Bounds.X + (state.x - state.paintBounds.x);
                /** @type {?} */
                var y = diagElt.BpmnLabel.Bounds.Y + (state.y - state.paintBounds.y);
                /** @type {?} */
                var edgeHandler = this.createEdgeHandler(state, undefined);
                edgeHandler.moveLabel(state, x, y);
                edgeHandler.destroy();
            }
        }
        else {
            for (var i = 1; i < diagElt.Points.length - 1; i++) {
                /** @type {?} */
                var pt = diagElt.Points[i];
                cell.geometry.points.push(new mxPoint(pt.X, pt.Y));
            }
            // 此行代码执行后可获取mxCellState
            this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
            //按坐标插入label
            /** @type {?} */
            var state = this.view.getState(cell);
            /** @type {?} */
            var scale = this.view.getScale();
            /** @type {?} */
            var translate = this.view.getTranslate();
            if (diagElt.BpmnLabel && state) {
                if (diagElt.BpmnLabel.Bounds.X === 0 && diagElt.BpmnLabel.Bounds.Y === 0) {
                    return;
                }
                /** @type {?} */
                var x = diagElt.BpmnLabel.Bounds.X * scale + translate.x;
                /** @type {?} */
                var y = diagElt.BpmnLabel.Bounds.Y * scale + translate.y;
                /** @type {?} */
                var edgeHandler = this.createEdgeHandler(state, undefined);
                edgeHandler.moveLabel(state, x, y);
                edgeHandler.destroy();
            }
        }
    };
    /**
     * 构建FlowElement字典，{ [flowEltId: string]: FlowElement }
     */
    /**
     * 构建FlowElement字典，{ [flowEltId: string]: FlowElement }
     * @param {?} bpmnModel
     * @return {?}
     */
    FlowGraph.prototype.buildFlowDict = /**
     * 构建FlowElement字典，{ [flowEltId: string]: FlowElement }
     * @param {?} bpmnModel
     * @return {?}
     */
    function (bpmnModel) {
        /** @type {?} */
        var flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        return flowDict;
    };
    /**
     * 构建DiagramElement字典，{ [flowEltId: string]: DiagramElement }
     */
    /**
     * 构建DiagramElement字典，{ [flowEltId: string]: DiagramElement }
     * @param {?} bpmnModel
     * @return {?}
     */
    FlowGraph.prototype.buildFlowDiagDict = /**
     * 构建DiagramElement字典，{ [flowEltId: string]: DiagramElement }
     * @param {?} bpmnModel
     * @return {?}
     */
    function (bpmnModel) {
        /** @type {?} */
        var nodeDict = {};
        /** @type {?} */
        var edgeDict = {};
        /** @type {?} */
        var diagramElts = (/** @type {?} */ (bpmnModel.DefaultDiagram.BpmnPlane.GetDiagramElements()));
        diagramElts && diagramElts.forEach((/**
         * @param {?} elt
         * @return {?}
         */
        function (elt) {
            if (elt instanceof Node) {
                nodeDict[elt.BpmnElementId] = elt;
            }
            else if (elt instanceof Edge) {
                edgeDict[elt.BpmnElementId] = elt;
            }
        }));
        return {
            nodeDict: nodeDict,
            edgeDict: edgeDict,
        };
    };
    /**
     * 判断是否为旧版本BPMNEdge
     *
     * 旧版本连线Points数组中[0]和[1]分别表示起点和终点，因取值错误，[0]和[1]坐标均为(0,0)，以此为依据判断是否为旧版本的连线
     * 新版本从起点到终点按顺序记录每一个点坐标
     * @param bpmnEdge
     * @returns
     */
    /**
     * 判断是否为旧版本BPMNEdge
     *
     * 旧版本连线Points数组中[0]和[1]分别表示起点和终点，因取值错误，[0]和[1]坐标均为(0,0)，以此为依据判断是否为旧版本的连线
     * 新版本从起点到终点按顺序记录每一个点坐标
     * @param {?} bpmnEdge
     * @return {?}
     */
    FlowGraph.prototype.isOldBpmnEdge = /**
     * 判断是否为旧版本BPMNEdge
     *
     * 旧版本连线Points数组中[0]和[1]分别表示起点和终点，因取值错误，[0]和[1]坐标均为(0,0)，以此为依据判断是否为旧版本的连线
     * 新版本从起点到终点按顺序记录每一个点坐标
     * @param {?} bpmnEdge
     * @return {?}
     */
    function (bpmnEdge) {
        if (bpmnEdge.Points.length >= 2) {
            /** @type {?} */
            var pt1 = bpmnEdge.Points[0];
            /** @type {?} */
            var pt2 = bpmnEdge.Points[1];
            if (pt1.X == 0 && pt1.Y == 0 && pt2.X == 0 && pt2.Y == 0) {
                return true;
            }
        }
        return false;
    };
    /**
     * 获取节点样式
     * @param flowElt
     * @param diagElt
     * @param additional
     * @returns
     */
    /**
     * 获取节点样式
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @return {?}
     */
    FlowGraph.prototype.getVertexStyle = /**
     * 获取节点样式
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @return {?}
     */
    function (flowElt, diagElt, additional) {
        /** @type {?} */
        var activityInstanceSlims = this.actList;
        /** @type {?} */
        var stateShapeStyle = null;
        // 特殊处理,业务活动要单独赋成人工操作类型的样式
        // if (flowElt.ClrTypeID === UserActivity.Clr_Type_ID) {
        //   stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[flowElt.ClrTypeID];
        // } else if (flowElt.ClrTypeID === OperationActivity.Clr_Type_ID) {
        //   stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[OperationActivity.Clr_Type_ID];
        // }
        if (flowElt instanceof UserActivity && flowElt.BizActivityID !== '') {
            stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[OperationActivity.Clr_Type_ID];
        }
        else {
            stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[flowElt.ClrTypeID];
        }
        if (stateShapeStyle == null) {
            return this.getVertexStyleOld(flowElt, additional);
        }
        /** @type {?} */
        var img = stateShapeStyle[FlowNodeState.Default] && stateShapeStyle[FlowNodeState.Default].image;
        if (!additional) {
            /** @type {?} */
            var acts = activityInstanceSlims.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.activityDefinitionId === flowElt.Id; }));
            if (acts && acts.length > 0) {
                if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.state === 'RUNNING'; })).length > 0) {
                    if (stateShapeStyle[FlowNodeState.Running]) {
                        img = stateShapeStyle[FlowNodeState.Running].image;
                    }
                }
                else if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.state === 'COMPLETED'; })).length > 0) {
                    if (stateShapeStyle[FlowNodeState.Completed]) {
                        img = stateShapeStyle[FlowNodeState.Completed].image;
                    }
                }
                else if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.state === 'TERMINATED'; })).length > 0) {
                    if (stateShapeStyle[FlowNodeState.Terminated]) {
                        img = stateShapeStyle[FlowNodeState.Terminated].image;
                    }
                }
            }
        }
        return img == null ? null : 'image=' + this.rootPath + img;
    };
    /**
     * 旧版diagramElement未存储样式信息
     * @param flowElt
     * @param additional
     * @returns
     */
    /**
     * 旧版diagramElement未存储样式信息
     * @param {?} flowElt
     * @param {?} additional
     * @return {?}
     */
    FlowGraph.prototype.getVertexStyleOld = /**
     * 旧版diagramElement未存储样式信息
     * @param {?} flowElt
     * @param {?} additional
     * @return {?}
     */
    function (flowElt, additional) {
        /** @type {?} */
        var style;
        switch (flowElt.ClrTypeID) {
            //结束事件
            case "bpmn.EndEvent":
                style = 'end';
                break;
            //流程开始活动节点
            case StartActivity.Clr_Type_ID:
                style = 'start';
                break;
            // 业务活动节点
            case UserActivity.Clr_Type_ID:
                if (((/** @type {?} */ (flowElt))).BizActivityID) {
                    style = 'bizActivity';
                }
                else {
                    style = 'approval';
                }
                break;
            // 排他网关
            case 'bpmn.ExclusiveGateway':
                style = 'ExclusiveGateway';
                break;
            //并行网关
            case 'bpmn.ParallelGateway':
                style = 'ParallelGateway';
                break;
            case CallActivitySubProcess.Clr_Type_ID:
                style = 'sub';
                break;
            case AutoActivity.Clr_Type_ID:
                style = 'auto';
                break;
            case IntermediateCatchEventImpl.Clr_Type_ID:
                style = 'catchEvent';
                break;
            case OperationActivity.Clr_Type_ID:
                style = 'bizActivity';
                break;
            case MessageActivity.Clr_Type_ID:
                style = 'message';
                break;
            case NotifyActivity.Clr_Type_ID:
                style = 'notify';
                break;
            case AifCreationBillActivity.Clr_Type_ID:
                style = 'aifCreationActivity';
                break;
            default:
                break;
        }
        return 'image=' + this.rootPath + '/platform/runtime/common/web/@gsp-wf/wf-process-editor/images/' + style + this.getChartState(flowElt, additional) + ';';
    };
    /**
     * @param {?} flowElt
     * @param {?} additional
     * @return {?}
     */
    FlowGraph.prototype.getChartState = /**
     * @param {?} flowElt
     * @param {?} additional
     * @return {?}
     */
    function (flowElt, additional) {
        if (!additional) {
            /** @type {?} */
            var acts = this.actList.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.activityDefinitionId === flowElt.Id; }));
            if (acts && acts.length > 0) {
                if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.state === 'RUNNING'; })).length > 0) {
                    return '_light.gif';
                }
                else if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.state === 'COMPLETED'; })).length > 0
                    || acts.filter((/**
                     * @param {?} act
                     * @return {?}
                     */
                    function (act) { return act.state === 'TERMINATED'; })).length > 0) {
                    return '_gray.png';
                }
                else {
                    return '.png';
                }
            }
        }
        return '.png';
    };
    /**
     * 获取连线样式
     * @param flowElt
     * @param additional
     * @param cut
     * @returns
     */
    /**
     * 获取连线样式
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} parameters
     * @return {?}
     */
    FlowGraph.prototype.getEdgeStyle = /**
     * 获取连线样式
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} parameters
     * @return {?}
     */
    function (flowElt, diagElt, parameters) {
        if (parameters.get('jump')) {
            /** @type {?} */
            var style_1 = '';
            /** @type {?} */
            var stateEdgeStyle_1 = this.cellStyleConfig.edgeStyleDic && this.cellStyleConfig.edgeStyleDic['bpmn.SequenceFlow'];
            if (stateEdgeStyle_1['jump']) {
                Object.keys(stateEdgeStyle_1['jump']).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    style_1 += (key + "=" + stateEdgeStyle_1['jump'][key] + ";");
                }));
                return style_1;
            }
            return null;
        }
        else {
            /** @type {?} */
            var stateEdgeStyle_2 = this.cellStyleConfig.edgeStyleDic && this.cellStyleConfig.edgeStyleDic[flowElt.ClrTypeID];
            if (stateEdgeStyle_2 == null) {
                return this.getEdgeStyleOld(flowElt, parameters.get('additional'), parameters.get('cut'));
            }
            /** @type {?} */
            var transitionInstanceSlims = this.transInsList;
            /** @type {?} */
            var style_2 = '';
            if (parameters.get('cut')) {
                if (stateEdgeStyle_2[SequenceFlowState.Cut]) {
                    Object.keys(stateEdgeStyle_2[SequenceFlowState.Cut]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) {
                        style_2 += (key + "=" + stateEdgeStyle_2[SequenceFlowState.Cut][key] + ";");
                    }));
                    return style_2;
                }
            }
            if (parameters.get('additional')) {
                if (stateEdgeStyle_2[SequenceFlowState.Add]) {
                    Object.keys(stateEdgeStyle_2[SequenceFlowState.Add]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) {
                        style_2 += (key + "=" + stateEdgeStyle_2[SequenceFlowState.Add][key] + ";");
                    }));
                    return style_2;
                }
            }
            /** @type {?} */
            var transIns = transitionInstanceSlims.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.sourceActivityDefinitionId === flowElt.SourceRef && item.destinationActivityDefinitionId === flowElt.TargetRef; }));
            if (transIns && transIns.filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.state === 'COMPLETED'; })).length > 0) {
                if (stateEdgeStyle_2[SequenceFlowState.Completed]) {
                    Object.keys(stateEdgeStyle_2[SequenceFlowState.Completed]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) {
                        style_2 += (key + "=" + stateEdgeStyle_2[SequenceFlowState.Completed][key] + ";");
                    }));
                    return style_2;
                }
            }
            if (this.mode === 'simulation') {
                if (stateEdgeStyle_2[SequenceFlowState.Simulation]) {
                    Object.keys(stateEdgeStyle_2[SequenceFlowState.Simulation]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) {
                        style_2 += (key + "=" + stateEdgeStyle_2[SequenceFlowState.Simulation][key] + ";");
                    }));
                    return style_2;
                }
            }
            if (stateEdgeStyle_2[SequenceFlowState.Default]) {
                Object.keys(stateEdgeStyle_2[SequenceFlowState.Default]).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    style_2 += (key + "=" + stateEdgeStyle_2[SequenceFlowState.Default][key] + ";");
                }));
            }
            return style_2;
        }
    };
    /**
     * 获取连线颜色
     * @param flowElt
     * @param diagElt
     * @param additional
     * @param cut
     * @returns
     */
    /**
     * 获取连线颜色
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    FlowGraph.prototype.getStrokeColor = /**
     * 获取连线颜色
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    function (flowElt, diagElt, additional, cut) {
        /** @type {?} */
        var transitionInstanceSlims = this.transInsList;
        /** @type {?} */
        var stateEdgeStyle = this.cellStyleConfig.edgeStyleDic && this.cellStyleConfig.edgeStyleDic[flowElt.ClrTypeID];
        if (cut) {
            if (stateEdgeStyle[SequenceFlowState.Cut]) {
                return stateEdgeStyle[SequenceFlowState.Cut].strokeColor;
            }
        }
        if (additional) {
            if (stateEdgeStyle[SequenceFlowState.Add]) {
                return stateEdgeStyle[SequenceFlowState.Add].strokeColor;
            }
        }
        /** @type {?} */
        var transIns = transitionInstanceSlims.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.sourceActivityDefinitionId === flowElt.SourceRef && item.destinationActivityDefinitionId === flowElt.TargetRef; }));
        if (transIns && transIns.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.state === 'COMPLETED'; })).length > 0) {
            if (stateEdgeStyle[SequenceFlowState.Completed]) {
                return stateEdgeStyle[SequenceFlowState.Completed].strokeColor;
            }
        }
        if (this.mode === 'simulation') {
            if (stateEdgeStyle[SequenceFlowState.Simulation]) {
                return stateEdgeStyle[SequenceFlowState.Simulation].strokeColor;
            }
        }
        return stateEdgeStyle[SequenceFlowState.Default].strokeColor;
    };
    /**
     * 旧版diagramElement未存储样式信息
     * @param flowElt
     * @param additional
     * @returns
     */
    /**
     * 旧版diagramElement未存储样式信息
     * @param {?} seq
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    FlowGraph.prototype.getEdgeStyleOld = /**
     * 旧版diagramElement未存储样式信息
     * @param {?} seq
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    function (seq, additional, cut) {
        if (cut) {
            return 'strokeColor=#FF4040';
        }
        if (additional) {
            return 'strokeColor=#59A1FF';
        }
        /** @type {?} */
        var transIns = this.transInsList.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.sourceActivityDefinitionId === seq.SourceRef && item.destinationActivityDefinitionId === seq.TargetRef; }));
        if (transIns && transIns.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.state === 'COMPLETED'; })).length > 0) {
            return 'strokeColor=#595959;strokeWidth=2;';
        }
        if (this.mode === 'simulation') {
            return 'strokeColor=#f59c24;dashed=1;';
        }
        else {
            return 'strokeColor=#59A1FF;';
        }
    };
    /**
     * @param {?} actiDefId
     * @param {?} nodeDict
     * @param {?} edgeDict
     * @return {?}
     */
    FlowGraph.prototype.drawNextFlowChart = /**
     * @param {?} actiDefId
     * @param {?} nodeDict
     * @param {?} edgeDict
     * @return {?}
     */
    function (actiDefId, nodeDict, edgeDict) {
        var _this = this;
        var _a = this.findDrawFlowElementsByActDefId(actiDefId, this.bpmnModel), nextFlowNodeDict = _a.nextFlowNodeDict, nextSeqFlowDict = _a.nextSeqFlowDict;
        /** @type {?} */
        var actDef = (/** @type {?} */ (this.bpmnModel.DefaultProcess.GetFlowElement(actiDefId)));
        /** @type {?} */
        var outgoings = actDef.Outgoings;
        // 先插入节点
        Object.keys(nextFlowNodeDict).forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var flowElt = nextFlowNodeDict[id];
            /** @type {?} */
            var diagElt = (/** @type {?} */ (nodeDict[flowElt.Id]));
            /** @type {?} */
            var cell = _this.getCellByFlowElementId(flowElt.Id);
            if (!cell) {
                _this.drawNodeCell(flowElt, diagElt, true);
            }
        }));
        // 再插入边
        Object.keys(nextSeqFlowDict).forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var flowElt = nextSeqFlowDict[id];
            /** @type {?} */
            var diagElt = (/** @type {?} */ (edgeDict[flowElt.Id]));
            /** @type {?} */
            var cell = _this.getCellByFlowElementId(flowElt.Id);
            if (!cell) {
                if (outgoings.some((/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return o === flowElt.Id; }))) {
                    _this.drawEdgeCell(flowElt, diagElt, true, true);
                }
                else {
                    _this.drawEdgeCell(flowElt, diagElt, true, false);
                }
            }
        }));
    };
    /**
     * 根据flowElementId获取cell
     */
    /**
     * 根据flowElementId获取cell
     * @param {?} flowEltId
     * @param {?=} parent
     * @return {?}
     */
    FlowGraph.prototype.getCellByFlowElementId = /**
     * 根据flowElementId获取cell
     * @param {?} flowEltId
     * @param {?=} parent
     * @return {?}
     */
    function (flowEltId, parent) {
        parent = parent ? parent : this.getDefaultParent();
        /** @type {?} */
        var cells = this.getChildCells(parent);
        /** @type {?} */
        var cell = (/** @type {?} */ (cells.find((/**
         * @param {?} it
         * @return {?}
         */
        function (it) {
            if (it instanceof Cell) {
                return it.flowElement && it.flowElement.Id == flowEltId;
            }
            else {
                return false;
            }
        }))));
        return cell;
    };
    /**
     * @param {?} activities
     * @return {?}
     */
    FlowGraph.prototype.findFirstStartActivityInstance = /**
     * @param {?} activities
     * @return {?}
     */
    function (activities) {
        var e_3, _a;
        try {
            for (var activities_1 = tslib_1.__values(activities), activities_1_1 = activities_1.next(); !activities_1_1.done; activities_1_1 = activities_1.next()) {
                var act = activities_1_1.value;
                if (!act.precursorActivityDefinitionId) {
                    return act;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (activities_1_1 && !activities_1_1.done && (_a = activities_1.return)) _a.call(activities_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return null;
    };
    /**
     * @param {?} nodeCells
     * @return {?}
     */
    FlowGraph.prototype.findNoIncomingNodes = /**
     * @param {?} nodeCells
     * @return {?}
     */
    function (nodeCells) {
        var e_4, _a;
        /** @type {?} */
        var noIncomingNodes = new Array();
        var _loop_2 = function (node) {
            if (node.flowElement.ClrTypeID === 'wf.StartActivity') {
                return "continue";
            }
            if (!node.edges || node.edges.length === 0) {
                noIncomingNodes.push(node);
                return "continue";
            }
            if (!node.edges.some((/**
             * @param {?} edge
             * @return {?}
             */
            function (edge) { return ((/** @type {?} */ (edge.target))).flowElement.Id === node.flowElement.Id; }))) {
                noIncomingNodes.push(node);
            }
        };
        try {
            for (var nodeCells_1 = tslib_1.__values(nodeCells), nodeCells_1_1 = nodeCells_1.next(); !nodeCells_1_1.done; nodeCells_1_1 = nodeCells_1.next()) {
                var node = nodeCells_1_1.value;
                _loop_2(node);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (nodeCells_1_1 && !nodeCells_1_1.done && (_a = nodeCells_1.return)) _a.call(nodeCells_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return noIncomingNodes;
    };
    /**
     * @param {?} firstAct
     * @param {?} activities
     * @param {?} transInsList
     * @return {?}
     */
    FlowGraph.prototype.findEndActiInstList = /**
     * @param {?} firstAct
     * @param {?} activities
     * @param {?} transInsList
     * @return {?}
     */
    function (firstAct, activities, transInsList) {
        /** @type {?} */
        var endActiInstList = [];
        this.getNextTransitions(endActiInstList, firstAct.activityInstanceId, activities, transInsList);
        return endActiInstList;
    };
    /**
     * @param {?} endActiInstList
     * @param {?} sourceActInstId
     * @param {?} activities
     * @param {?} transInsList
     * @return {?}
     */
    FlowGraph.prototype.getNextTransitions = /**
     * @param {?} endActiInstList
     * @param {?} sourceActInstId
     * @param {?} activities
     * @param {?} transInsList
     * @return {?}
     */
    function (endActiInstList, sourceActInstId, activities, transInsList) {
        var e_5, _a;
        /** @type {?} */
        var nextTransitions = this.findTranInstsBySourceActInstId(sourceActInstId, transInsList);
        if (nextTransitions && nextTransitions.length > 0) {
            try {
                for (var nextTransitions_1 = tslib_1.__values(nextTransitions), nextTransitions_1_1 = nextTransitions_1.next(); !nextTransitions_1_1.done; nextTransitions_1_1 = nextTransitions_1.next()) {
                    var t = nextTransitions_1_1.value;
                    if (t.destinationActivityDefinitionId) {
                        this.getNextTransitions(endActiInstList, t.destinationActivityInstanceId, activities, transInsList);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (nextTransitions_1_1 && !nextTransitions_1_1.done && (_a = nextTransitions_1.return)) _a.call(nextTransitions_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            /** @type {?} */
            var actInst_1 = this.findActInstByActInstId(sourceActInstId, activities);
            if (actInst_1) {
                if (!endActiInstList.some((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.activityInstanceId === actInst_1.activityInstanceId; }))) {
                    endActiInstList.push(actInst_1);
                }
            }
        }
    };
    /**
     * @param {?} sourceActInstId
     * @param {?} transInsList
     * @return {?}
     */
    FlowGraph.prototype.findTranInstsBySourceActInstId = /**
     * @param {?} sourceActInstId
     * @param {?} transInsList
     * @return {?}
     */
    function (sourceActInstId, transInsList) {
        return transInsList.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.sourceActivityInstanceId === sourceActInstId; }));
    };
    /**
     * @param {?} actInstId
     * @param {?} activities
     * @return {?}
     */
    FlowGraph.prototype.findActInstByActInstId = /**
     * @param {?} actInstId
     * @param {?} activities
     * @return {?}
     */
    function (actInstId, activities) {
        return activities.find((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.activityInstanceId === actInstId; }));
    };
    /**
     * @param {?} actiDefId
     * @param {?} bpmnModel
     * @return {?}
     */
    FlowGraph.prototype.findDrawFlowElementsByActDefId = /**
     * @param {?} actiDefId
     * @param {?} bpmnModel
     * @return {?}
     */
    function (actiDefId, bpmnModel) {
        /** @type {?} */
        var nextFlowNodeDict = {};
        /** @type {?} */
        var nextSeqFlowDict = {};
        this.findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, actiDefId, bpmnModel);
        return {
            nextFlowNodeDict: nextFlowNodeDict,
            nextSeqFlowDict: nextSeqFlowDict,
        };
    };
    /**
     * @param {?} nextFlowNodeDict
     * @param {?} nextSeqFlowDict
     * @param {?} flowElementId
     * @param {?} bpmnModel
     * @return {?}
     */
    FlowGraph.prototype.findNextFlowElementsByFlowElementId = /**
     * @param {?} nextFlowNodeDict
     * @param {?} nextSeqFlowDict
     * @param {?} flowElementId
     * @param {?} bpmnModel
     * @return {?}
     */
    function (nextFlowNodeDict, nextSeqFlowDict, flowElementId, bpmnModel) {
        var _this = this;
        /** @type {?} */
        var flowElt = bpmnModel.DefaultProcess.GetFlowElement(flowElementId);
        if (flowElt && nextFlowNodeDict[flowElementId] == null) {
            if (flowElt instanceof SequenceFlow) {
                nextSeqFlowDict[flowElt.Id] = flowElt;
                this.findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, flowElt.TargetRef, bpmnModel);
            }
            else if (flowElt instanceof FlowNode) {
                nextFlowNodeDict[flowElt.Id] = flowElt;
                if ((flowElt instanceof EndEvent) == false) {
                    flowElt.Outgoings && flowElt.Outgoings.forEach((/**
                     * @param {?} outgoing
                     * @return {?}
                     */
                    function (outgoing) {
                        _this.findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, outgoing, bpmnModel);
                    }));
                }
            }
        }
    };
    return FlowGraph;
}(mxGraph));
export { FlowGraph };
if (false) {
    /** @type {?} */
    FlowGraph.prototype.bpmnModel;
    /** @type {?} */
    FlowGraph.prototype.autoTranslate;
    /** @type {?} */
    FlowGraph.prototype.scrollTileSize;
    /** @type {?} */
    FlowGraph.prototype.getPagePadding;
    /** @type {?} */
    FlowGraph.prototype.getPageSize;
    /** @type {?} */
    FlowGraph.prototype.getScrollTileSize;
    /** @type {?} */
    FlowGraph.prototype.getPageLayout;
    /** @type {?} */
    FlowGraph.prototype.cellStyleConfig;
    /** @type {?} */
    FlowGraph.prototype.actList;
    /** @type {?} */
    FlowGraph.prototype.transInsList;
    /** @type {?} */
    FlowGraph.prototype.mode;
    /** @type {?} */
    FlowGraph.prototype.rootPath;
    /**
     * 当前语言
     * @type {?}
     */
    FlowGraph.prototype.langCode;
}
//# sourceMappingURL=data:application/json;base64,