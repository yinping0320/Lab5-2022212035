/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { UIFlowchartComponent } from './task-flowchart/task-flowchart.component';
import { CommonModule } from '@angular/common';
import { HttpService } from '@ecp-caf/caf-common';
import { UiFlowchartService } from './services/ui-flowchart.service';
import { WFFlowchartService } from './wf-flowchart.service';
import { MessagerModule } from '@farris/ui-messager';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { TranslatePipe } from './services/translate.pipe';
import { LayoutModule } from '@farris/ui-layout';
import { FarrisSectionModule } from '@farris/ui-section';
import { WfApprovalLogsModule } from '@gsp-wf/wf-approval-logs';
import { ComboListModule } from '@farris/ui-combo-list';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { DatagridModule } from '@farris/ui-datagrid';
import { NotifyModule } from '@farris/ui-notify';
import { LoadingModule } from '@farris/ui-loading';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { SplitterModule } from '@farris/ui-splitter';
var UiFlowchartModule = /** @class */ (function () {
    function UiFlowchartModule() {
    }
    UiFlowchartModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        UIFlowchartComponent,
                        TranslatePipe
                    ],
                    imports: [
                        LayoutModule,
                        CommonModule,
                        FarrisDialogModule,
                        MessagerModule.forRoot({
                            width: 500
                        }),
                        FarrisSectionModule,
                        WfApprovalLogsModule,
                        ComboListModule,
                        ReactiveFormsModule,
                        FormsModule,
                        FDropdownDirectiveTypeModule,
                        DatagridModule,
                        NotifyModule,
                        LoadingModule,
                        FarrisTabsModule.forRoot(),
                        SplitterModule
                    ],
                    exports: [UIFlowchartComponent],
                    providers: [
                        HttpService,
                        UiFlowchartService,
                        WFFlowchartService,
                    ],
                    entryComponents: [
                        UIFlowchartComponent
                    ]
                },] }
    ];
    return UiFlowchartModule;
}());
export { UiFlowchartModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktZmxvd2NoYXJ0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2YvdWktZmxvd2NoYXJ0LyIsInNvdXJjZXMiOlsibGliL3VpLWZsb3djaGFydC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDakYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRDtJQUFBO0lBaUNpQyxDQUFDOztnQkFqQ2pDLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osb0JBQW9CO3dCQUNwQixhQUFhO3FCQUFDO29CQUNoQixPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixZQUFZO3dCQUNaLGtCQUFrQjt3QkFDbEIsY0FBYyxDQUFDLE9BQU8sQ0FBQzs0QkFDckIsS0FBSyxFQUFFLEdBQUc7eUJBQ1gsQ0FBQzt3QkFDRixtQkFBbUI7d0JBQ25CLG9CQUFvQjt3QkFDcEIsZUFBZTt3QkFDZixtQkFBbUI7d0JBQ25CLFdBQVc7d0JBQ1gsNEJBQTRCO3dCQUM1QixjQUFjO3dCQUNkLFlBQVk7d0JBQ1osYUFBYTt3QkFDYixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzFCLGNBQWM7cUJBQ2Y7b0JBQ0QsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7b0JBQy9CLFNBQVMsRUFBRTt3QkFDVCxXQUFXO3dCQUNYLGtCQUFrQjt3QkFDbEIsa0JBQWtCO3FCQUNuQjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2Ysb0JBQW9CO3FCQUNyQjtpQkFDRjs7SUFDZ0Msd0JBQUM7Q0FBQSxBQWpDbEMsSUFpQ2tDO1NBQXJCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFVJRmxvd2NoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi90YXNrLWZsb3djaGFydC90YXNrLWZsb3djaGFydC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBVaUZsb3djaGFydFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3VpLWZsb3djaGFydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgV0ZGbG93Y2hhcnRTZXJ2aWNlIH0gZnJvbSAnLi93Zi1mbG93Y2hhcnQuc2VydmljZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEZhcnJpc0RpYWxvZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGlhbG9nJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJy4vc2VydmljZXMvdHJhbnNsYXRlLnBpcGUnO1xyXG5pbXBvcnQgeyBMYXlvdXRNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWxheW91dCc7XHJcbmltcG9ydCB7IEZhcnJpc1NlY3Rpb25Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXNlY3Rpb24nO1xyXG5pbXBvcnQgeyBXZkFwcHJvdmFsTG9nc01vZHVsZSB9IGZyb20gJ0Bnc3Atd2Yvd2YtYXBwcm92YWwtbG9ncyc7XHJcbmltcG9ydCB7IENvbWJvTGlzdE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbGlzdCc7XHJcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUsIEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBGRHJvcGRvd25EaXJlY3RpdmVUeXBlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kcm9wZG93bic7XHJcbmltcG9ydCB7IERhdGFncmlkTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IE5vdGlmeU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgTG9hZGluZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9hZGluZyc7XHJcbmltcG9ydCB7IEZhcnJpc1RhYnNNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRhYnMnO1xyXG5pbXBvcnQgeyBTcGxpdHRlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktc3BsaXR0ZXInO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIFVJRmxvd2NoYXJ0Q29tcG9uZW50LFxyXG4gICAgVHJhbnNsYXRlUGlwZV0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgTGF5b3V0TW9kdWxlLFxyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgRmFycmlzRGlhbG9nTW9kdWxlLFxyXG4gICAgTWVzc2FnZXJNb2R1bGUuZm9yUm9vdCh7XHJcbiAgICAgIHdpZHRoOiA1MDBcclxuICAgIH0pLFxyXG4gICAgRmFycmlzU2VjdGlvbk1vZHVsZSxcclxuICAgIFdmQXBwcm92YWxMb2dzTW9kdWxlLFxyXG4gICAgQ29tYm9MaXN0TW9kdWxlLFxyXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgRkRyb3Bkb3duRGlyZWN0aXZlVHlwZU1vZHVsZSxcclxuICAgIERhdGFncmlkTW9kdWxlLFxyXG4gICAgTm90aWZ5TW9kdWxlLFxyXG4gICAgTG9hZGluZ01vZHVsZSxcclxuICAgIEZhcnJpc1RhYnNNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgU3BsaXR0ZXJNb2R1bGVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtVSUZsb3djaGFydENvbXBvbmVudF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBIdHRwU2VydmljZSxcclxuICAgIFVpRmxvd2NoYXJ0U2VydmljZSxcclxuICAgIFdGRmxvd2NoYXJ0U2VydmljZSxcclxuICBdLFxyXG4gIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgVUlGbG93Y2hhcnRDb21wb25lbnRcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBVaUZsb3djaGFydE1vZHVsZSB7IH1cclxuIl19