/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxEvent, mxConstants, mxGraphSelectionModel, mxEventSource } from "@edp-pmf/mxgraph-ts";
import { FlowGraph } from "./FlowGraph";
export class FlowChart extends mxEventSource {
    /**
     * @param {?} container
     * @param {?} config
     */
    constructor(container, config) {
        super();
        this.mode = 'complete';
        this.actList = [];
        this.transInsList = [];
        this.rootPath = ''; //基路径
        //基路径
        /**
         * 当前语言
         */
        this.langCode = ((/** @type {?} */ (window))).gspframeworkService && ((/** @type {?} */ (window))).gspframeworkService.rtf.language.getLanguageCode() || localStorage.getItem('languageCode') || 'zh-CHS';
        try {
            this.rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
        this.container = container;
        this.createDiv();
        this.graph = this.createGraph(config);
        window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.resetScrollbars();
        }), 0);
        this.refresh();
        this.resizeHandler = (/**
         * @return {?}
         */
        () => {
            window.setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.graph != null) {
                    this.refresh();
                }
            }), 0);
        });
        mxEvent.addListener(window, 'resize', this.resizeHandler);
        this.graph.getSelectionModel().addListener(mxEvent.CHANGE, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            this.cellSelect(sender, evt);
        }));
    }
    /**
     * 设置当前语言
     * @param {?} lang
     * @return {?}
     */
    setLanguage(lang) {
        this.langCode = lang;
        if (this.graph) {
            this.graph.langCode = lang;
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    switchMode({ mode, actiInstList, transInsList }) {
        this.mode = mode;
        this.actList = actiInstList;
        this.transInsList = transInsList;
        this.graph.actList = this.actList;
        this.graph.transInsList = this.transInsList;
        this.graph.mode = this.mode;
        this.graph.reloadBpmnModel();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    load(data) {
        if (data) {
            this.processInstance = data.processInstance;
            this.actList = data.actiInstList;
            this.transInsList = data.transInsList;
            this.mode = data.mode;
            this.graph.actList = this.actList;
            this.graph.transInsList = this.transInsList;
            this.graph.mode = this.mode;
            this.graph.loadBpmnModel(data.content);
            this.resetScrollbars();
        }
    }
    /**
     * @return {?}
     */
    createDiv() {
        this.diagramContainer = document.createElement('div');
        this.diagramContainer.className = 'flowChartContainer';
        this.container.appendChild(this.diagramContainer);
        setTimeout((/**
         * @return {?}
         */
        () => {
            // this.diagramContainer.style.overflow = 'hidden';
            mxEvent.addListener(this.diagramContainer, 'mouseover', (/**
             * @return {?}
             */
            () => {
                // this.diagramContainer.style.overflow = 'auto';
                this.diagramContainer.classList.add('active');
            }));
            mxEvent.addListener(this.diagramContainer, 'mouseleave', (/**
             * @return {?}
             */
            () => {
                // this.diagramContainer.style.overflow = 'hidden';
                this.diagramContainer.classList.remove('active');
            }));
        }), 0);
        /** @type {?} */
        const buttonIn = document.createElement('a');
        buttonIn.setAttribute('href', 'javascript:void(0);');
        /** @type {?} */
        let buttonInImg = document.createElement('img');
        buttonIn.style.marginRight = '10px';
        buttonInImg.src = this.rootPath + '/platform/runtime/common/web/@gsp-wf/wf-process-editor/images/zoomIn.svg';
        buttonInImg.style.display = "inline-block";
        buttonInImg.style.verticalAlign = "middle";
        buttonIn.appendChild(buttonInImg);
        mxEvent.addListener(buttonIn, 'click', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.graph.zoomIn();
        }));
        /** @type {?} */
        const buttonOut = document.createElement('a');
        buttonOut.setAttribute('href', 'javascript:void(0);');
        /** @type {?} */
        let buttonOutImg = document.createElement('img');
        buttonOutImg.src = this.rootPath + '/platform/runtime/common/web/@gsp-wf/wf-process-editor/images/zoomOut.svg';
        buttonOutImg.style.display = "inline-block";
        buttonOutImg.style.verticalAlign = "middle";
        buttonOut.appendChild(buttonOutImg);
        mxEvent.addListener(buttonOut, 'click', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.graph.zoomOut();
        }));
        /** @type {?} */
        const zoomBar = document.createElement('div');
        zoomBar.className = 'zoomBar';
        zoomBar.style.position = 'absolute';
        zoomBar.style.top = '10px';
        zoomBar.style.right = '20px';
        zoomBar.appendChild(buttonIn);
        zoomBar.appendChild(buttonOut);
        // zoomBar.appendChild(zoom);
        this.container.appendChild(zoomBar);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    createGraph(config) {
        mxConstants.VERTEX_SELECTION_STROKEWIDTH = 1;
        mxConstants.VERTEX_SELECTION_COLOR = '#0000CD';
        mxConstants.VERTEX_SELECTION_DASHED = true;
        /** @type {?} */
        const graph = new FlowGraph(this.diagramContainer, config);
        // 创建无限大画布
        graph.createInfiniteCanvas();
        // 创建后需要调用一次才生效
        graph.sizeDidChange();
        graph.popupMenuHandler.autoExpand = true;
        graph.popupMenuHandler.factoryMethod = (/**
         * @param {?} menu
         * @param {?} cell
         * @param {?} evt
         * @return {?}
         */
        (menu, cell, evt) => {
            if (cell != null
                && cell.getId().indexOf('UserActivity') > -1
                && this.actList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.activityDefinitionId === cell.getId())) > -1
                && this.processInstance) {
                /** @type {?} */
                const actInstId = this.actList.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.activityDefinitionId === cell.getId())).activityInstanceId;
                menu.addItem('查看单据', null, (/**
                 * @return {?}
                 */
                () => {
                    this.viewForm(this.processInstance.id, actInstId, this.processInstance.bizInstId);
                }));
            }
            if (cell != null
                && cell.getId().indexOf('AifCreationBillActivity') > -1
                && this.actList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.activityDefinitionId === cell.getId())) > -1
                && this.processInstance) {
                // 筛选状态是Running的自动生单活动实例
                /** @type {?} */
                const actInsts = this.actList.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.activityDefinitionId === cell.getId() && a.state == "RUNNING"));
                if (actInsts.length == 1) {
                    /** @type {?} */
                    const actInst = actInsts[0];
                    menu.addItem('重试', null, (/**
                     * @return {?}
                     */
                    () => {
                        this.retryAifCreation(this.processInstance.id, actInst.activityInstanceId, this.processInstance.bizInstId);
                    }));
                }
            }
        });
        return graph;
    }
    /**
     * @param {?} sender
     * @param {?} evt
     * @return {?}
     */
    cellSelect(sender, evt) {
        if (!(sender instanceof mxGraphSelectionModel)) {
            return;
        }
        /** @type {?} */
        const selectedCell = sender.cells[0];
        if (selectedCell) {
            if (selectedCell.vertex) {
                /** @type {?} */
                const selectId = selectedCell.getId();
                // 选中子流程节点时，弹出子流程图
                if (selectId && selectId.indexOf('CallActivitySubProcess') > -1
                    && this.actList.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.state !== 'FORECAST'
                        && a.activityDefinitionId === selectId)) > -1) {
                    /** @type {?} */
                    const actInsts = this.actList.filter((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.state !== 'FORECAST' && a.activityDefinitionId === selectId));
                    /** @type {?} */
                    const activeInst = actInsts.find((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.state === 'RUNNING'));
                    if (activeInst) {
                        this.viewChildProcessChart(activeInst);
                    }
                    else {
                        this.viewChildProcessChart(actInsts[0]);
                    }
                }
                else {
                    this.ngComp.viewLogs({ type: 'activity', actiDefId: selectedCell.id });
                }
            }
            else {
                this.ngComp.viewLogs({ type: 'sequence' });
            }
        }
        else {
            this.ngComp.viewLogs({ type: 'process' });
        }
    }
    /**
     * @param {?} actInst
     * @return {?}
     */
    viewChildProcessChart(actInst) {
        this.ngComp.viewChild(actInst, this.processInstance);
    }
    /**
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    viewForm(procInstId, actInstId, bizInstId) {
        this.ngComp.viewForm(procInstId, actInstId, bizInstId);
    }
    /**
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    retryAifCreation(procInstId, actInstId, bizInstId) {
        this.ngComp.retryAifCreation(procInstId, actInstId, bizInstId);
    }
    /**
     * @return {?}
     */
    resetScrollbars() {
        /** @type {?} */
        let bounds = this.graph.getGraphBounds();
        /** @type {?} */
        let width = Math.max(bounds.width * this.graph.view.scale, 0);
        // this.getScrollTileSize().width * this.graph.view.scale);
        /** @type {?} */
        let height = Math.max(bounds.height * this.graph.view.scale, 0);
        this.graph.container.scrollTop = Math.floor(Math.max(0, bounds.y - Math.max(20, (this.graph.container.clientHeight - height) / 2)));
        this.graph.container.scrollLeft = Math.floor(Math.max(0, bounds.x - Math.max(0, (this.graph.container.clientWidth - width) / 2)));
    }
    /**
     * @return {?}
     */
    refresh() {
        this.resetScrollbars();
    }
    /**
     * @return {?}
     */
    reloadBpmnModel() {
        this.graph.removeCells(this.graph.getChildCells(this.graph.getDefaultParent()));
    }
}
if (false) {
    /** @type {?} */
    FlowChart.prototype.ngComp;
    /** @type {?} */
    FlowChart.prototype.container;
    /** @type {?} */
    FlowChart.prototype.graph;
    /** @type {?} */
    FlowChart.prototype.diagramContainer;
    /** @type {?} */
    FlowChart.prototype.button;
    /** @type {?} */
    FlowChart.prototype.resizeHandler;
    /** @type {?} */
    FlowChart.prototype.mode;
    /** @type {?} */
    FlowChart.prototype.processInstance;
    /** @type {?} */
    FlowChart.prototype.bpmnModel;
    /** @type {?} */
    FlowChart.prototype.actList;
    /** @type {?} */
    FlowChart.prototype.transInsList;
    /** @type {?} */
    FlowChart.prototype.rootPath;
    /**
     * 当前语言
     * @type {?}
     */
    FlowChart.prototype.langCode;
}
//# sourceMappingURL=data:application/json;base64,