/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxGraph, mxEvent, mxConstants, mxPoint, mxRectangle, mxUtils, mxGeometry } from "@edp-pmf/mxgraph-ts";
import { EndEvent, BpmnModel, Process, BPMNDiagram, SequenceFlow, FlowNode, Node, Edge, FlowNodeState, SequenceFlowState } from "@edp-pmf/bpmn-model";
import { StartActivity, UserActivity, CallActivitySubProcess, AutoActivity, IntermediateCatchEventImpl, OperationActivity, MessageActivity, NotifyActivity, AifCreationBillActivity } from "@gsp-wf/wf-process-model";
import { Cell } from "./entity/Cell";
export class FlowGraph extends mxGraph {
    /**
     * @param {?} container
     * @param {?=} cellStyleConfig
     */
    constructor(container, cellStyleConfig) {
        super(container);
        this.scrollTileSize = new mxRectangle(0, 0, 400, 600);
        this.cellStyleConfig = {
            edgeStyleDic: {},
            shapeStyleDic: {},
        };
        this.actList = [];
        this.transInsList = [];
        this.rootPath = ''; //基路径
        //基路径
        /**
         * 当前语言
         */
        this.langCode = ((/** @type {?} */ (window))).gspframeworkService && ((/** @type {?} */ (window))).gspframeworkService.rtf.language.getLanguageCode() || localStorage.getItem('languageCode') || 'zh-CHS';
        //获取基路径
        try {
            this.rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
        this.cellStyleConfig = cellStyleConfig ? cellStyleConfig : this.cellStyleConfig;
        this.autoScroll = false;
        this.autoExtend = true;
        this.pageVisible = false;
        //this.panningHandler.ignoreCell = true;
        //this.setPanning(true);
        this.setCellsSelectable(true);
        this.setDisconnectOnMove(false);
        //节点不可改变大小
        this.setCellsResizable(false);
        //cell是否可以连线
        this.setConnectable(false);
        //禁止操作
        this.setEnabled(true);
        //设置cell文本是否可移动
        this.setVertexLabelsMovable(false);
        this.setCellsLocked(true);
        //不允许图上存在没有连接活动节点的线（防止拖动线连接点导致失去连接）,还没有找到不允许拖动连接控制点的属性
        this.setAllowDanglingEdges(false);
        mxEvent.disableContextMenu(container);
        // 设置默认样式
        this.setDefaultStyles();
    }
    /**
     * 重写创建节点对象方法
     * @param {?} parent
     * @param {?} id
     * @param {?} value
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} style
     * @param {?} relative
     * @return {?}
     */
    createVertex(parent, id, value, x, y, width, height, style, relative) {
        // Creates the geometry for the vertex
        /** @type {?} */
        const geometry = new mxGeometry(x, y, width, height);
        geometry.relative = (relative != null) ? relative : false;
        // Creates the vertex
        /** @type {?} */
        const vertex = new Cell(value, geometry, style);
        vertex.setId(id);
        vertex.setVertex(true);
        vertex.setConnectable(true);
        return vertex;
    }
    /**
     * 重写创建边对象方法
     * @param {?} parent
     * @param {?} id
     * @param {?} value
     * @param {?} source
     * @param {?} target
     * @param {?} style
     * @return {?}
     */
    createEdge(parent, id, value, source, target, style) {
        // Creates the edge
        /** @type {?} */
        var edge = new Cell(value, new mxGeometry(), style);
        edge.setId(id);
        edge.setEdge(true);
        edge.geometry.relative = true;
        return edge;
    }
    /**
     * 设置默认样式
     * @return {?}
     */
    setDefaultStyles() {
        /** @type {?} */
        const styleSheet = this.getStylesheet();
        // 节点默认样式
        /** @type {?} */
        const vertexStyle = styleSheet.getDefaultVertexStyle();
        vertexStyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;
        vertexStyle[mxConstants.STYLE_VERTICAL_LABEL_POSITION] = mxConstants.ALIGN_BOTTOM;
        vertexStyle[mxConstants.STYLE_FONTSIZE] = 12;
        vertexStyle[mxConstants.STYLE_FONTFAMILY] = 'Helvetica';
        vertexStyle[mxConstants.STYLE_FONTCOLOR] = "#333";
        // 连线样式默认为正交
        /** @type {?} */
        const edgeStyle = styleSheet.getDefaultEdgeStyle();
        edgeStyle[mxConstants.STYLE_SOURCE_PORT] = 'e';
        edgeStyle[mxConstants.STYLE_TARGET_PORT] = 'w';
        edgeStyle[mxConstants.STYLE_EDGE] = mxConstants.EDGESTYLE_ORTHOGONAL;
        edgeStyle[mxConstants.STYLE_ROUNDED] = 1;
        edgeStyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';
        edgeStyle[mxConstants.STYLE_FONTSIZE] = 12;
        edgeStyle[mxConstants.STYLE_FONTFAMILY] = 'Helvetica';
    }
    /**
     * 创建无限大画布
     * @return {?}
     */
    createInfiniteCanvas() {
        this.getPagePadding = (/**
         * @return {?}
         */
        () => {
            return new mxPoint(Math.max(0, Math.round(this.container.offsetWidth - 34)), Math.max(0, Math.round(this.container.offsetHeight - 34)));
        });
        this.getScrollTileSize = (/**
         * @return {?}
         */
        () => {
            if (this.scrollTileSize == null) {
                this.scrollTileSize = new mxRectangle(0, 0, 400, 600);
            }
            return this.scrollTileSize;
        });
        this.getPageSize = (/**
         * @return {?}
         */
        () => {
            return (this.pageVisible) ? new mxRectangle(0, 0, this.pageFormat.width * this.pageScale, this.pageFormat.height * this.pageScale) : this.getScrollTileSize();
        });
        this.getPageLayout = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let size = (this.pageVisible) ? this.getPageSize() : this.getScrollTileSize();
            /** @type {?} */
            let bounds = this.getGraphBounds();
            if (bounds.width == 0 || bounds.height == 0) {
                return new mxRectangle(0, 0, 1, 1);
            }
            else {
                // Computes untransformed graph bounds
                /** @type {?} */
                let x = Math.ceil(bounds.x / this.view.scale - this.view.translate.x);
                /** @type {?} */
                let y = Math.ceil(bounds.y / this.view.scale - this.view.translate.y);
                /** @type {?} */
                let w = Math.floor(bounds.width / this.view.scale);
                /** @type {?} */
                let h = Math.floor(bounds.height / this.view.scale);
                /** @type {?} */
                let x0 = Math.floor(x / size.width);
                /** @type {?} */
                let y0 = Math.floor(y / size.height);
                /** @type {?} */
                let w0 = Math.ceil((x + w) / size.width) - x0;
                /** @type {?} */
                let h0 = Math.ceil((y + h) / size.height) - y0;
                return new mxRectangle(x0, y0, w0, h0);
            }
        });
        this.getPreferredPageSize = (/**
         * @param {?} bounds
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        (bounds, width, height) => {
            /** @type {?} */
            let pages = this.getPageLayout();
            /** @type {?} */
            let size = this.getPageSize();
            return new mxRectangle(0, 0, pages.width * size.width, pages.height * size.height);
        });
        // 重写画布大小变化后方法
        /** @type {?} */
        const graphSizeDidChange = this.sizeDidChange;
        this.sizeDidChange = (/**
         * @return {?}
         */
        () => {
            if (this.container != null && mxUtils.hasScrollbars(this.container)) {
                /** @type {?} */
                let pages = this.getPageLayout();
                /** @type {?} */
                let pad = this.getPagePadding();
                /** @type {?} */
                let size = this.getPageSize();
                // Updates the minimum graph size
                /** @type {?} */
                let minw = Math.ceil(2 * pad.x / this.view.scale + pages.width * size.width);
                /** @type {?} */
                let minh = Math.ceil(2 * pad.y / this.view.scale + pages.height * size.height);
                /** @type {?} */
                let min = this.minimumGraphSize;
                // LATER: Fix flicker of scrollbar size in IE quirks mode
                // after delayed call in window.resize event handler
                if (min == null || min.width != minw || min.height != minh) {
                    this.minimumGraphSize = new mxRectangle(0, 0, minw, minh);
                }
                // Updates auto-translate to include padding and graph size
                /** @type {?} */
                let dx = pad.x / this.view.scale - pages.x * size.width;
                /** @type {?} */
                let dy = pad.y / this.view.scale - pages.y * size.height;
                if (!this.autoTranslate && (this.view.translate.x != dx || this.view.translate.y != dy)) {
                    this.autoTranslate = true;
                    ((/** @type {?} */ (this.view))).x0 = pages.x;
                    ((/** @type {?} */ (this.view))).y0 = pages.y;
                    /** @type {?} */
                    let tx = this.view.translate.x;
                    /** @type {?} */
                    let ty = this.view.translate.y;
                    this.view.setTranslate(dx, dy);
                    this.container.scrollLeft += (dx - tx) * this.view.scale;
                    this.container.scrollTop += (dy - ty) * this.view.scale;
                    this.autoTranslate = false;
                    return;
                }
                graphSizeDidChange.apply(this, []);
            }
        });
        // 重写view获取背景页大小
        this.view.getBackgroundPageBounds = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let layout = this.getPageLayout();
            /** @type {?} */
            let page = this.getPageSize();
            return new mxRectangle(this.view.scale * (this.view.translate.x + layout.x * page.width), this.view.scale * (this.view.translate.y + layout.y * page.height), this.view.scale * layout.width * page.width, this.view.scale * layout.height * page.height);
        });
        // 重写view validate方法
        /** @type {?} */
        const graphViewValidate = this.view.validate;
        this.view.validate = (/**
         * @param {?=} cell
         * @return {?}
         */
        (cell) => {
            if (this.container != null && mxUtils.hasScrollbars(this.container)) {
                /** @type {?} */
                let pad = this.getPagePadding();
                /** @type {?} */
                let size = this.getPageSize();
                /** @type {?} */
                let tx = this.view.translate.x;
                /** @type {?} */
                let ty = this.view.translate.y;
                this.view.translate.x = pad.x / this.view.scale - (((/** @type {?} */ (this.view))).x0 || 0) * size.width;
                this.view.translate.y = pad.y / this.view.scale - (((/** @type {?} */ (this.view))).y0 || 0) * size.height;
            }
            graphViewValidate.apply(this.view, [cell]);
        });
    }
    /**
     * 创建BpmnModel
     * @return {?}
     */
    createBpmnModel() {
        /** @type {?} */
        const bpmnModel = new BpmnModel();
        bpmnModel.TargetNamespace = "Default_Namespace";
        bpmnModel.DefaultProcess = new Process(bpmnModel);
        bpmnModel.DefaultDiagram = new BPMNDiagram(bpmnModel);
        bpmnModel.DefaultDiagram.BpmnPlane.BpmnElementId = bpmnModel.DefaultProcess.Id;
        return bpmnModel;
    }
    /**
     * 加载BpmnModel并画图
     * @param {?} json
     * @return {?}
     */
    loadBpmnModel(json) {
        this.removeCells(this.getChildCells(this.getDefaultParent()));
        this.bpmnModel = this.createBpmnModel();
        this.bpmnModel.LoadFromJson(json);
        this.drawBpmnGraph(this.bpmnModel);
    }
    /**
     * 重新加载BpmnModel并画图
     * @param {?=} json
     * @return {?}
     */
    reloadBpmnModel(json) {
        this.removeCells(this.getChildCells(this.getDefaultParent()));
        if (json) {
            this.loadBpmnModel(json);
        }
        else {
            this.drawBpmnGraph(this.bpmnModel);
        }
    }
    /**
     * 根据BpmnModel画图
     * @param {?} bpmnModel
     * @return {?}
     */
    drawBpmnGraph(bpmnModel) {
        const { nodeDict, edgeDict } = this.buildFlowDiagDict(bpmnModel);
        /** @type {?} */
        const flowDict = this.buildFlowDict(bpmnModel);
        this.drawNodeCells(flowDict, nodeDict);
        this.drawEdgeCells(flowDict, edgeDict);
        this.getModel().beginUpdate();
        if (this.mode === 'simulation') {
            this.drawInterceptGraph(flowDict, nodeDict, edgeDict);
            this.addJumpEdges(flowDict);
        }
        this.getModel().endUpdate();
    }
    /**
     * @private
     * @param {?} flowDict
     * @param {?} nodeDict
     * @param {?} edgeDict
     * @return {?}
     */
    drawInterceptGraph(flowDict, nodeDict, edgeDict) {
        /** @type {?} */
        const firstAct = this.findFirstStartActivityInstance(this.actList);
        // todo：此处待修复
        /** @type {?} */
        let endActDef;
        for (const key in flowDict) {
            if (flowDict[key] instanceof EndEvent) {
                endActDef = (/** @type {?} */ (flowDict[key]));
            }
        }
        if (firstAct) {
            /** @type {?} */
            const endActiInstList = this.findEndActiInstList(firstAct, this.actList, this.transInsList);
            endActiInstList.forEach(((/**
             * @param {?} endActiInst
             * @return {?}
             */
            endActiInst => {
                if (endActiInst.activityDefinitionId !== endActDef.Id) {
                    this.drawNextFlowChart(endActiInst.activityDefinitionId, nodeDict, edgeDict);
                }
            })));
        }
    }
    /**
     * @param {?} flowDict
     * @return {?}
     */
    addJumpEdges(flowDict) {
        /** @type {?} */
        const nodeCells = (/** @type {?} */ ((this.getChildCells(this.getDefaultParent(), true) || [])));
        /** @type {?} */
        const noIncomingNodes = this.findNoIncomingNodes(nodeCells);
        for (const node of noIncomingNodes) {
            /** @type {?} */
            const actInst = this.actList.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.activityDefinitionId === node.flowElement.Id))[0];
            /** @type {?} */
            const cellId = actInst.precursorActivityDefinitionId + '_' + actInst.activityDefinitionId;
            /** @type {?} */
            const source = nodeCells.find((/**
             * @param {?} it
             * @return {?}
             */
            (it) => {
                return it.flowElement && it.flowElement.Id === actInst.precursorActivityDefinitionId;
            }));
            /** @type {?} */
            const target = nodeCells.find((/**
             * @param {?} it
             * @return {?}
             */
            (it) => {
                return it.flowElement && it.flowElement.Id === actInst.activityDefinitionId;
            }));
            /** @type {?} */
            const map = new Map();
            map.set('jump', true);
            /** @type {?} */
            const style = this.getEdgeStyle(null, null, map);
            /** @type {?} */
            const cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), cellId, '', source, target, style)));
            if (cell !== null) {
                cell.source = source;
                cell.target = target;
                cell.geometry.points = [
                // new mxPoint(source.geometry.x+ source.geometry.width/2, target.geometry.y+target.geometry.height/2)
                ];
                console.log(cell);
                this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
            }
        }
    }
    /**
     * 画节点
     * @param {?} flowDict
     * @param {?} nodeDict
     * @param {?=} additional
     * @return {?}
     */
    drawNodeCells(flowDict, nodeDict, additional = false) {
        Object.keys(nodeDict).forEach((/**
         * @param {?} bpmnModelElementId
         * @return {?}
         */
        (bpmnModelElementId) => {
            /** @type {?} */
            const flowElt = flowDict[bpmnModelElementId];
            /** @type {?} */
            const diagElt = (/** @type {?} */ (nodeDict[bpmnModelElementId]));
            if (flowElt == null) {
                return;
            }
            this.drawNodeCell(flowElt, diagElt, additional);
        }));
    }
    /**
     * 画单个节点
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @return {?}
     */
    drawNodeCell(flowElt, diagElt, additional) {
        /** @type {?} */
        const style = this.getVertexStyle(flowElt, diagElt, additional);
        /** @type {?} */
        let cell = null;
        /** @type {?} */
        let label = "";
        if (flowElt != null) {
            label = flowElt.Name;
            if (flowElt.NameLanguage && flowElt.NameLanguage[this.langCode] != null) {
                label = flowElt.NameLanguage[this.langCode];
            }
        }
        if (this.mode === 'simulation') {
            if (this.actList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.activityDefinitionId === flowElt.Id)) > -1) {
                cell = (/** @type {?} */ (this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style)));
            }
            else if (additional) {
                cell = (/** @type {?} */ (this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style)));
            }
        }
        else {
            cell = (/** @type {?} */ (this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style)));
        }
        if (cell == null) {
            return;
        }
        // const cell = this.insertVertex(this.getDefaultParent(), flowElt.Id, label, diagElt.Bounds.X, diagElt.Bounds.Y, diagElt.Bounds.Width, diagElt.Bounds.Height, style) as Cell;
        cell.flowElement = flowElt;
        cell.diagramElement = diagElt;
        this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
    }
    /**
     * 画连线
     * @param {?} flowDict
     * @param {?} edgeDict
     * @param {?=} additional
     * @param {?=} cut
     * @return {?}
     */
    drawEdgeCells(flowDict, edgeDict, additional = false, cut = false) {
        Object.keys(edgeDict).forEach((/**
         * @param {?} bpmnModelElementId
         * @return {?}
         */
        (bpmnModelElementId) => {
            /** @type {?} */
            const flowElt = (/** @type {?} */ (flowDict[bpmnModelElementId]));
            /** @type {?} */
            const diagElt = (/** @type {?} */ (edgeDict[bpmnModelElementId]));
            if (flowElt == null) {
                return;
            }
            this.drawEdgeCell(flowElt, diagElt, additional, cut);
        }));
    }
    /**
     * @private
     * @param {?} flowDict
     * @param {?} sourceId
     * @param {?} targetId
     * @return {?}
     */
    judgeConnectBetweenTwoNodes(flowDict, sourceId, targetId) {
        /** @type {?} */
        const source = (/** @type {?} */ (flowDict[sourceId]));
        /** @type {?} */
        const outGoings = source.Outgoings;
        if (!outGoings || outGoings.length === 0) {
            return false;
        }
        for (const outGoing of outGoings) {
            /** @type {?} */
            const sequenceFlow = (/** @type {?} */ (flowDict[outGoing]));
            if (sequenceFlow.TargetRef === targetId) {
                return true;
            }
        }
        return false;
    }
    /**
     * 画单条连线
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    drawEdgeCell(flowElt, diagElt, additional, cut) {
        // 获取已插入的节点元素
        /** @type {?} */
        const nodeCells = (/** @type {?} */ ((this.getChildCells(this.getDefaultParent(), true) || [])));
        /** @type {?} */
        const source = nodeCells.find((/**
         * @param {?} it
         * @return {?}
         */
        (it) => {
            return it.flowElement && it.flowElement.Id === flowElt.SourceRef;
        }));
        /** @type {?} */
        const target = nodeCells.find((/**
         * @param {?} it
         * @return {?}
         */
        (it) => {
            return it.flowElement && it.flowElement.Id === flowElt.TargetRef;
        }));
        /** @type {?} */
        const map = new Map();
        map.set('additional', additional);
        map.set('cut', cut);
        /** @type {?} */
        const style = this.getEdgeStyle(flowElt, diagElt, map);
        /** @type {?} */
        let cell = null;
        /** @type {?} */
        let label = "";
        if (flowElt != null) {
            label = flowElt.Name;
            if (flowElt.NameLanguage && flowElt.NameLanguage[this.langCode] != null) {
                label = flowElt.NameLanguage[this.langCode];
            }
        }
        if (this.mode === 'simulation') {
            if (this.transInsList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.sourceActivityDefinitionId === flowElt.SourceRef
                && a.destinationActivityDefinitionId === flowElt.TargetRef)) > -1) {
                cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style)));
            }
            else if (additional || cut) {
                cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style)));
            }
        }
        else {
            cell = (/** @type {?} */ (this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style)));
        }
        if (cell == null) {
            return;
        }
        // const cell = this.insertEdge(this.getDefaultParent(), flowElt.Id, label, source, target, style) as Cell;
        // cell.geometry.relative = true;
        cell.flowElement = flowElt;
        cell.diagramElement = diagElt;
        cell.source = source;
        cell.target = target;
        cell.geometry.points = cell.geometry.points || [];
        // 判断是否为旧版本连线
        if (this.isOldBpmnEdge(diagElt)) {
            for (let i = 2; i < diagElt.Points.length; i++) {
                /** @type {?} */
                const pt = diagElt.Points[i];
                cell.geometry.points.push(new mxPoint(pt.X, pt.Y));
            }
            // 此行代码执行后可获取mxCellState
            this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
            //按坐标插入label
            /** @type {?} */
            const state = this.view.getState(cell);
            if (diagElt.BpmnLabel && state) {
                if (diagElt.BpmnLabel.Bounds.X === 0 && diagElt.BpmnLabel.Bounds.Y === 0) {
                    return;
                }
                /** @type {?} */
                const x = diagElt.BpmnLabel.Bounds.X + (state.x - state.paintBounds.x);
                /** @type {?} */
                const y = diagElt.BpmnLabel.Bounds.Y + (state.y - state.paintBounds.y);
                /** @type {?} */
                const edgeHandler = this.createEdgeHandler(state, undefined);
                edgeHandler.moveLabel(state, x, y);
                edgeHandler.destroy();
            }
        }
        else {
            for (let i = 1; i < diagElt.Points.length - 1; i++) {
                /** @type {?} */
                const pt = diagElt.Points[i];
                cell.geometry.points.push(new mxPoint(pt.X, pt.Y));
            }
            // 此行代码执行后可获取mxCellState
            this.moveCells([cell], undefined, undefined, undefined, this.getDefaultParent());
            //按坐标插入label
            /** @type {?} */
            const state = this.view.getState(cell);
            /** @type {?} */
            const scale = this.view.getScale();
            /** @type {?} */
            const translate = this.view.getTranslate();
            if (diagElt.BpmnLabel && state) {
                if (diagElt.BpmnLabel.Bounds.X === 0 && diagElt.BpmnLabel.Bounds.Y === 0) {
                    return;
                }
                /** @type {?} */
                const x = diagElt.BpmnLabel.Bounds.X * scale + translate.x;
                /** @type {?} */
                const y = diagElt.BpmnLabel.Bounds.Y * scale + translate.y;
                /** @type {?} */
                const edgeHandler = this.createEdgeHandler(state, undefined);
                edgeHandler.moveLabel(state, x, y);
                edgeHandler.destroy();
            }
        }
    }
    /**
     * 构建FlowElement字典，{ [flowEltId: string]: FlowElement }
     * @param {?} bpmnModel
     * @return {?}
     */
    buildFlowDict(bpmnModel) {
        /** @type {?} */
        let flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        return flowDict;
    }
    /**
     * 构建DiagramElement字典，{ [flowEltId: string]: DiagramElement }
     * @param {?} bpmnModel
     * @return {?}
     */
    buildFlowDiagDict(bpmnModel) {
        /** @type {?} */
        const nodeDict = {};
        /** @type {?} */
        const edgeDict = {};
        /** @type {?} */
        const diagramElts = (/** @type {?} */ (bpmnModel.DefaultDiagram.BpmnPlane.GetDiagramElements()));
        diagramElts && diagramElts.forEach((/**
         * @param {?} elt
         * @return {?}
         */
        elt => {
            if (elt instanceof Node) {
                nodeDict[elt.BpmnElementId] = elt;
            }
            else if (elt instanceof Edge) {
                edgeDict[elt.BpmnElementId] = elt;
            }
        }));
        return {
            nodeDict,
            edgeDict,
        };
    }
    /**
     * 判断是否为旧版本BPMNEdge
     *
     * 旧版本连线Points数组中[0]和[1]分别表示起点和终点，因取值错误，[0]和[1]坐标均为(0,0)，以此为依据判断是否为旧版本的连线
     * 新版本从起点到终点按顺序记录每一个点坐标
     * @param {?} bpmnEdge
     * @return {?}
     */
    isOldBpmnEdge(bpmnEdge) {
        if (bpmnEdge.Points.length >= 2) {
            /** @type {?} */
            const pt1 = bpmnEdge.Points[0];
            /** @type {?} */
            const pt2 = bpmnEdge.Points[1];
            if (pt1.X == 0 && pt1.Y == 0 && pt2.X == 0 && pt2.Y == 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * 获取节点样式
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @return {?}
     */
    getVertexStyle(flowElt, diagElt, additional) {
        /** @type {?} */
        const activityInstanceSlims = this.actList;
        /** @type {?} */
        let stateShapeStyle = null;
        // 特殊处理,业务活动要单独赋成人工操作类型的样式
        // if (flowElt.ClrTypeID === UserActivity.Clr_Type_ID) {
        //   stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[flowElt.ClrTypeID];
        // } else if (flowElt.ClrTypeID === OperationActivity.Clr_Type_ID) {
        //   stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[OperationActivity.Clr_Type_ID];
        // }
        if (flowElt instanceof UserActivity && flowElt.BizActivityID !== '') {
            stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[OperationActivity.Clr_Type_ID];
        }
        else {
            stateShapeStyle = this.cellStyleConfig.shapeStyleDic && this.cellStyleConfig.shapeStyleDic[flowElt.ClrTypeID];
        }
        if (stateShapeStyle == null) {
            return this.getVertexStyleOld(flowElt, additional);
        }
        /** @type {?} */
        let img = stateShapeStyle[FlowNodeState.Default] && stateShapeStyle[FlowNodeState.Default].image;
        if (!additional) {
            /** @type {?} */
            const acts = activityInstanceSlims.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.activityDefinitionId === flowElt.Id));
            if (acts && acts.length > 0) {
                if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.state === 'RUNNING')).length > 0) {
                    if (stateShapeStyle[FlowNodeState.Running]) {
                        img = stateShapeStyle[FlowNodeState.Running].image;
                    }
                }
                else if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.state === 'COMPLETED')).length > 0) {
                    if (stateShapeStyle[FlowNodeState.Completed]) {
                        img = stateShapeStyle[FlowNodeState.Completed].image;
                    }
                }
                else if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.state === 'TERMINATED')).length > 0) {
                    if (stateShapeStyle[FlowNodeState.Terminated]) {
                        img = stateShapeStyle[FlowNodeState.Terminated].image;
                    }
                }
            }
        }
        return img == null ? null : 'image=' + this.rootPath + img;
    }
    /**
     * 旧版diagramElement未存储样式信息
     * @param {?} flowElt
     * @param {?} additional
     * @return {?}
     */
    getVertexStyleOld(flowElt, additional) {
        /** @type {?} */
        let style;
        switch (flowElt.ClrTypeID) {
            //结束事件
            case "bpmn.EndEvent":
                style = 'end';
                break;
            //流程开始活动节点
            case StartActivity.Clr_Type_ID:
                style = 'start';
                break;
            // 业务活动节点
            case UserActivity.Clr_Type_ID:
                if (((/** @type {?} */ (flowElt))).BizActivityID) {
                    style = 'bizActivity';
                }
                else {
                    style = 'approval';
                }
                break;
            // 排他网关
            case 'bpmn.ExclusiveGateway':
                style = 'ExclusiveGateway';
                break;
            //并行网关
            case 'bpmn.ParallelGateway':
                style = 'ParallelGateway';
                break;
            case CallActivitySubProcess.Clr_Type_ID:
                style = 'sub';
                break;
            case AutoActivity.Clr_Type_ID:
                style = 'auto';
                break;
            case IntermediateCatchEventImpl.Clr_Type_ID:
                style = 'catchEvent';
                break;
            case OperationActivity.Clr_Type_ID:
                style = 'bizActivity';
                break;
            case MessageActivity.Clr_Type_ID:
                style = 'message';
                break;
            case NotifyActivity.Clr_Type_ID:
                style = 'notify';
                break;
            case AifCreationBillActivity.Clr_Type_ID:
                style = 'aifCreationActivity';
                break;
            default:
                break;
        }
        return 'image=' + this.rootPath + '/platform/runtime/common/web/@gsp-wf/wf-process-editor/images/' + style + this.getChartState(flowElt, additional) + ';';
    }
    /**
     * @param {?} flowElt
     * @param {?} additional
     * @return {?}
     */
    getChartState(flowElt, additional) {
        if (!additional) {
            /** @type {?} */
            const acts = this.actList.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.activityDefinitionId === flowElt.Id));
            if (acts && acts.length > 0) {
                if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.state === 'RUNNING')).length > 0) {
                    return '_light.gif';
                }
                else if (acts.filter((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.state === 'COMPLETED')).length > 0
                    || acts.filter((/**
                     * @param {?} act
                     * @return {?}
                     */
                    act => act.state === 'TERMINATED')).length > 0) {
                    return '_gray.png';
                }
                else {
                    return '.png';
                }
            }
        }
        return '.png';
    }
    /**
     * 获取连线样式
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} parameters
     * @return {?}
     */
    getEdgeStyle(flowElt, diagElt, parameters) {
        if (parameters.get('jump')) {
            /** @type {?} */
            let style = '';
            /** @type {?} */
            const stateEdgeStyle = this.cellStyleConfig.edgeStyleDic && this.cellStyleConfig.edgeStyleDic['bpmn.SequenceFlow'];
            if (stateEdgeStyle['jump']) {
                Object.keys(stateEdgeStyle['jump']).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    style += (`${key}=${stateEdgeStyle['jump'][key]};`);
                }));
                return style;
            }
            return null;
        }
        else {
            /** @type {?} */
            const stateEdgeStyle = this.cellStyleConfig.edgeStyleDic && this.cellStyleConfig.edgeStyleDic[flowElt.ClrTypeID];
            if (stateEdgeStyle == null) {
                return this.getEdgeStyleOld(flowElt, parameters.get('additional'), parameters.get('cut'));
            }
            /** @type {?} */
            const transitionInstanceSlims = this.transInsList;
            /** @type {?} */
            let style = '';
            if (parameters.get('cut')) {
                if (stateEdgeStyle[SequenceFlowState.Cut]) {
                    Object.keys(stateEdgeStyle[SequenceFlowState.Cut]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    (key) => {
                        style += (`${key}=${stateEdgeStyle[SequenceFlowState.Cut][key]};`);
                    }));
                    return style;
                }
            }
            if (parameters.get('additional')) {
                if (stateEdgeStyle[SequenceFlowState.Add]) {
                    Object.keys(stateEdgeStyle[SequenceFlowState.Add]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    (key) => {
                        style += (`${key}=${stateEdgeStyle[SequenceFlowState.Add][key]};`);
                    }));
                    return style;
                }
            }
            /** @type {?} */
            const transIns = transitionInstanceSlims.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.sourceActivityDefinitionId === flowElt.SourceRef && item.destinationActivityDefinitionId === flowElt.TargetRef));
            if (transIns && transIns.filter((/**
             * @param {?} t
             * @return {?}
             */
            t => t.state === 'COMPLETED')).length > 0) {
                if (stateEdgeStyle[SequenceFlowState.Completed]) {
                    Object.keys(stateEdgeStyle[SequenceFlowState.Completed]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    (key) => {
                        style += (`${key}=${stateEdgeStyle[SequenceFlowState.Completed][key]};`);
                    }));
                    return style;
                }
            }
            if (this.mode === 'simulation') {
                if (stateEdgeStyle[SequenceFlowState.Simulation]) {
                    Object.keys(stateEdgeStyle[SequenceFlowState.Simulation]).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    (key) => {
                        style += (`${key}=${stateEdgeStyle[SequenceFlowState.Simulation][key]};`);
                    }));
                    return style;
                }
            }
            if (stateEdgeStyle[SequenceFlowState.Default]) {
                Object.keys(stateEdgeStyle[SequenceFlowState.Default]).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    style += (`${key}=${stateEdgeStyle[SequenceFlowState.Default][key]};`);
                }));
            }
            return style;
        }
    }
    /**
     * 获取连线颜色
     * @param {?} flowElt
     * @param {?} diagElt
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    getStrokeColor(flowElt, diagElt, additional, cut) {
        /** @type {?} */
        const transitionInstanceSlims = this.transInsList;
        /** @type {?} */
        const stateEdgeStyle = this.cellStyleConfig.edgeStyleDic && this.cellStyleConfig.edgeStyleDic[flowElt.ClrTypeID];
        if (cut) {
            if (stateEdgeStyle[SequenceFlowState.Cut]) {
                return stateEdgeStyle[SequenceFlowState.Cut].strokeColor;
            }
        }
        if (additional) {
            if (stateEdgeStyle[SequenceFlowState.Add]) {
                return stateEdgeStyle[SequenceFlowState.Add].strokeColor;
            }
        }
        /** @type {?} */
        const transIns = transitionInstanceSlims.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.sourceActivityDefinitionId === flowElt.SourceRef && item.destinationActivityDefinitionId === flowElt.TargetRef));
        if (transIns && transIns.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.state === 'COMPLETED')).length > 0) {
            if (stateEdgeStyle[SequenceFlowState.Completed]) {
                return stateEdgeStyle[SequenceFlowState.Completed].strokeColor;
            }
        }
        if (this.mode === 'simulation') {
            if (stateEdgeStyle[SequenceFlowState.Simulation]) {
                return stateEdgeStyle[SequenceFlowState.Simulation].strokeColor;
            }
        }
        return stateEdgeStyle[SequenceFlowState.Default].strokeColor;
    }
    /**
     * 旧版diagramElement未存储样式信息
     * @param {?} seq
     * @param {?} additional
     * @param {?} cut
     * @return {?}
     */
    getEdgeStyleOld(seq, additional, cut) {
        if (cut) {
            return 'strokeColor=#FF4040';
        }
        if (additional) {
            return 'strokeColor=#59A1FF';
        }
        /** @type {?} */
        const transIns = this.transInsList.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.sourceActivityDefinitionId === seq.SourceRef && item.destinationActivityDefinitionId === seq.TargetRef));
        if (transIns && transIns.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.state === 'COMPLETED')).length > 0) {
            return 'strokeColor=#595959;strokeWidth=2;';
        }
        if (this.mode === 'simulation') {
            return 'strokeColor=#f59c24;dashed=1;';
        }
        else {
            return 'strokeColor=#59A1FF;';
        }
    }
    /**
     * @param {?} actiDefId
     * @param {?} nodeDict
     * @param {?} edgeDict
     * @return {?}
     */
    drawNextFlowChart(actiDefId, nodeDict, edgeDict) {
        const { nextFlowNodeDict, nextSeqFlowDict } = this.findDrawFlowElementsByActDefId(actiDefId, this.bpmnModel);
        /** @type {?} */
        const actDef = (/** @type {?} */ (this.bpmnModel.DefaultProcess.GetFlowElement(actiDefId)));
        /** @type {?} */
        const outgoings = actDef.Outgoings;
        // 先插入节点
        Object.keys(nextFlowNodeDict).forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const flowElt = nextFlowNodeDict[id];
            /** @type {?} */
            const diagElt = (/** @type {?} */ (nodeDict[flowElt.Id]));
            /** @type {?} */
            const cell = this.getCellByFlowElementId(flowElt.Id);
            if (!cell) {
                this.drawNodeCell(flowElt, diagElt, true);
            }
        }));
        // 再插入边
        Object.keys(nextSeqFlowDict).forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const flowElt = nextSeqFlowDict[id];
            /** @type {?} */
            const diagElt = (/** @type {?} */ (edgeDict[flowElt.Id]));
            /** @type {?} */
            const cell = this.getCellByFlowElementId(flowElt.Id);
            if (!cell) {
                if (outgoings.some((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o === flowElt.Id))) {
                    this.drawEdgeCell(flowElt, diagElt, true, true);
                }
                else {
                    this.drawEdgeCell(flowElt, diagElt, true, false);
                }
            }
        }));
    }
    /**
     * 根据flowElementId获取cell
     * @param {?} flowEltId
     * @param {?=} parent
     * @return {?}
     */
    getCellByFlowElementId(flowEltId, parent) {
        parent = parent ? parent : this.getDefaultParent();
        /** @type {?} */
        const cells = this.getChildCells(parent);
        /** @type {?} */
        const cell = (/** @type {?} */ (cells.find((/**
         * @param {?} it
         * @return {?}
         */
        it => {
            if (it instanceof Cell) {
                return it.flowElement && it.flowElement.Id == flowEltId;
            }
            else {
                return false;
            }
        }))));
        return cell;
    }
    /**
     * @param {?} activities
     * @return {?}
     */
    findFirstStartActivityInstance(activities) {
        for (const act of activities) {
            if (!act.precursorActivityDefinitionId) {
                return act;
            }
        }
        return null;
    }
    /**
     * @param {?} nodeCells
     * @return {?}
     */
    findNoIncomingNodes(nodeCells) {
        /** @type {?} */
        const noIncomingNodes = new Array();
        for (const node of nodeCells) {
            if (node.flowElement.ClrTypeID === 'wf.StartActivity') {
                continue;
            }
            if (!node.edges || node.edges.length === 0) {
                noIncomingNodes.push(node);
                continue;
            }
            if (!node.edges.some((/**
             * @param {?} edge
             * @return {?}
             */
            edge => ((/** @type {?} */ (edge.target))).flowElement.Id === node.flowElement.Id))) {
                noIncomingNodes.push(node);
            }
        }
        return noIncomingNodes;
    }
    /**
     * @param {?} firstAct
     * @param {?} activities
     * @param {?} transInsList
     * @return {?}
     */
    findEndActiInstList(firstAct, activities, transInsList) {
        /** @type {?} */
        const endActiInstList = [];
        this.getNextTransitions(endActiInstList, firstAct.activityInstanceId, activities, transInsList);
        return endActiInstList;
    }
    /**
     * @param {?} endActiInstList
     * @param {?} sourceActInstId
     * @param {?} activities
     * @param {?} transInsList
     * @return {?}
     */
    getNextTransitions(endActiInstList, sourceActInstId, activities, transInsList) {
        /** @type {?} */
        const nextTransitions = this.findTranInstsBySourceActInstId(sourceActInstId, transInsList);
        if (nextTransitions && nextTransitions.length > 0) {
            for (const t of nextTransitions) {
                if (t.destinationActivityDefinitionId) {
                    this.getNextTransitions(endActiInstList, t.destinationActivityInstanceId, activities, transInsList);
                }
            }
        }
        else {
            /** @type {?} */
            const actInst = this.findActInstByActInstId(sourceActInstId, activities);
            if (actInst) {
                if (!endActiInstList.some((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.activityInstanceId === actInst.activityInstanceId))) {
                    endActiInstList.push(actInst);
                }
            }
        }
    }
    /**
     * @param {?} sourceActInstId
     * @param {?} transInsList
     * @return {?}
     */
    findTranInstsBySourceActInstId(sourceActInstId, transInsList) {
        return transInsList.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.sourceActivityInstanceId === sourceActInstId));
    }
    /**
     * @param {?} actInstId
     * @param {?} activities
     * @return {?}
     */
    findActInstByActInstId(actInstId, activities) {
        return activities.find((/**
         * @param {?} a
         * @return {?}
         */
        a => a.activityInstanceId === actInstId));
    }
    /**
     * @param {?} actiDefId
     * @param {?} bpmnModel
     * @return {?}
     */
    findDrawFlowElementsByActDefId(actiDefId, bpmnModel) {
        /** @type {?} */
        const nextFlowNodeDict = {};
        /** @type {?} */
        const nextSeqFlowDict = {};
        this.findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, actiDefId, bpmnModel);
        return {
            nextFlowNodeDict,
            nextSeqFlowDict,
        };
    }
    /**
     * @param {?} nextFlowNodeDict
     * @param {?} nextSeqFlowDict
     * @param {?} flowElementId
     * @param {?} bpmnModel
     * @return {?}
     */
    findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, flowElementId, bpmnModel) {
        /** @type {?} */
        const flowElt = bpmnModel.DefaultProcess.GetFlowElement(flowElementId);
        if (flowElt && nextFlowNodeDict[flowElementId] == null) {
            if (flowElt instanceof SequenceFlow) {
                nextSeqFlowDict[flowElt.Id] = flowElt;
                this.findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, flowElt.TargetRef, bpmnModel);
            }
            else if (flowElt instanceof FlowNode) {
                nextFlowNodeDict[flowElt.Id] = flowElt;
                if ((flowElt instanceof EndEvent) == false) {
                    flowElt.Outgoings && flowElt.Outgoings.forEach((/**
                     * @param {?} outgoing
                     * @return {?}
                     */
                    outgoing => {
                        this.findNextFlowElementsByFlowElementId(nextFlowNodeDict, nextSeqFlowDict, outgoing, bpmnModel);
                    }));
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    FlowGraph.prototype.bpmnModel;
    /** @type {?} */
    FlowGraph.prototype.autoTranslate;
    /** @type {?} */
    FlowGraph.prototype.scrollTileSize;
    /** @type {?} */
    FlowGraph.prototype.getPagePadding;
    /** @type {?} */
    FlowGraph.prototype.getPageSize;
    /** @type {?} */
    FlowGraph.prototype.getScrollTileSize;
    /** @type {?} */
    FlowGraph.prototype.getPageLayout;
    /** @type {?} */
    FlowGraph.prototype.cellStyleConfig;
    /** @type {?} */
    FlowGraph.prototype.actList;
    /** @type {?} */
    FlowGraph.prototype.transInsList;
    /** @type {?} */
    FlowGraph.prototype.mode;
    /** @type {?} */
    FlowGraph.prototype.rootPath;
    /**
     * 当前语言
     * @type {?}
     */
    FlowGraph.prototype.langCode;
}
//# sourceMappingURL=data:application/json;base64,