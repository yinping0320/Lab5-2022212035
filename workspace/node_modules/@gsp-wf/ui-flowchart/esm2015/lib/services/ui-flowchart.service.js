/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
import { translate } from './i18n/index';
import { map } from 'rxjs/operators';
export class UiFlowchartService {
    /**
     * @param {?} httpSvc
     */
    constructor(httpSvc) {
        this.httpSvc = httpSvc;
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    getForecastProcessListByPayload(payload) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/processInstances/startProcess-simulation';
        return this.httpSvc.post(url, payload).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => re.procDefs)));
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    getRuntimeProcInstsByDataId(dataId) {
        if (dataId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/runtimeProcInstList?dataId=${dataId}`;
            return this.httpSvc.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    getHistoricProcInstsByDataId(dataId) {
        if (dataId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/historicProcInstList?dataId=${dataId}`;
            return this.httpSvc.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * 基于流程实例ID获取流程实例
     * @param {?} procInstId 流程实例id
     * @return {?}
     */
    getProcInstanceById(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程实例ID获取bpmnModel
     * @param {?} procInstId
     * @return {?}
     */
    getBpmnModelbyProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/bpmnModel`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程定义ID获取bpmnModel
     * @param {?} procDefId
     * @return {?}
     */
    getBpmnModelbyProcDefId(procDefId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/procDefs/${procDefId}/bpmnModel`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} superActInstId
     * @param {?} superProcInstId
     * @return {?}
     */
    getSubProcessInstance(superActInstId, superProcInstId) {
        if (superActInstId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/subProcInst?superActInstId=${superActInstId}&superProcInstId=${superProcInstId}`;
            return this.httpSvc.get(url);
        }
    }
    /**
     * 获取所有包含预解析的流程实例信息
     * @param {?} procInstId
     * @return {?}
     */
    getForecastProcessByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/forecastProcess`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取流程预测数据
     * @param {?} payload
     * @return {?}
     */
    getForecastProcessByPayload(payload) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/processInstances/forecastProcess';
        return this.httpSvc.post(url, payload);
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    getCompleteProcessInfoByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/flowChartInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程实例Id获取所有活动实例
     * @param {?} procInstId procInstId
     * @return {?}
     */
    getAllActiInstsbyProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/activityInstanceSlims`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程实例ID获取所有的流转实例
     * @param {?} procInstId procInstId
     * @return {?}
     */
    getTransitionInstanceSlimsByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/transitionInstanceSlims`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    getFormInfoByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/formInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} procInstId
     * @param {?} actInstId
     * @return {?}
     */
    getFormInfoByActInstId(procInstId, actInstId) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/formInfo`;
        if (actInstId) {
            url += `?actInstId=${actInstId}`;
        }
        return this.httpSvc.get(url);
    }
    /**
     * 获取审批日志信息
     * @param {?} procInstId
     * @param {?=} activityDefinitionId
     * @return {?}
     */
    getWorkItemLogs(procInstId, activityDefinitionId) {
        /** @type {?} */
        const logUrl = activityDefinitionId ?
            `/api/runtime/wf/v1.0/processInstances/${procInstId}/logs?activityDefinitionId=${activityDefinitionId}` :
            `/api/runtime/wf/v1.0/processInstances/${procInstId}/logs`;
        return this.httpSvc.get(logUrl);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        const defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        const langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    getProcessInstanceById(processId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${processId}`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    getProcInstIdByDataId(dataId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/procInstId?bizInstId=${dataId}`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    retryAifCreation(procInstId, actInstId, bizInstId) {
        return this.httpSvc.post("/api/runtime/wf/v1.0/aifactivityinstance/retry", actInstId);
    }
    /**
     * 是否是外部流程第三方的任务
     * @param {?} processInstanceId 流程实例ID
     * @return {?}
     */
    ifThirdTask(processInstanceId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/instances/wfExternalProcess?processInstanceId=${processInstanceId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取查看共享流程图的相关参数
     * @param {?} bizId 单据内码
     * @return {?}
     */
    getFsParamsByBizId(bizId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/third/bizId?bizId=${bizId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取共享查看流程图的URL
     * @param {?} params 参数
     * @return {?}
     */
    viewFsProcessNew(params) {
        /** @type {?} */
        const url = `/api/fssp/ssp/v1.0/mybill/fswybz/viewprocess`;
        return this.httpSvc.post(url, params);
    }
    /**
     * @return {?}
     */
    getFlowChartStyleConfig() {
        /** @type {?} */
        const url = `/platform/runtime/common/web/@gsp-wf/wf-process-editor/config/cell-style-config.json`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取多实例子流程
     * @param {?} actInst 活动实例
     * @param {?} superProcInstId 父流程实例id
     * @return {?}
     */
    getMutiChildInstance(actInst, superProcInstId) {
        /** @type {?} */
        const actInstId = actInst.activityInstanceId;
        /** @type {?} */
        const isMultiInstanceRoot = actInst.multiInstanceRoot || false;
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/subProcInstList?actInstId=${actInstId}&isMultiInstanceRoot=${isMultiInstanceRoot}&superProcInstId=${superProcInstId}`;
        return this.httpSvc.get(url);
    }
}
UiFlowchartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UiFlowchartService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UiFlowchartService.prototype.httpSvc;
}
//# sourceMappingURL=data:application/json;base64,