/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { UIFlowchartComponent } from './task-flowchart/task-flowchart.component';
import { translate } from './services/i18n/index';
import { UiFlowchartService } from './services/ui-flowchart.service';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { of } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
export class WFFlowchartService {
    /**
     * @param {?} msgService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     */
    constructor(msgService, injector, resolver, modalService) {
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.flowchartService = this.injector.get(UiFlowchartService);
        this.frameworkService = this.injector.get(FrameworkService);
    }
    /**
     * 查看流程图，支持预览
     * @param {?} payload
     * @return {?}
     */
    viewProcess(payload) {
        if (!payload || !payload.dataId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.noDataId'));
            return;
        }
        if (!payload || !payload.bizDefKey) {
            this.msgService.warning(this.getI18nValue('static.flowchart.noBizDefKey'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('dataId', payload.dataId);
        parameters.set('bizDefKey', payload.bizDefKey);
        if (payload.startMode) {
            parameters.set('startMode', payload.startMode);
        }
        if (payload.startUserId) {
            parameters.set('startUserId', payload.startUserId);
        }
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: payload.dataId,
            isNewTab: true,
            queryStringParams: parameters
        };
        this.openMenu(options);
    }
    /**
     * 根据流程实例id查看流程（tab页中打开）
     * @param {?} procInstId 流程实例ID
     * @return {?}
     */
    viewFlowChart(procInstId) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('processId', procInstId);
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            queryStringParams: parameters
        };
        this.openMenu(options);
    }
    /**
     * 根据单据内码查看流程
     * @param {?} dataId 单据内码
     * @return {?}
     */
    viewFlowChartByDataId(dataId) {
        if (!dataId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.dataIdIsNull'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('dataId', dataId);
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            queryStringParams: parameters
        };
        this.openMenu(options);
    }
    /**
     * 查看流程（弹框中打开）
     * @param {?} procInstId 流程实例ID
     * @param {?=} mode
     * @return {?}
     */
    viewFlowChartByDialog(procInstId, mode) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
            return;
        }
        this.flowchartService.getProcessInstanceById(procInstId).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re) {
                this.viewMutiInstanceFlowChartByDialog([re]);
            }
        }));
    }
    /**
     * 查看流程（弹框中打开，兼容多实例子流程）
     * @param {?} procInstList
     * @param {?=} mode
     * @return {?}
     */
    viewMutiInstanceFlowChartByDialog(procInstList, mode) {
        /** @type {?} */
        let func;
        if (UIFlowchartComponent.func) {
            func = UIFlowchartComponent.func;
        }
        /** @type {?} */
        const options = {
            title: this.getI18nValue('static.flowchart.title'),
            width: 1200,
            height: 530,
            showButtons: false,
            beforeClose: (/**
             * @param {?} modalRef
             * @return {?}
             */
            (modalRef) => {
                if (UIFlowchartComponent.func) {
                    window.removeEventListener('message', UIFlowchartComponent.func, false);
                }
                if (func) {
                    window.addEventListener('message', func, false);
                    UIFlowchartComponent.func = func;
                }
                return of(true);
            })
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(UIFlowchartComponent);
        /** @type {?} */
        const inj = Injector.create({
            providers: [{
                    provide: UiFlowchartService, useFactory: (/**
                     * @param {?} httpSvc
                     * @return {?}
                     */
                    (httpSvc) => {
                        return new UiFlowchartService(httpSvc);
                    }),
                    deps: [
                        HttpService
                    ]
                }], parent: this.injector
        });
        /** @type {?} */
        const compRef = compFactory.create(inj);
        if (procInstList && procInstList.length) {
            if (procInstList.length == 1) {
                options.showHeader = true;
                options.title = procInstList[0].name + '-v' + procInstList[0].version + '.0';
                compRef.instance.ProcInstId = procInstList[0].id;
            }
            else {
                options.showHeader = false;
                compRef.instance.ProcInstList = procInstList;
            }
        }
        if (mode) {
            compRef.instance.mode = mode;
        }
        compRef.instance.fill();
        /** @type {?} */
        const dialog = this.modalService.show(compRef, options);
        compRef.instance.dialog = dialog;
    }
    /**
     * 查看流程图。（如果作为共享的外部流程，则打开共享的查看流程）
     * @param {?} procInstId 流程实例id
     * @param {?} dataId 单据内码
     * @return {?}
     */
    viewFlowchartByProcInstIdAndDataId(procInstId, dataId) {
        this.flowchartService.ifThirdTask(procInstId).subscribe((/**
         * @param {?} ifThirdTask
         * @return {?}
         */
        ifThirdTask => {
            if (ifThirdTask === true) { //是第三方的任务
                this.flowchartService.getFsParamsByBizId(dataId).subscribe((/**
                 * @param {?} params
                 * @return {?}
                 */
                params => {
                    if (params) { //有不往共享单据表推数据的情况，此时返回为空
                        //有不往共享单据表推数据的情况，此时返回为空
                        /** @type {?} */
                        const param = {
                            "lcsl": params[0],
                            "djnm": params[1],
                            "djlx": params[2],
                            "djbh": params[3]
                        };
                        this.flowchartService.viewFsProcessNew(param).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            if (re && re.value) {
                                this.openViewProcessMenu(re.value);
                            }
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        error => {
                            this.viewFlowChart(procInstId);
                        }));
                    }
                    else {
                        this.viewFlowChart(procInstId);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.viewFlowChart(procInstId);
                }));
            }
            else { //WF的任务
                this.viewFlowChart(procInstId);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.viewFlowChart(procInstId);
        }));
    }
    /**
     * 共享的任务，借用自己的查看流程菜单，iframe嵌入共享的查看流程URL
     * @private
     * @param {?} url 共享查看流程的URL
     * @return {?}
     */
    openViewProcessMenu(url) {
        /** @type {?} */
        const queryParams = new Map();
        queryParams.set("thirdTask", true);
        /** @type {?} */
        const entityParams = new Map();
        entityParams.set("thirdProcessUrl", url);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            entityParams: entityParams,
            queryStringParams: queryParams
        };
        this.openMenu(options);
    }
    /**
     * 获取i18n
     * @private
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), langData);
        }
        return resultVal;
    }
    /**
     * 判断是否inSuite环境
     * @private
     * @return {?}
     */
    isInSuite() {
        /** @type {?} */
        const frameWorkService = ((/** @type {?} */ (window))).gspframeworkService;
        if (frameWorkService && frameWorkService.rtf) {
            /** @type {?} */
            const extendMethod = frameWorkService.rtf.extendMethod;
            if (extendMethod && extendMethod.getExtObj()) {
                /** @type {?} */
                var extObj = extendMethod.getExtObj();
                /** @type {?} */
                const mode = extObj.iGIX4inSuiteMode();
                if (mode) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * 打开菜单，区分是否inSuite环境，用不同方式打开菜单
     * @private
     * @param {?} options 打开参数
     * @return {?}
     */
    openMenu(options) {
        /** @type {?} */
        const menuTitle = this.getI18nValue('static.flowchart.title');
        if (this.isInSuite()) {
            options.menuTitle = menuTitle;
            /** @type {?} */
            var extObj = ((/** @type {?} */ (window))).gspframeworkService.rtf.extendMethod.getExtObj();
            extObj.iGIXMenuOpen(options);
        }
        else {
            this.frameworkService.openMenu$(options).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.error(error);
            }));
        }
    }
}
WFFlowchartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFFlowchartService.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.flowchartService;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,