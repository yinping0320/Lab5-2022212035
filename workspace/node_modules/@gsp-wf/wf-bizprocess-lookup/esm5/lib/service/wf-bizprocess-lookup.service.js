/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
var WFBizProcessLookUpService = /** @class */ (function () {
    function WFBizProcessLookUpService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    WFBizProcessLookUpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var e_1, _a;
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            var query = '?param=';
            /** @type {?} */
            var filter = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    filter += "\"allColumns\":\"" + searchValue.searchValue + "\",";
                }
                else {
                    filter += "\"" + searchValue.searchField + "\":\"" + searchValue.searchValue + "\",";
                }
            }
            if (customData.filter) {
                /** @type {?} */
                var keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    try {
                        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                            var key = keys_1_1.value;
                            if (customData.filter[key]) {
                                filter += "\"" + key + "\":\"" + customData.filter[key] + "\",";
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            if (filter.substr(filter.length - 1, 1) === ',') {
                filter = filter.substring(0, filter.length - 1);
            }
            filter += '}';
            filter = encodeURIComponent(filter);
            query += (filter + ("&pageNum=" + index + "&pageSize=" + size));
            url += query;
        }
        else {
            url += "?pageNum=" + index + "&pageSize=" + size;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { return ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }); })));
    };
    WFBizProcessLookUpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WFBizProcessLookUpService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return WFBizProcessLookUpService;
}());
export { WFBizProcessLookUpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WFBizProcessLookUpService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtYml6cHJvY2Vzcy1sb29rdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtYml6cHJvY2Vzcy1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS93Zi1iaXpwcm9jZXNzLWxvb2t1cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDO0lBRUksbUNBQ1ksSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUU3QixDQUFDOzs7Ozs7SUFDRCwyQ0FBTzs7Ozs7SUFBUCxVQUFRLEdBQVcsRUFBRSxNQUFxQjs7O1lBQ2hDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVTs7WUFDOUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQzs7WUFDN0IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRTs7WUFDNUIsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxJQUFJLFdBQVcsQ0FBQyxXQUFXLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTs7Z0JBQzFDLEtBQUssR0FBRyxTQUFTOztnQkFDakIsTUFBTSxHQUFHLEdBQUc7WUFDaEIsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFO2dCQUN6QixJQUFJLFdBQVcsQ0FBQyxXQUFXLEtBQUssR0FBRyxFQUFFO29CQUNqQyxNQUFNLElBQUksc0JBQWlCLFdBQVcsQ0FBQyxXQUFXLFFBQUksQ0FBQztpQkFDMUQ7cUJBQU07b0JBQ0gsTUFBTSxJQUFJLE9BQUksV0FBVyxDQUFDLFdBQVcsYUFBTSxXQUFXLENBQUMsV0FBVyxRQUFJLENBQUM7aUJBQzFFO2FBQ0o7WUFDRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7O29CQUNiLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7Z0JBQzNDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOzt3QkFDekIsS0FBa0IsSUFBQSxTQUFBLGlCQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTs0QkFBbkIsSUFBTSxHQUFHLGlCQUFBOzRCQUNWLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQ0FDeEIsTUFBTSxJQUFJLE9BQUksR0FBRyxhQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQUksQ0FBQzs2QkFDckQ7eUJBQ0o7Ozs7Ozs7OztpQkFDSjthQUNKO1lBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtnQkFDN0MsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbkQ7WUFDRCxNQUFNLElBQUksR0FBRyxDQUFDO1lBQ2QsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BDLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBRyxjQUFZLEtBQUssa0JBQWEsSUFBTSxDQUFBLENBQUMsQ0FBQztZQUN6RCxHQUFHLElBQUksS0FBSyxDQUFDO1NBQ2hCO2FBQU07WUFDSCxHQUFHLElBQUksY0FBWSxLQUFLLGtCQUFhLElBQU0sQ0FBQztTQUMvQztRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixHQUFHOzs7O1FBQUMsVUFBQyxFQUFPLElBQUssT0FBQSxDQUFDO1lBQ2QsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPO1lBQ2pCLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYTtZQUN2QixRQUFRLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUM7Z0JBQ3JDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVE7Z0JBQzlCLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUM7Z0JBQy9CLFdBQVcsRUFBRSxJQUFJO2FBQ3BCO1NBQ0osQ0FBQyxFQVRlLENBU2YsRUFBQyxDQUNOLENBQUM7SUFDTixDQUFDOztnQkFyREosVUFBVTs7OztnQkFKRixXQUFXOztJQTBEcEIsZ0NBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXJEWSx5QkFBeUI7Ozs7OztJQUU5Qix5Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTG9va3VwSHR0cFNlcnZpY2UsIFJlbW90ZVBhcmFtcywgTG9va3VwR3JpZFJlc3VsdCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXRkJpelByb2Nlc3NMb29rVXBTZXJ2aWNlIGltcGxlbWVudHMgSUxvb2t1cEh0dHBTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICApIHtcclxuICAgIH1cclxuICAgIGdldERhdGEodXJsOiBzdHJpbmcsIHBhcmFtcz86IFJlbW90ZVBhcmFtcyk6IE9ic2VydmFibGU8TG9va3VwR3JpZFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbURhdGEgPSBwYXJhbXMuY3VzdG9tRGF0YTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHBhcmFtcy5wYWdlSW5kZXggfHwgMTtcclxuICAgICAgICBjb25zdCBzaXplID0gcGFyYW1zLnBhZ2VTaXplIHx8IDIwO1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gSlNPTi5wYXJzZShwYXJhbXMuc2VhcmNoVmFsdWUpO1xyXG4gICAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSB8fCBjdXN0b21EYXRhLmZpbHRlcikge1xyXG4gICAgICAgICAgICBsZXQgcXVlcnkgPSAnP3BhcmFtPSc7XHJcbiAgICAgICAgICAgIGxldCBmaWx0ZXIgPSAneyc7XHJcbiAgICAgICAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaEZpZWxkID09PSAnKicpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYFwiYWxsQ29sdW1uc1wiOlwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZX1cIixgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYFwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hGaWVsZH1cIjpcIiR7c2VhcmNoVmFsdWUuc2VhcmNoVmFsdWV9XCIsYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3VzdG9tRGF0YS5maWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXN0b21EYXRhLmZpbHRlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5cyAmJiBrZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21EYXRhLmZpbHRlcltrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYFwiJHtrZXl9XCI6XCIke2N1c3RvbURhdGEuZmlsdGVyW2tleV19XCIsYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyLnN1YnN0cihmaWx0ZXIubGVuZ3RoIC0gMSwgMSkgPT09ICcsJykge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyID0gZmlsdGVyLnN1YnN0cmluZygwLCBmaWx0ZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmlsdGVyICs9ICd9JztcclxuICAgICAgICAgICAgZmlsdGVyID0gZW5jb2RlVVJJQ29tcG9uZW50KGZpbHRlcik7XHJcbiAgICAgICAgICAgIHF1ZXJ5ICs9IChmaWx0ZXIgKyBgJnBhZ2VOdW09JHtpbmRleH0mcGFnZVNpemU9JHtzaXplfWApO1xyXG4gICAgICAgICAgICB1cmwgKz0gcXVlcnk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdXJsICs9IGA/cGFnZU51bT0ke2luZGV4fSZwYWdlU2l6ZT0ke3NpemV9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKHJlOiBhbnkpID0+ICh7XHJcbiAgICAgICAgICAgICAgICBpdGVtczogcmUuY29udGVudCxcclxuICAgICAgICAgICAgICAgIHRvdGFsOiByZS50b3RhbEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcGFnZUluZm86IHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlSW5kZXg6IHJlLnBhZ2VhYmxlLnBhZ2VOdW1iZXIgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplOiByZS5wYWdlYWJsZS5wYWdlU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlTGlzdDogWzIwLCA0MCwgNjAsIDgwLCAxMDBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZVBhZ2VyOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==