import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { Injectable, Component, Input, Output, EventEmitter, ViewChild, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ServerSideToken, LookupModule } from '@farris/ui-lookup';
import { ModalModule } from '@farris/ui-modal';
import { MessagerModule } from '@farris/ui-messager';
import { HttpService } from '@ecp-caf/caf-common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfBizprocessLookupService {
    constructor() { }
}
WfBizprocessLookupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WfBizprocessLookupService.ctorParameters = () => [];
/** @nocollapse */ WfBizprocessLookupService.ngInjectableDef = defineInjectable({ factory: function WfBizprocessLookupService_Factory() { return new WfBizprocessLookupService(); }, token: WfBizprocessLookupService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFBizProcessLookUpUIState {
    constructor() {
        this.rtProcessUri = '/api/runtime/wf/v1.0/procDefs/processDefinitionKeys/query';
        this.flowFormUri = '/api/runtime/wf/v1.0/flowForm/query';
    }
}
WFBizProcessLookUpUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFBizProcessLookUpUIState.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFBizProcessLookUpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            let query = '?param=';
            /** @type {?} */
            let filter = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    filter += `"allColumns":"${searchValue.searchValue}",`;
                }
                else {
                    filter += `"${searchValue.searchField}":"${searchValue.searchValue}",`;
                }
            }
            if (customData.filter) {
                /** @type {?} */
                const keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    for (const key of keys) {
                        if (customData.filter[key]) {
                            filter += `"${key}":"${customData.filter[key]}",`;
                        }
                    }
                }
            }
            if (filter.substr(filter.length - 1, 1) === ',') {
                filter = filter.substring(0, filter.length - 1);
            }
            filter += '}';
            filter = encodeURIComponent(filter);
            query += (filter + `&pageNum=${index}&pageSize=${size}`);
            url += query;
        }
        else {
            url += `?pageNum=${index}&pageSize=${size}`;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }))));
    }
}
WFBizProcessLookUpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFBizProcessLookUpService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfBizprocessLookupComponent {
    /**
     * @param {?} uiState
     */
    constructor(uiState) {
        this.uiState = uiState;
        /**
         * 宽度
         */
        this.width = 550;
        /**
         * 取数源
         */
        this.sourceType = 'rtProcess';
        /**
         * 只读
         */
        this.disabled = false;
        /**
         * 是否单选
         */
        this.singleSelect = true;
        /**
         * 是否分页，默认true
         */
        this.pagination = true;
        /**
         * 首次加载第几页，默认1
         */
        this.pageIndex = 1;
        /**
         * 每页加载数，默认20
         */
        this.pageSize = 20;
        // @Input() beforeClose: (selectData: any) => Observable<PickedResult>;
        /**
         * 帮助选择后事件
         */
        this.afterConfirm = new EventEmitter();
        this.dialogClosed = new EventEmitter();
        this.clear = new EventEmitter();
        this.columns = [];
        /**
         * 帮助前事件,强行传递过滤条件
         */
        this.beforeOpen = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            // if (!this.filter) {
            //   // 可能调用方不传递，识别为非空
            //   this.filter = {};
            // }
            // this.filter.pageIndex = this.pageIndex;
            // this.filter.pageSize = this.pageSize;
            // 把过滤数据和当前的数据传递到service层
            return of({
                showDialog: true, data: {
                    filter: this.filter
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            this.afterConfirm.next(arg);
            return of({ closeDialog: true });
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        switch (this.sourceType) {
            case 'rtProcess':
                this.columns = [
                    { title: 'Key值', field: 'id', width: '80', searchField: 'id', },
                    { title: '名称', field: 'name', width: '100', searchField: 'name', }
                ];
                this.dataUri = this.uiState.rtProcessUri;
                break;
            case 'flowform':
                this.columns = [
                    { title: '编号', field: 'code', width: '80', searchField: 'code', },
                    { title: '名称', field: 'name', width: '100', searchField: 'name', }
                ];
                this.dataUri = this.uiState.flowFormUri;
                break;
            default:
                break;
        }
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    afterClear(arg) {
        this.clear.next(arg);
    }
    /**
     * 手动显示帮助
     * @return {?}
     */
    showHelp() {
        this.lookUp.showDialog();
    }
}
WfBizprocessLookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-bizprocess-lookup',
                template: `
    <farris-lookup-grid #lookup
      [disabled]="disabled"
      [editable]="false"
      [bindingData]="bindingData"
      [(ngModel)]="displayTxt"
      [columns]="columns"
      [singleSelect]="singleSelect"
      [title]="title"
      [displayType]="'List'"
      [uri]="dataUri"
      [idField]="'id'"
      [pageIndex]="pageIndex"
      [pageSize]="pageSize"
      [pagination]="pagination"
      [valueField]="'id'"
      [textField]="'name'"
      (clear)="afterClear($event)"
      [dialogWidth]="width"
      [dictPicking]="beforeOpen"
      [dictPicked]="dictPicked">
    </farris-lookup-grid>
  `,
                providers: [{ provide: ServerSideToken, useClass: WFBizProcessLookUpService }]
            }] }
];
/** @nocollapse */
WfBizprocessLookupComponent.ctorParameters = () => [
    { type: WFBizProcessLookUpUIState }
];
WfBizprocessLookupComponent.propDecorators = {
    title: [{ type: Input }],
    width: [{ type: Input }],
    sourceType: [{ type: Input }],
    disabled: [{ type: Input }],
    singleSelect: [{ type: Input }],
    pagination: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    displayTxt: [{ type: Input }],
    bindingData: [{ type: Input }],
    filter: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    dialogClosed: [{ type: Output }],
    clear: [{ type: Output }],
    lookUp: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfBizprocessLookupModule {
}
WfBizprocessLookupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [WfBizprocessLookupComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    LookupModule,
                    ModalModule.forRoot(),
                    MessagerModule.forRoot(),
                ],
                providers: [
                    HttpService,
                    WFBizProcessLookUpUIState
                ],
                exports: [WfBizprocessLookupComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfBizprocessLookupService, WfBizprocessLookupComponent, WfBizprocessLookupModule, WFBizProcessLookUpService, WFBizProcessLookUpUIState };

//# sourceMappingURL=gsp-wf-wf-bizprocess-lookup.js.map