/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
export class WFBizProcessLookUpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            let query = '?param=';
            /** @type {?} */
            let filter = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    filter += `"allColumns":"${searchValue.searchValue}",`;
                }
                else {
                    filter += `"${searchValue.searchField}":"${searchValue.searchValue}",`;
                }
            }
            if (customData.filter) {
                /** @type {?} */
                const keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    for (const key of keys) {
                        if (customData.filter[key]) {
                            filter += `"${key}":"${customData.filter[key]}",`;
                        }
                    }
                }
            }
            if (filter.substr(filter.length - 1, 1) === ',') {
                filter = filter.substring(0, filter.length - 1);
            }
            filter += '}';
            filter = encodeURIComponent(filter);
            query += (filter + `&pageNum=${index}&pageSize=${size}`);
            url += query;
        }
        else {
            url += `?pageNum=${index}&pageSize=${size}`;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }))));
    }
}
WFBizProcessLookUpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFBizProcessLookUpService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WFBizProcessLookUpService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtYml6cHJvY2Vzcy1sb29rdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtYml6cHJvY2Vzcy1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS93Zi1iaXpwcm9jZXNzLWxvb2t1cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsTUFBTSxPQUFPLHlCQUF5Qjs7OztJQUNsQyxZQUNZLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFFN0IsQ0FBQzs7Ozs7O0lBQ0QsT0FBTyxDQUFDLEdBQVcsRUFBRSxNQUFxQjs7Y0FDaEMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVOztjQUM5QixLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDOztjQUM3QixJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFOztjQUM1QixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2xELElBQUksV0FBVyxDQUFDLFdBQVcsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFOztnQkFDMUMsS0FBSyxHQUFHLFNBQVM7O2dCQUNqQixNQUFNLEdBQUcsR0FBRztZQUNoQixJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pCLElBQUksV0FBVyxDQUFDLFdBQVcsS0FBSyxHQUFHLEVBQUU7b0JBQ2pDLE1BQU0sSUFBSSxpQkFBaUIsV0FBVyxDQUFDLFdBQVcsSUFBSSxDQUFDO2lCQUMxRDtxQkFBTTtvQkFDSCxNQUFNLElBQUksSUFBSSxXQUFXLENBQUMsV0FBVyxNQUFNLFdBQVcsQ0FBQyxXQUFXLElBQUksQ0FBQztpQkFDMUU7YUFDSjtZQUNELElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTs7c0JBQ2IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztnQkFDM0MsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3pCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO3dCQUNwQixJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7NEJBQ3hCLE1BQU0sSUFBSSxJQUFJLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7eUJBQ3JEO3FCQUNKO2lCQUNKO2FBQ0o7WUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUM3QyxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNuRDtZQUNELE1BQU0sSUFBSSxHQUFHLENBQUM7WUFDZCxNQUFNLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEMsS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLFlBQVksS0FBSyxhQUFhLElBQUksRUFBRSxDQUFDLENBQUM7WUFDekQsR0FBRyxJQUFJLEtBQUssQ0FBQztTQUNoQjthQUFNO1lBQ0gsR0FBRyxJQUFJLFlBQVksS0FBSyxhQUFhLElBQUksRUFBRSxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQzFCLEdBQUc7Ozs7UUFBQyxDQUFDLEVBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNkLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTztZQUNqQixLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWE7WUFDdkIsUUFBUSxFQUFFO2dCQUNOLFNBQVMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDO2dCQUNyQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRO2dCQUM5QixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO2dCQUMvQixXQUFXLEVBQUUsSUFBSTthQUNwQjtTQUNKLENBQUMsRUFBQyxDQUNOLENBQUM7SUFDTixDQUFDOzs7WUFyREosVUFBVTs7OztZQUpGLFdBQVc7Ozs7Ozs7SUFPWix5Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTG9va3VwSHR0cFNlcnZpY2UsIFJlbW90ZVBhcmFtcywgTG9va3VwR3JpZFJlc3VsdCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXRkJpelByb2Nlc3NMb29rVXBTZXJ2aWNlIGltcGxlbWVudHMgSUxvb2t1cEh0dHBTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICApIHtcclxuICAgIH1cclxuICAgIGdldERhdGEodXJsOiBzdHJpbmcsIHBhcmFtcz86IFJlbW90ZVBhcmFtcyk6IE9ic2VydmFibGU8TG9va3VwR3JpZFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbURhdGEgPSBwYXJhbXMuY3VzdG9tRGF0YTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHBhcmFtcy5wYWdlSW5kZXggfHwgMTtcclxuICAgICAgICBjb25zdCBzaXplID0gcGFyYW1zLnBhZ2VTaXplIHx8IDIwO1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gSlNPTi5wYXJzZShwYXJhbXMuc2VhcmNoVmFsdWUpO1xyXG4gICAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSB8fCBjdXN0b21EYXRhLmZpbHRlcikge1xyXG4gICAgICAgICAgICBsZXQgcXVlcnkgPSAnP3BhcmFtPSc7XHJcbiAgICAgICAgICAgIGxldCBmaWx0ZXIgPSAneyc7XHJcbiAgICAgICAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaEZpZWxkID09PSAnKicpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYFwiYWxsQ29sdW1uc1wiOlwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZX1cIixgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYFwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hGaWVsZH1cIjpcIiR7c2VhcmNoVmFsdWUuc2VhcmNoVmFsdWV9XCIsYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3VzdG9tRGF0YS5maWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXN0b21EYXRhLmZpbHRlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5cyAmJiBrZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21EYXRhLmZpbHRlcltrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYFwiJHtrZXl9XCI6XCIke2N1c3RvbURhdGEuZmlsdGVyW2tleV19XCIsYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyLnN1YnN0cihmaWx0ZXIubGVuZ3RoIC0gMSwgMSkgPT09ICcsJykge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyID0gZmlsdGVyLnN1YnN0cmluZygwLCBmaWx0ZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmlsdGVyICs9ICd9JztcclxuICAgICAgICAgICAgZmlsdGVyID0gZW5jb2RlVVJJQ29tcG9uZW50KGZpbHRlcik7XHJcbiAgICAgICAgICAgIHF1ZXJ5ICs9IChmaWx0ZXIgKyBgJnBhZ2VOdW09JHtpbmRleH0mcGFnZVNpemU9JHtzaXplfWApO1xyXG4gICAgICAgICAgICB1cmwgKz0gcXVlcnk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdXJsICs9IGA/cGFnZU51bT0ke2luZGV4fSZwYWdlU2l6ZT0ke3NpemV9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKHJlOiBhbnkpID0+ICh7XHJcbiAgICAgICAgICAgICAgICBpdGVtczogcmUuY29udGVudCxcclxuICAgICAgICAgICAgICAgIHRvdGFsOiByZS50b3RhbEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcGFnZUluZm86IHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlSW5kZXg6IHJlLnBhZ2VhYmxlLnBhZ2VOdW1iZXIgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplOiByZS5wYWdlYWJsZS5wYWdlU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlTGlzdDogWzIwLCA0MCwgNjAsIDgwLCAxMDBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZVBhZ2VyOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==