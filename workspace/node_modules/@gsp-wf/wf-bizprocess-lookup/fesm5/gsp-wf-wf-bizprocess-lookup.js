import { of } from 'rxjs';
import { __values } from 'tslib';
import { map } from 'rxjs/operators';
import { Injectable, Component, Input, Output, EventEmitter, ViewChild, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ServerSideToken, LookupModule } from '@farris/ui-lookup';
import { ModalModule } from '@farris/ui-modal';
import { MessagerModule } from '@farris/ui-messager';
import { HttpService } from '@ecp-caf/caf-common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfBizprocessLookupService = /** @class */ (function () {
    function WfBizprocessLookupService() {
    }
    WfBizprocessLookupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WfBizprocessLookupService.ctorParameters = function () { return []; };
    /** @nocollapse */ WfBizprocessLookupService.ngInjectableDef = defineInjectable({ factory: function WfBizprocessLookupService_Factory() { return new WfBizprocessLookupService(); }, token: WfBizprocessLookupService, providedIn: "root" });
    return WfBizprocessLookupService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WFBizProcessLookUpUIState = /** @class */ (function () {
    function WFBizProcessLookUpUIState() {
        this.rtProcessUri = '/api/runtime/wf/v1.0/procDefs/processDefinitionKeys/query';
        this.flowFormUri = '/api/runtime/wf/v1.0/flowForm/query';
    }
    WFBizProcessLookUpUIState.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WFBizProcessLookUpUIState.ctorParameters = function () { return []; };
    return WFBizProcessLookUpUIState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WFBizProcessLookUpService = /** @class */ (function () {
    function WFBizProcessLookUpService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    WFBizProcessLookUpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var e_1, _a;
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            var query = '?param=';
            /** @type {?} */
            var filter = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    filter += "\"allColumns\":\"" + searchValue.searchValue + "\",";
                }
                else {
                    filter += "\"" + searchValue.searchField + "\":\"" + searchValue.searchValue + "\",";
                }
            }
            if (customData.filter) {
                /** @type {?} */
                var keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    try {
                        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                            var key = keys_1_1.value;
                            if (customData.filter[key]) {
                                filter += "\"" + key + "\":\"" + customData.filter[key] + "\",";
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            if (filter.substr(filter.length - 1, 1) === ',') {
                filter = filter.substring(0, filter.length - 1);
            }
            filter += '}';
            filter = encodeURIComponent(filter);
            query += (filter + ("&pageNum=" + index + "&pageSize=" + size));
            url += query;
        }
        else {
            url += "?pageNum=" + index + "&pageSize=" + size;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { return ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }); })));
    };
    WFBizProcessLookUpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WFBizProcessLookUpService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return WFBizProcessLookUpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfBizprocessLookupComponent = /** @class */ (function () {
    function WfBizprocessLookupComponent(uiState) {
        var _this = this;
        this.uiState = uiState;
        /**
         * 宽度
         */
        this.width = 550;
        /**
         * 取数源
         */
        this.sourceType = 'rtProcess';
        /**
         * 只读
         */
        this.disabled = false;
        /**
         * 是否单选
         */
        this.singleSelect = true;
        /**
         * 是否分页，默认true
         */
        this.pagination = true;
        /**
         * 首次加载第几页，默认1
         */
        this.pageIndex = 1;
        /**
         * 每页加载数，默认20
         */
        this.pageSize = 20;
        // @Input() beforeClose: (selectData: any) => Observable<PickedResult>;
        /**
         * 帮助选择后事件
         */
        this.afterConfirm = new EventEmitter();
        this.dialogClosed = new EventEmitter();
        this.clear = new EventEmitter();
        this.columns = [];
        /**
         * 帮助前事件,强行传递过滤条件
         */
        this.beforeOpen = (/**
         * @param {?} arg
         * @return {?}
         */
        function (arg) {
            // if (!this.filter) {
            //   // 可能调用方不传递，识别为非空
            //   this.filter = {};
            // }
            // this.filter.pageIndex = this.pageIndex;
            // this.filter.pageSize = this.pageSize;
            // 把过滤数据和当前的数据传递到service层
            return of({
                showDialog: true, data: {
                    filter: _this.filter
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        function (arg) {
            _this.afterConfirm.next(arg);
            return of({ closeDialog: true });
        });
    }
    /**
     * @return {?}
     */
    WfBizprocessLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        switch (this.sourceType) {
            case 'rtProcess':
                this.columns = [
                    { title: 'Key值', field: 'id', width: '80', searchField: 'id', },
                    { title: '名称', field: 'name', width: '100', searchField: 'name', }
                ];
                this.dataUri = this.uiState.rtProcessUri;
                break;
            case 'flowform':
                this.columns = [
                    { title: '编号', field: 'code', width: '80', searchField: 'code', },
                    { title: '名称', field: 'name', width: '100', searchField: 'name', }
                ];
                this.dataUri = this.uiState.flowFormUri;
                break;
            default:
                break;
        }
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    WfBizprocessLookupComponent.prototype.afterClear = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        this.clear.next(arg);
    };
    /** 手动显示帮助 */
    /**
     * 手动显示帮助
     * @return {?}
     */
    WfBizprocessLookupComponent.prototype.showHelp = /**
     * 手动显示帮助
     * @return {?}
     */
    function () {
        this.lookUp.showDialog();
    };
    WfBizprocessLookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wf-bizprocess-lookup',
                    template: "\n    <farris-lookup-grid #lookup\n      [disabled]=\"disabled\"\n      [editable]=\"false\"\n      [bindingData]=\"bindingData\"\n      [(ngModel)]=\"displayTxt\"\n      [columns]=\"columns\"\n      [singleSelect]=\"singleSelect\"\n      [title]=\"title\"\n      [displayType]=\"'List'\"\n      [uri]=\"dataUri\"\n      [idField]=\"'id'\"\n      [pageIndex]=\"pageIndex\"\n      [pageSize]=\"pageSize\"\n      [pagination]=\"pagination\"\n      [valueField]=\"'id'\"\n      [textField]=\"'name'\"\n      (clear)=\"afterClear($event)\"\n      [dialogWidth]=\"width\"\n      [dictPicking]=\"beforeOpen\"\n      [dictPicked]=\"dictPicked\">\n    </farris-lookup-grid>\n  ",
                    providers: [{ provide: ServerSideToken, useClass: WFBizProcessLookUpService }]
                }] }
    ];
    /** @nocollapse */
    WfBizprocessLookupComponent.ctorParameters = function () { return [
        { type: WFBizProcessLookUpUIState }
    ]; };
    WfBizprocessLookupComponent.propDecorators = {
        title: [{ type: Input }],
        width: [{ type: Input }],
        sourceType: [{ type: Input }],
        disabled: [{ type: Input }],
        singleSelect: [{ type: Input }],
        pagination: [{ type: Input }],
        pageIndex: [{ type: Input }],
        pageSize: [{ type: Input }],
        displayTxt: [{ type: Input }],
        bindingData: [{ type: Input }],
        filter: [{ type: Input }],
        afterConfirm: [{ type: Output }],
        dialogClosed: [{ type: Output }],
        clear: [{ type: Output }],
        lookUp: [{ type: ViewChild, args: ['lookup',] }]
    };
    return WfBizprocessLookupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfBizprocessLookupModule = /** @class */ (function () {
    function WfBizprocessLookupModule() {
    }
    WfBizprocessLookupModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [WfBizprocessLookupComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        LookupModule,
                        ModalModule.forRoot(),
                        MessagerModule.forRoot(),
                    ],
                    providers: [
                        HttpService,
                        WFBizProcessLookUpUIState
                    ],
                    exports: [WfBizprocessLookupComponent]
                },] }
    ];
    return WfBizprocessLookupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfBizprocessLookupService, WfBizprocessLookupComponent, WfBizprocessLookupModule, WFBizProcessLookUpService, WFBizProcessLookUpUIState };

//# sourceMappingURL=gsp-wf-wf-bizprocess-lookup.js.map