import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod, MexExpression, ExtensionCompletionConditionRuler, MexElement, MexExtensionElement, StartEvent, HumanPerformer, PotentialOwner, UserTask, CustomType, DataType, BpmnModelJsonHelper, ServiceTask, CallActivity, SubProcessDataAssociations, MultiInstanceLoopCharacteristics, SignalEventDefinition, IntermediateCatchEvent, DataObject } from '@edp-pmf/bpmn-model';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActionOrganizationScope {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizActivity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantSchemeForDesigner {
    constructor() {
        this.isAllScope = false;
        this.performers = [];
        this.variablePerformers = [];
        this.components = [];
        this.reportingLines = [];
        this.activityExecutors = [];
        this.matrixParticipants = [];
        this.organizationParticipants = new Array();
        this.options = {
            ExclusionPerformers: [],
            NoPerformerStrategy: '',
        };
    }
}
class ParticipantItem {
}
class OrganizationParticipant {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeLimitControlInfo {
}
class ExpireOperationInfo {
}
class SendMessageExpireOperationInfo extends ExpireOperationInfo {
}
class AutoHandleExpireOperationInfo extends ExpireOperationInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const AssignmentStrategy = {
    /**
     * All指派策略
     * */
    ALL: "ALL",
    /**
     * 手工指定
     * */
    ASSIGN: "ASSIGN",
    /**
    * 领用
    * */
    CLAIM: "CLAIM",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignmentStrategyDef extends ExtensionElement {
    //undo操作临时clone方法
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} description
     * @param {?=} expandGroups
     */
    constructor(model, id, description, expandGroups) {
        super(model);
        this.ClrTypeID = "wf.AssignmentStrategy";
        this.Id = id;
        this.Description = description;
        this.ExpandGroups = expandGroups;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Id = null;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AssignmentStrategyDef(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        BpmnModelHelper.SetAttributeValue(obj, "ExpandGroups", this.ExpandGroups);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Description = obj.Description;
        this.ExpandGroups = obj.ExpandGroups;
    }
}
BpmnModelHelper.RegisterElementType(new AssignmentStrategyDef(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignPerformerConfig extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AssignPerformerConfig.Clr_Type_ID;
        this.MultiSelect = true;
        this.Necessary = false;
        this.AllowGlobalAssign = false;
        this.Operator = 'currentUser';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AssignPerformerConfig(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Operator", this.Operator);
        BpmnModelHelper.SetAttributeValue(obj, "MultiSelect", this.MultiSelect);
        BpmnModelHelper.SetAttributeValue(obj, "Necessary", this.Necessary);
        BpmnModelHelper.SetAttributeValue(obj, "AllowGlobalAssign", this.AllowGlobalAssign);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Operator = obj.Operator;
        this.MultiSelect = obj.MultiSelect;
        this.Necessary = obj.Necessary;
        this.AllowGlobalAssign = obj.AllowGlobalAssign;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const assignPerformerConfig = new AssignPerformerConfig(this.Model);
        assignPerformerConfig.Operator = this.Operator;
        assignPerformerConfig.MultiSelect = this.MultiSelect;
        assignPerformerConfig.Necessary = this.Necessary;
        assignPerformerConfig.AllowGlobalAssign = this.AllowGlobalAssign;
        return assignPerformerConfig;
    }
}
AssignPerformerConfig.Clr_Type_ID = 'wf.AssignPerformerConfig';
BpmnModelHelper.RegisterElementType(new AssignPerformerConfig(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TargetRefConstants {
}
TargetRefConstants.INITIAL_ACTIVITY_ID = 'InitialActityId';
TargetRefConstants.PRECURSOR_ACTIVITY_ID = 'PrecursorActivityId';
TargetRefConstants.EMPTY_TARGET = '';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BackWardRule extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = BackWardRule.Clr_Type_ID;
        this.TargetRef = TargetRefConstants.INITIAL_ACTIVITY_ID;
        this.SelectTargetAble = false;
        this.WaitReturn = false;
        this.ResubmitEffect = null;
        this.DynamicBackWardRuleAble = false;
        this.SelectTargetList = new Array();
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new BackWardRule(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "TargetRef", this.TargetRef);
        BpmnModelHelper.SetAttributeValue(obj, "SelectTargetAble", this.SelectTargetAble);
        BpmnModelHelper.SetAttributeValue(obj, "WaitReturn", this.WaitReturn);
        BpmnModelHelper.SetAttributeValue(obj, "ResubmitEffect", this.ResubmitEffect);
        BpmnModelHelper.SetAttributeValue(obj, "DynamicBackWardRuleAble", this.DynamicBackWardRuleAble);
        BpmnModelHelper.SetAttributeValue(obj, "SelectTargetList", this.SelectTargetList);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.TargetRef = obj.TargetRef;
        this.SelectTargetAble = obj.SelectTargetAble;
        this.WaitReturn = obj.WaitReturn;
        this.ResubmitEffect = obj.ResubmitEffect;
        this.DynamicBackWardRuleAble = obj.DynamicBackWardRuleAble;
        this.SelectTargetList = obj.SelectTargetList;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const backWardRule = new BackWardRule(this.Model);
        backWardRule.TargetRef = this.TargetRef;
        backWardRule.SelectTargetAble = this.SelectTargetAble;
        backWardRule.WaitReturn = this.WaitReturn;
        backWardRule.ResubmitEffect = this.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = this.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = this.SelectTargetList;
        return backWardRule;
    }
}
BackWardRule.Clr_Type_ID = "wf.BackWardRule";
BpmnModelHelper.RegisterElementType(new BackWardRule(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConclusionItem extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ConclusionItem.Clr_Type_ID;
        /**
         * 是否默认
         *
         */
        this.IsDefault = false;
        this.commentNecessary = false;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ConclusionItem(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "Text", this.Text);
        BpmnModelHelper.SetAttributeValue(obj, "WorkFlowAction", this.WorkFlowAction);
        BpmnModelHelper.SetAttributeValue(obj, "IsDefault", this.IsDefault);
        BpmnModelHelper.SetAttributeValue(obj, "CommentNecessary", this.commentNecessary);
        BpmnModelHelper.SetAttributeValue(obj, "Certification", this.certification);
        BpmnModelHelper.SetAttributeValue(obj, "AttachmentNecessary", this.attachmentNecessary);
        BpmnModelHelper.SetAttributeValue(obj, "SignatureNecessary", this.signatureNecessary);
        BpmnModelHelper.SetAttributeValue(obj, "DefaultComment", this.defaultComment);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Value = obj.Value;
        this.Text = obj.Text;
        this.WorkFlowAction = obj.WorkFlowAction;
        this.IsDefault = obj.IsDefault;
        this.commentNecessary = obj.CommentNecessary;
        this.certification = ExtensionMethod.GetAttributeValue4Boolean(obj, "Certification");
        this.attachmentNecessary = ExtensionMethod.GetAttributeValue4Boolean(obj, "AttachmentNecessary");
        this.signatureNecessary = ExtensionMethod.GetAttributeValue4Boolean(obj, "SignatureNecessary");
        this.defaultComment = ExtensionMethod.GetAttributeValue4String(obj, "DefaultComment");
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const conclusion = new ConclusionItem(this.Model);
        conclusion.Value = this.Value;
        conclusion.Text = this.Text;
        conclusion.WorkFlowAction = this.WorkFlowAction;
        conclusion.IsDefault = this.IsDefault;
        conclusion.commentNecessary = this.commentNecessary;
        conclusion.certification = this.certification;
        conclusion.attachmentNecessary = this.attachmentNecessary;
        conclusion.signatureNecessary = this.signatureNecessary;
        conclusion.defaultComment = this.defaultComment;
        return conclusion;
    }
}
ConclusionItem.Clr_Type_ID = "wf.ConclusionItem";
BpmnModelHelper.RegisterElementType(new ConclusionItem(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MexExpressionImpl extends MexExpression {
    /**
     * @param {?} model
     * @param {?=} value
     */
    constructor(model, value) {
        super(model);
        this.ClrTypeID = MexExpressionImpl.Clr_Type_ID;
        this.value = value;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'Value', this.value);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.value = obj.Value;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MexExpressionImpl(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const mexExpressionImpl = new MexExpressionImpl(this.Model);
        mexExpressionImpl.value = this.value;
        return mexExpressionImpl;
    }
}
MexExpressionImpl.Clr_Type_ID = "wf.MexExpressionImpl";
BpmnModelHelper.RegisterElementType(new MexExpressionImpl(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ConditionType = {
    /// <summary> 
    /// 未定义的条件类型 
    /// </summary>
    UNDIFINED: 'UNDIFINED',
    /// <summary>
    /// 转移条件得到满足，转移才会被执行
    /// </summary>
    CONDITION: 'CONDITION',
    /// <summary>
    /// 说明此转移为缺省转移，如果其他转移的转移条件都不能得到满足，则执行此转移
    /// </summary>
    OTHERWISE: 'OTHERWISE',
    /// <summary>
    /// 异常转移，如果产生了一个异常，并且转移条件得到满足，则执行该转移 
    /// </summary>
    EXCEPTION: 'EXCEPTION',
    /// <summary>
    /// 异常缺省转移，如果产生了异常，并且其他异常转移的转移条件都得不到满足，则执行此转移 
    /// </summary>
    DEFAULTEXCEPTION: 'DEFAULTEXCEPTION',
    /// <summary>
    /// 通用单位条件
    /// </summary>
    GENERALORGCONDITION: 'GENERALORGCONDITION',
    /// <summary>
    /// 通用组织条件，记录组织变量，用于GeneralValRole
    /// </summary>
    GeneralVarOrgCondition: 'GeneralVarOrgCondition',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ConditionValueVersion = {
    /// <summary>
    /// 不确定的版本。可能为老表达式，也可能为语义化表达式。
    /// </summary>
    Unsure: 'Unsure',
    /// <summary>
    /// 语义化表达式，表达式中使用的变量和XmlSchema等上下文信息
    /// </summary>
    SemanticExpressionV1: 'SemanticExpressionV1',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Condition extends MexExpressionImpl {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = Condition.Clr_Type_ID;
        this._value = '';
        this.valueVersion = ConditionValueVersion.Unsure;
        this.type = ConditionType.CONDITION;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new Condition(this.Model);
    }
    /**
     * @return {?}
     */
    get ConditionType() { return this.type; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ConditionType(value) { this.type = value; }
    /**
     * @return {?}
     */
    get Value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set Value(value) { this._value = value; }
    /**
     * @return {?}
     */
    get ValueVersion() { return this.valueVersion; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ValueVersion(value) { this.valueVersion = value; }
    /**
     * @return {?}
     */
    ToString() {
        return "Condition[value='" + this._value + "'" + ", type=" + this.type + "]";
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ConditionType", this.ConditionType);
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "ValueVersion", this.ValueVersion);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ConditionType = obj.ConditionType;
        this.Value = obj.Value;
        this.ValueVersion = obj.ValueVersion;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const condition = new Condition(this.Model);
        condition.Value = this.Value;
        condition.ValueVersion = this.valueVersion;
        condition.ConditionType = this.ConditionType;
        return condition;
    }
}
Condition.Clr_Type_ID = 'wf.Condition';
BpmnModelHelper.RegisterElementType(new Condition(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CounterSignRule extends ExtensionCompletionConditionRuler {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CounterSignRule.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CounterSignRule(this.Model);
    }
    /**
     * 计数器
     *
     * @return {?}
     */
    get CounterVariableName() {
        return `nrOf${this.ConclusionValue}`;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ConclusionValue", this.ConclusionValue);
        BpmnModelHelper.SetAttributeValue(obj, "CalculateType", this.CalculateType);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionValue", this.ConditionValue);
        BpmnModelHelper.SetAttributeValue(obj, "WaitAllVotes", this.WaitAllVotes);
        if (this.CompletionCondition) {
            BpmnModelHelper.SetAttributeValue(obj, "CompletionCondition", this.CompletionCondition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ConclusionValue = obj.ConclusionValue;
        this.CalculateType = obj.CalculateType;
        this.ConditionValue = obj.ConditionValue;
        this.WaitAllVotes = obj.WaitAllVotes;
        if (obj.CompletionCondition) {
            /** @type {?} */
            let condition = new Condition(this.Model);
            condition.LoadFromJsonObject(obj.CompletionCondition);
            this.CompletionCondition = condition;
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const counterSignRule = new CounterSignRule(this.Model);
        counterSignRule.ConclusionValue = this.ConclusionValue;
        counterSignRule.CalculateType = this.CalculateType;
        counterSignRule.ConditionValue = this.ConditionValue;
        counterSignRule.WaitAllVotes = this.WaitAllVotes;
        if (this.CompletionCondition) {
            counterSignRule.CompletionCondition = this.CompletionCondition.clone();
        }
        return counterSignRule;
    }
}
CounterSignRule.Clr_Type_ID = 'wf.CounterSignRule';
BpmnModelHelper.RegisterElementType(new CounterSignRule(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ExecuteWorkItemMode = {
    /**
     * 抢占模式
     * */
    Preempt: 'Preempt',
    /**
     * 并行会签
     * */
    Parallel: 'Parallel',
    /**
     * 串行会签
     * */
    Sequential: 'Sequential',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantCoefficient extends MexElement {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     * @param {?=} code
     * @param {?=} type
     * @param {?=} mustCompleted
     * @param {?=} coefficient
     */
    constructor(model, id, name, code, type, mustCompleted, coefficient) {
        super(model);
        this.participantId = id || '';
        this.participantName = name || '';
        this.participantCode = code || '';
        this.participantType = type || '';
        this.mustCompleted = mustCompleted || true;
        this.coefficient = coefficient || 0;
    }
    //序列化内容
    /**
     * @return {?}
     */
    get ParticipantId() { return this.participantId; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantId(value) { this.participantId = value; }
    /**
     * @return {?}
     */
    get ParticipantName() { return this.participantName; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantName(value) { this.participantName = value; }
    /**
     * @return {?}
     */
    get ParticipantCode() { return this.participantCode; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantCode(value) { this.participantCode = value; }
    /**
     * @return {?}
     */
    get ParticipantType() { return this.participantType; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantType(value) { this.participantType = value; }
    /**
     * @return {?}
     */
    get MustCompleted() { return this.mustCompleted; }
    /**
     * @param {?} value
     * @return {?}
     */
    set MustCompleted(value) { this.mustCompleted = value; }
    /**
     * @return {?}
     */
    get Coefficient() { return this.coefficient; }
    /**
     * @param {?} value
     * @return {?}
     */
    set Coefficient(value) { this.coefficient = value; }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantId', this.ParticipantId);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantName', this.ParticipantName);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantCode', this.ParticipantCode);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantType', this.ParticipantType);
        BpmnModelHelper.SetAttributeValue(obj, 'MustCompleted', this.MustCompleted);
        BpmnModelHelper.SetAttributeValue(obj, 'Coefficient', this.Coefficient);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ParticipantId = obj.ParticipantId;
        this.ParticipantCode = obj.ParticipantCode;
        this.ParticipantName = obj.ParticipantName;
        this.ParticipantType = obj.ParticipantType;
        this.MustCompleted = obj.MustCompleted;
        this.Coefficient = obj.Coefficient;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ResubmitEffect = {
    /**
     * 驳回的节点通过后，按顺序流转
     */
    sequence: 'sequence',
    /**
     * 驳回后重新提交至我
     * 1.抢占节点：只给驳回人创建任务
     * 2.会签节点：驳回人+未审批人收到新任务，已通过人员自动通过
     */
    backToMe: 'backToMe',
    /**
     * 驳回的节点通过后返回本节点
     * 1.抢占节点：1).再次进入节点时，办理人
     * 2.会签节点：不读取参与者重新进入此节点历史办理人作为审批人配置
     */
    backToCurrentNode: 'backToCurrentNode',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const WorkFlowAction = {
    /**
     * 正向
     * */
    Forward: 'Forward',
    /**
     * 反向
     * */
    Backward: 'Backward',
    /**
     * 中止
     * */
    Abort: 'Abort',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Xpression {
    constructor() {
        this._value = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    Xpression(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    get Value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set Value(value) { this._value = value; }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SemanticExpression extends MexExpressionImpl {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SemanticExpression.Clr_Type_ID;
        this._value = '';
        this.valueVersion = ConditionValueVersion.Unsure;
        this.type = ConditionType.CONDITION;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SemanticExpression(this.Model);
    }
    /**
     * @return {?}
     */
    get ConditionType() { return this.type; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ConditionType(value) { this.type = value; }
    /**
     * @return {?}
     */
    get Value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set Value(value) { this._value = value; }
    /**
     * @return {?}
     */
    get ValueVersion() { return this.valueVersion; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ValueVersion(value) { this.valueVersion = value; }
    /**
     * @return {?}
     */
    ToString() {
        return "Condition[value='" + this._value + "'" + ", type=" + this.type + "]";
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ConditionType", this.ConditionType);
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "ValueVersion", this.ValueVersion);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ConditionType = obj.ConditionType;
        this.Value = obj.Value;
        this.ValueVersion = obj.ValueVersion;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const condition = new SemanticExpression(this.Model);
        condition.Value = this.Value;
        condition.ValueVersion = this.valueVersion;
        condition.ConditionType = this.ConditionType;
        return condition;
    }
}
SemanticExpression.Clr_Type_ID = 'wf.SemanticExpression';
BpmnModelHelper.RegisterElementType(new SemanticExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const AsyncCallBackType = {
    // 不回调
    NO: 'NO',
    // 默认回调
    DEFAULT: 'DEFAULT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ExecutionType = {
    // 同步
    SYNCHRONOUS: 'SYNCHRONOUS',
    // 异步
    ASYNCHRONOUS: 'ASYNCHRONOUS',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActualParameter extends MexExtensionElement {
    /**
     * @param {?} model
     * @param {?=} name
     * @param {?=} value
     * @param {?=} valueText
     * @param {?=} tag
     */
    constructor(model, name, value, valueText, tag) {
        super(model);
        this.ClrTypeID = ActualParameter.Clr_Type_ID;
        this.Name = name;
        this.Value = value;
        this.ValueText = valueText;
        this.Tag = tag;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ActualParameter(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "ValueText", this.ValueText);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Name = obj.Name;
        this.Value = obj.Value;
        this.ValueText = obj.ValueText;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const parameter = new ActualParameter(this.Model);
        parameter.Name = this.Name;
        parameter.Value = this.Value;
        parameter.Tag = this.Tag;
        parameter.ValueText = this.ValueText;
        return parameter;
    }
}
ActualParameter.Clr_Type_ID = "wf.Mex.ActualParameter";
BpmnModelHelper.RegisterElementType(new ActualParameter(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class WFExtensionElement extends ExtensionElement {
    /**
     * @protected
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     */
    constructor(model, id, name) {
        super(model);
        this.ExtendedAttributes = {};
        this.Id = id || '';
        this.Name = name || '';
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ExtendedAttributes = {};
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.Code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        /** @type {?} */
        let extAttributeElements = [];
        for (let key in this.ExtendedAttributes) {
            /** @type {?} */
            let obj = {};
            BpmnModelHelper.SetAttributeValue(obj, "Name", key);
            BpmnModelHelper.SetAttributeValue(obj, "Value", this.ExtendedAttributes[key]);
            extAttributeElements.push(obj);
        }
        BpmnModelHelper.SetAttributeValue(obj, "ExtendedAttributes", extAttributeElements);
        if (this.GetMexExtensionElements4ConvertTo().length > 0) {
            /** @type {?} */
            let mexJsonArray = [];
            this.GetMexExtensionElements4ConvertTo().forEach((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                mexJsonArray.push(value.ConvertToJsonObject());
            }));
            BpmnModelHelper.SetAttributeValue(obj, "MexExtensionElements", mexJsonArray);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Code = obj.Code;
        this.Name = obj.Name;
        this.Description = obj.Description;
        /** @type {?} */
        let extAttributeElements = (/** @type {?} */ (obj.ExtendedAttributes));
        if (extAttributeElements && extAttributeElements.length > 0) {
            extAttributeElements.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.ExtendedAttributes[item.Name] = item.Value;
            }));
        }
        /** @type {?} */
        let mexJsonArray = (/** @type {?} */ (obj.MexExtensionElements));
        if (mexJsonArray && mexJsonArray.length > 0) {
            /** @type {?} */
            let list = new Array();
            mexJsonArray.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let mexExtElementObj = (/** @type {?} */ (BpmnModelHelper.GetElementType(item.ClrTypeID)));
                if (mexExtElementObj) {
                    mexExtElementObj.LoadFromJsonObject(item);
                    list.push(mexExtElementObj);
                }
            }));
            this.SetMexExtensionElements4LoadFrom(list);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    GetMexExtensionElements4ConvertTo() {
        return [];
    }
    /**
     * @protected
     * @param {?} list
     * @return {?}
     */
    SetMexExtensionElements4LoadFrom(list) {
    }
    /**
     * @return {?}
     */
    GetExtendedAttributes() {
        return this.ExtendedAttributes;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ToolTime = {
    /// <summary> 过程实例已经创建事件 </summary>
    PROCESSINSTANCE_CREATED: "PROCESSINSTANCE_CREATED",
    /// <summary> 过程实例已经启动事件 </summary>
    PROCESSINSTANCE_STARTED: "PROCESSINSTANCE_STARTED",
    /// <summary> 过程实例已经挂起事件 </summary>
    PROCESSINSTANCE_SUSPENDED: "PROCESSINSTANCE_SUSPENDED",
    /// <summary> 过程实例已经暂停事件 </summary>
    PROCESSINSTANCE_RESUMED: "PROCESSINSTANCE_RESUMED",
    /// <summary> 过程实例已经完成事件 </summary>  
    PROCESSINSTANCE_COMPLETED: "PROCESSINSTANCE_COMPLETED",
    /// <summary> 过程实例已经中止事件 </summary>
    PROCESSINSTANCE_TERMINATED: "PROCESSINSTANCE_TERMINATED",
    ///<summary>流程实例预警启动事件</summary>
    PROCESSINSTANCE_ALARM: "PROCESSINSTANCE_ALARM",
    ///<summary>流程实例超时事件</summary> 
    PROCESSINSTANCE_TIMEOUT: "PROCESSINSTANCE_TIMEOUT",
    /// <summary> 过程实例已经删除事件 </summary>
    PROCESSINSTANCE_DELETED: "PROCESSINSTANCE_DELETED",
    PROCESSINSTANCE_REACTIVATED: 'PROCESSINSTANCE_REACTIVATED',
    PROCESSINSTANCE_CANCELED: 'PROCESSINSTANCE_CANCELED',
    PROCESSINSTANCE_ROLLBACK: 'PROCESSINSTANCE_ROLLBACK',
    /// <summary> 驳回后重新提交 </summary>
    PROCESSINSTANCE_RESUBMIT: 'PROCESSINSTANCE_RESUBMIT',
    /// <summary> 环节办理人变更事件 </summary>
    ACTIVITY_AND_PARTICIPANT_UPDATED: "ACTIVITY_AND_PARTICIPANT_UPDATED",
    /// <summary> 活动实例已经创建事件 </summary>
    ACTIVITY_CREATED: "ACTIVITY_CREATED",
    /// <summary> 活动实例已经启动事件 </summary>
    ACTIVITY_STARTED: "ACTIVITY_STARTED",
    /// <summary> 活动实例已经挂起事件 </summary>
    ACTIVITY_SUSPENDED: "ACTIVITY_SUSPENDED",
    /// <summary> 活动实例已经恢复事件 </summary>
    ACTIVITY_RESUMED: "ACTIVITY_RESUMED",
    /// <summary> 活动实例已经完成事件 </summary>
    ACTIVITY_COMPLETED: "ACTIVITY_COMPLETED",
    /// <summary> 活动实例已经终止事件 </summary>
    ACTIVITY_TERMINATED: "ACTIVITY_TERMINATED",
    /// <summary> 工作项已经创建事件 </summary>
    WORKITEM_CREATED: "WORKITEM_CREATED",
    /// <summary> 工作项已经分配事件 </summary>
    WORKITEM_ASSIGNED: "WORKITEM_ASSIGNED",
    /// <summary> 工作项已经启动事件 </summary>
    WORKITEM_STARTED: "WORKITEM_STARTED",
    /// <summary> 工作项已经挂起事件 </summary>
    WORKITEM_SUSPENDED: "WORKITEM_SUSPENDED",
    /// <summary> 工作项已经暂停事件 </summary>
    WORKITEM_RESUMED: "WORKITEM_RESUMED",
    /// <summary> 工作项已经完成事件 </summary>
    WORKITEM_COMPLETED: "WORKITEM_COMPLETED",
    /// <summary> 工作项已经终止事件 </summary>
    WORKITEM_TERMINATED: "WORKITEM_TERMINATED",
    /// <summary> 工作项预警启动事件 </summary>
    WORKITEM_ALARM: "WORKITEM_ALARM",
    /// <summary> 工作项超时事件</summary>
    WORKITEM_TIMEOUT: "WORKITEM_TIMEOUT",
    /// <summary> 未定义</summary>
    UNDEFINITION: "UNDEFINITION",
    LOADDATA: "LOADDATA",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class Tool extends WFExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = Tool.Clr_Type_ID;
        this.ActualParameters = new Array();
        this.Execution = ExecutionType.SYNCHRONOUS;
        this.AsyncCallBackType = AsyncCallBackType.NO;
        this.Time = ToolTime.UNDEFINITION;
        this.isForCompensation = false;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        /** @type {?} */
        let actualParametersElements = [];
        if (this.ActualParameters !== null && this.ActualParameters.length > 0) {
            this.ActualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        BpmnModelHelper.SetAttributeValue(obj, 'Execution', this.Execution);
        BpmnModelHelper.SetAttributeValue(obj, 'Time', this.Time);
        BpmnModelHelper.SetAttributeValue(obj, 'IsForCompensation', this.isForCompensation);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let actualParameter = new ActualParameter(this.Model);
                actualParameter.LoadFromJsonObject(item);
                this.ActualParameters.push(actualParameter);
            }));
        }
        this.Execution = (/** @type {?} */ (obj.Execution));
        this.Time = (/** @type {?} */ (obj.Time));
        this.isForCompensation = obj.IsForCompensation;
    }
}
Tool.Clr_Type_ID = "wf.Tool";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Component extends Tool {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = Component.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new Component(this.Model);
    }
    //Json 序列化
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "MetadataId", this.MetadataId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentType", this.ComponentType);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.MethodCode);
        BpmnModelHelper.SetAttributeValue(obj, "ScopeType", this.ScopeType);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.MetadataId = obj.MetadataId;
        this.ComponentType = obj.ComponentType;
        this.MethodCode = obj.MethodCode;
        this.ScopeType = obj.ScopeType;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const component = new Component(this.Model);
        component.Id = BpmnModelHelper.GenerateElementId();
        component.Code = this.Code;
        component.Name = this.Name;
        component.Description = this.Description;
        component.Execution = this.Execution;
        component.AsyncCallBackType = this.AsyncCallBackType;
        component.Time = this.Time;
        component.isForCompensation = this.isForCompensation;
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const p of this.ActualParameters) {
                /** @type {?} */
                const parameter = p.clone();
                component.ActualParameters.push(parameter);
            }
        }
        component.MetadataId = this.MetadataId;
        component.ComponentType = this.ComponentType;
        component.MethodCode = this.MethodCode;
        component.ScopeType = this.ScopeType;
        return component;
    }
}
Component.Clr_Type_ID = "wf.Component";
BpmnModelHelper.RegisterElementType(new Component(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomizeAction extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CustomizeAction.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.code = null;
        this.name = null;
        this.terminalType = null;
        // this.enable = true;
        this.actualParameters = [];
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.name);
        BpmnModelHelper.SetAttributeValue(obj, "TerminalType", this.terminalType);
        // BpmnModelHelper.SetAttributeValue(obj, "Enable", this.enable);
        /** @type {?} */
        let actualParametersElements = [];
        if (this.actualParameters !== null && this.actualParameters.length > 0) {
            this.actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = obj.Id;
        this.code = obj.Code;
        this.name = obj.Name;
        this.terminalType = obj.TerminalType;
        // this.enable = obj.Enable;
        /** @type {?} */
        let actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let actualParameter = new ActualParameter(this.Model);
                actualParameter.LoadFromJsonObject(item);
                this.actualParameters.push(actualParameter);
            }));
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CustomizeAction(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const customizeAction = new CustomizeAction(this.Model);
        customizeAction.id = BpmnModelHelper.GenerateElementId();
        customizeAction.code = this.code;
        customizeAction.name = this.name;
        customizeAction.terminalType = this.terminalType;
        customizeAction.actualParameters = new Array();
        if (this.actualParameters && this.actualParameters.length > 0) {
            for (const p of this.actualParameters) {
                /** @type {?} */
                const actualParameter = p.clone();
                customizeAction.actualParameters.push(actualParameter);
            }
        }
        return customizeAction;
    }
}
CustomizeAction.Clr_Type_ID = "wf.CustomizeAction";
BpmnModelHelper.RegisterElementType(new CustomizeAction(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const DisplayTerminal = {
    ALL: 'ALL',
    WEB: 'WEB',
    APP: 'APP',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteForm extends ExtensionElement {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     * @param {?=} actualParameters
     */
    constructor(model, id, name, actualParameters) {
        super(model);
        this.ClrTypeID = ExecuteForm.Clr_Type_ID;
        this.Id = id || '';
        this.Name = name || '';
        this.ActualParameters = actualParameters || [];
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ExecuteForm(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.FormType = null;
        this.Id = null;
        this.Name = null;
        this.ActualParameters = [];
        this.ComponentId = null;
        this.formFormatId = null;
        this.formatConfigId = null;
        this.TerminalType = TerminalType.PC;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "FormType", this.FormType);
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        BpmnModelHelper.SetAttributeValue(obj, "TerminalType", this.TerminalType);
        BpmnModelHelper.SetAttributeValue(obj, "FormFormatId", this.formFormatId);
        BpmnModelHelper.SetAttributeValue(obj, "FormatConfigId", this.formatConfigId);
        /** @type {?} */
        let actualParametersElements = [];
        if (this.ActualParameters !== null && this.ActualParameters.length > 0) {
            this.ActualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.FormType = obj.FormType;
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.ComponentId = obj.ComponentId;
        this.TerminalType = (/** @type {?} */ (obj.TerminalType));
        this.formFormatId = ExtensionMethod.GetAttributeValue4String(obj, "FormFormatId");
        this.formatConfigId = ExtensionMethod.GetAttributeValue4String(obj, "FormatConfigId");
        /** @type {?} */
        let actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let actualParameter = new ActualParameter(this.Model);
                actualParameter.LoadFromJsonObject(item);
                this.ActualParameters.push(actualParameter);
            }));
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const executeForm = new ExecuteForm(this.Model);
        executeForm.Id = BpmnModelHelper.GenerateElementId();
        executeForm.Name = this.Name;
        executeForm.FormType = this.FormType;
        executeForm.formFormatId = this.formFormatId;
        executeForm.formatConfigId = this.formatConfigId;
        executeForm.TerminalType = this.TerminalType;
        executeForm.ComponentId = this.ComponentId;
        executeForm.ActualParameters = new Array();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const p of this.ActualParameters) {
                /** @type {?} */
                const parameter = p.clone();
                executeForm.ActualParameters.push(parameter);
            }
        }
        return executeForm;
    }
}
ExecuteForm.Clr_Type_ID = "wf.ExecuteForm";
BpmnModelHelper.RegisterElementType(new ExecuteForm(new BpmnModel()));
/** @enum {string} */
const TerminalType = {
    PC: 'PC',
    MOBILE: 'MOBILE',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const JumpScopeCategory = {
    /// 仅转移线直接连接的节点
    OutConnectNode: 'OutConnectNode',
    /// 流程范围内任意跳转
    Global: 'Global',
    /// 后继活动范围内跳转
    AfterNodes: 'AfterNodes',
    /// 指定的活动范围内跳转
    SpecifiedSet: 'SpecifiedSet',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const JumpScopeDefaultType = {
    /// 默认选中第一行
    FirstNode: 'FirstNode',
    /// 强制手工选择
    NullNode: 'NullNode',
    /// 指定节点
    SpecifyNode: 'SpecifyNode',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JumpScope extends ExtensionElement {
    /**
     * @param {?} model
     * @param {?=} category
     * @param {?=} DefaultType
     */
    constructor(model, category, DefaultType) {
        super(model);
        this.ClrTypeID = JumpScope.Clr_Type_ID;
        this.Category = category || JumpScopeCategory.SpecifiedSet;
        this.DefaultType = DefaultType || JumpScopeDefaultType.FirstNode;
        this.DestinationActivities = new Array();
        this.DefaultActivity = '';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new JumpScope(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Category = JumpScopeCategory.Global;
        this.DefaultType = JumpScopeDefaultType.FirstNode;
        this.DestinationActivities = new Array();
        this.DefaultActivity = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Category", this.Category);
        BpmnModelHelper.SetAttributeValue(obj, "DefaultType", this.DefaultType);
        BpmnModelHelper.SetAttributeValue(obj, "DestinationActivities", this.DestinationActivities);
        BpmnModelHelper.SetAttributeValue(obj, "DefaultActivity", this.DefaultActivity);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Category = obj.Category;
        this.DefaultType = obj.DefaultType;
        this.DestinationActivities = obj.DestinationActivities;
        this.DefaultActivity = obj.DefaultActivity;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const jumpScope = new JumpScope(this.Model);
        jumpScope.Category = this.Category;
        jumpScope.DefaultType = this.DefaultType;
        jumpScope.DefaultActivity = this.DefaultActivity;
        jumpScope.DestinationActivities = new Array();
        if (this.DestinationActivities && this.DestinationActivities.length > 0) {
            for (const d of this.DestinationActivities) {
                jumpScope.DestinationActivities.push(d);
            }
        }
        return jumpScope;
    }
}
JumpScope.Clr_Type_ID = "wf.JumpScope";
BpmnModelHelper.RegisterElementType(new JumpScope(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Notification extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = Notification.Clr_Type_ID;
        /// <summary>消息的发送方式：同步或者异步</summary>
        this.Execution = ExecutionType.SYNCHRONOUS;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new Notification(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ToString() {
        return "Message[name='" + this.Name + "'" + ", content='" + this.Header + "\r\n" + this.Body + "\r\n" + this.Footer + "'" + ",receiver=" + this.Receiver + "]";
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'Id', this.Id);
        BpmnModelHelper.SetAttributeValue(obj, 'Name', this.Name);
        BpmnModelHelper.SetAttributeValue(obj, 'Time', this.Time);
        BpmnModelHelper.SetAttributeValue(obj, 'Condition', this.Condition);
        BpmnModelHelper.SetAttributeValue(obj, 'SenderName', this.SenderName);
        BpmnModelHelper.SetAttributeValue(obj, 'Receiver', this.Receiver);
        BpmnModelHelper.SetAttributeValue(obj, 'Way', this.Way);
        BpmnModelHelper.SetAttributeValue(obj, 'Header', this.Header);
        BpmnModelHelper.SetAttributeValue(obj, 'Body', this.Body);
        BpmnModelHelper.SetAttributeValue(obj, 'Footer', this.Footer);
        BpmnModelHelper.SetAttributeValue(obj, 'SendTempAssMessage', this.SendTempAssMessage);
        BpmnModelHelper.SetAttributeValue(obj, 'Execution', this.Execution);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.Time = (/** @type {?} */ (obj.Time));
        this.Condition = obj.Condition;
        this.SenderName = obj.SenderName;
        this.Receiver = obj.Receiver;
        this.Way = obj.Way;
        this.Header = obj.Header;
        this.Body = obj.Body;
        this.Footer = obj.Footer;
        this.SendTempAssMessage = obj.SendTempAssMessage;
        this.Execution = (/** @type {?} */ (obj.Execution));
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const notification = new Notification(this.Model);
        return notification;
    }
}
Notification.Clr_Type_ID = "wf.Notification";
/** @enum {number} */
const NotifyTime = {
    ///<summary>流程实例预警启动事件</summary>
    PROCESSINSTANCE_ALARM: 0,
    ///<summary>流程实例超时事件</summary> 
    PROCESSINSTANCE_TIMEOUT: 1,
    /// <summary> 过程实例已经异常退出事件 </summary>
    PROCESSINSTANCE_ABORT: 2,
    /// <summary> 过程实例已经完成事件 </summary>  
    PROCESSINSTANCE_COMPLETE: 3,
    /// <summary> 过程实例已经创建事件 </summary>
    PROCESSINSTANCE_CREATE: 4,
    /// <summary> 过程实例已经删除事件 </summary>
    PROCESSINSTANCE_DELETE: 5,
    /// <summary> 过程实例已经暂停事件 </summary>
    PROCESSINSTANCE_RESUME: 6,
    /// <summary> 过程实例已经启动事件 </summary>
    PROCESSINSTANCE_START: 7,
    /// <summary> 过程实例已经挂起事件 </summary>
    PROCESSINSTANCE_SUSPEND: 8,
    /// <summary> 过程实例已经中止事件 </summary>
    PROCESSINSTANCE_TERMINATE: 9,
    /// <summary> 活动实例已经异常退出事件 </summary>
    ACTIVITY_ABORTED: 10,
    /// <summary> 活动实例已经完成事件 </summary>
    ACTIVITY_COMPLETED: 11,
    /// <summary> 活动实例已经创建事件 </summary>
    ACTIVITY_CREATED: 12,
    /// <summary> 活动实例已经暂停事件 </summary>
    ACTIVITY_RESUMED: 13,
    /// <summary> 活动实例已经启动事件 </summary>
    ACTIVITY_STARTED: 14,
    /// <summary> 活动实例已经停止事件 </summary>
    ACTIVITY_STOPPED: 15,
    /// <summary> 活动实例已经挂起事件 </summary>
    ACTIVITY_SUSPENDED: 16,
    /// <summary> 活动实例已经中止事件 </summary>
    ACTIVITY_TERMINATED: 17,
    /// <summary>活动实例已经取回</summary>
    ACTIVITY_RETRIEVED: 18,
    /// <summary>活动实例从该活动取回</summary>
    ACTIVITY_RETRIEVED_FROM: 19,
    /// <summary>活动实例回退</summary>
    ACTIVITY_ROLLBACK: 20,
    /// <summary>活动实例回退到该活动 </summary>
    ACTIVITY_ROLLBACK_TO: 21,
    /// <summary> 工作项已经异常退出事件 </summary>
    WORKITEM_ABORTED: 22,
    /// <summary> 工作项已经分配事件 </summary>
    WORKITEM_ASSIGNED: 23,
    /// <summary> 工作项已经完成事件 </summary>
    WORKITEM_COMPLETED: 24,
    /// <summary> 工作项已经创建事件 </summary>
    WORKITEM_CREATED: 25,
    /// <summary> 工作项已经暂停事件 </summary>
    WORKITEM_RESUMED: 26,
    /// <summary> 工作项已经启动事件 </summary>
    WORKITEM_STARTED: 27,
    /// <summary> 工作项已经停止事件 </summary>
    WORKITEM_STOPPED: 28,
    /// <summary> 工作项已经挂起事件 </summary>
    WORKITEM_SUSPENDED: 29,
    /// <summary> 工作项已经终止事件 </summary>
    WORKITEM_TERMINATED: 30,
    /// <summary> 工作项预警启动事件 </summary>
    WORKITEM_ALARM: 31,
    /// <summary> 工作项超时事件</summary>
    WORKITEM_TIMEOUT: 32,
    /// <summary> 未定义</summary>
    UNDEFINITION: 33,
};
NotifyTime[NotifyTime.PROCESSINSTANCE_ALARM] = 'PROCESSINSTANCE_ALARM';
NotifyTime[NotifyTime.PROCESSINSTANCE_TIMEOUT] = 'PROCESSINSTANCE_TIMEOUT';
NotifyTime[NotifyTime.PROCESSINSTANCE_ABORT] = 'PROCESSINSTANCE_ABORT';
NotifyTime[NotifyTime.PROCESSINSTANCE_COMPLETE] = 'PROCESSINSTANCE_COMPLETE';
NotifyTime[NotifyTime.PROCESSINSTANCE_CREATE] = 'PROCESSINSTANCE_CREATE';
NotifyTime[NotifyTime.PROCESSINSTANCE_DELETE] = 'PROCESSINSTANCE_DELETE';
NotifyTime[NotifyTime.PROCESSINSTANCE_RESUME] = 'PROCESSINSTANCE_RESUME';
NotifyTime[NotifyTime.PROCESSINSTANCE_START] = 'PROCESSINSTANCE_START';
NotifyTime[NotifyTime.PROCESSINSTANCE_SUSPEND] = 'PROCESSINSTANCE_SUSPEND';
NotifyTime[NotifyTime.PROCESSINSTANCE_TERMINATE] = 'PROCESSINSTANCE_TERMINATE';
NotifyTime[NotifyTime.ACTIVITY_ABORTED] = 'ACTIVITY_ABORTED';
NotifyTime[NotifyTime.ACTIVITY_COMPLETED] = 'ACTIVITY_COMPLETED';
NotifyTime[NotifyTime.ACTIVITY_CREATED] = 'ACTIVITY_CREATED';
NotifyTime[NotifyTime.ACTIVITY_RESUMED] = 'ACTIVITY_RESUMED';
NotifyTime[NotifyTime.ACTIVITY_STARTED] = 'ACTIVITY_STARTED';
NotifyTime[NotifyTime.ACTIVITY_STOPPED] = 'ACTIVITY_STOPPED';
NotifyTime[NotifyTime.ACTIVITY_SUSPENDED] = 'ACTIVITY_SUSPENDED';
NotifyTime[NotifyTime.ACTIVITY_TERMINATED] = 'ACTIVITY_TERMINATED';
NotifyTime[NotifyTime.ACTIVITY_RETRIEVED] = 'ACTIVITY_RETRIEVED';
NotifyTime[NotifyTime.ACTIVITY_RETRIEVED_FROM] = 'ACTIVITY_RETRIEVED_FROM';
NotifyTime[NotifyTime.ACTIVITY_ROLLBACK] = 'ACTIVITY_ROLLBACK';
NotifyTime[NotifyTime.ACTIVITY_ROLLBACK_TO] = 'ACTIVITY_ROLLBACK_TO';
NotifyTime[NotifyTime.WORKITEM_ABORTED] = 'WORKITEM_ABORTED';
NotifyTime[NotifyTime.WORKITEM_ASSIGNED] = 'WORKITEM_ASSIGNED';
NotifyTime[NotifyTime.WORKITEM_COMPLETED] = 'WORKITEM_COMPLETED';
NotifyTime[NotifyTime.WORKITEM_CREATED] = 'WORKITEM_CREATED';
NotifyTime[NotifyTime.WORKITEM_RESUMED] = 'WORKITEM_RESUMED';
NotifyTime[NotifyTime.WORKITEM_STARTED] = 'WORKITEM_STARTED';
NotifyTime[NotifyTime.WORKITEM_STOPPED] = 'WORKITEM_STOPPED';
NotifyTime[NotifyTime.WORKITEM_SUSPENDED] = 'WORKITEM_SUSPENDED';
NotifyTime[NotifyTime.WORKITEM_TERMINATED] = 'WORKITEM_TERMINATED';
NotifyTime[NotifyTime.WORKITEM_ALARM] = 'WORKITEM_ALARM';
NotifyTime[NotifyTime.WORKITEM_TIMEOUT] = 'WORKITEM_TIMEOUT';
NotifyTime[NotifyTime.UNDEFINITION] = 'UNDEFINITION';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OtherAssignActivityNodeInfo extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OtherAssignActivityNodeInfo.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefinitionId", this.activityDefinitionId);
        BpmnModelHelper.SetAttributeValue(obj, "Required", this.required);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.activityDefinitionId = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefinitionId");
        this.required = ExtensionMethod.GetAttributeValue4Boolean(obj, "Required");
        /** @type {?} */
        const conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const otherAssignActivityNodeInfo = new OtherAssignActivityNodeInfo(this.Model);
        otherAssignActivityNodeInfo.activityDefinitionId = this.activityDefinitionId;
        if (this.condition) {
            otherAssignActivityNodeInfo.condition = this.condition.clone();
        }
        otherAssignActivityNodeInfo.required = this.required;
        return otherAssignActivityNodeInfo;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OtherAssignActivityNodeInfo(this.Model);
    }
}
OtherAssignActivityNodeInfo.Clr_Type_ID = "wf.OtherAssignActivityNodeInfo";
BpmnModelHelper.RegisterElementType(new OtherAssignActivityNodeInfo(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OtherAssignNodes extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OtherAssignNodes.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.otherAssignActivityNodeInfos = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            /** @type {?} */
            const destArray = new Array();
            for (const item of this.otherAssignActivityNodeInfos) {
                destArray.push(item.ConvertToJsonObject());
            }
            BpmnModelHelper.SetAttributeValue(obj, "OtherAssignActivityNodeInfos", destArray);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        const destArrayElement = ExtensionMethod.GetAttributeValue(obj, "OtherAssignActivities");
        if (destArrayElement && destArrayElement.length > 0) {
            for (const item of destArrayElement) {
                this.otherAssignActivities.push(item);
            }
        }
        /** @type {?} */
        const newDestArrayElement = ExtensionMethod.GetAttributeValue(obj, "OtherAssignActivityNodeInfos");
        if (newDestArrayElement && newDestArrayElement.length > 0) {
            for (const item of newDestArrayElement) {
                /** @type {?} */
                const otherInfo = new OtherAssignActivityNodeInfo(this.Model);
                otherInfo.LoadFromJsonObject(item);
                this.otherAssignActivityNodeInfos.push(otherInfo);
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const assignScope = new OtherAssignNodes(this.Model);
        assignScope.otherAssignActivities = new Array();
        if (this.otherAssignActivities && this.otherAssignActivities.length > 0) {
            for (const d of this.otherAssignActivities) {
                assignScope.otherAssignActivities.push(d);
            }
        }
        assignScope.otherAssignActivityNodeInfos = new Array();
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            for (const d of this.otherAssignActivityNodeInfos) {
                assignScope.otherAssignActivityNodeInfos.push(d.clone());
            }
        }
        return assignScope;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OtherAssignNodes(this.Model);
    }
}
OtherAssignNodes.Clr_Type_ID = "wf.OtherAssignNodes";
BpmnModelHelper.RegisterElementType(new OtherAssignNodes(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const StartMode = {
    /**
     * 直接启动
     */
    DIRECT: 'DIRECT',
    /**
     * 外部流程启动
     */
    EXTERNAL_PROCESS: 'EXTERNAL_PROCESS',
    /**
     * 子流程启动
     */
    SUB_PROCESS: 'SUB_PROCESS',
    // PUBLIC = 'PUBLIC',
    // PROTECTED = 'PROTECTED',
    // PRIVATE = 'PRIVATE'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessHeader extends ExtensionElement {
    /**
     * @param {?} model
     * @param {?=} bizDefKey
     * @param {?=} bizObjId
     * @param {?=} bizDefName
     * @param {?=} startMode
     */
    constructor(model, bizDefKey, bizObjId, bizDefName, startMode) {
        super(model);
        this.ClrTypeID = "wf.ProcessHeader";
        this.BizDefKey = bizDefKey || '';
        this.BizObjId = bizObjId || '';
        this.BizDefName = bizDefName || '';
        this.allowPreAssign = false;
        this.enablePriority = false;
        this.enableWholeOrderRetrieve = false;
        this.startMode = startMode || StartMode.DIRECT;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ProcessHeader(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.BizDefKey = null;
        this.BizObjId = null;
        this.BizDefName = null;
        this.allowPreAssign = false;
        this.enablePriority = false;
        this.enableWholeOrderRetrieve = false;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "BizDefKey", this.BizDefKey);
        BpmnModelHelper.SetAttributeValue(obj, "BizObjId", this.BizObjId);
        BpmnModelHelper.SetAttributeValue(obj, "BizDefName", this.BizDefName);
        BpmnModelHelper.SetAttributeValue(obj, "AllowPreAssign", this.allowPreAssign);
        BpmnModelHelper.SetAttributeValue(obj, "EnablePriority", this.enablePriority);
        BpmnModelHelper.SetAttributeValue(obj, "EnableWholeOrderRetrieve", this.enableWholeOrderRetrieve);
        BpmnModelHelper.SetAttributeValue(obj, "StartMode", this.startMode);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.BizDefKey = obj.BizDefKey;
        this.BizObjId = obj.BizObjId;
        this.BizDefName = obj.BizDefName;
        this.allowPreAssign = obj.AllowPreAssign;
        this.enablePriority = obj.EnablePriority;
        this.enableWholeOrderRetrieve = obj.EnableWholeOrderRetrieve;
        if (obj.StartMode) {
            this.startMode = obj.StartMode;
        }
        else if (obj.AccessLevel) {
            switch (obj.AccessLevel) {
                case 'PUBLIC':
                    this.startMode = StartMode.DIRECT;
                    break;
                case 'PROTECTED':
                    this.startMode = StartMode.EXTERNAL_PROCESS;
                    break;
                case 'PRIVATE':
                    this.startMode = StartMode.SUB_PROCESS;
                    break;
            }
        }
    }
}
BpmnModelHelper.RegisterElementType(new ProcessHeader(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendProperty extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ExtendProperty.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Key", this.key);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.key = ExtensionMethod.GetAttributeValue4String(obj, "Key");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ExtendProperty(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const extendProperty = new ExtendProperty(this.Model);
        extendProperty.key = this.key;
        extendProperty.value = this.value;
        return extendProperty;
    }
}
ExtendProperty.Clr_Type_ID = "wf.ExtendProperty";
BpmnModelHelper.RegisterElementType(new ExtendProperty(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StartActivity extends StartEvent {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = StartActivity.Clr_Type_ID;
        this.sendBackedTask = true;
        this.selectTargetAble = false;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ExecuteForms = new Array();
        this.extendProperties = new Array();
        this.sendBackedTask = true;
        this.selectTargetAble = false;
        this.jumpScope = null;
        this.otherAssignNodes = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'SendBackedTask', this.sendBackedTask);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectTargetAble', this.selectTargetAble);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.sendBackedTask = ExtensionMethod.GetAttributeValue4Boolean(obj, "SendBackedTask");
        this.selectTargetAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "SelectTargetAble");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.ExecuteForms != null) {
            for (let form of this.ExecuteForms) {
                form.MexTag = StartActivity.MEXTAG;
                list.push(form);
            }
        }
        if (this.extendProperties != null) {
            for (let e of this.extendProperties) {
                e.MexTag = StartActivity.MEXTAG;
                list.push(e);
            }
        }
        if (this.jumpScope != null) {
            this.jumpScope.MexTag = StartActivity.MEXTAG;
            list.push(this.jumpScope);
        }
        if (this.otherAssignNodes != null) {
            this.otherAssignNodes.MexTag = StartActivity.MEXTAG;
            list.push(this.otherAssignNodes);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== StartActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case ExecuteForm.Clr_Type_ID:
                    this.ExecuteForms.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                case JumpScope.Clr_Type_ID:
                    this.jumpScope = ((/** @type {?} */ (extensionElement)));
                    break;
                case OtherAssignNodes.Clr_Type_ID:
                    this.otherAssignNodes = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new StartActivity(this.Model);
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const startActivity = new StartActivity(this.Model);
        startActivity.Name = this.Name;
        startActivity.sendBackedTask = this.sendBackedTask;
        startActivity.selectTargetAble = this.selectTargetAble;
        startActivity.jumpScope = null;
        if (this.jumpScope) {
            startActivity.jumpScope = this.jumpScope.clone();
        }
        startActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            for (const f of this.ExecuteForms) {
                /** @type {?} */
                const executeForm = f.clone();
                startActivity.ExecuteForms.push(executeForm);
            }
        }
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                startActivity.extendProperties.push(extendProperty);
            }
        }
        if (this.otherAssignNodes) {
            startActivity.otherAssignNodes = this.otherAssignNodes.clone();
        }
        return startActivity;
    }
    /**
     * @param {?} forms
     * @return {?}
     */
    setDefaultForms(forms) {
        if (!this.ExecuteForms) {
            this.ExecuteForms = new Array();
        }
        for (const form of forms) {
            /** @type {?} */
            let params = (/** @type {?} */ (form.urlParameters));
            /** @type {?} */
            let actParas = new Array();
            if (params && params.length > 0) {
                for (let para of params) {
                    /** @type {?} */
                    let actPara = new ActualParameter(this.Model, para.code, para.value);
                    if (para.Value && para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                        actPara.Tag = 'expression';
                    }
                    else {
                        actPara.Tag = 'constant';
                    }
                    actParas.push(actPara);
                }
            }
            /** @type {?} */
            const id = BpmnModelHelper.GenerateElementId();
            /** @type {?} */
            let item = new ExecuteForm(this.Model, id, form.name, actParas);
            item.ComponentId = null;
            item.FormType = '0';
            item.formFormatId = form.id;
            if (form.terminal === 'PC') {
                item.TerminalType = TerminalType.PC;
            }
            else if (form.terminal === 'Mobile') {
                item.TerminalType = TerminalType.MOBILE;
            }
            this.ExecuteForms.push(item);
        }
    }
}
StartActivity.Clr_Type_ID = "wf.StartActivity";
StartActivity.MEXTAG = "wf.StartActivity";
BpmnModelHelper.RegisterElementType(new StartActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovalPivot extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ApprovalPivot.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Type", this.type);
        ExtensionMethod.SetAttributeValue(obj, "Title", this.title);
        ExtensionMethod.SetAttributeValue(obj, "Description", this.description);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.type = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "Type")));
        this.title = ExtensionMethod.GetAttributeValue4String(obj, "Title");
        this.description = ExtensionMethod.GetAttributeValue4String(obj, "Description");
        /** @type {?} */
        const conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ApprovalPivot(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const approvalPivot = new ApprovalPivot(this.Model);
        approvalPivot.type = this.type;
        approvalPivot.title = this.title;
        approvalPivot.description = this.description;
        if (this.condition) {
            approvalPivot.condition = this.condition.clone();
        }
        return approvalPivot;
    }
}
ApprovalPivot.Clr_Type_ID = "wf.ApprovalPivot";
BpmnModelHelper.RegisterElementType(new ApprovalPivot(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovalPivotConfig extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ApprovalPivotConfig.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.approvalPivots = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Title", this.title);
        ExtensionMethod.SetAttributeValue(obj, "Enable", this.enable);
        ExtensionMethod.SetAttributeValue(obj, "Expand", this.expand);
        /** @type {?} */
        const approvalPivots = new Array();
        if (this.approvalPivots !== null && this.approvalPivots.length > 0) {
            this.approvalPivots.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                approvalPivots.push(item.ConvertToJsonObject());
            }));
        }
        ExtensionMethod.SetAttributeValue(obj, "ApprovalPivots", approvalPivots);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.title = ExtensionMethod.GetAttributeValue4String(obj, "Title");
        this.enable = ExtensionMethod.GetAttributeValue4Boolean(obj, "Enable");
        this.expand = ExtensionMethod.GetAttributeValue4Boolean(obj, "Expand");
        /** @type {?} */
        const approvalPivots = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, "ApprovalPivots")));
        if (approvalPivots !== null && approvalPivots.length > 0) {
            approvalPivots.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                const approvalPivot = new ApprovalPivot(this.Model);
                approvalPivot.LoadFromJsonObject(item);
                this.approvalPivots.push(approvalPivot);
            }));
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ApprovalPivotConfig(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const approvalPivotConfig = new ApprovalPivotConfig(this.Model);
        approvalPivotConfig.title = this.title;
        approvalPivotConfig.enable = this.enable;
        approvalPivotConfig.expand = this.expand;
        approvalPivotConfig.approvalPivots = new Array();
        if (this.approvalPivots && this.approvalPivots.length > 0) {
            for (const p of this.approvalPivots) {
                /** @type {?} */
                const approvalPivot = p.clone();
                approvalPivotConfig.approvalPivots.push(approvalPivot);
            }
        }
        return approvalPivotConfig;
    }
}
ApprovalPivotConfig.Clr_Type_ID = "wf.ApprovalPivotConfig";
BpmnModelHelper.RegisterElementType(new ApprovalPivotConfig(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckCondition extends MexExpressionImpl {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CheckCondition.Clr_Type_ID;
        this.valueVersion = ConditionValueVersion.Unsure;
        this.checkTime = 'UNDEFINITION';
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "CheckTime", this.checkTime);
        ExtensionMethod.SetAttributeValue(obj, "ValueVersion", this.valueVersion);
        if (this.errorTips && this.errorTips.size > 0) {
            /** @type {?} */
            const jsonArray = new Array();
            this.errorTips.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                /** @type {?} */
                const childObj = new Object;
                ExtensionMethod.SetAttributeValue(childObj, "Key", key);
                ExtensionMethod.SetAttributeValue(childObj, "Value", value);
                jsonArray.push(childObj);
            }));
            ExtensionMethod.SetAttributeValue(obj, "ErrorTips", jsonArray);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.checkTime = ExtensionMethod.GetAttributeValue4String(obj, "CheckTime");
        this.valueVersion = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "ValueVersion")));
        /** @type {?} */
        const jsonArray = ExtensionMethod.GetAttributeValue(obj, "ErrorTips");
        if (jsonArray && jsonArray.length > 0) {
            if (!this.errorTips) {
                this.errorTips = new Map();
            }
            for (const childObj of jsonArray) {
                /** @type {?} */
                const key = ExtensionMethod.GetAttributeValue4String(childObj, "Key");
                /** @type {?} */
                const value = ExtensionMethod.GetAttributeValue4String(childObj, "Value");
                this.errorTips.set(key, value);
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const condition = new CheckCondition(this.Model);
        condition.value = this.value;
        condition.valueVersion = this.valueVersion;
        condition.checkTime = this.checkTime;
        if (this.errorTips && this.errorTips.size > 0) {
            condition.errorTips = new Map();
            this.errorTips.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                condition.errorTips.set(key, value);
            }));
        }
        return condition;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CheckCondition(this.Model);
    }
}
CheckCondition.Clr_Type_ID = "wf.CheckCondition";
BpmnModelHelper.RegisterElementType(new CheckCondition(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ActionScope = {
    /**
     * 默认
     */
    Default: 'Default',
    /**
     * 指派
     */
    AssignUser: 'AssignUser',
    /**
     * 移交
     */
    Transfer: 'Transfer',
    /**
     * 征询
     */
    AddSignFront: 'AddSignFront',
    /**
     * 加签
     */
    AddSignBehind: 'AddSignBehind',
    /**
     * 知会
     */
    Notify: "Notify",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class ParticipantExpression extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.actionScope = ActionScope.Default;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "ActionScope", this.actionScope ? this.actionScope : ActionScope.Default);
        ExtensionMethod.SetAttributeValue(obj, "Id", this.id);
        ExtensionMethod.SetAttributeValue(obj, "Name", this.name);
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        if (this.condition) {
            ExtensionMethod.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.actionScope = (/** @type {?} */ ((ExtensionMethod.GetAttributeValue4String(obj, "ActionScope") ? ExtensionMethod.GetAttributeValue4String(obj, "ActionScope") : ActionScope.Default)));
        this.id = ExtensionMethod.GetAttributeValue4String(obj, "Id");
        this.name = ExtensionMethod.GetAttributeValue4String(obj, "Name");
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
        if (obj.Condition) {
            /** @type {?} */
            let condition = new Condition(this.Model);
            condition.LoadFromJsonObject(obj.Condition);
            this.condition = condition;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityExecutorParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} activityDefId
     * @param {?=} activityDefName
     */
    constructor(model, activityDefId, activityDefName) {
        super(model);
        this.ClrTypeID = ActivityExecutorParticipantExpression.Clr_Type_ID;
        this.activityDefId = activityDefId;
        this.activityDefName = activityDefName;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefId", this.activityDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefName", this.activityDefName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.activityDefId = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefId");
        this.activityDefName = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefName");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ActivityExecutorParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const activityExecutorParticipant = new ActivityExecutorParticipantExpression(this.Model);
        activityExecutorParticipant.id = BpmnModelHelper.GenerateElementId();
        activityExecutorParticipant.name = this.name;
        activityExecutorParticipant.activityDefId = this.activityDefId;
        activityExecutorParticipant.activityDefName = this.activityDefName;
        // if (this.Condition) {
        //     activityExecutorParticipant.Condition = this.Condition.clone();
        // }
        return activityExecutorParticipant;
    }
}
ActivityExecutorParticipantExpression.Clr_Type_ID = 'wf.ActivityExecutorParticipantExpression';
BpmnModelHelper.RegisterElementType(new ActivityExecutorParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SerializeUtils {
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} actualParameters
     * @return {?}
     */
    static setListAttributeValue(obj, attributeName, actualParameters) {
        /** @type {?} */
        const actualParametersElements = new Array();
        if (actualParameters && actualParameters.length > 0) {
            for (const p of actualParameters) {
                actualParametersElements.push(p.ConvertToJsonObject());
            }
        }
        BpmnModelHelper.SetAttributeValue(obj, attributeName, actualParametersElements);
    }
    /**
     * @param {?} model
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static getListFromJsonObject(model, obj, attributeName) {
        /** @type {?} */
        const actualParameterList = new Array();
        /** @type {?} */
        const actualParametersElement = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, attributeName)));
        if (actualParametersElement && actualParametersElement.length > 0) {
            for (const p of actualParametersElement) {
                /** @type {?} */
                const actualParameter = new ActualParameter(model);
                actualParameter.LoadFromJsonObject(p);
                actualParameterList.push(actualParameter);
            }
        }
        return actualParameterList;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ComponentParticipantExpression.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.actualParameters = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.componentId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentName", this.componentName);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.methodCode);
        BpmnModelHelper.SetAttributeValue(obj, "MethodName", this.methodName);
        SerializeUtils.setListAttributeValue(obj, 'ActualParameters', this.actualParameters);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.componentId = obj.ComponentId;
        this.componentName = obj.ComponentName;
        this.methodCode = obj.MethodCode;
        this.methodName = obj.MethodName;
        this.actualParameters = SerializeUtils.getListFromJsonObject(this.Model, obj, 'ActualParameters');
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ComponentParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const componentParticipant = new ComponentParticipantExpression(this.Model);
        componentParticipant.id = BpmnModelHelper.GenerateElementId();
        componentParticipant.name = this.name;
        componentParticipant.componentId = this.componentId;
        componentParticipant.componentName = this.componentName;
        componentParticipant.methodCode = this.methodCode;
        componentParticipant.methodName = this.methodName;
        componentParticipant.actualParameters = new Array();
        if (this.actualParameters && this.actualParameters.length > 0) {
            for (const p of this.actualParameters) {
                /** @type {?} */
                const parameter = p.clone();
                componentParticipant.actualParameters.push(parameter);
            }
        }
        // if (this.Condition) {
        //     componentParticipant.Condition = this.Condition.clone();
        // }
        return componentParticipant;
    }
}
ComponentParticipantExpression.Clr_Type_ID = 'wf.ComponentParticipantExpression';
ComponentParticipantExpression.CLR_TYPE_NAME = '构件';
BpmnModelHelper.RegisterElementType(new ComponentParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} MatrixDefId
     * @param {?=} MatrixDefName
     * @param {?=} ConditionField1
     * @param {?=} ConditionFieldText1
     * @param {?=} ConditionField2
     * @param {?=} ConditionFieldText2
     * @param {?=} ConditionField3
     * @param {?=} ConditionFieldText3
     * @param {?=} MultivaluedCondition
     * @param {?=} DataFieldAlias
     */
    constructor(model, MatrixDefId, MatrixDefName, ConditionField1, ConditionFieldText1, ConditionField2, ConditionFieldText2, ConditionField3, ConditionFieldText3, MultivaluedCondition, DataFieldAlias) {
        super(model);
        this.ClrTypeID = MatrixParticipantExpression.Clr_Type_ID;
        this.matrixDefId = MatrixDefId;
        this.matrixDefName = MatrixDefName;
        this.conditionField1 = ConditionField1;
        this.conditionFieldText1 = ConditionFieldText1;
        this.conditionField2 = ConditionField2;
        this.conditionFieldText2 = ConditionFieldText2;
        this.conditionField3 = ConditionField3;
        this.conditionFieldText3 = ConditionFieldText3;
        this.multivaluedCondition = MultivaluedCondition;
        this.dataFieldAlias = DataFieldAlias;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefId", this.matrixDefId);
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefName", this.matrixDefName);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField1", this.conditionField1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText1", this.conditionFieldText1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField2", this.conditionField2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText2", this.conditionFieldText2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField3", this.conditionField3);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText3", this.conditionFieldText3);
        BpmnModelHelper.SetAttributeValue(obj, "MultivaluedCondition", this.multivaluedCondition);
        BpmnModelHelper.SetAttributeValue(obj, "DataFieldAlias", this.dataFieldAlias);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.matrixDefId = obj.MatrixDefId;
        this.matrixDefName = obj.MatrixDefName;
        this.conditionField1 = obj.ConditionField1;
        this.conditionFieldText1 = obj.ConditionFieldText1;
        this.conditionField2 = obj.ConditionField2;
        this.conditionFieldText2 = obj.ConditionFieldText2;
        this.conditionField3 = obj.ConditionField3;
        this.conditionFieldText3 = obj.ConditionFieldText3;
        this.multivaluedCondition = obj.MultivaluedCondition;
        this.dataFieldAlias = obj.DataFieldAlias;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MatrixParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const matrixParticipant = new MatrixParticipantExpression(this.Model);
        matrixParticipant.id = BpmnModelHelper.GenerateElementId();
        matrixParticipant.name = this.name;
        matrixParticipant.matrixDefId = this.matrixDefId;
        matrixParticipant.matrixDefName = this.matrixDefName;
        matrixParticipant.conditionField1 = this.conditionField1;
        matrixParticipant.conditionFieldText1 = this.conditionFieldText1;
        matrixParticipant.conditionField2 = this.conditionField2;
        matrixParticipant.conditionFieldText2 = this.conditionFieldText2;
        matrixParticipant.conditionField3 = this.conditionField3;
        matrixParticipant.conditionFieldText3 = this.conditionFieldText3;
        matrixParticipant.multivaluedCondition = this.multivaluedCondition;
        matrixParticipant.dataFieldAlias = this.dataFieldAlias;
        return matrixParticipant;
    }
}
MatrixParticipantExpression.Clr_Type_ID = 'wf.MatrixParticipantExpression';
MatrixParticipantExpression.CLR_TYPE_NAME = '矩阵';
BpmnModelHelper.RegisterElementType(new MatrixParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const OrganizationLevel = {
    /**
     * 部门
    */
    DEPARTMENT: 'DEPARTMENT',
    /**
     * 单位
     */
    UNIT: 'UNIT',
    /**
    * 表单上的变量单位
    */
    DEFAULT: 'DEFAULT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrganizationParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OrganizationParticipantExpression.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.actionScope = ActionScope.AssignUser;
        this.organizationLevel = OrganizationLevel.DEPARTMENT;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "ActionScope", this.actionScope);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationLevel", this.organizationLevel);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationId", this.organizationId);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationCode", this.organizationCode);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationName", this.organizationName);
        ExtensionMethod.SetAttributeValue(obj, "IncludeChildren", this.includeChildren);
        ExtensionMethod.SetAttributeValue(obj, "ParentsUntil", this.parentsUntil);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.actionScope = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "ActionScope")));
        this.organizationLevel = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "OrganizationLevel")));
        this.organizationId = ExtensionMethod.GetAttributeValue4String(obj, "OrganizationId");
        this.organizationCode = ExtensionMethod.GetAttributeValue4String(obj, "OrganizationCode");
        this.organizationName = ExtensionMethod.GetAttributeValue4String(obj, "OrganizationName");
        this.includeChildren = ExtensionMethod.GetAttributeValue4Boolean(obj, "IncludeChildren");
        this.parentsUntil = ExtensionMethod.GetAttributeValue4Boolean(obj, "ParentsUntil");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const organizationParticipant = new OrganizationParticipantExpression(this.Model);
        organizationParticipant.id = BpmnModelHelper.GenerateElementId();
        organizationParticipant.name = this.name;
        organizationParticipant.actionScope = this.actionScope;
        organizationParticipant.organizationLevel = this.organizationLevel;
        organizationParticipant.organizationId = this.organizationId;
        organizationParticipant.organizationCode = this.organizationCode;
        organizationParticipant.organizationName = this.organizationName;
        organizationParticipant.includeChildren = this.includeChildren;
        organizationParticipant.parentsUntil = this.parentsUntil;
        organizationParticipant.tag = this.tag;
        return organizationParticipant;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OrganizationParticipantExpression(this.Model);
    }
}
OrganizationParticipantExpression.Clr_Type_ID = 'wf.OrganizationParticipantExpression';
BpmnModelHelper.RegisterElementType(new OrganizationParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PositionParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} positionId
     * @param {?=} positionName
     */
    constructor(model, positionId, positionName) {
        super(model);
        this.ClrTypeID = PositionParticipantExpression.Clr_Type_ID;
        /// <summary>
        /// 组织类型Code
        /// </summary>
        this.OrgType = 'Sys';
        this.PositionId = positionId;
        this.PositionName = positionName;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "PositionId", this.PositionId);
        BpmnModelHelper.SetAttributeValue(obj, "PositionName", this.PositionName);
        BpmnModelHelper.SetAttributeValue(obj, "PositionType", this.PositionType);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.PositionId = obj.PositionId;
        this.PositionName = obj.PositionName;
        this.PositionType = obj.PositionType;
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new PositionParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const positionParticipant = new PositionParticipantExpression(this.Model);
        positionParticipant.id = BpmnModelHelper.GenerateElementId();
        positionParticipant.name = this.name;
        positionParticipant.PositionId = this.PositionId;
        positionParticipant.PositionName = this.PositionName;
        positionParticipant.PositionType = this.PositionType;
        positionParticipant.OrgType = this.OrgType;
        positionParticipant.OrgId = this.OrgId;
        positionParticipant.OrgName = this.OrgName;
        // if (this.Condition) {
        //     positionParticipant.Condition = this.Condition.clone();
        // }
        return positionParticipant;
    }
}
PositionParticipantExpression.Clr_Type_ID = 'wf.PositionParticipantExpression';
PositionParticipantExpression.CLR_TYPE_NAME = '岗位';
BpmnModelHelper.RegisterElementType(new PositionParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReportingLineParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} RefUserId
     * @param {?=} RefEmployeeId
     * @param {?=} RefOrgId
     * @param {?=} ReportingLineDefId
     * @param {?=} ReportingLineDefName
     * @param {?=} Dimension
     */
    constructor(model, RefUserId, RefEmployeeId, RefOrgId, ReportingLineDefId, ReportingLineDefName, Dimension) {
        super(model);
        this.ClrTypeID = ReportingLineParticipantExpression.Clr_Type_ID;
        this.RefUserId = RefUserId;
        this.RefEmployeeId = RefEmployeeId;
        this.RefOrgId = RefOrgId;
        this.ReportingLineDefId = ReportingLineDefId;
        this.ReportingLineDefName = ReportingLineDefName;
        this.Dimension = Dimension;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "RefUserId", this.RefUserId);
        BpmnModelHelper.SetAttributeValue(obj, "RefEmployeeId", this.RefEmployeeId);
        BpmnModelHelper.SetAttributeValue(obj, "Dimension", this.Dimension);
        BpmnModelHelper.SetAttributeValue(obj, "RefOrgId", this.RefOrgId);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingLineDefId", this.ReportingLineDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingLineDefName", this.ReportingLineDefName);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.RefUserId = obj.RefUserId;
        this.RefEmployeeId = obj.RefEmployeeId;
        this.Dimension = obj.Dimension;
        this.RefOrgId = obj.RefOrgId;
        this.ReportingLineDefId = obj.ReportingLineDefId;
        this.ReportingLineDefName = obj.ReportingLineDefName;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ReportingLineParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const reportingLineParticipant = new ReportingLineParticipantExpression(this.Model);
        reportingLineParticipant.id = BpmnModelHelper.GenerateElementId();
        reportingLineParticipant.name = this.name;
        reportingLineParticipant.RefUserId = this.RefUserId;
        reportingLineParticipant.RefEmployeeId = this.RefEmployeeId;
        reportingLineParticipant.Dimension = this.Dimension;
        reportingLineParticipant.RefOrgId = this.RefOrgId;
        reportingLineParticipant.ReportingLineDefId = this.ReportingLineDefId;
        reportingLineParticipant.ReportingLineDefName = this.ReportingLineDefName;
        reportingLineParticipant.Tag = this.Tag;
        // if (this.Condition) {
        //     reportingLineParticipant.Condition = this.Condition.clone();
        // }
        return reportingLineParticipant;
    }
}
ReportingLineParticipantExpression.Clr_Type_ID = 'wf.ReportingLineParticipantExpression';
ReportingLineParticipantExpression.CLR_TYPE_NAME = '汇报关系';
BpmnModelHelper.RegisterElementType(new ReportingLineParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} userId
     * @param {?=} name
     * @param {?=} orgType
     */
    constructor(model, userId, name, orgType) {
        super(model);
        this.ClrTypeID = UserParticipantExpression.Clr_Type_ID;
        this.OrgType = 'Sys';
        this.UserId = userId;
        this.name = name;
        this.OrgType = orgType ? orgType : 'Sys';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UserParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "UserId", this.UserId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
        this.UserId = obj.UserId;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const userParticipant = new UserParticipantExpression(this.Model);
        userParticipant.id = BpmnModelHelper.GenerateElementId();
        userParticipant.name = this.name;
        userParticipant.OrgId = this.OrgId;
        userParticipant.OrgName = this.OrgName;
        userParticipant.OrgType = this.OrgType;
        userParticipant.UserId = this.UserId;
        userParticipant.Tag = this.Tag;
        // if (this.Condition) { 
        //     userParticipant.Condition = this.Condition.clone();
        // }
        return userParticipant;
    }
}
UserParticipantExpression.Clr_Type_ID = "wf.UserParticipantExpression";
UserParticipantExpression.CLR_TYPE_NAME = '用户';
BpmnModelHelper.RegisterElementType(new UserParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariableParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} varValue
     * @param {?=} name
     * @param {?=} varType
     */
    constructor(model, varValue, name, varType) {
        super(model);
        this.ClrTypeID = VariableParticipantExpression.Clr_Type_ID;
        this.VarValue = varValue;
        this.name = name;
        this.VarType = varType ? varType : 'Sys';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new VariableParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        BpmnModelHelper.SetAttributeValue(obj, "VarValue", this.VarValue);
        BpmnModelHelper.SetAttributeValue(obj, "VarType", this.VarType);
        BpmnModelHelper.SetAttributeValue(obj, "Relation", this.Relation);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Name = obj.Name;
        this.Tag = obj.Tag;
        this.VarValue = obj.VarValue;
        this.VarType = obj.VarType;
        this.Relation = obj.Relation;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const variableParticipant = new VariableParticipantExpression(this.Model);
        variableParticipant.id = BpmnModelHelper.GenerateElementId();
        variableParticipant.Name = this.Name;
        variableParticipant.Tag = this.Tag;
        variableParticipant.VarType = this.VarType;
        variableParticipant.VarValue = this.VarValue;
        variableParticipant.Relation = this.Relation;
        return variableParticipant;
    }
}
VariableParticipantExpression.Clr_Type_ID = "wf.VariableParticipantExpression";
VariableParticipantExpression.CLR_TYPE_NAME = '变量参与者';
BpmnModelHelper.RegisterElementType(new VariableParticipantExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HumanPerformerImpl extends HumanPerformer {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = HumanPerformerImpl.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.participantExpression != null) {
            list.push(this.participantExpression);
        }
        if (this.condition != null) {
            list.push(this.condition);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            switch (extensionElement.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case Condition.Clr_Type_ID:
                    this.condition = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const humanPerformerImpl = new HumanPerformerImpl(this.Model);
        if (this.participantExpression) {
            switch (this.participantExpression.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
            }
        }
        if (this.condition) {
            humanPerformerImpl.condition = this.condition.clone();
        }
        humanPerformerImpl.order = this.order;
        return humanPerformerImpl;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new HumanPerformerImpl(this.Model);
    }
}
HumanPerformerImpl.Clr_Type_ID = "wf.HumanPerformerImpl";
BpmnModelHelper.RegisterElementType(new HumanPerformerImpl(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageSettings extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ImageSettings.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "ImageOperation", this.imageOperation);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.imageOperation = ExtensionMethod.GetAttributeValue4String(obj, "ImageOperation");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ImageSettings(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const imageSettings = new ImageSettings(this.Model);
        imageSettings.imageOperation = this.imageOperation;
        return imageSettings;
    }
}
ImageSettings.Clr_Type_ID = "wf.ImageSettings";
BpmnModelHelper.RegisterElementType(new ImageSettings(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmsMessageVariable extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SmsMessageVariable.Clr_Type_ID;
        this.tag = 'expression';
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Code", this.code);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.code = ExtensionMethod.GetAttributeValue4String(obj, "Code");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SmsMessageVariable(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const smsMessageVariable = new SmsMessageVariable(this.Model);
        smsMessageVariable.code = this.code;
        smsMessageVariable.value = this.value;
        smsMessageVariable.tag = this.tag;
        return smsMessageVariable;
    }
}
SmsMessageVariable.Clr_Type_ID = "wf.SmsMessageVariable";
BpmnModelHelper.RegisterElementType(new SmsMessageVariable(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmsMessageTemplate extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SmsMessageTemplate.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.smsMessageVariables = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Code", this.code);
        ExtensionMethod.SetAttributeValue(obj, "Content", this.content);
        if (this.smsMessageVariables && this.smsMessageVariables.length > 0) {
            /** @type {?} */
            const variables = new Array();
            for (const variable of this.smsMessageVariables) {
                variables.push(variable.ConvertToJsonObject());
            }
            BpmnModelHelper.SetAttributeValue(obj, "SmsMessageVariables", variables);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.code = ExtensionMethod.GetAttributeValue4String(obj, "Code");
        this.content = ExtensionMethod.GetAttributeValue4String(obj, "Content");
        this.smsMessageVariables = new Array();
        /** @type {?} */
        const variables = ExtensionMethod.GetAttributeValue(obj, "SmsMessageVariables");
        if (variables && variables.length > 0) {
            for (const variable of variables) {
                /** @type {?} */
                const smsMessageVariable = new SmsMessageVariable(this.Model);
                smsMessageVariable.LoadFromJsonObject(variable);
                this.smsMessageVariables.push(smsMessageVariable);
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SmsMessageTemplate(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const smsMessageTemplate = new SmsMessageTemplate(this.Model);
        smsMessageTemplate.code = this.code;
        smsMessageTemplate.content = this.content;
        smsMessageTemplate.smsMessageVariables = new Array();
        if (this.smsMessageVariables && this.smsMessageVariables.length > 0) {
            for (const variable of this.smsMessageVariables) {
                /** @type {?} */
                const smsMessageVariable = variable.clone();
                smsMessageTemplate.smsMessageVariables.push(smsMessageVariable);
            }
        }
        return smsMessageTemplate;
    }
}
SmsMessageTemplate.Clr_Type_ID = "wf.SmsMessageTemplate";
BpmnModelHelper.RegisterElementType(new SmsMessageTemplate(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageNotice extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = MessageNotice.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.receiverExpressions = new Array();
        this.smsMessageTemplate = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Content", this.content);
        ExtensionMethod.SetAttributeValue(obj, "SendTime", this.sendTime);
        ExtensionMethod.SetAttributeValue(obj, "SendType", this.sendType);
        ExtensionMethod.SetAttributeValue(obj, "Subject", this.subject);
        ExtensionMethod.SetAttributeValue(obj, "Receiver", this.receiver);
        ExtensionMethod.SetAttributeValue(obj, "ReceiverText", this.receiverText);
        if (this.receiverExpressions != null && this.receiverExpressions.length > 0) {
            /** @type {?} */
            const receiverList = new Array();
            for (const receiver of this.receiverExpressions) {
                receiverList.push(receiver.ConvertToJsonObject());
            }
            ExtensionMethod.SetAttributeValue(obj, "ReceiverExpressions", receiverList);
        }
        if (this.smsMessageTemplate) {
            ExtensionMethod.SetAttributeValue(obj, "SmsMessageTemplate", this.smsMessageTemplate.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.content = ExtensionMethod.GetAttributeValue4String(obj, "Content");
        this.sendTime = ExtensionMethod.GetAttributeValue4String(obj, "SendTime");
        this.sendType = ExtensionMethod.GetAttributeValue4String(obj, "SendType");
        this.subject = ExtensionMethod.GetAttributeValue4String(obj, "Subject");
        this.receiver = ExtensionMethod.GetAttributeValue4String(obj, "Receiver");
        this.receiverText = ExtensionMethod.GetAttributeValue4String(obj, "ReceiverText");
        /** @type {?} */
        const receiverList = ExtensionMethod.GetAttributeValue(obj, "ReceiverExpressions");
        if (receiverList && receiverList.length > 0) {
            this.receiverExpressions = new Array();
            for (const receiver of receiverList) {
                /** @type {?} */
                const clrTypeID = ExtensionMethod.GetAttributeValue4String(receiver, "ClrTypeID");
                switch (clrTypeID) {
                    case UserParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const userParticipantExpression = new UserParticipantExpression(this.Model);
                        userParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(userParticipantExpression);
                        break;
                    case PositionParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const positionParticipantExpression = new PositionParticipantExpression(this.Model);
                        positionParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(positionParticipantExpression);
                        break;
                    case ReportingLineParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const reportingLineParticipantExpression = new ReportingLineParticipantExpression(this.Model);
                        reportingLineParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(reportingLineParticipantExpression);
                        break;
                    case OrganizationParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const organizationParticipantExpression = new OrganizationParticipantExpression(this.Model);
                        organizationParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(organizationParticipantExpression);
                        break;
                    case MatrixParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const matrixParticipantExpression = new MatrixParticipantExpression(this.Model);
                        matrixParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(matrixParticipantExpression);
                        break;
                    case ComponentParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const componentParticipantExpression = new ComponentParticipantExpression(this.Model);
                        componentParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(componentParticipantExpression);
                        break;
                    case ActivityExecutorParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const activityExecutorParticipantExpression = new ActivityExecutorParticipantExpression(this.Model);
                        activityExecutorParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(activityExecutorParticipantExpression);
                        break;
                    default:
                        break;
                }
            }
        }
        /** @type {?} */
        const smsTemplateElement = ExtensionMethod.GetAttributeValue(obj, 'SmsMessageTemplate');
        if (smsTemplateElement) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(this.Model);
            smsMessageTemplate.LoadFromJsonObject(smsTemplateElement);
            this.smsMessageTemplate = smsMessageTemplate;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MessageNotice(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const messageNotice = new MessageNotice(this.Model);
        messageNotice.content = this.content;
        messageNotice.sendTime = this.sendTime;
        messageNotice.sendType = this.sendType;
        messageNotice.subject = this.subject;
        messageNotice.receiver = this.receiver;
        messageNotice.receiverText = this.receiverText;
        messageNotice.receiverExpressions = new Array();
        if (this.receiverExpressions && this.receiverExpressions.length > 0) {
            for (const r of this.receiverExpressions) {
                if (r instanceof OrganizationParticipantExpression) {
                    /** @type {?} */
                    const o = (/** @type {?} */ (r));
                    /** @type {?} */
                    const organizationParticipantExpression = o.clone();
                    messageNotice.receiverExpressions.push(organizationParticipantExpression);
                }
                else if (r instanceof UserParticipantExpression) {
                    /** @type {?} */
                    const u = (/** @type {?} */ (r));
                    /** @type {?} */
                    const userParticipantExpression = u.clone();
                    messageNotice.receiverExpressions.push(userParticipantExpression);
                }
                else if (r instanceof PositionParticipantExpression) {
                    /** @type {?} */
                    const p = (/** @type {?} */ (r));
                    /** @type {?} */
                    const positionParticipantExpression = p.clone();
                    messageNotice.receiverExpressions.push(positionParticipantExpression);
                }
                else if (r instanceof ReportingLineParticipantExpression) {
                    /** @type {?} */
                    const re = (/** @type {?} */ (r));
                    /** @type {?} */
                    const reportingLineParticipantExpression = re.clone();
                    messageNotice.receiverExpressions.push(reportingLineParticipantExpression);
                }
                else if (r instanceof MatrixParticipantExpression) {
                    /** @type {?} */
                    const m = (/** @type {?} */ (r));
                    /** @type {?} */
                    const matrixParticipantExpression = m.clone();
                    messageNotice.receiverExpressions.push(matrixParticipantExpression);
                }
                else if (r instanceof ComponentParticipantExpression) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (r));
                    /** @type {?} */
                    const componentParticipantExpression = c.clone();
                    messageNotice.receiverExpressions.push(componentParticipantExpression);
                }
                else if (r instanceof ActivityExecutorParticipantExpression) {
                    /** @type {?} */
                    const a = (/** @type {?} */ (r));
                    /** @type {?} */
                    const activityExecutorParticipantExpression = a.clone();
                    messageNotice.receiverExpressions.push(activityExecutorParticipantExpression);
                }
            }
        }
        if (this.smsMessageTemplate) {
            messageNotice.smsMessageTemplate = this.smsMessageTemplate.clone();
        }
        return messageNotice;
    }
}
MessageNotice.Clr_Type_ID = "wf.MessageNotice";
BpmnModelHelper.RegisterElementType(new MessageNotice(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TitleExpression extends MexExpressionImpl {
    /**
     * @param {?} model
     * @param {?=} value
     * @param {?=} valueLanguage
     */
    constructor(model, value, valueLanguage) {
        super(model, value);
        this.ClrTypeID = TitleExpression.Clr_Type_ID;
        this.valueLanguage = {};
        this.valueLanguage = valueLanguage;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.valueLanguage = {};
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'ValueLanguage', this.valueLanguage);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.valueLanguage = obj.ValueLanguage;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new TitleExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const titleExpression = new TitleExpression(this.Model);
        titleExpression.value = this.value;
        titleExpression.valueLanguage = this.valueLanguage;
        return titleExpression;
    }
}
TitleExpression.Clr_Type_ID = 'wf.TitleExpression';
BpmnModelHelper.RegisterElementType(new TitleExpression(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrganizationPotentialOwner extends PotentialOwner {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     */
    constructor(model, id, name) {
        super(model);
        this.ClrTypeID = OrganizationPotentialOwner.Clr_Type_ID;
        this.MEXTAG = 'wf.OrganizationPotentialOwner';
        this.Id = id;
        this.Name = name;
    }
    /**
     * @protected
     * @return {?}
     */
    resetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.actionScope = ActionScope.AssignUser;
        this.organizationLevel = OrganizationLevel.DEPARTMENT;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActionScope", this.actionScope);
        BpmnModelHelper.SetAttributeValue(obj, "OrganizationLevel", this.organizationLevel);
        BpmnModelHelper.SetAttributeValue(obj, "OrganizationId", this.organizationId);
        BpmnModelHelper.SetAttributeValue(obj, "OrganizationCode", this.organizationCode);
        BpmnModelHelper.SetAttributeValue(obj, "OrganizationName", this.organizationName);
        BpmnModelHelper.SetAttributeValue(obj, "IncludeChildren", this.includeChildren);
        BpmnModelHelper.SetAttributeValue(obj, "ParentsUntil", this.parentsUntil);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.actionScope = obj.ActionScope;
        this.organizationLevel = obj.OrganizationLevel;
        this.organizationId = obj.OrganizationId;
        this.organizationCode = obj.OrganizationCode;
        this.organizationName = obj.OrganizationName;
        this.includeChildren = obj.IncludeChildren;
        this.parentsUntil = obj.ParentsUntil;
        this.tag = obj.Tag;
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OrganizationPotentialOwner(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const organizationPotentialOwner = new OrganizationPotentialOwner(this.Model);
        organizationPotentialOwner.Id = BpmnModelHelper.GenerateElementId();
        organizationPotentialOwner.actionScope = this.actionScope;
        organizationPotentialOwner.organizationLevel = this.organizationLevel;
        organizationPotentialOwner.organizationId = this.organizationId;
        organizationPotentialOwner.organizationName = this.organizationName;
        organizationPotentialOwner.organizationCode = this.organizationCode;
        organizationPotentialOwner.includeChildren = this.includeChildren;
        organizationPotentialOwner.parentsUntil = this.parentsUntil;
        organizationPotentialOwner.tag = this.tag;
        return organizationPotentialOwner;
    }
}
OrganizationPotentialOwner.Clr_Type_ID = 'wf.OrganizationPotentialOwner';
BpmnModelHelper.RegisterElementType(new OrganizationPotentialOwner(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class Participant extends HumanPerformer {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     */
    constructor(model, id, name) {
        super(model);
        this.ClrTypeID = "wf.Participant";
        this.MexTag = 'wf.Participant';
        this.Id = id;
        this.Name = name;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.Condition) {
            this.Condition.MexTag = this.MexTag;
            list.push(this.Condition);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (const item of extensionElements) {
            if (item instanceof Condition) {
                /** @type {?} */
                const condition = (/** @type {?} */ (item));
                if (condition.MexTag === this.MexTag) {
                    this.Condition = condition;
                }
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityExecutorParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} ActivityDefId
     * @param {?=} ActivityDefName
     */
    constructor(model, ActivityDefId, ActivityDefName) {
        super(model);
        this.ClrTypeID = ActivityExecutorParticipant.Clr_Type_ID;
        this.ActivityDefId = ActivityDefId;
        this.ActivityDefName = ActivityDefName;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefId", this.ActivityDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefName", this.ActivityDefName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ActivityDefId = obj.ActivityDefId;
        this.ActivityDefName = obj.ActivityDefName;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ActivityExecutorParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const activityExecutorParticipant = new ActivityExecutorParticipant(this.Model);
        activityExecutorParticipant.Id = BpmnModelHelper.GenerateElementId();
        activityExecutorParticipant.ActivityDefId = this.ActivityDefId;
        activityExecutorParticipant.ActivityDefName = this.ActivityDefName;
        if (this.Condition) {
            activityExecutorParticipant.Condition = this.Condition.clone();
        }
        return activityExecutorParticipant;
    }
}
ActivityExecutorParticipant.Clr_Type_ID = 'wf.ActivityExecutorParticipant';
ActivityExecutorParticipant.CLR_TYPE_NAME = '活动办理人';
BpmnModelHelper.RegisterElementType(new ActivityExecutorParticipant(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentParticipant extends Participant {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ComponentParticipant.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ActualParameters = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentName", this.ComponentName);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.MethodCode);
        BpmnModelHelper.SetAttributeValue(obj, "MethodName", this.MethodName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ComponentId = obj.ComponentId;
        this.ComponentName = obj.ComponentName;
        this.MethodCode = obj.MethodCode;
        this.MethodName = obj.MethodName;
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const param of this.ActualParameters) {
                param.MexTag = ComponentParticipant.MEXTAG;
                list.push(param);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (const extensionElement of extensionElements) {
            if (extensionElement instanceof ActualParameter) {
                /** @type {?} */
                const actualParameter = (/** @type {?} */ (extensionElement));
                if (actualParameter.MexTag === ComponentParticipant.MEXTAG) {
                    this.ActualParameters.push(actualParameter);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ComponentParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const componentParticipant = new ComponentParticipant(this.Model);
        componentParticipant.Id = BpmnModelHelper.GenerateElementId();
        componentParticipant.Name = this.Name;
        componentParticipant.ComponentId = this.ComponentId;
        componentParticipant.ComponentName = this.ComponentName;
        componentParticipant.MethodCode = this.MethodCode;
        componentParticipant.MethodName = this.MethodName;
        componentParticipant.ActualParameters = new Array();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const p of this.ActualParameters) {
                /** @type {?} */
                const parameter = p.clone();
                componentParticipant.ActualParameters.push(parameter);
            }
        }
        if (this.Condition) {
            componentParticipant.Condition = this.Condition.clone();
        }
        return componentParticipant;
    }
}
ComponentParticipant.Clr_Type_ID = 'wf.ComponentParticipant';
ComponentParticipant.CLR_TYPE_NAME = '构件';
ComponentParticipant.MEXTAG = "wf.ComponentParticipant";
BpmnModelHelper.RegisterElementType(new ComponentParticipant(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} MatrixDefId
     * @param {?=} MatrixDefName
     * @param {?=} ConditionField1
     * @param {?=} ConditionFieldText1
     * @param {?=} ConditionField2
     * @param {?=} ConditionFieldText2
     * @param {?=} ConditionField3
     * @param {?=} ConditionFieldText3
     * @param {?=} DataFieldAlias
     */
    constructor(model, MatrixDefId, MatrixDefName, ConditionField1, ConditionFieldText1, ConditionField2, ConditionFieldText2, ConditionField3, ConditionFieldText3, DataFieldAlias) {
        super(model);
        this.ClrTypeID = MatrixParticipant.Clr_Type_ID;
        this.MatrixDefId = MatrixDefId;
        this.MatrixDefName = MatrixDefName;
        this.ConditionField1 = ConditionField1;
        this.ConditionFieldText1 = ConditionFieldText1;
        this.ConditionField2 = ConditionField2;
        this.ConditionFieldText2 = ConditionFieldText2;
        this.ConditionField3 = ConditionField3;
        this.ConditionFieldText3 = ConditionFieldText3;
        this.DataFieldAlias = DataFieldAlias;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefId", this.MatrixDefId);
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefName", this.MatrixDefName);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField1", this.ConditionField1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText1", this.ConditionFieldText1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField2", this.ConditionField2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText2", this.ConditionFieldText2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField3", this.ConditionField3);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText3", this.ConditionFieldText3);
        BpmnModelHelper.SetAttributeValue(obj, "DataFieldAlias", this.DataFieldAlias);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.MatrixDefId = obj.MatrixDefId;
        this.MatrixDefName = obj.MatrixDefName;
        this.ConditionField1 = obj.ConditionField1;
        this.ConditionFieldText1 = obj.ConditionFieldText1;
        this.ConditionField2 = obj.ConditionField2;
        this.ConditionFieldText2 = obj.ConditionFieldText2;
        this.ConditionField3 = obj.ConditionField3;
        this.ConditionFieldText3 = obj.ConditionFieldText3;
        this.DataFieldAlias = obj.DataFieldAlias;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MatrixParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const matrixParticipant = new MatrixParticipant(this.Model);
        matrixParticipant.Id = BpmnModelHelper.GenerateElementId();
        matrixParticipant.Name = this.Name;
        matrixParticipant.MatrixDefId = this.MatrixDefId;
        matrixParticipant.MatrixDefName = this.MatrixDefName;
        matrixParticipant.ConditionField1 = this.ConditionField1;
        matrixParticipant.ConditionFieldText1 = this.ConditionFieldText1;
        matrixParticipant.ConditionField2 = this.ConditionField2;
        matrixParticipant.ConditionFieldText2 = this.ConditionFieldText2;
        matrixParticipant.ConditionField3 = this.ConditionField3;
        matrixParticipant.ConditionFieldText3 = this.ConditionFieldText3;
        matrixParticipant.DataFieldAlias = this.DataFieldAlias;
        if (this.Condition) {
            matrixParticipant.Condition = this.Condition.clone();
        }
        return matrixParticipant;
    }
}
MatrixParticipant.Clr_Type_ID = 'wf.MatrixParticipant';
MatrixParticipant.CLR_TYPE_NAME = '矩阵';
BpmnModelHelper.RegisterElementType(new MatrixParticipant(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PositionParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     */
    constructor(model, id, name) {
        super(model);
        this.ClrTypeID = PositionParticipant.Clr_Type_ID;
        /// <summary>
        /// 组织类型Code
        /// </summary>
        this.OrgType = 'Sys';
        this.PositionId = id;
        this.PositionName = name;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "PositionId", this.PositionId);
        BpmnModelHelper.SetAttributeValue(obj, "PositionName", this.PositionName);
        BpmnModelHelper.SetAttributeValue(obj, "PositionType", this.PositionType);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.PositionId = obj.PositionId;
        this.PositionName = obj.PositionName;
        this.PositionType = obj.PositionType;
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new PositionParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const positionParticipant = new PositionParticipant(this.Model);
        positionParticipant.Id = BpmnModelHelper.GenerateElementId();
        positionParticipant.Name = this.Name;
        positionParticipant.PositionId = this.PositionId;
        positionParticipant.PositionName = this.PositionName;
        positionParticipant.PositionType = this.PositionType;
        positionParticipant.OrgType = this.OrgType;
        positionParticipant.OrgId = this.OrgId;
        positionParticipant.OrgName = this.OrgName;
        if (this.Condition) {
            positionParticipant.Condition = this.Condition.clone();
        }
        return positionParticipant;
    }
}
PositionParticipant.Clr_Type_ID = 'wf.PositionParticipant';
PositionParticipant.CLR_TYPE_NAME = '岗位';
BpmnModelHelper.RegisterElementType(new PositionParticipant(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReportingLineParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} RefUserId
     * @param {?=} RefEmployeeId
     * @param {?=} ReportingReferObject
     * @param {?=} RefOrgId
     * @param {?=} RefOrgName
     * @param {?=} ReportingLineDefId
     * @param {?=} ReportingLineDefName
     * @param {?=} Dimension
     */
    constructor(model, RefUserId, RefEmployeeId, ReportingReferObject, RefOrgId, RefOrgName, ReportingLineDefId, ReportingLineDefName, Dimension) {
        super(model);
        this.ClrTypeID = ReportingLineParticipant.Clr_Type_ID;
        this.RefUserId = RefUserId;
        this.RefEmployeeId = RefEmployeeId;
        this.ReportingReferObject = ReportingReferObject;
        this.RefOrgId = RefOrgId;
        this.RefOrgName = RefOrgName;
        this.ReportingLineDefId = ReportingLineDefId;
        this.ReportingLineDefName = ReportingLineDefName;
        this.Dimension = Dimension;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "RefUserId", this.RefUserId);
        BpmnModelHelper.SetAttributeValue(obj, "RefEmployeeId", this.RefEmployeeId);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingReferObject", this.ReportingReferObject);
        BpmnModelHelper.SetAttributeValue(obj, "Dimension", this.Dimension);
        BpmnModelHelper.SetAttributeValue(obj, "RefOrgId", this.RefOrgId);
        BpmnModelHelper.SetAttributeValue(obj, "RefOrgName", this.RefOrgName);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingLineDefId", this.ReportingLineDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingLineDefName", this.ReportingLineDefName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.RefUserId = obj.RefUserId;
        this.RefEmployeeId = obj.RefEmployeeId;
        this.ReportingReferObject = obj.ReportingReferObject;
        this.Dimension = obj.Dimension;
        this.RefOrgId = obj.RefOrgId;
        this.RefOrgName = obj.RefOrgName;
        this.ReportingLineDefId = obj.ReportingLineDefId;
        this.ReportingLineDefName = obj.ReportingLineDefName;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ReportingLineParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const reportingLineParticipant = new ReportingLineParticipant(this.Model);
        reportingLineParticipant.Id = BpmnModelHelper.GenerateElementId();
        reportingLineParticipant.Name = this.Name;
        reportingLineParticipant.RefUserId = this.RefUserId;
        reportingLineParticipant.RefEmployeeId = this.RefEmployeeId;
        reportingLineParticipant.ReportingReferObject = this.ReportingReferObject;
        reportingLineParticipant.Dimension = this.Dimension;
        reportingLineParticipant.RefOrgId = this.RefOrgId;
        reportingLineParticipant.RefOrgName = this.RefOrgName;
        reportingLineParticipant.ReportingLineDefId = this.ReportingLineDefId;
        reportingLineParticipant.ReportingLineDefName = this.ReportingLineDefName;
        reportingLineParticipant.Tag = this.Tag;
        if (this.Condition) {
            reportingLineParticipant.Condition = this.Condition.clone();
        }
        return reportingLineParticipant;
    }
}
ReportingLineParticipant.Clr_Type_ID = 'wf.ReportingLineParticipant';
ReportingLineParticipant.CLR_TYPE_NAME = '汇报关系';
BpmnModelHelper.RegisterElementType(new ReportingLineParticipant(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} userId
     * @param {?=} name
     * @param {?=} orgType
     */
    constructor(model, userId, name, orgType) {
        super(model);
        this.ClrTypeID = UserParticipant.Clr_Type_ID;
        this.UserId = userId;
        this.Name = name;
        this.OrgType = orgType ? orgType : 'Sys';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UserParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "UserId", this.UserId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
        this.UserId = obj.UserId;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const userParticipant = new UserParticipant(this.Model);
        userParticipant.Id = BpmnModelHelper.GenerateElementId();
        userParticipant.Name = this.Name;
        userParticipant.OrgId = this.OrgId;
        userParticipant.OrgName = this.OrgName;
        userParticipant.OrgType = this.OrgType;
        userParticipant.UserId = this.UserId;
        userParticipant.Tag = this.Tag;
        if (this.Condition) {
            userParticipant.Condition = this.Condition.clone();
        }
        return userParticipant;
    }
}
UserParticipant.Clr_Type_ID = "wf.UserParticipant";
UserParticipant.CLR_TYPE_NAME = '用户';
BpmnModelHelper.RegisterElementType(new UserParticipant(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantScheme extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ParticipantScheme.Clr_Type_ID;
        this.MexTag = 'participantScheme';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ParticipantScheme(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Performers", this.Performers);
        if (this.Condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.Condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.Performers = obj.Performers;
        /** @type {?} */
        const conditionElement = obj.Condition;
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.Condition = condition;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Id = '';
        this.Name = '';
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const participantScheme = new ParticipantScheme(this.Model);
        participantScheme.Id = this.Id;
        participantScheme.Name = this.Name;
        participantScheme.Performers = this.Performers;
        if (this.Condition) {
            participantScheme.Condition = this.Condition.clone();
        }
        return participantScheme;
    }
}
ParticipantScheme.Clr_Type_ID = "wf.ParticipantScheme";
BpmnModelHelper.RegisterElementType(new ParticipantScheme(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutomaticApprovalRule extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AutomaticApprovalRule.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Id", this.Id);
        ExtensionMethod.SetAttributeValue(obj, "ConclusionValue", this.conclusionValue);
        ExtensionMethod.SetAttributeValue(obj, "Comment", this.comment);
        ExtensionMethod.SetAttributeValue(obj, "OperatorText", this.operatorText);
        ExtensionMethod.SetAttributeValue(obj, "ParticipantAsOperator", this.participantAsOperator);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = ExtensionMethod.GetAttributeValue4String(obj, "Id");
        this.conclusionValue = ExtensionMethod.GetAttributeValue4String(obj, "ConclusionValue");
        this.comment = ExtensionMethod.GetAttributeValue4String(obj, "Comment");
        this.operatorText = ExtensionMethod.GetAttributeValue4String(obj, "OperatorText");
        this.participantAsOperator = ExtensionMethod.GetAttributeValue4Boolean(obj, "ParticipantAsOperator");
        /** @type {?} */
        const conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AutomaticApprovalRule(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const automaticApprovalRule = new AutomaticApprovalRule(this.Model);
        automaticApprovalRule.Id = this.Id;
        automaticApprovalRule.comment = this.comment;
        automaticApprovalRule.conclusionValue = this.conclusionValue;
        automaticApprovalRule.operatorText = this.operatorText;
        automaticApprovalRule.participantAsOperator = this.participantAsOperator;
        if (this.condition) {
            automaticApprovalRule.condition = this.condition.clone();
        }
        return automaticApprovalRule;
    }
}
AutomaticApprovalRule.Clr_Type_ID = "wf.AutomaticApprovalRule";
BpmnModelHelper.RegisterElementType(new AutomaticApprovalRule(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantSetting extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ParticipantSetting.Clr_Type_ID;
        this.MexTag = 'ParticipantSetting';
        this.NoPerformerStrategy = 'leave';
        this.HistoricFirst = false;
    }
    /**
     * @protected
     * @return {?}
     */
    resetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.NoPerformerStrategy = 'leave';
        this.HistoricFirst = true;
        this.ExclusionPerformers = new Array();
        this.automaticPerformers = new Array();
        this.automaticApprovalRules = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ExclusionPerformers", this.ExclusionPerformers);
        BpmnModelHelper.SetAttributeValue(obj, "AutomaticPerformers", this.automaticPerformers);
        BpmnModelHelper.SetAttributeValue(obj, "NoPerformerStrategy", this.NoPerformerStrategy);
        BpmnModelHelper.SetAttributeValue(obj, "HistoricFirst", this.HistoricFirst);
        BpmnModelHelper.SetAttributeValue(obj, "Neighboring", this.Neighboring);
        if (this.automaticApprovalRules && this.automaticApprovalRules.length > 0) {
            /** @type {?} */
            const rules = new Array();
            for (const a of this.automaticApprovalRules) {
                rules.push(a.ConvertToJsonObject());
            }
            BpmnModelHelper.SetAttributeValue(obj, "AutomaticApprovalRules", rules);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ExclusionPerformers = obj.ExclusionPerformers;
        this.NoPerformerStrategy = obj.NoPerformerStrategy;
        this.HistoricFirst = obj.HistoricFirst;
        this.Neighboring = obj.Neighboring;
        this.automaticPerformers = ExtensionMethod.GetAttributeValue(obj, "AutomaticPerformers");
        this.automaticApprovalRules = new Array();
        /** @type {?} */
        const rules = ExtensionMethod.GetAttributeValue(obj, "AutomaticApprovalRules");
        if (rules && rules.length > 0) {
            for (const r of rules) {
                /** @type {?} */
                const automaticApprovalRule = new AutomaticApprovalRule(this.Model);
                automaticApprovalRule.LoadFromJsonObject(r);
                this.automaticApprovalRules.push(automaticApprovalRule);
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ParticipantSetting(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const participantSetting = new ParticipantSetting(this.Model);
        participantSetting.ExclusionPerformers = new Array();
        if (this.ExclusionPerformers && this.ExclusionPerformers.length > 0) {
            for (const e of this.ExclusionPerformers) {
                participantSetting.ExclusionPerformers.push(e);
            }
        }
        participantSetting.NoPerformerStrategy = this.NoPerformerStrategy;
        participantSetting.HistoricFirst = this.HistoricFirst;
        participantSetting.Neighboring = this.Neighboring;
        participantSetting.automaticPerformers = new Array();
        if (this.automaticPerformers && this.automaticPerformers.length > 0) {
            for (const a of this.automaticPerformers) {
                participantSetting.automaticPerformers.push(a);
            }
        }
        participantSetting.automaticApprovalRules = new Array();
        if (this.automaticApprovalRules && this.automaticApprovalRules.length > 0) {
            for (const r of this.automaticApprovalRules) {
                /** @type {?} */
                const automaticApprovalRule = r.clone();
                participantSetting.automaticApprovalRules.push(automaticApprovalRule);
            }
        }
        return participantSetting;
    }
}
ParticipantSetting.Clr_Type_ID = "wf.ParticipantSetting";
BpmnModelHelper.RegisterElementType(new ParticipantSetting(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PotentialOwnerImpl extends PotentialOwner {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = PotentialOwnerImpl.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.participantExpression != null) {
            list.push(this.participantExpression);
        }
        if (this.condition != null) {
            list.push(this.condition);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            switch (extensionElement.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case Condition.Clr_Type_ID:
                    this.condition = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const potentialOwnerImpl = new PotentialOwnerImpl(this.Model);
        if (this.participantExpression) {
            switch (this.participantExpression.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
            }
        }
        if (this.condition) {
            potentialOwnerImpl.condition = this.condition.clone();
        }
        potentialOwnerImpl.order = this.order;
        return potentialOwnerImpl;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new PotentialOwnerImpl(this.Model);
    }
}
PotentialOwnerImpl.Clr_Type_ID = "wf.PotentialOwnerImpl";
BpmnModelHelper.RegisterElementType(new PotentialOwnerImpl(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class ExpireOperation extends MexExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Id", this.id);
        ExtensionMethod.SetAttributeValue(obj, "DurationType", this.durationType);
        ExtensionMethod.SetAttributeValue(obj, "TimeDuration", this.timeDuration);
        ExtensionMethod.SetAttributeValue(obj, "TimeUnit", this.timeUnit);
        ExtensionMethod.SetAttributeValue(obj, "OperationTypeName", this.operationTypeName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = ExtensionMethod.GetAttributeValue4String(obj, "Id");
        this.durationType = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "DurationType")));
        this.timeDuration = ExtensionMethod.GetAttributeValue4Int64(obj, "TimeDuration");
        this.timeUnit = ExtensionMethod.GetAttributeValue4String(obj, "TimeUnit");
        this.operationTypeName = ExtensionMethod.GetAttributeValue4String(obj, "OperationTypeName");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutoHandleExpireOperation extends ExpireOperation {
    constructor() {
        super(...arguments);
        this.ClrTypeID = AutoHandleExpireOperation.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Message", this.message);
        ExtensionMethod.SetAttributeValue(obj, "AutoHandleType", this.autoHandleType);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.message = ExtensionMethod.GetAttributeValue4String(obj, "Message");
        this.autoHandleType = ExtensionMethod.GetAttributeValue4String(obj, "AutoHandleType");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AutoHandleExpireOperation(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const autoHandleExpireOperation = new AutoHandleExpireOperation(this.Model);
        autoHandleExpireOperation.id = BpmnModelHelper.GenerateElementId();
        autoHandleExpireOperation.durationType = this.durationType;
        autoHandleExpireOperation.timeDuration = this.timeDuration;
        autoHandleExpireOperation.timeUnit = this.timeUnit;
        autoHandleExpireOperation.message = this.message;
        autoHandleExpireOperation.autoHandleType = this.autoHandleType;
        return autoHandleExpireOperation;
    }
}
AutoHandleExpireOperation.Clr_Type_ID = "wf.Mex.AutoHandleExpireOperation";
BpmnModelHelper.RegisterElementType(new AutoHandleExpireOperation(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SendMessageExpireOperation extends ExpireOperation {
    constructor() {
        super(...arguments);
        this.ClrTypeID = SendMessageExpireOperation.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.smsMessageTemplate = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Message", this.message);
        ExtensionMethod.SetAttributeValue(obj, "SendType", this.sendType);
        ExtensionMethod.SetAttributeValue(obj, "Subject", this.subject);
        ExtensionMethod.SetAttributeValue(obj, "Receiver", this.receiver);
        ExtensionMethod.SetAttributeValue(obj, "ReceiverText", this.receiverText);
        ExtensionMethod.SetAttributeValue(obj, "CycleEnable", this.cycleEnable);
        ExtensionMethod.SetAttributeValue(obj, "CycleTime", this.cycleTime);
        ExtensionMethod.SetAttributeValue(obj, "CycleTimeUnit", this.cycleTimeUnit);
        if (this.smsMessageTemplate) {
            ExtensionMethod.SetAttributeValue(obj, "SmsMessageTemplate", this.smsMessageTemplate.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.message = ExtensionMethod.GetAttributeValue4String(obj, "Message");
        this.sendType = ExtensionMethod.GetAttributeValue4String(obj, "SendType");
        this.subject = ExtensionMethod.GetAttributeValue4String(obj, "Subject");
        this.receiver = ExtensionMethod.GetAttributeValue4String(obj, "Receiver");
        this.receiverText = ExtensionMethod.GetAttributeValue4String(obj, "ReceiverText");
        this.cycleEnable = ExtensionMethod.GetAttributeValue4Boolean(obj, "CycleEnable");
        this.cycleTime = ExtensionMethod.GetAttributeValue4String(obj, "CycleTime");
        this.cycleTimeUnit = ExtensionMethod.GetAttributeValue4String(obj, "CycleTimeUnit");
        /** @type {?} */
        const smsTemplateElement = ExtensionMethod.GetAttributeValue(obj, 'SmsMessageTemplate');
        if (smsTemplateElement) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(this.Model);
            smsMessageTemplate.LoadFromJsonObject(smsTemplateElement);
            this.smsMessageTemplate = smsMessageTemplate;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SendMessageExpireOperation(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const sendMessageExpireOperation = new SendMessageExpireOperation(this.Model);
        sendMessageExpireOperation.id = BpmnModelHelper.GenerateElementId();
        sendMessageExpireOperation.durationType = this.durationType;
        sendMessageExpireOperation.timeDuration = this.timeDuration;
        sendMessageExpireOperation.timeUnit = this.timeUnit;
        sendMessageExpireOperation.message = this.message;
        sendMessageExpireOperation.sendType = this.sendType;
        sendMessageExpireOperation.subject = this.subject;
        sendMessageExpireOperation.receiver = this.receiver;
        sendMessageExpireOperation.receiverText = this.receiverText;
        sendMessageExpireOperation.cycleEnable = this.cycleEnable;
        sendMessageExpireOperation.cycleTime = this.cycleTime;
        sendMessageExpireOperation.cycleTimeUnit = this.cycleTimeUnit;
        if (this.smsMessageTemplate) {
            sendMessageExpireOperation.smsMessageTemplate = this.smsMessageTemplate.clone();
        }
        return sendMessageExpireOperation;
    }
}
SendMessageExpireOperation.Clr_Type_ID = "wf.Mex.SendMessageExpireOperation";
BpmnModelHelper.RegisterElementType(new SendMessageExpireOperation(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeLimitControl extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = TimeLimitControl.Clr_Type_ID;
        this.expireOperations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        ExtensionMethod.SetAttributeValue(obj, "DueTime", this.dueTime);
        ExtensionMethod.SetAttributeValue(obj, "TimeUnit", this.timeUnit);
        ExtensionMethod.SetAttributeValue(obj, "Enable", this.enable);
        /** @type {?} */
        const expireOperationElements = new Array();
        if (this.expireOperations !== null && this.expireOperations.length > 0) {
            this.expireOperations.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                expireOperationElements.push(item.ConvertToJsonObject());
            }));
        }
        ExtensionMethod.SetAttributeValue(obj, "ExpireOperations", expireOperationElements);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
        this.dueTime = ExtensionMethod.GetAttributeValue4String(obj, "DueTime");
        this.timeUnit = ExtensionMethod.GetAttributeValue4String(obj, "TimeUnit");
        this.enable = ExtensionMethod.GetAttributeValue4Boolean(obj, "Enable");
        /** @type {?} */
        const expireOperationElements = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, "ExpireOperations")));
        if (expireOperationElements !== null && expireOperationElements.length > 0) {
            expireOperationElements.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.OperationTypeName === 'SendMessageExpireOperation') {
                    /** @type {?} */
                    const expireOperation = new SendMessageExpireOperation(this.Model);
                    expireOperation.LoadFromJsonObject(item);
                    this.expireOperations.push(expireOperation);
                }
                else if (item.OperationTypeName === 'AutoHandleExpireOperation') {
                    /** @type {?} */
                    const expireOperation = new AutoHandleExpireOperation(this.Model);
                    expireOperation.LoadFromJsonObject(item);
                    this.expireOperations.push(expireOperation);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new TimeLimitControl(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const timeLimitControl = new TimeLimitControl(this.Model);
        timeLimitControl.tag = this.tag;
        timeLimitControl.enable = this.enable;
        timeLimitControl.dueTime = this.dueTime;
        timeLimitControl.timeUnit = this.timeUnit;
        timeLimitControl.expireOperations = new Array();
        if (this.expireOperations && this.expireOperations.length > 0) {
            for (const e of this.expireOperations) {
                if (e instanceof SendMessageExpireOperation) {
                    /** @type {?} */
                    const sendMessage = (/** @type {?} */ (e));
                    /** @type {?} */
                    const expireOperation = sendMessage.clone();
                    timeLimitControl.expireOperations.push(expireOperation);
                }
            }
        }
        return timeLimitControl;
    }
}
TimeLimitControl.Clr_Type_ID = "wf.TimeLimitControl";
BpmnModelHelper.RegisterElementType(new TimeLimitControl(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UrgeHandleRule extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = UrgeHandleRule.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.smsMessageTemplate = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "UrgeHandleAble", this.urgeHandleAble);
        ExtensionMethod.SetAttributeValue(obj, "SendType", this.sendType);
        ExtensionMethod.SetAttributeValue(obj, "EarlyTime", this.earlyTime);
        ExtensionMethod.SetAttributeValue(obj, "IntervalTime", this.intervalTime);
        ExtensionMethod.SetAttributeValue(obj, "UrgeMessageSubject", this.urgeMessageSubject);
        ExtensionMethod.SetAttributeValue(obj, "UrgeMessageContent", this.urgeMessageContent);
        ExtensionMethod.SetAttributeValue(obj, "AddReminder", this.addReminder);
        ExtensionMethod.SetAttributeValue(obj, "SubjectEditable", this.subjectEditable);
        ExtensionMethod.SetAttributeValue(obj, "ContentEditable", this.contentEditable);
        if (this.smsMessageTemplate) {
            ExtensionMethod.SetAttributeValue(obj, "SmsMessageTemplate", this.smsMessageTemplate.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.earlyTime = ExtensionMethod.GetAttributeValue4Int64(obj, "EarlyTime");
        this.intervalTime = ExtensionMethod.GetAttributeValue4Int64(obj, "IntervalTime");
        this.sendType = ExtensionMethod.GetAttributeValue4String(obj, "SendType");
        this.urgeHandleAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "UrgeHandleAble");
        this.urgeMessageSubject = ExtensionMethod.GetAttributeValue4String(obj, "UrgeMessageSubject");
        this.urgeMessageContent = ExtensionMethod.GetAttributeValue4String(obj, "UrgeMessageContent");
        this.addReminder = ExtensionMethod.GetAttributeValue4Boolean(obj, "AddReminder");
        this.subjectEditable = ExtensionMethod.GetAttributeValue4Boolean(obj, "SubjectEditable");
        this.contentEditable = ExtensionMethod.GetAttributeValue4Boolean(obj, "ContentEditable");
        /** @type {?} */
        const smsTemplateElement = ExtensionMethod.GetAttributeValue(obj, 'SmsMessageTemplate');
        if (smsTemplateElement) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(this.Model);
            smsMessageTemplate.LoadFromJsonObject(smsTemplateElement);
            this.smsMessageTemplate = smsMessageTemplate;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UrgeHandleRule(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const urgeHandleRule = new UrgeHandleRule(this.Model);
        urgeHandleRule.earlyTime = this.earlyTime;
        urgeHandleRule.intervalTime = this.intervalTime;
        urgeHandleRule.sendType = this.sendType;
        urgeHandleRule.urgeHandleAble = this.urgeHandleAble;
        urgeHandleRule.urgeMessageSubject = this.urgeMessageSubject;
        urgeHandleRule.urgeMessageContent = this.urgeMessageContent;
        urgeHandleRule.addReminder = this.addReminder;
        urgeHandleRule.subjectEditable = this.subjectEditable;
        urgeHandleRule.contentEditable = this.contentEditable;
        if (this.smsMessageTemplate) {
            urgeHandleRule.smsMessageTemplate = this.smsMessageTemplate.clone();
        }
        return urgeHandleRule;
    }
}
UrgeHandleRule.Clr_Type_ID = "wf.UrgeHandleRule";
BpmnModelHelper.RegisterElementType(new UrgeHandleRule(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariableSetting extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = VariableSetting.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        // ExtensionMethod.SetAttributeValue(obj, "VariableId", this.variableId);
        ExtensionMethod.SetAttributeValue(obj, "VariableCode", this.variableCode);
        ExtensionMethod.SetAttributeValue(obj, "VariableName", this.variableName);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        ExtensionMethod.SetAttributeValue(obj, "ExecutionTime", this.executionTime);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        ExtensionMethod.SetAttributeValue(obj, "ValueText", this.valueText);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        // this.variableId = ExtensionMethod.GetAttributeValue4String(obj, "VariableId");
        this.variableCode = ExtensionMethod.GetAttributeValue4String(obj, "VariableCode");
        this.variableName = ExtensionMethod.GetAttributeValue4String(obj, "VariableName");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
        this.executionTime = ExtensionMethod.GetAttributeValue4String(obj, "ExecutionTime");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
        this.valueText = ExtensionMethod.GetAttributeValue4String(obj, "ValueText");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new VariableSetting(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const variableSetting = new VariableSetting(this.Model);
        variableSetting.variableCode = this.variableCode;
        variableSetting.variableName = this.variableName;
        variableSetting.tag = this.tag;
        variableSetting.executionTime = this.executionTime;
        variableSetting.value = this.value;
        variableSetting.valueText = this.valueText;
        return variableSetting;
    }
}
VariableSetting.Clr_Type_ID = "wf.VariableSetting";
BpmnModelHelper.RegisterElementType(new VariableSetting(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserActivity extends UserTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = UserActivity.Clr_Type_ID;
        // 扩展属性
        this.AssignmentStrategy = AssignmentStrategy.ALL;
        this.humanPerformers = new Array();
        this.potentialOwners = new Array();
        this.dynamicParticipants = new Array();
        // 审批结论枚举列表
        this.Conclusions = new Array();
        // 外部工具集
        this.Tools = new Array();
        // 业务活动参数
        this.BizParameters = new Array();
        this.ParticipantSchemes = new Array();
        this.CounterSignRules = null;
        this.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
        this.DisplayTerminal = DisplayTerminal.ALL;
        this.Retrievable = true;
        this.AddSignFrontAble = false;
        this.AddSignBehindAble = false;
        this.SelectTargetAble = false;
        this.transferAble = true;
        this.ParticipantSetting = new ParticipantSetting(model);
        this.anonymous = false;
        this.anonymousText = '办理人';
        this.variableSettings = new Array();
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UserActivity(this.Model);
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ParticipantSchemes = new Array();
        this.CounterSignRules = new Array();
        this.Retrievable = true;
        this.AddSignFrontAble = false;
        this.AddSignBehindAble = false;
        this.transferAble = true;
        this.AssignmentStrategy = AssignmentStrategy.ALL;
        this.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
        this.DisplayTerminal = DisplayTerminal.ALL;
        this.NotificationList = new Array();
        //
        this.Conclusions = new Array();
        this.ExecuteForms = new Array();
        this.customizeActions = new Array();
        //跳转
        this.SelectTargetAble = false;
        this.JumpScope = null;
        this.otherAssignNodes = null;
        this.SelectBranch = false;
        this.anonymous = false;
        this.anonymousText = '办理人';
        this.variableSettings = new Array();
        this.messageNotices = new Array();
        this.extendProperties = new Array();
        this.NotifyAble = false;
        this.urgeHandleRule = null;
        this.imageSettings = null;
        this.humanPerformers = new Array();
        this.potentialOwners = new Array();
        this.dynamicParticipants = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'BizActivityID', this.BizActivityID);
        BpmnModelHelper.SetAttributeValue(obj, 'BizActivityName', this.BizActivityName);
        BpmnModelHelper.SetAttributeValue(obj, 'AssignmentStrategy', this.AssignmentStrategy);
        BpmnModelHelper.SetAttributeValue(obj, 'ExecuteWorkItemMode', this.ExecuteWorkItemMode);
        BpmnModelHelper.SetAttributeValue(obj, 'DisplayTerminal', this.DisplayTerminal);
        BpmnModelHelper.SetAttributeValue(obj, 'Retrievable', this.Retrievable);
        BpmnModelHelper.SetAttributeValue(obj, 'AddSignFrontAble', this.AddSignFrontAble);
        BpmnModelHelper.SetAttributeValue(obj, 'AddSignBehindAble', this.AddSignBehindAble);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectTargetAble', this.SelectTargetAble);
        BpmnModelHelper.SetAttributeValue(obj, 'TransferAble', this.transferAble);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectBranch', this.SelectBranch);
        BpmnModelHelper.SetAttributeValue(obj, 'Anonymous', this.anonymous);
        BpmnModelHelper.SetAttributeValue(obj, 'AnonymousText', this.anonymousText);
        BpmnModelHelper.SetAttributeValue(obj, "NotifyAble", this.NotifyAble);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.BizActivityID = obj.BizActivityID;
        this.BizActivityName = obj.BizActivityName;
        this.AssignmentStrategy = obj.AssignmentStrategy;
        this.ExecuteWorkItemMode = obj.ExecuteWorkItemMode;
        this.DisplayTerminal = obj.DisplayTerminal;
        this.Retrievable = obj.Retrievable;
        this.AddSignFrontAble = obj.AddSignFrontAble;
        this.AddSignBehindAble = obj.AddSignBehindAble;
        this.SelectTargetAble = obj.SelectTargetAble;
        this.SelectBranch = obj.SelectBranch;
        this.transferAble = obj.TransferAble;
        this.anonymous = obj.Anonymous;
        this.anonymousText = obj.AnonymousText;
        this.NotifyAble = obj.NotifyAble;
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.ParticipantSchemes != null) {
            for (let scheme of this.ParticipantSchemes) {
                scheme.MexTag = UserActivity.MEXTAG;
                list.push(scheme);
            }
        }
        if (this.ExecuteForms != null) {
            for (let form of this.ExecuteForms) {
                form.MexTag = UserActivity.MEXTAG;
                list.push(form);
            }
        }
        if (this.CounterSignRules != null) {
            for (let rule of this.CounterSignRules) {
                rule.MexTag = UserActivity.MEXTAG;
                list.push(rule);
            }
        }
        if (this.NotificationList != null) {
            for (let item of this.NotificationList) {
                item.MexTag = UserActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.Conclusions != null) {
            for (let item of this.Conclusions) {
                item.MexTag = UserActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.Tools != null) {
            for (let item of this.Tools) {
                item.MexTag = UserActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.AssignPerformerConfig != null) {
            this.AssignPerformerConfig.MexTag = UserActivity.MEXTAG;
            list.push(this.AssignPerformerConfig);
        }
        if (this.JumpScope != null) {
            this.JumpScope.MexTag = UserActivity.MEXTAG;
            list.push(this.JumpScope);
        }
        if (this.urgeHandleRule != null) {
            this.urgeHandleRule.MexTag = UserActivity.MEXTAG;
            list.push(this.urgeHandleRule);
        }
        if (this.BackWardRule != null) {
            this.BackWardRule.MexTag = UserActivity.MEXTAG;
            list.push(this.BackWardRule);
        }
        if (this.ParticipantSetting != null) {
            this.ParticipantSetting.MexTag = UserActivity.MEXTAG;
            list.push(this.ParticipantSetting);
        }
        if (this.taskTitle != null) {
            this.taskTitle.MexTag = UserActivity.MEXTAG;
            list.push(this.taskTitle);
        }
        if (this.customizeActions != null) {
            for (let action of this.customizeActions) {
                action.MexTag = UserActivity.MEXTAG;
                list.push(action);
            }
        }
        if (this.timeLimitControl != null) {
            this.timeLimitControl.MexTag = UserActivity.MEXTAG;
            list.push(this.timeLimitControl);
        }
        if (this.variableSettings != null) {
            for (let v of this.variableSettings) {
                v.MexTag = UserActivity.MEXTAG;
                list.push(v);
            }
        }
        if (this.messageNotices != null) {
            for (let m of this.messageNotices) {
                m.MexTag = UserActivity.MEXTAG;
                list.push(m);
            }
        }
        if (this.extendProperties != null) {
            for (let e of this.extendProperties) {
                e.MexTag = UserActivity.MEXTAG;
                list.push(e);
            }
        }
        if (this.approvalPivotConfig != null) {
            this.approvalPivotConfig.MexTag = UserActivity.MEXTAG;
            list.push(this.approvalPivotConfig);
        }
        if (this.imageSettings != null) {
            this.imageSettings.MexTag = UserActivity.MEXTAG;
            list.push(this.imageSettings);
        }
        if (this.checkConditions != null) {
            for (let condition of this.checkConditions) {
                condition.MexTag = UserActivity.MEXTAG;
                list.push(condition);
            }
        }
        if (this.dynamicParticipants != null) {
            for (let participant of this.dynamicParticipants) {
                participant.MexTag = UserActivity.MEXTAG;
                list.push(participant);
            }
        }
        if (this.otherAssignNodes != null) {
            this.otherAssignNodes.MexTag = UserActivity.MEXTAG;
            list.push(this.otherAssignNodes);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== UserActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case ParticipantScheme.Clr_Type_ID:
                    this.ParticipantSchemes.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExecuteForm.Clr_Type_ID:
                    this.ExecuteForms.push((/** @type {?} */ (extensionElement)));
                    break;
                case CounterSignRule.Clr_Type_ID:
                    this.CounterSignRules.push((/** @type {?} */ (extensionElement)));
                    break;
                case Notification.Clr_Type_ID:
                    this.NotificationList.push((/** @type {?} */ (extensionElement)));
                    break;
                case ConclusionItem.Clr_Type_ID:
                    this.Conclusions.push((/** @type {?} */ (extensionElement)));
                    break;
                case AssignPerformerConfig.Clr_Type_ID:
                    this.AssignPerformerConfig = ((/** @type {?} */ (extensionElement)));
                    break;
                case JumpScope.Clr_Type_ID:
                    this.JumpScope = ((/** @type {?} */ (extensionElement)));
                    break;
                case UrgeHandleRule.Clr_Type_ID:
                    this.urgeHandleRule = ((/** @type {?} */ (extensionElement)));
                    break;
                case BackWardRule.Clr_Type_ID:
                    this.BackWardRule = ((/** @type {?} */ (extensionElement)));
                    break;
                case ParticipantSetting.Clr_Type_ID:
                    this.ParticipantSetting = ((/** @type {?} */ (extensionElement)));
                    break;
                case TitleExpression.Clr_Type_ID:
                    this.taskTitle = ((/** @type {?} */ (extensionElement)));
                    break;
                case CustomizeAction.Clr_Type_ID:
                    this.customizeActions.push((/** @type {?} */ (extensionElement)));
                    break;
                case TimeLimitControl.Clr_Type_ID:
                    this.timeLimitControl = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                case MessageNotice.Clr_Type_ID:
                    this.messageNotices.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                case ApprovalPivotConfig.Clr_Type_ID:
                    this.approvalPivotConfig = (/** @type {?} */ (extensionElement));
                    break;
                case ImageSettings.Clr_Type_ID:
                    this.imageSettings = (/** @type {?} */ (extensionElement));
                    break;
                case CheckCondition.Clr_Type_ID:
                    if (this.checkConditions == null) {
                        this.checkConditions = new Array();
                    }
                    this.checkConditions.push((/** @type {?} */ (extensionElement)));
                    break;
                case OtherAssignNodes.Clr_Type_ID:
                    this.otherAssignNodes = (/** @type {?} */ (extensionElement));
                    break;
                default:
                    if (extensionElement instanceof Tool) {
                        this.Tools.push((/** @type {?} */ (extensionElement)));
                    }
                    else if (extensionElement instanceof ParticipantExpression) {
                        this.dynamicParticipants.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * 审批活动预制通过，驳回工作项
     * @param {?} model
     * @return {?}
     */
    initConclusions(model) {
        /** @type {?} */
        let pass = new ConclusionItem(model);
        pass.Value = 'Pass';
        pass.Text = '通过';
        pass.WorkFlowAction = WorkFlowAction.Forward;
        pass.IsDefault = true;
        pass.commentNecessary = false;
        this.Conclusions.push(pass);
        /** @type {?} */
        let back = new ConclusionItem(model);
        back.Value = 'Back';
        back.Text = '驳回';
        back.WorkFlowAction = WorkFlowAction.Backward;
        back.IsDefault = false;
        back.commentNecessary = true;
        this.Conclusions.push(back);
        // 审批项存在反向时，初始化驳回规则
        this.BackWardRule = new BackWardRule(model);
    }
    /**
     * 初始业务活动审批项
     * @param {?} model
     * @param {?} actions
     * @return {?}
     */
    setBizConclusions(model, actions) {
        if (actions && actions.length > 0) {
            for (let a of actions) {
                /** @type {?} */
                let conclusion = new ConclusionItem(model);
                conclusion.Value = a.code;
                conclusion.Text = a.name;
                conclusion.WorkFlowAction = a.workFlowAction;
                conclusion.IsDefault = a === actions[0] ? true : false;
                conclusion.commentNecessary = false;
                this.Conclusions.push(conclusion);
            }
            if (this.Conclusions.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.WorkFlowAction === WorkFlowAction.Backward)).length > 0) {
                // 审批项存在反向时，初始化驳回规则
                this.BackWardRule = new BackWardRule(model);
            }
        }
    }
    /**
     * undo操作临时clone方法
     * @return {?} BpmnElement
     */
    clone() {
        /** @type {?} */
        let userActivity = new UserActivity(this.Model);
        userActivity.Name = this.Name;
        if (this.taskTitle) {
            userActivity.taskTitle = this.taskTitle.clone();
        }
        /** @type {?} */
        const resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            for (const role of resourceRoles) {
                if (role instanceof UserParticipant) {
                    /** @type {?} */
                    const user = (/** @type {?} */ (role));
                    /** @type {?} */
                    const userParticipant = user.clone();
                    userActivity.AddResourceRole(userParticipant);
                }
                else if (role instanceof PositionParticipant) {
                    /** @type {?} */
                    const position = (/** @type {?} */ (role));
                    /** @type {?} */
                    const positionParticipant = position.clone();
                    userActivity.AddResourceRole(positionParticipant);
                }
                else if (role instanceof ReportingLineParticipant) {
                    /** @type {?} */
                    const reportingLine = (/** @type {?} */ (role));
                    /** @type {?} */
                    const reportingLineParticipant = reportingLine.clone();
                    userActivity.AddResourceRole(reportingLineParticipant);
                }
                else if (role instanceof ActivityExecutorParticipant) {
                    /** @type {?} */
                    const activityExecutor = (/** @type {?} */ (role));
                    /** @type {?} */
                    const activityExecutorParticipant = activityExecutor.clone();
                    userActivity.AddResourceRole(activityExecutorParticipant);
                }
                else if (role instanceof ComponentParticipant) {
                    /** @type {?} */
                    const component = (/** @type {?} */ (role));
                    /** @type {?} */
                    const componentParticipant = component.clone();
                    userActivity.AddResourceRole(componentParticipant);
                }
                else if (role instanceof MatrixParticipant) {
                    /** @type {?} */
                    const matrix = (/** @type {?} */ (role));
                    /** @type {?} */
                    const matrixParticipant = matrix.clone();
                    userActivity.AddResourceRole(matrixParticipant);
                }
                else if (role instanceof OrganizationPotentialOwner) {
                    /** @type {?} */
                    const org = (/** @type {?} */ (role));
                    /** @type {?} */
                    const organizationPotentialOwner = org.clone();
                    userActivity.AddResourceRole(organizationPotentialOwner);
                }
                else if (role instanceof HumanPerformerImpl) {
                    /** @type {?} */
                    const performer = (/** @type {?} */ (role));
                    /** @type {?} */
                    const humanPerformerImpl = performer.clone();
                    userActivity.AddResourceRole(humanPerformerImpl);
                }
                else if (role instanceof PotentialOwnerImpl) {
                    /** @type {?} */
                    const owner = (/** @type {?} */ (role));
                    /** @type {?} */
                    const potentialOwnerImpl = owner.clone();
                    userActivity.AddResourceRole(potentialOwnerImpl);
                }
            }
        }
        userActivity.ParticipantSchemes = new Array();
        if (this.ParticipantSchemes && this.ParticipantSchemes.length > 0) {
            for (const s of this.ParticipantSchemes) {
                /** @type {?} */
                const scheme = s.clone();
                userActivity.ParticipantSchemes.push(scheme);
            }
        }
        if (this.ParticipantSetting) {
            userActivity.ParticipantSetting = this.ParticipantSetting.clone();
        }
        userActivity.AssignmentStrategy = this.AssignmentStrategy;
        if (this.AssignPerformerConfig) {
            userActivity.AssignPerformerConfig = this.AssignPerformerConfig.clone();
        }
        userActivity.PerformerNotFundExecption = this.PerformerNotFundExecption;
        userActivity.Retrievable = this.Retrievable;
        userActivity.IsRollback = this.IsRollback;
        userActivity.SelectBranch = this.SelectBranch;
        userActivity.NotifyAble = this.NotifyAble;
        userActivity.AddSignFrontAble = this.AddSignFrontAble;
        userActivity.AddSignBehindAble = this.AddSignBehindAble;
        userActivity.Priority = this.Priority;
        userActivity.ExecuteWorkItemMode = this.ExecuteWorkItemMode;
        userActivity.DisplayTerminal = this.DisplayTerminal;
        userActivity.SelectTargetAble = this.SelectTargetAble;
        if (this.JumpScope) {
            userActivity.JumpScope = this.JumpScope.clone();
        }
        if (this.BackWardRule) {
            userActivity.BackWardRule = this.BackWardRule.clone();
        }
        if (this.LoopCharacteristics) {
            userActivity.LoopCharacteristics = this.LoopCharacteristics.clone();
        }
        userActivity.transferAble = this.transferAble;
        userActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            for (const f of this.ExecuteForms) {
                /** @type {?} */
                const executeForm = f.clone();
                userActivity.ExecuteForms.push(executeForm);
            }
        }
        userActivity.customizeActions = new Array();
        if (this.customizeActions && this.customizeActions.length > 0) {
            for (const a of this.customizeActions) {
                /** @type {?} */
                const customizeAction = a.clone();
                userActivity.customizeActions.push(customizeAction);
            }
        }
        userActivity.CounterSignRules = new Array();
        if (this.CounterSignRules && this.CounterSignRules.length > 0) {
            for (const r of this.CounterSignRules) {
                /** @type {?} */
                const counterSignRule = r.clone();
                userActivity.CounterSignRules.push(counterSignRule);
            }
        }
        userActivity.AdhocActivitySecurities = new Array();
        if (this.AdhocActivitySecurities && this.AdhocActivitySecurities.length > 0) {
            for (const s of this.AdhocActivitySecurities) {
                userActivity.AdhocActivitySecurities.push(s);
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        userActivity.NotificationList = new Array();
        userActivity.anonymous = this.anonymous;
        userActivity.anonymousText = this.anonymousText;
        userActivity.BizActivityID = this.BizActivityID;
        userActivity.BizActivityName = this.BizActivityName;
        userActivity.Conclusions = new Array();
        if (this.Conclusions && this.Conclusions.length > 0) {
            for (const c of this.Conclusions) {
                /** @type {?} */
                const conclusion = c.clone();
                userActivity.Conclusions.push(conclusion);
            }
        }
        userActivity.Tools = new Array();
        if (this.Tools && this.Tools.length > 0) {
            for (const t of this.Tools) {
                if (t instanceof Component) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (t));
                    /** @type {?} */
                    const tool = c.clone();
                    userActivity.Tools.push(tool);
                }
            }
        }
        userActivity.dynamicParticipants = new Array();
        if (this.dynamicParticipants && this.dynamicParticipants.length > 0) {
            for (const p of this.dynamicParticipants) {
                if (p instanceof OrganizationParticipantExpression) {
                    /** @type {?} */
                    const o = (/** @type {?} */ (p));
                    /** @type {?} */
                    const organizationParticipantExpression = o.clone();
                    userActivity.dynamicParticipants.push(organizationParticipantExpression);
                }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        userActivity.BizParameters = new Array();
        if (this.timeLimitControl) {
            userActivity.timeLimitControl = this.timeLimitControl.clone();
        }
        userActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                userActivity.variableSettings.push(variableSetting);
            }
        }
        userActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                userActivity.messageNotices.push(messageNotice);
            }
        }
        userActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                userActivity.extendProperties.push(extendProperty);
            }
        }
        if (this.approvalPivotConfig) {
            userActivity.approvalPivotConfig = this.approvalPivotConfig.clone();
        }
        if (this.urgeHandleRule) {
            userActivity.urgeHandleRule = this.urgeHandleRule.clone();
        }
        if (this.imageSettings) {
            userActivity.imageSettings = this.imageSettings.clone();
        }
        if (this.checkConditions && this.checkConditions.length > 0) {
            userActivity.checkConditions = new Array();
            for (const c of this.checkConditions) {
                /** @type {?} */
                const condition = c.clone();
                userActivity.checkConditions.push(condition);
            }
        }
        if (this.otherAssignNodes) {
            userActivity.otherAssignNodes = this.otherAssignNodes.clone();
        }
        return userActivity;
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
}
UserActivity.Clr_Type_ID = "wf.UserActivity";
UserActivity.MEXTAG = 'wf.UserActivity';
BpmnModelHelper.RegisterElementType(new UserActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CDTSchemaType extends CustomType {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CDTSchemaType.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CDTSchemaType(this.Model);
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.MetadataId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "SchemaId", this.SchemaId);
        BpmnModelHelper.SetAttributeValue(obj, "MetadataId", this.MetadataId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.SchemaId = obj.SchemaId;
        this.MetadataId = obj.MetadataId;
        this.ComponentId = obj.ComponentId;
    }
}
CDTSchemaType.Clr_Type_ID = "wf.CDTSchemaType";
BpmnModelHelper.RegisterElementType(new CDTSchemaType(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const FlowDirection = {
    // 正向
    Forward: 'Forward',
    // 反向
    Opposite: 'Opposite',
    // 中止
    Abort: 'Abort',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ParameterMode = {
    /// <summary>
    /// 传入参数
    /// </summary>
    IN: 'IN',
    /// <summary>
    /// 传出参数
    /// </summary>
    OUT: 'OUT',
    /// <summary>
    /// 传入传出参数
    /// </summary>
    INOUT: 'INOUT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormalParameter extends MexElement {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} code
     * @param {?=} name
     * @param {?=} desc
     * @param {?=} index
     * @param {?=} datatype
     * @param {?=} mode
     */
    constructor(model, id, code, name, desc, index, datatype, mode) {
        super(model);
        this.Id = id || '';
        this.Code = code || '';
        this.Name = name || '';
        this.Description = desc || '';
        this.index = index || 0;
        this.DataType = datatype || new DataType(model);
        this.Mode = mode || ParameterMode.IN;
    }
    /**
     * @return {?}
     */
    get Index() {
        return this.index;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set Index(index) {
        this.index = index;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.Code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        BpmnModelHelper.SetAttributeValue(obj, "index", this.index);
        BpmnModelHelper.SetAttributeValue(obj, "DataType", this.DataType.ConvertToJsonObject());
        BpmnModelHelper.SetAttributeValue(obj, "Mode", this.Mode);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.index = obj.index;
        this.Description = obj.Description;
        this.Code = obj.Code;
        /** @type {?} */
        let type = new DataType(this.Model);
        type.LoadFromJsonObject(obj.DataType);
        this.DataType = type;
        this.Mode = ((/** @type {?} */ (obj.Mode)));
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const f = new FormalParameter(this.Model);
        return f;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ReportingRank = {
    DirectSuperior: 'DirectSuperior',
    HigherSuperior: 'HigherSuperior',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifCreationBillActivity extends StartEvent {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AifCreationBillActivity.Clr_Type_ID;
        this.aifProcessCode = null;
        this.voNodePath = null;
        this.isRelied = true;
        this.aifProcessCode = null;
        this.voNodePath = null;
        this.isRelied = true;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.aifProcessCode = null;
        this.voNodePath = null;
        this.isRelied = true;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'aifProcessCode', this.aifProcessCode);
        BpmnModelHelper.SetAttributeValue(obj, 'voNodePath', this.voNodePath);
        BpmnModelHelper.SetAttributeValue(obj, 'isRelied', this.isRelied);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.aifProcessCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifProcessCode");
        this.voNodePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voNodePath");
        this.isRelied = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isRelied");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AifCreationBillActivity(this.Model);
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const creationAct = new AifCreationBillActivity(this.Model);
        creationAct.Name = this.Name;
        creationAct.aifProcessCode = null;
        if (this.aifProcessCode) {
            creationAct.aifProcessCode = this.aifProcessCode;
        }
        creationAct.voNodePath = null;
        if (this.voNodePath) {
            creationAct.voNodePath = this.voNodePath;
        }
        creationAct.isRelied = this.isRelied;
        return creationAct;
    }
}
AifCreationBillActivity.Clr_Type_ID = "wf.AifCreationBillActivity";
BpmnModelHelper.RegisterElementType(new AifCreationBillActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ApprovalPivotType = {
    /**
     * 文字提示类
     */
    REMIND: 'REMIND',
    /**
     * 自动检查项
     */
    AUTOMATIC: 'AUTOMATIC',
    /**
     * 手动检查项
     */
    MANUAL: 'MANUAL',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutoActivity extends ServiceTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AutoActivity.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.tools = new Array();
        this.variableSettings = new Array();
        this.extendProperties = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.tools != null) {
            for (const item of this.tools) {
                item.MexTag = AutoActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = AutoActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.extendProperties != null && this.extendProperties.length > 0) {
            for (const item of this.extendProperties) {
                item.MexTag = AutoActivity.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== AutoActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    if (extensionElement instanceof Tool) {
                        this.tools.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AutoActivity(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const autoActivity = new AutoActivity(this.Model);
        autoActivity.Name = this.Name;
        autoActivity.tools = new Array();
        if (this.tools && this.tools.length > 0) {
            for (const t of this.tools) {
                if (t instanceof Component) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (t));
                    /** @type {?} */
                    const tool = c.clone();
                    autoActivity.tools.push(tool);
                }
            }
        }
        autoActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                autoActivity.variableSettings.push(variableSetting);
            }
        }
        autoActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                autoActivity.extendProperties.push(extendProperty);
            }
        }
        return autoActivity;
    }
}
AutoActivity.Clr_Type_ID = "wf.AutoActivity";
AutoActivity.MEXTAG = 'wf.AutoActivity';
BpmnModelHelper.RegisterElementType(new AutoActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CallActivitySubProcess extends CallActivity {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CallActivitySubProcess.Clr_Type_ID;
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
        this.SubProcessDataAssociations = new SubProcessDataAssociations(model);
        this.inheritVariables = true;
        this.inheritBizDataId = true;
        this.backWardRule = new BackWardRule(model);
        this.LoopCharacteristics = new MultiInstanceLoopCharacteristics(model);
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.SubProcessDataAssociations = new SubProcessDataAssociations(this.Model);
        this.inheritVariables = true;
        this.inheritBizDataId = true;
        this.variableSettings = new Array();
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'CalledBizDefKey', this.calledBizDefKey);
        BpmnModelHelper.SetAttributeValue(obj, 'BizDataId', this.bizDataId);
        BpmnModelHelper.SetAttributeValue(obj, 'InheritVariables', this.inheritVariables);
        BpmnModelHelper.SetAttributeValue(obj, 'InheritBizDataId', this.inheritBizDataId);
        BpmnModelHelper.SetAttributeValue(obj, 'aifProcessCode', this.aifProcessCode);
        BpmnModelHelper.SetAttributeValue(obj, 'useAutoCreationData', this.useAutoCreationData);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.calledBizDefKey = obj.CalledBizDefKey;
        this.bizDataId = obj.BizDataId;
        this.inheritVariables = obj.InheritVariables;
        this.inheritBizDataId = obj.InheritBizDataId;
        this.aifProcessCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifProcessCode");
        this.useAutoCreationData = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "useAutoCreationData");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.backWardRule != null) {
            this.backWardRule.MexTag = CallActivitySubProcess.MEXTAG;
            list.push(this.backWardRule);
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = CallActivitySubProcess.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== CallActivitySubProcess.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                case BackWardRule.Clr_Type_ID:
                    this.backWardRule = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CallActivitySubProcess(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const callActivitySubProcess = new CallActivitySubProcess(this.Model);
        callActivitySubProcess.Name = this.Name;
        callActivitySubProcess.IsForCompensation = this.IsForCompensation;
        callActivitySubProcess.CalledElement = this.CalledElement;
        callActivitySubProcess.calledBizDefKey = this.calledBizDefKey;
        callActivitySubProcess.bizDataId = this.bizDataId;
        callActivitySubProcess.inheritBizDataId = this.inheritBizDataId;
        callActivitySubProcess.inheritVariables = this.inheritVariables;
        callActivitySubProcess.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                callActivitySubProcess.variableSettings.push(variableSetting);
            }
        }
        if (this.backWardRule) {
            callActivitySubProcess.backWardRule = this.backWardRule.clone();
        }
        if (this.LoopCharacteristics) {
            callActivitySubProcess.LoopCharacteristics = this.LoopCharacteristics.clone();
        }
        callActivitySubProcess.aifProcessCode = null;
        if (this.aifProcessCode) {
            callActivitySubProcess.aifProcessCode = this.aifProcessCode;
        }
        callActivitySubProcess.useAutoCreationData = this.useAutoCreationData;
        return callActivitySubProcess;
    }
}
CallActivitySubProcess.Clr_Type_ID = "wf.CallActivitySubProcess";
CallActivitySubProcess.MEXTAG = "wf.CallActivitySubProcess";
BpmnModelHelper.RegisterElementType(new CallActivitySubProcess(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const DurationType = {
    BeforeDuration: 'BeforeDuration',
    OnDuration: 'OnDuration',
    AfterDuration: 'AfterDuration',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SignalEventDefinitionImpl extends SignalEventDefinition {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SignalEventDefinitionImpl.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Name", this.name);
        ExtensionMethod.SetAttributeValue(obj, "TriggerAction", this.triggerAction);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.name = ExtensionMethod.GetAttributeValue4String(obj, "Name");
        this.triggerAction = ExtensionMethod.GetAttributeValue4String(obj, "TriggerAction");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SignalEventDefinitionImpl(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const signalEventDefinitionImpl = new SignalEventDefinitionImpl(this.Model);
        signalEventDefinitionImpl.name = this.name;
        signalEventDefinitionImpl.triggerAction = this.triggerAction;
        signalEventDefinitionImpl.SignalExpression = this.SignalExpression;
        signalEventDefinitionImpl.SignalRef = this.SignalRef;
        signalEventDefinitionImpl.Async = this.Async;
        return signalEventDefinitionImpl;
    }
}
SignalEventDefinitionImpl.Clr_Type_ID = "wf.SignalEventDefinitionImpl";
BpmnModelHelper.RegisterElementType(new SignalEventDefinitionImpl(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IntermediateCatchEventImpl extends IntermediateCatchEvent {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = IntermediateCatchEventImpl.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.variableSettings = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.backWardRule != null) {
            this.backWardRule.MexTag = IntermediateCatchEventImpl.MEXTAG;
            list.push(this.backWardRule);
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = IntermediateCatchEventImpl.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== IntermediateCatchEventImpl.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case BackWardRule.Clr_Type_ID:
                    this.backWardRule = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    initEventDefinitions() {
        /** @type {?} */
        const passEvent = new SignalEventDefinitionImpl(this.Model);
        passEvent.name = '通过';
        passEvent.triggerAction = 'Pass';
        passEvent.Async = false;
        passEvent.SignalRef = 'Pass';
        this.EventDefinitions.push(passEvent);
        /** @type {?} */
        const backEvent = new SignalEventDefinitionImpl(this.Model);
        backEvent.name = '驳回';
        backEvent.triggerAction = 'Back';
        backEvent.Async = false;
        backEvent.SignalRef = 'Back';
        this.EventDefinitions.push(backEvent);
        /** @type {?} */
        const abortEvent = new SignalEventDefinitionImpl(this.Model);
        abortEvent.name = '终止';
        abortEvent.triggerAction = 'Abort';
        abortEvent.Async = false;
        abortEvent.SignalRef = 'Abort';
        this.EventDefinitions.push(abortEvent);
        // 初始化驳回规则
        this.backWardRule = new BackWardRule(this.Model);
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new IntermediateCatchEventImpl(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const intermediateCatchEventImpl = new IntermediateCatchEventImpl(this.Model);
        intermediateCatchEventImpl.Name = this.Name;
        intermediateCatchEventImpl.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                intermediateCatchEventImpl.variableSettings.push(variableSetting);
            }
        }
        if (this.backWardRule) {
            intermediateCatchEventImpl.backWardRule = this.backWardRule.clone();
        }
        intermediateCatchEventImpl.EventDefinitions = new Array();
        if (this.EventDefinitions && this.EventDefinitions.length > 0) {
            for (const e of this.EventDefinitions) {
                /** @type {?} */
                const signalEventDefinitionImpl = (/** @type {?} */ (e));
                /** @type {?} */
                const eventDefinition = signalEventDefinitionImpl.clone();
                intermediateCatchEventImpl.EventDefinitions.push(eventDefinition);
            }
        }
        return intermediateCatchEventImpl;
    }
}
IntermediateCatchEventImpl.Clr_Type_ID = "wf.IntermediateCatchEventImpl";
IntermediateCatchEventImpl.MEXTAG = "wf.IntermediateCatchEventImpl";
BpmnModelHelper.RegisterElementType(new IntermediateCatchEventImpl(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageActivity extends ServiceTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = MessageActivity.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.messageNotices = new Array();
        this.variableSettings = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.messageNotices != null) {
            for (const item of this.messageNotices) {
                item.MexTag = MessageActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = MessageActivity.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== MessageActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    if (extensionElement instanceof MessageNotice) {
                        this.messageNotices.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MessageActivity(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const messageActivity = new MessageActivity(this.Model);
        messageActivity.Name = this.Name;
        messageActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                messageActivity.variableSettings.push(variableSetting);
            }
        }
        messageActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                messageActivity.messageNotices.push(messageNotice);
            }
        }
        return messageActivity;
    }
}
MessageActivity.Clr_Type_ID = "wf.MessageActivity";
MessageActivity.MEXTAG = 'wf.MessageActivity';
BpmnModelHelper.RegisterElementType(new MessageActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NotifyActivity extends UserTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = NotifyActivity.Clr_Type_ID;
        this.dynamicParticipants = new Array();
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        let notifyActivity = new NotifyActivity(this.Model);
        notifyActivity.Name = this.Name;
        /** @type {?} */
        const resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            for (const role of resourceRoles) {
                if (role instanceof UserParticipant) {
                    /** @type {?} */
                    const user = (/** @type {?} */ (role));
                    /** @type {?} */
                    const userParticipant = user.clone();
                    notifyActivity.AddResourceRole(userParticipant);
                }
                else if (role instanceof PositionParticipant) {
                    /** @type {?} */
                    const position = (/** @type {?} */ (role));
                    /** @type {?} */
                    const positionParticipant = position.clone();
                    notifyActivity.AddResourceRole(positionParticipant);
                }
                else if (role instanceof ReportingLineParticipant) {
                    /** @type {?} */
                    const reportingLine = (/** @type {?} */ (role));
                    /** @type {?} */
                    const reportingLineParticipant = reportingLine.clone();
                    notifyActivity.AddResourceRole(reportingLineParticipant);
                }
                else if (role instanceof ActivityExecutorParticipant) {
                    /** @type {?} */
                    const activityExecutor = (/** @type {?} */ (role));
                    /** @type {?} */
                    const activityExecutorParticipant = activityExecutor.clone();
                    notifyActivity.AddResourceRole(activityExecutorParticipant);
                }
                else if (role instanceof ComponentParticipant) {
                    /** @type {?} */
                    const component = (/** @type {?} */ (role));
                    /** @type {?} */
                    const componentParticipant = component.clone();
                    notifyActivity.AddResourceRole(componentParticipant);
                }
                else if (role instanceof MatrixParticipant) {
                    /** @type {?} */
                    const matrix = (/** @type {?} */ (role));
                    /** @type {?} */
                    const matrixParticipant = matrix.clone();
                    notifyActivity.AddResourceRole(matrixParticipant);
                }
                else if (role instanceof OrganizationPotentialOwner) {
                    /** @type {?} */
                    const org = (/** @type {?} */ (role));
                    /** @type {?} */
                    const organizationPotentialOwner = org.clone();
                    notifyActivity.AddResourceRole(organizationPotentialOwner);
                }
                else if (role instanceof HumanPerformerImpl) {
                    /** @type {?} */
                    const performer = (/** @type {?} */ (role));
                    /** @type {?} */
                    const humanPerformerImpl = performer.clone();
                    notifyActivity.AddResourceRole(humanPerformerImpl);
                }
                else if (role instanceof PotentialOwnerImpl) {
                    /** @type {?} */
                    const owner = (/** @type {?} */ (role));
                    /** @type {?} */
                    const potentialOwnerImpl = owner.clone();
                    notifyActivity.AddResourceRole(potentialOwnerImpl);
                }
            }
        }
        notifyActivity.executeForms = new Array();
        if (this.executeForms && this.executeForms.length > 0) {
            for (const f of this.executeForms) {
                /** @type {?} */
                const executeForm = f.clone();
                notifyActivity.executeForms.push(executeForm);
            }
        }
        notifyActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                notifyActivity.extendProperties.push(extendProperty);
            }
        }
        notifyActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                notifyActivity.messageNotices.push(messageNotice);
            }
        }
        notifyActivity.notifyAble = this.notifyAble;
        notifyActivity.dynamicParticipants = new Array();
        if (this.dynamicParticipants && this.dynamicParticipants.length > 0) {
            for (const p of this.dynamicParticipants) {
                if (p instanceof OrganizationParticipantExpression) {
                    /** @type {?} */
                    const o = (/** @type {?} */ (p));
                    /** @type {?} */
                    const organizationParticipantExpression = o.clone();
                    notifyActivity.dynamicParticipants.push(organizationParticipantExpression);
                }
            }
        }
        return notifyActivity;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new NotifyActivity(this.Model);
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.participants = new Array();
        this.messageNotices = new Array();
        this.executeForms = new Array();
        this.extendProperties = new Array();
        this.notifyAble = false;
        this.dynamicParticipants = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        // this.beforeSerialize();
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "NotifyAble", this.notifyAble);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.notifyAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "NotifyAble");
        // this.afterDeserialize();
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.messageNotices != null) {
            for (let item of this.messageNotices) {
                item.MexTag = NotifyActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.executeForms != null) {
            for (let form of this.executeForms) {
                form.MexTag = NotifyActivity.MEXTAG;
                list.push(form);
            }
        }
        if (this.extendProperties != null) {
            for (let extendProperty of this.extendProperties) {
                extendProperty.MexTag = NotifyActivity.MEXTAG;
                list.push(extendProperty);
            }
        }
        if (this.dynamicParticipants != null) {
            for (let participant of this.dynamicParticipants) {
                participant.MexTag = NotifyActivity.MEXTAG;
                list.push(participant);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (NotifyActivity.MEXTAG != extensionElement.MexTag) {
                continue;
            }
            switch (extensionElement.ClrTypeID) {
                case MessageNotice.Clr_Type_ID:
                    this.messageNotices.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExecuteForm.Clr_Type_ID:
                    this.executeForms.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    if (extensionElement instanceof ParticipantExpression) {
                        this.dynamicParticipants.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    beforeSerialize() {
        /** @type {?} */
        let roles = this.GetResourceRoles();
        if (roles != null && roles.length != 0) {
            for (let role of roles) {
                super.RemoveResourceRole(role.Id);
            }
        }
        if (this.participants != null && this.participants.length != 0) {
            for (let participant of this.participants) {
                this.AddResourceRole(participant);
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    afterDeserialize() {
        /** @type {?} */
        let roles = this.GetResourceRoles();
        if (roles == null || roles.length == 0) {
            return;
        }
        for (let role of roles) {
            if (role instanceof Participant) {
                this.participants.push(role);
            }
        }
    }
}
NotifyActivity.Clr_Type_ID = "wf.NotifyActivity";
NotifyActivity.MEXTAG = "wf.NotifyActivity";
BpmnModelHelper.RegisterElementType(new NotifyActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OperationActivity extends UserActivity {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OperationActivity.Clr_Type_ID;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    initConclusions(model) {
        /** @type {?} */
        let submit = new ConclusionItem(model);
        submit.Value = 'Send';
        submit.Text = '发送';
        submit.WorkFlowAction = WorkFlowAction.Forward;
        submit.IsDefault = true;
        submit.commentNecessary = false;
        this.Conclusions.push(submit);
        /** @type {?} */
        let back = new ConclusionItem(model);
        back.Value = 'Back';
        back.Text = '驳回';
        back.WorkFlowAction = WorkFlowAction.Backward;
        back.IsDefault = false;
        back.commentNecessary = true;
        this.Conclusions.push(back);
        // 审批项存在反向时，初始化驳回规则
        this.BackWardRule = new BackWardRule(model);
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OperationActivity(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const operationActivity = new OperationActivity(this.Model);
        operationActivity.Name = this.Name;
        if (this.taskTitle) {
            operationActivity.taskTitle = this.taskTitle.clone();
        }
        /** @type {?} */
        const resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            for (const role of resourceRoles) {
                if (role instanceof UserParticipant) {
                    /** @type {?} */
                    const user = (/** @type {?} */ (role));
                    /** @type {?} */
                    const userParticipant = user.clone();
                    operationActivity.AddResourceRole(userParticipant);
                }
                else if (role instanceof PositionParticipant) {
                    /** @type {?} */
                    const position = (/** @type {?} */ (role));
                    /** @type {?} */
                    const positionParticipant = position.clone();
                    operationActivity.AddResourceRole(positionParticipant);
                }
                else if (role instanceof ReportingLineParticipant) {
                    /** @type {?} */
                    const reportingLine = (/** @type {?} */ (role));
                    /** @type {?} */
                    const reportingLineParticipant = reportingLine.clone();
                    operationActivity.AddResourceRole(reportingLineParticipant);
                }
                else if (role instanceof ActivityExecutorParticipant) {
                    /** @type {?} */
                    const activityExecutor = (/** @type {?} */ (role));
                    /** @type {?} */
                    const activityExecutorParticipant = activityExecutor.clone();
                    operationActivity.AddResourceRole(activityExecutorParticipant);
                }
                else if (role instanceof ComponentParticipant) {
                    /** @type {?} */
                    const component = (/** @type {?} */ (role));
                    /** @type {?} */
                    const componentParticipant = component.clone();
                    operationActivity.AddResourceRole(componentParticipant);
                }
                else if (role instanceof MatrixParticipant) {
                    /** @type {?} */
                    const matrix = (/** @type {?} */ (role));
                    /** @type {?} */
                    const matrixParticipant = matrix.clone();
                    operationActivity.AddResourceRole(matrixParticipant);
                }
                else if (role instanceof OrganizationPotentialOwner) {
                    /** @type {?} */
                    const org = (/** @type {?} */ (role));
                    /** @type {?} */
                    const organizationPotentialOwner = org.clone();
                    operationActivity.AddResourceRole(organizationPotentialOwner);
                    // 2023-5-31 复制人工操作节点没带上参与者 发现是缺少HumanPerformerImpl和PotentialOwnerImpl
                }
                else if (role instanceof HumanPerformerImpl) {
                    /** @type {?} */
                    const performer = (/** @type {?} */ (role));
                    /** @type {?} */
                    const humanPerformerImpl = performer.clone();
                    operationActivity.AddResourceRole(humanPerformerImpl);
                }
                else if (role instanceof PotentialOwnerImpl) {
                    /** @type {?} */
                    const owner = (/** @type {?} */ (role));
                    /** @type {?} */
                    const potentialOwnerImpl = owner.clone();
                    operationActivity.AddResourceRole(potentialOwnerImpl);
                }
            }
        }
        operationActivity.ParticipantSchemes = new Array();
        if (this.ParticipantSchemes && this.ParticipantSchemes.length > 0) {
            for (const s of this.ParticipantSchemes) {
                /** @type {?} */
                const scheme = s.clone();
                operationActivity.ParticipantSchemes.push(scheme);
            }
        }
        if (this.ParticipantSetting) {
            operationActivity.ParticipantSetting = this.ParticipantSetting.clone();
        }
        operationActivity.AssignmentStrategy = this.AssignmentStrategy;
        if (this.AssignPerformerConfig) {
            operationActivity.AssignPerformerConfig = this.AssignPerformerConfig.clone();
        }
        operationActivity.PerformerNotFundExecption = this.PerformerNotFundExecption;
        operationActivity.Retrievable = this.Retrievable;
        operationActivity.IsRollback = this.IsRollback;
        operationActivity.SelectBranch = this.SelectBranch;
        operationActivity.NotifyAble = this.NotifyAble;
        operationActivity.AddSignFrontAble = this.AddSignFrontAble;
        operationActivity.AddSignBehindAble = this.AddSignBehindAble;
        operationActivity.Priority = this.Priority;
        operationActivity.ExecuteWorkItemMode = this.ExecuteWorkItemMode;
        operationActivity.DisplayTerminal = this.DisplayTerminal;
        operationActivity.SelectTargetAble = this.SelectTargetAble;
        if (this.JumpScope) {
            operationActivity.JumpScope = this.JumpScope.clone();
        }
        if (this.BackWardRule) {
            operationActivity.BackWardRule = this.BackWardRule.clone();
        }
        operationActivity.transferAble = this.transferAble;
        operationActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            for (const f of this.ExecuteForms) {
                /** @type {?} */
                const executeForm = f.clone();
                operationActivity.ExecuteForms.push(executeForm);
            }
        }
        operationActivity.customizeActions = new Array();
        if (this.customizeActions && this.customizeActions.length > 0) {
            for (const a of this.customizeActions) {
                /** @type {?} */
                const customizeAction = a.clone();
                operationActivity.customizeActions.push(customizeAction);
            }
        }
        operationActivity.CounterSignRules = new Array();
        if (this.CounterSignRules && this.CounterSignRules.length > 0) {
            for (const r of this.CounterSignRules) {
                /** @type {?} */
                const counterSignRule = r.clone();
                operationActivity.CounterSignRules.push(counterSignRule);
            }
        }
        operationActivity.AdhocActivitySecurities = new Array();
        if (this.AdhocActivitySecurities && this.AdhocActivitySecurities.length > 0) {
            for (const s of this.AdhocActivitySecurities) {
                operationActivity.AdhocActivitySecurities.push(s);
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        operationActivity.NotificationList = new Array();
        operationActivity.anonymous = this.anonymous;
        operationActivity.anonymousText = this.anonymousText;
        operationActivity.BizActivityID = this.BizActivityID;
        operationActivity.BizActivityName = this.BizActivityName;
        operationActivity.Conclusions = new Array();
        if (this.Conclusions && this.Conclusions.length > 0) {
            for (const c of this.Conclusions) {
                /** @type {?} */
                const conclusion = c.clone();
                operationActivity.Conclusions.push(conclusion);
            }
        }
        operationActivity.Tools = new Array();
        if (this.Tools && this.Tools.length > 0) {
            for (const t of this.Tools) {
                if (t instanceof Component) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (t));
                    /** @type {?} */
                    const tool = c.clone();
                    operationActivity.Tools.push(tool);
                }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        operationActivity.BizParameters = new Array();
        if (this.timeLimitControl) {
            operationActivity.timeLimitControl = this.timeLimitControl.clone();
        }
        operationActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                operationActivity.variableSettings.push(variableSetting);
            }
        }
        operationActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                operationActivity.messageNotices.push(messageNotice);
            }
        }
        if (this.approvalPivotConfig) {
            operationActivity.approvalPivotConfig = this.approvalPivotConfig.clone();
        }
        if (this.urgeHandleRule) {
            operationActivity.urgeHandleRule = this.urgeHandleRule.clone();
        }
        return operationActivity;
    }
}
OperationActivity.Clr_Type_ID = "wf.OperationActivity";
OperationActivity.MEXTAG = 'wf.OperationActivity';
BpmnModelHelper.RegisterElementType(new OperationActivity(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const SendMessageType = {
    SMS: 'SMS',
    EMAIL: 'EMAIL',
    CLOUDPLUS: 'CLOUDPLUS',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValuedDataObject extends DataObject {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ValuedDataObject.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.variableSetting != null) {
            this.variableSetting.MexTag = ValuedDataObject.MEXTAG;
            list.push(this.variableSetting);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== ValuedDataObject.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSetting = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ValuedDataObject(this.Model);
    }
}
ValuedDataObject.Clr_Type_ID = "wf.ValuedDataObject";
ValuedDataObject.MEXTAG = 'wf.ValuedDataObject';
BpmnModelHelper.RegisterElementType(new ValuedDataObject(new BpmnModel()));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ActionOrganizationScope, BizActivity, ParticipantSchemeForDesigner, ParticipantItem, OrganizationParticipant, TimeLimitControlInfo, ExpireOperationInfo, SendMessageExpireOperationInfo, AutoHandleExpireOperationInfo, AssignmentStrategy, AssignmentStrategyDef, AssignPerformerConfig, BackWardRule, ConclusionItem, CounterSignRule, ExecuteWorkItemMode, ParticipantCoefficient, ResubmitEffect, WorkFlowAction, Condition, ConditionType, ConditionValueVersion, Xpression, SemanticExpression, Component, Tool, ToolTime, CustomizeAction, DisplayTerminal, ExecuteForm, TerminalType, JumpScope, JumpScopeCategory, JumpScopeDefaultType, Notification, NotifyTime, OtherAssignNodes, OtherAssignActivityNodeInfo, ProcessHeader, StartMode, WFExtensionElement, StartActivity, UserActivity, CDTSchemaType, MexExpressionImpl, TitleExpression, AsyncCallBackType, ExecutionType, FlowDirection, TargetRefConstants, FormalParameter, ParameterMode, ActualParameter, ActivityExecutorParticipant, ComponentParticipant, MatrixParticipant, Participant, PositionParticipant, ReportingLineParticipant, UserParticipant, ActivityExecutorParticipantExpression, ComponentParticipantExpression, MatrixParticipantExpression, OrganizationParticipantExpression, ParticipantExpression, ParticipantScheme, ParticipantSetting, PositionParticipantExpression, ReportingLineParticipantExpression, ReportingRank, UserParticipantExpression, VariableParticipantExpression, SerializeUtils, ActionScope, AifCreationBillActivity, ApprovalPivot, ApprovalPivotConfig, ApprovalPivotType, AutoActivity, AutoHandleExpireOperation, AutomaticApprovalRule, CallActivitySubProcess, CheckCondition, DurationType, ExpireOperation, ExtendProperty, HumanPerformerImpl, ImageSettings, IntermediateCatchEventImpl, MessageActivity, MessageNotice, NotifyActivity, OperationActivity, OrganizationLevel, OrganizationPotentialOwner, PotentialOwnerImpl, SendMessageExpireOperation, SendMessageType, SignalEventDefinitionImpl, SmsMessageTemplate, SmsMessageVariable, TimeLimitControl, UrgeHandleRule, ValuedDataObject, VariableSetting };

//# sourceMappingURL=gsp-wf-wf-process-model.js.map