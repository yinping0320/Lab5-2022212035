/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActivityExecutorParticipantExpression } from "./participants/ActivityExecutorParticipantExpression";
import { ComponentParticipantExpression } from "./participants/ComponentParticipantExpression";
import { MatrixParticipantExpression } from "./participants/MatrixParticipantExpression";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { PositionParticipantExpression } from "./participants/PositionParticipantExpression";
import { ReportingLineParticipantExpression } from "./participants/ReportingLineParticipantExpression";
import { UserParticipantExpression } from "./participants/UserParticipantExpression";
import { SmsMessageTemplate } from "./SmsMessageTemplate";
export class MessageNotice extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = MessageNotice.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.receiverExpressions = new Array();
        this.smsMessageTemplate = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Content", this.content);
        ExtensionMethod.SetAttributeValue(obj, "SendTime", this.sendTime);
        ExtensionMethod.SetAttributeValue(obj, "SendType", this.sendType);
        ExtensionMethod.SetAttributeValue(obj, "Subject", this.subject);
        ExtensionMethod.SetAttributeValue(obj, "Receiver", this.receiver);
        ExtensionMethod.SetAttributeValue(obj, "ReceiverText", this.receiverText);
        if (this.receiverExpressions != null && this.receiverExpressions.length > 0) {
            /** @type {?} */
            const receiverList = new Array();
            for (const receiver of this.receiverExpressions) {
                receiverList.push(receiver.ConvertToJsonObject());
            }
            ExtensionMethod.SetAttributeValue(obj, "ReceiverExpressions", receiverList);
        }
        if (this.smsMessageTemplate) {
            ExtensionMethod.SetAttributeValue(obj, "SmsMessageTemplate", this.smsMessageTemplate.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.content = ExtensionMethod.GetAttributeValue4String(obj, "Content");
        this.sendTime = ExtensionMethod.GetAttributeValue4String(obj, "SendTime");
        this.sendType = ExtensionMethod.GetAttributeValue4String(obj, "SendType");
        this.subject = ExtensionMethod.GetAttributeValue4String(obj, "Subject");
        this.receiver = ExtensionMethod.GetAttributeValue4String(obj, "Receiver");
        this.receiverText = ExtensionMethod.GetAttributeValue4String(obj, "ReceiverText");
        /** @type {?} */
        const receiverList = ExtensionMethod.GetAttributeValue(obj, "ReceiverExpressions");
        if (receiverList && receiverList.length > 0) {
            this.receiverExpressions = new Array();
            for (const receiver of receiverList) {
                /** @type {?} */
                const clrTypeID = ExtensionMethod.GetAttributeValue4String(receiver, "ClrTypeID");
                switch (clrTypeID) {
                    case UserParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const userParticipantExpression = new UserParticipantExpression(this.Model);
                        userParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(userParticipantExpression);
                        break;
                    case PositionParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const positionParticipantExpression = new PositionParticipantExpression(this.Model);
                        positionParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(positionParticipantExpression);
                        break;
                    case ReportingLineParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const reportingLineParticipantExpression = new ReportingLineParticipantExpression(this.Model);
                        reportingLineParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(reportingLineParticipantExpression);
                        break;
                    case OrganizationParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const organizationParticipantExpression = new OrganizationParticipantExpression(this.Model);
                        organizationParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(organizationParticipantExpression);
                        break;
                    case MatrixParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const matrixParticipantExpression = new MatrixParticipantExpression(this.Model);
                        matrixParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(matrixParticipantExpression);
                        break;
                    case ComponentParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const componentParticipantExpression = new ComponentParticipantExpression(this.Model);
                        componentParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(componentParticipantExpression);
                        break;
                    case ActivityExecutorParticipantExpression.Clr_Type_ID:
                        /** @type {?} */
                        const activityExecutorParticipantExpression = new ActivityExecutorParticipantExpression(this.Model);
                        activityExecutorParticipantExpression.LoadFromJsonObject(receiver);
                        this.receiverExpressions.push(activityExecutorParticipantExpression);
                        break;
                    default:
                        break;
                }
            }
        }
        /** @type {?} */
        const smsTemplateElement = ExtensionMethod.GetAttributeValue(obj, 'SmsMessageTemplate');
        if (smsTemplateElement) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(this.Model);
            smsMessageTemplate.LoadFromJsonObject(smsTemplateElement);
            this.smsMessageTemplate = smsMessageTemplate;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MessageNotice(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const messageNotice = new MessageNotice(this.Model);
        messageNotice.content = this.content;
        messageNotice.sendTime = this.sendTime;
        messageNotice.sendType = this.sendType;
        messageNotice.subject = this.subject;
        messageNotice.receiver = this.receiver;
        messageNotice.receiverText = this.receiverText;
        messageNotice.receiverExpressions = new Array();
        if (this.receiverExpressions && this.receiverExpressions.length > 0) {
            for (const r of this.receiverExpressions) {
                if (r instanceof OrganizationParticipantExpression) {
                    /** @type {?} */
                    const o = (/** @type {?} */ (r));
                    /** @type {?} */
                    const organizationParticipantExpression = o.clone();
                    messageNotice.receiverExpressions.push(organizationParticipantExpression);
                }
                else if (r instanceof UserParticipantExpression) {
                    /** @type {?} */
                    const u = (/** @type {?} */ (r));
                    /** @type {?} */
                    const userParticipantExpression = u.clone();
                    messageNotice.receiverExpressions.push(userParticipantExpression);
                }
                else if (r instanceof PositionParticipantExpression) {
                    /** @type {?} */
                    const p = (/** @type {?} */ (r));
                    /** @type {?} */
                    const positionParticipantExpression = p.clone();
                    messageNotice.receiverExpressions.push(positionParticipantExpression);
                }
                else if (r instanceof ReportingLineParticipantExpression) {
                    /** @type {?} */
                    const re = (/** @type {?} */ (r));
                    /** @type {?} */
                    const reportingLineParticipantExpression = re.clone();
                    messageNotice.receiverExpressions.push(reportingLineParticipantExpression);
                }
                else if (r instanceof MatrixParticipantExpression) {
                    /** @type {?} */
                    const m = (/** @type {?} */ (r));
                    /** @type {?} */
                    const matrixParticipantExpression = m.clone();
                    messageNotice.receiverExpressions.push(matrixParticipantExpression);
                }
                else if (r instanceof ComponentParticipantExpression) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (r));
                    /** @type {?} */
                    const componentParticipantExpression = c.clone();
                    messageNotice.receiverExpressions.push(componentParticipantExpression);
                }
                else if (r instanceof ActivityExecutorParticipantExpression) {
                    /** @type {?} */
                    const a = (/** @type {?} */ (r));
                    /** @type {?} */
                    const activityExecutorParticipantExpression = a.clone();
                    messageNotice.receiverExpressions.push(activityExecutorParticipantExpression);
                }
            }
        }
        if (this.smsMessageTemplate) {
            messageNotice.smsMessageTemplate = this.smsMessageTemplate.clone();
        }
        return messageNotice;
    }
}
MessageNotice.Clr_Type_ID = "wf.MessageNotice";
if (false) {
    /** @type {?} */
    MessageNotice.Clr_Type_ID;
    /** @type {?} */
    MessageNotice.prototype.ClrTypeID;
    /**
     * 消息内容
     * @type {?}
     */
    MessageNotice.prototype.content;
    /**
     * 消息发送时机
     * @type {?}
     */
    MessageNotice.prototype.sendTime;
    /**
     * 消息发送方式
     * @type {?}
     */
    MessageNotice.prototype.sendType;
    /**
     * 消息主题
     * @type {?}
     */
    MessageNotice.prototype.subject;
    /**
     * 消息接收人
     * @type {?}
     */
    MessageNotice.prototype.receiver;
    /**
     * 消息接收人显示
     * @type {?}
     */
    MessageNotice.prototype.receiverText;
    /** @type {?} */
    MessageNotice.prototype.receiverExpressions;
    /** @type {?} */
    MessageNotice.prototype.smsMessageTemplate;
}
BpmnModelHelper.RegisterElementType(new MessageNotice(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZU5vdGljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9NZXNzYWdlTm90aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDckgsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDN0csT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDL0YsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDekYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFFckcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDN0YsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDdkcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxnQkFBZ0I7Ozs7SUFzQy9DLFlBQVksS0FBZ0I7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBckNSLGNBQVMsR0FBVyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBc0N2RCxDQUFDOzs7OztJQUVTLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtB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SUFLakIsaUNBQWlCOzs7OztJQUtqQixnQ0FBZ0I7Ozs7O0lBS2hCLGlDQUFpQjs7Ozs7SUFLakIscUNBQXFCOztJQUVyQiw0Q0FBa0Q7O0lBRWxELDJDQUF1Qzs7QUE4SjNDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBFeHRlbnNpb25NZXRob2QsIFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9wYXJ0aWNpcGFudHMvQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG5pbXBvcnQgeyBDb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9wYXJ0aWNpcGFudHMvQ29tcG9uZW50UGFydGljaXBhbnRFeHByZXNzaW9uXCI7XHJcbmltcG9ydCB7IE1hdHJpeFBhcnRpY2lwYW50RXhwcmVzc2lvbiB9IGZyb20gXCIuL3BhcnRpY2lwYW50cy9NYXRyaXhQYXJ0aWNpcGFudEV4cHJlc3Npb25cIjtcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uIH0gZnJvbSBcIi4vcGFydGljaXBhbnRzL09yZ2FuaXphdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG5pbXBvcnQgeyBQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9wYXJ0aWNpcGFudHMvUGFydGljaXBhbnRFeHByZXNzaW9uXCI7XHJcbmltcG9ydCB7IFBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uIH0gZnJvbSBcIi4vcGFydGljaXBhbnRzL1Bvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uXCI7XHJcbmltcG9ydCB7IFJlcG9ydGluZ0xpbmVQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9wYXJ0aWNpcGFudHMvUmVwb3J0aW5nTGluZVBhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG5pbXBvcnQgeyBVc2VyUGFydGljaXBhbnRFeHByZXNzaW9uIH0gZnJvbSBcIi4vcGFydGljaXBhbnRzL1VzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb25cIjtcclxuaW1wb3J0IHsgU21zTWVzc2FnZVRlbXBsYXRlIH0gZnJvbSBcIi4vU21zTWVzc2FnZVRlbXBsYXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZU5vdGljZSBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLk1lc3NhZ2VOb3RpY2VcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gTWVzc2FnZU5vdGljZS5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOa2iOaBr+WGheWuuVxyXG4gICAgICovXHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmtojmga/lj5HpgIHml7bmnLpcclxuICAgICAqL1xyXG4gICAgc2VuZFRpbWU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOa2iOaBr+WPkemAgeaWueW8j1xyXG4gICAgICovXHJcbiAgICBzZW5kVHlwZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv5Li76aKYXHJcbiAgICAgKi9cclxuICAgIHN1YmplY3Q6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOa2iOaBr+aOpeaUtuS6ulxyXG4gICAgICovXHJcbiAgICByZWNlaXZlcjogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv5o6l5pS25Lq65pi+56S6XHJcbiAgICAgKi9cclxuICAgIHJlY2VpdmVyVGV4dDogc3RyaW5nO1xyXG5cclxuICAgIHJlY2VpdmVyRXhwcmVzc2lvbnM6IEFycmF5PFBhcnRpY2lwYW50RXhwcmVzc2lvbj47XHJcblxyXG4gICAgc21zTWVzc2FnZVRlbXBsYXRlOiBTbXNNZXNzYWdlVGVtcGxhdGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlckV4cHJlc3Npb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5zbXNNZXNzYWdlVGVtcGxhdGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29udGVudFwiLCB0aGlzLmNvbnRlbnQpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiU2VuZFRpbWVcIiwgdGhpcy5zZW5kVGltZSk7XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJTZW5kVHlwZVwiLCB0aGlzLnNlbmRUeXBlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlN1YmplY3RcIiwgdGhpcy5zdWJqZWN0KTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlJlY2VpdmVyXCIsIHRoaXMucmVjZWl2ZXIpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiUmVjZWl2ZXJUZXh0XCIsIHRoaXMucmVjZWl2ZXJUZXh0KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucyAhPSBudWxsICYmIHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVyTGlzdCA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY2VpdmVyIG9mIHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucykge1xyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2gocmVjZWl2ZXIuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlJlY2VpdmVyRXhwcmVzc2lvbnNcIiwgcmVjZWl2ZXJMaXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc21zTWVzc2FnZVRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiU21zTWVzc2FnZVRlbXBsYXRlXCIsIHRoaXMuc21zTWVzc2FnZVRlbXBsYXRlLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJDb250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMuc2VuZFRpbWUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJTZW5kVGltZVwiKTtcclxuICAgICAgICB0aGlzLnNlbmRUeXBlID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiU2VuZFR5cGVcIik7XHJcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiU3ViamVjdFwiKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiUmVjZWl2ZXJcIik7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlclRleHQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJSZWNlaXZlclRleHRcIik7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlY2VpdmVyTGlzdDogQXJyYXk8YW55PiA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiUmVjZWl2ZXJFeHByZXNzaW9uc1wiKTtcclxuICAgICAgICBpZiAocmVjZWl2ZXJMaXN0ICYmIHJlY2VpdmVyTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY2VpdmVyIG9mIHJlY2VpdmVyTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2xyVHlwZUlEID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhyZWNlaXZlciwgXCJDbHJUeXBlSURcIilcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2xyVHlwZUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBVc2VyUGFydGljaXBhbnRFeHByZXNzaW9uLkNscl9UeXBlX0lEOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyUGFydGljaXBhbnRFeHByZXNzaW9uID0gbmV3IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24uTG9hZEZyb21Kc29uT2JqZWN0KHJlY2VpdmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlckV4cHJlc3Npb25zLnB1c2godXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUG9zaXRpb25QYXJ0aWNpcGFudEV4cHJlc3Npb24uQ2xyX1R5cGVfSUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uID0gbmV3IFBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbi5Mb2FkRnJvbUpzb25PYmplY3QocmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaChwb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVwb3J0aW5nTGluZVBhcnRpY2lwYW50RXhwcmVzc2lvbi5DbHJfVHlwZV9JRDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwb3J0aW5nTGluZVBhcnRpY2lwYW50RXhwcmVzc2lvbiA9IG5ldyBSZXBvcnRpbmdMaW5lUGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvcnRpbmdMaW5lUGFydGljaXBhbnRFeHByZXNzaW9uLkxvYWRGcm9tSnNvbk9iamVjdChyZWNlaXZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKHJlcG9ydGluZ0xpbmVQYXJ0aWNpcGFudEV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE9yZ2FuaXphdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbi5DbHJfVHlwZV9JRDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uID0gbmV3IE9yZ2FuaXphdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uLkxvYWRGcm9tSnNvbk9iamVjdChyZWNlaXZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKG9yZ2FuaXphdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWF0cml4UGFydGljaXBhbnRFeHByZXNzaW9uLkNscl9UeXBlX0lEOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRyaXhQYXJ0aWNpcGFudEV4cHJlc3Npb24gPSBuZXcgTWF0cml4UGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXhQYXJ0aWNpcGFudEV4cHJlc3Npb24uTG9hZEZyb21Kc29uT2JqZWN0KHJlY2VpdmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlckV4cHJlc3Npb25zLnB1c2gobWF0cml4UGFydGljaXBhbnRFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24uQ2xyX1R5cGVfSUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFBhcnRpY2lwYW50RXhwcmVzc2lvbiA9IG5ldyBDb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFBhcnRpY2lwYW50RXhwcmVzc2lvbi5Mb2FkRnJvbUpzb25PYmplY3QocmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaChjb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24uQ2xyX1R5cGVfSUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24gPSBuZXcgQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbi5Mb2FkRnJvbUpzb25PYmplY3QocmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaChhY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNtc1RlbXBsYXRlRWxlbWVudCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdTbXNNZXNzYWdlVGVtcGxhdGUnKTtcclxuICAgICAgICBpZiAoc21zVGVtcGxhdGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNtc01lc3NhZ2VUZW1wbGF0ZSA9IG5ldyBTbXNNZXNzYWdlVGVtcGxhdGUodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5Mb2FkRnJvbUpzb25PYmplY3Qoc21zVGVtcGxhdGVFbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5zbXNNZXNzYWdlVGVtcGxhdGUgPSBzbXNNZXNzYWdlVGVtcGxhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IE1lc3NhZ2VOb3RpY2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgTWVzc2FnZU5vdGljZSh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBNZXNzYWdlTm90aWNlIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlTm90aWNlID0gbmV3IE1lc3NhZ2VOb3RpY2UodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgbWVzc2FnZU5vdGljZS5jb250ZW50ID0gdGhpcy5jb250ZW50O1xyXG4gICAgICAgIG1lc3NhZ2VOb3RpY2Uuc2VuZFRpbWUgPSB0aGlzLnNlbmRUaW1lO1xyXG4gICAgICAgIG1lc3NhZ2VOb3RpY2Uuc2VuZFR5cGUgPSB0aGlzLnNlbmRUeXBlO1xyXG4gICAgICAgIG1lc3NhZ2VOb3RpY2Uuc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcclxuICAgICAgICBtZXNzYWdlTm90aWNlLnJlY2VpdmVyID0gdGhpcy5yZWNlaXZlcjtcclxuICAgICAgICBtZXNzYWdlTm90aWNlLnJlY2VpdmVyVGV4dCA9IHRoaXMucmVjZWl2ZXJUZXh0O1xyXG4gICAgICAgIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJFeHByZXNzaW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGlmICh0aGlzLnJlY2VpdmVyRXhwcmVzc2lvbnMgJiYgdGhpcy5yZWNlaXZlckV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHRoaXMucmVjZWl2ZXJFeHByZXNzaW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBPcmdhbml6YXRpb25QYXJ0aWNpcGFudEV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gciBhcyBPcmdhbml6YXRpb25QYXJ0aWNpcGFudEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uID0gby5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKG9yZ2FuaXphdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyIGluc3RhbmNlb2YgVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHUgPSByIGFzIFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbiA9IHUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTm90aWNlLnJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaCh1c2VyUGFydGljaXBhbnRFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHIgaW5zdGFuY2VvZiBQb3NpdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSByIGFzIFBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uID0gcC5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VOb3RpY2UucmVjZWl2ZXJFeHByZXNzaW9ucy5wdXNoKHBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHIgaW5zdGFuY2VvZiBSZXBvcnRpbmdMaW5lUGFydGljaXBhbnRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmUgPSByIGFzIFJlcG9ydGluZ0xpbmVQYXJ0aWNpcGFudEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwb3J0aW5nTGluZVBhcnRpY2lwYW50RXhwcmVzc2lvbiA9IHJlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU5vdGljZS5yZWNlaXZlckV4cHJlc3Npb25zLnB1c2gocmVwb3J0aW5nTGluZVBhcnRpY2lwYW50RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyIGluc3RhbmNlb2YgTWF0cml4UGFydGljaXBhbnRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbSA9IHIgYXMgTWF0cml4UGFydGljaXBhbnRFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdHJpeFBhcnRpY2lwYW50RXhwcmVzc2lvbiA9IG0uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTm90aWNlLnJlY2VpdmVyRXhwcmVzc2lvbnMucHVzaChtYXRyaXhQYXJ0aWNpcGFudEV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAociBpbnN0YW5jZW9mIENvbXBvbmVudFBhcnRpY2lwYW50RXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSByIGFzIENvbXBvbmVudFBhcnRpY2lwYW50RXhwcmVzc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24gPSBjLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU5vdGljZS5yZWNlaXZlckV4cHJlc3Npb25zLnB1c2goY29tcG9uZW50UGFydGljaXBhbnRFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAociBpbnN0YW5jZW9mIEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gciBhcyBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24gPSBhLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU5vdGljZS5yZWNlaXZlckV4cHJlc3Npb25zLnB1c2goYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc21zTWVzc2FnZVRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VOb3RpY2Uuc21zTWVzc2FnZVRlbXBsYXRlID0gdGhpcy5zbXNNZXNzYWdlVGVtcGxhdGUuY2xvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VOb3RpY2U7XHJcbiAgICB9XHJcblxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBNZXNzYWdlTm90aWNlKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==