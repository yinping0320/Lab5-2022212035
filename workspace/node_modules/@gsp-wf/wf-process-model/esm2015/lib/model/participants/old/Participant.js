/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HumanPerformer } from "@edp-pmf/bpmn-model";
import { Condition } from "../../extension/condition-expression/Condition";
/**
 * @abstract
 */
export class Participant extends HumanPerformer {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     */
    constructor(model, id, name) {
        super(model);
        this.ClrTypeID = "wf.Participant";
        this.MexTag = 'wf.Participant';
        this.Id = id;
        this.Name = name;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.Condition) {
            this.Condition.MexTag = this.MexTag;
            list.push(this.Condition);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (const item of extensionElements) {
            if (item instanceof Condition) {
                /** @type {?} */
                const condition = (/** @type {?} */ (item));
                if (condition.MexTag === this.MexTag) {
                    this.Condition = condition;
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    Participant.prototype.ClrTypeID;
    /** @type {?} */
    Participant.prototype.MexTag;
    /** @type {?} */
    Participant.prototype.Condition;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvcGFydGljaXBhbnRzL29sZC9QYXJ0aWNpcGFudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUE4QixjQUFjLEVBQW9CLE1BQU0scUJBQXFCLENBQUM7QUFDbkcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7O0FBRTNFLE1BQU0sT0FBZ0IsV0FBWSxTQUFRLGNBQWM7Ozs7OztJQUNwRCxZQUFZLEtBQWdCLEVBQUUsRUFBVyxFQUFFLElBQWE7UUFDcEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBS2pCLGNBQVMsR0FBVyxnQkFBZ0IsQ0FBQztRQUNyQyxXQUFNLEdBQVcsZ0JBQWdCLENBQUM7UUFMOUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDOzs7O0lBTUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRVMsOEJBQThCOztZQUNoQyxJQUFJLEdBQUcsS0FBSyxDQUFDLDhCQUE4QixFQUFFO1FBQ2pELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7O0lBRVMsNkJBQTZCLENBQUMsaUJBQXFDO1FBQ3pFLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZELEtBQUssTUFBTSxJQUFJLElBQUksaUJBQWlCLEVBQUU7WUFDbEMsSUFBSSxJQUFJLFlBQVksU0FBUyxFQUFFOztzQkFDckIsU0FBUyxHQUFHLG1CQUFBLElBQUksRUFBYTtnQkFDbkMsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO2lCQUM5QjthQUNKO1NBQ0o7SUFDTCxDQUFDO0NBSUo7OztJQXBDRyxnQ0FBcUM7O0lBQ3JDLDZCQUFrQzs7SUFDbEMsZ0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEh1bWFuUGVyZm9ybWVyLCBFeHRlbnNpb25FbGVtZW50IH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgQ29uZGl0aW9uIH0gZnJvbSBcIi4uLy4uL2V4dGVuc2lvbi9jb25kaXRpb24tZXhwcmVzc2lvbi9Db25kaXRpb25cIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXJ0aWNpcGFudCBleHRlbmRzIEh1bWFuUGVyZm9ybWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwsIGlkPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuSWQgPSBpZDtcclxuICAgICAgICB0aGlzLk5hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gXCJ3Zi5QYXJ0aWNpcGFudFwiO1xyXG4gICAgTWV4VGFnOiBzdHJpbmcgPSAnd2YuUGFydGljaXBhbnQnO1xyXG4gICAgQ29uZGl0aW9uOiBDb25kaXRpb247XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBHZXRFeHRlbnNpb25FbGVtZW50czRDb252ZXJ0VG8oKTogYW55IHtcclxuICAgICAgICBsZXQgbGlzdCA9IHN1cGVyLkdldEV4dGVuc2lvbkVsZW1lbnRzNENvbnZlcnRUbygpO1xyXG4gICAgICAgIGlmICh0aGlzLkNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLkNvbmRpdGlvbi5NZXhUYWcgPSB0aGlzLk1leFRhZztcclxuICAgICAgICAgICAgbGlzdC5wdXNoKHRoaXMuQ29uZGl0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFNldEV4dGVuc2lvbkVsZW1lbnRzNExvYWRGcm9tKGV4dGVuc2lvbkVsZW1lbnRzOiBFeHRlbnNpb25FbGVtZW50W10pIHtcclxuICAgICAgICBzdXBlci5TZXRFeHRlbnNpb25FbGVtZW50czRMb2FkRnJvbShleHRlbnNpb25FbGVtZW50cyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGV4dGVuc2lvbkVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSBpdGVtIGFzIENvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24uTWV4VGFnID09PSB0aGlzLk1leFRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9wdWJsaWMgSUxpc3Q8RXh0ZW5zaW9uRWxlbWVudD4gR2V0RXh0ZW5zaW9uRWxlbWVudHMoKSB7XHJcbiAgICAvLyAgICByZXR1cm4gdGhpcy5leHRlbnNpb25FbGVtZW50cztcclxuICAgIC8vfVxyXG59Il19