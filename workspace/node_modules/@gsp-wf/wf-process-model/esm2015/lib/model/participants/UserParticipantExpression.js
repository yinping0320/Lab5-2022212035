/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
export class UserParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} userId
     * @param {?=} name
     * @param {?=} orgType
     */
    constructor(model, userId, name, orgType) {
        super(model);
        this.ClrTypeID = UserParticipantExpression.Clr_Type_ID;
        this.OrgType = 'Sys';
        this.UserId = userId;
        this.name = name;
        this.OrgType = orgType ? orgType : 'Sys';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UserParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "UserId", this.UserId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
        this.UserId = obj.UserId;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const userParticipant = new UserParticipantExpression(this.Model);
        userParticipant.id = BpmnModelHelper.GenerateElementId();
        userParticipant.name = this.name;
        userParticipant.OrgId = this.OrgId;
        userParticipant.OrgName = this.OrgName;
        userParticipant.OrgType = this.OrgType;
        userParticipant.UserId = this.UserId;
        userParticipant.Tag = this.Tag;
        // if (this.Condition) { 
        //     userParticipant.Condition = this.Condition.clone();
        // }
        return userParticipant;
    }
}
UserParticipantExpression.Clr_Type_ID = "wf.UserParticipantExpression";
UserParticipantExpression.CLR_TYPE_NAME = '用户';
if (false) {
    /** @type {?} */
    UserParticipantExpression.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    UserParticipantExpression.CLR_TYPE_NAME;
    /** @type {?} */
    UserParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    UserParticipantExpression.prototype.Tag;
    /** @type {?} */
    UserParticipantExpression.prototype.UserId;
    /** @type {?} */
    UserParticipantExpression.prototype.OrgId;
    /** @type {?} */
    UserParticipantExpression.prototype.OrgName;
    /** @type {?} */
    UserParticipantExpression.prototype.OrgType;
}
BpmnModelHelper.RegisterElementType(new UserParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9wYXJ0aWNpcGFudHMvVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVoRSxNQUFNLE9BQU8seUJBQTBCLFNBQVEscUJBQXFCOzs7Ozs7O0lBQ2hFLFlBQVksS0FBZ0IsRUFBRSxNQUFlLEVBQUUsSUFBYSxFQUFFLE9BQWdCO1FBQzFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVNqQixjQUFTLEdBQVcseUJBQXlCLENBQUMsV0FBVyxDQUFDO1FBTTFELFlBQU8sR0FBVyxLQUFLLENBQUM7UUFkcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFhRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLHlCQUF5QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4RCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxlQUFlLEdBQUcsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pFLGVBQWUsQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekQsZUFBZSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pDLGVBQWUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNuQyxlQUFlLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkMsZUFBZSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQyxlQUFlLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDL0IseUJBQXlCO1FBQ3pCLDBEQUEwRDtRQUMxRCxJQUFJO1FBQ0osT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQzs7QUFoRE0scUNBQVcsR0FBVyw4QkFBOEIsQ0FBQztBQUM3Qyx1Q0FBYSxHQUFHLElBQUksQ0FBQzs7O0lBRHBDLHNDQUE0RDs7Ozs7SUFDNUQsd0NBQW9DOztJQUVwQyw4Q0FBMEQ7O0lBRTFELHdDQUFZOztJQUNaLDJDQUFlOztJQUNmLDBDQUFjOztJQUNkLDRDQUFnQjs7SUFDaEIsNENBQXdCOztBQXlDNUIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUkseUJBQXlCLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IFBhcnRpY2lwYW50RXhwcmVzc2lvbiB9IGZyb20gXCIuL1BhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24gZXh0ZW5kcyBQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCwgdXNlcklkPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nLCBvcmdUeXBlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuVXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5PcmdUeXBlID0gb3JnVHlwZSA/IG9yZ1R5cGUgOiAnU3lzJztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRSA9ICfnlKjmiLcnO1xyXG5cclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbi5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBUYWc6IHN0cmluZztcclxuICAgIFVzZXJJZDogc3RyaW5nO1xyXG4gICAgT3JnSWQ6IHN0cmluZztcclxuICAgIE9yZ05hbWU6IHN0cmluZztcclxuICAgIE9yZ1R5cGU6IHN0cmluZyA9ICdTeXMnO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlVzZXJJZFwiLCB0aGlzLlVzZXJJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPcmdJZFwiLCB0aGlzLk9yZ0lkKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk9yZ05hbWVcIiwgdGhpcy5PcmdOYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk9yZ1R5cGVcIiwgdGhpcy5PcmdUeXBlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlRhZ1wiLCB0aGlzLlRhZyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KTogYW55IHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLk9yZ0lkID0gb2JqLk9yZ0lkO1xyXG4gICAgICAgIHRoaXMuT3JnTmFtZSA9IG9iai5PcmdOYW1lO1xyXG4gICAgICAgIHRoaXMuT3JnVHlwZSA9IG9iai5PcmdUeXBlO1xyXG4gICAgICAgIHRoaXMuVXNlcklkID0gb2JqLlVzZXJJZDtcclxuICAgICAgICB0aGlzLlRhZyA9IG9iai5UYWc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbiB7XHJcbiAgICAgICAgY29uc3QgdXNlclBhcnRpY2lwYW50ID0gbmV3IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50LmlkID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50Lm5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50Lk9yZ0lkID0gdGhpcy5PcmdJZDtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnTmFtZSA9IHRoaXMuT3JnTmFtZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnVHlwZSA9IHRoaXMuT3JnVHlwZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuVXNlcklkID0gdGhpcy5Vc2VySWQ7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50LlRhZyA9IHRoaXMuVGFnO1xyXG4gICAgICAgIC8vIGlmICh0aGlzLkNvbmRpdGlvbikgeyBcclxuICAgICAgICAvLyAgICAgdXNlclBhcnRpY2lwYW50LkNvbmRpdGlvbiA9IHRoaXMuQ29uZGl0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIHJldHVybiB1c2VyUGFydGljaXBhbnQ7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24obmV3IEJwbW5Nb2RlbCgpKSk7Il19