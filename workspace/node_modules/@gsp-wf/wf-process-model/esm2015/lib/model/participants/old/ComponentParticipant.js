/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../../parameter/WFActualParameter";
import { Participant } from "./Participant";
export class ComponentParticipant extends Participant {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ComponentParticipant.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ActualParameters = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentName", this.ComponentName);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.MethodCode);
        BpmnModelHelper.SetAttributeValue(obj, "MethodName", this.MethodName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ComponentId = obj.ComponentId;
        this.ComponentName = obj.ComponentName;
        this.MethodCode = obj.MethodCode;
        this.MethodName = obj.MethodName;
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const param of this.ActualParameters) {
                param.MexTag = ComponentParticipant.MEXTAG;
                list.push(param);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (const extensionElement of extensionElements) {
            if (extensionElement instanceof ActualParameter) {
                /** @type {?} */
                const actualParameter = (/** @type {?} */ (extensionElement));
                if (actualParameter.MexTag === ComponentParticipant.MEXTAG) {
                    this.ActualParameters.push(actualParameter);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ComponentParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const componentParticipant = new ComponentParticipant(this.Model);
        componentParticipant.Id = BpmnModelHelper.GenerateElementId();
        componentParticipant.Name = this.Name;
        componentParticipant.ComponentId = this.ComponentId;
        componentParticipant.ComponentName = this.ComponentName;
        componentParticipant.MethodCode = this.MethodCode;
        componentParticipant.MethodName = this.MethodName;
        componentParticipant.ActualParameters = new Array();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const p of this.ActualParameters) {
                /** @type {?} */
                const parameter = p.clone();
                componentParticipant.ActualParameters.push(parameter);
            }
        }
        if (this.Condition) {
            componentParticipant.Condition = this.Condition.clone();
        }
        return componentParticipant;
    }
}
ComponentParticipant.Clr_Type_ID = 'wf.ComponentParticipant';
ComponentParticipant.CLR_TYPE_NAME = '构件';
ComponentParticipant.MEXTAG = "wf.ComponentParticipant";
if (false) {
    /** @type {?} */
    ComponentParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    ComponentParticipant.CLR_TYPE_NAME;
    /**
     * @type {?}
     * @private
     */
    ComponentParticipant.MEXTAG;
    /** @type {?} */
    ComponentParticipant.prototype.ClrTypeID;
    /** @type {?} */
    ComponentParticipant.prototype.ComponentId;
    /** @type {?} */
    ComponentParticipant.prototype.ComponentName;
    /** @type {?} */
    ComponentParticipant.prototype.MethodCode;
    /** @type {?} */
    ComponentParticipant.prototype.MethodName;
    /** @type {?} */
    ComponentParticipant.prototype.ActualParameters;
}
BpmnModelHelper.RegisterElementType(new ComponentParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,