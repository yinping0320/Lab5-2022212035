/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Participant } from "./Participant";
export class UserParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} userId
     * @param {?=} name
     * @param {?=} orgType
     */
    constructor(model, userId, name, orgType) {
        super(model);
        this.ClrTypeID = UserParticipant.Clr_Type_ID;
        this.UserId = userId;
        this.Name = name;
        this.OrgType = orgType ? orgType : 'Sys';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UserParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "UserId", this.UserId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
        this.UserId = obj.UserId;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const userParticipant = new UserParticipant(this.Model);
        userParticipant.Id = BpmnModelHelper.GenerateElementId();
        userParticipant.Name = this.Name;
        userParticipant.OrgId = this.OrgId;
        userParticipant.OrgName = this.OrgName;
        userParticipant.OrgType = this.OrgType;
        userParticipant.UserId = this.UserId;
        userParticipant.Tag = this.Tag;
        if (this.Condition) {
            userParticipant.Condition = this.Condition.clone();
        }
        return userParticipant;
    }
}
UserParticipant.Clr_Type_ID = "wf.UserParticipant";
UserParticipant.CLR_TYPE_NAME = '用户';
if (false) {
    /** @type {?} */
    UserParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    UserParticipant.CLR_TYPE_NAME;
    /** @type {?} */
    UserParticipant.prototype.ClrTypeID;
    /** @type {?} */
    UserParticipant.prototype.Tag;
    /** @type {?} */
    UserParticipant.prototype.UserId;
    /** @type {?} */
    UserParticipant.prototype.OrgId;
    /** @type {?} */
    UserParticipant.prototype.OrgName;
    /** @type {?} */
    UserParticipant.prototype.OrgType;
}
BpmnModelHelper.RegisterElementType(new UserParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclBhcnRpY2lwYW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcnRpY2lwYW50cy9vbGQvVXNlclBhcnRpY2lwYW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUMsTUFBTSxPQUFPLGVBQWdCLFNBQVEsV0FBVzs7Ozs7OztJQUU1QyxZQUFZLEtBQWdCLEVBQUUsTUFBZSxFQUFFLElBQWEsRUFBRSxPQUFnQjtRQUMxRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFTakIsY0FBUyxHQUFXLGVBQWUsQ0FBQyxXQUFXLENBQUM7UUFSNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFhRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkQsZUFBZSxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6RCxlQUFlLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsZUFBZSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25DLGVBQWUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN2QyxlQUFlLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkMsZUFBZSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JDLGVBQWUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsZUFBZSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQzs7QUFoRE0sMkJBQVcsR0FBVyxvQkFBb0IsQ0FBQztBQUNuQyw2QkFBYSxHQUFHLElBQUksQ0FBQzs7O0lBRHBDLDRCQUFrRDs7Ozs7SUFDbEQsOEJBQW9DOztJQUVwQyxvQ0FBZ0Q7O0lBRWhELDhCQUFZOztJQUNaLGlDQUFlOztJQUNmLGdDQUFjOztJQUNkLGtDQUFnQjs7SUFDaEIsa0NBQWdCOztBQTJDcEIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksZUFBZSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBQYXJ0aWNpcGFudCB9IGZyb20gXCIuL1BhcnRpY2lwYW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclBhcnRpY2lwYW50IGV4dGVuZHMgUGFydGljaXBhbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwsIHVzZXJJZD86IHN0cmluZywgbmFtZT86IHN0cmluZywgb3JnVHlwZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgICAgICB0aGlzLlVzZXJJZCA9IHVzZXJJZDtcclxuICAgICAgICB0aGlzLk5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuT3JnVHlwZSA9IG9yZ1R5cGUgPyBvcmdUeXBlIDogJ1N5cyc7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLlVzZXJQYXJ0aWNpcGFudFwiO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRSA9ICfnlKjmiLcnO1xyXG5cclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gVXNlclBhcnRpY2lwYW50LkNscl9UeXBlX0lEO1xyXG5cclxuICAgIFRhZzogc3RyaW5nO1xyXG4gICAgVXNlcklkOiBzdHJpbmc7XHJcbiAgICBPcmdJZDogc3RyaW5nO1xyXG4gICAgT3JnTmFtZTogc3RyaW5nO1xyXG4gICAgT3JnVHlwZTogc3RyaW5nO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFVzZXJQYXJ0aWNpcGFudCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VyUGFydGljaXBhbnQodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJVc2VySWRcIiwgdGhpcy5Vc2VySWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiT3JnSWRcIiwgdGhpcy5PcmdJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPcmdOYW1lXCIsIHRoaXMuT3JnTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPcmdUeXBlXCIsIHRoaXMuT3JnVHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJUYWdcIiwgdGhpcy5UYWcpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSk6IGFueSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5PcmdJZCA9IG9iai5PcmdJZDtcclxuICAgICAgICB0aGlzLk9yZ05hbWUgPSBvYmouT3JnTmFtZTtcclxuICAgICAgICB0aGlzLk9yZ1R5cGUgPSBvYmouT3JnVHlwZTtcclxuICAgICAgICB0aGlzLlVzZXJJZCA9IG9iai5Vc2VySWQ7XHJcbiAgICAgICAgdGhpcy5UYWcgPSBvYmouVGFnO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IFVzZXJQYXJ0aWNpcGFudCB7XHJcbiAgICAgICAgY29uc3QgdXNlclBhcnRpY2lwYW50ID0gbmV3IFVzZXJQYXJ0aWNpcGFudCh0aGlzLk1vZGVsKTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuSWQgPSBCcG1uTW9kZWxIZWxwZXIuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuTmFtZSA9IHRoaXMuTmFtZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnSWQgPSB0aGlzLk9yZ0lkO1xyXG4gICAgICAgIHVzZXJQYXJ0aWNpcGFudC5PcmdOYW1lID0gdGhpcy5PcmdOYW1lO1xyXG4gICAgICAgIHVzZXJQYXJ0aWNpcGFudC5PcmdUeXBlID0gdGhpcy5PcmdUeXBlO1xyXG4gICAgICAgIHVzZXJQYXJ0aWNpcGFudC5Vc2VySWQgPSB0aGlzLlVzZXJJZDtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuVGFnID0gdGhpcy5UYWc7XHJcbiAgICAgICAgaWYgKHRoaXMuQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIHVzZXJQYXJ0aWNpcGFudC5Db25kaXRpb24gPSB0aGlzLkNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXNlclBhcnRpY2lwYW50O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFVzZXJQYXJ0aWNpcGFudChuZXcgQnBtbk1vZGVsKCkpKTtcclxuIl19