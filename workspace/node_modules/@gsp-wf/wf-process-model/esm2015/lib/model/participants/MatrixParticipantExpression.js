/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
export class MatrixParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} MatrixDefId
     * @param {?=} MatrixDefName
     * @param {?=} ConditionField1
     * @param {?=} ConditionFieldText1
     * @param {?=} ConditionField2
     * @param {?=} ConditionFieldText2
     * @param {?=} ConditionField3
     * @param {?=} ConditionFieldText3
     * @param {?=} MultivaluedCondition
     * @param {?=} DataFieldAlias
     */
    constructor(model, MatrixDefId, MatrixDefName, ConditionField1, ConditionFieldText1, ConditionField2, ConditionFieldText2, ConditionField3, ConditionFieldText3, MultivaluedCondition, DataFieldAlias) {
        super(model);
        this.ClrTypeID = MatrixParticipantExpression.Clr_Type_ID;
        this.matrixDefId = MatrixDefId;
        this.matrixDefName = MatrixDefName;
        this.conditionField1 = ConditionField1;
        this.conditionFieldText1 = ConditionFieldText1;
        this.conditionField2 = ConditionField2;
        this.conditionFieldText2 = ConditionFieldText2;
        this.conditionField3 = ConditionField3;
        this.conditionFieldText3 = ConditionFieldText3;
        this.multivaluedCondition = MultivaluedCondition;
        this.dataFieldAlias = DataFieldAlias;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefId", this.matrixDefId);
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefName", this.matrixDefName);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField1", this.conditionField1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText1", this.conditionFieldText1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField2", this.conditionField2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText2", this.conditionFieldText2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField3", this.conditionField3);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText3", this.conditionFieldText3);
        BpmnModelHelper.SetAttributeValue(obj, "MultivaluedCondition", this.multivaluedCondition);
        BpmnModelHelper.SetAttributeValue(obj, "DataFieldAlias", this.dataFieldAlias);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.matrixDefId = obj.MatrixDefId;
        this.matrixDefName = obj.MatrixDefName;
        this.conditionField1 = obj.ConditionField1;
        this.conditionFieldText1 = obj.ConditionFieldText1;
        this.conditionField2 = obj.ConditionField2;
        this.conditionFieldText2 = obj.ConditionFieldText2;
        this.conditionField3 = obj.ConditionField3;
        this.conditionFieldText3 = obj.ConditionFieldText3;
        this.multivaluedCondition = obj.MultivaluedCondition;
        this.dataFieldAlias = obj.DataFieldAlias;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MatrixParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const matrixParticipant = new MatrixParticipantExpression(this.Model);
        matrixParticipant.id = BpmnModelHelper.GenerateElementId();
        matrixParticipant.name = this.name;
        matrixParticipant.matrixDefId = this.matrixDefId;
        matrixParticipant.matrixDefName = this.matrixDefName;
        matrixParticipant.conditionField1 = this.conditionField1;
        matrixParticipant.conditionFieldText1 = this.conditionFieldText1;
        matrixParticipant.conditionField2 = this.conditionField2;
        matrixParticipant.conditionFieldText2 = this.conditionFieldText2;
        matrixParticipant.conditionField3 = this.conditionField3;
        matrixParticipant.conditionFieldText3 = this.conditionFieldText3;
        matrixParticipant.multivaluedCondition = this.multivaluedCondition;
        matrixParticipant.dataFieldAlias = this.dataFieldAlias;
        return matrixParticipant;
    }
}
MatrixParticipantExpression.Clr_Type_ID = 'wf.MatrixParticipantExpression';
MatrixParticipantExpression.CLR_TYPE_NAME = '矩阵';
if (false) {
    /** @type {?} */
    MatrixParticipantExpression.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    MatrixParticipantExpression.CLR_TYPE_NAME;
    /** @type {?} */
    MatrixParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    MatrixParticipantExpression.prototype.matrixDefId;
    /** @type {?} */
    MatrixParticipantExpression.prototype.matrixDefName;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionField1;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionFieldText1;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionField2;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionFieldText2;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionField3;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionFieldText3;
    /** @type {?} */
    MatrixParticipantExpression.prototype.multivaluedCondition;
    /** @type {?} */
    MatrixParticipantExpression.prototype.dataFieldAlias;
}
BpmnModelHelper.RegisterElementType(new MatrixParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,