/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
export class VariableParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} varValue
     * @param {?=} name
     * @param {?=} varType
     */
    constructor(model, varValue, name, varType) {
        super(model);
        this.ClrTypeID = VariableParticipantExpression.Clr_Type_ID;
        this.VarValue = varValue;
        this.name = name;
        this.VarType = varType ? varType : 'Sys';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new VariableParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        BpmnModelHelper.SetAttributeValue(obj, "VarValue", this.VarValue);
        BpmnModelHelper.SetAttributeValue(obj, "VarType", this.VarType);
        BpmnModelHelper.SetAttributeValue(obj, "Relation", this.Relation);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Name = obj.Name;
        this.Tag = obj.Tag;
        this.VarValue = obj.VarValue;
        this.VarType = obj.VarType;
        this.Relation = obj.Relation;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const variableParticipant = new VariableParticipantExpression(this.Model);
        variableParticipant.id = BpmnModelHelper.GenerateElementId();
        variableParticipant.Name = this.Name;
        variableParticipant.Tag = this.Tag;
        variableParticipant.VarType = this.VarType;
        variableParticipant.VarValue = this.VarValue;
        variableParticipant.Relation = this.Relation;
        return variableParticipant;
    }
}
VariableParticipantExpression.Clr_Type_ID = "wf.VariableParticipantExpression";
VariableParticipantExpression.CLR_TYPE_NAME = '变量参与者';
if (false) {
    /** @type {?} */
    VariableParticipantExpression.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    VariableParticipantExpression.CLR_TYPE_NAME;
    /** @type {?} */
    VariableParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    VariableParticipantExpression.prototype.VarValue;
    /** @type {?} */
    VariableParticipantExpression.prototype.VarType;
    /** @type {?} */
    VariableParticipantExpression.prototype.Relation;
    /** @type {?} */
    VariableParticipantExpression.prototype.Tag;
    /** @type {?} */
    VariableParticipantExpression.prototype.Name;
}
BpmnModelHelper.RegisterElementType(new VariableParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFyaWFibGVQYXJ0aWNpcGFudEV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvcGFydGljaXBhbnRzL1ZhcmlhYmxlUGFydGljaXBhbnRFeHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWhFLE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxxQkFBcUI7Ozs7Ozs7SUFDcEUsWUFBWSxLQUFnQixFQUFFLFFBQWlCLEVBQUUsSUFBYSxFQUFFLE9BQWdCO1FBQzVFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVNqQixjQUFTLEdBQVcsNkJBQTZCLENBQUMsV0FBVyxDQUFDO1FBUjFELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM3QyxDQUFDOzs7O0lBWUQsV0FBVztRQUNQLE9BQU8sSUFBSSw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDakMsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssbUJBQW1CLEdBQUcsSUFBSSw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pFLG1CQUFtQixDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUM3RCxtQkFBbUIsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNyQyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNuQyxtQkFBbUIsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUMzQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7O0FBM0NNLHlDQUFXLEdBQVcsa0NBQWtDLENBQUM7QUFDakQsMkNBQWEsR0FBRyxPQUFPLENBQUM7OztJQUR2QywwQ0FBZ0U7Ozs7O0lBQ2hFLDRDQUF1Qzs7SUFFdkMsa0RBQThEOztJQUM5RCxpREFBaUI7O0lBQ2pCLGdEQUFnQjs7SUFDaEIsaURBQWlCOztJQUNqQiw0Q0FBWTs7SUFDWiw2Q0FBYTs7QUFxQ2pCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLDZCQUE2QixDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9QYXJ0aWNpcGFudEV4cHJlc3Npb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWYXJpYWJsZVBhcnRpY2lwYW50RXhwcmVzc2lvbiBleHRlbmRzIFBhcnRpY2lwYW50RXhwcmVzc2lvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsLCB2YXJWYWx1ZT86IHN0cmluZywgbmFtZT86IHN0cmluZywgdmFyVHlwZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgICAgICB0aGlzLlZhclZhbHVlID0gdmFyVmFsdWU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLlZhclR5cGUgPSB2YXJUeXBlID8gdmFyVHlwZSA6ICdTeXMnO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5WYXJpYWJsZVBhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRSA9ICflj5jph4/lj4LkuI7ogIUnO1xyXG5cclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gVmFyaWFibGVQYXJ0aWNpcGFudEV4cHJlc3Npb24uQ2xyX1R5cGVfSUQ7XHJcbiAgICBWYXJWYWx1ZTogc3RyaW5nO1xyXG4gICAgVmFyVHlwZTogc3RyaW5nO1xyXG4gICAgUmVsYXRpb246IHN0cmluZztcclxuICAgIFRhZzogc3RyaW5nO1xyXG4gICAgTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFZhcmlhYmxlUGFydGljaXBhbnRFeHByZXNzaW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhcmlhYmxlUGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmFtZVwiLCB0aGlzLk5hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVGFnXCIsIHRoaXMuVGFnKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhclZhbHVlXCIsIHRoaXMuVmFyVmFsdWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVmFyVHlwZVwiLCB0aGlzLlZhclR5cGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiUmVsYXRpb25cIiwgdGhpcy5SZWxhdGlvbik7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KTogYW55IHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLk5hbWUgPSBvYmouTmFtZTtcclxuICAgICAgICB0aGlzLlRhZyA9IG9iai5UYWc7XHJcbiAgICAgICAgdGhpcy5WYXJWYWx1ZSA9IG9iai5WYXJWYWx1ZTtcclxuICAgICAgICB0aGlzLlZhclR5cGUgPSBvYmouVmFyVHlwZTtcclxuICAgICAgICB0aGlzLlJlbGF0aW9uID0gb2JqLlJlbGF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IFZhcmlhYmxlUGFydGljaXBhbnRFeHByZXNzaW9uIHtcclxuICAgICAgICBjb25zdCB2YXJpYWJsZVBhcnRpY2lwYW50ID0gbmV3IFZhcmlhYmxlUGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHZhcmlhYmxlUGFydGljaXBhbnQuaWQgPSBCcG1uTW9kZWxIZWxwZXIuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICB2YXJpYWJsZVBhcnRpY2lwYW50Lk5hbWUgPSB0aGlzLk5hbWU7XHJcbiAgICAgICAgdmFyaWFibGVQYXJ0aWNpcGFudC5UYWcgPSB0aGlzLlRhZztcclxuICAgICAgICB2YXJpYWJsZVBhcnRpY2lwYW50LlZhclR5cGUgPSB0aGlzLlZhclR5cGU7XHJcbiAgICAgICAgdmFyaWFibGVQYXJ0aWNpcGFudC5WYXJWYWx1ZSA9IHRoaXMuVmFyVmFsdWU7XHJcbiAgICAgICAgdmFyaWFibGVQYXJ0aWNpcGFudC5SZWxhdGlvbiA9IHRoaXMuUmVsYXRpb247XHJcbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlUGFydGljaXBhbnQ7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFZhcmlhYmxlUGFydGljaXBhbnRFeHByZXNzaW9uKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==