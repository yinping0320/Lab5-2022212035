/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Participant } from "./Participant";
export class MatrixParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} MatrixDefId
     * @param {?=} MatrixDefName
     * @param {?=} ConditionField1
     * @param {?=} ConditionFieldText1
     * @param {?=} ConditionField2
     * @param {?=} ConditionFieldText2
     * @param {?=} ConditionField3
     * @param {?=} ConditionFieldText3
     * @param {?=} DataFieldAlias
     */
    constructor(model, MatrixDefId, MatrixDefName, ConditionField1, ConditionFieldText1, ConditionField2, ConditionFieldText2, ConditionField3, ConditionFieldText3, DataFieldAlias) {
        super(model);
        this.ClrTypeID = MatrixParticipant.Clr_Type_ID;
        this.MatrixDefId = MatrixDefId;
        this.MatrixDefName = MatrixDefName;
        this.ConditionField1 = ConditionField1;
        this.ConditionFieldText1 = ConditionFieldText1;
        this.ConditionField2 = ConditionField2;
        this.ConditionFieldText2 = ConditionFieldText2;
        this.ConditionField3 = ConditionField3;
        this.ConditionFieldText3 = ConditionFieldText3;
        this.DataFieldAlias = DataFieldAlias;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefId", this.MatrixDefId);
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefName", this.MatrixDefName);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField1", this.ConditionField1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText1", this.ConditionFieldText1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField2", this.ConditionField2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText2", this.ConditionFieldText2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField3", this.ConditionField3);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText3", this.ConditionFieldText3);
        BpmnModelHelper.SetAttributeValue(obj, "DataFieldAlias", this.DataFieldAlias);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.MatrixDefId = obj.MatrixDefId;
        this.MatrixDefName = obj.MatrixDefName;
        this.ConditionField1 = obj.ConditionField1;
        this.ConditionFieldText1 = obj.ConditionFieldText1;
        this.ConditionField2 = obj.ConditionField2;
        this.ConditionFieldText2 = obj.ConditionFieldText2;
        this.ConditionField3 = obj.ConditionField3;
        this.ConditionFieldText3 = obj.ConditionFieldText3;
        this.DataFieldAlias = obj.DataFieldAlias;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MatrixParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const matrixParticipant = new MatrixParticipant(this.Model);
        matrixParticipant.Id = BpmnModelHelper.GenerateElementId();
        matrixParticipant.Name = this.Name;
        matrixParticipant.MatrixDefId = this.MatrixDefId;
        matrixParticipant.MatrixDefName = this.MatrixDefName;
        matrixParticipant.ConditionField1 = this.ConditionField1;
        matrixParticipant.ConditionFieldText1 = this.ConditionFieldText1;
        matrixParticipant.ConditionField2 = this.ConditionField2;
        matrixParticipant.ConditionFieldText2 = this.ConditionFieldText2;
        matrixParticipant.ConditionField3 = this.ConditionField3;
        matrixParticipant.ConditionFieldText3 = this.ConditionFieldText3;
        matrixParticipant.DataFieldAlias = this.DataFieldAlias;
        if (this.Condition) {
            matrixParticipant.Condition = this.Condition.clone();
        }
        return matrixParticipant;
    }
}
MatrixParticipant.Clr_Type_ID = 'wf.MatrixParticipant';
MatrixParticipant.CLR_TYPE_NAME = '矩阵';
if (false) {
    /** @type {?} */
    MatrixParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    MatrixParticipant.CLR_TYPE_NAME;
    /** @type {?} */
    MatrixParticipant.prototype.ClrTypeID;
    /** @type {?} */
    MatrixParticipant.prototype.MatrixDefId;
    /** @type {?} */
    MatrixParticipant.prototype.MatrixDefName;
    /** @type {?} */
    MatrixParticipant.prototype.ConditionField1;
    /** @type {?} */
    MatrixParticipant.prototype.ConditionFieldText1;
    /** @type {?} */
    MatrixParticipant.prototype.ConditionField2;
    /** @type {?} */
    MatrixParticipant.prototype.ConditionFieldText2;
    /** @type {?} */
    MatrixParticipant.prototype.ConditionField3;
    /** @type {?} */
    MatrixParticipant.prototype.ConditionFieldText3;
    /** @type {?} */
    MatrixParticipant.prototype.DataFieldAlias;
}
BpmnModelHelper.RegisterElementType(new MatrixParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,