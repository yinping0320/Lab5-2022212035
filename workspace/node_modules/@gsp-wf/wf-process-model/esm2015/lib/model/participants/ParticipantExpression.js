/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActionScope } from "../ActionScope";
import { Condition } from "../extension";
/**
 * @abstract
 */
export class ParticipantExpression extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.actionScope = ActionScope.Default;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "ActionScope", this.actionScope ? this.actionScope : ActionScope.Default);
        ExtensionMethod.SetAttributeValue(obj, "Id", this.id);
        ExtensionMethod.SetAttributeValue(obj, "Name", this.name);
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        if (this.condition) {
            ExtensionMethod.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.actionScope = (/** @type {?} */ ((ExtensionMethod.GetAttributeValue4String(obj, "ActionScope") ? ExtensionMethod.GetAttributeValue4String(obj, "ActionScope") : ActionScope.Default)));
        this.id = ExtensionMethod.GetAttributeValue4String(obj, "Id");
        this.name = ExtensionMethod.GetAttributeValue4String(obj, "Name");
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
        if (obj.Condition) {
            /** @type {?} */
            let condition = new Condition(this.Model);
            condition.LoadFromJsonObject(obj.Condition);
            this.condition = condition;
        }
    }
}
if (false) {
    /** @type {?} */
    ParticipantExpression.prototype.id;
    /** @type {?} */
    ParticipantExpression.prototype.name;
    /** @type {?} */
    ParticipantExpression.prototype.actionScope;
    /** @type {?} */
    ParticipantExpression.prototype.condition;
    /** @type {?} */
    ParticipantExpression.prototype.order;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcnRpY2lwYW50cy9QYXJ0aWNpcGFudEV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7OztBQUV6QyxNQUFNLE9BQWdCLHFCQUFzQixTQUFRLGdCQUFnQjs7OztJQU9oRSxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUxqQixnQkFBVyxHQUFnQixXQUFXLENBQUMsT0FBTyxDQUFDO0lBTS9DLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakgsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxXQUFXLEdBQUcsbUJBQUEsQ0FBQyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQWUsQ0FBQztRQUN0TCxJQUFJLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRSxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7O2dCQUNYLFNBQVMsR0FBYyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3BELFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDOUI7SUFDTCxDQUFDO0NBQ0o7OztJQXBDRyxtQ0FBVzs7SUFDWCxxQ0FBYTs7SUFDYiw0Q0FBK0M7O0lBQy9DLDBDQUFxQjs7SUFDckIsc0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEV4dGVuc2lvbkVsZW1lbnQsIEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IEFjdGlvblNjb3BlIH0gZnJvbSBcIi4uL0FjdGlvblNjb3BlXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvbiB9IGZyb20gXCIuLi9leHRlbnNpb25cIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXJ0aWNpcGFudEV4cHJlc3Npb24gZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBhY3Rpb25TY29wZTogQWN0aW9uU2NvcGUgPSBBY3Rpb25TY29wZS5EZWZhdWx0O1xyXG4gICAgY29uZGl0aW9uOiBDb25kaXRpb247XHJcbiAgICBvcmRlcjogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aW9uU2NvcGVcIiwgdGhpcy5hY3Rpb25TY29wZSA/IHRoaXMuYWN0aW9uU2NvcGUgOiBBY3Rpb25TY29wZS5EZWZhdWx0KTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIklkXCIsIHRoaXMuaWQpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmFtZVwiLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiT3JkZXJcIiwgdGhpcy5vcmRlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29uZGl0aW9uXCIsIHRoaXMuY29uZGl0aW9uLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuYWN0aW9uU2NvcGUgPSAoRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiQWN0aW9uU2NvcGVcIikgPyBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJBY3Rpb25TY29wZVwiKSA6IEFjdGlvblNjb3BlLkRlZmF1bHQpIGFzIEFjdGlvblNjb3BlO1xyXG4gICAgICAgIHRoaXMuaWQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJJZFwiKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJOYW1lXCIpO1xyXG4gICAgICAgIHRoaXMub3JkZXIgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0SW50NjQob2JqLCBcIk9yZGVyXCIpO1xyXG4gICAgICAgIGlmIChvYmouQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25kaXRpb246IENvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbi5Mb2FkRnJvbUpzb25PYmplY3Qob2JqLkNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==