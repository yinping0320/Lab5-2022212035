/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Participant } from "./Participant";
export class ActivityExecutorParticipant extends Participant {
    /**
     * @param {?} model
     * @param {?=} ActivityDefId
     * @param {?=} ActivityDefName
     */
    constructor(model, ActivityDefId, ActivityDefName) {
        super(model);
        this.ClrTypeID = ActivityExecutorParticipant.Clr_Type_ID;
        this.ActivityDefId = ActivityDefId;
        this.ActivityDefName = ActivityDefName;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefId", this.ActivityDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefName", this.ActivityDefName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ActivityDefId = obj.ActivityDefId;
        this.ActivityDefName = obj.ActivityDefName;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ActivityExecutorParticipant(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const activityExecutorParticipant = new ActivityExecutorParticipant(this.Model);
        activityExecutorParticipant.Id = BpmnModelHelper.GenerateElementId();
        activityExecutorParticipant.ActivityDefId = this.ActivityDefId;
        activityExecutorParticipant.ActivityDefName = this.ActivityDefName;
        if (this.Condition) {
            activityExecutorParticipant.Condition = this.Condition.clone();
        }
        return activityExecutorParticipant;
    }
}
ActivityExecutorParticipant.Clr_Type_ID = 'wf.ActivityExecutorParticipant';
ActivityExecutorParticipant.CLR_TYPE_NAME = '活动办理人';
if (false) {
    /** @type {?} */
    ActivityExecutorParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorParticipant.CLR_TYPE_NAME;
    /** @type {?} */
    ActivityExecutorParticipant.prototype.ClrTypeID;
    /** @type {?} */
    ActivityExecutorParticipant.prototype.ActivityDefId;
    /** @type {?} */
    ActivityExecutorParticipant.prototype.ActivityDefName;
}
BpmnModelHelper.RegisterElementType(new ActivityExecutorParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcnRpY2lwYW50cy9vbGQvQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUMsTUFBTSxPQUFPLDJCQUE0QixTQUFRLFdBQVc7Ozs7OztJQVV4RCxZQUNJLEtBQWdCLEVBQ2hCLGFBQXNCLEVBQ3RCLGVBQXdCO1FBRXhCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVpqQixjQUFTLEdBQVcsMkJBQTJCLENBQUMsV0FBVyxDQUFDO1FBYXhELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFaEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUN2QyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDL0MsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFFRCxLQUFLOztjQUNLLDJCQUEyQixHQUFHLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvRSwyQkFBMkIsQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckUsMkJBQTJCLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDL0QsMkJBQTJCLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFFbkUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLDJCQUEyQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2xFO1FBRUQsT0FBTywyQkFBMkIsQ0FBQztJQUN2QyxDQUFDOztBQWpETSx1Q0FBVyxHQUFXLGdDQUFnQyxDQUFDO0FBRy9DLHlDQUFhLEdBQVcsT0FBTyxDQUFDOzs7SUFIL0Msd0NBQThEOzs7OztJQUc5RCwwQ0FBK0M7O0lBRi9DLGdEQUE0RDs7SUFJNUQsb0RBQXNCOztJQUN0QixzREFBd0I7O0FBNkM1QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgUGFydGljaXBhbnQgfSBmcm9tIFwiLi9QYXJ0aWNpcGFudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudCBleHRlbmRzIFBhcnRpY2lwYW50IHtcclxuXHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9ICd3Zi5BY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQnO1xyXG4gICAgQ2xyVHlwZUlEOiBzdHJpbmcgPSBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQuQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRTogc3RyaW5nID0gJ+a0u+WKqOWKnueQhuS6uic7XHJcblxyXG4gICAgQWN0aXZpdHlEZWZJZDogc3RyaW5nO1xyXG4gICAgQWN0aXZpdHlEZWZOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgbW9kZWw6IEJwbW5Nb2RlbCxcclxuICAgICAgICBBY3Rpdml0eURlZklkPzogc3RyaW5nLFxyXG4gICAgICAgIEFjdGl2aXR5RGVmTmFtZT86IHN0cmluZ1xyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuQWN0aXZpdHlEZWZJZCA9IEFjdGl2aXR5RGVmSWQ7XHJcbiAgICAgICAgdGhpcy5BY3Rpdml0eURlZk5hbWUgPSBBY3Rpdml0eURlZk5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aXZpdHlEZWZJZFwiLCB0aGlzLkFjdGl2aXR5RGVmSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aXZpdHlEZWZOYW1lXCIsIHRoaXMuQWN0aXZpdHlEZWZOYW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5BY3Rpdml0eURlZklkID0gb2JqLkFjdGl2aXR5RGVmSWQ7XHJcbiAgICAgICAgdGhpcy5BY3Rpdml0eURlZk5hbWUgPSBvYmouQWN0aXZpdHlEZWZOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50IHtcclxuICAgICAgICBjb25zdCBhY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnQgPSBuZXcgQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50KHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5JZCA9IEJwbW5Nb2RlbEhlbHBlci5HZW5lcmF0ZUVsZW1lbnRJZCgpO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5BY3Rpdml0eURlZklkID0gdGhpcy5BY3Rpdml0eURlZklkO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5BY3Rpdml0eURlZk5hbWUgPSB0aGlzLkFjdGl2aXR5RGVmTmFtZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5Db25kaXRpb24gPSB0aGlzLkNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudDtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50KG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4iXX0=