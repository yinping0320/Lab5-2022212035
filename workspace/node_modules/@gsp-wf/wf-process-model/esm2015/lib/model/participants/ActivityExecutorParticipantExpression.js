/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
export class ActivityExecutorParticipantExpression extends ParticipantExpression {
    /**
     * @param {?} model
     * @param {?=} activityDefId
     * @param {?=} activityDefName
     */
    constructor(model, activityDefId, activityDefName) {
        super(model);
        this.ClrTypeID = ActivityExecutorParticipantExpression.Clr_Type_ID;
        this.activityDefId = activityDefId;
        this.activityDefName = activityDefName;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefId", this.activityDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefName", this.activityDefName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.activityDefId = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefId");
        this.activityDefName = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefName");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ActivityExecutorParticipantExpression(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const activityExecutorParticipant = new ActivityExecutorParticipantExpression(this.Model);
        activityExecutorParticipant.id = BpmnModelHelper.GenerateElementId();
        activityExecutorParticipant.name = this.name;
        activityExecutorParticipant.activityDefId = this.activityDefId;
        activityExecutorParticipant.activityDefName = this.activityDefName;
        // if (this.Condition) {
        //     activityExecutorParticipant.Condition = this.Condition.clone();
        // }
        return activityExecutorParticipant;
    }
}
ActivityExecutorParticipantExpression.Clr_Type_ID = 'wf.ActivityExecutorParticipantExpression';
if (false) {
    /** @type {?} */
    ActivityExecutorParticipantExpression.Clr_Type_ID;
    /** @type {?} */
    ActivityExecutorParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    ActivityExecutorParticipantExpression.prototype.activityDefId;
    /** @type {?} */
    ActivityExecutorParticipantExpression.prototype.activityDefName;
}
BpmnModelHelper.RegisterElementType(new ActivityExecutorParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9wYXJ0aWNpcGFudHMvQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEUsTUFBTSxPQUFPLHFDQUFzQyxTQUFRLHFCQUFxQjs7Ozs7O0lBUzVFLFlBQVksS0FBZ0IsRUFDeEIsYUFBc0IsRUFDdEIsZUFBd0I7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBVmpCLGNBQVMsR0FBVyxxQ0FBcUMsQ0FBQyxXQUFXLENBQUM7UUFXbEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVoRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVGLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSywyQkFBMkIsR0FBRyxJQUFJLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekYsMkJBQTJCLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3JFLDJCQUEyQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzdDLDJCQUEyQixDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQy9ELDJCQUEyQixDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBRW5FLHdCQUF3QjtRQUN4QixzRUFBc0U7UUFDdEUsSUFBSTtRQUVKLE9BQU8sMkJBQTJCLENBQUM7SUFDdkMsQ0FBQzs7QUFoRE0saURBQVcsR0FBVywwQ0FBMEMsQ0FBQzs7O0lBQXhFLGtEQUF3RTs7SUFDeEUsMERBQXNFOztJQUl0RSw4REFBc0I7O0lBQ3RCLGdFQUF3Qjs7QUE0QzVCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLHFDQUFxQyxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IFBhcnRpY2lwYW50RXhwcmVzc2lvbiB9IGZyb20gXCIuL1BhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24gZXh0ZW5kcyBQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSAnd2YuQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbic7XHJcbiAgICBDbHJUeXBlSUQ6IHN0cmluZyA9IEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24uQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRTogc3RyaW5nID0gJ+a0u+WKqOWKnueQhuS6uic7XHJcblxyXG4gICAgYWN0aXZpdHlEZWZJZDogc3RyaW5nO1xyXG4gICAgYWN0aXZpdHlEZWZOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCxcclxuICAgICAgICBhY3Rpdml0eURlZklkPzogc3RyaW5nLFxyXG4gICAgICAgIGFjdGl2aXR5RGVmTmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgICAgICB0aGlzLmFjdGl2aXR5RGVmSWQgPSBhY3Rpdml0eURlZklkO1xyXG4gICAgICAgIHRoaXMuYWN0aXZpdHlEZWZOYW1lID0gYWN0aXZpdHlEZWZOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aXZpdHlEZWZJZFwiLCB0aGlzLmFjdGl2aXR5RGVmSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aXZpdHlEZWZOYW1lXCIsIHRoaXMuYWN0aXZpdHlEZWZOYW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eURlZklkID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiQWN0aXZpdHlEZWZJZFwiKTtcclxuICAgICAgICB0aGlzLmFjdGl2aXR5RGVmTmFtZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkFjdGl2aXR5RGVmTmFtZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbiB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50ID0gbmV3IEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LmlkID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50Lm5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LmFjdGl2aXR5RGVmSWQgPSB0aGlzLmFjdGl2aXR5RGVmSWQ7XHJcbiAgICAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LmFjdGl2aXR5RGVmTmFtZSA9IHRoaXMuYWN0aXZpdHlEZWZOYW1lO1xyXG5cclxuICAgICAgICAvLyBpZiAodGhpcy5Db25kaXRpb24pIHtcclxuICAgICAgICAvLyAgICAgYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50LkNvbmRpdGlvbiA9IHRoaXMuQ29uZGl0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICByZXR1cm4gYWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50O1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==