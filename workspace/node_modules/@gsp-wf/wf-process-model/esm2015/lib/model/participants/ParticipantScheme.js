/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
import { Condition } from "../extension/condition-expression/Condition";
export class ParticipantScheme extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ParticipantScheme.Clr_Type_ID;
        this.MexTag = 'participantScheme';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ParticipantScheme(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Performers", this.Performers);
        if (this.Condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.Condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.Performers = obj.Performers;
        /** @type {?} */
        const conditionElement = obj.Condition;
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.Condition = condition;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Id = '';
        this.Name = '';
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const participantScheme = new ParticipantScheme(this.Model);
        participantScheme.Id = this.Id;
        participantScheme.Name = this.Name;
        participantScheme.Performers = this.Performers;
        if (this.Condition) {
            participantScheme.Condition = this.Condition.clone();
        }
        return participantScheme;
    }
}
ParticipantScheme.Clr_Type_ID = "wf.ParticipantScheme";
if (false) {
    /** @type {?} */
    ParticipantScheme.Clr_Type_ID;
    /** @type {?} */
    ParticipantScheme.prototype.ClrTypeID;
    /** @type {?} */
    ParticipantScheme.prototype.MexTag;
    /** @type {?} */
    ParticipantScheme.prototype.Id;
    /** @type {?} */
    ParticipantScheme.prototype.Name;
    /** @type {?} */
    ParticipantScheme.prototype.Performers;
    /** @type {?} */
    ParticipantScheme.prototype.Condition;
}
BpmnModelHelper.RegisterElementType(new ParticipantScheme(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRTY2hlbWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvcGFydGljaXBhbnRzL1BhcnRpY2lwYW50U2NoZW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBb0MsTUFBTSxxQkFBcUIsQ0FBQztBQUNySCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFeEUsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGdCQUFnQjs7OztJQUNuRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUdSLGNBQVMsR0FBVyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7UUFDM0QsV0FBTSxHQUFXLG1CQUFtQixDQUFDO0lBSHJDLENBQUM7Ozs7SUFXRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDOztjQUMzQixnQkFBZ0IsR0FBRyxHQUFHLENBQUMsU0FBUztRQUN0QyxJQUFJLGdCQUFnQixFQUFFOztrQkFDWixTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM5QjtJQUNMLENBQUM7Ozs7O0lBRVMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNELGlCQUFpQixDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQy9CLGlCQUFpQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25DLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRS9DLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN4RDtRQUNELE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQzs7QUF0RE0sNkJBQVcsR0FBVyxzQkFBc0IsQ0FBQzs7O0lBQXBELDhCQUFvRDs7SUFDcEQsc0NBQTJEOztJQUMzRCxtQ0FBcUM7O0lBRXJDLCtCQUFXOztJQUNYLGlDQUFhOztJQUNiLHVDQUFtQjs7SUFDbkIsc0NBQXFCOztBQW1EekIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksaUJBQWlCLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciwgRXh0ZW5zaW9uRWxlbWVudCwgSUNsclR5cGVFbGVtZW50LCBJSGFzTmFtZUVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBDb25kaXRpb24gfSBmcm9tIFwiLi4vZXh0ZW5zaW9uL2NvbmRpdGlvbi1leHByZXNzaW9uL0NvbmRpdGlvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnRpY2lwYW50U2NoZW1lIGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudCBpbXBsZW1lbnRzIElDbHJUeXBlRWxlbWVudCwgSUhhc05hbWVFbGVtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuUGFydGljaXBhbnRTY2hlbWVcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gUGFydGljaXBhbnRTY2hlbWUuQ2xyX1R5cGVfSUQ7XHJcbiAgICBNZXhUYWc6IHN0cmluZyA9ICdwYXJ0aWNpcGFudFNjaGVtZSc7XHJcblxyXG4gICAgSWQ6IHN0cmluZztcclxuICAgIE5hbWU6IHN0cmluZztcclxuICAgIFBlcmZvcm1lcnM6IHN0cmluZztcclxuICAgIENvbmRpdGlvbjogQ29uZGl0aW9uO1xyXG5cclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBQYXJ0aWNpcGFudFNjaGVtZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJ0aWNpcGFudFNjaGVtZSh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIklkXCIsIHRoaXMuSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmFtZVwiLCB0aGlzLk5hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiUGVyZm9ybWVyc1wiLCB0aGlzLlBlcmZvcm1lcnMpO1xyXG4gICAgICAgIGlmICh0aGlzLkNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvbmRpdGlvblwiLCB0aGlzLkNvbmRpdGlvbi5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSk6IGFueSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5JZCA9IG9iai5JZDtcclxuICAgICAgICB0aGlzLk5hbWUgPSBvYmouTmFtZTtcclxuICAgICAgICB0aGlzLlBlcmZvcm1lcnMgPSBvYmouUGVyZm9ybWVycztcclxuICAgICAgICBjb25zdCBjb25kaXRpb25FbGVtZW50ID0gb2JqLkNvbmRpdGlvblxyXG4gICAgICAgIGlmIChjb25kaXRpb25FbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbi5Mb2FkRnJvbUpzb25PYmplY3QoY29uZGl0aW9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuQ29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICAgICAgdGhpcy5JZCA9ICcnO1xyXG4gICAgICAgIHRoaXMuTmFtZSA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IFBhcnRpY2lwYW50U2NoZW1lIHtcclxuICAgICAgICBjb25zdCBwYXJ0aWNpcGFudFNjaGVtZSA9IG5ldyBQYXJ0aWNpcGFudFNjaGVtZSh0aGlzLk1vZGVsKTtcclxuICAgICAgICBwYXJ0aWNpcGFudFNjaGVtZS5JZCA9IHRoaXMuSWQ7XHJcbiAgICAgICAgcGFydGljaXBhbnRTY2hlbWUuTmFtZSA9IHRoaXMuTmFtZTtcclxuICAgICAgICBwYXJ0aWNpcGFudFNjaGVtZS5QZXJmb3JtZXJzID0gdGhpcy5QZXJmb3JtZXJzO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Db25kaXRpb24pIHtcclxuICAgICAgICAgICAgcGFydGljaXBhbnRTY2hlbWUuQ29uZGl0aW9uID0gdGhpcy5Db25kaXRpb24uY2xvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcnRpY2lwYW50U2NoZW1lO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFBhcnRpY2lwYW50U2NoZW1lKG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4iXX0=