/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, HumanPerformer, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { Condition } from "./extension/condition-expression/Condition";
import { ActivityExecutorParticipantExpression } from "./participants/ActivityExecutorParticipantExpression";
import { ComponentParticipantExpression } from "./participants/ComponentParticipantExpression";
import { MatrixParticipantExpression } from "./participants/MatrixParticipantExpression";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { PositionParticipantExpression } from "./participants/PositionParticipantExpression";
import { ReportingLineParticipantExpression } from "./participants/ReportingLineParticipantExpression";
import { UserParticipantExpression } from "./participants/UserParticipantExpression";
import { VariableParticipantExpression } from "./participants/VariableParticipantExpression";
export class HumanPerformerImpl extends HumanPerformer {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = HumanPerformerImpl.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.participantExpression != null) {
            list.push(this.participantExpression);
        }
        if (this.condition != null) {
            list.push(this.condition);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            switch (extensionElement.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    this.participantExpression = ((/** @type {?} */ (extensionElement)));
                    break;
                case Condition.Clr_Type_ID:
                    this.condition = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const humanPerformerImpl = new HumanPerformerImpl(this.Model);
        if (this.participantExpression) {
            switch (this.participantExpression.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
            }
        }
        if (this.condition) {
            humanPerformerImpl.condition = this.condition.clone();
        }
        humanPerformerImpl.order = this.order;
        return humanPerformerImpl;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new HumanPerformerImpl(this.Model);
    }
}
HumanPerformerImpl.Clr_Type_ID = "wf.HumanPerformerImpl";
if (false) {
    /** @type {?} */
    HumanPerformerImpl.Clr_Type_ID;
    /** @type {?} */
    HumanPerformerImpl.prototype.ClrTypeID;
    /** @type {?} */
    HumanPerformerImpl.prototype.participantExpression;
    /** @type {?} */
    HumanPerformerImpl.prototype.condition;
    /** @type {?} */
    HumanPerformerImpl.prototype.order;
}
BpmnModelHelper.RegisterElementType(new HumanPerformerImpl(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,