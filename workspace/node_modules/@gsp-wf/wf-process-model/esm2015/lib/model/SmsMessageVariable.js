/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
export class SmsMessageVariable extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SmsMessageVariable.Clr_Type_ID;
        this.tag = 'expression';
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Code", this.code);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.code = ExtensionMethod.GetAttributeValue4String(obj, "Code");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SmsMessageVariable(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const smsMessageVariable = new SmsMessageVariable(this.Model);
        smsMessageVariable.code = this.code;
        smsMessageVariable.value = this.value;
        smsMessageVariable.tag = this.tag;
        return smsMessageVariable;
    }
}
SmsMessageVariable.Clr_Type_ID = "wf.SmsMessageVariable";
if (false) {
    /** @type {?} */
    SmsMessageVariable.Clr_Type_ID;
    /** @type {?} */
    SmsMessageVariable.prototype.ClrTypeID;
    /** @type {?} */
    SmsMessageVariable.prototype.code;
    /** @type {?} */
    SmsMessageVariable.prototype.value;
    /** @type {?} */
    SmsMessageVariable.prototype.tag;
}
BpmnModelHelper.RegisterElementType(new SmsMessageVariable(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU21zTWVzc2FnZVZhcmlhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL1Ntc01lc3NhZ2VWYXJpYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRILE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxnQkFBZ0I7Ozs7SUFRcEQsWUFBWSxLQUFnQjtRQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFQUixjQUFTLEdBQVcsa0JBQWtCLENBQUMsV0FBVyxDQUFDO1FBSTVELFFBQUcsR0FBRyxZQUFZLENBQUM7SUFJbkIsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxHQUFRO1FBQ3ZCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxHQUFHLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVwRSxDQUFDOzs7O0lBR0QsV0FBVztRQUNQLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdELGtCQUFrQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RDLGtCQUFrQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBRWxDLE9BQU8sa0JBQWtCLENBQUM7SUFDOUIsQ0FBQzs7QUE3Q00sOEJBQVcsR0FBVyx1QkFBdUIsQ0FBQzs7O0lBQXJELCtCQUFxRDs7SUFDckQsdUNBQTREOztJQUU1RCxrQ0FBYTs7SUFDYixtQ0FBYTs7SUFDYixpQ0FBbUI7O0FBMkN2QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsRWxlbWVudCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNtc01lc3NhZ2VWYXJpYWJsZSBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLlNtc01lc3NhZ2VWYXJpYWJsZVwiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBTbXNNZXNzYWdlVmFyaWFibGUuQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgY29kZTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZ1xyXG4gICAgdGFnID0gJ2V4cHJlc3Npb24nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvZGVcIiwgdGhpcy5jb2RlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhbHVlXCIsIHRoaXMudmFsdWUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVGFnXCIsIHRoaXMudGFnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLmNvZGUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJWYWx1ZVwiKTtcclxuICAgICAgICB0aGlzLnRhZyA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIlRhZ1wiKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFNtc01lc3NhZ2VWYXJpYWJsZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTbXNNZXNzYWdlVmFyaWFibGUodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogU21zTWVzc2FnZVZhcmlhYmxlIHtcclxuICAgICAgICBjb25zdCBzbXNNZXNzYWdlVmFyaWFibGUgPSBuZXcgU21zTWVzc2FnZVZhcmlhYmxlKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHNtc01lc3NhZ2VWYXJpYWJsZS5jb2RlID0gdGhpcy5jb2RlO1xyXG4gICAgICAgIHNtc01lc3NhZ2VWYXJpYWJsZS52YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgc21zTWVzc2FnZVZhcmlhYmxlLnRhZyA9IHRoaXMudGFnO1xyXG5cclxuICAgICAgICByZXR1cm4gc21zTWVzc2FnZVZhcmlhYmxlO1xyXG4gICAgfVxyXG5cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgU21zTWVzc2FnZVZhcmlhYmxlKG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4iXX0=