/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, BpmnModelJsonHelper, CallActivity, SubProcessDataAssociations, MultiInstanceLoopCharacteristics } from "@edp-pmf/bpmn-model";
import { BackWardRule } from "./extension/completion-strategy/BackWardRule";
import { VariableSetting } from "./VariableSetting";
export class CallActivitySubProcess extends CallActivity {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CallActivitySubProcess.Clr_Type_ID;
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
        this.SubProcessDataAssociations = new SubProcessDataAssociations(model);
        this.inheritVariables = true;
        this.inheritBizDataId = true;
        this.backWardRule = new BackWardRule(model);
        this.LoopCharacteristics = new MultiInstanceLoopCharacteristics(model);
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.SubProcessDataAssociations = new SubProcessDataAssociations(this.Model);
        this.inheritVariables = true;
        this.inheritBizDataId = true;
        this.variableSettings = new Array();
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'CalledBizDefKey', this.calledBizDefKey);
        BpmnModelHelper.SetAttributeValue(obj, 'BizDataId', this.bizDataId);
        BpmnModelHelper.SetAttributeValue(obj, 'InheritVariables', this.inheritVariables);
        BpmnModelHelper.SetAttributeValue(obj, 'InheritBizDataId', this.inheritBizDataId);
        BpmnModelHelper.SetAttributeValue(obj, 'aifProcessCode', this.aifProcessCode);
        BpmnModelHelper.SetAttributeValue(obj, 'useAutoCreationData', this.useAutoCreationData);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.calledBizDefKey = obj.CalledBizDefKey;
        this.bizDataId = obj.BizDataId;
        this.inheritVariables = obj.InheritVariables;
        this.inheritBizDataId = obj.InheritBizDataId;
        this.aifProcessCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifProcessCode");
        this.useAutoCreationData = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "useAutoCreationData");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.backWardRule != null) {
            this.backWardRule.MexTag = CallActivitySubProcess.MEXTAG;
            list.push(this.backWardRule);
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = CallActivitySubProcess.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== CallActivitySubProcess.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    ;
                    break;
                case BackWardRule.Clr_Type_ID:
                    this.backWardRule = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CallActivitySubProcess(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const callActivitySubProcess = new CallActivitySubProcess(this.Model);
        callActivitySubProcess.Name = this.Name;
        callActivitySubProcess.IsForCompensation = this.IsForCompensation;
        callActivitySubProcess.CalledElement = this.CalledElement;
        callActivitySubProcess.calledBizDefKey = this.calledBizDefKey;
        callActivitySubProcess.bizDataId = this.bizDataId;
        callActivitySubProcess.inheritBizDataId = this.inheritBizDataId;
        callActivitySubProcess.inheritVariables = this.inheritVariables;
        callActivitySubProcess.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                callActivitySubProcess.variableSettings.push(variableSetting);
            }
        }
        if (this.backWardRule) {
            callActivitySubProcess.backWardRule = this.backWardRule.clone();
        }
        if (this.LoopCharacteristics) {
            callActivitySubProcess.LoopCharacteristics = this.LoopCharacteristics.clone();
        }
        callActivitySubProcess.aifProcessCode = null;
        if (this.aifProcessCode) {
            callActivitySubProcess.aifProcessCode = this.aifProcessCode;
        }
        callActivitySubProcess.useAutoCreationData = this.useAutoCreationData;
        return callActivitySubProcess;
    }
}
CallActivitySubProcess.Clr_Type_ID = "wf.CallActivitySubProcess";
CallActivitySubProcess.MEXTAG = "wf.CallActivitySubProcess";
if (false) {
    /** @type {?} */
    CallActivitySubProcess.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess.MEXTAG;
    /** @type {?} */
    CallActivitySubProcess.prototype.ClrTypeID;
    /** @type {?} */
    CallActivitySubProcess.prototype.calledBizDefKey;
    /** @type {?} */
    CallActivitySubProcess.prototype.bizDataId;
    /** @type {?} */
    CallActivitySubProcess.prototype.inheritVariables;
    /** @type {?} */
    CallActivitySubProcess.prototype.inheritBizDataId;
    /** @type {?} */
    CallActivitySubProcess.prototype.backWardRule;
    /** @type {?} */
    CallActivitySubProcess.prototype.variableSettings;
    /** @type {?} */
    CallActivitySubProcess.prototype.aifProcessCode;
    /** @type {?} */
    CallActivitySubProcess.prototype.useAutoCreationData;
}
BpmnModelHelper.RegisterElementType(new CallActivitySubProcess(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,