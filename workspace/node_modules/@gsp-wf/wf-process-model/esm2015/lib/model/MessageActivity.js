/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ServiceTask } from "@edp-pmf/bpmn-model";
import { MessageNotice } from "./MessageNotice";
import { VariableSetting } from "./VariableSetting";
export class MessageActivity extends ServiceTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = MessageActivity.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.messageNotices = new Array();
        this.variableSettings = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.messageNotices != null) {
            for (const item of this.messageNotices) {
                item.MexTag = MessageActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = MessageActivity.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== MessageActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    ;
                    break;
                default:
                    if (extensionElement instanceof MessageNotice) {
                        this.messageNotices.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MessageActivity(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const messageActivity = new MessageActivity(this.Model);
        messageActivity.Name = this.Name;
        messageActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                messageActivity.variableSettings.push(variableSetting);
            }
        }
        messageActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                messageActivity.messageNotices.push(messageNotice);
            }
        }
        return messageActivity;
    }
}
MessageActivity.Clr_Type_ID = "wf.MessageActivity";
MessageActivity.MEXTAG = 'wf.MessageActivity';
if (false) {
    /** @type {?} */
    MessageActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    MessageActivity.MEXTAG;
    /** @type {?} */
    MessageActivity.prototype.ClrTypeID;
    /** @type {?} */
    MessageActivity.prototype.messageNotices;
    /** @type {?} */
    MessageActivity.prototype.variableSettings;
}
BpmnModelHelper.RegisterElementType(new MessageActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,