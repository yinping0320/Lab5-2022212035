/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ServiceTask } from "@edp-pmf/bpmn-model";
import { ExtendProperty } from "./ExtendProperty";
import { Component } from "./extension/tool/Component";
import { Tool } from "./extension/tool/Tool";
import { VariableSetting } from "./VariableSetting";
export class AutoActivity extends ServiceTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AutoActivity.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.tools = new Array();
        this.variableSettings = new Array();
        this.extendProperties = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.tools != null) {
            for (const item of this.tools) {
                item.MexTag = AutoActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = AutoActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.extendProperties != null && this.extendProperties.length > 0) {
            for (const item of this.extendProperties) {
                item.MexTag = AutoActivity.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== AutoActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    if (extensionElement instanceof Tool) {
                        this.tools.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AutoActivity(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const autoActivity = new AutoActivity(this.Model);
        autoActivity.Name = this.Name;
        autoActivity.tools = new Array();
        if (this.tools && this.tools.length > 0) {
            for (const t of this.tools) {
                if (t instanceof Component) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (t));
                    /** @type {?} */
                    const tool = c.clone();
                    autoActivity.tools.push(tool);
                }
            }
        }
        autoActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                autoActivity.variableSettings.push(variableSetting);
            }
        }
        autoActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                autoActivity.extendProperties.push(extendProperty);
            }
        }
        return autoActivity;
    }
}
AutoActivity.Clr_Type_ID = "wf.AutoActivity";
AutoActivity.MEXTAG = 'wf.AutoActivity';
if (false) {
    /** @type {?} */
    AutoActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    AutoActivity.MEXTAG;
    /** @type {?} */
    AutoActivity.prototype.ClrTypeID;
    /** @type {?} */
    AutoActivity.prototype.tools;
    /** @type {?} */
    AutoActivity.prototype.variableSettings;
    /** @type {?} */
    AutoActivity.prototype.extendProperties;
}
BpmnModelHelper.RegisterElementType(new AutoActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,