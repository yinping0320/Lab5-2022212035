/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionMethod, UserTask } from "@edp-pmf/bpmn-model";
import { ExtendProperty } from "./ExtendProperty";
import { ExecuteForm } from "./extension/ExecuteForm";
import { HumanPerformerImpl } from "./HumanPerformerImpl";
import { MessageNotice } from "./MessageNotice";
import { OrganizationPotentialOwner } from "./OrganizationPotentialOwner";
import { ActivityExecutorParticipant } from "./participants/old/ActivityExecutorParticipant";
import { ComponentParticipant } from "./participants/old/ComponentParticipant";
import { MatrixParticipant } from "./participants/old/MatrixParticipant";
import { Participant } from "./participants/old/Participant";
import { PositionParticipant } from "./participants/old/PositionParticipant";
import { ReportingLineParticipant } from "./participants/old/ReportingLineParticipant";
import { UserParticipant } from "./participants/old/UserParticipant";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { ParticipantExpression } from "./participants/ParticipantExpression";
import { PotentialOwnerImpl } from "./PotentialOwnerImpl";
export class NotifyActivity extends UserTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = NotifyActivity.Clr_Type_ID;
        this.dynamicParticipants = new Array();
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        let notifyActivity = new NotifyActivity(this.Model);
        notifyActivity.Name = this.Name;
        /** @type {?} */
        const resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            for (const role of resourceRoles) {
                if (role instanceof UserParticipant) {
                    /** @type {?} */
                    const user = (/** @type {?} */ (role));
                    /** @type {?} */
                    const userParticipant = user.clone();
                    notifyActivity.AddResourceRole(userParticipant);
                }
                else if (role instanceof PositionParticipant) {
                    /** @type {?} */
                    const position = (/** @type {?} */ (role));
                    /** @type {?} */
                    const positionParticipant = position.clone();
                    notifyActivity.AddResourceRole(positionParticipant);
                }
                else if (role instanceof ReportingLineParticipant) {
                    /** @type {?} */
                    const reportingLine = (/** @type {?} */ (role));
                    /** @type {?} */
                    const reportingLineParticipant = reportingLine.clone();
                    notifyActivity.AddResourceRole(reportingLineParticipant);
                }
                else if (role instanceof ActivityExecutorParticipant) {
                    /** @type {?} */
                    const activityExecutor = (/** @type {?} */ (role));
                    /** @type {?} */
                    const activityExecutorParticipant = activityExecutor.clone();
                    notifyActivity.AddResourceRole(activityExecutorParticipant);
                }
                else if (role instanceof ComponentParticipant) {
                    /** @type {?} */
                    const component = (/** @type {?} */ (role));
                    /** @type {?} */
                    const componentParticipant = component.clone();
                    notifyActivity.AddResourceRole(componentParticipant);
                }
                else if (role instanceof MatrixParticipant) {
                    /** @type {?} */
                    const matrix = (/** @type {?} */ (role));
                    /** @type {?} */
                    const matrixParticipant = matrix.clone();
                    notifyActivity.AddResourceRole(matrixParticipant);
                }
                else if (role instanceof OrganizationPotentialOwner) {
                    /** @type {?} */
                    const org = (/** @type {?} */ (role));
                    /** @type {?} */
                    const organizationPotentialOwner = org.clone();
                    notifyActivity.AddResourceRole(organizationPotentialOwner);
                }
                else if (role instanceof HumanPerformerImpl) {
                    /** @type {?} */
                    const performer = (/** @type {?} */ (role));
                    /** @type {?} */
                    const humanPerformerImpl = performer.clone();
                    notifyActivity.AddResourceRole(humanPerformerImpl);
                }
                else if (role instanceof PotentialOwnerImpl) {
                    /** @type {?} */
                    const owner = (/** @type {?} */ (role));
                    /** @type {?} */
                    const potentialOwnerImpl = owner.clone();
                    notifyActivity.AddResourceRole(potentialOwnerImpl);
                }
            }
        }
        notifyActivity.executeForms = new Array();
        if (this.executeForms && this.executeForms.length > 0) {
            for (const f of this.executeForms) {
                /** @type {?} */
                const executeForm = f.clone();
                notifyActivity.executeForms.push(executeForm);
            }
        }
        notifyActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                notifyActivity.extendProperties.push(extendProperty);
            }
        }
        notifyActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                notifyActivity.messageNotices.push(messageNotice);
            }
        }
        notifyActivity.notifyAble = this.notifyAble;
        notifyActivity.dynamicParticipants = new Array();
        if (this.dynamicParticipants && this.dynamicParticipants.length > 0) {
            for (const p of this.dynamicParticipants) {
                if (p instanceof OrganizationParticipantExpression) {
                    /** @type {?} */
                    const o = (/** @type {?} */ (p));
                    /** @type {?} */
                    const organizationParticipantExpression = o.clone();
                    notifyActivity.dynamicParticipants.push(organizationParticipantExpression);
                }
            }
        }
        return notifyActivity;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new NotifyActivity(this.Model);
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.participants = new Array();
        this.messageNotices = new Array();
        this.executeForms = new Array();
        this.extendProperties = new Array();
        this.notifyAble = false;
        this.dynamicParticipants = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        // this.beforeSerialize();
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "NotifyAble", this.notifyAble);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.notifyAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "NotifyAble");
        ;
        // this.afterDeserialize();
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.messageNotices != null) {
            for (let item of this.messageNotices) {
                item.MexTag = NotifyActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.executeForms != null) {
            for (let form of this.executeForms) {
                form.MexTag = NotifyActivity.MEXTAG;
                list.push(form);
            }
        }
        if (this.extendProperties != null) {
            for (let extendProperty of this.extendProperties) {
                extendProperty.MexTag = NotifyActivity.MEXTAG;
                list.push(extendProperty);
            }
        }
        if (this.dynamicParticipants != null) {
            for (let participant of this.dynamicParticipants) {
                participant.MexTag = NotifyActivity.MEXTAG;
                list.push(participant);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (NotifyActivity.MEXTAG != extensionElement.MexTag) {
                continue;
            }
            switch (extensionElement.ClrTypeID) {
                case MessageNotice.Clr_Type_ID:
                    this.messageNotices.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExecuteForm.Clr_Type_ID:
                    this.executeForms.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    if (extensionElement instanceof ParticipantExpression) {
                        this.dynamicParticipants.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    beforeSerialize() {
        /** @type {?} */
        let roles = this.GetResourceRoles();
        if (roles != null && roles.length != 0) {
            for (let role of roles) {
                super.RemoveResourceRole(role.Id);
            }
        }
        if (this.participants != null && this.participants.length != 0) {
            for (let participant of this.participants) {
                this.AddResourceRole(participant);
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    afterDeserialize() {
        /** @type {?} */
        let roles = this.GetResourceRoles();
        if (roles == null || roles.length == 0) {
            return;
        }
        for (let role of roles) {
            if (role instanceof Participant) {
                this.participants.push(role);
            }
        }
    }
}
NotifyActivity.Clr_Type_ID = "wf.NotifyActivity";
NotifyActivity.MEXTAG = "wf.NotifyActivity";
if (false) {
    /** @type {?} */
    NotifyActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    NotifyActivity.MEXTAG;
    /** @type {?} */
    NotifyActivity.prototype.ClrTypeID;
    /** @type {?} */
    NotifyActivity.prototype.participants;
    /** @type {?} */
    NotifyActivity.prototype.messageNotices;
    /** @type {?} */
    NotifyActivity.prototype.executeForms;
    /** @type {?} */
    NotifyActivity.prototype.extendProperties;
    /** @type {?} */
    NotifyActivity.prototype.dynamicParticipants;
    /** @type {?} */
    NotifyActivity.prototype.notifyAble;
}
BpmnModelHelper.RegisterElementType(new NotifyActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,