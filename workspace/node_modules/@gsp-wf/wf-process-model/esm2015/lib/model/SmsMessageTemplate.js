/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { SmsMessageVariable } from "./SmsMessageVariable";
export class SmsMessageTemplate extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SmsMessageTemplate.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.smsMessageVariables = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Code", this.code);
        ExtensionMethod.SetAttributeValue(obj, "Content", this.content);
        if (this.smsMessageVariables && this.smsMessageVariables.length > 0) {
            /** @type {?} */
            const variables = new Array();
            for (const variable of this.smsMessageVariables) {
                variables.push(variable.ConvertToJsonObject());
            }
            BpmnModelHelper.SetAttributeValue(obj, "SmsMessageVariables", variables);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.code = ExtensionMethod.GetAttributeValue4String(obj, "Code");
        this.content = ExtensionMethod.GetAttributeValue4String(obj, "Content");
        this.smsMessageVariables = new Array();
        /** @type {?} */
        const variables = ExtensionMethod.GetAttributeValue(obj, "SmsMessageVariables");
        if (variables && variables.length > 0) {
            for (const variable of variables) {
                /** @type {?} */
                const smsMessageVariable = new SmsMessageVariable(this.Model);
                smsMessageVariable.LoadFromJsonObject(variable);
                this.smsMessageVariables.push(smsMessageVariable);
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SmsMessageTemplate(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const smsMessageTemplate = new SmsMessageTemplate(this.Model);
        smsMessageTemplate.code = this.code;
        smsMessageTemplate.content = this.content;
        smsMessageTemplate.smsMessageVariables = new Array();
        if (this.smsMessageVariables && this.smsMessageVariables.length > 0) {
            for (const variable of this.smsMessageVariables) {
                /** @type {?} */
                const smsMessageVariable = variable.clone();
                smsMessageTemplate.smsMessageVariables.push(smsMessageVariable);
            }
        }
        return smsMessageTemplate;
    }
}
SmsMessageTemplate.Clr_Type_ID = "wf.SmsMessageTemplate";
if (false) {
    /** @type {?} */
    SmsMessageTemplate.Clr_Type_ID;
    /** @type {?} */
    SmsMessageTemplate.prototype.ClrTypeID;
    /** @type {?} */
    SmsMessageTemplate.prototype.code;
    /** @type {?} */
    SmsMessageTemplate.prototype.content;
    /** @type {?} */
    SmsMessageTemplate.prototype.smsMessageVariables;
}
BpmnModelHelper.RegisterElementType(new SmsMessageTemplate(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU21zTWVzc2FnZVRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL1Ntc01lc3NhZ2VUZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGdCQUFnQjs7OztJQVVwRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVRSLGNBQVMsR0FBVyxrQkFBa0IsQ0FBQyxXQUFXLENBQUM7SUFVNUQsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEUsSUFBSSxJQUFJLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2tCQUMzRCxTQUFTLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFDN0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzdDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQzthQUNsRDtZQUNELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDNUU7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxPQUFPLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQzs7Y0FDakMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUM7UUFDL0UsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7O3NCQUN4QixrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzdELGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDckQ7U0FDSjtJQUNMLENBQUM7Ozs7SUFHRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0Qsa0JBQWtCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEMsa0JBQWtCLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDMUMsa0JBQWtCLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqRSxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7c0JBQ3ZDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUU7Z0JBQzNDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ25FO1NBQ0o7UUFFRCxPQUFPLGtCQUFrQixDQUFDO0lBQzlCLENBQUM7O0FBakVNLDhCQUFXLEdBQVcsdUJBQXVCLENBQUM7OztJQUFyRCwrQkFBcUQ7O0lBQ3JELHVDQUE0RDs7SUFFNUQsa0NBQWE7O0lBRWIscUNBQWdCOztJQUVoQixpREFBK0M7O0FBNERuRCxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBTbXNNZXNzYWdlVmFyaWFibGUgfSBmcm9tIFwiLi9TbXNNZXNzYWdlVmFyaWFibGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTbXNNZXNzYWdlVGVtcGxhdGUgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5TbXNNZXNzYWdlVGVtcGxhdGVcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gU21zTWVzc2FnZVRlbXBsYXRlLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIGNvZGU6IHN0cmluZztcclxuXHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgc21zTWVzc2FnZVZhcmlhYmxlczogQXJyYXk8U21zTWVzc2FnZVZhcmlhYmxlPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLnNtc01lc3NhZ2VWYXJpYWJsZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvZGVcIiwgdGhpcy5jb2RlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvbnRlbnRcIiwgdGhpcy5jb250ZW50KTtcclxuICAgICAgICBpZiAodGhpcy5zbXNNZXNzYWdlVmFyaWFibGVzICYmIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIG9mIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzLnB1c2godmFyaWFibGUuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlNtc01lc3NhZ2VWYXJpYWJsZXNcIiwgdmFyaWFibGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLmNvZGUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkNvbnRlbnRcIik7XHJcbiAgICAgICAgdGhpcy5zbXNNZXNzYWdlVmFyaWFibGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY29uc3QgdmFyaWFibGVzID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJTbXNNZXNzYWdlVmFyaWFibGVzXCIpO1xyXG4gICAgICAgIGlmICh2YXJpYWJsZXMgJiYgdmFyaWFibGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB2YXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNtc01lc3NhZ2VWYXJpYWJsZSA9IG5ldyBTbXNNZXNzYWdlVmFyaWFibGUodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBzbXNNZXNzYWdlVmFyaWFibGUuTG9hZEZyb21Kc29uT2JqZWN0KHZhcmlhYmxlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcy5wdXNoKHNtc01lc3NhZ2VWYXJpYWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFNtc01lc3NhZ2VUZW1wbGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTbXNNZXNzYWdlVGVtcGxhdGUodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogU21zTWVzc2FnZVRlbXBsYXRlIHtcclxuICAgICAgICBjb25zdCBzbXNNZXNzYWdlVGVtcGxhdGUgPSBuZXcgU21zTWVzc2FnZVRlbXBsYXRlKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5jb2RlID0gdGhpcy5jb2RlO1xyXG4gICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5jb250ZW50ID0gdGhpcy5jb250ZW50O1xyXG4gICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcyAmJiB0aGlzLnNtc01lc3NhZ2VWYXJpYWJsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIG9mIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc21zTWVzc2FnZVZhcmlhYmxlID0gdmFyaWFibGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzLnB1c2goc21zTWVzc2FnZVZhcmlhYmxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNtc01lc3NhZ2VUZW1wbGF0ZTtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgU21zTWVzc2FnZVRlbXBsYXRlKG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4iXX0=