/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionMethod, ExtensionElement } from "@edp-pmf/bpmn-model";
import { Condition } from "./extension/condition-expression/Condition";
export class ApprovalPivot extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ApprovalPivot.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Type", this.type);
        ExtensionMethod.SetAttributeValue(obj, "Title", this.title);
        ExtensionMethod.SetAttributeValue(obj, "Description", this.description);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.type = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "Type")));
        this.title = ExtensionMethod.GetAttributeValue4String(obj, "Title");
        this.description = ExtensionMethod.GetAttributeValue4String(obj, "Description");
        /** @type {?} */
        const conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ApprovalPivot(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const approvalPivot = new ApprovalPivot(this.Model);
        approvalPivot.type = this.type;
        approvalPivot.title = this.title;
        approvalPivot.description = this.description;
        if (this.condition) {
            approvalPivot.condition = this.condition.clone();
        }
        return approvalPivot;
    }
}
ApprovalPivot.Clr_Type_ID = "wf.ApprovalPivot";
if (false) {
    /** @type {?} */
    ApprovalPivot.Clr_Type_ID;
    /** @type {?} */
    ApprovalPivot.prototype.ClrTypeID;
    /** @type {?} */
    ApprovalPivot.prototype.type;
    /** @type {?} */
    ApprovalPivot.prototype.condition;
    /** @type {?} */
    ApprovalPivot.prototype.title;
    /** @type {?} */
    ApprovalPivot.prototype.description;
}
BpmnModelHelper.RegisterElementType(new ApprovalPivot(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwcm92YWxQaXZvdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9BcHByb3ZhbFBpdm90LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFFdkUsTUFBTSxPQUFPLGFBQWMsU0FBUSxnQkFBZ0I7Ozs7SUFTL0MsWUFBWSxLQUFnQjtRQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFSUixjQUFTLEdBQVcsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQVN2RCxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQUEsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsRUFBcUIsQ0FBQztRQUN2RixJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDOztjQUMxRSxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztRQUM1RSxJQUFJLGdCQUFnQixFQUFFOztrQkFDWixTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM5QjtJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbkQsYUFBYSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQy9CLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNqQyxhQUFhLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDN0MsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNwRDtRQUVELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7O0FBcERNLHlCQUFXLEdBQVcsa0JBQWtCLENBQUM7OztJQUFoRCwwQkFBZ0Q7O0lBQ2hELGtDQUF1RDs7SUFFdkQsNkJBQXdCOztJQUN4QixrQ0FBcUI7O0lBQ3JCLDhCQUFjOztJQUNkLG9DQUFvQjs7QUFpRHhCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25NZXRob2QsIEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBBcHByb3ZhbFBpdm90VHlwZSB9IGZyb20gXCIuL0FwcHJvdmFsUGl2b3RUeXBlXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvbiB9IGZyb20gXCIuL2V4dGVuc2lvbi9jb25kaXRpb24tZXhwcmVzc2lvbi9Db25kaXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHByb3ZhbFBpdm90IGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuQXBwcm92YWxQaXZvdFwiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBBcHByb3ZhbFBpdm90LkNscl9UeXBlX0lEO1xyXG5cclxuICAgIHR5cGU6IEFwcHJvdmFsUGl2b3RUeXBlO1xyXG4gICAgY29uZGl0aW9uOiBDb25kaXRpb247XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVHlwZVwiLCB0aGlzLnR5cGUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVGl0bGVcIiwgdGhpcy50aXRsZSk7XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJEZXNjcmlwdGlvblwiLCB0aGlzLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICBpZiAodGhpcy5jb25kaXRpb24pIHtcclxuICAgICAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJDb25kaXRpb25cIiwgdGhpcy5jb25kaXRpb24uQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIlR5cGVcIikgYXMgQXBwcm92YWxQaXZvdFR5cGU7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIlRpdGxlXCIpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJEZXNjcmlwdGlvblwiKTtcclxuICAgICAgICBjb25zdCBjb25kaXRpb25FbGVtZW50ID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ0NvbmRpdGlvbicpO1xyXG4gICAgICAgIGlmIChjb25kaXRpb25FbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbi5Mb2FkRnJvbUpzb25PYmplY3QoY29uZGl0aW9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBBcHByb3ZhbFBpdm90IHtcclxuICAgICAgICByZXR1cm4gbmV3IEFwcHJvdmFsUGl2b3QodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQXBwcm92YWxQaXZvdCB7XHJcbiAgICAgICAgY29uc3QgYXBwcm92YWxQaXZvdCA9IG5ldyBBcHByb3ZhbFBpdm90KHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGFwcHJvdmFsUGl2b3QudHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICBhcHByb3ZhbFBpdm90LnRpdGxlID0gdGhpcy50aXRsZTtcclxuICAgICAgICBhcHByb3ZhbFBpdm90LmRlc2NyaXB0aW9uID0gdGhpcy5kZXNjcmlwdGlvbjtcclxuICAgICAgICBpZiAodGhpcy5jb25kaXRpb24pIHtcclxuICAgICAgICAgICAgYXBwcm92YWxQaXZvdC5jb25kaXRpb24gPSB0aGlzLmNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFwcHJvdmFsUGl2b3Q7XHJcbiAgICB9XHJcblxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBBcHByb3ZhbFBpdm90KG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==