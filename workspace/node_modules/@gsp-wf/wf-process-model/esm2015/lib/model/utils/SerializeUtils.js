/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../parameter/WFActualParameter";
export class SerializeUtils {
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} actualParameters
     * @return {?}
     */
    static setListAttributeValue(obj, attributeName, actualParameters) {
        /** @type {?} */
        const actualParametersElements = new Array();
        if (actualParameters && actualParameters.length > 0) {
            for (const p of actualParameters) {
                actualParametersElements.push(p.ConvertToJsonObject());
            }
        }
        BpmnModelHelper.SetAttributeValue(obj, attributeName, actualParametersElements);
    }
    /**
     * @param {?} model
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static getListFromJsonObject(model, obj, attributeName) {
        /** @type {?} */
        const actualParameterList = new Array();
        /** @type {?} */
        const actualParametersElement = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, attributeName)));
        if (actualParametersElement && actualParametersElement.length > 0) {
            for (const p of actualParametersElement) {
                /** @type {?} */
                const actualParameter = new ActualParameter(model);
                actualParameter.LoadFromJsonObject(p);
                actualParameterList.push(actualParameter);
            }
        }
        return actualParameterList;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VyaWFsaXplVXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvdXRpbHMvU2VyaWFsaXplVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWpFLE1BQU0sT0FBTyxjQUFjOzs7Ozs7O0lBQ3ZCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFRLEVBQUUsYUFBcUIsRUFBRSxnQkFBd0M7O2NBQzVGLHdCQUF3QixHQUFHLElBQUksS0FBSyxFQUFFO1FBQzVDLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixFQUFFO2dCQUM5Qix3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQzthQUMxRDtTQUNKO1FBQ0QsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztJQUNwRixDQUFDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEtBQWdCLEVBQUUsR0FBUSxFQUFFLGFBQXFCOztjQUNwRSxtQkFBbUIsR0FBRyxJQUFJLEtBQUssRUFBRTs7Y0FDakMsdUJBQXVCLEdBQUcsbUJBQUEsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsRUFBYztRQUNuRyxJQUFJLHVCQUF1QixJQUFJLHVCQUF1QixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0QsS0FBSyxNQUFNLENBQUMsSUFBSSx1QkFBdUIsRUFBRTs7c0JBQy9CLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUM7Z0JBQ2xELGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQzdDO1NBQ0o7UUFDRCxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBBY3R1YWxQYXJhbWV0ZXIgfSBmcm9tIFwiLi4vcGFyYW1ldGVyL1dGQWN0dWFsUGFyYW1ldGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VyaWFsaXplVXRpbHMge1xyXG4gICAgc3RhdGljIHNldExpc3RBdHRyaWJ1dGVWYWx1ZShvYmo6IGFueSwgYXR0cmlidXRlTmFtZTogc3RyaW5nLCBhY3R1YWxQYXJhbWV0ZXJzOiBBcnJheTxBY3R1YWxQYXJhbWV0ZXI+KSB7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaWYgKGFjdHVhbFBhcmFtZXRlcnMgJiYgYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBhY3R1YWxQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudHMucHVzaChwLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgYXR0cmlidXRlTmFtZSwgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0TGlzdEZyb21Kc29uT2JqZWN0KG1vZGVsOiBCcG1uTW9kZWwsIG9iajogYW55LCBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpOiBBcnJheTxBY3R1YWxQYXJhbWV0ZXI+IHtcclxuICAgICAgICBjb25zdCBhY3R1YWxQYXJhbWV0ZXJMaXN0ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBhdHRyaWJ1dGVOYW1lKSBhcyBBcnJheTxhbnk+O1xyXG4gICAgICAgIGlmIChhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudCAmJiBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsUGFyYW1ldGVyID0gbmV3IEFjdHVhbFBhcmFtZXRlcihtb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxQYXJhbWV0ZXIuTG9hZEZyb21Kc29uT2JqZWN0KHApO1xyXG4gICAgICAgICAgICAgICAgYWN0dWFsUGFyYW1ldGVyTGlzdC5wdXNoKGFjdHVhbFBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFjdHVhbFBhcmFtZXRlckxpc3Q7XHJcbiAgICB9XHJcbn0iXX0=