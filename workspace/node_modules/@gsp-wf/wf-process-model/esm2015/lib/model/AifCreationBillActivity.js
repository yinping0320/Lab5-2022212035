/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, BpmnModelJsonHelper, StartEvent } from "@edp-pmf/bpmn-model";
export class AifCreationBillActivity extends StartEvent {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AifCreationBillActivity.Clr_Type_ID;
        this.aifProcessCode = null;
        this.voNodePath = null;
        this.isRelied = true;
        this.aifProcessCode = null;
        this.voNodePath = null;
        this.isRelied = true;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.aifProcessCode = null;
        this.voNodePath = null;
        this.isRelied = true;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'aifProcessCode', this.aifProcessCode);
        BpmnModelHelper.SetAttributeValue(obj, 'voNodePath', this.voNodePath);
        BpmnModelHelper.SetAttributeValue(obj, 'isRelied', this.isRelied);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.aifProcessCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifProcessCode");
        this.voNodePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voNodePath");
        this.isRelied = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isRelied");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AifCreationBillActivity(this.Model);
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const creationAct = new AifCreationBillActivity(this.Model);
        creationAct.Name = this.Name;
        creationAct.aifProcessCode = null;
        if (this.aifProcessCode) {
            creationAct.aifProcessCode = this.aifProcessCode;
        }
        creationAct.voNodePath = null;
        if (this.voNodePath) {
            creationAct.voNodePath = this.voNodePath;
        }
        creationAct.isRelied = this.isRelied;
        return creationAct;
    }
}
AifCreationBillActivity.Clr_Type_ID = "wf.AifCreationBillActivity";
if (false) {
    /** @type {?} */
    AifCreationBillActivity.Clr_Type_ID;
    /** @type {?} */
    AifCreationBillActivity.prototype.ClrTypeID;
    /** @type {?} */
    AifCreationBillActivity.prototype.aifProcessCode;
    /** @type {?} */
    AifCreationBillActivity.prototype.voNodePath;
    /** @type {?} */
    AifCreationBillActivity.prototype.isRelied;
}
BpmnModelHelper.RegisterElementType(new AifCreationBillActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBbUIsTUFBTSxxQkFBcUIsQ0FBQztBQUVuSCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsVUFBVTs7OztJQUNuRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQU1qQixjQUFTLEdBQVcsdUJBQXVCLENBQUMsV0FBVyxDQUFDO1FBQ3hELG1CQUFjLEdBQVcsSUFBSSxDQUFDO1FBQzlCLGVBQVUsR0FBVyxJQUFJLENBQUM7UUFDMUIsYUFBUSxHQUFZLElBQUksQ0FBQztRQVJyQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOzs7O0lBT0QsbUJBQW1CO1FBQ2YsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQzs7OztJQUNELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUNELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDcEYsQ0FBQzs7OztJQUNELFdBQVc7UUFDUCxPQUFPLElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQUtELFFBQVEsQ0FBQyxNQUF5QjtRQUM5QixvQkFBb0I7UUFDcEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxXQUFXLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNELFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUM3QixXQUFXLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckIsV0FBVyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQ3BEO1FBQ0QsV0FBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLFdBQVcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUM1QztRQUNELFdBQVcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyQyxPQUFPLFdBQVcsQ0FBQztJQUN2QixDQUFDOztBQWxETSxtQ0FBVyxHQUFXLDRCQUE0QixDQUFDOzs7SUFBMUQsb0NBQTBEOztJQUMxRCw0Q0FBd0Q7O0lBQ3hELGlEQUE4Qjs7SUFDOUIsNkNBQTBCOztJQUMxQiwyQ0FBeUI7O0FBaUQ3QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBCcG1uTW9kZWxKc29uSGVscGVyLCBTdGFydEV2ZW50LCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5IGV4dGVuZHMgU3RhcnRFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuYWlmUHJvY2Vzc0NvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudm9Ob2RlUGF0aCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1JlbGllZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlcIjtcclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHkuQ2xyX1R5cGVfSUQ7XHJcbiAgICBhaWZQcm9jZXNzQ29kZTogc3RyaW5nID0gbnVsbDtcclxuICAgIHZvTm9kZVBhdGg6IHN0cmluZyA9IG51bGw7XHJcbiAgICBpc1JlbGllZDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICAgICAgdGhpcy5haWZQcm9jZXNzQ29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy52b05vZGVQYXRoID0gbnVsbDtcclxuICAgICAgICB0aGlzLmlzUmVsaWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdhaWZQcm9jZXNzQ29kZScsIHRoaXMuYWlmUHJvY2Vzc0NvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICd2b05vZGVQYXRoJywgdGhpcy52b05vZGVQYXRoKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnaXNSZWxpZWQnLCB0aGlzLmlzUmVsaWVkKTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5haWZQcm9jZXNzQ29kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiYWlmUHJvY2Vzc0NvZGVcIik7XHJcbiAgICAgICAgdGhpcy52b05vZGVQYXRoID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ2b05vZGVQYXRoXCIpO1xyXG4gICAgICAgIHRoaXMuaXNSZWxpZWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNCb29sZWFuKG9iaiwgXCJpc1JlbGllZFwiKTtcclxuICAgIH1cclxuICAgIE5ld0luc3RhbmNlKCk6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5IHtcclxuICAgICAgICByZXR1cm4gbmV3IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5KHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAqIOaooeWei+agoemqjFxyXG4gICAgKiBAcGFyYW0gZXJyb3JzIOaooeWei+agoemqjOmUmeivr+S/oeaBr1xyXG4gICAgKi9cclxuICAgIFZhbGlkYXRlKGVycm9yczogVmFsaWRhdGlvbkVycm9yW10pOiB2b2lkIHtcclxuICAgICAgICAvLyBUT0RPOiDpnIDopoHmt7vliqDoh6rlrprkuYnmoKHpqozkv6Hmga9cclxuICAgICAgICBzdXBlci5WYWxpZGF0ZShlcnJvcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5IHtcclxuICAgICAgICBjb25zdCBjcmVhdGlvbkFjdCA9IG5ldyBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eSh0aGlzLk1vZGVsKTtcclxuICAgICAgICBjcmVhdGlvbkFjdC5OYW1lID0gdGhpcy5OYW1lO1xyXG4gICAgICAgIGNyZWF0aW9uQWN0LmFpZlByb2Nlc3NDb2RlID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5haWZQcm9jZXNzQ29kZSkge1xyXG4gICAgICAgICAgICBjcmVhdGlvbkFjdC5haWZQcm9jZXNzQ29kZSA9IHRoaXMuYWlmUHJvY2Vzc0NvZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNyZWF0aW9uQWN0LnZvTm9kZVBhdGggPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLnZvTm9kZVBhdGgpIHtcclxuICAgICAgICAgICAgY3JlYXRpb25BY3Qudm9Ob2RlUGF0aCA9IHRoaXMudm9Ob2RlUGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3JlYXRpb25BY3QuaXNSZWxpZWQgPSB0aGlzLmlzUmVsaWVkO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGlvbkFjdDtcclxuICAgIH1cclxufVxyXG5cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5KG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==