/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
export class ImageSettings extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ImageSettings.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "ImageOperation", this.imageOperation);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.imageOperation = ExtensionMethod.GetAttributeValue4String(obj, "ImageOperation");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ImageSettings(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const imageSettings = new ImageSettings(this.Model);
        imageSettings.imageOperation = this.imageOperation;
        return imageSettings;
    }
}
ImageSettings.Clr_Type_ID = "wf.ImageSettings";
if (false) {
    /** @type {?} */
    ImageSettings.Clr_Type_ID;
    /** @type {?} */
    ImageSettings.prototype.ClrTypeID;
    /**
     * 影像操作权限
     * @type {?}
     */
    ImageSettings.prototype.imageOperation;
}
BpmnModelHelper.RegisterElementType(new ImageSettings(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VTZXR0aW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL0ltYWdlU2V0dGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEcsTUFBTSxPQUFPLGFBQWMsU0FBUSxnQkFBZ0I7Ozs7SUFTL0MsWUFBWSxLQUFnQjtRQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFSUixjQUFTLEdBQVcsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQVN2RCxDQUFDOzs7OztJQUVTLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFOUUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFGLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbkQsYUFBYSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBRW5ELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7O0FBdENNLHlCQUFXLEdBQVcsa0JBQWtCLENBQUM7OztJQUFoRCwwQkFBZ0Q7O0lBQ2hELGtDQUF1RDs7Ozs7SUFLdkQsdUNBQXVCOztBQWtDM0IsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksYUFBYSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEV4dGVuc2lvbkVsZW1lbnQsIEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VTZXR0aW5ncyBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLkltYWdlU2V0dGluZ3NcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gSW1hZ2VTZXR0aW5ncy5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9seWDj+aTjeS9nOadg+mZkFxyXG4gICAgICovXHJcbiAgICBpbWFnZU9wZXJhdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiSW1hZ2VPcGVyYXRpb25cIiwgdGhpcy5pbWFnZU9wZXJhdGlvbik7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuaW1hZ2VPcGVyYXRpb24gPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJJbWFnZU9wZXJhdGlvblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBJbWFnZVNldHRpbmdzIHtcclxuICAgICAgICByZXR1cm4gbmV3IEltYWdlU2V0dGluZ3ModGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogSW1hZ2VTZXR0aW5ncyB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VTZXR0aW5ncyA9IG5ldyBJbWFnZVNldHRpbmdzKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGltYWdlU2V0dGluZ3MuaW1hZ2VPcGVyYXRpb24gPSB0aGlzLmltYWdlT3BlcmF0aW9uO1xyXG5cclxuICAgICAgICByZXR1cm4gaW1hZ2VTZXR0aW5ncztcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgSW1hZ2VTZXR0aW5ncyhuZXcgQnBtbk1vZGVsKCkpKTtcclxuIl19