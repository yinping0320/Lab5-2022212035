/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, CustomType } from "@edp-pmf/bpmn-model";
export class CDTSchemaType extends CustomType {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CDTSchemaType.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CDTSchemaType(this.Model);
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.MetadataId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "SchemaId", this.SchemaId);
        BpmnModelHelper.SetAttributeValue(obj, "MetadataId", this.MetadataId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.SchemaId = obj.SchemaId;
        this.MetadataId = obj.MetadataId;
        this.ComponentId = obj.ComponentId;
    }
}
CDTSchemaType.Clr_Type_ID = "wf.CDTSchemaType";
if (false) {
    /** @type {?} */
    CDTSchemaType.Clr_Type_ID;
    /** @type {?} */
    CDTSchemaType.prototype.ClrTypeID;
    /** @type {?} */
    CDTSchemaType.prototype.SchemaId;
    /** @type {?} */
    CDTSchemaType.prototype.MetadataId;
    /** @type {?} */
    CDTSchemaType.prototype.ComponentId;
}
BpmnModelHelper.RegisterElementType(new CDTSchemaType(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ0RUU2NoZW1hVHlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9tZXgvQ0RUU2NoZW1hVHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFN0UsTUFBTSxPQUFPLGFBQWMsU0FBUSxVQUFVOzs7O0lBQ3pDLFlBQVksS0FBZ0I7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBUWpCLGNBQVMsR0FBVyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBUDlDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7OztJQWNELG1CQUFtQjtRQUNmLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV4RSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQzs7QUFqQ00seUJBQVcsR0FBVyxrQkFBa0IsQ0FBQzs7O0lBQWhELDBCQUFnRDs7SUFDaEQsa0NBQThDOztJQUc5QyxpQ0FBaUI7O0lBR2pCLG1DQUFtQjs7SUFHbkIsb0NBQW9COztBQXlCeEIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksYUFBYSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEN1c3RvbVR5cGUgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENEVFNjaGVtYVR5cGUgZXh0ZW5kcyBDdXN0b21UeXBlIHtcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQ0RUU2NoZW1hVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDRFRTY2hlbWFUeXBlKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5DRFRTY2hlbWFUeXBlXCI7XHJcbiAgICBDbHJUeXBlSUQ6IHN0cmluZyA9IENEVFNjaGVtYVR5cGUuQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgLy9TY2hlbWFJZOWvueW6lENPSWQvQ0RUSWRcclxuICAgIFNjaGVtYUlkOiBzdHJpbmc7XHJcblxyXG4gICAgLy/lr7nlupRCZeeahE1ldGFkYXRhSWRcclxuICAgIE1ldGFkYXRhSWQ6IHN0cmluZztcclxuXHJcbiAgICAvL+WPluaVsOaehOS7tklkXHJcbiAgICBDb21wb25lbnRJZDogc3RyaW5nO1xyXG5cclxuICAgIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgICAgIHRoaXMuTWV0YWRhdGFJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiU2NoZW1hSWRcIiwgdGhpcy5TY2hlbWFJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJNZXRhZGF0YUlkXCIsIHRoaXMuTWV0YWRhdGFJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJDb21wb25lbnRJZFwiLCB0aGlzLkNvbXBvbmVudElkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5TY2hlbWFJZCA9IG9iai5TY2hlbWFJZDtcclxuICAgICAgICB0aGlzLk1ldGFkYXRhSWQgPSBvYmouTWV0YWRhdGFJZDtcclxuICAgICAgICB0aGlzLkNvbXBvbmVudElkID0gb2JqLkNvbXBvbmVudElkO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBDRFRTY2hlbWFUeXBlKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==