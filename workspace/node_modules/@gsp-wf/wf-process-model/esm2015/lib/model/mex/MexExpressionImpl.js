/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, MexExpression } from "@edp-pmf/bpmn-model";
export class MexExpressionImpl extends MexExpression {
    /**
     * @param {?} model
     * @param {?=} value
     */
    constructor(model, value) {
        super(model);
        this.ClrTypeID = MexExpressionImpl.Clr_Type_ID;
        this.value = value;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'Value', this.value);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.value = obj.Value;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new MexExpressionImpl(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const mexExpressionImpl = new MexExpressionImpl(this.Model);
        mexExpressionImpl.value = this.value;
        return mexExpressionImpl;
    }
}
MexExpressionImpl.Clr_Type_ID = "wf.MexExpressionImpl";
if (false) {
    /** @type {?} */
    MexExpressionImpl.Clr_Type_ID;
    /** @type {?} */
    MexExpressionImpl.prototype.ClrTypeID;
    /** @type {?} */
    MexExpressionImpl.prototype.value;
}
BpmnModelHelper.RegisterElementType(new MexExpressionImpl(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV4RXhwcmVzc2lvbkltcGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvbWV4L01leEV4cHJlc3Npb25JbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVoRixNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTs7Ozs7SUFLaEQsWUFBWSxLQUFnQixFQUFFLEtBQWM7UUFDeEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBSmpCLGNBQVMsR0FBVyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7UUFLOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7OztJQUNELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBQ0Qsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDM0QsaUJBQWlCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDckMsT0FBTyxpQkFBaUIsQ0FBQztJQUM3QixDQUFDOztBQWhDTSw2QkFBVyxHQUFXLHNCQUFzQixDQUFDOzs7SUFBcEQsOEJBQW9EOztJQUNwRCxzQ0FBa0Q7O0lBRWxELGtDQUFjOztBQStCbEIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksaUJBQWlCLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciwgTWV4RXhwcmVzc2lvbiB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTWV4RXhwcmVzc2lvbkltcGwgZXh0ZW5kcyBNZXhFeHByZXNzaW9uIHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5NZXhFeHByZXNzaW9uSW1wbFwiO1xyXG4gICAgQ2xyVHlwZUlEOiBzdHJpbmcgPSBNZXhFeHByZXNzaW9uSW1wbC5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCwgdmFsdWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICB9XHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ1ZhbHVlJywgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnZhbHVlID0gb2JqLlZhbHVlO1xyXG4gICAgfVxyXG4gICAgTmV3SW5zdGFuY2UoKTogTWV4RXhwcmVzc2lvbkltcGwge1xyXG4gICAgICAgIHJldHVybiBuZXcgTWV4RXhwcmVzc2lvbkltcGwodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogTWV4RXhwcmVzc2lvbkltcGwge1xyXG4gICAgICAgIGNvbnN0IG1leEV4cHJlc3Npb25JbXBsID0gbmV3IE1leEV4cHJlc3Npb25JbXBsKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIG1leEV4cHJlc3Npb25JbXBsLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICByZXR1cm4gbWV4RXhwcmVzc2lvbkltcGw7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IE1leEV4cHJlc3Npb25JbXBsKG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4iXX0=