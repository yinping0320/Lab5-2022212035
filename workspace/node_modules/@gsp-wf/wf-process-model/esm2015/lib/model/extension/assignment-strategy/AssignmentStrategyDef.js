/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
export class AssignmentStrategyDef extends ExtensionElement {
    //undo操作临时clone方法
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} description
     * @param {?=} expandGroups
     */
    constructor(model, id, description, expandGroups) {
        super(model);
        this.ClrTypeID = "wf.AssignmentStrategy";
        this.Id = id;
        this.Description = description;
        this.ExpandGroups = expandGroups;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Id = null;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AssignmentStrategyDef(this.Model);
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        BpmnModelHelper.SetAttributeValue(obj, "ExpandGroups", this.ExpandGroups);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Description = obj.Description;
        this.ExpandGroups = obj.ExpandGroups;
    }
}
if (false) {
    /** @type {?} */
    AssignmentStrategyDef.prototype.ClrTypeID;
    /** @type {?} */
    AssignmentStrategyDef.prototype.Id;
    /** @type {?} */
    AssignmentStrategyDef.prototype.Description;
    /** @type {?} */
    AssignmentStrategyDef.prototype.ExpandGroups;
}
BpmnModelHelper.RegisterElementType(new AssignmentStrategyDef(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzaWdubWVudFN0cmF0ZWd5RGVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9hc3NpZ25tZW50LXN0cmF0ZWd5L0Fzc2lnbm1lbnRTdHJhdGVneURlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRixNQUFNLE9BQU8scUJBQXNCLFNBQVEsZ0JBQWdCOzs7Ozs7OztJQUV2RCxZQUFZLEtBQWdCLEVBQUUsRUFBVyxFQUFFLFdBQW9CLEVBQUUsWUFBc0I7UUFDbkYsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBT2pCLGNBQVMsR0FBVyx1QkFBdUIsQ0FBQztRQUx4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBUVMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7Q0FFSjs7O0lBaENHLDBDQUE0Qzs7SUFFNUMsbUNBQVc7O0lBQ1gsNENBQW9COztJQUNwQiw2Q0FBc0I7O0FBOEIxQixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50IH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBc3NpZ25tZW50U3RyYXRlZ3lEZWYgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIC8vdW5kb+aTjeS9nOS4tOaXtmNsb25l5pa55rOVXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsLCBpZD86IHN0cmluZywgZGVzY3JpcHRpb24/OiBzdHJpbmcsIGV4cGFuZEdyb3Vwcz86IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcblxyXG4gICAgICAgIHRoaXMuSWQgPSBpZDtcclxuICAgICAgICB0aGlzLkRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5FeHBhbmRHcm91cHMgPSBleHBhbmRHcm91cHM7XHJcbiAgICB9XHJcblxyXG4gICAgQ2xyVHlwZUlEOiBzdHJpbmcgPSBcIndmLkFzc2lnbm1lbnRTdHJhdGVneVwiO1xyXG5cclxuICAgIElkOiBzdHJpbmc7XHJcbiAgICBEZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgRXhwYW5kR3JvdXBzOiBib29sZWFuO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5JZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQXNzaWdubWVudFN0cmF0ZWd5RGVmIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFzc2lnbm1lbnRTdHJhdGVneURlZih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIklkXCIsIHRoaXMuSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRGVzY3JpcHRpb25cIiwgdGhpcy5EZXNjcmlwdGlvbik7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJFeHBhbmRHcm91cHNcIiwgdGhpcy5FeHBhbmRHcm91cHMpO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuSWQgPSBvYmouSWQ7XHJcbiAgICAgICAgdGhpcy5EZXNjcmlwdGlvbiA9IG9iai5EZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLkV4cGFuZEdyb3VwcyA9IG9iai5FeHBhbmRHcm91cHM7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgQXNzaWdubWVudFN0cmF0ZWd5RGVmKG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4gICAgLy8gcG1mLmJwbW4uZGVzaWduZXIuQnBtbkRlc2lnbmVySGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IEFzc2lnbm1lbnRTdHJhdGVneURlZihuZXcgQnBtbk1vZGVsKCkpKTsiXX0=