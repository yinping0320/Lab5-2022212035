/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Tool } from "./Tool";
export class Component extends Tool {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = Component.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new Component(this.Model);
    }
    //Json 序列化
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "MetadataId", this.MetadataId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentType", this.ComponentType);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.MethodCode);
        BpmnModelHelper.SetAttributeValue(obj, "ScopeType", this.ScopeType);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.MetadataId = obj.MetadataId;
        this.ComponentType = obj.ComponentType;
        this.MethodCode = obj.MethodCode;
        this.ScopeType = obj.ScopeType;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const component = new Component(this.Model);
        component.Id = BpmnModelHelper.GenerateElementId();
        component.Code = this.Code;
        component.Name = this.Name;
        component.Description = this.Description;
        component.Execution = this.Execution;
        component.AsyncCallBackType = this.AsyncCallBackType;
        component.Time = this.Time;
        component.isForCompensation = this.isForCompensation;
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            for (const p of this.ActualParameters) {
                /** @type {?} */
                const parameter = p.clone();
                component.ActualParameters.push(parameter);
            }
        }
        component.MetadataId = this.MetadataId;
        component.ComponentType = this.ComponentType;
        component.MethodCode = this.MethodCode;
        component.ScopeType = this.ScopeType;
        return component;
    }
}
Component.Clr_Type_ID = "wf.Component";
if (false) {
    /** @type {?} */
    Component.Clr_Type_ID;
    /** @type {?} */
    Component.prototype.ClrTypeID;
    /** @type {?} */
    Component.prototype.MetadataId;
    /** @type {?} */
    Component.prototype.ComponentType;
    /** @type {?} */
    Component.prototype.MethodCode;
    /** @type {?} */
    Component.prototype.ScopeType;
}
BpmnModelHelper.RegisterElementType(new Component(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi90b29sL0NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sT0FBTyxTQUFVLFNBQVEsSUFBSTs7OztJQUMvQixZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUdqQixjQUFTLEdBQVcsU0FBUyxDQUFDLFdBQVcsQ0FBQztJQUYxQyxDQUFDOzs7O0lBT0QsV0FBVztRQUNQLE9BQU8sSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBR0QsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxHQUFRO1FBQ3ZCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDM0MsU0FBUyxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNuRCxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN6QyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDckMsU0FBUyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNyRCxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTs7c0JBQzdCLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUMzQixTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzlDO1NBQ0o7UUFDRCxTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDdkMsU0FBUyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN2QyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFckMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7QUFwRE0scUJBQVcsR0FBVyxjQUFjLENBQUM7OztJQUE1QyxzQkFBNEM7O0lBQzVDLDhCQUEwQzs7SUFDMUMsK0JBQW1COztJQUNuQixrQ0FBc0I7O0lBQ3RCLCtCQUFtQjs7SUFDbkIsOEJBQWtCOztBQW1EdEIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksU0FBUyxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBUb29sIH0gZnJvbSBcIi4vVG9vbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudCBleHRlbmRzIFRvb2wge1xyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5Db21wb25lbnRcIjtcclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gQ29tcG9uZW50LkNscl9UeXBlX0lEO1xyXG4gICAgTWV0YWRhdGFJZDogc3RyaW5nO1xyXG4gICAgQ29tcG9uZW50VHlwZTogc3RyaW5nO1xyXG4gICAgTWV0aG9kQ29kZTogc3RyaW5nO1xyXG4gICAgU2NvcGVUeXBlOiBzdHJpbmc7XHJcbiAgICBOZXdJbnN0YW5jZSgpOiBDb21wb25lbnQge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29tcG9uZW50KHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vSnNvbiDluo/liJfljJZcclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk1ldGFkYXRhSWRcIiwgdGhpcy5NZXRhZGF0YUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvbXBvbmVudFR5cGVcIiwgdGhpcy5Db21wb25lbnRUeXBlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk1ldGhvZENvZGVcIiwgdGhpcy5NZXRob2RDb2RlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlNjb3BlVHlwZVwiLCB0aGlzLlNjb3BlVHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5NZXRhZGF0YUlkID0gb2JqLk1ldGFkYXRhSWQ7XHJcbiAgICAgICAgdGhpcy5Db21wb25lbnRUeXBlID0gb2JqLkNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgdGhpcy5NZXRob2RDb2RlID0gb2JqLk1ldGhvZENvZGU7XHJcbiAgICAgICAgdGhpcy5TY29wZVR5cGUgPSBvYmouU2NvcGVUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IENvbXBvbmVudCB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gbmV3IENvbXBvbmVudCh0aGlzLk1vZGVsKTtcclxuICAgICAgICBjb21wb25lbnQuSWQgPSBCcG1uTW9kZWxIZWxwZXIuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICBjb21wb25lbnQuQ29kZSA9IHRoaXMuQ29kZTtcclxuICAgICAgICBjb21wb25lbnQuTmFtZSA9IHRoaXMuTmFtZTtcclxuICAgICAgICBjb21wb25lbnQuRGVzY3JpcHRpb24gPSB0aGlzLkRlc2NyaXB0aW9uO1xyXG4gICAgICAgIGNvbXBvbmVudC5FeGVjdXRpb24gPSB0aGlzLkV4ZWN1dGlvbjtcclxuICAgICAgICBjb21wb25lbnQuQXN5bmNDYWxsQmFja1R5cGUgPSB0aGlzLkFzeW5jQ2FsbEJhY2tUeXBlO1xyXG4gICAgICAgIGNvbXBvbmVudC5UaW1lID0gdGhpcy5UaW1lO1xyXG4gICAgICAgIGNvbXBvbmVudC5pc0ZvckNvbXBlbnNhdGlvbiA9IHRoaXMuaXNGb3JDb21wZW5zYXRpb247XHJcbiAgICAgICAgaWYgKHRoaXMuQWN0dWFsUGFyYW1ldGVycyAmJiB0aGlzLkFjdHVhbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgdGhpcy5BY3R1YWxQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSBwLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuQWN0dWFsUGFyYW1ldGVycy5wdXNoKHBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29tcG9uZW50Lk1ldGFkYXRhSWQgPSB0aGlzLk1ldGFkYXRhSWQ7XHJcbiAgICAgICAgY29tcG9uZW50LkNvbXBvbmVudFR5cGUgPSB0aGlzLkNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgY29tcG9uZW50Lk1ldGhvZENvZGUgPSB0aGlzLk1ldGhvZENvZGU7XHJcbiAgICAgICAgY29tcG9uZW50LlNjb3BlVHlwZSA9IHRoaXMuU2NvcGVUeXBlO1xyXG5cclxuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IENvbXBvbmVudChuZXcgQnBtbk1vZGVsKCkpKTsiXX0=