/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { OtherAssignActivityNodeInfo } from "./OtherAssignActivityNodeInfo";
export class OtherAssignNodes extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OtherAssignNodes.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.otherAssignActivityNodeInfos = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            /** @type {?} */
            const destArray = new Array();
            for (const item of this.otherAssignActivityNodeInfos) {
                destArray.push(item.ConvertToJsonObject());
            }
            BpmnModelHelper.SetAttributeValue(obj, "OtherAssignActivityNodeInfos", destArray);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        const destArrayElement = ExtensionMethod.GetAttributeValue(obj, "OtherAssignActivities");
        if (destArrayElement && destArrayElement.length > 0) {
            for (const item of destArrayElement) {
                this.otherAssignActivities.push(item);
            }
        }
        /** @type {?} */
        const newDestArrayElement = ExtensionMethod.GetAttributeValue(obj, "OtherAssignActivityNodeInfos");
        if (newDestArrayElement && newDestArrayElement.length > 0) {
            for (const item of newDestArrayElement) {
                /** @type {?} */
                const otherInfo = new OtherAssignActivityNodeInfo(this.Model);
                otherInfo.LoadFromJsonObject(item);
                this.otherAssignActivityNodeInfos.push(otherInfo);
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const assignScope = new OtherAssignNodes(this.Model);
        assignScope.otherAssignActivities = new Array();
        if (this.otherAssignActivities && this.otherAssignActivities.length > 0) {
            for (const d of this.otherAssignActivities) {
                assignScope.otherAssignActivities.push(d);
            }
        }
        assignScope.otherAssignActivityNodeInfos = new Array();
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            for (const d of this.otherAssignActivityNodeInfos) {
                assignScope.otherAssignActivityNodeInfos.push(d.clone());
            }
        }
        return assignScope;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OtherAssignNodes(this.Model);
    }
}
OtherAssignNodes.Clr_Type_ID = "wf.OtherAssignNodes";
if (false) {
    /** @type {?} */
    OtherAssignNodes.Clr_Type_ID;
    /** @type {?} */
    OtherAssignNodes.prototype.ClrTypeID;
    /** @type {?} */
    OtherAssignNodes.prototype.otherAssignActivities;
    /** @type {?} */
    OtherAssignNodes.prototype.otherAssignActivityNodeInfos;
}
BpmnModelHelper.RegisterElementType(new OtherAssignNodes(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3RoZXJBc3NpZ25Ob2Rlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9leHRlbnNpb24vT3RoZXJBc3NpZ25Ob2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFNUUsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGdCQUFnQjs7OztJQVFsRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVBSLGNBQVMsR0FBVyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7SUFRMUQsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLDRCQUE0QixHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDcEQsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLElBQUksSUFBSSxDQUFDLDRCQUE0QixJQUFJLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztrQkFDN0UsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFO1lBQzdCLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLDRCQUE0QixFQUFFO2dCQUNsRCxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7YUFDOUM7WUFDRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDhCQUE4QixFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDOztjQUN4QixnQkFBZ0IsR0FBa0IsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQztRQUN2RyxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakQsS0FBSyxNQUFNLElBQUksSUFBSSxnQkFBZ0IsRUFBRTtnQkFDakMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QztTQUNKOztjQUVLLG1CQUFtQixHQUF1QyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDhCQUE4QixDQUFDO1FBQ3RJLElBQUksbUJBQW1CLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2RCxLQUFLLE1BQU0sSUFBSSxJQUFJLG1CQUFtQixFQUFFOztzQkFDOUIsU0FBUyxHQUFHLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDN0QsU0FBUyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3JEO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxXQUFXLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BELFdBQVcsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2hELElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JFLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUN4QyxXQUFXLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzdDO1NBQ0o7UUFDRCxXQUFXLENBQUMsNEJBQTRCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN2RCxJQUFJLElBQUksQ0FBQyw0QkFBNEIsSUFBSSxJQUFJLENBQUMsNEJBQTRCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuRixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyw0QkFBNEIsRUFBRTtnQkFDL0MsV0FBVyxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUM1RDtTQUNKO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7O0FBbEVNLDRCQUFXLEdBQVcscUJBQXFCLENBQUM7OztJQUFuRCw2QkFBbUQ7O0lBQ25ELHFDQUEwRDs7SUFFMUQsaURBQXFDOztJQUVyQyx3REFBaUU7O0FBK0RyRSxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBPdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8gfSBmcm9tIFwiLi9PdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBPdGhlckFzc2lnbk5vZGVzIGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuT3RoZXJBc3NpZ25Ob2Rlc1wiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBPdGhlckFzc2lnbk5vZGVzLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIG90aGVyQXNzaWduQWN0aXZpdGllczogQXJyYXk8c3RyaW5nPjtcclxuXHJcbiAgICBvdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9zOiBBcnJheTxPdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgICAgIHRoaXMub3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIGlmICh0aGlzLm90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mb3MgJiYgdGhpcy5vdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgZGVzdEFycmF5ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLm90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mb3MpIHtcclxuICAgICAgICAgICAgICAgIGRlc3RBcnJheS5wdXNoKGl0ZW0uQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mb3NcIiwgZGVzdEFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICBjb25zdCBkZXN0QXJyYXlFbGVtZW50OiBBcnJheTxzdHJpbmc+ID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPdGhlckFzc2lnbkFjdGl2aXRpZXNcIik7XHJcbiAgICAgICAgaWYgKGRlc3RBcnJheUVsZW1lbnQgJiYgZGVzdEFycmF5RWxlbWVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBkZXN0QXJyYXlFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyQXNzaWduQWN0aXZpdGllcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXdEZXN0QXJyYXlFbGVtZW50OiBBcnJheTxPdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8+ID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9zXCIpO1xyXG4gICAgICAgIGlmIChuZXdEZXN0QXJyYXlFbGVtZW50ICYmIG5ld0Rlc3RBcnJheUVsZW1lbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbmV3RGVzdEFycmF5RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJJbmZvID0gbmV3IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyh0aGlzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIG90aGVySW5mby5Mb2FkRnJvbUpzb25PYmplY3QoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mb3MucHVzaChvdGhlckluZm8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IE90aGVyQXNzaWduTm9kZXMge1xyXG4gICAgICAgIGNvbnN0IGFzc2lnblNjb3BlID0gbmV3IE90aGVyQXNzaWduTm9kZXModGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgYXNzaWduU2NvcGUub3RoZXJBc3NpZ25BY3Rpdml0aWVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMub3RoZXJBc3NpZ25BY3Rpdml0aWVzICYmIHRoaXMub3RoZXJBc3NpZ25BY3Rpdml0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkIG9mIHRoaXMub3RoZXJBc3NpZ25BY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NpZ25TY29wZS5vdGhlckFzc2lnbkFjdGl2aXRpZXMucHVzaChkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NpZ25TY29wZS5vdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMub3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvcyAmJiB0aGlzLm90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mb3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGQgb2YgdGhpcy5vdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9zKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NpZ25TY29wZS5vdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9zLnB1c2goZC5jbG9uZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXNzaWduU2NvcGU7XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogT3RoZXJBc3NpZ25Ob2RlcyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPdGhlckFzc2lnbk5vZGVzKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBPdGhlckFzc2lnbk5vZGVzKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==