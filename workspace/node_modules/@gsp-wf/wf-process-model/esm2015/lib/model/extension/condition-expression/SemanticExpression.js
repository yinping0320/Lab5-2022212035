/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { MexExpressionImpl } from "../../mex/MexExpressionImpl";
import { ConditionType } from "./ConditionType";
import { ConditionValueVersion } from "./ConditionValueVersion";
export class SemanticExpression extends MexExpressionImpl {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = SemanticExpression.Clr_Type_ID;
        this._value = '';
        this.valueVersion = ConditionValueVersion.Unsure;
        this.type = ConditionType.CONDITION;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SemanticExpression(this.Model);
    }
    /**
     * @return {?}
     */
    get ConditionType() { return this.type; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ConditionType(value) { this.type = value; }
    /**
     * @return {?}
     */
    get Value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set Value(value) { this._value = value; }
    /**
     * @return {?}
     */
    get ValueVersion() { return this.valueVersion; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ValueVersion(value) { this.valueVersion = value; }
    /**
     * @return {?}
     */
    ToString() {
        return "Condition[value='" + this._value + "'" + ", type=" + this.type + "]";
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ConditionType", this.ConditionType);
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "ValueVersion", this.ValueVersion);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ConditionType = obj.ConditionType;
        this.Value = obj.Value;
        this.ValueVersion = obj.ValueVersion;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const condition = new SemanticExpression(this.Model);
        condition.Value = this.Value;
        condition.ValueVersion = this.valueVersion;
        condition.ConditionType = this.ConditionType;
        return condition;
    }
}
SemanticExpression.Clr_Type_ID = 'wf.SemanticExpression';
if (false) {
    /** @type {?} */
    SemanticExpression.Clr_Type_ID;
    /** @type {?} */
    SemanticExpression.prototype.ClrTypeID;
    /**
     * @type {?}
     * @private
     */
    SemanticExpression.prototype._value;
    /**
     * @type {?}
     * @private
     */
    SemanticExpression.prototype.valueVersion;
    /**
     * @type {?}
     * @private
     */
    SemanticExpression.prototype.type;
}
BpmnModelHelper.RegisterElementType(new SemanticExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VtYW50aWNFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9jb25kaXRpb24tZXhwcmVzc2lvbi9TZW1hbnRpY0V4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWhFLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxpQkFBaUI7Ozs7SUFZckQsWUFBWSxLQUFnQjtRQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFYakIsY0FBUyxHQUFXLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztRQU0zQyxXQUFNLEdBQVcsRUFBRSxDQUFDO1FBQ3BCLGlCQUFZLEdBQTBCLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztRQUNuRSxTQUFJLEdBQWtCLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFJdEQsQ0FBQzs7OztJQVZELFdBQVc7UUFDUCxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7SUFVRCxJQUFJLGFBQWEsS0FBb0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDeEQsSUFBSSxhQUFhLENBQUMsS0FBb0IsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Ozs7SUFFOUQsSUFBSSxLQUFLLEtBQWEsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDM0MsSUFBSSxLQUFLLENBQUMsS0FBYSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzs7OztJQUVqRCxJQUFJLFlBQVksS0FBNEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDdkUsSUFBSSxZQUFZLENBQUMsS0FBNEIsSUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Ozs7SUFFN0UsUUFBUTtRQUNKLE9BQU8sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2pGLENBQUM7Ozs7O0lBRVMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxRSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssU0FBUyxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwRCxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsU0FBUyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM3QyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOztBQXpETSw4QkFBVyxHQUFHLHVCQUF1QixDQUFDOzs7SUFBN0MsK0JBQTZDOztJQUM3Qyx1Q0FBbUQ7Ozs7O0lBTW5ELG9DQUE0Qjs7Ozs7SUFDNUIsMENBQTJFOzs7OztJQUMzRSxrQ0FBc0Q7O0FBa0QxRCxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgTWV4RXhwcmVzc2lvbkltcGwgfSBmcm9tIFwiLi4vLi4vbWV4L01leEV4cHJlc3Npb25JbXBsXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvblR5cGUgfSBmcm9tIFwiLi9Db25kaXRpb25UeXBlXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvblZhbHVlVmVyc2lvbiB9IGZyb20gXCIuL0NvbmRpdGlvblZhbHVlVmVyc2lvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbWFudGljRXhwcmVzc2lvbiBleHRlbmRzIE1leEV4cHJlc3Npb25JbXBsIHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRCA9ICd3Zi5TZW1hbnRpY0V4cHJlc3Npb24nO1xyXG4gICAgQ2xyVHlwZUlEOiBzdHJpbmcgPSBTZW1hbnRpY0V4cHJlc3Npb24uQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogU2VtYW50aWNFeHByZXNzaW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbWFudGljRXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF92YWx1ZTogc3RyaW5nID0gJyc7XHJcbiAgICBwcml2YXRlIHZhbHVlVmVyc2lvbjogQ29uZGl0aW9uVmFsdWVWZXJzaW9uID0gQ29uZGl0aW9uVmFsdWVWZXJzaW9uLlVuc3VyZTtcclxuICAgIHByaXZhdGUgdHlwZTogQ29uZGl0aW9uVHlwZSA9IENvbmRpdGlvblR5cGUuQ09ORElUSU9OO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IENvbmRpdGlvblR5cGUoKTogQ29uZGl0aW9uVHlwZSB7IHJldHVybiB0aGlzLnR5cGU7IH1cclxuICAgIHNldCBDb25kaXRpb25UeXBlKHZhbHVlOiBDb25kaXRpb25UeXBlKSB7IHRoaXMudHlwZSA9IHZhbHVlOyB9XHJcblxyXG4gICAgZ2V0IFZhbHVlKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl92YWx1ZTsgfVxyXG4gICAgc2V0IFZhbHVlKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5fdmFsdWUgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBWYWx1ZVZlcnNpb24oKTogQ29uZGl0aW9uVmFsdWVWZXJzaW9uIHsgcmV0dXJuIHRoaXMudmFsdWVWZXJzaW9uOyB9XHJcbiAgICBzZXQgVmFsdWVWZXJzaW9uKHZhbHVlOiBDb25kaXRpb25WYWx1ZVZlcnNpb24pIHsgdGhpcy52YWx1ZVZlcnNpb24gPSB2YWx1ZTsgfVxyXG5cclxuICAgIFRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiQ29uZGl0aW9uW3ZhbHVlPSdcIiArIHRoaXMuX3ZhbHVlICsgXCInXCIgKyBcIiwgdHlwZT1cIiArIHRoaXMudHlwZSArIFwiXVwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLlZhbHVlID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29uZGl0aW9uVHlwZVwiLCB0aGlzLkNvbmRpdGlvblR5cGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVmFsdWVcIiwgdGhpcy5WYWx1ZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJWYWx1ZVZlcnNpb25cIiwgdGhpcy5WYWx1ZVZlcnNpb24pO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLkNvbmRpdGlvblR5cGUgPSBvYmouQ29uZGl0aW9uVHlwZTtcclxuICAgICAgICB0aGlzLlZhbHVlID0gb2JqLlZhbHVlO1xyXG4gICAgICAgIHRoaXMuVmFsdWVWZXJzaW9uID0gb2JqLlZhbHVlVmVyc2lvbjtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBTZW1hbnRpY0V4cHJlc3Npb24ge1xyXG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IG5ldyBTZW1hbnRpY0V4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgY29uZGl0aW9uLlZhbHVlID0gdGhpcy5WYWx1ZTtcclxuICAgICAgICBjb25kaXRpb24uVmFsdWVWZXJzaW9uID0gdGhpcy52YWx1ZVZlcnNpb247XHJcbiAgICAgICAgY29uZGl0aW9uLkNvbmRpdGlvblR5cGUgPSB0aGlzLkNvbmRpdGlvblR5cGU7XHJcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgU2VtYW50aWNFeHByZXNzaW9uKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==