/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../parameter/WFActualParameter";
export class CustomizeAction extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CustomizeAction.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.code = null;
        this.name = null;
        this.terminalType = null;
        // this.enable = true;
        this.actualParameters = [];
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.name);
        BpmnModelHelper.SetAttributeValue(obj, "TerminalType", this.terminalType);
        // BpmnModelHelper.SetAttributeValue(obj, "Enable", this.enable);
        /** @type {?} */
        let actualParametersElements = [];
        if (this.actualParameters !== null && this.actualParameters.length > 0) {
            this.actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = obj.Id;
        this.code = obj.Code;
        this.name = obj.Name;
        this.terminalType = obj.TerminalType;
        // this.enable = obj.Enable;
        /** @type {?} */
        let actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let actualParameter = new ActualParameter(this.Model);
                actualParameter.LoadFromJsonObject(item);
                this.actualParameters.push(actualParameter);
            }));
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CustomizeAction(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const customizeAction = new CustomizeAction(this.Model);
        customizeAction.id = BpmnModelHelper.GenerateElementId();
        customizeAction.code = this.code;
        customizeAction.name = this.name;
        customizeAction.terminalType = this.terminalType;
        customizeAction.actualParameters = new Array();
        if (this.actualParameters && this.actualParameters.length > 0) {
            for (const p of this.actualParameters) {
                /** @type {?} */
                const actualParameter = p.clone();
                customizeAction.actualParameters.push(actualParameter);
            }
        }
        return customizeAction;
    }
}
CustomizeAction.Clr_Type_ID = "wf.CustomizeAction";
if (false) {
    /** @type {?} */
    CustomizeAction.Clr_Type_ID;
    /** @type {?} */
    CustomizeAction.prototype.ClrTypeID;
    /** @type {?} */
    CustomizeAction.prototype.id;
    /** @type {?} */
    CustomizeAction.prototype.code;
    /** @type {?} */
    CustomizeAction.prototype.name;
    /** @type {?} */
    CustomizeAction.prototype.terminalType;
    /** @type {?} */
    CustomizeAction.prototype.actualParameters;
}
BpmnModelHelper.RegisterElementType(new CustomizeAction(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,