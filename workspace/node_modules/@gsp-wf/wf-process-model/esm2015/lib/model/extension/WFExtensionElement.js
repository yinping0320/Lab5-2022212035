/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
/**
 * @abstract
 */
export class WFExtensionElement extends ExtensionElement {
    /**
     * @protected
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     */
    constructor(model, id, name) {
        super(model);
        this.ExtendedAttributes = {};
        this.Id = id || '';
        this.Name = name || '';
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ExtendedAttributes = {};
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.Code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        /** @type {?} */
        let extAttributeElements = [];
        for (let key in this.ExtendedAttributes) {
            /** @type {?} */
            let obj = {};
            BpmnModelHelper.SetAttributeValue(obj, "Name", key);
            BpmnModelHelper.SetAttributeValue(obj, "Value", this.ExtendedAttributes[key]);
            extAttributeElements.push(obj);
        }
        BpmnModelHelper.SetAttributeValue(obj, "ExtendedAttributes", extAttributeElements);
        if (this.GetMexExtensionElements4ConvertTo().length > 0) {
            /** @type {?} */
            let mexJsonArray = [];
            this.GetMexExtensionElements4ConvertTo().forEach((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                mexJsonArray.push(value.ConvertToJsonObject());
            }));
            BpmnModelHelper.SetAttributeValue(obj, "MexExtensionElements", mexJsonArray);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Code = obj.Code;
        this.Name = obj.Name;
        this.Description = obj.Description;
        /** @type {?} */
        let extAttributeElements = (/** @type {?} */ (obj.ExtendedAttributes));
        if (extAttributeElements && extAttributeElements.length > 0) {
            extAttributeElements.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.ExtendedAttributes[item.Name] = item.Value;
            }));
        }
        /** @type {?} */
        let mexJsonArray = (/** @type {?} */ (obj.MexExtensionElements));
        if (mexJsonArray && mexJsonArray.length > 0) {
            /** @type {?} */
            let list = new Array();
            mexJsonArray.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let mexExtElementObj = (/** @type {?} */ (BpmnModelHelper.GetElementType(item.ClrTypeID)));
                if (mexExtElementObj) {
                    mexExtElementObj.LoadFromJsonObject(item);
                    list.push(mexExtElementObj);
                }
            }));
            this.SetMexExtensionElements4LoadFrom(list);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    GetMexExtensionElements4ConvertTo() {
        return [];
    }
    /**
     * @protected
     * @param {?} list
     * @return {?}
     */
    SetMexExtensionElements4LoadFrom(list) {
    }
    /**
     * @return {?}
     */
    GetExtendedAttributes() {
        return this.ExtendedAttributes;
    }
}
if (false) {
    /** @type {?} */
    WFExtensionElement.prototype.Id;
    /** @type {?} */
    WFExtensionElement.prototype.Code;
    /** @type {?} */
    WFExtensionElement.prototype.Name;
    /** @type {?} */
    WFExtensionElement.prototype.Description;
    /** @type {?} */
    WFExtensionElement.prototype.ExtendedAttributes;
}
//# sourceMappingURL=data:application/json;base64,