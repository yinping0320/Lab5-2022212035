/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
import { JumpScopeCategory } from "./JumpScopeCategory";
import { JumpScopeDefaultType } from "./JumpScopeDefaultType";
export class JumpScope extends ExtensionElement {
    /**
     * @param {?} model
     * @param {?=} category
     * @param {?=} DefaultType
     */
    constructor(model, category, DefaultType) {
        super(model);
        this.ClrTypeID = JumpScope.Clr_Type_ID;
        this.Category = category || JumpScopeCategory.SpecifiedSet;
        this.DefaultType = DefaultType || JumpScopeDefaultType.FirstNode;
        this.DestinationActivities = new Array();
        this.DefaultActivity = '';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new JumpScope(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.Category = JumpScopeCategory.Global;
        this.DefaultType = JumpScopeDefaultType.FirstNode;
        this.DestinationActivities = new Array();
        this.DefaultActivity = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Category", this.Category);
        BpmnModelHelper.SetAttributeValue(obj, "DefaultType", this.DefaultType);
        BpmnModelHelper.SetAttributeValue(obj, "DestinationActivities", this.DestinationActivities);
        BpmnModelHelper.SetAttributeValue(obj, "DefaultActivity", this.DefaultActivity);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Category = obj.Category;
        this.DefaultType = obj.DefaultType;
        this.DestinationActivities = obj.DestinationActivities;
        this.DefaultActivity = obj.DefaultActivity;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const jumpScope = new JumpScope(this.Model);
        jumpScope.Category = this.Category;
        jumpScope.DefaultType = this.DefaultType;
        jumpScope.DefaultActivity = this.DefaultActivity;
        jumpScope.DestinationActivities = new Array();
        if (this.DestinationActivities && this.DestinationActivities.length > 0) {
            for (const d of this.DestinationActivities) {
                jumpScope.DestinationActivities.push(d);
            }
        }
        return jumpScope;
    }
}
JumpScope.Clr_Type_ID = "wf.JumpScope";
if (false) {
    /** @type {?} */
    JumpScope.Clr_Type_ID;
    /** @type {?} */
    JumpScope.prototype.ClrTypeID;
    /** @type {?} */
    JumpScope.prototype.Category;
    /** @type {?} */
    JumpScope.prototype.DefaultType;
    /** @type {?} */
    JumpScope.prototype.DestinationActivities;
    /** @type {?} */
    JumpScope.prototype.DefaultActivity;
}
BpmnModelHelper.RegisterElementType(new JumpScope(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnVtcFNjb3BlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9KdW1wU2NvcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQsTUFBTSxPQUFPLFNBQVUsU0FBUSxnQkFBZ0I7Ozs7OztJQVkzQyxZQUFZLEtBQWdCLEVBQUUsUUFBNEIsRUFBRSxXQUFrQztRQUMxRixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFYUixjQUFTLEdBQVcsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQVkvQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLENBQUM7UUFDM0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQ2pELElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7Ozs7SUFkRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFjUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUM7UUFDbEQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1RixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsR0FBRyxDQUFDLHFCQUFxQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMzQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDbkMsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3pDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNqRCxTQUFTLENBQUMscUJBQXFCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUM5QyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRSxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtnQkFDeEMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztTQUNKO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7QUF4RE0scUJBQVcsR0FBVyxjQUFjLENBQUM7OztJQUE1QyxzQkFBNEM7O0lBQzVDLDhCQUFtRDs7SUFNbkQsNkJBQTRCOztJQUM1QixnQ0FBa0M7O0lBQ2xDLDBDQUFxQzs7SUFDckMsb0NBQXdCOztBQWdENUIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksU0FBUyxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBKdW1wU2NvcGVDYXRlZ29yeSB9IGZyb20gXCIuL0p1bXBTY29wZUNhdGVnb3J5XCI7XHJcbmltcG9ydCB7IEp1bXBTY29wZURlZmF1bHRUeXBlIH0gZnJvbSBcIi4vSnVtcFNjb3BlRGVmYXVsdFR5cGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBKdW1wU2NvcGUgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5KdW1wU2NvcGVcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gSnVtcFNjb3BlLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IEp1bXBTY29wZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKdW1wU2NvcGUodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ2F0ZWdvcnk6IEp1bXBTY29wZUNhdGVnb3J5O1xyXG4gICAgRGVmYXVsdFR5cGU6IEp1bXBTY29wZURlZmF1bHRUeXBlO1xyXG4gICAgRGVzdGluYXRpb25BY3Rpdml0aWVzOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgRGVmYXVsdEFjdGl2aXR5OiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsLCBjYXRlZ29yeT86IEp1bXBTY29wZUNhdGVnb3J5LCBEZWZhdWx0VHlwZT86IEp1bXBTY29wZURlZmF1bHRUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuQ2F0ZWdvcnkgPSBjYXRlZ29yeSB8fCBKdW1wU2NvcGVDYXRlZ29yeS5TcGVjaWZpZWRTZXQ7XHJcbiAgICAgICAgdGhpcy5EZWZhdWx0VHlwZSA9IERlZmF1bHRUeXBlIHx8IEp1bXBTY29wZURlZmF1bHRUeXBlLkZpcnN0Tm9kZTtcclxuICAgICAgICB0aGlzLkRlc3RpbmF0aW9uQWN0aXZpdGllcyA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcbiAgICAgICAgdGhpcy5EZWZhdWx0QWN0aXZpdHkgPSAnJztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICAgICAgdGhpcy5DYXRlZ29yeSA9IEp1bXBTY29wZUNhdGVnb3J5Lkdsb2JhbDtcclxuICAgICAgICB0aGlzLkRlZmF1bHRUeXBlID0gSnVtcFNjb3BlRGVmYXVsdFR5cGUuRmlyc3ROb2RlO1xyXG4gICAgICAgIHRoaXMuRGVzdGluYXRpb25BY3Rpdml0aWVzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuICAgICAgICB0aGlzLkRlZmF1bHRBY3Rpdml0eSA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ2F0ZWdvcnlcIiwgdGhpcy5DYXRlZ29yeSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJEZWZhdWx0VHlwZVwiLCB0aGlzLkRlZmF1bHRUeXBlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkRlc3RpbmF0aW9uQWN0aXZpdGllc1wiLCB0aGlzLkRlc3RpbmF0aW9uQWN0aXZpdGllcyk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJEZWZhdWx0QWN0aXZpdHlcIiwgdGhpcy5EZWZhdWx0QWN0aXZpdHkpO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5DYXRlZ29yeSA9IG9iai5DYXRlZ29yeTtcclxuICAgICAgICB0aGlzLkRlZmF1bHRUeXBlID0gb2JqLkRlZmF1bHRUeXBlO1xyXG4gICAgICAgIHRoaXMuRGVzdGluYXRpb25BY3Rpdml0aWVzID0gb2JqLkRlc3RpbmF0aW9uQWN0aXZpdGllcztcclxuICAgICAgICB0aGlzLkRlZmF1bHRBY3Rpdml0eSA9IG9iai5EZWZhdWx0QWN0aXZpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogSnVtcFNjb3BlIHtcclxuICAgICAgICBjb25zdCBqdW1wU2NvcGUgPSBuZXcgSnVtcFNjb3BlKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGp1bXBTY29wZS5DYXRlZ29yeSA9IHRoaXMuQ2F0ZWdvcnk7XHJcbiAgICAgICAganVtcFNjb3BlLkRlZmF1bHRUeXBlID0gdGhpcy5EZWZhdWx0VHlwZTtcclxuICAgICAgICBqdW1wU2NvcGUuRGVmYXVsdEFjdGl2aXR5ID0gdGhpcy5EZWZhdWx0QWN0aXZpdHk7XHJcbiAgICAgICAganVtcFNjb3BlLkRlc3RpbmF0aW9uQWN0aXZpdGllcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGlmICh0aGlzLkRlc3RpbmF0aW9uQWN0aXZpdGllcyAmJiB0aGlzLkRlc3RpbmF0aW9uQWN0aXZpdGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZCBvZiB0aGlzLkRlc3RpbmF0aW9uQWN0aXZpdGllcykge1xyXG4gICAgICAgICAgICAgICAganVtcFNjb3BlLkRlc3RpbmF0aW9uQWN0aXZpdGllcy5wdXNoKGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqdW1wU2NvcGU7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IEp1bXBTY29wZShuZXcgQnBtbk1vZGVsKCkpKTsiXX0=