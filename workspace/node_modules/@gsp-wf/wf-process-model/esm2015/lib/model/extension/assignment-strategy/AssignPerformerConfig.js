/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExtensionElement, BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
export class AssignPerformerConfig extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AssignPerformerConfig.Clr_Type_ID;
        this.MultiSelect = true;
        this.Necessary = false;
        this.AllowGlobalAssign = false;
        this.Operator = 'currentUser';
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AssignPerformerConfig(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Operator", this.Operator);
        BpmnModelHelper.SetAttributeValue(obj, "MultiSelect", this.MultiSelect);
        BpmnModelHelper.SetAttributeValue(obj, "Necessary", this.Necessary);
        BpmnModelHelper.SetAttributeValue(obj, "AllowGlobalAssign", this.AllowGlobalAssign);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Operator = obj.Operator;
        this.MultiSelect = obj.MultiSelect;
        this.Necessary = obj.Necessary;
        this.AllowGlobalAssign = obj.AllowGlobalAssign;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const assignPerformerConfig = new AssignPerformerConfig(this.Model);
        assignPerformerConfig.Operator = this.Operator;
        assignPerformerConfig.MultiSelect = this.MultiSelect;
        assignPerformerConfig.Necessary = this.Necessary;
        assignPerformerConfig.AllowGlobalAssign = this.AllowGlobalAssign;
        return assignPerformerConfig;
    }
}
AssignPerformerConfig.Clr_Type_ID = 'wf.AssignPerformerConfig';
if (false) {
    /** @type {?} */
    AssignPerformerConfig.Clr_Type_ID;
    /** @type {?} */
    AssignPerformerConfig.prototype.ClrTypeID;
    /** @type {?} */
    AssignPerformerConfig.prototype.Operator;
    /** @type {?} */
    AssignPerformerConfig.prototype.MultiSelect;
    /** @type {?} */
    AssignPerformerConfig.prototype.Necessary;
    /** @type {?} */
    AssignPerformerConfig.prototype.AllowGlobalAssign;
}
BpmnModelHelper.RegisterElementType(new AssignPerformerConfig(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzaWduUGVyZm9ybWVyQ29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9hc3NpZ25tZW50LXN0cmF0ZWd5L0Fzc2lnblBlcmZvcm1lckNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRixNQUFNLE9BQU8scUJBQXNCLFNBQVEsZ0JBQWdCOzs7O0lBUXZELFlBQVksS0FBZ0I7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBUFIsY0FBUyxHQUFXLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztRQWEvRCxnQkFBVyxHQUFZLElBQUksQ0FBQztRQUM1QixjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLHNCQUFpQixHQUFZLEtBQUssQ0FBQztRQVAvQixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztJQUNsQyxDQUFDOzs7O0lBUEQsV0FBVztRQUNQLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFhUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFcEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUNELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0sscUJBQXFCLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25FLHFCQUFxQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9DLHFCQUFxQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3JELHFCQUFxQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2pELHFCQUFxQixDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRSxPQUFPLHFCQUFxQixDQUFDO0lBQ2pDLENBQUM7O0FBaERNLGlDQUFXLEdBQVcsMEJBQTBCLENBQUM7OztJQUF4RCxrQ0FBd0Q7O0lBQ3hELDBDQUErRDs7SUFXL0QseUNBQWlCOztJQUVqQiw0Q0FBNEI7O0lBQzVCLDBDQUEyQjs7SUFDM0Isa0RBQW1DOztBQWtDdkMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUkscUJBQXFCLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb25FbGVtZW50LCBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXNzaWduUGVyZm9ybWVyQ29uZmlnIGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9ICd3Zi5Bc3NpZ25QZXJmb3JtZXJDb25maWcnO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBBc3NpZ25QZXJmb3JtZXJDb25maWcuQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQXNzaWduUGVyZm9ybWVyQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFzc2lnblBlcmZvcm1lckNvbmZpZyh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuT3BlcmF0b3IgPSAnY3VycmVudFVzZXInO1xyXG4gICAgfVxyXG5cclxuICAgIE9wZXJhdG9yOiBzdHJpbmc7XHJcblxyXG4gICAgTXVsdGlTZWxlY3Q6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgTmVjZXNzYXJ5OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBBbGxvd0dsb2JhbEFzc2lnbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiT3BlcmF0b3JcIiwgdGhpcy5PcGVyYXRvcik7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJNdWx0aVNlbGVjdFwiLCB0aGlzLk11bHRpU2VsZWN0KTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk5lY2Vzc2FyeVwiLCB0aGlzLk5lY2Vzc2FyeSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJBbGxvd0dsb2JhbEFzc2lnblwiLCB0aGlzLkFsbG93R2xvYmFsQXNzaWduKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLk9wZXJhdG9yID0gb2JqLk9wZXJhdG9yO1xyXG4gICAgICAgIHRoaXMuTXVsdGlTZWxlY3QgPSBvYmouTXVsdGlTZWxlY3Q7XHJcbiAgICAgICAgdGhpcy5OZWNlc3NhcnkgPSBvYmouTmVjZXNzYXJ5O1xyXG4gICAgICAgIHRoaXMuQWxsb3dHbG9iYWxBc3NpZ24gPSBvYmouQWxsb3dHbG9iYWxBc3NpZ247XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQXNzaWduUGVyZm9ybWVyQ29uZmlnIHtcclxuICAgICAgICBjb25zdCBhc3NpZ25QZXJmb3JtZXJDb25maWcgPSBuZXcgQXNzaWduUGVyZm9ybWVyQ29uZmlnKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGFzc2lnblBlcmZvcm1lckNvbmZpZy5PcGVyYXRvciA9IHRoaXMuT3BlcmF0b3I7XHJcbiAgICAgICAgYXNzaWduUGVyZm9ybWVyQ29uZmlnLk11bHRpU2VsZWN0ID0gdGhpcy5NdWx0aVNlbGVjdDtcclxuICAgICAgICBhc3NpZ25QZXJmb3JtZXJDb25maWcuTmVjZXNzYXJ5ID0gdGhpcy5OZWNlc3Nhcnk7XHJcbiAgICAgICAgYXNzaWduUGVyZm9ybWVyQ29uZmlnLkFsbG93R2xvYmFsQXNzaWduID0gdGhpcy5BbGxvd0dsb2JhbEFzc2lnbjtcclxuICAgICAgICByZXR1cm4gYXNzaWduUGVyZm9ybWVyQ29uZmlnO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBBc3NpZ25QZXJmb3JtZXJDb25maWcobmV3IEJwbW5Nb2RlbCgpKSk7XHJcbiJdfQ==