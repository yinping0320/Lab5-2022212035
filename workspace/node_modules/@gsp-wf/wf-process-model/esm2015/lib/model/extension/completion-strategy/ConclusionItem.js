/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExtensionElement, BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
export class ConclusionItem extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ConclusionItem.Clr_Type_ID;
        /**
         * 是否默认
         *
         */
        this.IsDefault = false;
        this.commentNecessary = false;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ConclusionItem(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "Text", this.Text);
        BpmnModelHelper.SetAttributeValue(obj, "WorkFlowAction", this.WorkFlowAction);
        BpmnModelHelper.SetAttributeValue(obj, "IsDefault", this.IsDefault);
        BpmnModelHelper.SetAttributeValue(obj, "CommentNecessary", this.commentNecessary);
        BpmnModelHelper.SetAttributeValue(obj, "Certification", this.certification);
        BpmnModelHelper.SetAttributeValue(obj, "AttachmentNecessary", this.attachmentNecessary);
        BpmnModelHelper.SetAttributeValue(obj, "SignatureNecessary", this.signatureNecessary);
        BpmnModelHelper.SetAttributeValue(obj, "DefaultComment", this.defaultComment);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Value = obj.Value;
        this.Text = obj.Text;
        this.WorkFlowAction = obj.WorkFlowAction;
        this.IsDefault = obj.IsDefault;
        this.commentNecessary = obj.CommentNecessary;
        this.certification = ExtensionMethod.GetAttributeValue4Boolean(obj, "Certification");
        this.attachmentNecessary = ExtensionMethod.GetAttributeValue4Boolean(obj, "AttachmentNecessary");
        this.signatureNecessary = ExtensionMethod.GetAttributeValue4Boolean(obj, "SignatureNecessary");
        this.defaultComment = ExtensionMethod.GetAttributeValue4String(obj, "DefaultComment");
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const conclusion = new ConclusionItem(this.Model);
        conclusion.Value = this.Value;
        conclusion.Text = this.Text;
        conclusion.WorkFlowAction = this.WorkFlowAction;
        conclusion.IsDefault = this.IsDefault;
        conclusion.commentNecessary = this.commentNecessary;
        conclusion.certification = this.certification;
        conclusion.attachmentNecessary = this.attachmentNecessary;
        conclusion.signatureNecessary = this.signatureNecessary;
        conclusion.defaultComment = this.defaultComment;
        return conclusion;
    }
}
ConclusionItem.Clr_Type_ID = "wf.ConclusionItem";
if (false) {
    /** @type {?} */
    ConclusionItem.Clr_Type_ID;
    /** @type {?} */
    ConclusionItem.prototype.ClrTypeID;
    /**
     * 审批结论值
     *
     * @type {?}
     */
    ConclusionItem.prototype.Value;
    /**
     * 显示文本
     *
     * @type {?}
     */
    ConclusionItem.prototype.Text;
    /**
     * 流程动作
     *
     * @type {?}
     */
    ConclusionItem.prototype.WorkFlowAction;
    /**
     * 是否默认
     *
     * @type {?}
     */
    ConclusionItem.prototype.IsDefault;
    /** @type {?} */
    ConclusionItem.prototype.commentNecessary;
    /**
     * 数字签名
     * @type {?}
     */
    ConclusionItem.prototype.certification;
    /**
     * 附件上传
     * @type {?}
     */
    ConclusionItem.prototype.attachmentNecessary;
    /**
     * 手写签名必填
     * @type {?}
     */
    ConclusionItem.prototype.signatureNecessary;
    /**
     * 默认意见
     * @type {?}
     */
    ConclusionItem.prototype.defaultComment;
}
BpmnModelHelper.RegisterElementType(new ConclusionItem(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,