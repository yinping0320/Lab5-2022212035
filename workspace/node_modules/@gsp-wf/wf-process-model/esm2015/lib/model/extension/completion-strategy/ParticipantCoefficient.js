/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelHelper, MexElement } from "@edp-pmf/bpmn-model";
export class ParticipantCoefficient extends MexElement {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} name
     * @param {?=} code
     * @param {?=} type
     * @param {?=} mustCompleted
     * @param {?=} coefficient
     */
    constructor(model, id, name, code, type, mustCompleted, coefficient) {
        super(model);
        this.participantId = id || '';
        this.participantName = name || '';
        this.participantCode = code || '';
        this.participantType = type || '';
        this.mustCompleted = mustCompleted || true;
        this.coefficient = coefficient || 0;
    }
    //序列化内容
    /**
     * @return {?}
     */
    get ParticipantId() { return this.participantId; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantId(value) { this.participantId = value; }
    /**
     * @return {?}
     */
    get ParticipantName() { return this.participantName; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantName(value) { this.participantName = value; }
    /**
     * @return {?}
     */
    get ParticipantCode() { return this.participantCode; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantCode(value) { this.participantCode = value; }
    /**
     * @return {?}
     */
    get ParticipantType() { return this.participantType; }
    /**
     * @param {?} value
     * @return {?}
     */
    set ParticipantType(value) { this.participantType = value; }
    /**
     * @return {?}
     */
    get MustCompleted() { return this.mustCompleted; }
    /**
     * @param {?} value
     * @return {?}
     */
    set MustCompleted(value) { this.mustCompleted = value; }
    /**
     * @return {?}
     */
    get Coefficient() { return this.coefficient; }
    /**
     * @param {?} value
     * @return {?}
     */
    set Coefficient(value) { this.coefficient = value; }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantId', this.ParticipantId);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantName', this.ParticipantName);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantCode', this.ParticipantCode);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantType', this.ParticipantType);
        BpmnModelHelper.SetAttributeValue(obj, 'MustCompleted', this.MustCompleted);
        BpmnModelHelper.SetAttributeValue(obj, 'Coefficient', this.Coefficient);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ParticipantId = obj.ParticipantId;
        this.ParticipantCode = obj.ParticipantCode;
        this.ParticipantName = obj.ParticipantName;
        this.ParticipantType = obj.ParticipantType;
        this.MustCompleted = obj.MustCompleted;
        this.Coefficient = obj.Coefficient;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantId;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantName;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantCode;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantType;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.mustCompleted;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.coefficient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRDb2VmZmljaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9leHRlbnNpb24vY29tcGxldGlvbi1zdHJhdGVneS9QYXJ0aWNpcGFudENvZWZmaWNpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWEsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTdFLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxVQUFVOzs7Ozs7Ozs7O0lBUWxELFlBQVksS0FBZ0IsRUFBRSxFQUFXLEVBQUUsSUFBYSxFQUFFLElBQWEsRUFBRSxJQUFhLEVBQUUsYUFBdUIsRUFBRSxXQUFvQjtRQUNqSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLElBQUksSUFBSSxDQUFDO1FBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUdELElBQUksYUFBYSxLQUFLLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBQ2xELElBQUksYUFBYSxDQUFDLEtBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Ozs7SUFFaEUsSUFBSSxlQUFlLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDdEQsSUFBSSxlQUFlLENBQUMsS0FBYSxJQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzs7OztJQUVwRSxJQUFJLGVBQWUsS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDOzs7OztJQUN0RCxJQUFJLGVBQWUsQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7O0lBRXBFLElBQUksZUFBZSxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBQ3RELElBQUksZUFBZSxDQUFDLEtBQWEsSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Ozs7SUFFcEUsSUFBSSxhQUFhLEtBQWMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDM0QsSUFBSSxhQUFhLENBQUMsS0FBYyxJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzs7OztJQUVqRSxJQUFJLFdBQVcsS0FBYSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDOzs7OztJQUN0RCxJQUFJLFdBQVcsQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7OztJQUVsRCxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXhFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxHQUFRO1FBQ3ZCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDdkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDO1FBQzNDLElBQUksQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQztRQUMzQyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7Ozs7OztJQS9ERywrQ0FBOEI7Ozs7O0lBQzlCLGlEQUFnQzs7Ozs7SUFDaEMsaURBQWdDOzs7OztJQUNoQyxpREFBZ0M7Ozs7O0lBQ2hDLCtDQUErQjs7Ozs7SUFDL0IsNkNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIE1leEVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnRpY2lwYW50Q29lZmZpY2llbnQgZXh0ZW5kcyBNZXhFbGVtZW50IHtcclxuICAgIHByaXZhdGUgcGFydGljaXBhbnRJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBwYXJ0aWNpcGFudE5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgcGFydGljaXBhbnRDb2RlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHBhcnRpY2lwYW50VHlwZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBtdXN0Q29tcGxldGVkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBjb2VmZmljaWVudDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwsIGlkPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nLCBjb2RlPzogc3RyaW5nLCB0eXBlPzogc3RyaW5nLCBtdXN0Q29tcGxldGVkPzogYm9vbGVhbiwgY29lZmZpY2llbnQ/OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudElkID0gaWQgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudE5hbWUgPSBuYW1lIHx8ICcnO1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRDb2RlID0gY29kZSB8fCAnJztcclxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50VHlwZSA9IHR5cGUgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5tdXN0Q29tcGxldGVkID0gbXVzdENvbXBsZXRlZCB8fCB0cnVlO1xyXG4gICAgICAgIHRoaXMuY29lZmZpY2llbnQgPSBjb2VmZmljaWVudCB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5bqP5YiX5YyW5YaF5a65XHJcbiAgICBnZXQgUGFydGljaXBhbnRJZCgpIHsgcmV0dXJuIHRoaXMucGFydGljaXBhbnRJZDsgfVxyXG4gICAgc2V0IFBhcnRpY2lwYW50SWQodmFsdWU6IHN0cmluZykgeyB0aGlzLnBhcnRpY2lwYW50SWQgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBQYXJ0aWNpcGFudE5hbWUoKSB7IHJldHVybiB0aGlzLnBhcnRpY2lwYW50TmFtZTsgfVxyXG4gICAgc2V0IFBhcnRpY2lwYW50TmFtZSh2YWx1ZTogc3RyaW5nKSB7IHRoaXMucGFydGljaXBhbnROYW1lID0gdmFsdWU7IH1cclxuXHJcbiAgICBnZXQgUGFydGljaXBhbnRDb2RlKCkgeyByZXR1cm4gdGhpcy5wYXJ0aWNpcGFudENvZGU7IH1cclxuICAgIHNldCBQYXJ0aWNpcGFudENvZGUodmFsdWU6IHN0cmluZykgeyB0aGlzLnBhcnRpY2lwYW50Q29kZSA9IHZhbHVlOyB9XHJcblxyXG4gICAgZ2V0IFBhcnRpY2lwYW50VHlwZSgpIHsgcmV0dXJuIHRoaXMucGFydGljaXBhbnRUeXBlOyB9XHJcbiAgICBzZXQgUGFydGljaXBhbnRUeXBlKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5wYXJ0aWNpcGFudFR5cGUgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBNdXN0Q29tcGxldGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5tdXN0Q29tcGxldGVkOyB9XHJcbiAgICBzZXQgTXVzdENvbXBsZXRlZCh2YWx1ZTogYm9vbGVhbikgeyB0aGlzLm11c3RDb21wbGV0ZWQgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBDb2VmZmljaWVudCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5jb2VmZmljaWVudDsgfVxyXG4gICAgc2V0IENvZWZmaWNpZW50KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5jb2VmZmljaWVudCA9IHZhbHVlOyB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnUGFydGljaXBhbnRJZCcsIHRoaXMuUGFydGljaXBhbnRJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ1BhcnRpY2lwYW50TmFtZScsIHRoaXMuUGFydGljaXBhbnROYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnUGFydGljaXBhbnRDb2RlJywgdGhpcy5QYXJ0aWNpcGFudENvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdQYXJ0aWNpcGFudFR5cGUnLCB0aGlzLlBhcnRpY2lwYW50VHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ011c3RDb21wbGV0ZWQnLCB0aGlzLk11c3RDb21wbGV0ZWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdDb2VmZmljaWVudCcsIHRoaXMuQ29lZmZpY2llbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLlBhcnRpY2lwYW50SWQgPSBvYmouUGFydGljaXBhbnRJZDtcclxuICAgICAgICB0aGlzLlBhcnRpY2lwYW50Q29kZSA9IG9iai5QYXJ0aWNpcGFudENvZGU7XHJcbiAgICAgICAgdGhpcy5QYXJ0aWNpcGFudE5hbWUgPSBvYmouUGFydGljaXBhbnROYW1lO1xyXG4gICAgICAgIHRoaXMuUGFydGljaXBhbnRUeXBlID0gb2JqLlBhcnRpY2lwYW50VHlwZTtcclxuICAgICAgICB0aGlzLk11c3RDb21wbGV0ZWQgPSBvYmouTXVzdENvbXBsZXRlZDtcclxuICAgICAgICB0aGlzLkNvZWZmaWNpZW50ID0gb2JqLkNvZWZmaWNpZW50O1xyXG4gICAgfVxyXG59Il19