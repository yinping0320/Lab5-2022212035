/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { AsyncCallBackType } from "../../misc/AsyncCallBackType";
import { ExecutionType } from "../../misc/ExecutionType";
import { ActualParameter } from "../../parameter/WFActualParameter";
import { WFExtensionElement } from "../WFExtensionElement";
import { ToolTime } from "./ToolTime";
/**
 * @abstract
 */
export class Tool extends WFExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = Tool.Clr_Type_ID;
        this.ActualParameters = new Array();
        this.Execution = ExecutionType.SYNCHRONOUS;
        this.AsyncCallBackType = AsyncCallBackType.NO;
        this.Time = ToolTime.UNDEFINITION;
        this.isForCompensation = false;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        /** @type {?} */
        let actualParametersElements = [];
        if (this.ActualParameters !== null && this.ActualParameters.length > 0) {
            this.ActualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        BpmnModelHelper.SetAttributeValue(obj, 'Execution', this.Execution);
        BpmnModelHelper.SetAttributeValue(obj, 'Time', this.Time);
        BpmnModelHelper.SetAttributeValue(obj, 'IsForCompensation', this.isForCompensation);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                let actualParameter = new ActualParameter(this.Model);
                actualParameter.LoadFromJsonObject(item);
                this.ActualParameters.push(actualParameter);
            }));
        }
        this.Execution = (/** @type {?} */ (obj.Execution));
        this.Time = (/** @type {?} */ (obj.Time));
        this.isForCompensation = obj.IsForCompensation;
    }
}
Tool.Clr_Type_ID = "wf.Tool";
if (false) {
    /** @type {?} */
    Tool.Clr_Type_ID;
    /** @type {?} */
    Tool.prototype.ClrTypeID;
    /** @type {?} */
    Tool.prototype.ActualParameters;
    /** @type {?} */
    Tool.prototype.Execution;
    /** @type {?} */
    Tool.prototype.AsyncCallBackType;
    /** @type {?} */
    Tool.prototype.Time;
    /** @type {?} */
    Tool.prototype.isForCompensation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9leHRlbnNpb24vdG9vbC9Ub29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWEsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7O0FBRXRDLE1BQU0sT0FBZ0IsSUFBSyxTQUFRLGtCQUFrQjs7OztJQUlqRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUhSLGNBQVMsR0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBTTlDLHFCQUFnQixHQUEyQixJQUFJLEtBQUssRUFBbUIsQ0FBQztRQUN4RSxjQUFTLEdBQWtCLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDckQsc0JBQWlCLEdBQXNCLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUM1RCxTQUFJLEdBQWEsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUN2QyxzQkFBaUIsR0FBWSxLQUFLLENBQUM7SUFObkMsQ0FBQzs7Ozs7SUFRUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFOztZQUVqQyx3QkFBd0IsR0FBRyxFQUFFO1FBQ2pDLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTzs7OztZQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ25DLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1lBQzlELENBQUMsRUFBQyxDQUFDO1NBQ047UUFFRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDckYsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRXBGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxHQUFRO1FBQ3ZCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFFMUIsZ0JBQWdCLEdBQUcsbUJBQUEsR0FBRyxDQUFDLGdCQUFnQixFQUFjO1FBQ3pELElBQUksZ0JBQWdCLEtBQUssSUFBSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUQsZ0JBQWdCLENBQUMsT0FBTzs7OztZQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7O29CQUMxQixlQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDckQsZUFBZSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2hELENBQUMsRUFBQyxDQUFDO1NBQ047UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFBLEdBQUcsQ0FBQyxTQUFTLEVBQWlCLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBQSxHQUFHLENBQUMsSUFBSSxFQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztJQUNuRCxDQUFDOztBQWxETSxnQkFBVyxHQUFXLFNBQVMsQ0FBQzs7O0lBQXZDLGlCQUF1Qzs7SUFDdkMseUJBQThDOztJQU05QyxnQ0FBd0U7O0lBQ3hFLHlCQUFxRDs7SUFDckQsaUNBQTREOztJQUM1RCxvQkFBdUM7O0lBQ3ZDLGlDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgQXN5bmNDYWxsQmFja1R5cGUgfSBmcm9tIFwiLi4vLi4vbWlzYy9Bc3luY0NhbGxCYWNrVHlwZVwiO1xyXG5pbXBvcnQgeyBFeGVjdXRpb25UeXBlIH0gZnJvbSBcIi4uLy4uL21pc2MvRXhlY3V0aW9uVHlwZVwiO1xyXG5pbXBvcnQgeyBBY3R1YWxQYXJhbWV0ZXIgfSBmcm9tIFwiLi4vLi4vcGFyYW1ldGVyL1dGQWN0dWFsUGFyYW1ldGVyXCI7XHJcbmltcG9ydCB7IFdGRXh0ZW5zaW9uRWxlbWVudCB9IGZyb20gXCIuLi9XRkV4dGVuc2lvbkVsZW1lbnRcIjtcclxuaW1wb3J0IHsgVG9vbFRpbWUgfSBmcm9tIFwiLi9Ub29sVGltZVwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRvb2wgZXh0ZW5kcyBXRkV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLlRvb2xcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gVG9vbC5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIEFjdHVhbFBhcmFtZXRlcnM6IEFycmF5PEFjdHVhbFBhcmFtZXRlcj4gPSBuZXcgQXJyYXk8QWN0dWFsUGFyYW1ldGVyPigpO1xyXG4gICAgRXhlY3V0aW9uOiBFeGVjdXRpb25UeXBlID0gRXhlY3V0aW9uVHlwZS5TWU5DSFJPTk9VUztcclxuICAgIEFzeW5jQ2FsbEJhY2tUeXBlOiBBc3luY0NhbGxCYWNrVHlwZSA9IEFzeW5jQ2FsbEJhY2tUeXBlLk5PO1xyXG4gICAgVGltZTogVG9vbFRpbWUgPSBUb29sVGltZS5VTkRFRklOSVRJT047XHJcbiAgICBpc0ZvckNvbXBlbnNhdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgbGV0IGFjdHVhbFBhcmFtZXRlcnNFbGVtZW50cyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLkFjdHVhbFBhcmFtZXRlcnMgIT09IG51bGwgJiYgdGhpcy5BY3R1YWxQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5BY3R1YWxQYXJhbWV0ZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGFjdHVhbFBhcmFtZXRlcnNFbGVtZW50cy5wdXNoKGl0ZW0uQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkFjdHVhbFBhcmFtZXRlcnNcIiwgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnRXhlY3V0aW9uJywgdGhpcy5FeGVjdXRpb24pO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdUaW1lJywgdGhpcy5UaW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnSXNGb3JDb21wZW5zYXRpb24nLCB0aGlzLmlzRm9yQ29tcGVuc2F0aW9uKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgbGV0IGFjdHVhbFBhcmFtZXRlcnMgPSBvYmouQWN0dWFsUGFyYW1ldGVycyBhcyBBcnJheTxhbnk+O1xyXG4gICAgICAgIGlmIChhY3R1YWxQYXJhbWV0ZXJzICE9PSBudWxsICYmIGFjdHVhbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBhY3R1YWxQYXJhbWV0ZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBhY3R1YWxQYXJhbWV0ZXIgPSBuZXcgQWN0dWFsUGFyYW1ldGVyKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgYWN0dWFsUGFyYW1ldGVyLkxvYWRGcm9tSnNvbk9iamVjdChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuQWN0dWFsUGFyYW1ldGVycy5wdXNoKGFjdHVhbFBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5FeGVjdXRpb24gPSBvYmouRXhlY3V0aW9uIGFzIEV4ZWN1dGlvblR5cGU7XHJcbiAgICAgICAgdGhpcy5UaW1lID0gb2JqLlRpbWUgYXMgVG9vbFRpbWU7XHJcbiAgICAgICAgdGhpcy5pc0ZvckNvbXBlbnNhdGlvbiA9IG9iai5Jc0ZvckNvbXBlbnNhdGlvbjtcclxuICAgIH1cclxufVxyXG4gICAgLy8gQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFRvb2wobmV3IEJwbW5Nb2RlbCgpKSk7Il19