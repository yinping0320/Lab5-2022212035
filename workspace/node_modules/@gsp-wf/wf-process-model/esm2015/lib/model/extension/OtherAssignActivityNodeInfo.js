/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { Condition } from "./condition-expression/Condition";
export class OtherAssignActivityNodeInfo extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OtherAssignActivityNodeInfo.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefinitionId", this.activityDefinitionId);
        BpmnModelHelper.SetAttributeValue(obj, "Required", this.required);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.activityDefinitionId = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefinitionId");
        this.required = ExtensionMethod.GetAttributeValue4Boolean(obj, "Required");
        /** @type {?} */
        const conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const otherAssignActivityNodeInfo = new OtherAssignActivityNodeInfo(this.Model);
        otherAssignActivityNodeInfo.activityDefinitionId = this.activityDefinitionId;
        if (this.condition) {
            otherAssignActivityNodeInfo.condition = this.condition.clone();
        }
        otherAssignActivityNodeInfo.required = this.required;
        return otherAssignActivityNodeInfo;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OtherAssignActivityNodeInfo(this.Model);
    }
}
OtherAssignActivityNodeInfo.Clr_Type_ID = "wf.OtherAssignActivityNodeInfo";
if (false) {
    /** @type {?} */
    OtherAssignActivityNodeInfo.Clr_Type_ID;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.ClrTypeID;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.activityDefinitionId;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.condition;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.required;
}
BpmnModelHelper.RegisterElementType(new OtherAssignActivityNodeInfo(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9PdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUU3RCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsZ0JBQWdCOzs7O0lBVzdELFlBQVksS0FBZ0I7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBVFIsY0FBUyxHQUFXLDJCQUEyQixDQUFDLFdBQVcsQ0FBQztJQVVyRSxDQUFDOzs7OztJQUVTLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUMxRixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsSUFBRyxJQUFJLENBQUMsU0FBUyxFQUFDO1lBQ2QsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7U0FDN0Y7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUNsRyxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7O2NBQ3JFLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO1FBQzVFLElBQUksZ0JBQWdCLEVBQUU7O2tCQUNaLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzNDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssMkJBQTJCLEdBQUcsSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9FLDJCQUEyQixDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztRQUM3RSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsMkJBQTJCLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDbEU7UUFDRCwyQkFBMkIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyRCxPQUFPLDJCQUEyQixDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLDJCQUEyQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDOztBQXBETSx1Q0FBVyxHQUFXLGdDQUFnQyxDQUFDOzs7SUFBOUQsd0NBQThEOztJQUM5RCxnREFBcUU7O0lBRXJFLDJEQUE2Qjs7SUFFN0IsZ0RBQXFCOztJQUVyQiwrQ0FBa0I7O0FBK0N0QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBDb25kaXRpb24gfSBmcm9tIFwiLi9jb25kaXRpb24tZXhwcmVzc2lvbi9Db25kaXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBPdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8gZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuXHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvXCI7XHJcbiAgICByZWFkb25seSBDbHJUeXBlSUQ6IHN0cmluZyA9IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mby5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBhY3Rpdml0eURlZmluaXRpb25JZDogc3RyaW5nO1xyXG5cclxuICAgIGNvbmRpdGlvbjogQ29uZGl0aW9uO1xyXG5cclxuICAgIHJlcXVpcmVkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkFjdGl2aXR5RGVmaW5pdGlvbklkXCIsIHRoaXMuYWN0aXZpdHlEZWZpbml0aW9uSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiUmVxdWlyZWRcIiwgdGhpcy5yZXF1aXJlZCk7XHJcbiAgICAgICAgaWYodGhpcy5jb25kaXRpb24pe1xyXG4gICAgICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvbmRpdGlvblwiLCB0aGlzLmNvbmRpdGlvbi5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG4gICAgICAgIHRoaXMuYWN0aXZpdHlEZWZpbml0aW9uSWQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJBY3Rpdml0eURlZmluaXRpb25JZFwiKTtcclxuICAgICAgICB0aGlzLnJlcXVpcmVkID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNEJvb2xlYW4ob2JqLCBcIlJlcXVpcmVkXCIpO1xyXG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbkVsZW1lbnQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWUob2JqLCAnQ29uZGl0aW9uJyk7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gbmV3IENvbmRpdGlvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICAgICAgY29uZGl0aW9uLkxvYWRGcm9tSnNvbk9iamVjdChjb25kaXRpb25FbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyB7XHJcbiAgICAgICAgY29uc3Qgb3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvID0gbmV3IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyh0aGlzLk1vZGVsKTtcclxuICAgICAgICBvdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8uYWN0aXZpdHlEZWZpbml0aW9uSWQgPSB0aGlzLmFjdGl2aXR5RGVmaW5pdGlvbklkO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBvdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8uY29uZGl0aW9uID0gdGhpcy5jb25kaXRpb24uY2xvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvLnJlcXVpcmVkID0gdGhpcy5yZXF1aXJlZDtcclxuICAgICAgICByZXR1cm4gb3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8odGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyhuZXcgQnBtbk1vZGVsKCkpKTsiXX0=