/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
export class ExtendProperty extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ExtendProperty.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Key", this.key);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.key = ExtensionMethod.GetAttributeValue4String(obj, "Key");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ExtendProperty(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const extendProperty = new ExtendProperty(this.Model);
        extendProperty.key = this.key;
        extendProperty.value = this.value;
        return extendProperty;
    }
}
ExtendProperty.Clr_Type_ID = "wf.ExtendProperty";
if (false) {
    /** @type {?} */
    ExtendProperty.Clr_Type_ID;
    /** @type {?} */
    ExtendProperty.prototype.ClrTypeID;
    /**
     * 扩展属性key值
     * @type {?}
     */
    ExtendProperty.prototype.key;
    /**
     * 扩展属性value值
     * @type {?}
     */
    ExtendProperty.prototype.value;
}
BpmnModelHelper.RegisterElementType(new ExtendProperty(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5kUHJvcGVydHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvRXh0ZW5kUHJvcGVydHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBHLE1BQU0sT0FBTyxjQUFlLFNBQVEsZ0JBQWdCOzs7O0lBYWhELFlBQVksS0FBZ0I7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBWlIsY0FBUyxHQUFXLGNBQWMsQ0FBQyxXQUFXLENBQUM7SUFheEQsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxHQUFHLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEUsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNyRCxjQUFjLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDOUIsY0FBYyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRWxDLE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7O0FBN0NNLDBCQUFXLEdBQVcsbUJBQW1CLENBQUM7OztJQUFqRCwyQkFBaUQ7O0lBQ2pELG1DQUF3RDs7Ozs7SUFLeEQsNkJBQVk7Ozs7O0lBSVosK0JBQWM7O0FBcUNsQixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciwgRXh0ZW5zaW9uRWxlbWVudCwgRXh0ZW5zaW9uTWV0aG9kIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHRlbmRQcm9wZXJ0eSBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLkV4dGVuZFByb3BlcnR5XCI7XHJcbiAgICByZWFkb25seSBDbHJUeXBlSUQ6IHN0cmluZyA9IEV4dGVuZFByb3BlcnR5LkNscl9UeXBlX0lEO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omp5bGV5bGe5oCna2V55YC8XHJcbiAgICAgKi9cclxuICAgIGtleTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmianlsZXlsZ7mgKd2YWx1ZeWAvFxyXG4gICAgICovXHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiS2V5XCIsIHRoaXMua2V5KTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhbHVlXCIsIHRoaXMudmFsdWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmtleSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIktleVwiKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiVmFsdWVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogRXh0ZW5kUHJvcGVydHkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXh0ZW5kUHJvcGVydHkodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogRXh0ZW5kUHJvcGVydHkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZFByb3BlcnR5ID0gbmV3IEV4dGVuZFByb3BlcnR5KHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGV4dGVuZFByb3BlcnR5LmtleSA9IHRoaXMua2V5O1xyXG4gICAgICAgIGV4dGVuZFByb3BlcnR5LnZhbHVlID0gdGhpcy52YWx1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFByb3BlcnR5O1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBFeHRlbmRQcm9wZXJ0eShuZXcgQnBtbk1vZGVsKCkpKTtcclxuIl19