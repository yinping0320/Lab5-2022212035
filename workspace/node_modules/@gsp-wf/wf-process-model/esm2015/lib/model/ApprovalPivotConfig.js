/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionMethod, ExtensionElement } from "@edp-pmf/bpmn-model";
import { ApprovalPivot } from "./ApprovalPivot";
export class ApprovalPivotConfig extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = ApprovalPivotConfig.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.approvalPivots = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Title", this.title);
        ExtensionMethod.SetAttributeValue(obj, "Enable", this.enable);
        ExtensionMethod.SetAttributeValue(obj, "Expand", this.expand);
        /** @type {?} */
        const approvalPivots = new Array();
        if (this.approvalPivots !== null && this.approvalPivots.length > 0) {
            this.approvalPivots.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                approvalPivots.push(item.ConvertToJsonObject());
            }));
        }
        ExtensionMethod.SetAttributeValue(obj, "ApprovalPivots", approvalPivots);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.title = ExtensionMethod.GetAttributeValue4String(obj, "Title");
        this.enable = ExtensionMethod.GetAttributeValue4Boolean(obj, "Enable");
        this.expand = ExtensionMethod.GetAttributeValue4Boolean(obj, "Expand");
        /** @type {?} */
        const approvalPivots = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, "ApprovalPivots")));
        if (approvalPivots !== null && approvalPivots.length > 0) {
            approvalPivots.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                const approvalPivot = new ApprovalPivot(this.Model);
                approvalPivot.LoadFromJsonObject(item);
                this.approvalPivots.push(approvalPivot);
            }));
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ApprovalPivotConfig(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const approvalPivotConfig = new ApprovalPivotConfig(this.Model);
        approvalPivotConfig.title = this.title;
        approvalPivotConfig.enable = this.enable;
        approvalPivotConfig.expand = this.expand;
        approvalPivotConfig.approvalPivots = new Array();
        if (this.approvalPivots && this.approvalPivots.length > 0) {
            for (const p of this.approvalPivots) {
                /** @type {?} */
                const approvalPivot = p.clone();
                approvalPivotConfig.approvalPivots.push(approvalPivot);
            }
        }
        return approvalPivotConfig;
    }
}
ApprovalPivotConfig.Clr_Type_ID = "wf.ApprovalPivotConfig";
if (false) {
    /** @type {?} */
    ApprovalPivotConfig.Clr_Type_ID;
    /** @type {?} */
    ApprovalPivotConfig.prototype.ClrTypeID;
    /** @type {?} */
    ApprovalPivotConfig.prototype.title;
    /** @type {?} */
    ApprovalPivotConfig.prototype.enable;
    /** @type {?} */
    ApprovalPivotConfig.prototype.expand;
    /** @type {?} */
    ApprovalPivotConfig.prototype.approvalPivots;
}
BpmnModelHelper.RegisterElementType(new ApprovalPivotConfig(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwcm92YWxQaXZvdENvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9BcHByb3ZhbFBpdm90Q29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGdCQUFnQjs7OztJQVNyRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVJSLGNBQVMsR0FBVyxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7SUFTN0QsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUNyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Y0FDeEQsY0FBYyxHQUFHLElBQUksS0FBSyxFQUFFO1FBQ2xDLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2hFLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTzs7OztZQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ2pDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztZQUNwRCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUV6RSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBUTtRQUN2QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7O2NBQ2pFLGNBQWMsR0FBRyxtQkFBQSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLEVBQWM7UUFFN0YsSUFBSSxjQUFjLEtBQUssSUFBSSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RELGNBQWMsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTs7c0JBQ3RCLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNuRCxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzVDLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0ssbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9ELG1CQUFtQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pDLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pDLG1CQUFtQixDQUFDLGNBQWMsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2pELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkQsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFOztzQkFDM0IsYUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQy9CLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDMUQ7U0FDSjtRQUVELE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQzs7QUFuRU0sK0JBQVcsR0FBVyx3QkFBd0IsQ0FBQzs7O0lBQXRELGdDQUFzRDs7SUFDdEQsd0NBQTZEOztJQUU3RCxvQ0FBYzs7SUFDZCxxQ0FBZ0I7O0lBQ2hCLHFDQUFnQjs7SUFDaEIsNkNBQXFDOztBQStEekMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksbUJBQW1CLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciwgRXh0ZW5zaW9uTWV0aG9kLCBFeHRlbnNpb25FbGVtZW50IH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgQXBwcm92YWxQaXZvdCB9IGZyb20gXCIuL0FwcHJvdmFsUGl2b3RcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHByb3ZhbFBpdm90Q29uZmlnIGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuQXBwcm92YWxQaXZvdENvbmZpZ1wiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBBcHByb3ZhbFBpdm90Q29uZmlnLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBlbmFibGU6IGJvb2xlYW47XHJcbiAgICBleHBhbmQ6IGJvb2xlYW47XHJcbiAgICBhcHByb3ZhbFBpdm90czogQXJyYXk8QXBwcm92YWxQaXZvdD47XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICAgICAgdGhpcy5hcHByb3ZhbFBpdm90cyA9IG5ldyBBcnJheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVGl0bGVcIiwgdGhpcy50aXRsZSk7XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJFbmFibGVcIiwgdGhpcy5lbmFibGUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRXhwYW5kXCIsIHRoaXMuZXhwYW5kKTtcclxuICAgICAgICBjb25zdCBhcHByb3ZhbFBpdm90cyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGlmICh0aGlzLmFwcHJvdmFsUGl2b3RzICE9PSBudWxsICYmIHRoaXMuYXBwcm92YWxQaXZvdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcHJvdmFsUGl2b3RzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGFwcHJvdmFsUGl2b3RzLnB1c2goaXRlbS5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJBcHByb3ZhbFBpdm90c1wiLCBhcHByb3ZhbFBpdm90cyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIlRpdGxlXCIpO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNEJvb2xlYW4ob2JqLCBcIkVuYWJsZVwiKTtcclxuICAgICAgICB0aGlzLmV4cGFuZCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRCb29sZWFuKG9iaiwgXCJFeHBhbmRcIik7XHJcbiAgICAgICAgY29uc3QgYXBwcm92YWxQaXZvdHMgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkFwcHJvdmFsUGl2b3RzXCIpIGFzIEFycmF5PGFueT47XHJcblxyXG4gICAgICAgIGlmIChhcHByb3ZhbFBpdm90cyAhPT0gbnVsbCAmJiBhcHByb3ZhbFBpdm90cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGFwcHJvdmFsUGl2b3RzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsUGl2b3QgPSBuZXcgQXBwcm92YWxQaXZvdCh0aGlzLk1vZGVsKTtcclxuICAgICAgICAgICAgICAgIGFwcHJvdmFsUGl2b3QuTG9hZEZyb21Kc29uT2JqZWN0KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHByb3ZhbFBpdm90cy5wdXNoKGFwcHJvdmFsUGl2b3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQXBwcm92YWxQaXZvdENvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcHByb3ZhbFBpdm90Q29uZmlnKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IEFwcHJvdmFsUGl2b3RDb25maWcge1xyXG4gICAgICAgIGNvbnN0IGFwcHJvdmFsUGl2b3RDb25maWcgPSBuZXcgQXBwcm92YWxQaXZvdENvbmZpZyh0aGlzLk1vZGVsKTtcclxuICAgICAgICBhcHByb3ZhbFBpdm90Q29uZmlnLnRpdGxlID0gdGhpcy50aXRsZTtcclxuICAgICAgICBhcHByb3ZhbFBpdm90Q29uZmlnLmVuYWJsZSA9IHRoaXMuZW5hYmxlO1xyXG4gICAgICAgIGFwcHJvdmFsUGl2b3RDb25maWcuZXhwYW5kID0gdGhpcy5leHBhbmQ7XHJcbiAgICAgICAgYXBwcm92YWxQaXZvdENvbmZpZy5hcHByb3ZhbFBpdm90cyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGlmICh0aGlzLmFwcHJvdmFsUGl2b3RzICYmIHRoaXMuYXBwcm92YWxQaXZvdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgdGhpcy5hcHByb3ZhbFBpdm90cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXBwcm92YWxQaXZvdCA9IHAuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGFwcHJvdmFsUGl2b3RDb25maWcuYXBwcm92YWxQaXZvdHMucHVzaChhcHByb3ZhbFBpdm90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFwcHJvdmFsUGl2b3RDb25maWc7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IEFwcHJvdmFsUGl2b3RDb25maWcobmV3IEJwbW5Nb2RlbCgpKSk7Il19