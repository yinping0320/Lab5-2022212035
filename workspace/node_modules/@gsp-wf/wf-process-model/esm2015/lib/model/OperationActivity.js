/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { BackWardRule } from "./extension/completion-strategy/BackWardRule";
import { ConclusionItem } from "./extension/completion-strategy/ConclusionItem";
import { WorkFlowAction } from "./extension/completion-strategy/WorkFlowAction";
import { Component } from "./extension/tool/Component";
import { UserActivity } from "./flow-node/UserActivity";
import { OrganizationPotentialOwner } from "./OrganizationPotentialOwner";
import { ActivityExecutorParticipant } from "./participants/old/ActivityExecutorParticipant";
import { ComponentParticipant } from "./participants/old/ComponentParticipant";
import { MatrixParticipant } from "./participants/old/MatrixParticipant";
import { PositionParticipant } from "./participants/old/PositionParticipant";
import { ReportingLineParticipant } from "./participants/old/ReportingLineParticipant";
import { UserParticipant } from "./participants/old/UserParticipant";
import { PotentialOwnerImpl } from "./PotentialOwnerImpl";
import { HumanPerformerImpl } from "./HumanPerformerImpl";
export class OperationActivity extends UserActivity {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = OperationActivity.Clr_Type_ID;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    initConclusions(model) {
        /** @type {?} */
        let submit = new ConclusionItem(model);
        submit.Value = 'Send';
        submit.Text = '发送';
        submit.WorkFlowAction = WorkFlowAction.Forward;
        submit.IsDefault = true;
        submit.commentNecessary = false;
        this.Conclusions.push(submit);
        /** @type {?} */
        let back = new ConclusionItem(model);
        back.Value = 'Back';
        back.Text = '驳回';
        back.WorkFlowAction = WorkFlowAction.Backward;
        back.IsDefault = false;
        back.commentNecessary = true;
        this.Conclusions.push(back);
        // 审批项存在反向时，初始化驳回规则
        this.BackWardRule = new BackWardRule(model);
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new OperationActivity(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const operationActivity = new OperationActivity(this.Model);
        operationActivity.Name = this.Name;
        if (this.taskTitle) {
            operationActivity.taskTitle = this.taskTitle.clone();
        }
        /** @type {?} */
        const resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            for (const role of resourceRoles) {
                if (role instanceof UserParticipant) {
                    /** @type {?} */
                    const user = (/** @type {?} */ (role));
                    /** @type {?} */
                    const userParticipant = user.clone();
                    operationActivity.AddResourceRole(userParticipant);
                }
                else if (role instanceof PositionParticipant) {
                    /** @type {?} */
                    const position = (/** @type {?} */ (role));
                    /** @type {?} */
                    const positionParticipant = position.clone();
                    operationActivity.AddResourceRole(positionParticipant);
                }
                else if (role instanceof ReportingLineParticipant) {
                    /** @type {?} */
                    const reportingLine = (/** @type {?} */ (role));
                    /** @type {?} */
                    const reportingLineParticipant = reportingLine.clone();
                    operationActivity.AddResourceRole(reportingLineParticipant);
                }
                else if (role instanceof ActivityExecutorParticipant) {
                    /** @type {?} */
                    const activityExecutor = (/** @type {?} */ (role));
                    /** @type {?} */
                    const activityExecutorParticipant = activityExecutor.clone();
                    operationActivity.AddResourceRole(activityExecutorParticipant);
                }
                else if (role instanceof ComponentParticipant) {
                    /** @type {?} */
                    const component = (/** @type {?} */ (role));
                    /** @type {?} */
                    const componentParticipant = component.clone();
                    operationActivity.AddResourceRole(componentParticipant);
                }
                else if (role instanceof MatrixParticipant) {
                    /** @type {?} */
                    const matrix = (/** @type {?} */ (role));
                    /** @type {?} */
                    const matrixParticipant = matrix.clone();
                    operationActivity.AddResourceRole(matrixParticipant);
                }
                else if (role instanceof OrganizationPotentialOwner) {
                    /** @type {?} */
                    const org = (/** @type {?} */ (role));
                    /** @type {?} */
                    const organizationPotentialOwner = org.clone();
                    operationActivity.AddResourceRole(organizationPotentialOwner);
                    // 2023-5-31 复制人工操作节点没带上参与者 发现是缺少HumanPerformerImpl和PotentialOwnerImpl
                }
                else if (role instanceof HumanPerformerImpl) {
                    /** @type {?} */
                    const performer = (/** @type {?} */ (role));
                    /** @type {?} */
                    const humanPerformerImpl = performer.clone();
                    operationActivity.AddResourceRole(humanPerformerImpl);
                }
                else if (role instanceof PotentialOwnerImpl) {
                    /** @type {?} */
                    const owner = (/** @type {?} */ (role));
                    /** @type {?} */
                    const potentialOwnerImpl = owner.clone();
                    operationActivity.AddResourceRole(potentialOwnerImpl);
                }
            }
        }
        operationActivity.ParticipantSchemes = new Array();
        if (this.ParticipantSchemes && this.ParticipantSchemes.length > 0) {
            for (const s of this.ParticipantSchemes) {
                /** @type {?} */
                const scheme = s.clone();
                operationActivity.ParticipantSchemes.push(scheme);
            }
        }
        if (this.ParticipantSetting) {
            operationActivity.ParticipantSetting = this.ParticipantSetting.clone();
        }
        operationActivity.AssignmentStrategy = this.AssignmentStrategy;
        if (this.AssignPerformerConfig) {
            operationActivity.AssignPerformerConfig = this.AssignPerformerConfig.clone();
        }
        operationActivity.PerformerNotFundExecption = this.PerformerNotFundExecption;
        operationActivity.Retrievable = this.Retrievable;
        operationActivity.IsRollback = this.IsRollback;
        operationActivity.SelectBranch = this.SelectBranch;
        operationActivity.NotifyAble = this.NotifyAble;
        operationActivity.AddSignFrontAble = this.AddSignFrontAble;
        operationActivity.AddSignBehindAble = this.AddSignBehindAble;
        operationActivity.Priority = this.Priority;
        operationActivity.ExecuteWorkItemMode = this.ExecuteWorkItemMode;
        operationActivity.DisplayTerminal = this.DisplayTerminal;
        operationActivity.SelectTargetAble = this.SelectTargetAble;
        if (this.JumpScope) {
            operationActivity.JumpScope = this.JumpScope.clone();
        }
        if (this.BackWardRule) {
            operationActivity.BackWardRule = this.BackWardRule.clone();
        }
        operationActivity.transferAble = this.transferAble;
        operationActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            for (const f of this.ExecuteForms) {
                /** @type {?} */
                const executeForm = f.clone();
                operationActivity.ExecuteForms.push(executeForm);
            }
        }
        operationActivity.customizeActions = new Array();
        if (this.customizeActions && this.customizeActions.length > 0) {
            for (const a of this.customizeActions) {
                /** @type {?} */
                const customizeAction = a.clone();
                operationActivity.customizeActions.push(customizeAction);
            }
        }
        operationActivity.CounterSignRules = new Array();
        if (this.CounterSignRules && this.CounterSignRules.length > 0) {
            for (const r of this.CounterSignRules) {
                /** @type {?} */
                const counterSignRule = r.clone();
                operationActivity.CounterSignRules.push(counterSignRule);
            }
        }
        operationActivity.AdhocActivitySecurities = new Array();
        if (this.AdhocActivitySecurities && this.AdhocActivitySecurities.length > 0) {
            for (const s of this.AdhocActivitySecurities) {
                operationActivity.AdhocActivitySecurities.push(s);
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        operationActivity.NotificationList = new Array();
        operationActivity.anonymous = this.anonymous;
        operationActivity.anonymousText = this.anonymousText;
        operationActivity.BizActivityID = this.BizActivityID;
        operationActivity.BizActivityName = this.BizActivityName;
        operationActivity.Conclusions = new Array();
        if (this.Conclusions && this.Conclusions.length > 0) {
            for (const c of this.Conclusions) {
                /** @type {?} */
                const conclusion = c.clone();
                operationActivity.Conclusions.push(conclusion);
            }
        }
        operationActivity.Tools = new Array();
        if (this.Tools && this.Tools.length > 0) {
            for (const t of this.Tools) {
                if (t instanceof Component) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (t));
                    /** @type {?} */
                    const tool = c.clone();
                    operationActivity.Tools.push(tool);
                }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        operationActivity.BizParameters = new Array();
        if (this.timeLimitControl) {
            operationActivity.timeLimitControl = this.timeLimitControl.clone();
        }
        operationActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                operationActivity.variableSettings.push(variableSetting);
            }
        }
        operationActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                operationActivity.messageNotices.push(messageNotice);
            }
        }
        if (this.approvalPivotConfig) {
            operationActivity.approvalPivotConfig = this.approvalPivotConfig.clone();
        }
        if (this.urgeHandleRule) {
            operationActivity.urgeHandleRule = this.urgeHandleRule.clone();
        }
        return operationActivity;
    }
}
OperationActivity.Clr_Type_ID = "wf.OperationActivity";
OperationActivity.MEXTAG = 'wf.OperationActivity';
if (false) {
    /** @type {?} */
    OperationActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    OperationActivity.MEXTAG;
    /** @type {?} */
    OperationActivity.prototype.ClrTypeID;
}
BpmnModelHelper.RegisterElementType(new OperationActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,