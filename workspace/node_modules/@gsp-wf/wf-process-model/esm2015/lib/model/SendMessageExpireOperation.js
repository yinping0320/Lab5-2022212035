/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ExpireOperation } from "./ExpireOperation";
import { SmsMessageTemplate } from "./SmsMessageTemplate";
export class SendMessageExpireOperation extends ExpireOperation {
    constructor() {
        super(...arguments);
        this.ClrTypeID = SendMessageExpireOperation.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.smsMessageTemplate = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Message", this.message);
        ExtensionMethod.SetAttributeValue(obj, "SendType", this.sendType);
        ExtensionMethod.SetAttributeValue(obj, "Subject", this.subject);
        ExtensionMethod.SetAttributeValue(obj, "Receiver", this.receiver);
        ExtensionMethod.SetAttributeValue(obj, "ReceiverText", this.receiverText);
        ExtensionMethod.SetAttributeValue(obj, "CycleEnable", this.cycleEnable);
        ExtensionMethod.SetAttributeValue(obj, "CycleTime", this.cycleTime);
        ExtensionMethod.SetAttributeValue(obj, "CycleTimeUnit", this.cycleTimeUnit);
        if (this.smsMessageTemplate) {
            ExtensionMethod.SetAttributeValue(obj, "SmsMessageTemplate", this.smsMessageTemplate.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.message = ExtensionMethod.GetAttributeValue4String(obj, "Message");
        this.sendType = ExtensionMethod.GetAttributeValue4String(obj, "SendType");
        this.subject = ExtensionMethod.GetAttributeValue4String(obj, "Subject");
        this.receiver = ExtensionMethod.GetAttributeValue4String(obj, "Receiver");
        this.receiverText = ExtensionMethod.GetAttributeValue4String(obj, "ReceiverText");
        this.cycleEnable = ExtensionMethod.GetAttributeValue4Boolean(obj, "CycleEnable");
        this.cycleTime = ExtensionMethod.GetAttributeValue4String(obj, "CycleTime");
        this.cycleTimeUnit = ExtensionMethod.GetAttributeValue4String(obj, "CycleTimeUnit");
        /** @type {?} */
        const smsTemplateElement = ExtensionMethod.GetAttributeValue(obj, 'SmsMessageTemplate');
        if (smsTemplateElement) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(this.Model);
            smsMessageTemplate.LoadFromJsonObject(smsTemplateElement);
            this.smsMessageTemplate = smsMessageTemplate;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new SendMessageExpireOperation(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const sendMessageExpireOperation = new SendMessageExpireOperation(this.Model);
        sendMessageExpireOperation.id = BpmnModelHelper.GenerateElementId();
        sendMessageExpireOperation.durationType = this.durationType;
        sendMessageExpireOperation.timeDuration = this.timeDuration;
        sendMessageExpireOperation.timeUnit = this.timeUnit;
        sendMessageExpireOperation.message = this.message;
        sendMessageExpireOperation.sendType = this.sendType;
        sendMessageExpireOperation.subject = this.subject;
        sendMessageExpireOperation.receiver = this.receiver;
        sendMessageExpireOperation.receiverText = this.receiverText;
        sendMessageExpireOperation.cycleEnable = this.cycleEnable;
        sendMessageExpireOperation.cycleTime = this.cycleTime;
        sendMessageExpireOperation.cycleTimeUnit = this.cycleTimeUnit;
        if (this.smsMessageTemplate) {
            sendMessageExpireOperation.smsMessageTemplate = this.smsMessageTemplate.clone();
        }
        return sendMessageExpireOperation;
    }
}
SendMessageExpireOperation.Clr_Type_ID = "wf.Mex.SendMessageExpireOperation";
if (false) {
    /** @type {?} */
    SendMessageExpireOperation.Clr_Type_ID;
    /** @type {?} */
    SendMessageExpireOperation.prototype.ClrTypeID;
    /**
     * 预警信息内容
     * @type {?}
     */
    SendMessageExpireOperation.prototype.message;
    /**
     * 发送预警信息类型
     * @type {?}
     */
    SendMessageExpireOperation.prototype.sendType;
    /**
     * 预警信息主题
     * @type {?}
     */
    SendMessageExpireOperation.prototype.subject;
    /**
     * 消息接收人
     * 用户IDs
     * @type {?}
     */
    SendMessageExpireOperation.prototype.receiver;
    /**
     * 消息接收人显示
     * @type {?}
     */
    SendMessageExpireOperation.prototype.receiverText;
    /**
     * 开启循环预警
     * @type {?}
     */
    SendMessageExpireOperation.prototype.cycleEnable;
    /**
     * 循环预警时间间隔
     * @type {?}
     */
    SendMessageExpireOperation.prototype.cycleTime;
    /**
     * 循环预警时间间隔单位
     * @type {?}
     */
    SendMessageExpireOperation.prototype.cycleTimeUnit;
    /** @type {?} */
    SendMessageExpireOperation.prototype.smsMessageTemplate;
}
BpmnModelHelper.RegisterElementType(new SendMessageExpireOperation(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,