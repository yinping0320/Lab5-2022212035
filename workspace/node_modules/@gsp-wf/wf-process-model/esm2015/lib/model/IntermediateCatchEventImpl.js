/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, IntermediateCatchEvent } from "@edp-pmf/bpmn-model";
import { BackWardRule } from "./extension/completion-strategy/BackWardRule";
import { SignalEventDefinitionImpl } from "./SignalEventDefinitionImpl";
import { VariableSetting } from "./VariableSetting";
export class IntermediateCatchEventImpl extends IntermediateCatchEvent {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = IntermediateCatchEventImpl.Clr_Type_ID;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.variableSettings = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.backWardRule != null) {
            this.backWardRule.MexTag = IntermediateCatchEventImpl.MEXTAG;
            list.push(this.backWardRule);
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            for (const item of this.variableSettings) {
                item.MexTag = IntermediateCatchEventImpl.MEXTAG;
                list.push(item);
            }
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== IntermediateCatchEventImpl.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case BackWardRule.Clr_Type_ID:
                    this.backWardRule = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    ;
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    initEventDefinitions() {
        /** @type {?} */
        const passEvent = new SignalEventDefinitionImpl(this.Model);
        passEvent.name = '通过';
        passEvent.triggerAction = 'Pass';
        passEvent.Async = false;
        passEvent.SignalRef = 'Pass';
        this.EventDefinitions.push(passEvent);
        /** @type {?} */
        const backEvent = new SignalEventDefinitionImpl(this.Model);
        backEvent.name = '驳回';
        backEvent.triggerAction = 'Back';
        backEvent.Async = false;
        backEvent.SignalRef = 'Back';
        this.EventDefinitions.push(backEvent);
        /** @type {?} */
        const abortEvent = new SignalEventDefinitionImpl(this.Model);
        abortEvent.name = '终止';
        abortEvent.triggerAction = 'Abort';
        abortEvent.Async = false;
        abortEvent.SignalRef = 'Abort';
        this.EventDefinitions.push(abortEvent);
        // 初始化驳回规则
        this.backWardRule = new BackWardRule(this.Model);
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new IntermediateCatchEventImpl(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const intermediateCatchEventImpl = new IntermediateCatchEventImpl(this.Model);
        intermediateCatchEventImpl.Name = this.Name;
        intermediateCatchEventImpl.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                intermediateCatchEventImpl.variableSettings.push(variableSetting);
            }
        }
        if (this.backWardRule) {
            intermediateCatchEventImpl.backWardRule = this.backWardRule.clone();
        }
        intermediateCatchEventImpl.EventDefinitions = new Array();
        if (this.EventDefinitions && this.EventDefinitions.length > 0) {
            for (const e of this.EventDefinitions) {
                /** @type {?} */
                const signalEventDefinitionImpl = (/** @type {?} */ (e));
                /** @type {?} */
                const eventDefinition = signalEventDefinitionImpl.clone();
                intermediateCatchEventImpl.EventDefinitions.push(eventDefinition);
            }
        }
        return intermediateCatchEventImpl;
    }
}
IntermediateCatchEventImpl.Clr_Type_ID = "wf.IntermediateCatchEventImpl";
IntermediateCatchEventImpl.MEXTAG = "wf.IntermediateCatchEventImpl";
if (false) {
    /** @type {?} */
    IntermediateCatchEventImpl.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    IntermediateCatchEventImpl.MEXTAG;
    /** @type {?} */
    IntermediateCatchEventImpl.prototype.ClrTypeID;
    /** @type {?} */
    IntermediateCatchEventImpl.prototype.backWardRule;
    /** @type {?} */
    IntermediateCatchEventImpl.prototype.variableSettings;
}
BpmnModelHelper.RegisterElementType(new IntermediateCatchEventImpl(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,