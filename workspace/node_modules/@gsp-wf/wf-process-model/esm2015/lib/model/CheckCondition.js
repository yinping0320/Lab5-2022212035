/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ConditionValueVersion } from "./extension/condition-expression/ConditionValueVersion";
import { MexExpressionImpl } from "./mex/MexExpressionImpl";
export class CheckCondition extends MexExpressionImpl {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = CheckCondition.Clr_Type_ID;
        this.valueVersion = ConditionValueVersion.Unsure;
        this.checkTime = 'UNDEFINITION';
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.value = '';
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "CheckTime", this.checkTime);
        ExtensionMethod.SetAttributeValue(obj, "ValueVersion", this.valueVersion);
        if (this.errorTips && this.errorTips.size > 0) {
            /** @type {?} */
            const jsonArray = new Array();
            this.errorTips.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                /** @type {?} */
                const childObj = new Object;
                ExtensionMethod.SetAttributeValue(childObj, "Key", key);
                ExtensionMethod.SetAttributeValue(childObj, "Value", value);
                jsonArray.push(childObj);
            }));
            ExtensionMethod.SetAttributeValue(obj, "ErrorTips", jsonArray);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.checkTime = ExtensionMethod.GetAttributeValue4String(obj, "CheckTime");
        this.valueVersion = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "ValueVersion")));
        /** @type {?} */
        const jsonArray = ExtensionMethod.GetAttributeValue(obj, "ErrorTips");
        if (jsonArray && jsonArray.length > 0) {
            if (!this.errorTips) {
                this.errorTips = new Map();
            }
            for (const childObj of jsonArray) {
                /** @type {?} */
                const key = ExtensionMethod.GetAttributeValue4String(childObj, "Key");
                /** @type {?} */
                const value = ExtensionMethod.GetAttributeValue4String(childObj, "Value");
                this.errorTips.set(key, value);
            }
        }
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const condition = new CheckCondition(this.Model);
        condition.value = this.value;
        condition.valueVersion = this.valueVersion;
        condition.checkTime = this.checkTime;
        if (this.errorTips && this.errorTips.size > 0) {
            condition.errorTips = new Map();
            this.errorTips.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                condition.errorTips.set(key, value);
            }));
        }
        return condition;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new CheckCondition(this.Model);
    }
}
CheckCondition.Clr_Type_ID = "wf.CheckCondition";
if (false) {
    /** @type {?} */
    CheckCondition.Clr_Type_ID;
    /** @type {?} */
    CheckCondition.prototype.ClrTypeID;
    /** @type {?} */
    CheckCondition.prototype.valueVersion;
    /** @type {?} */
    CheckCondition.prototype.checkTime;
    /** @type {?} */
    CheckCondition.prototype.errorTips;
}
BpmnModelHelper.RegisterElementType(new CheckCondition(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hlY2tDb25kaXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvQ2hlY2tDb25kaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxNQUFNLE9BQU8sY0FBZSxTQUFRLGlCQUFpQjs7OztJQVFqRCxZQUFZLEtBQWdCO1FBQ3hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVBqQixjQUFTLEdBQVcsY0FBYyxDQUFDLFdBQVcsQ0FBQztRQUUvQyxpQkFBWSxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQTtRQUMzQyxjQUFTLEdBQVcsY0FBYyxDQUFDO0lBS25DLENBQUM7Ozs7O0lBRVMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7SUFHRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUNyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFFLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7O2tCQUNyQyxTQUFTLEdBQUcsSUFBSSxLQUFLLEVB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QUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25NZXRob2QsIEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBDb25kaXRpb25WYWx1ZVZlcnNpb24gfSBmcm9tIFwiLi9leHRlbnNpb24vY29uZGl0aW9uLWV4cHJlc3Npb24vQ29uZGl0aW9uVmFsdWVWZXJzaW9uXCI7XHJcbmltcG9ydCB7IE1leEV4cHJlc3Npb25JbXBsIH0gZnJvbSBcIi4vbWV4L01leEV4cHJlc3Npb25JbXBsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tDb25kaXRpb24gZXh0ZW5kcyBNZXhFeHByZXNzaW9uSW1wbCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuQ2hlY2tDb25kaXRpb25cIjtcclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gQ2hlY2tDb25kaXRpb24uQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgdmFsdWVWZXJzaW9uID0gQ29uZGl0aW9uVmFsdWVWZXJzaW9uLlVuc3VyZVxyXG4gICAgY2hlY2tUaW1lOiBzdHJpbmcgPSAnVU5ERUZJTklUSU9OJztcclxuICAgIGVycm9yVGlwczogTWFwPHN0cmluZywgc3RyaW5nPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ2hlY2tUaW1lXCIsIHRoaXMuY2hlY2tUaW1lKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhbHVlVmVyc2lvblwiLCB0aGlzLnZhbHVlVmVyc2lvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JUaXBzICYmIHRoaXMuZXJyb3JUaXBzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGpzb25BcnJheSA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yVGlwcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE9iaiA9IG5ldyBPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUoY2hpbGRPYmosIFwiS2V5XCIsIGtleSk7XHJcbiAgICAgICAgICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUoY2hpbGRPYmosIFwiVmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAganNvbkFycmF5LnB1c2goY2hpbGRPYmopO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkVycm9yVGlwc1wiLCBqc29uQXJyYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja1RpbWUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJDaGVja1RpbWVcIik7XHJcbiAgICAgICAgdGhpcy52YWx1ZVZlcnNpb24gPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJWYWx1ZVZlcnNpb25cIikgYXMgQ29uZGl0aW9uVmFsdWVWZXJzaW9uO1xyXG5cclxuICAgICAgICBjb25zdCBqc29uQXJyYXk6IEFycmF5PGFueT4gPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkVycm9yVGlwc1wiKTtcclxuICAgICAgICBpZiAoanNvbkFycmF5ICYmIGpzb25BcnJheS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lcnJvclRpcHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JUaXBzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkT2JqIG9mIGpzb25BcnJheSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhjaGlsZE9iaiwgXCJLZXlcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcoY2hpbGRPYmosIFwiVmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yVGlwcy5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQ2hlY2tDb25kaXRpb24ge1xyXG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IG5ldyBDaGVja0NvbmRpdGlvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICBjb25kaXRpb24udmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIGNvbmRpdGlvbi52YWx1ZVZlcnNpb24gPSB0aGlzLnZhbHVlVmVyc2lvbjtcclxuICAgICAgICBjb25kaXRpb24uY2hlY2tUaW1lID0gdGhpcy5jaGVja1RpbWU7XHJcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JUaXBzICYmIHRoaXMuZXJyb3JUaXBzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbi5lcnJvclRpcHMgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yVGlwcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25kaXRpb24uZXJyb3JUaXBzLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBDaGVja0NvbmRpdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGVja0NvbmRpdGlvbih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgQ2hlY2tDb25kaXRpb24obmV3IEJwbW5Nb2RlbCgpKSk7Il19