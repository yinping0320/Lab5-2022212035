/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, StartEvent, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ExtendProperty } from "../ExtendProperty";
import { ExecuteForm, TerminalType } from "../extension/ExecuteForm";
import { JumpScope } from "../extension/JumpScope";
import { OtherAssignNodes } from "../extension/OtherAssignNodes";
import { ActualParameter } from "../parameter/WFActualParameter";
export class StartActivity extends StartEvent {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = StartActivity.Clr_Type_ID;
        this.sendBackedTask = true;
        this.selectTargetAble = false;
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ExecuteForms = new Array();
        this.extendProperties = new Array();
        this.sendBackedTask = true;
        this.selectTargetAble = false;
        this.jumpScope = null;
        this.otherAssignNodes = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'SendBackedTask', this.sendBackedTask);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectTargetAble', this.selectTargetAble);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.sendBackedTask = ExtensionMethod.GetAttributeValue4Boolean(obj, "SendBackedTask");
        this.selectTargetAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "SelectTargetAble");
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.ExecuteForms != null) {
            for (let form of this.ExecuteForms) {
                form.MexTag = StartActivity.MEXTAG;
                list.push(form);
            }
        }
        if (this.extendProperties != null) {
            for (let e of this.extendProperties) {
                e.MexTag = StartActivity.MEXTAG;
                list.push(e);
            }
        }
        if (this.jumpScope != null) {
            this.jumpScope.MexTag = StartActivity.MEXTAG;
            list.push(this.jumpScope);
        }
        if (this.otherAssignNodes != null) {
            this.otherAssignNodes.MexTag = StartActivity.MEXTAG;
            list.push(this.otherAssignNodes);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== StartActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case ExecuteForm.Clr_Type_ID:
                    this.ExecuteForms.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                case JumpScope.Clr_Type_ID:
                    this.jumpScope = ((/** @type {?} */ (extensionElement)));
                    break;
                case OtherAssignNodes.Clr_Type_ID:
                    this.otherAssignNodes = ((/** @type {?} */ (extensionElement)));
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new StartActivity(this.Model);
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const startActivity = new StartActivity(this.Model);
        startActivity.Name = this.Name;
        startActivity.sendBackedTask = this.sendBackedTask;
        startActivity.selectTargetAble = this.selectTargetAble;
        startActivity.jumpScope = null;
        if (this.jumpScope) {
            startActivity.jumpScope = this.jumpScope.clone();
        }
        startActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            for (const f of this.ExecuteForms) {
                /** @type {?} */
                const executeForm = f.clone();
                startActivity.ExecuteForms.push(executeForm);
            }
        }
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                startActivity.extendProperties.push(extendProperty);
            }
        }
        if (this.otherAssignNodes) {
            startActivity.otherAssignNodes = this.otherAssignNodes.clone();
        }
        return startActivity;
    }
    /**
     * @param {?} forms
     * @return {?}
     */
    setDefaultForms(forms) {
        if (!this.ExecuteForms) {
            this.ExecuteForms = new Array();
        }
        for (const form of forms) {
            /** @type {?} */
            let params = (/** @type {?} */ (form.urlParameters));
            /** @type {?} */
            let actParas = new Array();
            if (params && params.length > 0) {
                for (let para of params) {
                    /** @type {?} */
                    let actPara = new ActualParameter(this.Model, para.code, para.value);
                    if (para.Value && para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                        actPara.Tag = 'expression';
                    }
                    else {
                        actPara.Tag = 'constant';
                    }
                    actParas.push(actPara);
                }
            }
            /** @type {?} */
            const id = BpmnModelHelper.GenerateElementId();
            /** @type {?} */
            let item = new ExecuteForm(this.Model, id, form.name, actParas);
            item.ComponentId = null;
            item.FormType = '0';
            item.formFormatId = form.id;
            if (form.terminal === 'PC') {
                item.TerminalType = TerminalType.PC;
            }
            else if (form.terminal === 'Mobile') {
                item.TerminalType = TerminalType.MOBILE;
            }
            this.ExecuteForms.push(item);
        }
    }
}
StartActivity.Clr_Type_ID = "wf.StartActivity";
StartActivity.MEXTAG = "wf.StartActivity";
if (false) {
    /** @type {?} */
    StartActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    StartActivity.MEXTAG;
    /** @type {?} */
    StartActivity.prototype.ClrTypeID;
    /** @type {?} */
    StartActivity.prototype.ExecuteForms;
    /** @type {?} */
    StartActivity.prototype.extendProperties;
    /** @type {?} */
    StartActivity.prototype.sendBackedTask;
    /** @type {?} */
    StartActivity.prototype.selectTargetAble;
    /** @type {?} */
    StartActivity.prototype.jumpScope;
    /** @type {?} */
    StartActivity.prototype.otherAssignNodes;
}
BpmnModelHelper.RegisterElementType(new StartActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,