/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, UserTask } from "@edp-pmf/bpmn-model";
import { ApprovalPivotConfig } from "../ApprovalPivotConfig";
import { CheckCondition } from "../CheckCondition";
import { ExtendProperty } from "../ExtendProperty";
import { AssignmentStrategy } from "../extension/assignment-strategy/AssignmentStrategy";
import { AssignPerformerConfig } from "../extension/assignment-strategy/AssignPerformerConfig";
import { BackWardRule } from "../extension/completion-strategy/BackWardRule";
import { ConclusionItem } from "../extension/completion-strategy/ConclusionItem";
import { CounterSignRule } from "../extension/completion-strategy/CounterSignRule";
import { ExecuteWorkItemMode } from "../extension/completion-strategy/ExecuteWorkItemMode";
import { WorkFlowAction } from "../extension/completion-strategy/WorkFlowAction";
import { CustomizeAction } from "../extension/CustomizeAction";
import { DisplayTerminal } from "../extension/DisplayTerminal";
import { ExecuteForm } from "../extension/ExecuteForm";
import { JumpScope } from "../extension/JumpScope";
import { Component } from "../extension/tool/Component";
import { Tool } from "../extension/tool/Tool";
import { HumanPerformerImpl } from "../HumanPerformerImpl";
import { ImageSettings } from "../ImageSetting";
import { MessageNotice } from "../MessageNotice";
import { TitleExpression } from "../mex/TitleExpression";
import { OrganizationPotentialOwner } from "../OrganizationPotentialOwner";
import { ActivityExecutorParticipant } from "../participants/old/ActivityExecutorParticipant";
import { ComponentParticipant } from "../participants/old/ComponentParticipant";
import { MatrixParticipant } from "../participants/old/MatrixParticipant";
import { PositionParticipant } from "../participants/old/PositionParticipant";
import { ReportingLineParticipant } from "../participants/old/ReportingLineParticipant";
import { UserParticipant } from "../participants/old/UserParticipant";
import { OrganizationParticipantExpression } from "../participants/OrganizationParticipantExpression";
import { ParticipantExpression } from "../participants/ParticipantExpression";
import { ParticipantScheme } from "../participants/ParticipantScheme";
import { ParticipantSetting } from "../participants/ParticipantSetting";
import { PotentialOwnerImpl } from "../PotentialOwnerImpl";
import { TimeLimitControl } from "../TimeLimitControl";
import { UrgeHandleRule } from "../UrgeHandleRule";
import { VariableSetting } from "../VariableSetting";
import { Notification } from "../extension/Notification";
import { OtherAssignNodes } from "../extension/OtherAssignNodes";
export class UserActivity extends UserTask {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = UserActivity.Clr_Type_ID;
        // 扩展属性
        this.AssignmentStrategy = AssignmentStrategy.ALL;
        this.humanPerformers = new Array();
        this.potentialOwners = new Array();
        this.dynamicParticipants = new Array();
        // 审批结论枚举列表
        this.Conclusions = new Array();
        // 外部工具集
        this.Tools = new Array();
        // 业务活动参数
        this.BizParameters = new Array();
        this.ParticipantSchemes = new Array();
        this.CounterSignRules = null;
        this.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
        this.DisplayTerminal = DisplayTerminal.ALL;
        this.Retrievable = true;
        this.AddSignFrontAble = false;
        this.AddSignBehindAble = false;
        this.SelectTargetAble = false;
        this.transferAble = true;
        this.ParticipantSetting = new ParticipantSetting(model);
        this.anonymous = false;
        this.anonymousText = '办理人';
        this.variableSettings = new Array();
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new UserActivity(this.Model);
    }
    /**
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ParticipantSchemes = new Array();
        this.CounterSignRules = new Array();
        this.Retrievable = true;
        this.AddSignFrontAble = false;
        this.AddSignBehindAble = false;
        this.transferAble = true;
        this.AssignmentStrategy = AssignmentStrategy.ALL;
        this.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
        this.DisplayTerminal = DisplayTerminal.ALL;
        this.NotificationList = new Array();
        //
        this.Conclusions = new Array();
        this.ExecuteForms = new Array();
        this.customizeActions = new Array();
        //跳转
        this.SelectTargetAble = false;
        this.JumpScope = null;
        this.otherAssignNodes = null;
        this.SelectBranch = false;
        this.anonymous = false;
        this.anonymousText = '办理人';
        this.variableSettings = new Array();
        this.messageNotices = new Array();
        this.extendProperties = new Array();
        this.NotifyAble = false;
        this.urgeHandleRule = null;
        this.imageSettings = null;
        this.humanPerformers = new Array();
        this.potentialOwners = new Array();
        this.dynamicParticipants = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, 'BizActivityID', this.BizActivityID);
        BpmnModelHelper.SetAttributeValue(obj, 'BizActivityName', this.BizActivityName);
        BpmnModelHelper.SetAttributeValue(obj, 'AssignmentStrategy', this.AssignmentStrategy);
        BpmnModelHelper.SetAttributeValue(obj, 'ExecuteWorkItemMode', this.ExecuteWorkItemMode);
        BpmnModelHelper.SetAttributeValue(obj, 'DisplayTerminal', this.DisplayTerminal);
        BpmnModelHelper.SetAttributeValue(obj, 'Retrievable', this.Retrievable);
        BpmnModelHelper.SetAttributeValue(obj, 'AddSignFrontAble', this.AddSignFrontAble);
        BpmnModelHelper.SetAttributeValue(obj, 'AddSignBehindAble', this.AddSignBehindAble);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectTargetAble', this.SelectTargetAble);
        BpmnModelHelper.SetAttributeValue(obj, 'TransferAble', this.transferAble);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectBranch', this.SelectBranch);
        BpmnModelHelper.SetAttributeValue(obj, 'Anonymous', this.anonymous);
        BpmnModelHelper.SetAttributeValue(obj, 'AnonymousText', this.anonymousText);
        BpmnModelHelper.SetAttributeValue(obj, "NotifyAble", this.NotifyAble);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.BizActivityID = obj.BizActivityID;
        this.BizActivityName = obj.BizActivityName;
        this.AssignmentStrategy = obj.AssignmentStrategy;
        this.ExecuteWorkItemMode = obj.ExecuteWorkItemMode;
        this.DisplayTerminal = obj.DisplayTerminal;
        this.Retrievable = obj.Retrievable;
        this.AddSignFrontAble = obj.AddSignFrontAble;
        this.AddSignBehindAble = obj.AddSignBehindAble;
        this.SelectTargetAble = obj.SelectTargetAble;
        this.SelectBranch = obj.SelectBranch;
        this.transferAble = obj.TransferAble;
        this.anonymous = obj.Anonymous;
        this.anonymousText = obj.AnonymousText;
        this.NotifyAble = obj.NotifyAble;
    }
    /**
     * @protected
     * @return {?}
     */
    GetExtensionElements4ConvertTo() {
        /** @type {?} */
        let list = super.GetExtensionElements4ConvertTo();
        if (this.ParticipantSchemes != null) {
            for (let scheme of this.ParticipantSchemes) {
                scheme.MexTag = UserActivity.MEXTAG;
                list.push(scheme);
            }
        }
        if (this.ExecuteForms != null) {
            for (let form of this.ExecuteForms) {
                form.MexTag = UserActivity.MEXTAG;
                list.push(form);
            }
        }
        if (this.CounterSignRules != null) {
            for (let rule of this.CounterSignRules) {
                rule.MexTag = UserActivity.MEXTAG;
                list.push(rule);
            }
        }
        if (this.NotificationList != null) {
            for (let item of this.NotificationList) {
                item.MexTag = UserActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.Conclusions != null) {
            for (let item of this.Conclusions) {
                item.MexTag = UserActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.Tools != null) {
            for (let item of this.Tools) {
                item.MexTag = UserActivity.MEXTAG;
                list.push(item);
            }
        }
        if (this.AssignPerformerConfig != null) {
            this.AssignPerformerConfig.MexTag = UserActivity.MEXTAG;
            list.push(this.AssignPerformerConfig);
        }
        if (this.JumpScope != null) {
            this.JumpScope.MexTag = UserActivity.MEXTAG;
            list.push(this.JumpScope);
        }
        if (this.urgeHandleRule != null) {
            this.urgeHandleRule.MexTag = UserActivity.MEXTAG;
            list.push(this.urgeHandleRule);
        }
        if (this.BackWardRule != null) {
            this.BackWardRule.MexTag = UserActivity.MEXTAG;
            list.push(this.BackWardRule);
        }
        if (this.ParticipantSetting != null) {
            this.ParticipantSetting.MexTag = UserActivity.MEXTAG;
            list.push(this.ParticipantSetting);
        }
        if (this.taskTitle != null) {
            this.taskTitle.MexTag = UserActivity.MEXTAG;
            list.push(this.taskTitle);
        }
        if (this.customizeActions != null) {
            for (let action of this.customizeActions) {
                action.MexTag = UserActivity.MEXTAG;
                list.push(action);
            }
        }
        if (this.timeLimitControl != null) {
            this.timeLimitControl.MexTag = UserActivity.MEXTAG;
            list.push(this.timeLimitControl);
        }
        if (this.variableSettings != null) {
            for (let v of this.variableSettings) {
                v.MexTag = UserActivity.MEXTAG;
                list.push(v);
            }
        }
        if (this.messageNotices != null) {
            for (let m of this.messageNotices) {
                m.MexTag = UserActivity.MEXTAG;
                list.push(m);
            }
        }
        if (this.extendProperties != null) {
            for (let e of this.extendProperties) {
                e.MexTag = UserActivity.MEXTAG;
                list.push(e);
            }
        }
        if (this.approvalPivotConfig != null) {
            this.approvalPivotConfig.MexTag = UserActivity.MEXTAG;
            list.push(this.approvalPivotConfig);
        }
        if (this.imageSettings != null) {
            this.imageSettings.MexTag = UserActivity.MEXTAG;
            list.push(this.imageSettings);
        }
        if (this.checkConditions != null) {
            for (let condition of this.checkConditions) {
                condition.MexTag = UserActivity.MEXTAG;
                list.push(condition);
            }
        }
        if (this.dynamicParticipants != null) {
            for (let participant of this.dynamicParticipants) {
                participant.MexTag = UserActivity.MEXTAG;
                list.push(participant);
            }
        }
        if (this.otherAssignNodes != null) {
            this.otherAssignNodes.MexTag = UserActivity.MEXTAG;
            list.push(this.otherAssignNodes);
        }
        return list;
    }
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    SetExtensionElements4LoadFrom(extensionElements) {
        super.SetExtensionElements4LoadFrom(extensionElements);
        for (let extensionElement of extensionElements) {
            if (extensionElement.MexTag !== UserActivity.MEXTAG)
                continue;
            switch (extensionElement.ClrTypeID) {
                case ParticipantScheme.Clr_Type_ID:
                    this.ParticipantSchemes.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExecuteForm.Clr_Type_ID:
                    this.ExecuteForms.push((/** @type {?} */ (extensionElement)));
                    break;
                case CounterSignRule.Clr_Type_ID:
                    this.CounterSignRules.push((/** @type {?} */ (extensionElement)));
                    break;
                case Notification.Clr_Type_ID:
                    this.NotificationList.push((/** @type {?} */ (extensionElement)));
                    break;
                case ConclusionItem.Clr_Type_ID:
                    this.Conclusions.push((/** @type {?} */ (extensionElement)));
                    break;
                case AssignPerformerConfig.Clr_Type_ID:
                    this.AssignPerformerConfig = ((/** @type {?} */ (extensionElement)));
                    break;
                case JumpScope.Clr_Type_ID:
                    this.JumpScope = ((/** @type {?} */ (extensionElement)));
                    break;
                case UrgeHandleRule.Clr_Type_ID:
                    this.urgeHandleRule = ((/** @type {?} */ (extensionElement)));
                    break;
                case BackWardRule.Clr_Type_ID:
                    this.BackWardRule = ((/** @type {?} */ (extensionElement)));
                    break;
                case ParticipantSetting.Clr_Type_ID:
                    this.ParticipantSetting = ((/** @type {?} */ (extensionElement)));
                    break;
                case TitleExpression.Clr_Type_ID:
                    this.taskTitle = ((/** @type {?} */ (extensionElement)));
                    break;
                case CustomizeAction.Clr_Type_ID:
                    this.customizeActions.push((/** @type {?} */ (extensionElement)));
                    break;
                case TimeLimitControl.Clr_Type_ID:
                    this.timeLimitControl = ((/** @type {?} */ (extensionElement)));
                    break;
                case VariableSetting.Clr_Type_ID:
                    this.variableSettings.push((/** @type {?} */ (extensionElement)));
                    break;
                case MessageNotice.Clr_Type_ID:
                    this.messageNotices.push((/** @type {?} */ (extensionElement)));
                    break;
                case ExtendProperty.Clr_Type_ID:
                    this.extendProperties.push((/** @type {?} */ (extensionElement)));
                    break;
                case ApprovalPivotConfig.Clr_Type_ID:
                    this.approvalPivotConfig = (/** @type {?} */ (extensionElement));
                    break;
                case ImageSettings.Clr_Type_ID:
                    this.imageSettings = (/** @type {?} */ (extensionElement));
                    break;
                case CheckCondition.Clr_Type_ID:
                    if (this.checkConditions == null) {
                        this.checkConditions = new Array();
                    }
                    this.checkConditions.push((/** @type {?} */ (extensionElement)));
                    break;
                case OtherAssignNodes.Clr_Type_ID:
                    this.otherAssignNodes = (/** @type {?} */ (extensionElement));
                    break;
                default:
                    if (extensionElement instanceof Tool) {
                        this.Tools.push((/** @type {?} */ (extensionElement)));
                    }
                    else if (extensionElement instanceof ParticipantExpression) {
                        this.dynamicParticipants.push((/** @type {?} */ (extensionElement)));
                    }
                    break;
            }
        }
    }
    /**
     * 审批活动预制通过，驳回工作项
     * @param {?} model
     * @return {?}
     */
    initConclusions(model) {
        /** @type {?} */
        let pass = new ConclusionItem(model);
        pass.Value = 'Pass';
        pass.Text = '通过';
        pass.WorkFlowAction = WorkFlowAction.Forward;
        pass.IsDefault = true;
        pass.commentNecessary = false;
        this.Conclusions.push(pass);
        /** @type {?} */
        let back = new ConclusionItem(model);
        back.Value = 'Back';
        back.Text = '驳回';
        back.WorkFlowAction = WorkFlowAction.Backward;
        back.IsDefault = false;
        back.commentNecessary = true;
        this.Conclusions.push(back);
        // 审批项存在反向时，初始化驳回规则
        this.BackWardRule = new BackWardRule(model);
    }
    /**
     * 初始业务活动审批项
     * @param {?} model
     * @param {?} actions
     * @return {?}
     */
    setBizConclusions(model, actions) {
        if (actions && actions.length > 0) {
            for (let a of actions) {
                /** @type {?} */
                let conclusion = new ConclusionItem(model);
                conclusion.Value = a.code;
                conclusion.Text = a.name;
                conclusion.WorkFlowAction = a.workFlowAction;
                conclusion.IsDefault = a === actions[0] ? true : false;
                conclusion.commentNecessary = false;
                this.Conclusions.push(conclusion);
            }
            if (this.Conclusions.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.WorkFlowAction === WorkFlowAction.Backward)).length > 0) {
                // 审批项存在反向时，初始化驳回规则
                this.BackWardRule = new BackWardRule(model);
            }
        }
    }
    /**
     * undo操作临时clone方法
     * @return {?} BpmnElement
     */
    clone() {
        /** @type {?} */
        let userActivity = new UserActivity(this.Model);
        userActivity.Name = this.Name;
        if (this.taskTitle) {
            userActivity.taskTitle = this.taskTitle.clone();
        }
        /** @type {?} */
        const resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            for (const role of resourceRoles) {
                if (role instanceof UserParticipant) {
                    /** @type {?} */
                    const user = (/** @type {?} */ (role));
                    /** @type {?} */
                    const userParticipant = user.clone();
                    userActivity.AddResourceRole(userParticipant);
                }
                else if (role instanceof PositionParticipant) {
                    /** @type {?} */
                    const position = (/** @type {?} */ (role));
                    /** @type {?} */
                    const positionParticipant = position.clone();
                    userActivity.AddResourceRole(positionParticipant);
                }
                else if (role instanceof ReportingLineParticipant) {
                    /** @type {?} */
                    const reportingLine = (/** @type {?} */ (role));
                    /** @type {?} */
                    const reportingLineParticipant = reportingLine.clone();
                    userActivity.AddResourceRole(reportingLineParticipant);
                }
                else if (role instanceof ActivityExecutorParticipant) {
                    /** @type {?} */
                    const activityExecutor = (/** @type {?} */ (role));
                    /** @type {?} */
                    const activityExecutorParticipant = activityExecutor.clone();
                    userActivity.AddResourceRole(activityExecutorParticipant);
                }
                else if (role instanceof ComponentParticipant) {
                    /** @type {?} */
                    const component = (/** @type {?} */ (role));
                    /** @type {?} */
                    const componentParticipant = component.clone();
                    userActivity.AddResourceRole(componentParticipant);
                }
                else if (role instanceof MatrixParticipant) {
                    /** @type {?} */
                    const matrix = (/** @type {?} */ (role));
                    /** @type {?} */
                    const matrixParticipant = matrix.clone();
                    userActivity.AddResourceRole(matrixParticipant);
                }
                else if (role instanceof OrganizationPotentialOwner) {
                    /** @type {?} */
                    const org = (/** @type {?} */ (role));
                    /** @type {?} */
                    const organizationPotentialOwner = org.clone();
                    userActivity.AddResourceRole(organizationPotentialOwner);
                }
                else if (role instanceof HumanPerformerImpl) {
                    /** @type {?} */
                    const performer = (/** @type {?} */ (role));
                    /** @type {?} */
                    const humanPerformerImpl = performer.clone();
                    userActivity.AddResourceRole(humanPerformerImpl);
                }
                else if (role instanceof PotentialOwnerImpl) {
                    /** @type {?} */
                    const owner = (/** @type {?} */ (role));
                    /** @type {?} */
                    const potentialOwnerImpl = owner.clone();
                    userActivity.AddResourceRole(potentialOwnerImpl);
                }
            }
        }
        userActivity.ParticipantSchemes = new Array();
        if (this.ParticipantSchemes && this.ParticipantSchemes.length > 0) {
            for (const s of this.ParticipantSchemes) {
                /** @type {?} */
                const scheme = s.clone();
                userActivity.ParticipantSchemes.push(scheme);
            }
        }
        if (this.ParticipantSetting) {
            userActivity.ParticipantSetting = this.ParticipantSetting.clone();
        }
        userActivity.AssignmentStrategy = this.AssignmentStrategy;
        if (this.AssignPerformerConfig) {
            userActivity.AssignPerformerConfig = this.AssignPerformerConfig.clone();
        }
        userActivity.PerformerNotFundExecption = this.PerformerNotFundExecption;
        userActivity.Retrievable = this.Retrievable;
        userActivity.IsRollback = this.IsRollback;
        userActivity.SelectBranch = this.SelectBranch;
        userActivity.NotifyAble = this.NotifyAble;
        userActivity.AddSignFrontAble = this.AddSignFrontAble;
        userActivity.AddSignBehindAble = this.AddSignBehindAble;
        userActivity.Priority = this.Priority;
        userActivity.ExecuteWorkItemMode = this.ExecuteWorkItemMode;
        userActivity.DisplayTerminal = this.DisplayTerminal;
        userActivity.SelectTargetAble = this.SelectTargetAble;
        if (this.JumpScope) {
            userActivity.JumpScope = this.JumpScope.clone();
        }
        if (this.BackWardRule) {
            userActivity.BackWardRule = this.BackWardRule.clone();
        }
        if (this.LoopCharacteristics) {
            userActivity.LoopCharacteristics = this.LoopCharacteristics.clone();
        }
        userActivity.transferAble = this.transferAble;
        userActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            for (const f of this.ExecuteForms) {
                /** @type {?} */
                const executeForm = f.clone();
                userActivity.ExecuteForms.push(executeForm);
            }
        }
        userActivity.customizeActions = new Array();
        if (this.customizeActions && this.customizeActions.length > 0) {
            for (const a of this.customizeActions) {
                /** @type {?} */
                const customizeAction = a.clone();
                userActivity.customizeActions.push(customizeAction);
            }
        }
        userActivity.CounterSignRules = new Array();
        if (this.CounterSignRules && this.CounterSignRules.length > 0) {
            for (const r of this.CounterSignRules) {
                /** @type {?} */
                const counterSignRule = r.clone();
                userActivity.CounterSignRules.push(counterSignRule);
            }
        }
        userActivity.AdhocActivitySecurities = new Array();
        if (this.AdhocActivitySecurities && this.AdhocActivitySecurities.length > 0) {
            for (const s of this.AdhocActivitySecurities) {
                userActivity.AdhocActivitySecurities.push(s);
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        userActivity.NotificationList = new Array();
        userActivity.anonymous = this.anonymous;
        userActivity.anonymousText = this.anonymousText;
        userActivity.BizActivityID = this.BizActivityID;
        userActivity.BizActivityName = this.BizActivityName;
        userActivity.Conclusions = new Array();
        if (this.Conclusions && this.Conclusions.length > 0) {
            for (const c of this.Conclusions) {
                /** @type {?} */
                const conclusion = c.clone();
                userActivity.Conclusions.push(conclusion);
            }
        }
        userActivity.Tools = new Array();
        if (this.Tools && this.Tools.length > 0) {
            for (const t of this.Tools) {
                if (t instanceof Component) {
                    /** @type {?} */
                    const c = (/** @type {?} */ (t));
                    /** @type {?} */
                    const tool = c.clone();
                    userActivity.Tools.push(tool);
                }
            }
        }
        userActivity.dynamicParticipants = new Array();
        if (this.dynamicParticipants && this.dynamicParticipants.length > 0) {
            for (const p of this.dynamicParticipants) {
                if (p instanceof OrganizationParticipantExpression) {
                    /** @type {?} */
                    const o = (/** @type {?} */ (p));
                    /** @type {?} */
                    const organizationParticipantExpression = o.clone();
                    userActivity.dynamicParticipants.push(organizationParticipantExpression);
                }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        userActivity.BizParameters = new Array();
        if (this.timeLimitControl) {
            userActivity.timeLimitControl = this.timeLimitControl.clone();
        }
        userActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            for (const v of this.variableSettings) {
                /** @type {?} */
                const variableSetting = v.clone();
                userActivity.variableSettings.push(variableSetting);
            }
        }
        userActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            for (const m of this.messageNotices) {
                /** @type {?} */
                const messageNotice = m.clone();
                userActivity.messageNotices.push(messageNotice);
            }
        }
        userActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            for (const e of this.extendProperties) {
                /** @type {?} */
                const extendProperty = e.clone();
                userActivity.extendProperties.push(extendProperty);
            }
        }
        if (this.approvalPivotConfig) {
            userActivity.approvalPivotConfig = this.approvalPivotConfig.clone();
        }
        if (this.urgeHandleRule) {
            userActivity.urgeHandleRule = this.urgeHandleRule.clone();
        }
        if (this.imageSettings) {
            userActivity.imageSettings = this.imageSettings.clone();
        }
        if (this.checkConditions && this.checkConditions.length > 0) {
            userActivity.checkConditions = new Array();
            for (const c of this.checkConditions) {
                /** @type {?} */
                const condition = c.clone();
                userActivity.checkConditions.push(condition);
            }
        }
        if (this.otherAssignNodes) {
            userActivity.otherAssignNodes = this.otherAssignNodes.clone();
        }
        return userActivity;
    }
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    Validate(errors) {
        // TODO: 需要添加自定义校验信息
        super.Validate(errors);
    }
}
UserActivity.Clr_Type_ID = "wf.UserActivity";
UserActivity.MEXTAG = 'wf.UserActivity';
if (false) {
    /** @type {?} */
    UserActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    UserActivity.MEXTAG;
    /** @type {?} */
    UserActivity.prototype.ClrTypeID;
    /** @type {?} */
    UserActivity.prototype.AssignmentStrategy;
    /** @type {?} */
    UserActivity.prototype.AssignPerformerConfig;
    /** @type {?} */
    UserActivity.prototype.PerformerNotFundExecption;
    /** @type {?} */
    UserActivity.prototype.Retrievable;
    /** @type {?} */
    UserActivity.prototype.IsRollback;
    /** @type {?} */
    UserActivity.prototype.SelectBranch;
    /** @type {?} */
    UserActivity.prototype.NotifyAble;
    /** @type {?} */
    UserActivity.prototype.AddSignFrontAble;
    /** @type {?} */
    UserActivity.prototype.AddSignBehindAble;
    /** @type {?} */
    UserActivity.prototype.Priority;
    /** @type {?} */
    UserActivity.prototype.ExecuteWorkItemMode;
    /** @type {?} */
    UserActivity.prototype.DisplayTerminal;
    /** @type {?} */
    UserActivity.prototype.SelectTargetAble;
    /** @type {?} */
    UserActivity.prototype.JumpScope;
    /** @type {?} */
    UserActivity.prototype.BackWardRule;
    /** @type {?} */
    UserActivity.prototype.transferAble;
    /** @type {?} */
    UserActivity.prototype.ExecuteForms;
    /** @type {?} */
    UserActivity.prototype.customizeActions;
    /** @type {?} */
    UserActivity.prototype.ParticipantSchemes;
    /** @type {?} */
    UserActivity.prototype.ParticipantSetting;
    /** @type {?} */
    UserActivity.prototype.CounterSignRules;
    /** @type {?} */
    UserActivity.prototype.AdhocActivitySecurities;
    /** @type {?} */
    UserActivity.prototype.NotificationList;
    /** @type {?} */
    UserActivity.prototype.humanPerformers;
    /** @type {?} */
    UserActivity.prototype.potentialOwners;
    /** @type {?} */
    UserActivity.prototype.dynamicParticipants;
    /** @type {?} */
    UserActivity.prototype.taskTitle;
    /** @type {?} */
    UserActivity.prototype.anonymous;
    /** @type {?} */
    UserActivity.prototype.anonymousText;
    /** @type {?} */
    UserActivity.prototype.BizActivityID;
    /** @type {?} */
    UserActivity.prototype.BizActivityName;
    /** @type {?} */
    UserActivity.prototype.Conclusions;
    /** @type {?} */
    UserActivity.prototype.Tools;
    /** @type {?} */
    UserActivity.prototype.BizParameters;
    /** @type {?} */
    UserActivity.prototype.timeLimitControl;
    /** @type {?} */
    UserActivity.prototype.variableSettings;
    /** @type {?} */
    UserActivity.prototype.messageNotices;
    /** @type {?} */
    UserActivity.prototype.extendProperties;
    /** @type {?} */
    UserActivity.prototype.approvalPivotConfig;
    /** @type {?} */
    UserActivity.prototype.urgeHandleRule;
    /** @type {?} */
    UserActivity.prototype.imageSettings;
    /** @type {?} */
    UserActivity.prototype.checkConditions;
    /** @type {?} */
    UserActivity.prototype.otherAssignNodes;
}
BpmnModelHelper.RegisterElementType(new UserActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,