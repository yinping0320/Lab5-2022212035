/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { Condition } from "./extension/condition-expression/Condition";
export class AutomaticApprovalRule extends ExtensionElement {
    /**
     * @param {?} model
     */
    constructor(model) {
        super(model);
        this.ClrTypeID = AutomaticApprovalRule.Clr_Type_ID;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        ExtensionMethod.SetAttributeValue(obj, "Id", this.Id);
        ExtensionMethod.SetAttributeValue(obj, "ConclusionValue", this.conclusionValue);
        ExtensionMethod.SetAttributeValue(obj, "Comment", this.comment);
        ExtensionMethod.SetAttributeValue(obj, "OperatorText", this.operatorText);
        ExtensionMethod.SetAttributeValue(obj, "ParticipantAsOperator", this.participantAsOperator);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = ExtensionMethod.GetAttributeValue4String(obj, "Id");
        this.conclusionValue = ExtensionMethod.GetAttributeValue4String(obj, "ConclusionValue");
        this.comment = ExtensionMethod.GetAttributeValue4String(obj, "Comment");
        this.operatorText = ExtensionMethod.GetAttributeValue4String(obj, "OperatorText");
        this.participantAsOperator = ExtensionMethod.GetAttributeValue4Boolean(obj, "ParticipantAsOperator");
        /** @type {?} */
        const conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            const condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new AutomaticApprovalRule(this.Model);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const automaticApprovalRule = new AutomaticApprovalRule(this.Model);
        automaticApprovalRule.Id = this.Id;
        automaticApprovalRule.comment = this.comment;
        automaticApprovalRule.conclusionValue = this.conclusionValue;
        automaticApprovalRule.operatorText = this.operatorText;
        automaticApprovalRule.participantAsOperator = this.participantAsOperator;
        if (this.condition) {
            automaticApprovalRule.condition = this.condition.clone();
        }
        return automaticApprovalRule;
    }
}
AutomaticApprovalRule.Clr_Type_ID = "wf.AutomaticApprovalRule";
if (false) {
    /** @type {?} */
    AutomaticApprovalRule.Clr_Type_ID;
    /** @type {?} */
    AutomaticApprovalRule.prototype.ClrTypeID;
    /**
     * 自动审批规则标识
     * DUPLICATE_PARTICIPANT 重复审批人
     * CUSTOM_CONDITION 自定义条件
     * TIMEOUT_OPERATION 超时自动审批
     * @type {?}
     */
    AutomaticApprovalRule.prototype.Id;
    /**
     * 自动审批的结论项
     * @type {?}
     */
    AutomaticApprovalRule.prototype.conclusionValue;
    /**
     * 自动审批意见（备注）
     * @type {?}
     */
    AutomaticApprovalRule.prototype.comment;
    /**
     * 自动审批操作人显示文本
     * @type {?}
     */
    AutomaticApprovalRule.prototype.operatorText;
    /**
     * 自动审批规则条件
     * @type {?}
     */
    AutomaticApprovalRule.prototype.condition;
    /**
     * 自动审批操作人记录为当前活动参与者
     * @type {?}
     */
    AutomaticApprovalRule.prototype.participantAsOperator;
}
BpmnModelHelper.RegisterElementType(new AutomaticApprovalRule(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,