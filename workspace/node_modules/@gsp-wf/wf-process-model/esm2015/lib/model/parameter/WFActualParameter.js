/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModel, BpmnModelHelper, MexExtensionElement } from "@edp-pmf/bpmn-model";
export class ActualParameter extends MexExtensionElement {
    /**
     * @param {?} model
     * @param {?=} name
     * @param {?=} value
     * @param {?=} valueText
     * @param {?=} tag
     */
    constructor(model, name, value, valueText, tag) {
        super(model);
        this.ClrTypeID = ActualParameter.Clr_Type_ID;
        this.Name = name;
        this.Value = value;
        this.ValueText = valueText;
        this.Tag = tag;
    }
    /**
     * @return {?}
     */
    NewInstance() {
        return new ActualParameter(this.Model);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "ValueText", this.ValueText);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Name = obj.Name;
        this.Value = obj.Value;
        this.ValueText = obj.ValueText;
        this.Tag = obj.Tag;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const parameter = new ActualParameter(this.Model);
        parameter.Name = this.Name;
        parameter.Value = this.Value;
        parameter.Tag = this.Tag;
        parameter.ValueText = this.ValueText;
        return parameter;
    }
}
ActualParameter.Clr_Type_ID = "wf.Mex.ActualParameter";
if (false) {
    /** @type {?} */
    ActualParameter.Clr_Type_ID;
    /** @type {?} */
    ActualParameter.prototype.ClrTypeID;
    /** @type {?} */
    ActualParameter.prototype.Name;
    /** @type {?} */
    ActualParameter.prototype.Value;
    /** @type {?} */
    ActualParameter.prototype.ValueText;
    /** @type {?} */
    ActualParameter.prototype.Tag;
}
BpmnModelHelper.RegisterElementType(new ActualParameter(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV0ZBY3R1YWxQYXJhbWV0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvcGFyYW1ldGVyL1dGQWN0dWFsUGFyYW1ldGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRGLE1BQU0sT0FBTyxlQUFnQixTQUFRLG1CQUFtQjs7Ozs7Ozs7SUFhcEQsWUFBWSxLQUFnQixFQUFFLElBQWEsRUFBRSxLQUFjLEVBQUUsU0FBa0IsRUFBRSxHQUFZO1FBQ3pGLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVpqQixjQUFTLEdBQVcsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQWE1QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNuQixDQUFDOzs7O0lBZkQsV0FBVztRQUNQLE9BQU8sSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBZVMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxtQkFBbUI7O1lBQ1gsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxTQUFTLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNqRCxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUN6QixTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFckMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7QUFwRE0sMkJBQVcsR0FBVyx3QkFBd0IsQ0FBQzs7O0lBQXRELDRCQUFzRDs7SUFDdEQsb0NBQWdEOztJQU1oRCwrQkFBYTs7SUFDYixnQ0FBYzs7SUFDZCxvQ0FBa0I7O0lBQ2xCLDhCQUFZOztBQTRDaEIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksZUFBZSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIE1leEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFjdHVhbFBhcmFtZXRlciBleHRlbmRzIE1leEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLk1leC5BY3R1YWxQYXJhbWV0ZXJcIjtcclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gQWN0dWFsUGFyYW1ldGVyLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IEFjdHVhbFBhcmFtZXRlciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBY3R1YWxQYXJhbWV0ZXIodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgTmFtZTogc3RyaW5nO1xyXG4gICAgVmFsdWU6IHN0cmluZztcclxuICAgIFZhbHVlVGV4dDogc3RyaW5nO1xyXG4gICAgVGFnOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCwgbmFtZT86IHN0cmluZywgdmFsdWU/OiBzdHJpbmcsIHZhbHVlVGV4dD86IHN0cmluZywgdGFnPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5WYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuVmFsdWVUZXh0ID0gdmFsdWVUZXh0O1xyXG4gICAgICAgIHRoaXMuVGFnID0gdGFnO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJOYW1lXCIsIHRoaXMuTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJWYWx1ZVwiLCB0aGlzLlZhbHVlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhbHVlVGV4dFwiLCB0aGlzLlZhbHVlVGV4dCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJUYWdcIiwgdGhpcy5UYWcpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLk5hbWUgPSBvYmouTmFtZTtcclxuICAgICAgICB0aGlzLlZhbHVlID0gb2JqLlZhbHVlO1xyXG4gICAgICAgIHRoaXMuVmFsdWVUZXh0ID0gb2JqLlZhbHVlVGV4dDtcclxuICAgICAgICB0aGlzLlRhZyA9IG9iai5UYWc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQWN0dWFsUGFyYW1ldGVyIHtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSBuZXcgQWN0dWFsUGFyYW1ldGVyKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHBhcmFtZXRlci5OYW1lID0gdGhpcy5OYW1lO1xyXG4gICAgICAgIHBhcmFtZXRlci5WYWx1ZSA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgcGFyYW1ldGVyLlRhZyA9IHRoaXMuVGFnO1xyXG4gICAgICAgIHBhcmFtZXRlci5WYWx1ZVRleHQgPSB0aGlzLlZhbHVlVGV4dDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcjtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgQWN0dWFsUGFyYW1ldGVyKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==