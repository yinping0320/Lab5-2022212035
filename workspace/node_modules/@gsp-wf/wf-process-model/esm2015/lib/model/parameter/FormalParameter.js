/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelHelper, MexElement, DataType } from "@edp-pmf/bpmn-model";
import { ParameterMode } from "./ParameterMode";
export class FormalParameter extends MexElement {
    /**
     * @param {?} model
     * @param {?=} id
     * @param {?=} code
     * @param {?=} name
     * @param {?=} desc
     * @param {?=} index
     * @param {?=} datatype
     * @param {?=} mode
     */
    constructor(model, id, code, name, desc, index, datatype, mode) {
        super(model);
        this.Id = id || '';
        this.Code = code || '';
        this.Name = name || '';
        this.Description = desc || '';
        this.index = index || 0;
        this.DataType = datatype || new DataType(model);
        this.Mode = mode || ParameterMode.IN;
    }
    /**
     * @return {?}
     */
    get Index() {
        return this.index;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set Index(index) {
        this.index = index;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.Code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        BpmnModelHelper.SetAttributeValue(obj, "index", this.index);
        BpmnModelHelper.SetAttributeValue(obj, "DataType", this.DataType.ConvertToJsonObject());
        BpmnModelHelper.SetAttributeValue(obj, "Mode", this.Mode);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.index = obj.index;
        this.Description = obj.Description;
        this.Code = obj.Code;
        /** @type {?} */
        let type = new DataType(this.Model);
        type.LoadFromJsonObject(obj.DataType);
        this.DataType = type;
        this.Mode = ((/** @type {?} */ (obj.Mode)));
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const f = new FormalParameter(this.Model);
        return f;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormalParameter.prototype.index;
    /** @type {?} */
    FormalParameter.prototype.Id;
    /** @type {?} */
    FormalParameter.prototype.Code;
    /** @type {?} */
    FormalParameter.prototype.Name;
    /** @type {?} */
    FormalParameter.prototype.Description;
    /** @type {?} */
    FormalParameter.prototype.DataType;
    /** @type {?} */
    FormalParameter.prototype.Mode;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybWFsUGFyYW1ldGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcmFtZXRlci9Gb3JtYWxQYXJhbWV0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYSxlQUFlLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxVQUFVOzs7Ozs7Ozs7OztJQUczQyxZQUFZLEtBQWdCLEVBQUUsRUFBVyxFQUFFLElBQWEsRUFBRSxJQUFhLEVBQUUsSUFBYSxFQUFFLEtBQWMsRUFBRSxRQUFtQixFQUFFLElBQW9CO1FBQzdJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBT0QsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBQ0QsSUFBSSxLQUFLLENBQUMsS0FBYTtRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDOzs7OztJQUtTLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUN4RixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUNELGtCQUFrQixDQUFDLEdBQVE7UUFDdkIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7O1lBRWpCLElBQUksR0FBYSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQWlCLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDSyxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV6QyxPQUFPLENBQUMsQ0FBQTtJQUNaLENBQUM7Q0FDSjs7Ozs7O0lBbEVHLGdDQUFzQjs7SUFhdEIsNkJBQVc7O0lBQ1gsK0JBQWE7O0lBQ2IsK0JBQWE7O0lBQ2Isc0NBQW9COztJQVNwQixtQ0FBbUI7O0lBQ25CLCtCQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBNZXhFbGVtZW50LCBEYXRhVHlwZSB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IFBhcmFtZXRlck1vZGUgfSBmcm9tIFwiLi9QYXJhbWV0ZXJNb2RlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRm9ybWFsUGFyYW1ldGVyIGV4dGVuZHMgTWV4RWxlbWVudCB7XHJcbiAgICBwcml2YXRlIGluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCwgaWQ/OiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcsIGRlc2M/OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyLCBkYXRhdHlwZT86IERhdGFUeXBlLCBtb2RlPzogUGFyYW1ldGVyTW9kZSkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgICAgICB0aGlzLklkID0gaWQgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5Db2RlID0gY29kZSB8fCAnJztcclxuICAgICAgICB0aGlzLk5hbWUgPSBuYW1lIHx8ICcnO1xyXG4gICAgICAgIHRoaXMuRGVzY3JpcHRpb24gPSBkZXNjIHx8ICcnO1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleCB8fCAwO1xyXG4gICAgICAgIHRoaXMuRGF0YVR5cGUgPSBkYXRhdHlwZSB8fCBuZXcgRGF0YVR5cGUobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuTW9kZSA9IG1vZGUgfHwgUGFyYW1ldGVyTW9kZS5JTjtcclxuICAgIH1cclxuXHJcbiAgICBJZDogc3RyaW5nO1xyXG4gICAgQ29kZTogc3RyaW5nO1xyXG4gICAgTmFtZTogc3RyaW5nO1xyXG4gICAgRGVzY3JpcHRpb246IHN0cmluZztcclxuXHJcbiAgICBnZXQgSW5kZXgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleDtcclxuICAgIH1cclxuICAgIHNldCBJbmRleChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIERhdGFUeXBlOiBEYXRhVHlwZTtcclxuICAgIE1vZGU6IFBhcmFtZXRlck1vZGU7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIklkXCIsIHRoaXMuSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29kZVwiLCB0aGlzLkNvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmFtZVwiLCB0aGlzLk5hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRGVzY3JpcHRpb25cIiwgdGhpcy5EZXNjcmlwdGlvbik7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJpbmRleFwiLCB0aGlzLmluZGV4KTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkRhdGFUeXBlXCIsIHRoaXMuRGF0YVR5cGUuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk1vZGVcIiwgdGhpcy5Nb2RlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLklkID0gb2JqLklkO1xyXG4gICAgICAgIHRoaXMuTmFtZSA9IG9iai5OYW1lO1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBvYmouaW5kZXg7XHJcbiAgICAgICAgdGhpcy5EZXNjcmlwdGlvbiA9IG9iai5EZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLkNvZGUgPSBvYmouQ29kZTtcclxuXHJcbiAgICAgICAgbGV0IHR5cGU6IERhdGFUeXBlID0gbmV3IERhdGFUeXBlKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHR5cGUuTG9hZEZyb21Kc29uT2JqZWN0KG9iai5EYXRhVHlwZSk7XHJcbiAgICAgICAgdGhpcy5EYXRhVHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIHRoaXMuTW9kZSA9IChvYmouTW9kZSBhcyBQYXJhbWV0ZXJNb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBGb3JtYWxQYXJhbWV0ZXIge1xyXG4gICAgICAgIGNvbnN0IGYgPSBuZXcgRm9ybWFsUGFyYW1ldGVyKHRoaXMuTW9kZWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gZlxyXG4gICAgfVxyXG59Il19