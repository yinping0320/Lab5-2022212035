/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod, ExtensionElement } from "@edp-pmf/bpmn-model";
var VariableSetting = /** @class */ (function (_super) {
    tslib_1.__extends(VariableSetting, _super);
    function VariableSetting(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = VariableSetting.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    VariableSetting.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        // ExtensionMethod.SetAttributeValue(obj, "VariableId", this.variableId);
        ExtensionMethod.SetAttributeValue(obj, "VariableCode", this.variableCode);
        ExtensionMethod.SetAttributeValue(obj, "VariableName", this.variableName);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        ExtensionMethod.SetAttributeValue(obj, "ExecutionTime", this.executionTime);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        ExtensionMethod.SetAttributeValue(obj, "ValueText", this.valueText);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    VariableSetting.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        // this.variableId = ExtensionMethod.GetAttributeValue4String(obj, "VariableId");
        this.variableCode = ExtensionMethod.GetAttributeValue4String(obj, "VariableCode");
        this.variableName = ExtensionMethod.GetAttributeValue4String(obj, "VariableName");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
        this.executionTime = ExtensionMethod.GetAttributeValue4String(obj, "ExecutionTime");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
        this.valueText = ExtensionMethod.GetAttributeValue4String(obj, "ValueText");
    };
    /**
     * @return {?}
     */
    VariableSetting.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new VariableSetting(this.Model);
    };
    /**
     * @return {?}
     */
    VariableSetting.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var variableSetting = new VariableSetting(this.Model);
        variableSetting.variableCode = this.variableCode;
        variableSetting.variableName = this.variableName;
        variableSetting.tag = this.tag;
        variableSetting.executionTime = this.executionTime;
        variableSetting.value = this.value;
        variableSetting.valueText = this.valueText;
        return variableSetting;
    };
    VariableSetting.Clr_Type_ID = "wf.VariableSetting";
    return VariableSetting;
}(ExtensionElement));
export { VariableSetting };
if (false) {
    /** @type {?} */
    VariableSetting.Clr_Type_ID;
    /** @type {?} */
    VariableSetting.prototype.ClrTypeID;
    /**
     * 变量编号
     * @type {?}
     */
    VariableSetting.prototype.variableCode;
    /**
     * 变量名称
     * @type {?}
     */
    VariableSetting.prototype.variableName;
    /**
     * 自定义标签，赋值方式
     * expression 语义化表达式
     * constant 常量
     * component 构件
     * @type {?}
     */
    VariableSetting.prototype.tag;
    /**
     * 变量执行时机
     * ACTIVITY_STARTED 活动开始
     * ACTIVITY_COMPLETED 活动完成
     * @type {?}
     */
    VariableSetting.prototype.executionTime;
    /**
     * 变量值
     * @type {?}
     */
    VariableSetting.prototype.value;
    /** @type {?} */
    VariableSetting.prototype.valueText;
}
BpmnModelHelper.RegisterElementType(new VariableSetting(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFyaWFibGVTZXR0aW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL1ZhcmlhYmxlU2V0dGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBHO0lBQXFDLDJDQUFnQjtJQW9DakQseUJBQVksS0FBZ0I7UUFBNUIsWUFDSSxrQkFBTSxLQUFLLENBQUMsU0FDZjtRQXBDUSxlQUFTLEdBQVcsZUFBZSxDQUFDLFdBQVcsQ0FBQzs7SUFvQ3pELENBQUM7Ozs7SUFFRCw2Q0FBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFDckMseUVBQXlFO1FBQ3pFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXBFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCw0Q0FBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixpRkFBaUY7UUFDakYsSUFBSSxDQUFDLFlBQVksR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxZQUFZLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsR0FBRyxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFaEYsQ0FBQzs7OztJQUVELHFDQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7SUFHRCwrQkFBSzs7O0lBQUw7O1lBQ1UsZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkQsZUFBZSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ2pELGVBQWUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNqRCxlQUFlLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDL0IsZUFBZSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ25ELGVBQWUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNuQyxlQUFlLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFM0MsT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQztJQWhGTSwyQkFBVyxHQUFXLG9CQUFvQixDQUFDO0lBaUZ0RCxzQkFBQztDQUFBLEFBbEZELENBQXFDLGdCQUFnQixHQWtGcEQ7U0FsRlksZUFBZTs7O0lBQ3hCLDRCQUFrRDs7SUFDbEQsb0NBQXlEOzs7OztJQVN6RCx1Q0FBcUI7Ozs7O0lBSXJCLHVDQUFxQjs7Ozs7Ozs7SUFPckIsOEJBQVk7Ozs7Ozs7SUFNWix3Q0FBc0I7Ozs7O0lBSXRCLGdDQUFjOztJQUVkLG9DQUFrQjs7QUFpRHRCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25NZXRob2QsIEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlU2V0dGluZyBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLlZhcmlhYmxlU2V0dGluZ1wiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBWYXJpYWJsZVNldHRpbmcuQ2xyX1R5cGVfSUQ7XHJcblxyXG4gICAgLy8gLyoqXHJcbiAgICAvLyAgKiDlj5jph49JZFxyXG4gICAgLy8gICovXHJcbiAgICAvLyB2YXJpYWJsZUlkOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOWPmOmHj+e8luWPt1xyXG4gICAgICovXHJcbiAgICB2YXJpYWJsZUNvZGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICog5Y+Y6YeP5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIHZhcmlhYmxlTmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDoh6rlrprkuYnmoIfnrb7vvIzotYvlgLzmlrnlvI9cclxuICAgICAqIGV4cHJlc3Npb24g6K+t5LmJ5YyW6KGo6L6+5byPXHJcbiAgICAgKiBjb25zdGFudCDluLjph49cclxuICAgICAqIGNvbXBvbmVudCDmnoTku7ZcclxuICAgICAqL1xyXG4gICAgdGFnOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOWPmOmHj+aJp+ihjOaXtuaculxyXG4gICAgICogQUNUSVZJVFlfU1RBUlRFRCDmtLvliqjlvIDlp4tcclxuICAgICAqIEFDVElWSVRZX0NPTVBMRVRFRCDmtLvliqjlrozmiJBcclxuICAgICAqL1xyXG4gICAgZXhlY3V0aW9uVGltZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlj5jph4/lgLxcclxuICAgICAqL1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuXHJcbiAgICB2YWx1ZVRleHQ6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIC8vIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVmFyaWFibGVJZFwiLCB0aGlzLnZhcmlhYmxlSWQpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVmFyaWFibGVDb2RlXCIsIHRoaXMudmFyaWFibGVDb2RlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhcmlhYmxlTmFtZVwiLCB0aGlzLnZhcmlhYmxlTmFtZSk7XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJUYWdcIiwgdGhpcy50YWcpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRXhlY3V0aW9uVGltZVwiLCB0aGlzLmV4ZWN1dGlvblRpbWUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVmFsdWVcIiwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJWYWx1ZVRleHRcIiwgdGhpcy52YWx1ZVRleHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICAvLyB0aGlzLnZhcmlhYmxlSWQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJWYXJpYWJsZUlkXCIpO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVDb2RlID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiVmFyaWFibGVDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVOYW1lID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiVmFyaWFibGVOYW1lXCIpO1xyXG4gICAgICAgIHRoaXMudGFnID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiVGFnXCIpO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0aW9uVGltZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkV4ZWN1dGlvblRpbWVcIik7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIlZhbHVlXCIpO1xyXG4gICAgICAgIHRoaXMudmFsdWVUZXh0ID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiVmFsdWVUZXh0XCIpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBWYXJpYWJsZVNldHRpbmcge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFyaWFibGVTZXR0aW5nKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjbG9uZSgpOiBWYXJpYWJsZVNldHRpbmcge1xyXG4gICAgICAgIGNvbnN0IHZhcmlhYmxlU2V0dGluZyA9IG5ldyBWYXJpYWJsZVNldHRpbmcodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgdmFyaWFibGVTZXR0aW5nLnZhcmlhYmxlQ29kZSA9IHRoaXMudmFyaWFibGVDb2RlO1xyXG4gICAgICAgIHZhcmlhYmxlU2V0dGluZy52YXJpYWJsZU5hbWUgPSB0aGlzLnZhcmlhYmxlTmFtZTtcclxuICAgICAgICB2YXJpYWJsZVNldHRpbmcudGFnID0gdGhpcy50YWc7XHJcbiAgICAgICAgdmFyaWFibGVTZXR0aW5nLmV4ZWN1dGlvblRpbWUgPSB0aGlzLmV4ZWN1dGlvblRpbWU7XHJcbiAgICAgICAgdmFyaWFibGVTZXR0aW5nLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB2YXJpYWJsZVNldHRpbmcudmFsdWVUZXh0ID0gdGhpcy52YWx1ZVRleHQ7XHJcblxyXG4gICAgICAgIHJldHVybiB2YXJpYWJsZVNldHRpbmc7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFZhcmlhYmxlU2V0dGluZyhuZXcgQnBtbk1vZGVsKCkpKTsiXX0=