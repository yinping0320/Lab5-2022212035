/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelHelper, MexElement, DataType } from "@edp-pmf/bpmn-model";
import { ParameterMode } from "./ParameterMode";
var FormalParameter = /** @class */ (function (_super) {
    tslib_1.__extends(FormalParameter, _super);
    function FormalParameter(model, id, code, name, desc, index, datatype, mode) {
        var _this = _super.call(this, model) || this;
        _this.Id = id || '';
        _this.Code = code || '';
        _this.Name = name || '';
        _this.Description = desc || '';
        _this.index = index || 0;
        _this.DataType = datatype || new DataType(model);
        _this.Mode = mode || ParameterMode.IN;
        return _this;
    }
    Object.defineProperty(FormalParameter.prototype, "Index", {
        get: /**
         * @return {?}
         */
        function () {
            return this.index;
        },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.index = index;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    FormalParameter.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    FormalParameter.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.Code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        BpmnModelHelper.SetAttributeValue(obj, "index", this.index);
        BpmnModelHelper.SetAttributeValue(obj, "DataType", this.DataType.ConvertToJsonObject());
        BpmnModelHelper.SetAttributeValue(obj, "Mode", this.Mode);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    FormalParameter.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.index = obj.index;
        this.Description = obj.Description;
        this.Code = obj.Code;
        /** @type {?} */
        var type = new DataType(this.Model);
        type.LoadFromJsonObject(obj.DataType);
        this.DataType = type;
        this.Mode = ((/** @type {?} */ (obj.Mode)));
    };
    /**
     * @return {?}
     */
    FormalParameter.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var f = new FormalParameter(this.Model);
        return f;
    };
    return FormalParameter;
}(MexElement));
export { FormalParameter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormalParameter.prototype.index;
    /** @type {?} */
    FormalParameter.prototype.Id;
    /** @type {?} */
    FormalParameter.prototype.Code;
    /** @type {?} */
    FormalParameter.prototype.Name;
    /** @type {?} */
    FormalParameter.prototype.Description;
    /** @type {?} */
    FormalParameter.prototype.DataType;
    /** @type {?} */
    FormalParameter.prototype.Mode;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybWFsUGFyYW1ldGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcmFtZXRlci9Gb3JtYWxQYXJhbWV0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWEsZUFBZSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQ7SUFBcUMsMkNBQVU7SUFHM0MseUJBQVksS0FBZ0IsRUFBRSxFQUFXLEVBQUUsSUFBYSxFQUFFLElBQWEsRUFBRSxJQUFhLEVBQUUsS0FBYyxFQUFFLFFBQW1CLEVBQUUsSUFBb0I7UUFBakosWUFDSSxrQkFBTSxLQUFLLENBQUMsU0FRZjtRQVBHLEtBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNuQixLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM5QixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDeEIsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQzs7SUFDekMsQ0FBQztJQU9ELHNCQUFJLGtDQUFLOzs7O1FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFDRCxVQUFVLEtBQWE7WUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQzs7O09BSEE7Ozs7O0lBUVMsNkNBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsNkNBQW1COzs7SUFBbkI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFDeEYsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTFELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFDRCw0Q0FBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDOztZQUVqQixJQUFJLEdBQWEsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM3QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXJCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxtQkFBQSxHQUFHLENBQUMsSUFBSSxFQUFpQixDQUFDLENBQUM7SUFDNUMsQ0FBQzs7OztJQUVELCtCQUFLOzs7SUFBTDs7WUFDVSxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV6QyxPQUFPLENBQUMsQ0FBQTtJQUNaLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUFuRUQsQ0FBcUMsVUFBVSxHQW1FOUM7Ozs7Ozs7SUFsRUcsZ0NBQXNCOztJQWF0Qiw2QkFBVzs7SUFDWCwrQkFBYTs7SUFDYiwrQkFBYTs7SUFDYixzQ0FBb0I7O0lBU3BCLG1DQUFtQjs7SUFDbkIsK0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIE1leEVsZW1lbnQsIERhdGFUeXBlIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgUGFyYW1ldGVyTW9kZSB9IGZyb20gXCIuL1BhcmFtZXRlck1vZGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtYWxQYXJhbWV0ZXIgZXh0ZW5kcyBNZXhFbGVtZW50IHtcclxuICAgIHByaXZhdGUgaW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsLCBpZD86IHN0cmluZywgY29kZT86IHN0cmluZywgbmFtZT86IHN0cmluZywgZGVzYz86IHN0cmluZywgaW5kZXg/OiBudW1iZXIsIGRhdGF0eXBlPzogRGF0YVR5cGUsIG1vZGU/OiBQYXJhbWV0ZXJNb2RlKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuSWQgPSBpZCB8fCAnJztcclxuICAgICAgICB0aGlzLkNvZGUgPSBjb2RlIHx8ICcnO1xyXG4gICAgICAgIHRoaXMuTmFtZSA9IG5hbWUgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5EZXNjcmlwdGlvbiA9IGRlc2MgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4IHx8IDA7XHJcbiAgICAgICAgdGhpcy5EYXRhVHlwZSA9IGRhdGF0eXBlIHx8IG5ldyBEYXRhVHlwZShtb2RlbCk7XHJcbiAgICAgICAgdGhpcy5Nb2RlID0gbW9kZSB8fCBQYXJhbWV0ZXJNb2RlLklOO1xyXG4gICAgfVxyXG5cclxuICAgIElkOiBzdHJpbmc7XHJcbiAgICBDb2RlOiBzdHJpbmc7XHJcbiAgICBOYW1lOiBzdHJpbmc7XHJcbiAgICBEZXNjcmlwdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIGdldCBJbmRleCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4O1xyXG4gICAgfVxyXG4gICAgc2V0IEluZGV4KGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgRGF0YVR5cGU6IERhdGFUeXBlO1xyXG4gICAgTW9kZTogUGFyYW1ldGVyTW9kZTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiSWRcIiwgdGhpcy5JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJDb2RlXCIsIHRoaXMuQ29kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJOYW1lXCIsIHRoaXMuTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJEZXNjcmlwdGlvblwiLCB0aGlzLkRlc2NyaXB0aW9uKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImluZGV4XCIsIHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRGF0YVR5cGVcIiwgdGhpcy5EYXRhVHlwZS5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTW9kZVwiLCB0aGlzLk1vZGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuSWQgPSBvYmouSWQ7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gb2JqLk5hbWU7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IG9iai5pbmRleDtcclxuICAgICAgICB0aGlzLkRlc2NyaXB0aW9uID0gb2JqLkRlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuQ29kZSA9IG9iai5Db2RlO1xyXG5cclxuICAgICAgICBsZXQgdHlwZTogRGF0YVR5cGUgPSBuZXcgRGF0YVR5cGUodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgdHlwZS5Mb2FkRnJvbUpzb25PYmplY3Qob2JqLkRhdGFUeXBlKTtcclxuICAgICAgICB0aGlzLkRhdGFUeXBlID0gdHlwZTtcclxuXHJcbiAgICAgICAgdGhpcy5Nb2RlID0gKG9iai5Nb2RlIGFzIFBhcmFtZXRlck1vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IEZvcm1hbFBhcmFtZXRlciB7XHJcbiAgICAgICAgY29uc3QgZiA9IG5ldyBGb3JtYWxQYXJhbWV0ZXIodGhpcy5Nb2RlbCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmXHJcbiAgICB9XHJcbn0iXX0=