/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, BpmnModelJsonHelper, CallActivity, SubProcessDataAssociations, MultiInstanceLoopCharacteristics } from "@edp-pmf/bpmn-model";
import { BackWardRule } from "./extension/completion-strategy/BackWardRule";
import { VariableSetting } from "./VariableSetting";
var CallActivitySubProcess = /** @class */ (function (_super) {
    tslib_1.__extends(CallActivitySubProcess, _super);
    function CallActivitySubProcess(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = CallActivitySubProcess.Clr_Type_ID;
        _this.aifProcessCode = null;
        _this.useAutoCreationData = false;
        _this.SubProcessDataAssociations = new SubProcessDataAssociations(model);
        _this.inheritVariables = true;
        _this.inheritBizDataId = true;
        _this.backWardRule = new BackWardRule(model);
        _this.LoopCharacteristics = new MultiInstanceLoopCharacteristics(model);
        _this.aifProcessCode = null;
        _this.useAutoCreationData = false;
        return _this;
    }
    /**
     * @return {?}
     */
    CallActivitySubProcess.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.SubProcessDataAssociations = new SubProcessDataAssociations(this.Model);
        this.inheritVariables = true;
        this.inheritBizDataId = true;
        this.variableSettings = new Array();
        this.aifProcessCode = null;
        this.useAutoCreationData = false;
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, 'CalledBizDefKey', this.calledBizDefKey);
        BpmnModelHelper.SetAttributeValue(obj, 'BizDataId', this.bizDataId);
        BpmnModelHelper.SetAttributeValue(obj, 'InheritVariables', this.inheritVariables);
        BpmnModelHelper.SetAttributeValue(obj, 'InheritBizDataId', this.inheritBizDataId);
        BpmnModelHelper.SetAttributeValue(obj, 'aifProcessCode', this.aifProcessCode);
        BpmnModelHelper.SetAttributeValue(obj, 'useAutoCreationData', this.useAutoCreationData);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CallActivitySubProcess.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.calledBizDefKey = obj.CalledBizDefKey;
        this.bizDataId = obj.BizDataId;
        this.inheritVariables = obj.InheritVariables;
        this.inheritBizDataId = obj.InheritBizDataId;
        this.aifProcessCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifProcessCode");
        this.useAutoCreationData = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "useAutoCreationData");
    };
    /**
     * @protected
     * @return {?}
     */
    CallActivitySubProcess.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.backWardRule != null) {
            this.backWardRule.MexTag = CallActivitySubProcess.MEXTAG;
            list.push(this.backWardRule);
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.variableSettings), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    item.MexTag = CallActivitySubProcess.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    CallActivitySubProcess.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_2, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== CallActivitySubProcess.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case VariableSetting.Clr_Type_ID:
                        this.variableSettings.push((/** @type {?} */ (extensionElement)));
                        ;
                        break;
                    case BackWardRule.Clr_Type_ID:
                        this.backWardRule = ((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new CallActivitySubProcess(this.Model);
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var callActivitySubProcess = new CallActivitySubProcess(this.Model);
        callActivitySubProcess.Name = this.Name;
        callActivitySubProcess.IsForCompensation = this.IsForCompensation;
        callActivitySubProcess.CalledElement = this.CalledElement;
        callActivitySubProcess.calledBizDefKey = this.calledBizDefKey;
        callActivitySubProcess.bizDataId = this.bizDataId;
        callActivitySubProcess.inheritBizDataId = this.inheritBizDataId;
        callActivitySubProcess.inheritVariables = this.inheritVariables;
        callActivitySubProcess.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.variableSettings), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var v = _c.value;
                    /** @type {?} */
                    var variableSetting = v.clone();
                    callActivitySubProcess.variableSettings.push(variableSetting);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.backWardRule) {
            callActivitySubProcess.backWardRule = this.backWardRule.clone();
        }
        if (this.LoopCharacteristics) {
            callActivitySubProcess.LoopCharacteristics = this.LoopCharacteristics.clone();
        }
        callActivitySubProcess.aifProcessCode = null;
        if (this.aifProcessCode) {
            callActivitySubProcess.aifProcessCode = this.aifProcessCode;
        }
        callActivitySubProcess.useAutoCreationData = this.useAutoCreationData;
        return callActivitySubProcess;
    };
    CallActivitySubProcess.Clr_Type_ID = "wf.CallActivitySubProcess";
    CallActivitySubProcess.MEXTAG = "wf.CallActivitySubProcess";
    return CallActivitySubProcess;
}(CallActivity));
export { CallActivitySubProcess };
if (false) {
    /** @type {?} */
    CallActivitySubProcess.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess.MEXTAG;
    /** @type {?} */
    CallActivitySubProcess.prototype.ClrTypeID;
    /** @type {?} */
    CallActivitySubProcess.prototype.calledBizDefKey;
    /** @type {?} */
    CallActivitySubProcess.prototype.bizDataId;
    /** @type {?} */
    CallActivitySubProcess.prototype.inheritVariables;
    /** @type {?} */
    CallActivitySubProcess.prototype.inheritBizDataId;
    /** @type {?} */
    CallActivitySubProcess.prototype.backWardRule;
    /** @type {?} */
    CallActivitySubProcess.prototype.variableSettings;
    /** @type {?} */
    CallActivitySubProcess.prototype.aifProcessCode;
    /** @type {?} */
    CallActivitySubProcess.prototype.useAutoCreationData;
}
BpmnModelHelper.RegisterElementType(new CallActivitySubProcess(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,