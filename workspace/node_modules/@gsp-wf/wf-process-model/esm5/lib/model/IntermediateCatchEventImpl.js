/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, IntermediateCatchEvent } from "@edp-pmf/bpmn-model";
import { BackWardRule } from "./extension/completion-strategy/BackWardRule";
import { SignalEventDefinitionImpl } from "./SignalEventDefinitionImpl";
import { VariableSetting } from "./VariableSetting";
var IntermediateCatchEventImpl = /** @class */ (function (_super) {
    tslib_1.__extends(IntermediateCatchEventImpl, _super);
    function IntermediateCatchEventImpl(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = IntermediateCatchEventImpl.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    IntermediateCatchEventImpl.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.variableSettings = new Array();
    };
    /**
     * @protected
     * @return {?}
     */
    IntermediateCatchEventImpl.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.backWardRule != null) {
            this.backWardRule.MexTag = IntermediateCatchEventImpl.MEXTAG;
            list.push(this.backWardRule);
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.variableSettings), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    item.MexTag = IntermediateCatchEventImpl.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    IntermediateCatchEventImpl.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_2, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== IntermediateCatchEventImpl.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case BackWardRule.Clr_Type_ID:
                        this.backWardRule = ((/** @type {?} */ (extensionElement)));
                        break;
                    case VariableSetting.Clr_Type_ID:
                        this.variableSettings.push((/** @type {?} */ (extensionElement)));
                        ;
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @return {?}
     */
    IntermediateCatchEventImpl.prototype.initEventDefinitions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var passEvent = new SignalEventDefinitionImpl(this.Model);
        passEvent.name = '通过';
        passEvent.triggerAction = 'Pass';
        passEvent.Async = false;
        passEvent.SignalRef = 'Pass';
        this.EventDefinitions.push(passEvent);
        /** @type {?} */
        var backEvent = new SignalEventDefinitionImpl(this.Model);
        backEvent.name = '驳回';
        backEvent.triggerAction = 'Back';
        backEvent.Async = false;
        backEvent.SignalRef = 'Back';
        this.EventDefinitions.push(backEvent);
        /** @type {?} */
        var abortEvent = new SignalEventDefinitionImpl(this.Model);
        abortEvent.name = '终止';
        abortEvent.triggerAction = 'Abort';
        abortEvent.Async = false;
        abortEvent.SignalRef = 'Abort';
        this.EventDefinitions.push(abortEvent);
        // 初始化驳回规则
        this.backWardRule = new BackWardRule(this.Model);
    };
    /**
     * @return {?}
     */
    IntermediateCatchEventImpl.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new IntermediateCatchEventImpl(this.Model);
    };
    /**
     * @return {?}
     */
    IntermediateCatchEventImpl.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_3, _a, e_4, _b;
        /** @type {?} */
        var intermediateCatchEventImpl = new IntermediateCatchEventImpl(this.Model);
        intermediateCatchEventImpl.Name = this.Name;
        intermediateCatchEventImpl.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            try {
                for (var _c = tslib_1.__values(this.variableSettings), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var v = _d.value;
                    /** @type {?} */
                    var variableSetting = v.clone();
                    intermediateCatchEventImpl.variableSettings.push(variableSetting);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.backWardRule) {
            intermediateCatchEventImpl.backWardRule = this.backWardRule.clone();
        }
        intermediateCatchEventImpl.EventDefinitions = new Array();
        if (this.EventDefinitions && this.EventDefinitions.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.EventDefinitions), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var e = _f.value;
                    /** @type {?} */
                    var signalEventDefinitionImpl = (/** @type {?} */ (e));
                    /** @type {?} */
                    var eventDefinition = signalEventDefinitionImpl.clone();
                    intermediateCatchEventImpl.EventDefinitions.push(eventDefinition);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        return intermediateCatchEventImpl;
    };
    IntermediateCatchEventImpl.Clr_Type_ID = "wf.IntermediateCatchEventImpl";
    IntermediateCatchEventImpl.MEXTAG = "wf.IntermediateCatchEventImpl";
    return IntermediateCatchEventImpl;
}(IntermediateCatchEvent));
export { IntermediateCatchEventImpl };
if (false) {
    /** @type {?} */
    IntermediateCatchEventImpl.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    IntermediateCatchEventImpl.MEXTAG;
    /** @type {?} */
    IntermediateCatchEventImpl.prototype.ClrTypeID;
    /** @type {?} */
    IntermediateCatchEventImpl.prototype.backWardRule;
    /** @type {?} */
    IntermediateCatchEventImpl.prototype.variableSettings;
}
BpmnModelHelper.RegisterElementType(new IntermediateCatchEventImpl(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,