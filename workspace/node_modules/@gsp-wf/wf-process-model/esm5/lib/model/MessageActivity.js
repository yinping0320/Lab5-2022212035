/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ServiceTask } from "@edp-pmf/bpmn-model";
import { MessageNotice } from "./MessageNotice";
import { VariableSetting } from "./VariableSetting";
var MessageActivity = /** @class */ (function (_super) {
    tslib_1.__extends(MessageActivity, _super);
    function MessageActivity(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = MessageActivity.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    MessageActivity.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.messageNotices = new Array();
        this.variableSettings = new Array();
    };
    /**
     * @return {?}
     */
    MessageActivity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    MessageActivity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
    };
    /**
     * @protected
     * @return {?}
     */
    MessageActivity.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.messageNotices != null) {
            try {
                for (var _c = tslib_1.__values(this.messageNotices), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var item = _d.value;
                    item.MexTag = MessageActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.variableSettings), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    item.MexTag = MessageActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    MessageActivity.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_3, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== MessageActivity.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case VariableSetting.Clr_Type_ID:
                        this.variableSettings.push((/** @type {?} */ (extensionElement)));
                        ;
                        break;
                    default:
                        if (extensionElement instanceof MessageNotice) {
                            this.messageNotices.push((/** @type {?} */ (extensionElement)));
                        }
                        break;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @return {?}
     */
    MessageActivity.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new MessageActivity(this.Model);
    };
    /**
     * @return {?}
     */
    MessageActivity.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_4, _a, e_5, _b;
        /** @type {?} */
        var messageActivity = new MessageActivity(this.Model);
        messageActivity.Name = this.Name;
        messageActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            try {
                for (var _c = tslib_1.__values(this.variableSettings), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var v = _d.value;
                    /** @type {?} */
                    var variableSetting = v.clone();
                    messageActivity.variableSettings.push(variableSetting);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        messageActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.messageNotices), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var m = _f.value;
                    /** @type {?} */
                    var messageNotice = m.clone();
                    messageActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return messageActivity;
    };
    MessageActivity.Clr_Type_ID = "wf.MessageActivity";
    MessageActivity.MEXTAG = 'wf.MessageActivity';
    return MessageActivity;
}(ServiceTask));
export { MessageActivity };
if (false) {
    /** @type {?} */
    MessageActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    MessageActivity.MEXTAG;
    /** @type {?} */
    MessageActivity.prototype.ClrTypeID;
    /** @type {?} */
    MessageActivity.prototype.messageNotices;
    /** @type {?} */
    MessageActivity.prototype.variableSettings;
}
BpmnModelHelper.RegisterElementType(new MessageActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,