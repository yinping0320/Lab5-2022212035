/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
var ActivityExecutorParticipantExpression = /** @class */ (function (_super) {
    tslib_1.__extends(ActivityExecutorParticipantExpression, _super);
    function ActivityExecutorParticipantExpression(model, activityDefId, activityDefName) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ActivityExecutorParticipantExpression.Clr_Type_ID;
        _this.activityDefId = activityDefId;
        _this.activityDefName = activityDefName;
        return _this;
    }
    /**
     * @return {?}
     */
    ActivityExecutorParticipantExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefId", this.activityDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefName", this.activityDefName);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ActivityExecutorParticipantExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.activityDefId = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefId");
        this.activityDefName = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefName");
    };
    /**
     * @return {?}
     */
    ActivityExecutorParticipantExpression.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ActivityExecutorParticipantExpression(this.Model);
    };
    /**
     * @return {?}
     */
    ActivityExecutorParticipantExpression.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var activityExecutorParticipant = new ActivityExecutorParticipantExpression(this.Model);
        activityExecutorParticipant.id = BpmnModelHelper.GenerateElementId();
        activityExecutorParticipant.name = this.name;
        activityExecutorParticipant.activityDefId = this.activityDefId;
        activityExecutorParticipant.activityDefName = this.activityDefName;
        // if (this.Condition) {
        //     activityExecutorParticipant.Condition = this.Condition.clone();
        // }
        return activityExecutorParticipant;
    };
    ActivityExecutorParticipantExpression.Clr_Type_ID = 'wf.ActivityExecutorParticipantExpression';
    return ActivityExecutorParticipantExpression;
}(ParticipantExpression));
export { ActivityExecutorParticipantExpression };
if (false) {
    /** @type {?} */
    ActivityExecutorParticipantExpression.Clr_Type_ID;
    /** @type {?} */
    ActivityExecutorParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    ActivityExecutorParticipantExpression.prototype.activityDefId;
    /** @type {?} */
    ActivityExecutorParticipantExpression.prototype.activityDefName;
}
BpmnModelHelper.RegisterElementType(new ActivityExecutorParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9wYXJ0aWNpcGFudHMvQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWhFO0lBQTJELGlFQUFxQjtJQVM1RSwrQ0FBWSxLQUFnQixFQUN4QixhQUFzQixFQUN0QixlQUF3QjtRQUY1QixZQUdJLGtCQUFNLEtBQUssQ0FBQyxTQUdmO1FBYkQsZUFBUyxHQUFXLHFDQUFxQyxDQUFDLFdBQVcsQ0FBQztRQVdsRSxLQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxLQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQzs7SUFDM0MsQ0FBQzs7OztJQUVELG1FQUFtQjs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFaEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGtFQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM1RixDQUFDOzs7O0lBRUQsMkRBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7O0lBRUQscURBQUs7OztJQUFMOztZQUNVLDJCQUEyQixHQUFHLElBQUkscUNBQXFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6RiwyQkFBMkIsQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckUsMkJBQTJCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDN0MsMkJBQTJCLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDL0QsMkJBQTJCLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFFbkUsd0JBQXdCO1FBQ3hCLHNFQUFzRTtRQUN0RSxJQUFJO1FBRUosT0FBTywyQkFBMkIsQ0FBQztJQUN2QyxDQUFDO0lBaERNLGlEQUFXLEdBQVcsMENBQTBDLENBQUM7SUFpRDVFLDRDQUFDO0NBQUEsQUFsREQsQ0FBMkQscUJBQXFCLEdBa0QvRTtTQWxEWSxxQ0FBcUM7OztJQUM5QyxrREFBd0U7O0lBQ3hFLDBEQUFzRTs7SUFJdEUsOERBQXNCOztJQUN0QixnRUFBd0I7O0FBNEM1QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxxQ0FBcUMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9QYXJ0aWNpcGFudEV4cHJlc3Npb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uIGV4dGVuZHMgUGFydGljaXBhbnRFeHByZXNzaW9uIHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gJ3dmLkFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24nO1xyXG4gICAgQ2xyVHlwZUlEOiBzdHJpbmcgPSBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIC8vIHByaXZhdGUgc3RhdGljIENMUl9UWVBFX05BTUU6IHN0cmluZyA9ICfmtLvliqjlip7nkIbkuronO1xyXG5cclxuICAgIGFjdGl2aXR5RGVmSWQ6IHN0cmluZztcclxuICAgIGFjdGl2aXR5RGVmTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwsXHJcbiAgICAgICAgYWN0aXZpdHlEZWZJZD86IHN0cmluZyxcclxuICAgICAgICBhY3Rpdml0eURlZk5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eURlZklkID0gYWN0aXZpdHlEZWZJZDtcclxuICAgICAgICB0aGlzLmFjdGl2aXR5RGVmTmFtZSA9IGFjdGl2aXR5RGVmTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkFjdGl2aXR5RGVmSWRcIiwgdGhpcy5hY3Rpdml0eURlZklkKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkFjdGl2aXR5RGVmTmFtZVwiLCB0aGlzLmFjdGl2aXR5RGVmTmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuYWN0aXZpdHlEZWZJZCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkFjdGl2aXR5RGVmSWRcIik7XHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eURlZk5hbWUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJBY3Rpdml0eURlZk5hbWVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IEFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudCA9IG5ldyBBY3Rpdml0eUV4ZWN1dG9yUGFydGljaXBhbnRFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5pZCA9IEJwbW5Nb2RlbEhlbHBlci5HZW5lcmF0ZUVsZW1lbnRJZCgpO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5uYW1lID0gdGhpcy5uYW1lO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5hY3Rpdml0eURlZklkID0gdGhpcy5hY3Rpdml0eURlZklkO1xyXG4gICAgICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5hY3Rpdml0eURlZk5hbWUgPSB0aGlzLmFjdGl2aXR5RGVmTmFtZTtcclxuXHJcbiAgICAgICAgLy8gaWYgKHRoaXMuQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgLy8gICAgIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudC5Db25kaXRpb24gPSB0aGlzLkNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFjdGl2aXR5RXhlY3V0b3JQYXJ0aWNpcGFudDtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbihuZXcgQnBtbk1vZGVsKCkpKTsiXX0=