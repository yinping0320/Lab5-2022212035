/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
var MatrixParticipantExpression = /** @class */ (function (_super) {
    tslib_1.__extends(MatrixParticipantExpression, _super);
    function MatrixParticipantExpression(model, MatrixDefId, MatrixDefName, ConditionField1, ConditionFieldText1, ConditionField2, ConditionFieldText2, ConditionField3, ConditionFieldText3, MultivaluedCondition, DataFieldAlias) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = MatrixParticipantExpression.Clr_Type_ID;
        _this.matrixDefId = MatrixDefId;
        _this.matrixDefName = MatrixDefName;
        _this.conditionField1 = ConditionField1;
        _this.conditionFieldText1 = ConditionFieldText1;
        _this.conditionField2 = ConditionField2;
        _this.conditionFieldText2 = ConditionFieldText2;
        _this.conditionField3 = ConditionField3;
        _this.conditionFieldText3 = ConditionFieldText3;
        _this.multivaluedCondition = MultivaluedCondition;
        _this.dataFieldAlias = DataFieldAlias;
        return _this;
    }
    /**
     * @return {?}
     */
    MatrixParticipantExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefId", this.matrixDefId);
        BpmnModelHelper.SetAttributeValue(obj, "MatrixDefName", this.matrixDefName);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField1", this.conditionField1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText1", this.conditionFieldText1);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField2", this.conditionField2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText2", this.conditionFieldText2);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionField3", this.conditionField3);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionFieldText3", this.conditionFieldText3);
        BpmnModelHelper.SetAttributeValue(obj, "MultivaluedCondition", this.multivaluedCondition);
        BpmnModelHelper.SetAttributeValue(obj, "DataFieldAlias", this.dataFieldAlias);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    MatrixParticipantExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.matrixDefId = obj.MatrixDefId;
        this.matrixDefName = obj.MatrixDefName;
        this.conditionField1 = obj.ConditionField1;
        this.conditionFieldText1 = obj.ConditionFieldText1;
        this.conditionField2 = obj.ConditionField2;
        this.conditionFieldText2 = obj.ConditionFieldText2;
        this.conditionField3 = obj.ConditionField3;
        this.conditionFieldText3 = obj.ConditionFieldText3;
        this.multivaluedCondition = obj.MultivaluedCondition;
        this.dataFieldAlias = obj.DataFieldAlias;
    };
    /**
     * @return {?}
     */
    MatrixParticipantExpression.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new MatrixParticipantExpression(this.Model);
    };
    /**
     * @return {?}
     */
    MatrixParticipantExpression.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var matrixParticipant = new MatrixParticipantExpression(this.Model);
        matrixParticipant.id = BpmnModelHelper.GenerateElementId();
        matrixParticipant.name = this.name;
        matrixParticipant.matrixDefId = this.matrixDefId;
        matrixParticipant.matrixDefName = this.matrixDefName;
        matrixParticipant.conditionField1 = this.conditionField1;
        matrixParticipant.conditionFieldText1 = this.conditionFieldText1;
        matrixParticipant.conditionField2 = this.conditionField2;
        matrixParticipant.conditionFieldText2 = this.conditionFieldText2;
        matrixParticipant.conditionField3 = this.conditionField3;
        matrixParticipant.conditionFieldText3 = this.conditionFieldText3;
        matrixParticipant.multivaluedCondition = this.multivaluedCondition;
        matrixParticipant.dataFieldAlias = this.dataFieldAlias;
        return matrixParticipant;
    };
    MatrixParticipantExpression.Clr_Type_ID = 'wf.MatrixParticipantExpression';
    MatrixParticipantExpression.CLR_TYPE_NAME = '矩阵';
    return MatrixParticipantExpression;
}(ParticipantExpression));
export { MatrixParticipantExpression };
if (false) {
    /** @type {?} */
    MatrixParticipantExpression.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    MatrixParticipantExpression.CLR_TYPE_NAME;
    /** @type {?} */
    MatrixParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    MatrixParticipantExpression.prototype.matrixDefId;
    /** @type {?} */
    MatrixParticipantExpression.prototype.matrixDefName;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionField1;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionFieldText1;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionField2;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionFieldText2;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionField3;
    /** @type {?} */
    MatrixParticipantExpression.prototype.conditionFieldText3;
    /** @type {?} */
    MatrixParticipantExpression.prototype.multivaluedCondition;
    /** @type {?} */
    MatrixParticipantExpression.prototype.dataFieldAlias;
}
BpmnModelHelper.RegisterElementType(new MatrixParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,