/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { SerializeUtils } from "../utils/SerializeUtils";
import { ParticipantExpression } from "./ParticipantExpression";
var ComponentParticipantExpression = /** @class */ (function (_super) {
    tslib_1.__extends(ComponentParticipantExpression, _super);
    function ComponentParticipantExpression(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ComponentParticipantExpression.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    ComponentParticipantExpression.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.actualParameters = new Array();
    };
    /**
     * @return {?}
     */
    ComponentParticipantExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.componentId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentName", this.componentName);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.methodCode);
        BpmnModelHelper.SetAttributeValue(obj, "MethodName", this.methodName);
        SerializeUtils.setListAttributeValue(obj, 'ActualParameters', this.actualParameters);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ComponentParticipantExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.componentId = obj.ComponentId;
        this.componentName = obj.ComponentName;
        this.methodCode = obj.MethodCode;
        this.methodName = obj.MethodName;
        this.actualParameters = SerializeUtils.getListFromJsonObject(this.Model, obj, 'ActualParameters');
    };
    /**
     * @return {?}
     */
    ComponentParticipantExpression.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ComponentParticipantExpression(this.Model);
    };
    /**
     * @return {?}
     */
    ComponentParticipantExpression.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var componentParticipant = new ComponentParticipantExpression(this.Model);
        componentParticipant.id = BpmnModelHelper.GenerateElementId();
        componentParticipant.name = this.name;
        componentParticipant.componentId = this.componentId;
        componentParticipant.componentName = this.componentName;
        componentParticipant.methodCode = this.methodCode;
        componentParticipant.methodName = this.methodName;
        componentParticipant.actualParameters = new Array();
        if (this.actualParameters && this.actualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    /** @type {?} */
                    var parameter = p.clone();
                    componentParticipant.actualParameters.push(parameter);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // if (this.Condition) {
        //     componentParticipant.Condition = this.Condition.clone();
        // }
        return componentParticipant;
    };
    ComponentParticipantExpression.Clr_Type_ID = 'wf.ComponentParticipantExpression';
    ComponentParticipantExpression.CLR_TYPE_NAME = '构件';
    return ComponentParticipantExpression;
}(ParticipantExpression));
export { ComponentParticipantExpression };
if (false) {
    /** @type {?} */
    ComponentParticipantExpression.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    ComponentParticipantExpression.CLR_TYPE_NAME;
    /** @type {?} */
    ComponentParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    ComponentParticipantExpression.prototype.componentId;
    /** @type {?} */
    ComponentParticipantExpression.prototype.componentName;
    /** @type {?} */
    ComponentParticipantExpression.prototype.methodCode;
    /** @type {?} */
    ComponentParticipantExpression.prototype.methodName;
    /** @type {?} */
    ComponentParticipantExpression.prototype.actualParameters;
}
BpmnModelHelper.RegisterElementType(new ComponentParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50UGFydGljaXBhbnRFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcnRpY2lwYW50cy9Db21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVoRTtJQUFvRCwwREFBcUI7SUFXckUsd0NBQVksS0FBZ0I7UUFBNUIsWUFDSSxrQkFBTSxLQUFLLENBQUMsU0FDZjtRQVZELGVBQVMsR0FBRyw4QkFBOEIsQ0FBQyxXQUFXLENBQUM7O0lBVXZELENBQUM7Ozs7SUFDRCw0REFBbUI7OztJQUFuQjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksS0FBSyxFQUFtQixDQUFDO0lBQ3pELENBQUM7Ozs7SUFFRCw0REFBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFckYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELDJEQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDdEcsQ0FBQzs7OztJQUVELG9EQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELDhDQUFLOzs7SUFBTDs7O1lBQ1Usb0JBQW9CLEdBQUcsSUFBSSw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNFLG9CQUFvQixDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUM5RCxvQkFBb0IsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QyxvQkFBb0IsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNwRCxvQkFBb0IsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUN4RCxvQkFBb0IsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNsRCxvQkFBb0IsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNsRCxvQkFBb0IsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3BELElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDM0QsS0FBZ0IsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQSxnQkFBQSw0QkFBRTtvQkFBbEMsSUFBTSxDQUFDLFdBQUE7O3dCQUNGLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO29CQUMzQixvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ3pEOzs7Ozs7Ozs7U0FDSjtRQUNELHdCQUF3QjtRQUN4QiwrREFBK0Q7UUFDL0QsSUFBSTtRQUVKLE9BQU8sb0JBQW9CLENBQUM7SUFDaEMsQ0FBQztJQS9EYSwwQ0FBVyxHQUFHLG1DQUFtQyxDQUFDO0lBQ2pELDRDQUFhLEdBQUcsSUFBSSxDQUFDO0lBK0R4QyxxQ0FBQztDQUFBLEFBakVELENBQW9ELHFCQUFxQixHQWlFeEU7U0FqRVksOEJBQThCOzs7SUFDdkMsMkNBQWdFOzs7OztJQUNoRSw2Q0FBb0M7O0lBQ3BDLG1EQUF1RDs7SUFFdkQscURBQW9COztJQUNwQix1REFBc0I7O0lBQ3RCLG9EQUFtQjs7SUFDbkIsb0RBQW1COztJQUNuQiwwREFBb0M7O0FBeUR4QyxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSw4QkFBOEIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgQWN0dWFsUGFyYW1ldGVyIH0gZnJvbSBcIi4uL3BhcmFtZXRlci9XRkFjdHVhbFBhcmFtZXRlclwiO1xyXG5pbXBvcnQgeyBTZXJpYWxpemVVdGlscyB9IGZyb20gXCIuLi91dGlscy9TZXJpYWxpemVVdGlsc1wiO1xyXG5pbXBvcnQgeyBQYXJ0aWNpcGFudEV4cHJlc3Npb24gfSBmcm9tIFwiLi9QYXJ0aWNpcGFudEV4cHJlc3Npb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24gZXh0ZW5kcyBQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgcHVibGljIHN0YXRpYyBDbHJfVHlwZV9JRCA9ICd3Zi5Db21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24nO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRSA9ICfmnoTku7YnO1xyXG4gICAgQ2xyVHlwZUlEID0gQ29tcG9uZW50UGFydGljaXBhbnRFeHByZXNzaW9uLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIGNvbXBvbmVudElkOiBzdHJpbmc7XHJcbiAgICBjb21wb25lbnROYW1lOiBzdHJpbmc7XHJcbiAgICBtZXRob2RDb2RlOiBzdHJpbmc7XHJcbiAgICBtZXRob2ROYW1lOiBzdHJpbmc7XHJcbiAgICBhY3R1YWxQYXJhbWV0ZXJzOiBBY3R1YWxQYXJhbWV0ZXJbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG4gICAgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICAgICAgdGhpcy5hY3R1YWxQYXJhbWV0ZXJzID0gbmV3IEFycmF5PEFjdHVhbFBhcmFtZXRlcj4oKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvbXBvbmVudElkXCIsIHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29tcG9uZW50TmFtZVwiLCB0aGlzLmNvbXBvbmVudE5hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTWV0aG9kQ29kZVwiLCB0aGlzLm1ldGhvZENvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTWV0aG9kTmFtZVwiLCB0aGlzLm1ldGhvZE5hbWUpO1xyXG4gICAgICAgIFNlcmlhbGl6ZVV0aWxzLnNldExpc3RBdHRyaWJ1dGVWYWx1ZShvYmosICdBY3R1YWxQYXJhbWV0ZXJzJywgdGhpcy5hY3R1YWxQYXJhbWV0ZXJzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmNvbXBvbmVudElkID0gb2JqLkNvbXBvbmVudElkO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IG9iai5Db21wb25lbnROYW1lO1xyXG4gICAgICAgIHRoaXMubWV0aG9kQ29kZSA9IG9iai5NZXRob2RDb2RlO1xyXG4gICAgICAgIHRoaXMubWV0aG9kTmFtZSA9IG9iai5NZXRob2ROYW1lO1xyXG4gICAgICAgIHRoaXMuYWN0dWFsUGFyYW1ldGVycyA9IFNlcmlhbGl6ZVV0aWxzLmdldExpc3RGcm9tSnNvbk9iamVjdCh0aGlzLk1vZGVsLCBvYmosICdBY3R1YWxQYXJhbWV0ZXJzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQ29tcG9uZW50UGFydGljaXBhbnRFeHByZXNzaW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudFBhcnRpY2lwYW50RXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBDb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFBhcnRpY2lwYW50ID0gbmV3IENvbXBvbmVudFBhcnRpY2lwYW50RXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICBjb21wb25lbnRQYXJ0aWNpcGFudC5pZCA9IEJwbW5Nb2RlbEhlbHBlci5HZW5lcmF0ZUVsZW1lbnRJZCgpO1xyXG4gICAgICAgIGNvbXBvbmVudFBhcnRpY2lwYW50Lm5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgY29tcG9uZW50UGFydGljaXBhbnQuY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkO1xyXG4gICAgICAgIGNvbXBvbmVudFBhcnRpY2lwYW50LmNvbXBvbmVudE5hbWUgPSB0aGlzLmNvbXBvbmVudE5hbWU7XHJcbiAgICAgICAgY29tcG9uZW50UGFydGljaXBhbnQubWV0aG9kQ29kZSA9IHRoaXMubWV0aG9kQ29kZTtcclxuICAgICAgICBjb21wb25lbnRQYXJ0aWNpcGFudC5tZXRob2ROYW1lID0gdGhpcy5tZXRob2ROYW1lO1xyXG4gICAgICAgIGNvbXBvbmVudFBhcnRpY2lwYW50LmFjdHVhbFBhcmFtZXRlcnMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBpZiAodGhpcy5hY3R1YWxQYXJhbWV0ZXJzICYmIHRoaXMuYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiB0aGlzLmFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlciA9IHAuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFBhcnRpY2lwYW50LmFjdHVhbFBhcmFtZXRlcnMucHVzaChwYXJhbWV0ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmICh0aGlzLkNvbmRpdGlvbikge1xyXG4gICAgICAgIC8vICAgICBjb21wb25lbnRQYXJ0aWNpcGFudC5Db25kaXRpb24gPSB0aGlzLkNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFBhcnRpY2lwYW50O1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBDb21wb25lbnRQYXJ0aWNpcGFudEV4cHJlc3Npb24obmV3IEJwbW5Nb2RlbCgpKSk7Il19