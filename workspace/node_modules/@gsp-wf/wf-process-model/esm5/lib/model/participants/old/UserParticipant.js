/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Participant } from "./Participant";
var UserParticipant = /** @class */ (function (_super) {
    tslib_1.__extends(UserParticipant, _super);
    function UserParticipant(model, userId, name, orgType) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = UserParticipant.Clr_Type_ID;
        _this.UserId = userId;
        _this.Name = name;
        _this.OrgType = orgType ? orgType : 'Sys';
        return _this;
    }
    /**
     * @return {?}
     */
    UserParticipant.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new UserParticipant(this.Model);
    };
    /**
     * @return {?}
     */
    UserParticipant.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "UserId", this.UserId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    UserParticipant.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
        this.UserId = obj.UserId;
        this.Tag = obj.Tag;
    };
    /**
     * @return {?}
     */
    UserParticipant.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userParticipant = new UserParticipant(this.Model);
        userParticipant.Id = BpmnModelHelper.GenerateElementId();
        userParticipant.Name = this.Name;
        userParticipant.OrgId = this.OrgId;
        userParticipant.OrgName = this.OrgName;
        userParticipant.OrgType = this.OrgType;
        userParticipant.UserId = this.UserId;
        userParticipant.Tag = this.Tag;
        if (this.Condition) {
            userParticipant.Condition = this.Condition.clone();
        }
        return userParticipant;
    };
    UserParticipant.Clr_Type_ID = "wf.UserParticipant";
    UserParticipant.CLR_TYPE_NAME = '用户';
    return UserParticipant;
}(Participant));
export { UserParticipant };
if (false) {
    /** @type {?} */
    UserParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    UserParticipant.CLR_TYPE_NAME;
    /** @type {?} */
    UserParticipant.prototype.ClrTypeID;
    /** @type {?} */
    UserParticipant.prototype.Tag;
    /** @type {?} */
    UserParticipant.prototype.UserId;
    /** @type {?} */
    UserParticipant.prototype.OrgId;
    /** @type {?} */
    UserParticipant.prototype.OrgName;
    /** @type {?} */
    UserParticipant.prototype.OrgType;
}
BpmnModelHelper.RegisterElementType(new UserParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclBhcnRpY2lwYW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcnRpY2lwYW50cy9vbGQvVXNlclBhcnRpY2lwYW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVDO0lBQXFDLDJDQUFXO0lBRTVDLHlCQUFZLEtBQWdCLEVBQUUsTUFBZSxFQUFFLElBQWEsRUFBRSxPQUFnQjtRQUE5RSxZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUlmO1FBS0QsZUFBUyxHQUFXLGVBQWUsQ0FBQyxXQUFXLENBQUM7UUFSNUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOztJQUM3QyxDQUFDOzs7O0lBYUQscUNBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELDZDQUFtQjs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUNyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCw0Q0FBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCwrQkFBSzs7O0lBQUw7O1lBQ1UsZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkQsZUFBZSxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6RCxlQUFlLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsZUFBZSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25DLGVBQWUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN2QyxlQUFlLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkMsZUFBZSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JDLGVBQWUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsZUFBZSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQztJQWhETSwyQkFBVyxHQUFXLG9CQUFvQixDQUFDO0lBQ25DLDZCQUFhLEdBQUcsSUFBSSxDQUFDO0lBaUR4QyxzQkFBQztDQUFBLEFBM0RELENBQXFDLFdBQVcsR0EyRC9DO1NBM0RZLGVBQWU7OztJQVN4Qiw0QkFBa0Q7Ozs7O0lBQ2xELDhCQUFvQzs7SUFFcEMsb0NBQWdEOztJQUVoRCw4QkFBWTs7SUFDWixpQ0FBZTs7SUFDZixnQ0FBYzs7SUFDZCxrQ0FBZ0I7O0lBQ2hCLGtDQUFnQjs7QUEyQ3BCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgUGFydGljaXBhbnQgfSBmcm9tIFwiLi9QYXJ0aWNpcGFudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJQYXJ0aWNpcGFudCBleHRlbmRzIFBhcnRpY2lwYW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsLCB1c2VySWQ/OiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcsIG9yZ1R5cGU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICAgICAgdGhpcy5Vc2VySWQgPSB1c2VySWQ7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLk9yZ1R5cGUgPSBvcmdUeXBlID8gb3JnVHlwZSA6ICdTeXMnO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5Vc2VyUGFydGljaXBhbnRcIjtcclxuICAgIHByaXZhdGUgc3RhdGljIENMUl9UWVBFX05BTUUgPSAn55So5oi3JztcclxuXHJcbiAgICBDbHJUeXBlSUQ6IHN0cmluZyA9IFVzZXJQYXJ0aWNpcGFudC5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBUYWc6IHN0cmluZztcclxuICAgIFVzZXJJZDogc3RyaW5nO1xyXG4gICAgT3JnSWQ6IHN0cmluZztcclxuICAgIE9yZ05hbWU6IHN0cmluZztcclxuICAgIE9yZ1R5cGU6IHN0cmluZztcclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBVc2VyUGFydGljaXBhbnQge1xyXG4gICAgICAgIHJldHVybiBuZXcgVXNlclBhcnRpY2lwYW50KHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVXNlcklkXCIsIHRoaXMuVXNlcklkKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk9yZ0lkXCIsIHRoaXMuT3JnSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiT3JnTmFtZVwiLCB0aGlzLk9yZ05hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiT3JnVHlwZVwiLCB0aGlzLk9yZ1R5cGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVGFnXCIsIHRoaXMuVGFnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG4gICAgICAgIHRoaXMuT3JnSWQgPSBvYmouT3JnSWQ7XHJcbiAgICAgICAgdGhpcy5PcmdOYW1lID0gb2JqLk9yZ05hbWU7XHJcbiAgICAgICAgdGhpcy5PcmdUeXBlID0gb2JqLk9yZ1R5cGU7XHJcbiAgICAgICAgdGhpcy5Vc2VySWQgPSBvYmouVXNlcklkO1xyXG4gICAgICAgIHRoaXMuVGFnID0gb2JqLlRhZztcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBVc2VyUGFydGljaXBhbnQge1xyXG4gICAgICAgIGNvbnN0IHVzZXJQYXJ0aWNpcGFudCA9IG5ldyBVc2VyUGFydGljaXBhbnQodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50LklkID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50Lk5hbWUgPSB0aGlzLk5hbWU7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50Lk9yZ0lkID0gdGhpcy5PcmdJZDtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnTmFtZSA9IHRoaXMuT3JnTmFtZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnVHlwZSA9IHRoaXMuT3JnVHlwZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuVXNlcklkID0gdGhpcy5Vc2VySWQ7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50LlRhZyA9IHRoaXMuVGFnO1xyXG4gICAgICAgIGlmICh0aGlzLkNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICB1c2VyUGFydGljaXBhbnQuQ29uZGl0aW9uID0gdGhpcy5Db25kaXRpb24uY2xvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVzZXJQYXJ0aWNpcGFudDtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBVc2VyUGFydGljaXBhbnQobmV3IEJwbW5Nb2RlbCgpKSk7XHJcbiJdfQ==