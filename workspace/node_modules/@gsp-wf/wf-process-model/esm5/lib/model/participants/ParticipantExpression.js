/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActionScope } from "../ActionScope";
import { Condition } from "../extension";
/**
 * @abstract
 */
var /**
 * @abstract
 */
ParticipantExpression = /** @class */ (function (_super) {
    tslib_1.__extends(ParticipantExpression, _super);
    function ParticipantExpression(model) {
        var _this = _super.call(this, model) || this;
        _this.actionScope = ActionScope.Default;
        return _this;
    }
    /**
     * @return {?}
     */
    ParticipantExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "ActionScope", this.actionScope ? this.actionScope : ActionScope.Default);
        ExtensionMethod.SetAttributeValue(obj, "Id", this.id);
        ExtensionMethod.SetAttributeValue(obj, "Name", this.name);
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        if (this.condition) {
            ExtensionMethod.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ParticipantExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.actionScope = (/** @type {?} */ ((ExtensionMethod.GetAttributeValue4String(obj, "ActionScope") ? ExtensionMethod.GetAttributeValue4String(obj, "ActionScope") : ActionScope.Default)));
        this.id = ExtensionMethod.GetAttributeValue4String(obj, "Id");
        this.name = ExtensionMethod.GetAttributeValue4String(obj, "Name");
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
        if (obj.Condition) {
            /** @type {?} */
            var condition = new Condition(this.Model);
            condition.LoadFromJsonObject(obj.Condition);
            this.condition = condition;
        }
    };
    return ParticipantExpression;
}(ExtensionElement));
/**
 * @abstract
 */
export { ParticipantExpression };
if (false) {
    /** @type {?} */
    ParticipantExpression.prototype.id;
    /** @type {?} */
    ParticipantExpression.prototype.name;
    /** @type {?} */
    ParticipantExpression.prototype.actionScope;
    /** @type {?} */
    ParticipantExpression.prototype.condition;
    /** @type {?} */
    ParticipantExpression.prototype.order;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3BhcnRpY2lwYW50cy9QYXJ0aWNpcGFudEV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWEsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7Ozs7QUFFekM7Ozs7SUFBb0QsaURBQWdCO0lBT2hFLCtCQUFZLEtBQWdCO1FBQTVCLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBQ2Y7UUFORCxpQkFBVyxHQUFnQixXQUFXLENBQUMsT0FBTyxDQUFDOztJQU0vQyxDQUFDOzs7O0lBRUQsbURBQW1COzs7SUFBbkI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqSCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7U0FDN0Y7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0RBQWtCOzs7O0lBQWxCLFVBQW1CLEdBQVE7UUFDdkIsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxtQkFBQSxDQUFDLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBZSxDQUFDO1FBQ3RMLElBQUksQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25FLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTs7Z0JBQ1gsU0FBUyxHQUFjLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEQsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFDTCw0QkFBQztBQUFELENBQUMsQUFyQ0QsQ0FBb0QsZ0JBQWdCLEdBcUNuRTs7Ozs7OztJQXBDRyxtQ0FBVzs7SUFDWCxxQ0FBYTs7SUFDYiw0Q0FBK0M7O0lBQy9DLDBDQUFxQjs7SUFDckIsc0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEV4dGVuc2lvbkVsZW1lbnQsIEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IEFjdGlvblNjb3BlIH0gZnJvbSBcIi4uL0FjdGlvblNjb3BlXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvbiB9IGZyb20gXCIuLi9leHRlbnNpb25cIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXJ0aWNpcGFudEV4cHJlc3Npb24gZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBhY3Rpb25TY29wZTogQWN0aW9uU2NvcGUgPSBBY3Rpb25TY29wZS5EZWZhdWx0O1xyXG4gICAgY29uZGl0aW9uOiBDb25kaXRpb247XHJcbiAgICBvcmRlcjogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aW9uU2NvcGVcIiwgdGhpcy5hY3Rpb25TY29wZSA/IHRoaXMuYWN0aW9uU2NvcGUgOiBBY3Rpb25TY29wZS5EZWZhdWx0KTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIklkXCIsIHRoaXMuaWQpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmFtZVwiLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiT3JkZXJcIiwgdGhpcy5vcmRlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29uZGl0aW9uXCIsIHRoaXMuY29uZGl0aW9uLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuYWN0aW9uU2NvcGUgPSAoRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiQWN0aW9uU2NvcGVcIikgPyBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJBY3Rpb25TY29wZVwiKSA6IEFjdGlvblNjb3BlLkRlZmF1bHQpIGFzIEFjdGlvblNjb3BlO1xyXG4gICAgICAgIHRoaXMuaWQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJJZFwiKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJOYW1lXCIpO1xyXG4gICAgICAgIHRoaXMub3JkZXIgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0SW50NjQob2JqLCBcIk9yZGVyXCIpO1xyXG4gICAgICAgIGlmIChvYmouQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25kaXRpb246IENvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbi5Mb2FkRnJvbUpzb25PYmplY3Qob2JqLkNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==