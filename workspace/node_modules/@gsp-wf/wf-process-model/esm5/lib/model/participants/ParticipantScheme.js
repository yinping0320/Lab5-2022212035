/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
import { Condition } from "../extension/condition-expression/Condition";
var ParticipantScheme = /** @class */ (function (_super) {
    tslib_1.__extends(ParticipantScheme, _super);
    function ParticipantScheme(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ParticipantScheme.Clr_Type_ID;
        _this.MexTag = 'participantScheme';
        return _this;
    }
    /**
     * @return {?}
     */
    ParticipantScheme.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ParticipantScheme(this.Model);
    };
    /**
     * @return {?}
     */
    ParticipantScheme.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Performers", this.Performers);
        if (this.Condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.Condition.ConvertToJsonObject());
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ParticipantScheme.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.Performers = obj.Performers;
        /** @type {?} */
        var conditionElement = obj.Condition;
        if (conditionElement) {
            /** @type {?} */
            var condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.Condition = condition;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ParticipantScheme.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.Id = '';
        this.Name = '';
    };
    /**
     * @return {?}
     */
    ParticipantScheme.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var participantScheme = new ParticipantScheme(this.Model);
        participantScheme.Id = this.Id;
        participantScheme.Name = this.Name;
        participantScheme.Performers = this.Performers;
        if (this.Condition) {
            participantScheme.Condition = this.Condition.clone();
        }
        return participantScheme;
    };
    ParticipantScheme.Clr_Type_ID = "wf.ParticipantScheme";
    return ParticipantScheme;
}(ExtensionElement));
export { ParticipantScheme };
if (false) {
    /** @type {?} */
    ParticipantScheme.Clr_Type_ID;
    /** @type {?} */
    ParticipantScheme.prototype.ClrTypeID;
    /** @type {?} */
    ParticipantScheme.prototype.MexTag;
    /** @type {?} */
    ParticipantScheme.prototype.Id;
    /** @type {?} */
    ParticipantScheme.prototype.Name;
    /** @type {?} */
    ParticipantScheme.prototype.Performers;
    /** @type {?} */
    ParticipantScheme.prototype.Condition;
}
BpmnModelHelper.RegisterElementType(new ParticipantScheme(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRTY2hlbWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvcGFydGljaXBhbnRzL1BhcnRpY2lwYW50U2NoZW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQW9DLE1BQU0scUJBQXFCLENBQUM7QUFDckgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRXhFO0lBQXVDLDZDQUFnQjtJQUNuRCwyQkFBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBRVEsZUFBUyxHQUFXLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztRQUMzRCxZQUFNLEdBQVcsbUJBQW1CLENBQUM7O0lBSHJDLENBQUM7Ozs7SUFXRCx1Q0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCwrQ0FBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELDhDQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDOztZQUMzQixnQkFBZ0IsR0FBRyxHQUFHLENBQUMsU0FBUztRQUN0QyxJQUFJLGdCQUFnQixFQUFFOztnQkFDWixTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM5QjtJQUNMLENBQUM7Ozs7O0lBRVMsK0NBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ25CLENBQUM7Ozs7SUFFRCxpQ0FBSzs7O0lBQUw7O1lBQ1UsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNELGlCQUFpQixDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQy9CLGlCQUFpQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25DLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRS9DLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN4RDtRQUNELE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQXRETSw2QkFBVyxHQUFXLHNCQUFzQixDQUFDO0lBd0R4RCx3QkFBQztDQUFBLEFBNURELENBQXVDLGdCQUFnQixHQTREdEQ7U0E1RFksaUJBQWlCOzs7SUFJMUIsOEJBQW9EOztJQUNwRCxzQ0FBMkQ7O0lBQzNELG1DQUFxQzs7SUFFckMsK0JBQVc7O0lBQ1gsaUNBQWE7O0lBQ2IsdUNBQW1COztJQUNuQixzQ0FBcUI7O0FBbUR6QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBJQ2xyVHlwZUVsZW1lbnQsIElIYXNOYW1lRWxlbWVudCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvbiB9IGZyb20gXCIuLi9leHRlbnNpb24vY29uZGl0aW9uLWV4cHJlc3Npb24vQ29uZGl0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFydGljaXBhbnRTY2hlbWUgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IGltcGxlbWVudHMgSUNsclR5cGVFbGVtZW50LCBJSGFzTmFtZUVsZW1lbnQge1xyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5QYXJ0aWNpcGFudFNjaGVtZVwiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBQYXJ0aWNpcGFudFNjaGVtZS5DbHJfVHlwZV9JRDtcclxuICAgIE1leFRhZzogc3RyaW5nID0gJ3BhcnRpY2lwYW50U2NoZW1lJztcclxuXHJcbiAgICBJZDogc3RyaW5nO1xyXG4gICAgTmFtZTogc3RyaW5nO1xyXG4gICAgUGVyZm9ybWVyczogc3RyaW5nO1xyXG4gICAgQ29uZGl0aW9uOiBDb25kaXRpb247XHJcblxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFBhcnRpY2lwYW50U2NoZW1lIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBhcnRpY2lwYW50U2NoZW1lKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiSWRcIiwgdGhpcy5JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJOYW1lXCIsIHRoaXMuTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJQZXJmb3JtZXJzXCIsIHRoaXMuUGVyZm9ybWVycyk7XHJcbiAgICAgICAgaWYgKHRoaXMuQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29uZGl0aW9uXCIsIHRoaXMuQ29uZGl0aW9uLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KTogYW55IHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLklkID0gb2JqLklkO1xyXG4gICAgICAgIHRoaXMuTmFtZSA9IG9iai5OYW1lO1xyXG4gICAgICAgIHRoaXMuUGVyZm9ybWVycyA9IG9iai5QZXJmb3JtZXJzO1xyXG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbkVsZW1lbnQgPSBvYmouQ29uZGl0aW9uXHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gbmV3IENvbmRpdGlvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICAgICAgY29uZGl0aW9uLkxvYWRGcm9tSnNvbk9iamVjdChjb25kaXRpb25FbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5Db25kaXRpb24gPSBjb25kaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLklkID0gJyc7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogUGFydGljaXBhbnRTY2hlbWUge1xyXG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50U2NoZW1lID0gbmV3IFBhcnRpY2lwYW50U2NoZW1lKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHBhcnRpY2lwYW50U2NoZW1lLklkID0gdGhpcy5JZDtcclxuICAgICAgICBwYXJ0aWNpcGFudFNjaGVtZS5OYW1lID0gdGhpcy5OYW1lO1xyXG4gICAgICAgIHBhcnRpY2lwYW50U2NoZW1lLlBlcmZvcm1lcnMgPSB0aGlzLlBlcmZvcm1lcnM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLkNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBwYXJ0aWNpcGFudFNjaGVtZS5Db25kaXRpb24gPSB0aGlzLkNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFydGljaXBhbnRTY2hlbWU7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgUGFydGljaXBhbnRTY2hlbWUobmV3IEJwbW5Nb2RlbCgpKSk7XHJcbiJdfQ==