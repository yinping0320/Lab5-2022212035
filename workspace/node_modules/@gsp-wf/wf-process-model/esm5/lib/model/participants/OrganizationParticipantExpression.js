/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActionScope } from "../ActionScope";
import { OrganizationLevel } from "../OrganizationLevel";
import { ParticipantExpression } from "./ParticipantExpression";
var OrganizationParticipantExpression = /** @class */ (function (_super) {
    tslib_1.__extends(OrganizationParticipantExpression, _super);
    function OrganizationParticipantExpression(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = OrganizationParticipantExpression.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    OrganizationParticipantExpression.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.actionScope = ActionScope.AssignUser;
        this.organizationLevel = OrganizationLevel.DEPARTMENT;
    };
    /**
     * @return {?}
     */
    OrganizationParticipantExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "ActionScope", this.actionScope);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationLevel", this.organizationLevel);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationId", this.organizationId);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationCode", this.organizationCode);
        ExtensionMethod.SetAttributeValue(obj, "OrganizationName", this.organizationName);
        ExtensionMethod.SetAttributeValue(obj, "IncludeChildren", this.includeChildren);
        ExtensionMethod.SetAttributeValue(obj, "ParentsUntil", this.parentsUntil);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    OrganizationParticipantExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.actionScope = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "ActionScope")));
        this.organizationLevel = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "OrganizationLevel")));
        this.organizationId = ExtensionMethod.GetAttributeValue4String(obj, "OrganizationId");
        this.organizationCode = ExtensionMethod.GetAttributeValue4String(obj, "OrganizationCode");
        this.organizationName = ExtensionMethod.GetAttributeValue4String(obj, "OrganizationName");
        this.includeChildren = ExtensionMethod.GetAttributeValue4Boolean(obj, "IncludeChildren");
        this.parentsUntil = ExtensionMethod.GetAttributeValue4Boolean(obj, "ParentsUntil");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
    };
    /**
     * @return {?}
     */
    OrganizationParticipantExpression.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var organizationParticipant = new OrganizationParticipantExpression(this.Model);
        organizationParticipant.id = BpmnModelHelper.GenerateElementId();
        organizationParticipant.name = this.name;
        organizationParticipant.actionScope = this.actionScope;
        organizationParticipant.organizationLevel = this.organizationLevel;
        organizationParticipant.organizationId = this.organizationId;
        ;
        organizationParticipant.organizationCode = this.organizationCode;
        organizationParticipant.organizationName = this.organizationName;
        ;
        organizationParticipant.includeChildren = this.includeChildren;
        organizationParticipant.parentsUntil = this.parentsUntil;
        ;
        organizationParticipant.tag = this.tag;
        return organizationParticipant;
    };
    /**
     * @return {?}
     */
    OrganizationParticipantExpression.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new OrganizationParticipantExpression(this.Model);
    };
    OrganizationParticipantExpression.Clr_Type_ID = 'wf.OrganizationParticipantExpression';
    return OrganizationParticipantExpression;
}(ParticipantExpression));
export { OrganizationParticipantExpression };
if (false) {
    /** @type {?} */
    OrganizationParticipantExpression.Clr_Type_ID;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.organizationLevel;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.organizationId;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.organizationCode;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.organizationName;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.includeChildren;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.parentsUntil;
    /** @type {?} */
    OrganizationParticipantExpression.prototype.tag;
}
BpmnModelHelper.RegisterElementType(new OrganizationParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,