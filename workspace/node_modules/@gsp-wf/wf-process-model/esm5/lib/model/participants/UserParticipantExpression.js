/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ParticipantExpression } from "./ParticipantExpression";
var UserParticipantExpression = /** @class */ (function (_super) {
    tslib_1.__extends(UserParticipantExpression, _super);
    function UserParticipantExpression(model, userId, name, orgType) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = UserParticipantExpression.Clr_Type_ID;
        _this.OrgType = 'Sys';
        _this.UserId = userId;
        _this.name = name;
        _this.OrgType = orgType ? orgType : 'Sys';
        return _this;
    }
    /**
     * @return {?}
     */
    UserParticipantExpression.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new UserParticipantExpression(this.Model);
    };
    /**
     * @return {?}
     */
    UserParticipantExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "UserId", this.UserId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgId", this.OrgId);
        BpmnModelHelper.SetAttributeValue(obj, "OrgName", this.OrgName);
        BpmnModelHelper.SetAttributeValue(obj, "OrgType", this.OrgType);
        BpmnModelHelper.SetAttributeValue(obj, "Tag", this.Tag);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    UserParticipantExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.OrgId = obj.OrgId;
        this.OrgName = obj.OrgName;
        this.OrgType = obj.OrgType;
        this.UserId = obj.UserId;
        this.Tag = obj.Tag;
    };
    /**
     * @return {?}
     */
    UserParticipantExpression.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userParticipant = new UserParticipantExpression(this.Model);
        userParticipant.id = BpmnModelHelper.GenerateElementId();
        userParticipant.name = this.name;
        userParticipant.OrgId = this.OrgId;
        userParticipant.OrgName = this.OrgName;
        userParticipant.OrgType = this.OrgType;
        userParticipant.UserId = this.UserId;
        userParticipant.Tag = this.Tag;
        // if (this.Condition) { 
        //     userParticipant.Condition = this.Condition.clone();
        // }
        return userParticipant;
    };
    UserParticipantExpression.Clr_Type_ID = "wf.UserParticipantExpression";
    UserParticipantExpression.CLR_TYPE_NAME = '用户';
    return UserParticipantExpression;
}(ParticipantExpression));
export { UserParticipantExpression };
if (false) {
    /** @type {?} */
    UserParticipantExpression.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    UserParticipantExpression.CLR_TYPE_NAME;
    /** @type {?} */
    UserParticipantExpression.prototype.ClrTypeID;
    /** @type {?} */
    UserParticipantExpression.prototype.Tag;
    /** @type {?} */
    UserParticipantExpression.prototype.UserId;
    /** @type {?} */
    UserParticipantExpression.prototype.OrgId;
    /** @type {?} */
    UserParticipantExpression.prototype.OrgName;
    /** @type {?} */
    UserParticipantExpression.prototype.OrgType;
}
BpmnModelHelper.RegisterElementType(new UserParticipantExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9wYXJ0aWNpcGFudHMvVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEU7SUFBK0MscURBQXFCO0lBQ2hFLG1DQUFZLEtBQWdCLEVBQUUsTUFBZSxFQUFFLElBQWEsRUFBRSxPQUFnQjtRQUE5RSxZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUlmO1FBS0QsZUFBUyxHQUFXLHlCQUF5QixDQUFDLFdBQVcsQ0FBQztRQU0xRCxhQUFPLEdBQVcsS0FBSyxDQUFDO1FBZHBCLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLEtBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7SUFDN0MsQ0FBQzs7OztJQWFELCtDQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7OztJQUVELHVEQUFtQjs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUNyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxzREFBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCx5Q0FBSzs7O0lBQUw7O1lBQ1UsZUFBZSxHQUFHLElBQUkseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNqRSxlQUFlLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pELGVBQWUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxlQUFlLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbkMsZUFBZSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLGVBQWUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN2QyxlQUFlLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckMsZUFBZSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQy9CLHlCQUF5QjtRQUN6QiwwREFBMEQ7UUFDMUQsSUFBSTtRQUNKLE9BQU8sZUFBZSxDQUFDO0lBQzNCLENBQUM7SUFoRE0scUNBQVcsR0FBVyw4QkFBOEIsQ0FBQztJQUM3Qyx1Q0FBYSxHQUFHLElBQUksQ0FBQztJQWdEeEMsZ0NBQUM7Q0FBQSxBQXpERCxDQUErQyxxQkFBcUIsR0F5RG5FO1NBekRZLHlCQUF5Qjs7O0lBUWxDLHNDQUE0RDs7Ozs7SUFDNUQsd0NBQW9DOztJQUVwQyw4Q0FBMEQ7O0lBRTFELHdDQUFZOztJQUNaLDJDQUFlOztJQUNmLDBDQUFjOztJQUNkLDRDQUFnQjs7SUFDaEIsNENBQXdCOztBQXlDNUIsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUkseUJBQXlCLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IFBhcnRpY2lwYW50RXhwcmVzc2lvbiB9IGZyb20gXCIuL1BhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24gZXh0ZW5kcyBQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCwgdXNlcklkPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nLCBvcmdUeXBlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuVXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5PcmdUeXBlID0gb3JnVHlwZSA/IG9yZ1R5cGUgOiAnU3lzJztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvblwiO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgQ0xSX1RZUEVfTkFNRSA9ICfnlKjmiLcnO1xyXG5cclxuICAgIENsclR5cGVJRDogc3RyaW5nID0gVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbi5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBUYWc6IHN0cmluZztcclxuICAgIFVzZXJJZDogc3RyaW5nO1xyXG4gICAgT3JnSWQ6IHN0cmluZztcclxuICAgIE9yZ05hbWU6IHN0cmluZztcclxuICAgIE9yZ1R5cGU6IHN0cmluZyA9ICdTeXMnO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlVzZXJJZFwiLCB0aGlzLlVzZXJJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPcmdJZFwiLCB0aGlzLk9yZ0lkKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk9yZ05hbWVcIiwgdGhpcy5PcmdOYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk9yZ1R5cGVcIiwgdGhpcy5PcmdUeXBlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlRhZ1wiLCB0aGlzLlRhZyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KTogYW55IHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLk9yZ0lkID0gb2JqLk9yZ0lkO1xyXG4gICAgICAgIHRoaXMuT3JnTmFtZSA9IG9iai5PcmdOYW1lO1xyXG4gICAgICAgIHRoaXMuT3JnVHlwZSA9IG9iai5PcmdUeXBlO1xyXG4gICAgICAgIHRoaXMuVXNlcklkID0gb2JqLlVzZXJJZDtcclxuICAgICAgICB0aGlzLlRhZyA9IG9iai5UYWc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbiB7XHJcbiAgICAgICAgY29uc3QgdXNlclBhcnRpY2lwYW50ID0gbmV3IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24odGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50LmlkID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50Lm5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50Lk9yZ0lkID0gdGhpcy5PcmdJZDtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnTmFtZSA9IHRoaXMuT3JnTmFtZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuT3JnVHlwZSA9IHRoaXMuT3JnVHlwZTtcclxuICAgICAgICB1c2VyUGFydGljaXBhbnQuVXNlcklkID0gdGhpcy5Vc2VySWQ7XHJcbiAgICAgICAgdXNlclBhcnRpY2lwYW50LlRhZyA9IHRoaXMuVGFnO1xyXG4gICAgICAgIC8vIGlmICh0aGlzLkNvbmRpdGlvbikgeyBcclxuICAgICAgICAvLyAgICAgdXNlclBhcnRpY2lwYW50LkNvbmRpdGlvbiA9IHRoaXMuQ29uZGl0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIHJldHVybiB1c2VyUGFydGljaXBhbnQ7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFVzZXJQYXJ0aWNpcGFudEV4cHJlc3Npb24obmV3IEJwbW5Nb2RlbCgpKSk7Il19