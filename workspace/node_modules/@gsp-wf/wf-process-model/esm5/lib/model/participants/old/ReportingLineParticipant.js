/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Participant } from "./Participant";
var ReportingLineParticipant = /** @class */ (function (_super) {
    tslib_1.__extends(ReportingLineParticipant, _super);
    function ReportingLineParticipant(model, RefUserId, RefEmployeeId, ReportingReferObject, RefOrgId, RefOrgName, ReportingLineDefId, ReportingLineDefName, Dimension) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ReportingLineParticipant.Clr_Type_ID;
        _this.RefUserId = RefUserId;
        _this.RefEmployeeId = RefEmployeeId;
        _this.ReportingReferObject = ReportingReferObject;
        _this.RefOrgId = RefOrgId;
        _this.RefOrgName = RefOrgName;
        _this.ReportingLineDefId = ReportingLineDefId;
        _this.ReportingLineDefName = ReportingLineDefName;
        _this.Dimension = Dimension;
        return _this;
    }
    /**
     * @return {?}
     */
    ReportingLineParticipant.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "RefUserId", this.RefUserId);
        BpmnModelHelper.SetAttributeValue(obj, "RefEmployeeId", this.RefEmployeeId);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingReferObject", this.ReportingReferObject);
        BpmnModelHelper.SetAttributeValue(obj, "Dimension", this.Dimension);
        BpmnModelHelper.SetAttributeValue(obj, "RefOrgId", this.RefOrgId);
        BpmnModelHelper.SetAttributeValue(obj, "RefOrgName", this.RefOrgName);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingLineDefId", this.ReportingLineDefId);
        BpmnModelHelper.SetAttributeValue(obj, "ReportingLineDefName", this.ReportingLineDefName);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ReportingLineParticipant.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.RefUserId = obj.RefUserId;
        this.RefEmployeeId = obj.RefEmployeeId;
        this.ReportingReferObject = obj.ReportingReferObject;
        this.Dimension = obj.Dimension;
        this.RefOrgId = obj.RefOrgId;
        this.RefOrgName = obj.RefOrgName;
        this.ReportingLineDefId = obj.ReportingLineDefId;
        this.ReportingLineDefName = obj.ReportingLineDefName;
    };
    /**
     * @return {?}
     */
    ReportingLineParticipant.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ReportingLineParticipant(this.Model);
    };
    /**
     * @return {?}
     */
    ReportingLineParticipant.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var reportingLineParticipant = new ReportingLineParticipant(this.Model);
        reportingLineParticipant.Id = BpmnModelHelper.GenerateElementId();
        reportingLineParticipant.Name = this.Name;
        reportingLineParticipant.RefUserId = this.RefUserId;
        reportingLineParticipant.RefEmployeeId = this.RefEmployeeId;
        reportingLineParticipant.ReportingReferObject = this.ReportingReferObject;
        reportingLineParticipant.Dimension = this.Dimension;
        reportingLineParticipant.RefOrgId = this.RefOrgId;
        reportingLineParticipant.RefOrgName = this.RefOrgName;
        reportingLineParticipant.ReportingLineDefId = this.ReportingLineDefId;
        reportingLineParticipant.ReportingLineDefName = this.ReportingLineDefName;
        reportingLineParticipant.Tag = this.Tag;
        if (this.Condition) {
            reportingLineParticipant.Condition = this.Condition.clone();
        }
        return reportingLineParticipant;
    };
    ReportingLineParticipant.Clr_Type_ID = 'wf.ReportingLineParticipant';
    ReportingLineParticipant.CLR_TYPE_NAME = '汇报关系';
    return ReportingLineParticipant;
}(Participant));
export { ReportingLineParticipant };
if (false) {
    /** @type {?} */
    ReportingLineParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    ReportingLineParticipant.CLR_TYPE_NAME;
    /** @type {?} */
    ReportingLineParticipant.prototype.ClrTypeID;
    /** @type {?} */
    ReportingLineParticipant.prototype.Tag;
    /** @type {?} */
    ReportingLineParticipant.prototype.ReportingLineDefId;
    /** @type {?} */
    ReportingLineParticipant.prototype.ReportingLineDefName;
    /** @type {?} */
    ReportingLineParticipant.prototype.RefOrgId;
    /** @type {?} */
    ReportingLineParticipant.prototype.RefOrgName;
    /** @type {?} */
    ReportingLineParticipant.prototype.RefUserId;
    /** @type {?} */
    ReportingLineParticipant.prototype.RefEmployeeId;
    /** @type {?} */
    ReportingLineParticipant.prototype.ReportingReferObject;
    /** @type {?} */
    ReportingLineParticipant.prototype.Dimension;
}
BpmnModelHelper.RegisterElementType(new ReportingLineParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,