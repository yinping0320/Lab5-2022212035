/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../../parameter/WFActualParameter";
import { Participant } from "./Participant";
var ComponentParticipant = /** @class */ (function (_super) {
    tslib_1.__extends(ComponentParticipant, _super);
    function ComponentParticipant(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ComponentParticipant.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    ComponentParticipant.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.ActualParameters = new Array();
    };
    /**
     * @return {?}
     */
    ComponentParticipant.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentName", this.ComponentName);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.MethodCode);
        BpmnModelHelper.SetAttributeValue(obj, "MethodName", this.MethodName);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ComponentParticipant.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.ComponentId = obj.ComponentId;
        this.ComponentName = obj.ComponentName;
        this.MethodCode = obj.MethodCode;
        this.MethodName = obj.MethodName;
    };
    /**
     * @protected
     * @return {?}
     */
    ComponentParticipant.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.ActualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var param = _c.value;
                    param.MexTag = ComponentParticipant.MEXTAG;
                    list.push(param);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    ComponentParticipant.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_2, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement instanceof ActualParameter) {
                    /** @type {?} */
                    var actualParameter = (/** @type {?} */ (extensionElement));
                    if (actualParameter.MexTag === ComponentParticipant.MEXTAG) {
                        this.ActualParameters.push(actualParameter);
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @return {?}
     */
    ComponentParticipant.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ComponentParticipant(this.Model);
    };
    /**
     * @return {?}
     */
    ComponentParticipant.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var componentParticipant = new ComponentParticipant(this.Model);
        componentParticipant.Id = BpmnModelHelper.GenerateElementId();
        componentParticipant.Name = this.Name;
        componentParticipant.ComponentId = this.ComponentId;
        componentParticipant.ComponentName = this.ComponentName;
        componentParticipant.MethodCode = this.MethodCode;
        componentParticipant.MethodName = this.MethodName;
        componentParticipant.ActualParameters = new Array();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.ActualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    /** @type {?} */
                    var parameter = p.clone();
                    componentParticipant.ActualParameters.push(parameter);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.Condition) {
            componentParticipant.Condition = this.Condition.clone();
        }
        return componentParticipant;
    };
    ComponentParticipant.Clr_Type_ID = 'wf.ComponentParticipant';
    ComponentParticipant.CLR_TYPE_NAME = '构件';
    ComponentParticipant.MEXTAG = "wf.ComponentParticipant";
    return ComponentParticipant;
}(Participant));
export { ComponentParticipant };
if (false) {
    /** @type {?} */
    ComponentParticipant.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    ComponentParticipant.CLR_TYPE_NAME;
    /**
     * @type {?}
     * @private
     */
    ComponentParticipant.MEXTAG;
    /** @type {?} */
    ComponentParticipant.prototype.ClrTypeID;
    /** @type {?} */
    ComponentParticipant.prototype.ComponentId;
    /** @type {?} */
    ComponentParticipant.prototype.ComponentName;
    /** @type {?} */
    ComponentParticipant.prototype.MethodCode;
    /** @type {?} */
    ComponentParticipant.prototype.MethodName;
    /** @type {?} */
    ComponentParticipant.prototype.ActualParameters;
}
BpmnModelHelper.RegisterElementType(new ComponentParticipant(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,