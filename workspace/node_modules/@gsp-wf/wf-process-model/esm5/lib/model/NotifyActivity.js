/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod, UserTask } from "@edp-pmf/bpmn-model";
import { ExtendProperty } from "./ExtendProperty";
import { ExecuteForm } from "./extension/ExecuteForm";
import { HumanPerformerImpl } from "./HumanPerformerImpl";
import { MessageNotice } from "./MessageNotice";
import { OrganizationPotentialOwner } from "./OrganizationPotentialOwner";
import { ActivityExecutorParticipant } from "./participants/old/ActivityExecutorParticipant";
import { ComponentParticipant } from "./participants/old/ComponentParticipant";
import { MatrixParticipant } from "./participants/old/MatrixParticipant";
import { Participant } from "./participants/old/Participant";
import { PositionParticipant } from "./participants/old/PositionParticipant";
import { ReportingLineParticipant } from "./participants/old/ReportingLineParticipant";
import { UserParticipant } from "./participants/old/UserParticipant";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { ParticipantExpression } from "./participants/ParticipantExpression";
import { PotentialOwnerImpl } from "./PotentialOwnerImpl";
var NotifyActivity = /** @class */ (function (_super) {
    tslib_1.__extends(NotifyActivity, _super);
    function NotifyActivity(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = NotifyActivity.Clr_Type_ID;
        _this.dynamicParticipants = new Array();
        return _this;
    }
    /**
     * 模型校验
     * @param errors 模型校验错误信息
     */
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    NotifyActivity.prototype.Validate = /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    function (errors) {
        // TODO: 需要添加自定义校验信息
        _super.prototype.Validate.call(this, errors);
    };
    /**
     * @return {?}
     */
    NotifyActivity.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
        /** @type {?} */
        var notifyActivity = new NotifyActivity(this.Model);
        notifyActivity.Name = this.Name;
        /** @type {?} */
        var resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            try {
                for (var resourceRoles_1 = tslib_1.__values(resourceRoles), resourceRoles_1_1 = resourceRoles_1.next(); !resourceRoles_1_1.done; resourceRoles_1_1 = resourceRoles_1.next()) {
                    var role = resourceRoles_1_1.value;
                    if (role instanceof UserParticipant) {
                        /** @type {?} */
                        var user = (/** @type {?} */ (role));
                        /** @type {?} */
                        var userParticipant = user.clone();
                        notifyActivity.AddResourceRole(userParticipant);
                    }
                    else if (role instanceof PositionParticipant) {
                        /** @type {?} */
                        var position = (/** @type {?} */ (role));
                        /** @type {?} */
                        var positionParticipant = position.clone();
                        notifyActivity.AddResourceRole(positionParticipant);
                    }
                    else if (role instanceof ReportingLineParticipant) {
                        /** @type {?} */
                        var reportingLine = (/** @type {?} */ (role));
                        /** @type {?} */
                        var reportingLineParticipant = reportingLine.clone();
                        notifyActivity.AddResourceRole(reportingLineParticipant);
                    }
                    else if (role instanceof ActivityExecutorParticipant) {
                        /** @type {?} */
                        var activityExecutor = (/** @type {?} */ (role));
                        /** @type {?} */
                        var activityExecutorParticipant = activityExecutor.clone();
                        notifyActivity.AddResourceRole(activityExecutorParticipant);
                    }
                    else if (role instanceof ComponentParticipant) {
                        /** @type {?} */
                        var component = (/** @type {?} */ (role));
                        /** @type {?} */
                        var componentParticipant = component.clone();
                        notifyActivity.AddResourceRole(componentParticipant);
                    }
                    else if (role instanceof MatrixParticipant) {
                        /** @type {?} */
                        var matrix = (/** @type {?} */ (role));
                        /** @type {?} */
                        var matrixParticipant = matrix.clone();
                        notifyActivity.AddResourceRole(matrixParticipant);
                    }
                    else if (role instanceof OrganizationPotentialOwner) {
                        /** @type {?} */
                        var org = (/** @type {?} */ (role));
                        /** @type {?} */
                        var organizationPotentialOwner = org.clone();
                        notifyActivity.AddResourceRole(organizationPotentialOwner);
                    }
                    else if (role instanceof HumanPerformerImpl) {
                        /** @type {?} */
                        var performer = (/** @type {?} */ (role));
                        /** @type {?} */
                        var humanPerformerImpl = performer.clone();
                        notifyActivity.AddResourceRole(humanPerformerImpl);
                    }
                    else if (role instanceof PotentialOwnerImpl) {
                        /** @type {?} */
                        var owner = (/** @type {?} */ (role));
                        /** @type {?} */
                        var potentialOwnerImpl = owner.clone();
                        notifyActivity.AddResourceRole(potentialOwnerImpl);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (resourceRoles_1_1 && !resourceRoles_1_1.done && (_a = resourceRoles_1.return)) _a.call(resourceRoles_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        notifyActivity.executeForms = new Array();
        if (this.executeForms && this.executeForms.length > 0) {
            try {
                for (var _f = tslib_1.__values(this.executeForms), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var f = _g.value;
                    /** @type {?} */
                    var executeForm = f.clone();
                    notifyActivity.executeForms.push(executeForm);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        notifyActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            try {
                for (var _h = tslib_1.__values(this.extendProperties), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var e = _j.value;
                    /** @type {?} */
                    var extendProperty = e.clone();
                    notifyActivity.extendProperties.push(extendProperty);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        notifyActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            try {
                for (var _k = tslib_1.__values(this.messageNotices), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var m = _l.value;
                    /** @type {?} */
                    var messageNotice = m.clone();
                    notifyActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_d = _k.return)) _d.call(_k);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        notifyActivity.notifyAble = this.notifyAble;
        notifyActivity.dynamicParticipants = new Array();
        if (this.dynamicParticipants && this.dynamicParticipants.length > 0) {
            try {
                for (var _m = tslib_1.__values(this.dynamicParticipants), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var p = _o.value;
                    if (p instanceof OrganizationParticipantExpression) {
                        /** @type {?} */
                        var o = (/** @type {?} */ (p));
                        /** @type {?} */
                        var organizationParticipantExpression = o.clone();
                        notifyActivity.dynamicParticipants.push(organizationParticipantExpression);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_e = _m.return)) _e.call(_m);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return notifyActivity;
    };
    /**
     * @return {?}
     */
    NotifyActivity.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new NotifyActivity(this.Model);
    };
    /**
     * @return {?}
     */
    NotifyActivity.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.participants = new Array();
        this.messageNotices = new Array();
        this.executeForms = new Array();
        this.extendProperties = new Array();
        this.notifyAble = false;
        this.dynamicParticipants = new Array();
    };
    /**
     * @return {?}
     */
    NotifyActivity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        // this.beforeSerialize();
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "NotifyAble", this.notifyAble);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    NotifyActivity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.notifyAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "NotifyAble");
        ;
        // this.afterDeserialize();
    };
    /**
     * @protected
     * @return {?}
     */
    NotifyActivity.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_6, _a, e_7, _b, e_8, _c, e_9, _d;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.messageNotices != null) {
            try {
                for (var _e = tslib_1.__values(this.messageNotices), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    item.MexTag = NotifyActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.executeForms != null) {
            try {
                for (var _g = tslib_1.__values(this.executeForms), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var form = _h.value;
                    form.MexTag = NotifyActivity.MEXTAG;
                    list.push(form);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.extendProperties != null) {
            try {
                for (var _j = tslib_1.__values(this.extendProperties), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var extendProperty = _k.value;
                    extendProperty.MexTag = NotifyActivity.MEXTAG;
                    list.push(extendProperty);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (this.dynamicParticipants != null) {
            try {
                for (var _l = tslib_1.__values(this.dynamicParticipants), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var participant = _m.value;
                    participant.MexTag = NotifyActivity.MEXTAG;
                    list.push(participant);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    NotifyActivity.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_10, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (NotifyActivity.MEXTAG != extensionElement.MexTag) {
                    continue;
                }
                switch (extensionElement.ClrTypeID) {
                    case MessageNotice.Clr_Type_ID:
                        this.messageNotices.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ExecuteForm.Clr_Type_ID:
                        this.executeForms.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ExtendProperty.Clr_Type_ID:
                        this.extendProperties.push((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        if (extensionElement instanceof ParticipantExpression) {
                            this.dynamicParticipants.push((/** @type {?} */ (extensionElement)));
                        }
                        break;
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NotifyActivity.prototype.beforeSerialize = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_11, _a, e_12, _b;
        /** @type {?} */
        var roles = this.GetResourceRoles();
        if (roles != null && roles.length != 0) {
            try {
                for (var roles_1 = tslib_1.__values(roles), roles_1_1 = roles_1.next(); !roles_1_1.done; roles_1_1 = roles_1.next()) {
                    var role = roles_1_1.value;
                    _super.prototype.RemoveResourceRole.call(this, role.Id);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (roles_1_1 && !roles_1_1.done && (_a = roles_1.return)) _a.call(roles_1);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (this.participants != null && this.participants.length != 0) {
            try {
                for (var _c = tslib_1.__values(this.participants), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var participant = _d.value;
                    this.AddResourceRole(participant);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NotifyActivity.prototype.afterDeserialize = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_13, _a;
        /** @type {?} */
        var roles = this.GetResourceRoles();
        if (roles == null || roles.length == 0) {
            return;
        }
        try {
            for (var roles_2 = tslib_1.__values(roles), roles_2_1 = roles_2.next(); !roles_2_1.done; roles_2_1 = roles_2.next()) {
                var role = roles_2_1.value;
                if (role instanceof Participant) {
                    this.participants.push(role);
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (roles_2_1 && !roles_2_1.done && (_a = roles_2.return)) _a.call(roles_2);
            }
            finally { if (e_13) throw e_13.error; }
        }
    };
    NotifyActivity.Clr_Type_ID = "wf.NotifyActivity";
    NotifyActivity.MEXTAG = "wf.NotifyActivity";
    return NotifyActivity;
}(UserTask));
export { NotifyActivity };
if (false) {
    /** @type {?} */
    NotifyActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    NotifyActivity.MEXTAG;
    /** @type {?} */
    NotifyActivity.prototype.ClrTypeID;
    /** @type {?} */
    NotifyActivity.prototype.participants;
    /** @type {?} */
    NotifyActivity.prototype.messageNotices;
    /** @type {?} */
    NotifyActivity.prototype.executeForms;
    /** @type {?} */
    NotifyActivity.prototype.extendProperties;
    /** @type {?} */
    NotifyActivity.prototype.dynamicParticipants;
    /** @type {?} */
    NotifyActivity.prototype.notifyAble;
}
BpmnModelHelper.RegisterElementType(new NotifyActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,