/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
var SmsMessageVariable = /** @class */ (function (_super) {
    tslib_1.__extends(SmsMessageVariable, _super);
    function SmsMessageVariable(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = SmsMessageVariable.Clr_Type_ID;
        _this.tag = 'expression';
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    SmsMessageVariable.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    SmsMessageVariable.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Code", this.code);
        ExtensionMethod.SetAttributeValue(obj, "Value", this.value);
        ExtensionMethod.SetAttributeValue(obj, "Tag", this.tag);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SmsMessageVariable.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.code = ExtensionMethod.GetAttributeValue4String(obj, "Code");
        this.value = ExtensionMethod.GetAttributeValue4String(obj, "Value");
        this.tag = ExtensionMethod.GetAttributeValue4String(obj, "Tag");
    };
    /**
     * @return {?}
     */
    SmsMessageVariable.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new SmsMessageVariable(this.Model);
    };
    /**
     * @return {?}
     */
    SmsMessageVariable.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var smsMessageVariable = new SmsMessageVariable(this.Model);
        smsMessageVariable.code = this.code;
        smsMessageVariable.value = this.value;
        smsMessageVariable.tag = this.tag;
        return smsMessageVariable;
    };
    SmsMessageVariable.Clr_Type_ID = "wf.SmsMessageVariable";
    return SmsMessageVariable;
}(ExtensionElement));
export { SmsMessageVariable };
if (false) {
    /** @type {?} */
    SmsMessageVariable.Clr_Type_ID;
    /** @type {?} */
    SmsMessageVariable.prototype.ClrTypeID;
    /** @type {?} */
    SmsMessageVariable.prototype.code;
    /** @type {?} */
    SmsMessageVariable.prototype.value;
    /** @type {?} */
    SmsMessageVariable.prototype.tag;
}
BpmnModelHelper.RegisterElementType(new SmsMessageVariable(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU21zTWVzc2FnZVZhcmlhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL1Ntc01lc3NhZ2VWYXJpYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW9CLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0SDtJQUF3Qyw4Q0FBZ0I7SUFRcEQsNEJBQVksS0FBZ0I7UUFBNUIsWUFDSSxrQkFBTSxLQUFLLENBQUMsU0FDZjtRQVJRLGVBQVMsR0FBVyxrQkFBa0IsQ0FBQyxXQUFXLENBQUM7UUFJNUQsU0FBRyxHQUFHLFlBQVksQ0FBQzs7SUFJbkIsQ0FBQzs7Ozs7SUFFUyxnREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxnREFBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFFckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELCtDQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXBFLENBQUM7Ozs7SUFHRCx3Q0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxrQ0FBSzs7O0lBQUw7O1lBQ1Usa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdELGtCQUFrQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RDLGtCQUFrQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBRWxDLE9BQU8sa0JBQWtCLENBQUM7SUFDOUIsQ0FBQztJQTdDTSw4QkFBVyxHQUFXLHVCQUF1QixDQUFDO0lBK0N6RCx5QkFBQztDQUFBLEFBaERELENBQXdDLGdCQUFnQixHQWdEdkQ7U0FoRFksa0JBQWtCOzs7SUFDM0IsK0JBQXFEOztJQUNyRCx1Q0FBNEQ7O0lBRTVELGtDQUFhOztJQUNiLG1DQUFhOztJQUNiLGlDQUFtQjs7QUEyQ3ZCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxFbGVtZW50LCBCcG1uTW9kZWxIZWxwZXIsIEV4dGVuc2lvbkVsZW1lbnQsIEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU21zTWVzc2FnZVZhcmlhYmxlIGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuU21zTWVzc2FnZVZhcmlhYmxlXCI7XHJcbiAgICByZWFkb25seSBDbHJUeXBlSUQ6IHN0cmluZyA9IFNtc01lc3NhZ2VWYXJpYWJsZS5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogc3RyaW5nXHJcbiAgICB0YWcgPSAnZXhwcmVzc2lvbic7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29kZVwiLCB0aGlzLmNvZGUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVmFsdWVcIiwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJUYWdcIiwgdGhpcy50YWcpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkNvZGVcIik7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIlZhbHVlXCIpO1xyXG4gICAgICAgIHRoaXMudGFnID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiVGFnXCIpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogU21zTWVzc2FnZVZhcmlhYmxlIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNtc01lc3NhZ2VWYXJpYWJsZSh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBTbXNNZXNzYWdlVmFyaWFibGUge1xyXG4gICAgICAgIGNvbnN0IHNtc01lc3NhZ2VWYXJpYWJsZSA9IG5ldyBTbXNNZXNzYWdlVmFyaWFibGUodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgc21zTWVzc2FnZVZhcmlhYmxlLmNvZGUgPSB0aGlzLmNvZGU7XHJcbiAgICAgICAgc21zTWVzc2FnZVZhcmlhYmxlLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBzbXNNZXNzYWdlVmFyaWFibGUudGFnID0gdGhpcy50YWc7XHJcblxyXG4gICAgICAgIHJldHVybiBzbXNNZXNzYWdlVmFyaWFibGU7XHJcbiAgICB9XHJcblxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBTbXNNZXNzYWdlVmFyaWFibGUobmV3IEJwbW5Nb2RlbCgpKSk7XHJcbiJdfQ==