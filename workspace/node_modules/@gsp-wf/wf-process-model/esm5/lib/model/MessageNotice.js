/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActivityExecutorParticipantExpression } from "./participants/ActivityExecutorParticipantExpression";
import { ComponentParticipantExpression } from "./participants/ComponentParticipantExpression";
import { MatrixParticipantExpression } from "./participants/MatrixParticipantExpression";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { PositionParticipantExpression } from "./participants/PositionParticipantExpression";
import { ReportingLineParticipantExpression } from "./participants/ReportingLineParticipantExpression";
import { UserParticipantExpression } from "./participants/UserParticipantExpression";
import { SmsMessageTemplate } from "./SmsMessageTemplate";
var MessageNotice = /** @class */ (function (_super) {
    tslib_1.__extends(MessageNotice, _super);
    function MessageNotice(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = MessageNotice.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    MessageNotice.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.receiverExpressions = new Array();
        this.smsMessageTemplate = null;
    };
    /**
     * @return {?}
     */
    MessageNotice.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Content", this.content);
        ExtensionMethod.SetAttributeValue(obj, "SendTime", this.sendTime);
        ExtensionMethod.SetAttributeValue(obj, "SendType", this.sendType);
        ExtensionMethod.SetAttributeValue(obj, "Subject", this.subject);
        ExtensionMethod.SetAttributeValue(obj, "Receiver", this.receiver);
        ExtensionMethod.SetAttributeValue(obj, "ReceiverText", this.receiverText);
        if (this.receiverExpressions != null && this.receiverExpressions.length > 0) {
            /** @type {?} */
            var receiverList = new Array();
            try {
                for (var _b = tslib_1.__values(this.receiverExpressions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var receiver = _c.value;
                    receiverList.push(receiver.ConvertToJsonObject());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            ExtensionMethod.SetAttributeValue(obj, "ReceiverExpressions", receiverList);
        }
        if (this.smsMessageTemplate) {
            ExtensionMethod.SetAttributeValue(obj, "SmsMessageTemplate", this.smsMessageTemplate.ConvertToJsonObject());
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    MessageNotice.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var e_2, _a;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.content = ExtensionMethod.GetAttributeValue4String(obj, "Content");
        this.sendTime = ExtensionMethod.GetAttributeValue4String(obj, "SendTime");
        this.sendType = ExtensionMethod.GetAttributeValue4String(obj, "SendType");
        this.subject = ExtensionMethod.GetAttributeValue4String(obj, "Subject");
        this.receiver = ExtensionMethod.GetAttributeValue4String(obj, "Receiver");
        this.receiverText = ExtensionMethod.GetAttributeValue4String(obj, "ReceiverText");
        /** @type {?} */
        var receiverList = ExtensionMethod.GetAttributeValue(obj, "ReceiverExpressions");
        if (receiverList && receiverList.length > 0) {
            this.receiverExpressions = new Array();
            try {
                for (var receiverList_1 = tslib_1.__values(receiverList), receiverList_1_1 = receiverList_1.next(); !receiverList_1_1.done; receiverList_1_1 = receiverList_1.next()) {
                    var receiver = receiverList_1_1.value;
                    /** @type {?} */
                    var clrTypeID = ExtensionMethod.GetAttributeValue4String(receiver, "ClrTypeID");
                    switch (clrTypeID) {
                        case UserParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var userParticipantExpression = new UserParticipantExpression(this.Model);
                            userParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(userParticipantExpression);
                            break;
                        case PositionParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var positionParticipantExpression = new PositionParticipantExpression(this.Model);
                            positionParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(positionParticipantExpression);
                            break;
                        case ReportingLineParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var reportingLineParticipantExpression = new ReportingLineParticipantExpression(this.Model);
                            reportingLineParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(reportingLineParticipantExpression);
                            break;
                        case OrganizationParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var organizationParticipantExpression = new OrganizationParticipantExpression(this.Model);
                            organizationParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(organizationParticipantExpression);
                            break;
                        case MatrixParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var matrixParticipantExpression = new MatrixParticipantExpression(this.Model);
                            matrixParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(matrixParticipantExpression);
                            break;
                        case ComponentParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var componentParticipantExpression = new ComponentParticipantExpression(this.Model);
                            componentParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(componentParticipantExpression);
                            break;
                        case ActivityExecutorParticipantExpression.Clr_Type_ID:
                            /** @type {?} */
                            var activityExecutorParticipantExpression = new ActivityExecutorParticipantExpression(this.Model);
                            activityExecutorParticipantExpression.LoadFromJsonObject(receiver);
                            this.receiverExpressions.push(activityExecutorParticipantExpression);
                            break;
                        default:
                            break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (receiverList_1_1 && !receiverList_1_1.done && (_a = receiverList_1.return)) _a.call(receiverList_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        /** @type {?} */
        var smsTemplateElement = ExtensionMethod.GetAttributeValue(obj, 'SmsMessageTemplate');
        if (smsTemplateElement) {
            /** @type {?} */
            var smsMessageTemplate = new SmsMessageTemplate(this.Model);
            smsMessageTemplate.LoadFromJsonObject(smsTemplateElement);
            this.smsMessageTemplate = smsMessageTemplate;
        }
    };
    /**
     * @return {?}
     */
    MessageNotice.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new MessageNotice(this.Model);
    };
    /**
     * @return {?}
     */
    MessageNotice.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var messageNotice = new MessageNotice(this.Model);
        messageNotice.content = this.content;
        messageNotice.sendTime = this.sendTime;
        messageNotice.sendType = this.sendType;
        messageNotice.subject = this.subject;
        messageNotice.receiver = this.receiver;
        messageNotice.receiverText = this.receiverText;
        messageNotice.receiverExpressions = new Array();
        if (this.receiverExpressions && this.receiverExpressions.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.receiverExpressions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var r = _c.value;
                    if (r instanceof OrganizationParticipantExpression) {
                        /** @type {?} */
                        var o = (/** @type {?} */ (r));
                        /** @type {?} */
                        var organizationParticipantExpression = o.clone();
                        messageNotice.receiverExpressions.push(organizationParticipantExpression);
                    }
                    else if (r instanceof UserParticipantExpression) {
                        /** @type {?} */
                        var u = (/** @type {?} */ (r));
                        /** @type {?} */
                        var userParticipantExpression = u.clone();
                        messageNotice.receiverExpressions.push(userParticipantExpression);
                    }
                    else if (r instanceof PositionParticipantExpression) {
                        /** @type {?} */
                        var p = (/** @type {?} */ (r));
                        /** @type {?} */
                        var positionParticipantExpression = p.clone();
                        messageNotice.receiverExpressions.push(positionParticipantExpression);
                    }
                    else if (r instanceof ReportingLineParticipantExpression) {
                        /** @type {?} */
                        var re = (/** @type {?} */ (r));
                        /** @type {?} */
                        var reportingLineParticipantExpression = re.clone();
                        messageNotice.receiverExpressions.push(reportingLineParticipantExpression);
                    }
                    else if (r instanceof MatrixParticipantExpression) {
                        /** @type {?} */
                        var m = (/** @type {?} */ (r));
                        /** @type {?} */
                        var matrixParticipantExpression = m.clone();
                        messageNotice.receiverExpressions.push(matrixParticipantExpression);
                    }
                    else if (r instanceof ComponentParticipantExpression) {
                        /** @type {?} */
                        var c = (/** @type {?} */ (r));
                        /** @type {?} */
                        var componentParticipantExpression = c.clone();
                        messageNotice.receiverExpressions.push(componentParticipantExpression);
                    }
                    else if (r instanceof ActivityExecutorParticipantExpression) {
                        /** @type {?} */
                        var a = (/** @type {?} */ (r));
                        /** @type {?} */
                        var activityExecutorParticipantExpression = a.clone();
                        messageNotice.receiverExpressions.push(activityExecutorParticipantExpression);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.smsMessageTemplate) {
            messageNotice.smsMessageTemplate = this.smsMessageTemplate.clone();
        }
        return messageNotice;
    };
    MessageNotice.Clr_Type_ID = "wf.MessageNotice";
    return MessageNotice;
}(ExtensionElement));
export { MessageNotice };
if (false) {
    /** @type {?} */
    MessageNotice.Clr_Type_ID;
    /** @type {?} */
    MessageNotice.prototype.ClrTypeID;
    /**
     * 消息内容
     * @type {?}
     */
    MessageNotice.prototype.content;
    /**
     * 消息发送时机
     * @type {?}
     */
    MessageNotice.prototype.sendTime;
    /**
     * 消息发送方式
     * @type {?}
     */
    MessageNotice.prototype.sendType;
    /**
     * 消息主题
     * @type {?}
     */
    MessageNotice.prototype.subject;
    /**
     * 消息接收人
     * @type {?}
     */
    MessageNotice.prototype.receiver;
    /**
     * 消息接收人显示
     * @type {?}
     */
    MessageNotice.prototype.receiverText;
    /** @type {?} */
    MessageNotice.prototype.receiverExpressions;
    /** @type {?} */
    MessageNotice.prototype.smsMessageTemplate;
}
BpmnModelHelper.RegisterElementType(new MessageNotice(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,