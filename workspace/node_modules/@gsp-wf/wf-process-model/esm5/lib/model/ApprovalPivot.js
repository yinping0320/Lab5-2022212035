/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod, ExtensionElement } from "@edp-pmf/bpmn-model";
import { Condition } from "./extension/condition-expression/Condition";
var ApprovalPivot = /** @class */ (function (_super) {
    tslib_1.__extends(ApprovalPivot, _super);
    function ApprovalPivot(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ApprovalPivot.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    ApprovalPivot.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Type", this.type);
        ExtensionMethod.SetAttributeValue(obj, "Title", this.title);
        ExtensionMethod.SetAttributeValue(obj, "Description", this.description);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ApprovalPivot.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.type = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "Type")));
        this.title = ExtensionMethod.GetAttributeValue4String(obj, "Title");
        this.description = ExtensionMethod.GetAttributeValue4String(obj, "Description");
        /** @type {?} */
        var conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            var condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    };
    /**
     * @return {?}
     */
    ApprovalPivot.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ApprovalPivot(this.Model);
    };
    /**
     * @return {?}
     */
    ApprovalPivot.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var approvalPivot = new ApprovalPivot(this.Model);
        approvalPivot.type = this.type;
        approvalPivot.title = this.title;
        approvalPivot.description = this.description;
        if (this.condition) {
            approvalPivot.condition = this.condition.clone();
        }
        return approvalPivot;
    };
    ApprovalPivot.Clr_Type_ID = "wf.ApprovalPivot";
    return ApprovalPivot;
}(ExtensionElement));
export { ApprovalPivot };
if (false) {
    /** @type {?} */
    ApprovalPivot.Clr_Type_ID;
    /** @type {?} */
    ApprovalPivot.prototype.ClrTypeID;
    /** @type {?} */
    ApprovalPivot.prototype.type;
    /** @type {?} */
    ApprovalPivot.prototype.condition;
    /** @type {?} */
    ApprovalPivot.prototype.title;
    /** @type {?} */
    ApprovalPivot.prototype.description;
}
BpmnModelHelper.RegisterElementType(new ApprovalPivot(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwcm92YWxQaXZvdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9BcHByb3ZhbFBpdm90LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBRXZFO0lBQW1DLHlDQUFnQjtJQVMvQyx1QkFBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBVFEsZUFBUyxHQUFXLGFBQWEsQ0FBQyxXQUFXLENBQUM7O0lBU3ZELENBQUM7Ozs7SUFFRCwyQ0FBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFDckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELDBDQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQUEsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsRUFBcUIsQ0FBQztRQUN2RixJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDOztZQUMxRSxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztRQUM1RSxJQUFJLGdCQUFnQixFQUFFOztnQkFDWixTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM5QjtJQUNMLENBQUM7Ozs7SUFFRCxtQ0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsNkJBQUs7OztJQUFMOztZQUNVLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25ELGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMvQixhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDakMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDcEQ7UUFFRCxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBcERNLHlCQUFXLEdBQVcsa0JBQWtCLENBQUM7SUFzRHBELG9CQUFDO0NBQUEsQUF2REQsQ0FBbUMsZ0JBQWdCLEdBdURsRDtTQXZEWSxhQUFhOzs7SUFDdEIsMEJBQWdEOztJQUNoRCxrQ0FBdUQ7O0lBRXZELDZCQUF3Qjs7SUFDeEIsa0NBQXFCOztJQUNyQiw4QkFBYzs7SUFDZCxvQ0FBb0I7O0FBaUR4QixlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciwgRXh0ZW5zaW9uTWV0aG9kLCBFeHRlbnNpb25FbGVtZW50IH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgQXBwcm92YWxQaXZvdFR5cGUgfSBmcm9tIFwiLi9BcHByb3ZhbFBpdm90VHlwZVwiO1xyXG5pbXBvcnQgeyBDb25kaXRpb24gfSBmcm9tIFwiLi9leHRlbnNpb24vY29uZGl0aW9uLWV4cHJlc3Npb24vQ29uZGl0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXBwcm92YWxQaXZvdCBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLkFwcHJvdmFsUGl2b3RcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gQXBwcm92YWxQaXZvdC5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICB0eXBlOiBBcHByb3ZhbFBpdm90VHlwZTtcclxuICAgIGNvbmRpdGlvbjogQ29uZGl0aW9uO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlR5cGVcIiwgdGhpcy50eXBlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlRpdGxlXCIsIHRoaXMudGl0bGUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRGVzY3JpcHRpb25cIiwgdGhpcy5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29uZGl0aW9uXCIsIHRoaXMuY29uZGl0aW9uLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJUeXBlXCIpIGFzIEFwcHJvdmFsUGl2b3RUeXBlO1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJUaXRsZVwiKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlNFN0cmluZyhvYmosIFwiRGVzY3JpcHRpb25cIik7XHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uRWxlbWVudCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdDb25kaXRpb24nKTtcclxuICAgICAgICBpZiAoY29uZGl0aW9uRWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSBuZXcgQ29uZGl0aW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgICAgICBjb25kaXRpb24uTG9hZEZyb21Kc29uT2JqZWN0KGNvbmRpdGlvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogQXBwcm92YWxQaXZvdCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcHByb3ZhbFBpdm90KHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IEFwcHJvdmFsUGl2b3Qge1xyXG4gICAgICAgIGNvbnN0IGFwcHJvdmFsUGl2b3QgPSBuZXcgQXBwcm92YWxQaXZvdCh0aGlzLk1vZGVsKTtcclxuICAgICAgICBhcHByb3ZhbFBpdm90LnR5cGUgPSB0aGlzLnR5cGU7XHJcbiAgICAgICAgYXBwcm92YWxQaXZvdC50aXRsZSA9IHRoaXMudGl0bGU7XHJcbiAgICAgICAgYXBwcm92YWxQaXZvdC5kZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb247XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGFwcHJvdmFsUGl2b3QuY29uZGl0aW9uID0gdGhpcy5jb25kaXRpb24uY2xvbmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcHByb3ZhbFBpdm90O1xyXG4gICAgfVxyXG5cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgQXBwcm92YWxQaXZvdChuZXcgQnBtbk1vZGVsKCkpKTsiXX0=