/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { BackWardRule } from "./extension/completion-strategy/BackWardRule";
import { ConclusionItem } from "./extension/completion-strategy/ConclusionItem";
import { WorkFlowAction } from "./extension/completion-strategy/WorkFlowAction";
import { Component } from "./extension/tool/Component";
import { UserActivity } from "./flow-node/UserActivity";
import { OrganizationPotentialOwner } from "./OrganizationPotentialOwner";
import { ActivityExecutorParticipant } from "./participants/old/ActivityExecutorParticipant";
import { ComponentParticipant } from "./participants/old/ComponentParticipant";
import { MatrixParticipant } from "./participants/old/MatrixParticipant";
import { PositionParticipant } from "./participants/old/PositionParticipant";
import { ReportingLineParticipant } from "./participants/old/ReportingLineParticipant";
import { UserParticipant } from "./participants/old/UserParticipant";
import { PotentialOwnerImpl } from "./PotentialOwnerImpl";
import { HumanPerformerImpl } from "./HumanPerformerImpl";
var OperationActivity = /** @class */ (function (_super) {
    tslib_1.__extends(OperationActivity, _super);
    function OperationActivity(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = OperationActivity.Clr_Type_ID;
        return _this;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    OperationActivity.prototype.initConclusions = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var submit = new ConclusionItem(model);
        submit.Value = 'Send';
        submit.Text = '发送';
        submit.WorkFlowAction = WorkFlowAction.Forward;
        submit.IsDefault = true;
        submit.commentNecessary = false;
        this.Conclusions.push(submit);
        /** @type {?} */
        var back = new ConclusionItem(model);
        back.Value = 'Back';
        back.Text = '驳回';
        back.WorkFlowAction = WorkFlowAction.Backward;
        back.IsDefault = false;
        back.commentNecessary = true;
        this.Conclusions.push(back);
        // 审批项存在反向时，初始化驳回规则
        this.BackWardRule = new BackWardRule(model);
    };
    /**
     * @return {?}
     */
    OperationActivity.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new OperationActivity(this.Model);
    };
    /**
     * @return {?}
     */
    OperationActivity.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j, e_10, _k;
        /** @type {?} */
        var operationActivity = new OperationActivity(this.Model);
        operationActivity.Name = this.Name;
        if (this.taskTitle) {
            operationActivity.taskTitle = this.taskTitle.clone();
        }
        /** @type {?} */
        var resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            try {
                for (var resourceRoles_1 = tslib_1.__values(resourceRoles), resourceRoles_1_1 = resourceRoles_1.next(); !resourceRoles_1_1.done; resourceRoles_1_1 = resourceRoles_1.next()) {
                    var role = resourceRoles_1_1.value;
                    if (role instanceof UserParticipant) {
                        /** @type {?} */
                        var user = (/** @type {?} */ (role));
                        /** @type {?} */
                        var userParticipant = user.clone();
                        operationActivity.AddResourceRole(userParticipant);
                    }
                    else if (role instanceof PositionParticipant) {
                        /** @type {?} */
                        var position = (/** @type {?} */ (role));
                        /** @type {?} */
                        var positionParticipant = position.clone();
                        operationActivity.AddResourceRole(positionParticipant);
                    }
                    else if (role instanceof ReportingLineParticipant) {
                        /** @type {?} */
                        var reportingLine = (/** @type {?} */ (role));
                        /** @type {?} */
                        var reportingLineParticipant = reportingLine.clone();
                        operationActivity.AddResourceRole(reportingLineParticipant);
                    }
                    else if (role instanceof ActivityExecutorParticipant) {
                        /** @type {?} */
                        var activityExecutor = (/** @type {?} */ (role));
                        /** @type {?} */
                        var activityExecutorParticipant = activityExecutor.clone();
                        operationActivity.AddResourceRole(activityExecutorParticipant);
                    }
                    else if (role instanceof ComponentParticipant) {
                        /** @type {?} */
                        var component = (/** @type {?} */ (role));
                        /** @type {?} */
                        var componentParticipant = component.clone();
                        operationActivity.AddResourceRole(componentParticipant);
                    }
                    else if (role instanceof MatrixParticipant) {
                        /** @type {?} */
                        var matrix = (/** @type {?} */ (role));
                        /** @type {?} */
                        var matrixParticipant = matrix.clone();
                        operationActivity.AddResourceRole(matrixParticipant);
                    }
                    else if (role instanceof OrganizationPotentialOwner) {
                        /** @type {?} */
                        var org = (/** @type {?} */ (role));
                        /** @type {?} */
                        var organizationPotentialOwner = org.clone();
                        operationActivity.AddResourceRole(organizationPotentialOwner);
                        // 2023-5-31 复制人工操作节点没带上参与者 发现是缺少HumanPerformerImpl和PotentialOwnerImpl
                    }
                    else if (role instanceof HumanPerformerImpl) {
                        /** @type {?} */
                        var performer = (/** @type {?} */ (role));
                        /** @type {?} */
                        var humanPerformerImpl = performer.clone();
                        operationActivity.AddResourceRole(humanPerformerImpl);
                    }
                    else if (role instanceof PotentialOwnerImpl) {
                        /** @type {?} */
                        var owner = (/** @type {?} */ (role));
                        /** @type {?} */
                        var potentialOwnerImpl = owner.clone();
                        operationActivity.AddResourceRole(potentialOwnerImpl);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (resourceRoles_1_1 && !resourceRoles_1_1.done && (_a = resourceRoles_1.return)) _a.call(resourceRoles_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        operationActivity.ParticipantSchemes = new Array();
        if (this.ParticipantSchemes && this.ParticipantSchemes.length > 0) {
            try {
                for (var _l = tslib_1.__values(this.ParticipantSchemes), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var s = _m.value;
                    /** @type {?} */
                    var scheme = s.clone();
                    operationActivity.ParticipantSchemes.push(scheme);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_b = _l.return)) _b.call(_l);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.ParticipantSetting) {
            operationActivity.ParticipantSetting = this.ParticipantSetting.clone();
        }
        operationActivity.AssignmentStrategy = this.AssignmentStrategy;
        if (this.AssignPerformerConfig) {
            operationActivity.AssignPerformerConfig = this.AssignPerformerConfig.clone();
        }
        operationActivity.PerformerNotFundExecption = this.PerformerNotFundExecption;
        operationActivity.Retrievable = this.Retrievable;
        operationActivity.IsRollback = this.IsRollback;
        operationActivity.SelectBranch = this.SelectBranch;
        operationActivity.NotifyAble = this.NotifyAble;
        operationActivity.AddSignFrontAble = this.AddSignFrontAble;
        operationActivity.AddSignBehindAble = this.AddSignBehindAble;
        operationActivity.Priority = this.Priority;
        operationActivity.ExecuteWorkItemMode = this.ExecuteWorkItemMode;
        operationActivity.DisplayTerminal = this.DisplayTerminal;
        operationActivity.SelectTargetAble = this.SelectTargetAble;
        if (this.JumpScope) {
            operationActivity.JumpScope = this.JumpScope.clone();
        }
        if (this.BackWardRule) {
            operationActivity.BackWardRule = this.BackWardRule.clone();
        }
        operationActivity.transferAble = this.transferAble;
        operationActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            try {
                for (var _o = tslib_1.__values(this.ExecuteForms), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var f = _p.value;
                    /** @type {?} */
                    var executeForm = f.clone();
                    operationActivity.ExecuteForms.push(executeForm);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_c = _o.return)) _c.call(_o);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        operationActivity.customizeActions = new Array();
        if (this.customizeActions && this.customizeActions.length > 0) {
            try {
                for (var _q = tslib_1.__values(this.customizeActions), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var a = _r.value;
                    /** @type {?} */
                    var customizeAction = a.clone();
                    operationActivity.customizeActions.push(customizeAction);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_d = _q.return)) _d.call(_q);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        operationActivity.CounterSignRules = new Array();
        if (this.CounterSignRules && this.CounterSignRules.length > 0) {
            try {
                for (var _s = tslib_1.__values(this.CounterSignRules), _t = _s.next(); !_t.done; _t = _s.next()) {
                    var r = _t.value;
                    /** @type {?} */
                    var counterSignRule = r.clone();
                    operationActivity.CounterSignRules.push(counterSignRule);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_t && !_t.done && (_e = _s.return)) _e.call(_s);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        operationActivity.AdhocActivitySecurities = new Array();
        if (this.AdhocActivitySecurities && this.AdhocActivitySecurities.length > 0) {
            try {
                for (var _u = tslib_1.__values(this.AdhocActivitySecurities), _v = _u.next(); !_v.done; _v = _u.next()) {
                    var s = _v.value;
                    operationActivity.AdhocActivitySecurities.push(s);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_v && !_v.done && (_f = _u.return)) _f.call(_u);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        operationActivity.NotificationList = new Array();
        operationActivity.anonymous = this.anonymous;
        operationActivity.anonymousText = this.anonymousText;
        operationActivity.BizActivityID = this.BizActivityID;
        operationActivity.BizActivityName = this.BizActivityName;
        operationActivity.Conclusions = new Array();
        if (this.Conclusions && this.Conclusions.length > 0) {
            try {
                for (var _w = tslib_1.__values(this.Conclusions), _x = _w.next(); !_x.done; _x = _w.next()) {
                    var c = _x.value;
                    /** @type {?} */
                    var conclusion = c.clone();
                    operationActivity.Conclusions.push(conclusion);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_x && !_x.done && (_g = _w.return)) _g.call(_w);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        operationActivity.Tools = new Array();
        if (this.Tools && this.Tools.length > 0) {
            try {
                for (var _y = tslib_1.__values(this.Tools), _z = _y.next(); !_z.done; _z = _y.next()) {
                    var t = _z.value;
                    if (t instanceof Component) {
                        /** @type {?} */
                        var c = (/** @type {?} */ (t));
                        /** @type {?} */
                        var tool = c.clone();
                        operationActivity.Tools.push(tool);
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_z && !_z.done && (_h = _y.return)) _h.call(_y);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        operationActivity.BizParameters = new Array();
        if (this.timeLimitControl) {
            operationActivity.timeLimitControl = this.timeLimitControl.clone();
        }
        operationActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            try {
                for (var _0 = tslib_1.__values(this.variableSettings), _1 = _0.next(); !_1.done; _1 = _0.next()) {
                    var v = _1.value;
                    /** @type {?} */
                    var variableSetting = v.clone();
                    operationActivity.variableSettings.push(variableSetting);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_1 && !_1.done && (_j = _0.return)) _j.call(_0);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        operationActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            try {
                for (var _2 = tslib_1.__values(this.messageNotices), _3 = _2.next(); !_3.done; _3 = _2.next()) {
                    var m = _3.value;
                    /** @type {?} */
                    var messageNotice = m.clone();
                    operationActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_3 && !_3.done && (_k = _2.return)) _k.call(_2);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (this.approvalPivotConfig) {
            operationActivity.approvalPivotConfig = this.approvalPivotConfig.clone();
        }
        if (this.urgeHandleRule) {
            operationActivity.urgeHandleRule = this.urgeHandleRule.clone();
        }
        return operationActivity;
    };
    OperationActivity.Clr_Type_ID = "wf.OperationActivity";
    OperationActivity.MEXTAG = 'wf.OperationActivity';
    return OperationActivity;
}(UserActivity));
export { OperationActivity };
if (false) {
    /** @type {?} */
    OperationActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    OperationActivity.MEXTAG;
    /** @type {?} */
    OperationActivity.prototype.ClrTypeID;
}
BpmnModelHelper.RegisterElementType(new OperationActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,