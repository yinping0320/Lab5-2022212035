/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, DataObject } from "@edp-pmf/bpmn-model";
import { VariableSetting } from "./VariableSetting";
var ValuedDataObject = /** @class */ (function (_super) {
    tslib_1.__extends(ValuedDataObject, _super);
    function ValuedDataObject(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ValuedDataObject.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    ValuedDataObject.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.variableSetting != null) {
            this.variableSetting.MexTag = ValuedDataObject.MEXTAG;
            list.push(this.variableSetting);
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    ValuedDataObject.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_1, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== ValuedDataObject.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case VariableSetting.Clr_Type_ID:
                        this.variableSetting = ((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    ValuedDataObject.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ValuedDataObject(this.Model);
    };
    ValuedDataObject.Clr_Type_ID = "wf.ValuedDataObject";
    ValuedDataObject.MEXTAG = 'wf.ValuedDataObject';
    return ValuedDataObject;
}(DataObject));
export { ValuedDataObject };
if (false) {
    /** @type {?} */
    ValuedDataObject.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    ValuedDataObject.MEXTAG;
    /** @type {?} */
    ValuedDataObject.prototype.ClrTypeID;
    /** @type {?} */
    ValuedDataObject.prototype.variableSetting;
}
BpmnModelHelper.RegisterElementType(new ValuedDataObject(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWVkRGF0YU9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9WYWx1ZWREYXRhT2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFvQixNQUFNLHFCQUFxQixDQUFDO0FBQy9GLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDtJQUFzQyw0Q0FBVTtJQU81QywwQkFBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBUFEsZUFBUyxHQUFXLGdCQUFnQixDQUFDLFdBQVcsQ0FBQzs7SUFPMUQsQ0FBQzs7Ozs7SUFFUyx5REFBOEI7Ozs7SUFBeEM7O1lBQ1EsSUFBSSxHQUFHLGlCQUFNLDhCQUE4QixXQUFFO1FBQ2pELElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO1lBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7O0lBQ1Msd0RBQTZCOzs7OztJQUF2QyxVQUF3QyxpQkFBcUM7O1FBQ3pFLGlCQUFNLDZCQUE2QixZQUFDLGlCQUFpQixDQUFDLENBQUM7O1lBQ3ZELEtBQTZCLElBQUEsc0JBQUEsaUJBQUEsaUJBQWlCLENBQUEsb0RBQUEsbUZBQUU7Z0JBQTNDLElBQUksZ0JBQWdCLDhCQUFBO2dCQUNyQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxnQkFBZ0IsQ0FBQyxNQUFNO29CQUNuRCxTQUFTO2dCQUNiLFFBQVEsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO29CQUNoQyxLQUFLLGVBQWUsQ0FBQyxXQUFXO3dCQUM1QixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsbUJBQUEsZ0JBQWdCLEVBQW1CLENBQUMsQ0FBQzt3QkFDN0QsTUFBTTtvQkFDVjt3QkFDSSxNQUFNO2lCQUNiO2FBQ0o7Ozs7Ozs7OztJQUNMLENBQUM7Ozs7SUFDRCxzQ0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFsQ00sNEJBQVcsR0FBVyxxQkFBcUIsQ0FBQztJQUVsQyx1QkFBTSxHQUFXLHFCQUFxQixDQUFDO0lBaUM1RCx1QkFBQztDQUFBLEFBcENELENBQXNDLFVBQVUsR0FvQy9DO1NBcENZLGdCQUFnQjs7O0lBQ3pCLDZCQUFtRDs7Ozs7SUFFbkQsd0JBQXdEOztJQUR4RCxxQ0FBMEQ7O0lBRzFELDJDQUFpQzs7QUFnQ3JDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIERhdGFPYmplY3QsIEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVNldHRpbmcgfSBmcm9tIFwiLi9WYXJpYWJsZVNldHRpbmdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZWREYXRhT2JqZWN0IGV4dGVuZHMgRGF0YU9iamVjdCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuVmFsdWVkRGF0YU9iamVjdFwiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBWYWx1ZWREYXRhT2JqZWN0LkNscl9UeXBlX0lEO1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBNRVhUQUc6IHN0cmluZyA9ICd3Zi5WYWx1ZWREYXRhT2JqZWN0JztcclxuXHJcbiAgICB2YXJpYWJsZVNldHRpbmc6IFZhcmlhYmxlU2V0dGluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBHZXRFeHRlbnNpb25FbGVtZW50czRDb252ZXJ0VG8oKTogRXh0ZW5zaW9uRWxlbWVudFtdIHtcclxuICAgICAgICBsZXQgbGlzdCA9IHN1cGVyLkdldEV4dGVuc2lvbkVsZW1lbnRzNENvbnZlcnRUbygpO1xyXG4gICAgICAgIGlmICh0aGlzLnZhcmlhYmxlU2V0dGluZyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFyaWFibGVTZXR0aW5nLk1leFRhZyA9IFZhbHVlZERhdGFPYmplY3QuTUVYVEFHO1xyXG4gICAgICAgICAgICBsaXN0LnB1c2godGhpcy52YXJpYWJsZVNldHRpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBTZXRFeHRlbnNpb25FbGVtZW50czRMb2FkRnJvbShleHRlbnNpb25FbGVtZW50czogRXh0ZW5zaW9uRWxlbWVudFtdKSB7XHJcbiAgICAgICAgc3VwZXIuU2V0RXh0ZW5zaW9uRWxlbWVudHM0TG9hZEZyb20oZXh0ZW5zaW9uRWxlbWVudHMpO1xyXG4gICAgICAgIGZvciAobGV0IGV4dGVuc2lvbkVsZW1lbnQgb2YgZXh0ZW5zaW9uRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKGV4dGVuc2lvbkVsZW1lbnQuTWV4VGFnICE9PSBWYWx1ZWREYXRhT2JqZWN0Lk1FWFRBRylcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGV4dGVuc2lvbkVsZW1lbnQuQ2xyVHlwZUlEKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZhcmlhYmxlU2V0dGluZy5DbHJfVHlwZV9JRDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhcmlhYmxlU2V0dGluZyA9IChleHRlbnNpb25FbGVtZW50IGFzIFZhcmlhYmxlU2V0dGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgTmV3SW5zdGFuY2UoKTogVmFsdWVkRGF0YU9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZWREYXRhT2JqZWN0KHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBWYWx1ZWREYXRhT2JqZWN0KG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==