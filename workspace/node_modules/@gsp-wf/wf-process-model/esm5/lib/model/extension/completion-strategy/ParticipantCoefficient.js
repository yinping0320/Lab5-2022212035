/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelHelper, MexElement } from "@edp-pmf/bpmn-model";
var ParticipantCoefficient = /** @class */ (function (_super) {
    tslib_1.__extends(ParticipantCoefficient, _super);
    function ParticipantCoefficient(model, id, name, code, type, mustCompleted, coefficient) {
        var _this = _super.call(this, model) || this;
        _this.participantId = id || '';
        _this.participantName = name || '';
        _this.participantCode = code || '';
        _this.participantType = type || '';
        _this.mustCompleted = mustCompleted || true;
        _this.coefficient = coefficient || 0;
        return _this;
    }
    Object.defineProperty(ParticipantCoefficient.prototype, "ParticipantId", {
        //序列化内容
        get: 
        //序列化内容
        /**
         * @return {?}
         */
        function () { return this.participantId; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.participantId = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticipantCoefficient.prototype, "ParticipantName", {
        get: /**
         * @return {?}
         */
        function () { return this.participantName; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.participantName = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticipantCoefficient.prototype, "ParticipantCode", {
        get: /**
         * @return {?}
         */
        function () { return this.participantCode; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.participantCode = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticipantCoefficient.prototype, "ParticipantType", {
        get: /**
         * @return {?}
         */
        function () { return this.participantType; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.participantType = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticipantCoefficient.prototype, "MustCompleted", {
        get: /**
         * @return {?}
         */
        function () { return this.mustCompleted; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.mustCompleted = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticipantCoefficient.prototype, "Coefficient", {
        get: /**
         * @return {?}
         */
        function () { return this.coefficient; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.coefficient = value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    ParticipantCoefficient.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    ParticipantCoefficient.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantId', this.ParticipantId);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantName', this.ParticipantName);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantCode', this.ParticipantCode);
        BpmnModelHelper.SetAttributeValue(obj, 'ParticipantType', this.ParticipantType);
        BpmnModelHelper.SetAttributeValue(obj, 'MustCompleted', this.MustCompleted);
        BpmnModelHelper.SetAttributeValue(obj, 'Coefficient', this.Coefficient);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ParticipantCoefficient.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.ParticipantId = obj.ParticipantId;
        this.ParticipantCode = obj.ParticipantCode;
        this.ParticipantName = obj.ParticipantName;
        this.ParticipantType = obj.ParticipantType;
        this.MustCompleted = obj.MustCompleted;
        this.Coefficient = obj.Coefficient;
    };
    return ParticipantCoefficient;
}(MexElement));
export { ParticipantCoefficient };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantId;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantName;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantCode;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.participantType;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.mustCompleted;
    /**
     * @type {?}
     * @private
     */
    ParticipantCoefficient.prototype.coefficient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRDb2VmZmljaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9leHRlbnNpb24vY29tcGxldGlvbi1zdHJhdGVneS9QYXJ0aWNpcGFudENvZWZmaWNpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFhLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU3RTtJQUE0QyxrREFBVTtJQVFsRCxnQ0FBWSxLQUFnQixFQUFFLEVBQVcsRUFBRSxJQUFhLEVBQUUsSUFBYSxFQUFFLElBQWEsRUFBRSxhQUF1QixFQUFFLFdBQW9CO1FBQXJJLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBT2Y7UUFORyxLQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDOUIsS0FBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2xDLEtBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxLQUFJLENBQUMsZUFBZSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbEMsS0FBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLElBQUksSUFBSSxDQUFDO1FBQzNDLEtBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxJQUFJLENBQUMsQ0FBQzs7SUFDeEMsQ0FBQztJQUdELHNCQUFJLGlEQUFhO1FBRGpCLE9BQU87Ozs7OztRQUNQLGNBQXNCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Ozs7O1FBQ2xELFVBQWtCLEtBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQURkO0lBR2xELHNCQUFJLG1EQUFlOzs7O1FBQW5CLGNBQXdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Ozs7O1FBQ3RE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bnQgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnRpY2lwYW50Q29lZmZpY2llbnQgZXh0ZW5kcyBNZXhFbGVtZW50IHtcclxuICAgIHByaXZhdGUgcGFydGljaXBhbnRJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBwYXJ0aWNpcGFudE5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgcGFydGljaXBhbnRDb2RlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHBhcnRpY2lwYW50VHlwZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBtdXN0Q29tcGxldGVkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBjb2VmZmljaWVudDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwsIGlkPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nLCBjb2RlPzogc3RyaW5nLCB0eXBlPzogc3RyaW5nLCBtdXN0Q29tcGxldGVkPzogYm9vbGVhbiwgY29lZmZpY2llbnQ/OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudElkID0gaWQgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudE5hbWUgPSBuYW1lIHx8ICcnO1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRDb2RlID0gY29kZSB8fCAnJztcclxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50VHlwZSA9IHR5cGUgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5tdXN0Q29tcGxldGVkID0gbXVzdENvbXBsZXRlZCB8fCB0cnVlO1xyXG4gICAgICAgIHRoaXMuY29lZmZpY2llbnQgPSBjb2VmZmljaWVudCB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5bqP5YiX5YyW5YaF5a65XHJcbiAgICBnZXQgUGFydGljaXBhbnRJZCgpIHsgcmV0dXJuIHRoaXMucGFydGljaXBhbnRJZDsgfVxyXG4gICAgc2V0IFBhcnRpY2lwYW50SWQodmFsdWU6IHN0cmluZykgeyB0aGlzLnBhcnRpY2lwYW50SWQgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBQYXJ0aWNpcGFudE5hbWUoKSB7IHJldHVybiB0aGlzLnBhcnRpY2lwYW50TmFtZTsgfVxyXG4gICAgc2V0IFBhcnRpY2lwYW50TmFtZSh2YWx1ZTogc3RyaW5nKSB7IHRoaXMucGFydGljaXBhbnROYW1lID0gdmFsdWU7IH1cclxuXHJcbiAgICBnZXQgUGFydGljaXBhbnRDb2RlKCkgeyByZXR1cm4gdGhpcy5wYXJ0aWNpcGFudENvZGU7IH1cclxuICAgIHNldCBQYXJ0aWNpcGFudENvZGUodmFsdWU6IHN0cmluZykgeyB0aGlzLnBhcnRpY2lwYW50Q29kZSA9IHZhbHVlOyB9XHJcblxyXG4gICAgZ2V0IFBhcnRpY2lwYW50VHlwZSgpIHsgcmV0dXJuIHRoaXMucGFydGljaXBhbnRUeXBlOyB9XHJcbiAgICBzZXQgUGFydGljaXBhbnRUeXBlKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5wYXJ0aWNpcGFudFR5cGUgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBNdXN0Q29tcGxldGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5tdXN0Q29tcGxldGVkOyB9XHJcbiAgICBzZXQgTXVzdENvbXBsZXRlZCh2YWx1ZTogYm9vbGVhbikgeyB0aGlzLm11c3RDb21wbGV0ZWQgPSB2YWx1ZTsgfVxyXG5cclxuICAgIGdldCBDb2VmZmljaWVudCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5jb2VmZmljaWVudDsgfVxyXG4gICAgc2V0IENvZWZmaWNpZW50KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5jb2VmZmljaWVudCA9IHZhbHVlOyB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnUGFydGljaXBhbnRJZCcsIHRoaXMuUGFydGljaXBhbnRJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ1BhcnRpY2lwYW50TmFtZScsIHRoaXMuUGFydGljaXBhbnROYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCAnUGFydGljaXBhbnRDb2RlJywgdGhpcy5QYXJ0aWNpcGFudENvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdQYXJ0aWNpcGFudFR5cGUnLCB0aGlzLlBhcnRpY2lwYW50VHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ011c3RDb21wbGV0ZWQnLCB0aGlzLk11c3RDb21wbGV0ZWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdDb2VmZmljaWVudCcsIHRoaXMuQ29lZmZpY2llbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLlBhcnRpY2lwYW50SWQgPSBvYmouUGFydGljaXBhbnRJZDtcclxuICAgICAgICB0aGlzLlBhcnRpY2lwYW50Q29kZSA9IG9iai5QYXJ0aWNpcGFudENvZGU7XHJcbiAgICAgICAgdGhpcy5QYXJ0aWNpcGFudE5hbWUgPSBvYmouUGFydGljaXBhbnROYW1lO1xyXG4gICAgICAgIHRoaXMuUGFydGljaXBhbnRUeXBlID0gb2JqLlBhcnRpY2lwYW50VHlwZTtcclxuICAgICAgICB0aGlzLk11c3RDb21wbGV0ZWQgPSBvYmouTXVzdENvbXBsZXRlZDtcclxuICAgICAgICB0aGlzLkNvZWZmaWNpZW50ID0gb2JqLkNvZWZmaWNpZW50O1xyXG4gICAgfVxyXG59Il19