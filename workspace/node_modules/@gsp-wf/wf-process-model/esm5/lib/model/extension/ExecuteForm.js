/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../parameter/WFActualParameter";
var ExecuteForm = /** @class */ (function (_super) {
    tslib_1.__extends(ExecuteForm, _super);
    function ExecuteForm(model, id, name, actualParameters) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ExecuteForm.Clr_Type_ID;
        _this.Id = id || '';
        _this.Name = name || '';
        _this.ActualParameters = actualParameters || [];
        return _this;
    }
    /**
     * @return {?}
     */
    ExecuteForm.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ExecuteForm(this.Model);
    };
    /**
     * @protected
     * @return {?}
     */
    ExecuteForm.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.FormType = null;
        this.Id = null;
        this.Name = null;
        this.ActualParameters = [];
        this.ComponentId = null;
        this.formFormatId = null;
        this.formatConfigId = null;
        this.TerminalType = TerminalType.PC;
    };
    /**
     * @return {?}
     */
    ExecuteForm.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "FormType", this.FormType);
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentId", this.ComponentId);
        BpmnModelHelper.SetAttributeValue(obj, "TerminalType", this.TerminalType);
        BpmnModelHelper.SetAttributeValue(obj, "FormFormatId", this.formFormatId);
        BpmnModelHelper.SetAttributeValue(obj, "FormatConfigId", this.formatConfigId);
        /** @type {?} */
        var actualParametersElements = [];
        if (this.ActualParameters !== null && this.ActualParameters.length > 0) {
            this.ActualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ExecuteForm.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.FormType = obj.FormType;
        this.Id = obj.Id;
        this.Name = obj.Name;
        this.ComponentId = obj.ComponentId;
        this.TerminalType = (/** @type {?} */ (obj.TerminalType));
        this.formFormatId = ExtensionMethod.GetAttributeValue4String(obj, "FormFormatId");
        this.formatConfigId = ExtensionMethod.GetAttributeValue4String(obj, "FormatConfigId");
        /** @type {?} */
        var actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var actualParameter = new ActualParameter(_this.Model);
                actualParameter.LoadFromJsonObject(item);
                _this.ActualParameters.push(actualParameter);
            }));
        }
    };
    /**
     * @return {?}
     */
    ExecuteForm.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var executeForm = new ExecuteForm(this.Model);
        executeForm.Id = BpmnModelHelper.GenerateElementId();
        executeForm.Name = this.Name;
        executeForm.FormType = this.FormType;
        executeForm.formFormatId = this.formFormatId;
        executeForm.formatConfigId = this.formatConfigId;
        executeForm.TerminalType = this.TerminalType;
        executeForm.ComponentId = this.ComponentId;
        executeForm.ActualParameters = new Array();
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.ActualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    /** @type {?} */
                    var parameter = p.clone();
                    executeForm.ActualParameters.push(parameter);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return executeForm;
    };
    ExecuteForm.Clr_Type_ID = "wf.ExecuteForm";
    return ExecuteForm;
}(ExtensionElement));
export { ExecuteForm };
if (false) {
    /** @type {?} */
    ExecuteForm.Clr_Type_ID;
    /** @type {?} */
    ExecuteForm.prototype.ClrTypeID;
    /** @type {?} */
    ExecuteForm.prototype.FormType;
    /** @type {?} */
    ExecuteForm.prototype.Id;
    /** @type {?} */
    ExecuteForm.prototype.Name;
    /** @type {?} */
    ExecuteForm.prototype.ComponentId;
    /** @type {?} */
    ExecuteForm.prototype.TerminalType;
    /** @type {?} */
    ExecuteForm.prototype.ActualParameters;
    /** @type {?} */
    ExecuteForm.prototype.formFormatId;
    /** @type {?} */
    ExecuteForm.prototype.formatConfigId;
}
BpmnModelHelper.RegisterElementType(new ExecuteForm(new BpmnModel()));
/** @enum {string} */
var TerminalType = {
    PC: 'PC',
    MOBILE: 'MOBILE',
};
export { TerminalType };
//# sourceMappingURL=data:application/json;base64,