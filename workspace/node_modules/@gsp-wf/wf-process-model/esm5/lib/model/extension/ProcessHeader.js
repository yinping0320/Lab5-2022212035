/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
import { StartMode } from "./StartMode";
var ProcessHeader = /** @class */ (function (_super) {
    tslib_1.__extends(ProcessHeader, _super);
    function ProcessHeader(model, bizDefKey, bizObjId, bizDefName, startMode) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = "wf.ProcessHeader";
        _this.BizDefKey = bizDefKey || '';
        _this.BizObjId = bizObjId || '';
        _this.BizDefName = bizDefName || '';
        _this.allowPreAssign = false;
        _this.enablePriority = false;
        _this.enableWholeOrderRetrieve = false;
        _this.startMode = startMode || StartMode.DIRECT;
        return _this;
    }
    /**
     * @return {?}
     */
    ProcessHeader.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ProcessHeader(this.Model);
    };
    /**
     * @protected
     * @return {?}
     */
    ProcessHeader.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.BizDefKey = null;
        this.BizObjId = null;
        this.BizDefName = null;
        this.allowPreAssign = false;
        this.enablePriority = false;
        this.enableWholeOrderRetrieve = false;
    };
    /**
     * @return {?}
     */
    ProcessHeader.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "BizDefKey", this.BizDefKey);
        BpmnModelHelper.SetAttributeValue(obj, "BizObjId", this.BizObjId);
        BpmnModelHelper.SetAttributeValue(obj, "BizDefName", this.BizDefName);
        BpmnModelHelper.SetAttributeValue(obj, "AllowPreAssign", this.allowPreAssign);
        BpmnModelHelper.SetAttributeValue(obj, "EnablePriority", this.enablePriority);
        BpmnModelHelper.SetAttributeValue(obj, "EnableWholeOrderRetrieve", this.enableWholeOrderRetrieve);
        BpmnModelHelper.SetAttributeValue(obj, "StartMode", this.startMode);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessHeader.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.BizDefKey = obj.BizDefKey;
        this.BizObjId = obj.BizObjId;
        this.BizDefName = obj.BizDefName;
        this.allowPreAssign = obj.AllowPreAssign;
        this.enablePriority = obj.EnablePriority;
        this.enableWholeOrderRetrieve = obj.EnableWholeOrderRetrieve;
        if (obj.StartMode) {
            this.startMode = obj.StartMode;
        }
        else if (obj.AccessLevel) {
            switch (obj.AccessLevel) {
                case 'PUBLIC':
                    this.startMode = StartMode.DIRECT;
                    break;
                case 'PROTECTED':
                    this.startMode = StartMode.EXTERNAL_PROCESS;
                    break;
                case 'PRIVATE':
                    this.startMode = StartMode.SUB_PROCESS;
                    break;
            }
        }
    };
    return ProcessHeader;
}(ExtensionElement));
export { ProcessHeader };
if (false) {
    /** @type {?} */
    ProcessHeader.prototype.ClrTypeID;
    /** @type {?} */
    ProcessHeader.prototype.BizDefKey;
    /** @type {?} */
    ProcessHeader.prototype.BizDefName;
    /** @type {?} */
    ProcessHeader.prototype.BizObjId;
    /** @type {?} */
    ProcessHeader.prototype.allowPreAssign;
    /** @type {?} */
    ProcessHeader.prototype.enablePriority;
    /** @type {?} */
    ProcessHeader.prototype.enableWholeOrderRetrieve;
    /** @type {?} */
    ProcessHeader.prototype.startMode;
}
BpmnModelHelper.RegisterElementType(new ProcessHeader(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvY2Vzc0hlYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9leHRlbnNpb24vUHJvY2Vzc0hlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4QztJQUFtQyx5Q0FBZ0I7SUFlL0MsdUJBQVksS0FBZ0IsRUFBRSxTQUFrQixFQUFFLFFBQWlCLEVBQUUsVUFBbUIsRUFBRSxTQUFxQjtRQUEvRyxZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQVNmO1FBdkJELGVBQVMsR0FBVyxrQkFBa0IsQ0FBQztRQWdCbkMsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ2pDLEtBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUMvQixLQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDbkMsS0FBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsS0FBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsS0FBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQztRQUN0QyxLQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDOztJQUNuRCxDQUFDOzs7O0lBckJELG1DQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBcUJTLDJDQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7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bXBvcnQgeyBCcG1uTW9kZWwsIEJwbW5Nb2RlbEhlbHBlciwgRXh0ZW5zaW9uRWxlbWVudCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IFN0YXJ0TW9kZSB9IGZyb20gXCIuL1N0YXJ0TW9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb2Nlc3NIZWFkZXIgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuXHJcbiAgICBDbHJUeXBlSUQ6IHN0cmluZyA9IFwid2YuUHJvY2Vzc0hlYWRlclwiO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFByb2Nlc3NIZWFkZXIge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvY2Vzc0hlYWRlcih0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBCaXpEZWZLZXk6IHN0cmluZztcclxuICAgIEJpekRlZk5hbWU6IHN0cmluZztcclxuICAgIEJpek9iaklkOiBzdHJpbmc7XHJcbiAgICBhbGxvd1ByZUFzc2lnbjogYm9vbGVhbjtcclxuICAgIGVuYWJsZVByaW9yaXR5OiBib29sZWFuO1xyXG4gICAgZW5hYmxlV2hvbGVPcmRlclJldHJpZXZlOiBib29sZWFuO1xyXG4gICAgc3RhcnRNb2RlOiBTdGFydE1vZGU7XHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsLCBiaXpEZWZLZXk/OiBzdHJpbmcsIGJpek9iaklkPzogc3RyaW5nLCBiaXpEZWZOYW1lPzogc3RyaW5nLCBzdGFydE1vZGU/OiBTdGFydE1vZGUpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcblxyXG4gICAgICAgIHRoaXMuQml6RGVmS2V5ID0gYml6RGVmS2V5IHx8ICcnO1xyXG4gICAgICAgIHRoaXMuQml6T2JqSWQgPSBiaXpPYmpJZCB8fCAnJztcclxuICAgICAgICB0aGlzLkJpekRlZk5hbWUgPSBiaXpEZWZOYW1lIHx8ICcnO1xyXG4gICAgICAgIHRoaXMuYWxsb3dQcmVBc3NpZ24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVuYWJsZVByaW9yaXR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVXaG9sZU9yZGVyUmV0cmlldmUgPSBmYWxzZTsgXHJcbiAgICAgICAgdGhpcy5zdGFydE1vZGUgPSBzdGFydE1vZGUgfHwgU3RhcnRNb2RlLkRJUkVDVDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuQml6RGVmS2V5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLkJpek9iaklkID0gbnVsbDtcclxuICAgICAgICB0aGlzLkJpekRlZk5hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYWxsb3dQcmVBc3NpZ24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVuYWJsZVByaW9yaXR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVXaG9sZU9yZGVyUmV0cmlldmUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJCaXpEZWZLZXlcIiwgdGhpcy5CaXpEZWZLZXkpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQml6T2JqSWRcIiwgdGhpcy5CaXpPYmpJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJCaXpEZWZOYW1lXCIsIHRoaXMuQml6RGVmTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJBbGxvd1ByZUFzc2lnblwiLCB0aGlzLmFsbG93UHJlQXNzaWduKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkVuYWJsZVByaW9yaXR5XCIsIHRoaXMuZW5hYmxlUHJpb3JpdHkpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRW5hYmxlV2hvbGVPcmRlclJldHJpZXZlXCIsIHRoaXMuZW5hYmxlV2hvbGVPcmRlclJldHJpZXZlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlN0YXJ0TW9kZVwiLCB0aGlzLnN0YXJ0TW9kZSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5CaXpEZWZLZXkgPSBvYmouQml6RGVmS2V5O1xyXG4gICAgICAgIHRoaXMuQml6T2JqSWQgPSBvYmouQml6T2JqSWQ7XHJcbiAgICAgICAgdGhpcy5CaXpEZWZOYW1lID0gb2JqLkJpekRlZk5hbWU7XHJcbiAgICAgICAgdGhpcy5hbGxvd1ByZUFzc2lnbiA9IG9iai5BbGxvd1ByZUFzc2lnbjtcclxuICAgICAgICB0aGlzLmVuYWJsZVByaW9yaXR5ID0gb2JqLkVuYWJsZVByaW9yaXR5O1xyXG4gICAgICAgIHRoaXMuZW5hYmxlV2hvbGVPcmRlclJldHJpZXZlID0gb2JqLkVuYWJsZVdob2xlT3JkZXJSZXRyaWV2ZTtcclxuICAgICAgICBpZiAob2JqLlN0YXJ0TW9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0TW9kZSA9IG9iai5TdGFydE1vZGU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvYmouQWNjZXNzTGV2ZWwpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChvYmouQWNjZXNzTGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BVQkxJQyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydE1vZGUgPSBTdGFydE1vZGUuRElSRUNUO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUFJPVEVDVEVEJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0TW9kZSA9IFN0YXJ0TW9kZS5FWFRFUk5BTF9QUk9DRVNTO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUFJJVkFURSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydE1vZGUgPSBTdGFydE1vZGUuU1VCX1BST0NFU1M7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IFByb2Nlc3NIZWFkZXIobmV3IEJwbW5Nb2RlbCgpKSk7Il19