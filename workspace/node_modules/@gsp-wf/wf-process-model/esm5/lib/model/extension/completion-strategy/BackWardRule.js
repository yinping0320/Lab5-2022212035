/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ExtensionElement, BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { TargetRefConstants } from "../../misc/TargetRefConstants";
var BackWardRule = /** @class */ (function (_super) {
    tslib_1.__extends(BackWardRule, _super);
    function BackWardRule(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = BackWardRule.Clr_Type_ID;
        _this.TargetRef = TargetRefConstants.INITIAL_ACTIVITY_ID;
        _this.SelectTargetAble = false;
        _this.WaitReturn = false;
        _this.ResubmitEffect = null;
        _this.DynamicBackWardRuleAble = false;
        _this.SelectTargetList = new Array();
        return _this;
    }
    /**
     * @return {?}
     */
    BackWardRule.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new BackWardRule(this.Model);
    };
    /**
     * @protected
     * @return {?}
     */
    BackWardRule.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    BackWardRule.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "TargetRef", this.TargetRef);
        BpmnModelHelper.SetAttributeValue(obj, "SelectTargetAble", this.SelectTargetAble);
        BpmnModelHelper.SetAttributeValue(obj, "WaitReturn", this.WaitReturn);
        BpmnModelHelper.SetAttributeValue(obj, "ResubmitEffect", this.ResubmitEffect);
        BpmnModelHelper.SetAttributeValue(obj, "DynamicBackWardRuleAble", this.DynamicBackWardRuleAble);
        BpmnModelHelper.SetAttributeValue(obj, "SelectTargetList", this.SelectTargetList);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BackWardRule.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.TargetRef = obj.TargetRef;
        this.SelectTargetAble = obj.SelectTargetAble;
        this.WaitReturn = obj.WaitReturn;
        this.ResubmitEffect = obj.ResubmitEffect;
        this.DynamicBackWardRuleAble = obj.DynamicBackWardRuleAble;
        this.SelectTargetList = obj.SelectTargetList;
    };
    /**
     * @return {?}
     */
    BackWardRule.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var backWardRule = new BackWardRule(this.Model);
        backWardRule.TargetRef = this.TargetRef;
        backWardRule.SelectTargetAble = this.SelectTargetAble;
        backWardRule.WaitReturn = this.WaitReturn;
        backWardRule.ResubmitEffect = this.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = this.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = this.SelectTargetList;
        return backWardRule;
    };
    BackWardRule.Clr_Type_ID = "wf.BackWardRule";
    return BackWardRule;
}(ExtensionElement));
export { BackWardRule };
if (false) {
    /** @type {?} */
    BackWardRule.Clr_Type_ID;
    /** @type {?} */
    BackWardRule.prototype.ClrTypeID;
    /** @type {?} */
    BackWardRule.prototype.TargetRef;
    /** @type {?} */
    BackWardRule.prototype.SelectTargetAble;
    /** @type {?} */
    BackWardRule.prototype.WaitReturn;
    /** @type {?} */
    BackWardRule.prototype.ResubmitEffect;
    /** @type {?} */
    BackWardRule.prototype.DynamicBackWardRuleAble;
    /** @type {?} */
    BackWardRule.prototype.SelectTargetList;
}
BpmnModelHelper.RegisterElementType(new BackWardRule(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFja1dhcmRSdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9jb21wbGV0aW9uLXN0cmF0ZWd5L0JhY2tXYXJkUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHbkU7SUFBa0Msd0NBQWdCO0lBTzlDLHNCQUFZLEtBQWdCO1FBQTVCLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBT2Y7UUFiUSxlQUFTLEdBQVcsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQU9sRCxLQUFJLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDO1FBQ3hELEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsS0FBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsS0FBSSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztRQUNyQyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQzs7SUFDaEQsQ0FBQzs7OztJQVhELGtDQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7O0lBa0JTLDBDQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUNELDBDQUFtQjs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUNyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsRixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSx5QkFBeUIsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNoRyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCx5Q0FBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDO1FBQ3pDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsdUJBQXVCLENBQUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqRCxDQUFDOzs7O0lBRUQsNEJBQUs7OztJQUFMOztZQUNVLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pELFlBQVksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QyxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQ3RELFlBQVksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxQyxZQUFZLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDbEQsWUFBWSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztRQUNwRSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQ3RELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUF6RE0sd0JBQVcsR0FBVyxpQkFBaUIsQ0FBQztJQTBEbkQsbUJBQUM7Q0FBQSxBQTNERCxDQUFrQyxnQkFBZ0IsR0EyRGpEO1NBM0RZLFlBQVk7OztJQUNyQix5QkFBK0M7O0lBQy9DLGlDQUFzRDs7SUFldEQsaUNBQWtCOztJQUNsQix3Q0FBMEI7O0lBQzFCLGtDQUFvQjs7SUFDcEIsc0NBQStCOztJQUMvQiwrQ0FBaUM7O0lBQ2pDLHdDQUErQjs7QUFzQ25DLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvbkVsZW1lbnQsIEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgVGFyZ2V0UmVmQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL21pc2MvVGFyZ2V0UmVmQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFJlc3VibWl0RWZmZWN0IH0gZnJvbSBcIi4vUmVzdWJtaXRFZmZlY3RcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYWNrV2FyZFJ1bGUgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5CYWNrV2FyZFJ1bGVcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gQmFja1dhcmRSdWxlLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IEJhY2tXYXJkUnVsZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCYWNrV2FyZFJ1bGUodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuVGFyZ2V0UmVmID0gVGFyZ2V0UmVmQ29uc3RhbnRzLklOSVRJQUxfQUNUSVZJVFlfSUQ7XHJcbiAgICAgICAgdGhpcy5TZWxlY3RUYXJnZXRBYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5XYWl0UmV0dXJuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5SZXN1Ym1pdEVmZmVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5EeW5hbWljQmFja1dhcmRSdWxlQWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuU2VsZWN0VGFyZ2V0TGlzdCA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgVGFyZ2V0UmVmOiBzdHJpbmc7XHJcbiAgICBTZWxlY3RUYXJnZXRBYmxlOiBib29sZWFuO1xyXG4gICAgV2FpdFJldHVybjogYm9vbGVhbjtcclxuICAgIFJlc3VibWl0RWZmZWN0OiBSZXN1Ym1pdEVmZmVjdDtcclxuICAgIER5bmFtaWNCYWNrV2FyZFJ1bGVBYmxlOiBib29sZWFuO1xyXG4gICAgU2VsZWN0VGFyZ2V0TGlzdDpBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgIH1cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiVGFyZ2V0UmVmXCIsIHRoaXMuVGFyZ2V0UmVmKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlNlbGVjdFRhcmdldEFibGVcIiwgdGhpcy5TZWxlY3RUYXJnZXRBYmxlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIldhaXRSZXR1cm5cIiwgdGhpcy5XYWl0UmV0dXJuKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlJlc3VibWl0RWZmZWN0XCIsIHRoaXMuUmVzdWJtaXRFZmZlY3QpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRHluYW1pY0JhY2tXYXJkUnVsZUFibGVcIiwgdGhpcy5EeW5hbWljQmFja1dhcmRSdWxlQWJsZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJTZWxlY3RUYXJnZXRMaXN0XCIsIHRoaXMuU2VsZWN0VGFyZ2V0TGlzdCk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5UYXJnZXRSZWYgPSBvYmouVGFyZ2V0UmVmO1xyXG4gICAgICAgIHRoaXMuU2VsZWN0VGFyZ2V0QWJsZSA9IG9iai5TZWxlY3RUYXJnZXRBYmxlO1xyXG4gICAgICAgIHRoaXMuV2FpdFJldHVybiA9IG9iai5XYWl0UmV0dXJuO1xyXG4gICAgICAgIHRoaXMuUmVzdWJtaXRFZmZlY3QgPSBvYmouUmVzdWJtaXRFZmZlY3Q7XHJcbiAgICAgICAgdGhpcy5EeW5hbWljQmFja1dhcmRSdWxlQWJsZSA9IG9iai5EeW5hbWljQmFja1dhcmRSdWxlQWJsZTtcclxuICAgICAgICB0aGlzLlNlbGVjdFRhcmdldExpc3QgPSBvYmouU2VsZWN0VGFyZ2V0TGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBCYWNrV2FyZFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IGJhY2tXYXJkUnVsZSA9IG5ldyBCYWNrV2FyZFJ1bGUodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgYmFja1dhcmRSdWxlLlRhcmdldFJlZiA9IHRoaXMuVGFyZ2V0UmVmO1xyXG4gICAgICAgIGJhY2tXYXJkUnVsZS5TZWxlY3RUYXJnZXRBYmxlID0gdGhpcy5TZWxlY3RUYXJnZXRBYmxlO1xyXG4gICAgICAgIGJhY2tXYXJkUnVsZS5XYWl0UmV0dXJuID0gdGhpcy5XYWl0UmV0dXJuO1xyXG4gICAgICAgIGJhY2tXYXJkUnVsZS5SZXN1Ym1pdEVmZmVjdCA9IHRoaXMuUmVzdWJtaXRFZmZlY3Q7XHJcbiAgICAgICAgYmFja1dhcmRSdWxlLkR5bmFtaWNCYWNrV2FyZFJ1bGVBYmxlID0gdGhpcy5EeW5hbWljQmFja1dhcmRSdWxlQWJsZTtcclxuICAgICAgICBiYWNrV2FyZFJ1bGUuU2VsZWN0VGFyZ2V0TGlzdCA9IHRoaXMuU2VsZWN0VGFyZ2V0TGlzdDtcclxuICAgICAgICByZXR1cm4gYmFja1dhcmRSdWxlO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBCYWNrV2FyZFJ1bGUobmV3IEJwbW5Nb2RlbCgpKSk7Il19