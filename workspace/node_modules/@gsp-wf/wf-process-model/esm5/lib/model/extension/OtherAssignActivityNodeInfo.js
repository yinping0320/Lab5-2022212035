/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { Condition } from "./condition-expression/Condition";
var OtherAssignActivityNodeInfo = /** @class */ (function (_super) {
    tslib_1.__extends(OtherAssignActivityNodeInfo, _super);
    function OtherAssignActivityNodeInfo(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = OtherAssignActivityNodeInfo.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    OtherAssignActivityNodeInfo.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    OtherAssignActivityNodeInfo.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "ActivityDefinitionId", this.activityDefinitionId);
        BpmnModelHelper.SetAttributeValue(obj, "Required", this.required);
        if (this.condition) {
            BpmnModelHelper.SetAttributeValue(obj, "Condition", this.condition.ConvertToJsonObject());
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    OtherAssignActivityNodeInfo.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.activityDefinitionId = ExtensionMethod.GetAttributeValue4String(obj, "ActivityDefinitionId");
        this.required = ExtensionMethod.GetAttributeValue4Boolean(obj, "Required");
        /** @type {?} */
        var conditionElement = ExtensionMethod.GetAttributeValue(obj, 'Condition');
        if (conditionElement) {
            /** @type {?} */
            var condition = new Condition(this.Model);
            condition.LoadFromJsonObject(conditionElement);
            this.condition = condition;
        }
    };
    /**
     * @return {?}
     */
    OtherAssignActivityNodeInfo.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var otherAssignActivityNodeInfo = new OtherAssignActivityNodeInfo(this.Model);
        otherAssignActivityNodeInfo.activityDefinitionId = this.activityDefinitionId;
        if (this.condition) {
            otherAssignActivityNodeInfo.condition = this.condition.clone();
        }
        otherAssignActivityNodeInfo.required = this.required;
        return otherAssignActivityNodeInfo;
    };
    /**
     * @return {?}
     */
    OtherAssignActivityNodeInfo.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new OtherAssignActivityNodeInfo(this.Model);
    };
    OtherAssignActivityNodeInfo.Clr_Type_ID = "wf.OtherAssignActivityNodeInfo";
    return OtherAssignActivityNodeInfo;
}(ExtensionElement));
export { OtherAssignActivityNodeInfo };
if (false) {
    /** @type {?} */
    OtherAssignActivityNodeInfo.Clr_Type_ID;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.ClrTypeID;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.activityDefinitionId;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.condition;
    /** @type {?} */
    OtherAssignActivityNodeInfo.prototype.required;
}
BpmnModelHelper.RegisterElementType(new OtherAssignActivityNodeInfo(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9PdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFN0Q7SUFBaUQsdURBQWdCO0lBVzdELHFDQUFZLEtBQWdCO1FBQTVCLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBQ2Y7UUFWUSxlQUFTLEdBQVcsMkJBQTJCLENBQUMsV0FBVyxDQUFDOztJQVVyRSxDQUFDOzs7OztJQUVTLHlEQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELHlEQUFtQjs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzFGLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRSxJQUFHLElBQUksQ0FBQyxTQUFTLEVBQUM7WUFDZCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztTQUM3RjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCx3REFBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzs7WUFDckUsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUM7UUFDNUUsSUFBSSxnQkFBZ0IsRUFBRTs7Z0JBQ1osU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDM0MsU0FBUyxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDOUI7SUFDTCxDQUFDOzs7O0lBRUQsMkNBQUs7OztJQUFMOztZQUNVLDJCQUEyQixHQUFHLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvRSwyQkFBMkIsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUM7UUFDN0UsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLDJCQUEyQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2xFO1FBQ0QsMkJBQTJCLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDckQsT0FBTywyQkFBMkIsQ0FBQztJQUN2QyxDQUFDOzs7O0lBRUQsaURBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLDJCQUEyQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBcERNLHVDQUFXLEdBQVcsZ0NBQWdDLENBQUM7SUFxRGxFLGtDQUFDO0NBQUEsQUF2REQsQ0FBaUQsZ0JBQWdCLEdBdURoRTtTQXZEWSwyQkFBMkI7OztJQUVwQyx3Q0FBOEQ7O0lBQzlELGdEQUFxRTs7SUFFckUsMkRBQTZCOztJQUU3QixnREFBcUI7O0lBRXJCLCtDQUFrQjs7QUErQ3RCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLDJCQUEyQixDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEV4dGVuc2lvbkVsZW1lbnQsIEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IENvbmRpdGlvbiB9IGZyb20gXCIuL2NvbmRpdGlvbi1leHByZXNzaW9uL0NvbmRpdGlvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG5cclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5PdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm9cIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIGFjdGl2aXR5RGVmaW5pdGlvbklkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uZGl0aW9uOiBDb25kaXRpb247XHJcblxyXG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0aXZpdHlEZWZpbml0aW9uSWRcIiwgdGhpcy5hY3Rpdml0eURlZmluaXRpb25JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJSZXF1aXJlZFwiLCB0aGlzLnJlcXVpcmVkKTtcclxuICAgICAgICBpZih0aGlzLmNvbmRpdGlvbil7XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29uZGl0aW9uXCIsIHRoaXMuY29uZGl0aW9uLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eURlZmluaXRpb25JZCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkFjdGl2aXR5RGVmaW5pdGlvbklkXCIpO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZWQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0Qm9vbGVhbihvYmosIFwiUmVxdWlyZWRcIik7XHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uRWxlbWVudCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdDb25kaXRpb24nKTtcclxuICAgICAgICBpZiAoY29uZGl0aW9uRWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSBuZXcgQ29uZGl0aW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgICAgICBjb25kaXRpb24uTG9hZEZyb21Kc29uT2JqZWN0KGNvbmRpdGlvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvIHtcclxuICAgICAgICBjb25zdCBvdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8gPSBuZXcgT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIG90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mby5hY3Rpdml0eURlZmluaXRpb25JZCA9IHRoaXMuYWN0aXZpdHlEZWZpbml0aW9uSWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIG90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mby5jb25kaXRpb24gPSB0aGlzLmNvbmRpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm8ucmVxdWlyZWQgPSB0aGlzLnJlcXVpcmVkO1xyXG4gICAgICAgIHJldHVybiBvdGhlckFzc2lnbkFjdGl2aXR5Tm9kZUluZm87XHJcbiAgICB9XHJcblxyXG4gICAgTmV3SW5zdGFuY2UoKTogT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvIHtcclxuICAgICAgICByZXR1cm4gbmV3IE90aGVyQXNzaWduQWN0aXZpdHlOb2RlSW5mbyh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgT3RoZXJBc3NpZ25BY3Rpdml0eU5vZGVJbmZvKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==