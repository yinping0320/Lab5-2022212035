/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { MexExpressionImpl } from "../../mex/MexExpressionImpl";
import { ConditionType } from "./ConditionType";
import { ConditionValueVersion } from "./ConditionValueVersion";
var SemanticExpression = /** @class */ (function (_super) {
    tslib_1.__extends(SemanticExpression, _super);
    function SemanticExpression(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = SemanticExpression.Clr_Type_ID;
        _this._value = '';
        _this.valueVersion = ConditionValueVersion.Unsure;
        _this.type = ConditionType.CONDITION;
        return _this;
    }
    /**
     * @return {?}
     */
    SemanticExpression.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new SemanticExpression(this.Model);
    };
    Object.defineProperty(SemanticExpression.prototype, "ConditionType", {
        get: /**
         * @return {?}
         */
        function () { return this.type; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.type = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SemanticExpression.prototype, "Value", {
        get: /**
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._value = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SemanticExpression.prototype, "ValueVersion", {
        get: /**
         * @return {?}
         */
        function () { return this.valueVersion; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.valueVersion = value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SemanticExpression.prototype.ToString = /**
     * @return {?}
     */
    function () {
        return "Condition[value='" + this._value + "'" + ", type=" + this.type + "]";
    };
    /**
     * @protected
     * @return {?}
     */
    SemanticExpression.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.Value = '';
    };
    /**
     * @return {?}
     */
    SemanticExpression.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "ConditionType", this.ConditionType);
        BpmnModelHelper.SetAttributeValue(obj, "Value", this.Value);
        BpmnModelHelper.SetAttributeValue(obj, "ValueVersion", this.ValueVersion);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SemanticExpression.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.ConditionType = obj.ConditionType;
        this.Value = obj.Value;
        this.ValueVersion = obj.ValueVersion;
    };
    /**
     * @return {?}
     */
    SemanticExpression.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var condition = new SemanticExpression(this.Model);
        condition.Value = this.Value;
        condition.ValueVersion = this.valueVersion;
        condition.ConditionType = this.ConditionType;
        return condition;
    };
    SemanticExpression.Clr_Type_ID = 'wf.SemanticExpression';
    return SemanticExpression;
}(MexExpressionImpl));
export { SemanticExpression };
if (false) {
    /** @type {?} */
    SemanticExpression.Clr_Type_ID;
    /** @type {?} */
    SemanticExpression.prototype.ClrTypeID;
    /**
     * @type {?}
     * @private
     */
    SemanticExpression.prototype._value;
    /**
     * @type {?}
     * @private
     */
    SemanticExpression.prototype.valueVersion;
    /**
     * @type {?}
     * @private
     */
    SemanticExpression.prototype.type;
}
BpmnModelHelper.RegisterElementType(new SemanticExpression(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VtYW50aWNFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9jb25kaXRpb24tZXhwcmVzc2lvbi9TZW1hbnRpY0V4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVoRTtJQUF3Qyw4Q0FBaUI7SUFZckQsNEJBQVksS0FBZ0I7UUFBNUIsWUFDSSxrQkFBTSxLQUFLLENBQUMsU0FDZjtRQVpELGVBQVMsR0FBVyxrQkFBa0IsQ0FBQyxXQUFXLENBQUM7UUFNM0MsWUFBTSxHQUFXLEVBQUUsQ0FBQztRQUNwQixrQkFBWSxHQUEwQixxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDbkUsVUFBSSxHQUFrQixhQUFhLENBQUMsU0FBUyxDQUFDOztJQUl0RCxDQUFDOzs7O0lBVkQsd0NBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBVUQsc0JBQUksNkNBQWE7Ozs7UUFBakIsY0FBcUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7Ozs7UUFDeEQsVUFBa0IsS0FBb0IsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQUROO0lBR3hELHNCQUFJLHFDQUFLOzs7O1FBQVQsY0FBc0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7Ozs7UUFDM0MsVUFBVSxLQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7T0FETjtJQUczQyxzQkFBSSw0Q0FBWTs7OztRQUFoQixjQUE0QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOzs7OztRQUN2RSxVQUFpQixLQUE0QixJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzs7O09BRE47Ozs7SUFHdkUscUNBQVE7OztJQUFSO1FBQ0ksT0FBTyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDakYsQ0FBQzs7Ozs7SUFFUyxnREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7SUFFRCxnREFBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFFckMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFMUUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELCtDQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCxrQ0FBSzs7O0lBQUw7O1lBQ1UsU0FBUyxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwRCxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsU0FBUyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM3QyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBekRNLDhCQUFXLEdBQUcsdUJBQXVCLENBQUM7SUEwRGpELHlCQUFDO0NBQUEsQUEzREQsQ0FBd0MsaUJBQWlCLEdBMkR4RDtTQTNEWSxrQkFBa0I7OztJQUMzQiwrQkFBNkM7O0lBQzdDLHVDQUFtRDs7Ozs7SUFNbkQsb0NBQTRCOzs7OztJQUM1QiwwQ0FBMkU7Ozs7O0lBQzNFLGtDQUFzRDs7QUFrRDFELGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBNZXhFeHByZXNzaW9uSW1wbCB9IGZyb20gXCIuLi8uLi9tZXgvTWV4RXhwcmVzc2lvbkltcGxcIjtcclxuaW1wb3J0IHsgQ29uZGl0aW9uVHlwZSB9IGZyb20gXCIuL0NvbmRpdGlvblR5cGVcIjtcclxuaW1wb3J0IHsgQ29uZGl0aW9uVmFsdWVWZXJzaW9uIH0gZnJvbSBcIi4vQ29uZGl0aW9uVmFsdWVWZXJzaW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VtYW50aWNFeHByZXNzaW9uIGV4dGVuZHMgTWV4RXhwcmVzc2lvbkltcGwge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEID0gJ3dmLlNlbWFudGljRXhwcmVzc2lvbic7XHJcbiAgICBDbHJUeXBlSUQ6IHN0cmluZyA9IFNlbWFudGljRXhwcmVzc2lvbi5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBTZW1hbnRpY0V4cHJlc3Npb24ge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VtYW50aWNFeHByZXNzaW9uKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmcgPSAnJztcclxuICAgIHByaXZhdGUgdmFsdWVWZXJzaW9uOiBDb25kaXRpb25WYWx1ZVZlcnNpb24gPSBDb25kaXRpb25WYWx1ZVZlcnNpb24uVW5zdXJlO1xyXG4gICAgcHJpdmF0ZSB0eXBlOiBDb25kaXRpb25UeXBlID0gQ29uZGl0aW9uVHlwZS5DT05ESVRJT047XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IEJwbW5Nb2RlbCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgQ29uZGl0aW9uVHlwZSgpOiBDb25kaXRpb25UeXBlIHsgcmV0dXJuIHRoaXMudHlwZTsgfVxyXG4gICAgc2V0IENvbmRpdGlvblR5cGUodmFsdWU6IENvbmRpdGlvblR5cGUpIHsgdGhpcy50eXBlID0gdmFsdWU7IH1cclxuXHJcbiAgICBnZXQgVmFsdWUoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XHJcbiAgICBzZXQgVmFsdWUodmFsdWU6IHN0cmluZykgeyB0aGlzLl92YWx1ZSA9IHZhbHVlOyB9XHJcblxyXG4gICAgZ2V0IFZhbHVlVmVyc2lvbigpOiBDb25kaXRpb25WYWx1ZVZlcnNpb24geyByZXR1cm4gdGhpcy52YWx1ZVZlcnNpb247IH1cclxuICAgIHNldCBWYWx1ZVZlcnNpb24odmFsdWU6IENvbmRpdGlvblZhbHVlVmVyc2lvbikgeyB0aGlzLnZhbHVlVmVyc2lvbiA9IHZhbHVlOyB9XHJcblxyXG4gICAgVG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJDb25kaXRpb25bdmFsdWU9J1wiICsgdGhpcy5fdmFsdWUgKyBcIidcIiArIFwiLCB0eXBlPVwiICsgdGhpcy50eXBlICsgXCJdXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgICAgIHRoaXMuVmFsdWUgPSAnJztcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJDb25kaXRpb25UeXBlXCIsIHRoaXMuQ29uZGl0aW9uVHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJWYWx1ZVwiLCB0aGlzLlZhbHVlKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlZhbHVlVmVyc2lvblwiLCB0aGlzLlZhbHVlVmVyc2lvbik7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuQ29uZGl0aW9uVHlwZSA9IG9iai5Db25kaXRpb25UeXBlO1xyXG4gICAgICAgIHRoaXMuVmFsdWUgPSBvYmouVmFsdWU7XHJcbiAgICAgICAgdGhpcy5WYWx1ZVZlcnNpb24gPSBvYmouVmFsdWVWZXJzaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCk6IFNlbWFudGljRXhwcmVzc2lvbiB7XHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uID0gbmV3IFNlbWFudGljRXhwcmVzc2lvbih0aGlzLk1vZGVsKTtcclxuICAgICAgICBjb25kaXRpb24uVmFsdWUgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgIGNvbmRpdGlvbi5WYWx1ZVZlcnNpb24gPSB0aGlzLnZhbHVlVmVyc2lvbjtcclxuICAgICAgICBjb25kaXRpb24uQ29uZGl0aW9uVHlwZSA9IHRoaXMuQ29uZGl0aW9uVHlwZTtcclxuICAgICAgICByZXR1cm4gY29uZGl0aW9uO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBTZW1hbnRpY0V4cHJlc3Npb24obmV3IEJwbW5Nb2RlbCgpKSk7Il19