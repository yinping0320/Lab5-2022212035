/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { AsyncCallBackType } from "../../misc/AsyncCallBackType";
import { ExecutionType } from "../../misc/ExecutionType";
import { ActualParameter } from "../../parameter/WFActualParameter";
import { WFExtensionElement } from "../WFExtensionElement";
import { ToolTime } from "./ToolTime";
/**
 * @abstract
 */
var Tool = /** @class */ (function (_super) {
    tslib_1.__extends(Tool, _super);
    function Tool(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = Tool.Clr_Type_ID;
        _this.ActualParameters = new Array();
        _this.Execution = ExecutionType.SYNCHRONOUS;
        _this.AsyncCallBackType = AsyncCallBackType.NO;
        _this.Time = ToolTime.UNDEFINITION;
        _this.isForCompensation = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    Tool.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    Tool.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        /** @type {?} */
        var actualParametersElements = [];
        if (this.ActualParameters !== null && this.ActualParameters.length > 0) {
            this.ActualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        BpmnModelHelper.SetAttributeValue(obj, 'Execution', this.Execution);
        BpmnModelHelper.SetAttributeValue(obj, 'Time', this.Time);
        BpmnModelHelper.SetAttributeValue(obj, 'IsForCompensation', this.isForCompensation);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Tool.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        /** @type {?} */
        var actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var actualParameter = new ActualParameter(_this.Model);
                actualParameter.LoadFromJsonObject(item);
                _this.ActualParameters.push(actualParameter);
            }));
        }
        this.Execution = (/** @type {?} */ (obj.Execution));
        this.Time = (/** @type {?} */ (obj.Time));
        this.isForCompensation = obj.IsForCompensation;
    };
    Tool.Clr_Type_ID = "wf.Tool";
    return Tool;
}(WFExtensionElement));
export { Tool };
if (false) {
    /** @type {?} */
    Tool.Clr_Type_ID;
    /** @type {?} */
    Tool.prototype.ClrTypeID;
    /** @type {?} */
    Tool.prototype.ActualParameters;
    /** @type {?} */
    Tool.prototype.Execution;
    /** @type {?} */
    Tool.prototype.AsyncCallBackType;
    /** @type {?} */
    Tool.prototype.Time;
    /** @type {?} */
    Tool.prototype.isForCompensation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9leHRlbnNpb24vdG9vbC9Ub29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFhLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7OztBQUV0QztJQUFtQyxnQ0FBa0I7SUFJakQsY0FBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBSlEsZUFBUyxHQUFXLElBQUksQ0FBQyxXQUFXLENBQUM7UUFNOUMsc0JBQWdCLEdBQTJCLElBQUksS0FBSyxFQUFtQixDQUFDO1FBQ3hFLGVBQVMsR0FBa0IsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUNyRCx1QkFBaUIsR0FBc0IsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1FBQzVELFVBQUksR0FBYSxRQUFRLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLHVCQUFpQixHQUFZLEtBQUssQ0FBQzs7SUFObkMsQ0FBQzs7Ozs7SUFRUyxrQ0FBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxrQ0FBbUI7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7O1lBRWpDLHdCQUF3QixHQUFHLEVBQUU7UUFDakMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxJQUFJO2dCQUMvQix3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztZQUM5RCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBRUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3JGLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVwRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsaUNBQWtCOzs7O0lBQWxCLFVBQW1CLEdBQVE7UUFBM0IsaUJBZUM7UUFkRyxpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQzs7WUFFMUIsZ0JBQWdCLEdBQUcsbUJBQUEsR0FBRyxDQUFDLGdCQUFnQixFQUFjO1FBQ3pELElBQUksZ0JBQWdCLEtBQUssSUFBSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUQsZ0JBQWdCLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsSUFBSTs7b0JBQ3RCLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNyRCxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDaEQsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQUEsR0FBRyxDQUFDLFNBQVMsRUFBaUIsQ0FBQztRQUNoRCxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBQ25ELENBQUM7SUFsRE0sZ0JBQVcsR0FBVyxTQUFTLENBQUM7SUFtRDNDLFdBQUM7Q0FBQSxBQXBERCxDQUFtQyxrQkFBa0IsR0FvRHBEO1NBcERxQixJQUFJOzs7SUFDdEIsaUJBQXVDOztJQUN2Qyx5QkFBOEM7O0lBTTlDLGdDQUF3RTs7SUFDeEUseUJBQXFEOztJQUNyRCxpQ0FBNEQ7O0lBQzVELG9CQUF1Qzs7SUFDdkMsaUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBBc3luY0NhbGxCYWNrVHlwZSB9IGZyb20gXCIuLi8uLi9taXNjL0FzeW5jQ2FsbEJhY2tUeXBlXCI7XHJcbmltcG9ydCB7IEV4ZWN1dGlvblR5cGUgfSBmcm9tIFwiLi4vLi4vbWlzYy9FeGVjdXRpb25UeXBlXCI7XHJcbmltcG9ydCB7IEFjdHVhbFBhcmFtZXRlciB9IGZyb20gXCIuLi8uLi9wYXJhbWV0ZXIvV0ZBY3R1YWxQYXJhbWV0ZXJcIjtcclxuaW1wb3J0IHsgV0ZFeHRlbnNpb25FbGVtZW50IH0gZnJvbSBcIi4uL1dGRXh0ZW5zaW9uRWxlbWVudFwiO1xyXG5pbXBvcnQgeyBUb29sVGltZSB9IGZyb20gXCIuL1Rvb2xUaW1lXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVG9vbCBleHRlbmRzIFdGRXh0ZW5zaW9uRWxlbWVudCB7XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuVG9vbFwiO1xyXG4gICAgcmVhZG9ubHkgQ2xyVHlwZUlEOiBzdHJpbmcgPSBUb29sLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgQWN0dWFsUGFyYW1ldGVyczogQXJyYXk8QWN0dWFsUGFyYW1ldGVyPiA9IG5ldyBBcnJheTxBY3R1YWxQYXJhbWV0ZXI+KCk7XHJcbiAgICBFeGVjdXRpb246IEV4ZWN1dGlvblR5cGUgPSBFeGVjdXRpb25UeXBlLlNZTkNIUk9OT1VTO1xyXG4gICAgQXN5bmNDYWxsQmFja1R5cGU6IEFzeW5jQ2FsbEJhY2tUeXBlID0gQXN5bmNDYWxsQmFja1R5cGUuTk87XHJcbiAgICBUaW1lOiBUb29sVGltZSA9IFRvb2xUaW1lLlVOREVGSU5JVElPTjtcclxuICAgIGlzRm9yQ29tcGVuc2F0aW9uOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBsZXQgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuQWN0dWFsUGFyYW1ldGVycyAhPT0gbnVsbCAmJiB0aGlzLkFjdHVhbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLkFjdHVhbFBhcmFtZXRlcnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzLnB1c2goaXRlbS5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQWN0dWFsUGFyYW1ldGVyc1wiLCBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudHMpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdFeGVjdXRpb24nLCB0aGlzLkV4ZWN1dGlvbik7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgJ1RpbWUnLCB0aGlzLlRpbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosICdJc0ZvckNvbXBlbnNhdGlvbicsIHRoaXMuaXNGb3JDb21wZW5zYXRpb24pO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICBsZXQgYWN0dWFsUGFyYW1ldGVycyA9IG9iai5BY3R1YWxQYXJhbWV0ZXJzIGFzIEFycmF5PGFueT47XHJcbiAgICAgICAgaWYgKGFjdHVhbFBhcmFtZXRlcnMgIT09IG51bGwgJiYgYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGFjdHVhbFBhcmFtZXRlcnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFjdHVhbFBhcmFtZXRlciA9IG5ldyBBY3R1YWxQYXJhbWV0ZXIodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxQYXJhbWV0ZXIuTG9hZEZyb21Kc29uT2JqZWN0KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5BY3R1YWxQYXJhbWV0ZXJzLnB1c2goYWN0dWFsUGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkV4ZWN1dGlvbiA9IG9iai5FeGVjdXRpb24gYXMgRXhlY3V0aW9uVHlwZTtcclxuICAgICAgICB0aGlzLlRpbWUgPSBvYmouVGltZSBhcyBUb29sVGltZTtcclxuICAgICAgICB0aGlzLmlzRm9yQ29tcGVuc2F0aW9uID0gb2JqLklzRm9yQ29tcGVuc2F0aW9uO1xyXG4gICAgfVxyXG59XHJcbiAgICAvLyBCcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgVG9vbChuZXcgQnBtbk1vZGVsKCkpKTsiXX0=