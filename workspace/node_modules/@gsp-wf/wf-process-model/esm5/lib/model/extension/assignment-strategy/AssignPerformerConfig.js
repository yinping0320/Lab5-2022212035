/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ExtensionElement, BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
var AssignPerformerConfig = /** @class */ (function (_super) {
    tslib_1.__extends(AssignPerformerConfig, _super);
    function AssignPerformerConfig(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = AssignPerformerConfig.Clr_Type_ID;
        _this.MultiSelect = true;
        _this.Necessary = false;
        _this.AllowGlobalAssign = false;
        _this.Operator = 'currentUser';
        return _this;
    }
    /**
     * @return {?}
     */
    AssignPerformerConfig.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new AssignPerformerConfig(this.Model);
    };
    /**
     * @protected
     * @return {?}
     */
    AssignPerformerConfig.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
    };
    /**
     * @return {?}
     */
    AssignPerformerConfig.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "Operator", this.Operator);
        BpmnModelHelper.SetAttributeValue(obj, "MultiSelect", this.MultiSelect);
        BpmnModelHelper.SetAttributeValue(obj, "Necessary", this.Necessary);
        BpmnModelHelper.SetAttributeValue(obj, "AllowGlobalAssign", this.AllowGlobalAssign);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AssignPerformerConfig.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Operator = obj.Operator;
        this.MultiSelect = obj.MultiSelect;
        this.Necessary = obj.Necessary;
        this.AllowGlobalAssign = obj.AllowGlobalAssign;
    };
    /**
     * @return {?}
     */
    AssignPerformerConfig.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var assignPerformerConfig = new AssignPerformerConfig(this.Model);
        assignPerformerConfig.Operator = this.Operator;
        assignPerformerConfig.MultiSelect = this.MultiSelect;
        assignPerformerConfig.Necessary = this.Necessary;
        assignPerformerConfig.AllowGlobalAssign = this.AllowGlobalAssign;
        return assignPerformerConfig;
    };
    AssignPerformerConfig.Clr_Type_ID = 'wf.AssignPerformerConfig';
    return AssignPerformerConfig;
}(ExtensionElement));
export { AssignPerformerConfig };
if (false) {
    /** @type {?} */
    AssignPerformerConfig.Clr_Type_ID;
    /** @type {?} */
    AssignPerformerConfig.prototype.ClrTypeID;
    /** @type {?} */
    AssignPerformerConfig.prototype.Operator;
    /** @type {?} */
    AssignPerformerConfig.prototype.MultiSelect;
    /** @type {?} */
    AssignPerformerConfig.prototype.Necessary;
    /** @type {?} */
    AssignPerformerConfig.prototype.AllowGlobalAssign;
}
BpmnModelHelper.RegisterElementType(new AssignPerformerConfig(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzaWduUGVyZm9ybWVyQ29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9hc3NpZ25tZW50LXN0cmF0ZWd5L0Fzc2lnblBlcmZvcm1lckNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbkY7SUFBMkMsaURBQWdCO0lBUXZELCtCQUFZLEtBQWdCO1FBQTVCLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBRWY7UUFUUSxlQUFTLEdBQVcscUJBQXFCLENBQUMsV0FBVyxDQUFDO1FBYS9ELGlCQUFXLEdBQVksSUFBSSxDQUFDO1FBQzVCLGVBQVMsR0FBWSxLQUFLLENBQUM7UUFDM0IsdUJBQWlCLEdBQVksS0FBSyxDQUFDO1FBUC9CLEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDOztJQUNsQyxDQUFDOzs7O0lBUEQsMkNBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7OztJQWFTLG1EQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELG1EQUFtQjs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRXBGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFDRCxrREFBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBUTtRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxxQ0FBSzs7O0lBQUw7O1lBQ1UscUJBQXFCLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25FLHFCQUFxQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9DLHFCQUFxQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3JELHFCQUFxQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2pELHFCQUFxQixDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRSxPQUFPLHFCQUFxQixDQUFDO0lBQ2pDLENBQUM7SUFoRE0saUNBQVcsR0FBVywwQkFBMEIsQ0FBQztJQWlENUQsNEJBQUM7Q0FBQSxBQWxERCxDQUEyQyxnQkFBZ0IsR0FrRDFEO1NBbERZLHFCQUFxQjs7O0lBQzlCLGtDQUF3RDs7SUFDeEQsMENBQStEOztJQVcvRCx5Q0FBaUI7O0lBRWpCLDRDQUE0Qjs7SUFDNUIsMENBQTJCOztJQUMzQixrREFBbUM7O0FBa0N2QyxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvbkVsZW1lbnQsIEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBc3NpZ25QZXJmb3JtZXJDb25maWcgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gJ3dmLkFzc2lnblBlcmZvcm1lckNvbmZpZyc7XHJcbiAgICByZWFkb25seSBDbHJUeXBlSUQ6IHN0cmluZyA9IEFzc2lnblBlcmZvcm1lckNvbmZpZy5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICBOZXdJbnN0YW5jZSgpOiBBc3NpZ25QZXJmb3JtZXJDb25maWcge1xyXG4gICAgICAgIHJldHVybiBuZXcgQXNzaWduUGVyZm9ybWVyQ29uZmlnKHRoaXMuTW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICAgICAgdGhpcy5PcGVyYXRvciA9ICdjdXJyZW50VXNlcic7XHJcbiAgICB9XHJcblxyXG4gICAgT3BlcmF0b3I6IHN0cmluZztcclxuXHJcbiAgICBNdWx0aVNlbGVjdDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBOZWNlc3Nhcnk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIEFsbG93R2xvYmFsQXNzaWduOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJPcGVyYXRvclwiLCB0aGlzLk9wZXJhdG9yKTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk11bHRpU2VsZWN0XCIsIHRoaXMuTXVsdGlTZWxlY3QpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmVjZXNzYXJ5XCIsIHRoaXMuTmVjZXNzYXJ5KTtcclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkFsbG93R2xvYmFsQXNzaWduXCIsIHRoaXMuQWxsb3dHbG9iYWxBc3NpZ24pO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuT3BlcmF0b3IgPSBvYmouT3BlcmF0b3I7XHJcbiAgICAgICAgdGhpcy5NdWx0aVNlbGVjdCA9IG9iai5NdWx0aVNlbGVjdDtcclxuICAgICAgICB0aGlzLk5lY2Vzc2FyeSA9IG9iai5OZWNlc3Nhcnk7XHJcbiAgICAgICAgdGhpcy5BbGxvd0dsb2JhbEFzc2lnbiA9IG9iai5BbGxvd0dsb2JhbEFzc2lnbjtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBBc3NpZ25QZXJmb3JtZXJDb25maWcge1xyXG4gICAgICAgIGNvbnN0IGFzc2lnblBlcmZvcm1lckNvbmZpZyA9IG5ldyBBc3NpZ25QZXJmb3JtZXJDb25maWcodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgYXNzaWduUGVyZm9ybWVyQ29uZmlnLk9wZXJhdG9yID0gdGhpcy5PcGVyYXRvcjtcclxuICAgICAgICBhc3NpZ25QZXJmb3JtZXJDb25maWcuTXVsdGlTZWxlY3QgPSB0aGlzLk11bHRpU2VsZWN0O1xyXG4gICAgICAgIGFzc2lnblBlcmZvcm1lckNvbmZpZy5OZWNlc3NhcnkgPSB0aGlzLk5lY2Vzc2FyeTtcclxuICAgICAgICBhc3NpZ25QZXJmb3JtZXJDb25maWcuQWxsb3dHbG9iYWxBc3NpZ24gPSB0aGlzLkFsbG93R2xvYmFsQXNzaWduO1xyXG4gICAgICAgIHJldHVybiBhc3NpZ25QZXJmb3JtZXJDb25maWc7XHJcbiAgICB9XHJcbn1cclxuQnBtbk1vZGVsSGVscGVyLlJlZ2lzdGVyRWxlbWVudFR5cGUobmV3IEFzc2lnblBlcmZvcm1lckNvbmZpZyhuZXcgQnBtbk1vZGVsKCkpKTtcclxuIl19