/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { Tool } from "./Tool";
var Component = /** @class */ (function (_super) {
    tslib_1.__extends(Component, _super);
    function Component(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = Component.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    Component.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new Component(this.Model);
    };
    //Json 序列化
    //Json 序列化
    /**
     * @return {?}
     */
    Component.prototype.ConvertToJsonObject = 
    //Json 序列化
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "MetadataId", this.MetadataId);
        BpmnModelHelper.SetAttributeValue(obj, "ComponentType", this.ComponentType);
        BpmnModelHelper.SetAttributeValue(obj, "MethodCode", this.MethodCode);
        BpmnModelHelper.SetAttributeValue(obj, "ScopeType", this.ScopeType);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Component.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.MetadataId = obj.MetadataId;
        this.ComponentType = obj.ComponentType;
        this.MethodCode = obj.MethodCode;
        this.ScopeType = obj.ScopeType;
    };
    /**
     * @return {?}
     */
    Component.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var component = new Component(this.Model);
        component.Id = BpmnModelHelper.GenerateElementId();
        component.Code = this.Code;
        component.Name = this.Name;
        component.Description = this.Description;
        component.Execution = this.Execution;
        component.AsyncCallBackType = this.AsyncCallBackType;
        component.Time = this.Time;
        component.isForCompensation = this.isForCompensation;
        if (this.ActualParameters && this.ActualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.ActualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    /** @type {?} */
                    var parameter = p.clone();
                    component.ActualParameters.push(parameter);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        component.MetadataId = this.MetadataId;
        component.ComponentType = this.ComponentType;
        component.MethodCode = this.MethodCode;
        component.ScopeType = this.ScopeType;
        return component;
    };
    Component.Clr_Type_ID = "wf.Component";
    return Component;
}(Tool));
export { Component };
if (false) {
    /** @type {?} */
    Component.Clr_Type_ID;
    /** @type {?} */
    Component.prototype.ClrTypeID;
    /** @type {?} */
    Component.prototype.MetadataId;
    /** @type {?} */
    Component.prototype.ComponentType;
    /** @type {?} */
    Component.prototype.MethodCode;
    /** @type {?} */
    Component.prototype.ScopeType;
}
BpmnModelHelper.RegisterElementType(new Component(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi90b29sL0NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QjtJQUErQixxQ0FBSTtJQUMvQixtQkFBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBRUQsZUFBUyxHQUFXLFNBQVMsQ0FBQyxXQUFXLENBQUM7O0lBRjFDLENBQUM7Ozs7SUFPRCwrQkFBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsVUFBVTs7Ozs7SUFDVix1Q0FBbUI7Ozs7O0lBQW5COztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELHNDQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3ZCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQseUJBQUs7OztJQUFMOzs7WUFDVSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMzQyxTQUFTLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ25ELFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3pDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNyQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ3JELFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ3JELElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDM0QsS0FBZ0IsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQSxnQkFBQSw0QkFBRTtvQkFBbEMsSUFBTSxDQUFDLFdBQUE7O3dCQUNGLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO29CQUMzQixTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUM5Qzs7Ozs7Ozs7O1NBQ0o7UUFDRCxTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDdkMsU0FBUyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN2QyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFckMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQXBETSxxQkFBVyxHQUFXLGNBQWMsQ0FBQztJQXVEaEQsZ0JBQUM7Q0FBQSxBQTNERCxDQUErQixJQUFJLEdBMkRsQztTQTNEWSxTQUFTOzs7SUFJbEIsc0JBQTRDOztJQUM1Qyw4QkFBMEM7O0lBQzFDLCtCQUFtQjs7SUFDbkIsa0NBQXNCOztJQUN0QiwrQkFBbUI7O0lBQ25CLDhCQUFrQjs7QUFtRHRCLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyIH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgVG9vbCB9IGZyb20gXCIuL1Rvb2xcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21wb25lbnQgZXh0ZW5kcyBUb29sIHtcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgQ2xyX1R5cGVfSUQ6IHN0cmluZyA9IFwid2YuQ29tcG9uZW50XCI7XHJcbiAgICBDbHJUeXBlSUQ6IHN0cmluZyA9IENvbXBvbmVudC5DbHJfVHlwZV9JRDtcclxuICAgIE1ldGFkYXRhSWQ6IHN0cmluZztcclxuICAgIENvbXBvbmVudFR5cGU6IHN0cmluZztcclxuICAgIE1ldGhvZENvZGU6IHN0cmluZztcclxuICAgIFNjb3BlVHlwZTogc3RyaW5nO1xyXG4gICAgTmV3SW5zdGFuY2UoKTogQ29tcG9uZW50IHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudCh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0pzb24g5bqP5YiX5YyWXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJNZXRhZGF0YUlkXCIsIHRoaXMuTWV0YWRhdGFJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJDb21wb25lbnRUeXBlXCIsIHRoaXMuQ29tcG9uZW50VHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJNZXRob2RDb2RlXCIsIHRoaXMuTWV0aG9kQ29kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJTY29wZVR5cGVcIiwgdGhpcy5TY29wZVR5cGUpO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuTWV0YWRhdGFJZCA9IG9iai5NZXRhZGF0YUlkO1xyXG4gICAgICAgIHRoaXMuQ29tcG9uZW50VHlwZSA9IG9iai5Db21wb25lbnRUeXBlO1xyXG4gICAgICAgIHRoaXMuTWV0aG9kQ29kZSA9IG9iai5NZXRob2RDb2RlO1xyXG4gICAgICAgIHRoaXMuU2NvcGVUeXBlID0gb2JqLlNjb3BlVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBDb21wb25lbnQge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgY29tcG9uZW50LklkID0gQnBtbk1vZGVsSGVscGVyLkdlbmVyYXRlRWxlbWVudElkKCk7XHJcbiAgICAgICAgY29tcG9uZW50LkNvZGUgPSB0aGlzLkNvZGU7XHJcbiAgICAgICAgY29tcG9uZW50Lk5hbWUgPSB0aGlzLk5hbWU7XHJcbiAgICAgICAgY29tcG9uZW50LkRlc2NyaXB0aW9uID0gdGhpcy5EZXNjcmlwdGlvbjtcclxuICAgICAgICBjb21wb25lbnQuRXhlY3V0aW9uID0gdGhpcy5FeGVjdXRpb247XHJcbiAgICAgICAgY29tcG9uZW50LkFzeW5jQ2FsbEJhY2tUeXBlID0gdGhpcy5Bc3luY0NhbGxCYWNrVHlwZTtcclxuICAgICAgICBjb21wb25lbnQuVGltZSA9IHRoaXMuVGltZTtcclxuICAgICAgICBjb21wb25lbnQuaXNGb3JDb21wZW5zYXRpb24gPSB0aGlzLmlzRm9yQ29tcGVuc2F0aW9uO1xyXG4gICAgICAgIGlmICh0aGlzLkFjdHVhbFBhcmFtZXRlcnMgJiYgdGhpcy5BY3R1YWxQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMuQWN0dWFsUGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyID0gcC5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LkFjdHVhbFBhcmFtZXRlcnMucHVzaChwYXJhbWV0ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbXBvbmVudC5NZXRhZGF0YUlkID0gdGhpcy5NZXRhZGF0YUlkO1xyXG4gICAgICAgIGNvbXBvbmVudC5Db21wb25lbnRUeXBlID0gdGhpcy5Db21wb25lbnRUeXBlO1xyXG4gICAgICAgIGNvbXBvbmVudC5NZXRob2RDb2RlID0gdGhpcy5NZXRob2RDb2RlO1xyXG4gICAgICAgIGNvbXBvbmVudC5TY29wZVR5cGUgPSB0aGlzLlNjb3BlVHlwZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBDb21wb25lbnQobmV3IEJwbW5Nb2RlbCgpKSk7Il19