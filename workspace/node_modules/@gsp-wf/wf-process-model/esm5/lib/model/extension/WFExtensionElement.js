/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
/**
 * @abstract
 */
var /**
 * @abstract
 */
WFExtensionElement = /** @class */ (function (_super) {
    tslib_1.__extends(WFExtensionElement, _super);
    function WFExtensionElement(model, id, name) {
        var _this = _super.call(this, model) || this;
        _this.ExtendedAttributes = {};
        _this.Id = id || '';
        _this.Name = name || '';
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    WFExtensionElement.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.ExtendedAttributes = {};
    };
    /**
     * @return {?}
     */
    WFExtensionElement.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.Code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.Name);
        BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        /** @type {?} */
        var extAttributeElements = [];
        for (var key in this.ExtendedAttributes) {
            /** @type {?} */
            var obj_1 = {};
            BpmnModelHelper.SetAttributeValue(obj_1, "Name", key);
            BpmnModelHelper.SetAttributeValue(obj_1, "Value", this.ExtendedAttributes[key]);
            extAttributeElements.push(obj_1);
        }
        BpmnModelHelper.SetAttributeValue(obj, "ExtendedAttributes", extAttributeElements);
        if (this.GetMexExtensionElements4ConvertTo().length > 0) {
            /** @type {?} */
            var mexJsonArray_1 = [];
            this.GetMexExtensionElements4ConvertTo().forEach((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                mexJsonArray_1.push(value.ConvertToJsonObject());
            }));
            BpmnModelHelper.SetAttributeValue(obj, "MexExtensionElements", mexJsonArray_1);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    WFExtensionElement.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Id = obj.Id;
        this.Code = obj.Code;
        this.Name = obj.Name;
        this.Description = obj.Description;
        /** @type {?} */
        var extAttributeElements = (/** @type {?} */ (obj.ExtendedAttributes));
        if (extAttributeElements && extAttributeElements.length > 0) {
            extAttributeElements.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                _this.ExtendedAttributes[item.Name] = item.Value;
            }));
        }
        /** @type {?} */
        var mexJsonArray = (/** @type {?} */ (obj.MexExtensionElements));
        if (mexJsonArray && mexJsonArray.length > 0) {
            /** @type {?} */
            var list_1 = new Array();
            mexJsonArray.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var mexExtElementObj = (/** @type {?} */ (BpmnModelHelper.GetElementType(item.ClrTypeID)));
                if (mexExtElementObj) {
                    mexExtElementObj.LoadFromJsonObject(item);
                    list_1.push(mexExtElementObj);
                }
            }));
            this.SetMexExtensionElements4LoadFrom(list_1);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    WFExtensionElement.prototype.GetMexExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        return [];
    };
    /**
     * @protected
     * @param {?} list
     * @return {?}
     */
    WFExtensionElement.prototype.SetMexExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} list
     * @return {?}
     */
    function (list) {
    };
    /**
     * @return {?}
     */
    WFExtensionElement.prototype.GetExtendedAttributes = /**
     * @return {?}
     */
    function () {
        return this.ExtendedAttributes;
    };
    return WFExtensionElement;
}(ExtensionElement));
/**
 * @abstract
 */
export { WFExtensionElement };
if (false) {
    /** @type {?} */
    WFExtensionElement.prototype.Id;
    /** @type {?} */
    WFExtensionElement.prototype.Code;
    /** @type {?} */
    WFExtensionElement.prototype.Name;
    /** @type {?} */
    WFExtensionElement.prototype.Description;
    /** @type {?} */
    WFExtensionElement.prototype.ExtendedAttributes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV0ZFeHRlbnNpb25FbGVtZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2V4dGVuc2lvbi9XRkV4dGVuc2lvbkVsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWEsZUFBZSxFQUFFLGdCQUFnQixFQUF1QixNQUFNLHFCQUFxQixDQUFDOzs7O0FBRXhHOzs7O0lBQWlELDhDQUFnQjtJQVk3RCw0QkFBc0IsS0FBZ0IsRUFBRSxFQUFXLEVBQUUsSUFBYTtRQUFsRSxZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUdmO1FBWEQsd0JBQWtCLEdBQThCLEVBQUUsQ0FBQztRQVMvQyxLQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDbkIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDOztJQUMzQixDQUFDOzs7OztJQVRTLGdEQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7O0lBUUQsZ0RBQW1COzs7SUFBbkI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENB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O0lBQ25DLENBQUM7SUFFTCx5QkFBQztBQUFELENBQUMsQUF4RkQsQ0FBaUQsZ0JBQWdCLEdBd0ZoRTs7Ozs7OztJQXZGRyxnQ0FBVzs7SUFDWCxrQ0FBYTs7SUFDYixrQ0FBYTs7SUFDYix5Q0FBb0I7O0lBQ3BCLGdEQUFtRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBNZXhFeHRlbnNpb25FbGVtZW50IH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBXRkV4dGVuc2lvbkVsZW1lbnQgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIElkOiBzdHJpbmc7XHJcbiAgICBDb2RlOiBzdHJpbmc7XHJcbiAgICBOYW1lOiBzdHJpbmc7XHJcbiAgICBEZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgRXh0ZW5kZWRBdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgICAgIHRoaXMuRXh0ZW5kZWRBdHRyaWJ1dGVzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwsIGlkPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgICAgIHRoaXMuSWQgPSBpZCB8fCAnJztcclxuICAgICAgICB0aGlzLk5hbWUgPSBuYW1lIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKTogYW55IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIklkXCIsIHRoaXMuSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQ29kZVwiLCB0aGlzLkNvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTmFtZVwiLCB0aGlzLk5hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRGVzY3JpcHRpb25cIiwgdGhpcy5EZXNjcmlwdGlvbik7XHJcblxyXG4gICAgICAgIGxldCBleHRBdHRyaWJ1dGVFbGVtZW50cyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5FeHRlbmRlZEF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgbGV0IG9iaiA9IHt9O1xyXG4gICAgICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIk5hbWVcIiwga2V5KTtcclxuICAgICAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJWYWx1ZVwiLCB0aGlzLkV4dGVuZGVkQXR0cmlidXRlc1trZXldKTtcclxuICAgICAgICAgICAgZXh0QXR0cmlidXRlRWxlbWVudHMucHVzaChvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkV4dGVuZGVkQXR0cmlidXRlc1wiLCBleHRBdHRyaWJ1dGVFbGVtZW50cyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLkdldE1leEV4dGVuc2lvbkVsZW1lbnRzNENvbnZlcnRUbygpLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBtZXhKc29uQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5HZXRNZXhFeHRlbnNpb25FbGVtZW50czRDb252ZXJ0VG8oKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbWV4SnNvbkFycmF5LnB1c2godmFsdWUuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiTWV4RXh0ZW5zaW9uRWxlbWVudHNcIiwgbWV4SnNvbkFycmF5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajogYW55KSB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuSWQgPSBvYmouSWQ7XHJcbiAgICAgICAgdGhpcy5Db2RlID0gb2JqLkNvZGU7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gb2JqLk5hbWU7XHJcbiAgICAgICAgdGhpcy5EZXNjcmlwdGlvbiA9IG9iai5EZXNjcmlwdGlvbjtcclxuXHJcbiAgICAgICAgbGV0IGV4dEF0dHJpYnV0ZUVsZW1lbnRzID0gb2JqLkV4dGVuZGVkQXR0cmlidXRlcyBhcyBBcnJheTxhbnk+O1xyXG4gICAgICAgIGlmIChleHRBdHRyaWJ1dGVFbGVtZW50cyAmJiBleHRBdHRyaWJ1dGVFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGV4dEF0dHJpYnV0ZUVsZW1lbnRzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuRXh0ZW5kZWRBdHRyaWJ1dGVzW2l0ZW0uTmFtZV0gPSBpdGVtLlZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtZXhKc29uQXJyYXkgPSBvYmouTWV4RXh0ZW5zaW9uRWxlbWVudHMgYXMgQXJyYXk8YW55PjtcclxuICAgICAgICBpZiAobWV4SnNvbkFycmF5ICYmIG1leEpzb25BcnJheS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBsaXN0ID0gbmV3IEFycmF5PE1leEV4dGVuc2lvbkVsZW1lbnQ+KCk7XHJcbiAgICAgICAgICAgIG1leEpzb25BcnJheS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWV4RXh0RWxlbWVudE9iaiA9IEJwbW5Nb2RlbEhlbHBlci5HZXRFbGVtZW50VHlwZShpdGVtLkNsclR5cGVJRCkgYXMgTWV4RXh0ZW5zaW9uRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChtZXhFeHRFbGVtZW50T2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV4RXh0RWxlbWVudE9iai5Mb2FkRnJvbUpzb25PYmplY3QoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKG1leEV4dEVsZW1lbnRPYmopO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5TZXRNZXhFeHRlbnNpb25FbGVtZW50czRMb2FkRnJvbShsaXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIEdldE1leEV4dGVuc2lvbkVsZW1lbnRzNENvbnZlcnRUbygpOiBNZXhFeHRlbnNpb25FbGVtZW50W10ge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBTZXRNZXhFeHRlbnNpb25FbGVtZW50czRMb2FkRnJvbShsaXN0OiBNZXhFeHRlbnNpb25FbGVtZW50W10pIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgR2V0RXh0ZW5kZWRBdHRyaWJ1dGVzKCk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkV4dGVuZGVkQXR0cmlidXRlcztcclxuICAgIH1cclxuXHJcbn0iXX0=