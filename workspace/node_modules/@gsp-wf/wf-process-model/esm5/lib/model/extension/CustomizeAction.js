/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../parameter/WFActualParameter";
var CustomizeAction = /** @class */ (function (_super) {
    tslib_1.__extends(CustomizeAction, _super);
    function CustomizeAction(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = CustomizeAction.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    CustomizeAction.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.id = null;
        this.code = null;
        this.name = null;
        this.terminalType = null;
        // this.enable = true;
        this.actualParameters = [];
    };
    /**
     * @return {?}
     */
    CustomizeAction.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "Id", this.id);
        BpmnModelHelper.SetAttributeValue(obj, "Code", this.code);
        BpmnModelHelper.SetAttributeValue(obj, "Name", this.name);
        BpmnModelHelper.SetAttributeValue(obj, "TerminalType", this.terminalType);
        // BpmnModelHelper.SetAttributeValue(obj, "Enable", this.enable);
        /** @type {?} */
        var actualParametersElements = [];
        if (this.actualParameters !== null && this.actualParameters.length > 0) {
            this.actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                actualParametersElements.push(item.ConvertToJsonObject());
            }));
        }
        BpmnModelHelper.SetAttributeValue(obj, "ActualParameters", actualParametersElements);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CustomizeAction.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.id = obj.Id;
        this.code = obj.Code;
        this.name = obj.Name;
        this.terminalType = obj.TerminalType;
        // this.enable = obj.Enable;
        /** @type {?} */
        var actualParameters = (/** @type {?} */ (obj.ActualParameters));
        if (actualParameters !== null && actualParameters.length > 0) {
            actualParameters.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var actualParameter = new ActualParameter(_this.Model);
                actualParameter.LoadFromJsonObject(item);
                _this.actualParameters.push(actualParameter);
            }));
        }
    };
    /**
     * @return {?}
     */
    CustomizeAction.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new CustomizeAction(this.Model);
    };
    /**
     * @return {?}
     */
    CustomizeAction.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var customizeAction = new CustomizeAction(this.Model);
        customizeAction.id = BpmnModelHelper.GenerateElementId();
        customizeAction.code = this.code;
        customizeAction.name = this.name;
        customizeAction.terminalType = this.terminalType;
        customizeAction.actualParameters = new Array();
        if (this.actualParameters && this.actualParameters.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    /** @type {?} */
                    var actualParameter = p.clone();
                    customizeAction.actualParameters.push(actualParameter);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return customizeAction;
    };
    CustomizeAction.Clr_Type_ID = "wf.CustomizeAction";
    return CustomizeAction;
}(ExtensionElement));
export { CustomizeAction };
if (false) {
    /** @type {?} */
    CustomizeAction.Clr_Type_ID;
    /** @type {?} */
    CustomizeAction.prototype.ClrTypeID;
    /** @type {?} */
    CustomizeAction.prototype.id;
    /** @type {?} */
    CustomizeAction.prototype.code;
    /** @type {?} */
    CustomizeAction.prototype.name;
    /** @type {?} */
    CustomizeAction.prototype.terminalType;
    /** @type {?} */
    CustomizeAction.prototype.actualParameters;
}
BpmnModelHelper.RegisterElementType(new CustomizeAction(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,