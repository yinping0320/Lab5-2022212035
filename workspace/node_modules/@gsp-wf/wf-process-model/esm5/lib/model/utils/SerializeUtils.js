/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ActualParameter } from "../parameter/WFActualParameter";
var SerializeUtils = /** @class */ (function () {
    function SerializeUtils() {
    }
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} actualParameters
     * @return {?}
     */
    SerializeUtils.setListAttributeValue = /**
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} actualParameters
     * @return {?}
     */
    function (obj, attributeName, actualParameters) {
        var e_1, _a;
        /** @type {?} */
        var actualParametersElements = new Array();
        if (actualParameters && actualParameters.length > 0) {
            try {
                for (var actualParameters_1 = tslib_1.__values(actualParameters), actualParameters_1_1 = actualParameters_1.next(); !actualParameters_1_1.done; actualParameters_1_1 = actualParameters_1.next()) {
                    var p = actualParameters_1_1.value;
                    actualParametersElements.push(p.ConvertToJsonObject());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (actualParameters_1_1 && !actualParameters_1_1.done && (_a = actualParameters_1.return)) _a.call(actualParameters_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        BpmnModelHelper.SetAttributeValue(obj, attributeName, actualParametersElements);
    };
    /**
     * @param {?} model
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    SerializeUtils.getListFromJsonObject = /**
     * @param {?} model
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    function (model, obj, attributeName) {
        var e_2, _a;
        /** @type {?} */
        var actualParameterList = new Array();
        /** @type {?} */
        var actualParametersElement = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, attributeName)));
        if (actualParametersElement && actualParametersElement.length > 0) {
            try {
                for (var actualParametersElement_1 = tslib_1.__values(actualParametersElement), actualParametersElement_1_1 = actualParametersElement_1.next(); !actualParametersElement_1_1.done; actualParametersElement_1_1 = actualParametersElement_1.next()) {
                    var p = actualParametersElement_1_1.value;
                    /** @type {?} */
                    var actualParameter = new ActualParameter(model);
                    actualParameter.LoadFromJsonObject(p);
                    actualParameterList.push(actualParameter);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (actualParametersElement_1_1 && !actualParametersElement_1_1.done && (_a = actualParametersElement_1.return)) _a.call(actualParametersElement_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return actualParameterList;
    };
    return SerializeUtils;
}());
export { SerializeUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VyaWFsaXplVXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtbW9kZWwvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvdXRpbHMvU2VyaWFsaXplVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWEsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRTtJQUFBO0lBdUJBLENBQUM7Ozs7Ozs7SUF0QlUsb0NBQXFCOzs7Ozs7SUFBNUIsVUFBNkIsR0FBUSxFQUFFLGFBQXFCLEVBQUUsZ0JBQXdDOzs7WUFDNUYsd0JBQXdCLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDNUMsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDakQsS0FBZ0IsSUFBQSxxQkFBQSxpQkFBQSxnQkFBZ0IsQ0FBQSxrREFBQSxnRkFBRTtvQkFBN0IsSUFBTSxDQUFDLDZCQUFBO29CQUNSLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO2lCQUMxRDs7Ozs7Ozs7O1NBQ0o7UUFDRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7Ozs7Ozs7SUFFTSxvQ0FBcUI7Ozs7OztJQUE1QixVQUE2QixLQUFnQixFQUFFLEdBQVEsRUFBRSxhQUFxQjs7O1lBQ3BFLG1CQUFtQixHQUFHLElBQUksS0FBSyxFQUFFOztZQUNqQyx1QkFBdUIsR0FBRyxtQkFBQSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFjO1FBQ25HLElBQUksdUJBQXVCLElBQUksdUJBQXVCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQy9ELEtBQWdCLElBQUEsNEJBQUEsaUJBQUEsdUJBQXVCLENBQUEsZ0VBQUEscUdBQUU7b0JBQXBDLElBQU0sQ0FBQyxvQ0FBQTs7d0JBQ0YsZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQztvQkFDbEQsZUFBZSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQzdDOzs7Ozs7Ozs7U0FDSjtRQUNELE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQXZCRCxJQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBBY3R1YWxQYXJhbWV0ZXIgfSBmcm9tIFwiLi4vcGFyYW1ldGVyL1dGQWN0dWFsUGFyYW1ldGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VyaWFsaXplVXRpbHMge1xyXG4gICAgc3RhdGljIHNldExpc3RBdHRyaWJ1dGVWYWx1ZShvYmo6IGFueSwgYXR0cmlidXRlTmFtZTogc3RyaW5nLCBhY3R1YWxQYXJhbWV0ZXJzOiBBcnJheTxBY3R1YWxQYXJhbWV0ZXI+KSB7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaWYgKGFjdHVhbFBhcmFtZXRlcnMgJiYgYWN0dWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBhY3R1YWxQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudHMucHVzaChwLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgQnBtbk1vZGVsSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgYXR0cmlidXRlTmFtZSwgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0TGlzdEZyb21Kc29uT2JqZWN0KG1vZGVsOiBCcG1uTW9kZWwsIG9iajogYW55LCBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpOiBBcnJheTxBY3R1YWxQYXJhbWV0ZXI+IHtcclxuICAgICAgICBjb25zdCBhY3R1YWxQYXJhbWV0ZXJMaXN0ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsUGFyYW1ldGVyc0VsZW1lbnQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBhdHRyaWJ1dGVOYW1lKSBhcyBBcnJheTxhbnk+O1xyXG4gICAgICAgIGlmIChhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudCAmJiBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBhY3R1YWxQYXJhbWV0ZXJzRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsUGFyYW1ldGVyID0gbmV3IEFjdHVhbFBhcmFtZXRlcihtb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxQYXJhbWV0ZXIuTG9hZEZyb21Kc29uT2JqZWN0KHApO1xyXG4gICAgICAgICAgICAgICAgYWN0dWFsUGFyYW1ldGVyTGlzdC5wdXNoKGFjdHVhbFBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFjdHVhbFBhcmFtZXRlckxpc3Q7XHJcbiAgICB9XHJcbn0iXX0=