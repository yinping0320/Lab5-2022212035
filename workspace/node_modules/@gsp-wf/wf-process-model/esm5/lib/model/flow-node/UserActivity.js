/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, UserTask } from "@edp-pmf/bpmn-model";
import { ApprovalPivotConfig } from "../ApprovalPivotConfig";
import { CheckCondition } from "../CheckCondition";
import { ExtendProperty } from "../ExtendProperty";
import { AssignmentStrategy } from "../extension/assignment-strategy/AssignmentStrategy";
import { AssignPerformerConfig } from "../extension/assignment-strategy/AssignPerformerConfig";
import { BackWardRule } from "../extension/completion-strategy/BackWardRule";
import { ConclusionItem } from "../extension/completion-strategy/ConclusionItem";
import { CounterSignRule } from "../extension/completion-strategy/CounterSignRule";
import { ExecuteWorkItemMode } from "../extension/completion-strategy/ExecuteWorkItemMode";
import { WorkFlowAction } from "../extension/completion-strategy/WorkFlowAction";
import { CustomizeAction } from "../extension/CustomizeAction";
import { DisplayTerminal } from "../extension/DisplayTerminal";
import { ExecuteForm } from "../extension/ExecuteForm";
import { JumpScope } from "../extension/JumpScope";
import { Component } from "../extension/tool/Component";
import { Tool } from "../extension/tool/Tool";
import { HumanPerformerImpl } from "../HumanPerformerImpl";
import { ImageSettings } from "../ImageSetting";
import { MessageNotice } from "../MessageNotice";
import { TitleExpression } from "../mex/TitleExpression";
import { OrganizationPotentialOwner } from "../OrganizationPotentialOwner";
import { ActivityExecutorParticipant } from "../participants/old/ActivityExecutorParticipant";
import { ComponentParticipant } from "../participants/old/ComponentParticipant";
import { MatrixParticipant } from "../participants/old/MatrixParticipant";
import { PositionParticipant } from "../participants/old/PositionParticipant";
import { ReportingLineParticipant } from "../participants/old/ReportingLineParticipant";
import { UserParticipant } from "../participants/old/UserParticipant";
import { OrganizationParticipantExpression } from "../participants/OrganizationParticipantExpression";
import { ParticipantExpression } from "../participants/ParticipantExpression";
import { ParticipantScheme } from "../participants/ParticipantScheme";
import { ParticipantSetting } from "../participants/ParticipantSetting";
import { PotentialOwnerImpl } from "../PotentialOwnerImpl";
import { TimeLimitControl } from "../TimeLimitControl";
import { UrgeHandleRule } from "../UrgeHandleRule";
import { VariableSetting } from "../VariableSetting";
import { Notification } from "../extension/Notification";
import { OtherAssignNodes } from "../extension/OtherAssignNodes";
var UserActivity = /** @class */ (function (_super) {
    tslib_1.__extends(UserActivity, _super);
    function UserActivity(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = UserActivity.Clr_Type_ID;
        // 扩展属性
        _this.AssignmentStrategy = AssignmentStrategy.ALL;
        _this.humanPerformers = new Array();
        _this.potentialOwners = new Array();
        _this.dynamicParticipants = new Array();
        // 审批结论枚举列表
        _this.Conclusions = new Array();
        // 外部工具集
        _this.Tools = new Array();
        // 业务活动参数
        _this.BizParameters = new Array();
        _this.ParticipantSchemes = new Array();
        _this.CounterSignRules = null;
        _this.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
        _this.DisplayTerminal = DisplayTerminal.ALL;
        _this.Retrievable = true;
        _this.AddSignFrontAble = false;
        _this.AddSignBehindAble = false;
        _this.SelectTargetAble = false;
        _this.transferAble = true;
        _this.ParticipantSetting = new ParticipantSetting(model);
        _this.anonymous = false;
        _this.anonymousText = '办理人';
        _this.variableSettings = new Array();
        return _this;
    }
    /**
     * @return {?}
     */
    UserActivity.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new UserActivity(this.Model);
    };
    /**
     * @return {?}
     */
    UserActivity.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.ParticipantSchemes = new Array();
        this.CounterSignRules = new Array();
        this.Retrievable = true;
        this.AddSignFrontAble = false;
        this.AddSignBehindAble = false;
        this.transferAble = true;
        this.AssignmentStrategy = AssignmentStrategy.ALL;
        this.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
        this.DisplayTerminal = DisplayTerminal.ALL;
        this.NotificationList = new Array();
        //
        this.Conclusions = new Array();
        this.ExecuteForms = new Array();
        this.customizeActions = new Array();
        //跳转
        this.SelectTargetAble = false;
        this.JumpScope = null;
        this.otherAssignNodes = null;
        this.SelectBranch = false;
        this.anonymous = false;
        this.anonymousText = '办理人';
        this.variableSettings = new Array();
        this.messageNotices = new Array();
        this.extendProperties = new Array();
        this.NotifyAble = false;
        this.urgeHandleRule = null;
        this.imageSettings = null;
        this.humanPerformers = new Array();
        this.potentialOwners = new Array();
        this.dynamicParticipants = new Array();
    };
    /**
     * @return {?}
     */
    UserActivity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, 'BizActivityID', this.BizActivityID);
        BpmnModelHelper.SetAttributeValue(obj, 'BizActivityName', this.BizActivityName);
        BpmnModelHelper.SetAttributeValue(obj, 'AssignmentStrategy', this.AssignmentStrategy);
        BpmnModelHelper.SetAttributeValue(obj, 'ExecuteWorkItemMode', this.ExecuteWorkItemMode);
        BpmnModelHelper.SetAttributeValue(obj, 'DisplayTerminal', this.DisplayTerminal);
        BpmnModelHelper.SetAttributeValue(obj, 'Retrievable', this.Retrievable);
        BpmnModelHelper.SetAttributeValue(obj, 'AddSignFrontAble', this.AddSignFrontAble);
        BpmnModelHelper.SetAttributeValue(obj, 'AddSignBehindAble', this.AddSignBehindAble);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectTargetAble', this.SelectTargetAble);
        BpmnModelHelper.SetAttributeValue(obj, 'TransferAble', this.transferAble);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectBranch', this.SelectBranch);
        BpmnModelHelper.SetAttributeValue(obj, 'Anonymous', this.anonymous);
        BpmnModelHelper.SetAttributeValue(obj, 'AnonymousText', this.anonymousText);
        BpmnModelHelper.SetAttributeValue(obj, "NotifyAble", this.NotifyAble);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    UserActivity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.BizActivityID = obj.BizActivityID;
        this.BizActivityName = obj.BizActivityName;
        this.AssignmentStrategy = obj.AssignmentStrategy;
        this.ExecuteWorkItemMode = obj.ExecuteWorkItemMode;
        this.DisplayTerminal = obj.DisplayTerminal;
        this.Retrievable = obj.Retrievable;
        this.AddSignFrontAble = obj.AddSignFrontAble;
        this.AddSignBehindAble = obj.AddSignBehindAble;
        this.SelectTargetAble = obj.SelectTargetAble;
        this.SelectBranch = obj.SelectBranch;
        this.transferAble = obj.TransferAble;
        this.anonymous = obj.Anonymous;
        this.anonymousText = obj.AnonymousText;
        this.NotifyAble = obj.NotifyAble;
    };
    /**
     * @protected
     * @return {?}
     */
    UserActivity.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j, e_10, _k, e_11, _l, e_12, _m;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.ParticipantSchemes != null) {
            try {
                for (var _o = tslib_1.__values(this.ParticipantSchemes), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var scheme = _p.value;
                    scheme.MexTag = UserActivity.MEXTAG;
                    list.push(scheme);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_a = _o.return)) _a.call(_o);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.ExecuteForms != null) {
            try {
                for (var _q = tslib_1.__values(this.ExecuteForms), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var form = _r.value;
                    form.MexTag = UserActivity.MEXTAG;
                    list.push(form);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_b = _q.return)) _b.call(_q);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.CounterSignRules != null) {
            try {
                for (var _s = tslib_1.__values(this.CounterSignRules), _t = _s.next(); !_t.done; _t = _s.next()) {
                    var rule = _t.value;
                    rule.MexTag = UserActivity.MEXTAG;
                    list.push(rule);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_t && !_t.done && (_c = _s.return)) _c.call(_s);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.NotificationList != null) {
            try {
                for (var _u = tslib_1.__values(this.NotificationList), _v = _u.next(); !_v.done; _v = _u.next()) {
                    var item = _v.value;
                    item.MexTag = UserActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_v && !_v.done && (_d = _u.return)) _d.call(_u);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.Conclusions != null) {
            try {
                for (var _w = tslib_1.__values(this.Conclusions), _x = _w.next(); !_x.done; _x = _w.next()) {
                    var item = _x.value;
                    item.MexTag = UserActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_x && !_x.done && (_e = _w.return)) _e.call(_w);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.Tools != null) {
            try {
                for (var _y = tslib_1.__values(this.Tools), _z = _y.next(); !_z.done; _z = _y.next()) {
                    var item = _z.value;
                    item.MexTag = UserActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_z && !_z.done && (_f = _y.return)) _f.call(_y);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.AssignPerformerConfig != null) {
            this.AssignPerformerConfig.MexTag = UserActivity.MEXTAG;
            list.push(this.AssignPerformerConfig);
        }
        if (this.JumpScope != null) {
            this.JumpScope.MexTag = UserActivity.MEXTAG;
            list.push(this.JumpScope);
        }
        if (this.urgeHandleRule != null) {
            this.urgeHandleRule.MexTag = UserActivity.MEXTAG;
            list.push(this.urgeHandleRule);
        }
        if (this.BackWardRule != null) {
            this.BackWardRule.MexTag = UserActivity.MEXTAG;
            list.push(this.BackWardRule);
        }
        if (this.ParticipantSetting != null) {
            this.ParticipantSetting.MexTag = UserActivity.MEXTAG;
            list.push(this.ParticipantSetting);
        }
        if (this.taskTitle != null) {
            this.taskTitle.MexTag = UserActivity.MEXTAG;
            list.push(this.taskTitle);
        }
        if (this.customizeActions != null) {
            try {
                for (var _0 = tslib_1.__values(this.customizeActions), _1 = _0.next(); !_1.done; _1 = _0.next()) {
                    var action = _1.value;
                    action.MexTag = UserActivity.MEXTAG;
                    list.push(action);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_1 && !_1.done && (_g = _0.return)) _g.call(_0);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.timeLimitControl != null) {
            this.timeLimitControl.MexTag = UserActivity.MEXTAG;
            list.push(this.timeLimitControl);
        }
        if (this.variableSettings != null) {
            try {
                for (var _2 = tslib_1.__values(this.variableSettings), _3 = _2.next(); !_3.done; _3 = _2.next()) {
                    var v = _3.value;
                    v.MexTag = UserActivity.MEXTAG;
                    list.push(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_3 && !_3.done && (_h = _2.return)) _h.call(_2);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (this.messageNotices != null) {
            try {
                for (var _4 = tslib_1.__values(this.messageNotices), _5 = _4.next(); !_5.done; _5 = _4.next()) {
                    var m = _5.value;
                    m.MexTag = UserActivity.MEXTAG;
                    list.push(m);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_5 && !_5.done && (_j = _4.return)) _j.call(_4);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        if (this.extendProperties != null) {
            try {
                for (var _6 = tslib_1.__values(this.extendProperties), _7 = _6.next(); !_7.done; _7 = _6.next()) {
                    var e = _7.value;
                    e.MexTag = UserActivity.MEXTAG;
                    list.push(e);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_7 && !_7.done && (_k = _6.return)) _k.call(_6);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (this.approvalPivotConfig != null) {
            this.approvalPivotConfig.MexTag = UserActivity.MEXTAG;
            list.push(this.approvalPivotConfig);
        }
        if (this.imageSettings != null) {
            this.imageSettings.MexTag = UserActivity.MEXTAG;
            list.push(this.imageSettings);
        }
        if (this.checkConditions != null) {
            try {
                for (var _8 = tslib_1.__values(this.checkConditions), _9 = _8.next(); !_9.done; _9 = _8.next()) {
                    var condition = _9.value;
                    condition.MexTag = UserActivity.MEXTAG;
                    list.push(condition);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_9 && !_9.done && (_l = _8.return)) _l.call(_8);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (this.dynamicParticipants != null) {
            try {
                for (var _10 = tslib_1.__values(this.dynamicParticipants), _11 = _10.next(); !_11.done; _11 = _10.next()) {
                    var participant = _11.value;
                    participant.MexTag = UserActivity.MEXTAG;
                    list.push(participant);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_11 && !_11.done && (_m = _10.return)) _m.call(_10);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        if (this.otherAssignNodes != null) {
            this.otherAssignNodes.MexTag = UserActivity.MEXTAG;
            list.push(this.otherAssignNodes);
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    UserActivity.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_13, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== UserActivity.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case ParticipantScheme.Clr_Type_ID:
                        this.ParticipantSchemes.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ExecuteForm.Clr_Type_ID:
                        this.ExecuteForms.push((/** @type {?} */ (extensionElement)));
                        break;
                    case CounterSignRule.Clr_Type_ID:
                        this.CounterSignRules.push((/** @type {?} */ (extensionElement)));
                        break;
                    case Notification.Clr_Type_ID:
                        this.NotificationList.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ConclusionItem.Clr_Type_ID:
                        this.Conclusions.push((/** @type {?} */ (extensionElement)));
                        break;
                    case AssignPerformerConfig.Clr_Type_ID:
                        this.AssignPerformerConfig = ((/** @type {?} */ (extensionElement)));
                        break;
                    case JumpScope.Clr_Type_ID:
                        this.JumpScope = ((/** @type {?} */ (extensionElement)));
                        break;
                    case UrgeHandleRule.Clr_Type_ID:
                        this.urgeHandleRule = ((/** @type {?} */ (extensionElement)));
                        break;
                    case BackWardRule.Clr_Type_ID:
                        this.BackWardRule = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ParticipantSetting.Clr_Type_ID:
                        this.ParticipantSetting = ((/** @type {?} */ (extensionElement)));
                        break;
                    case TitleExpression.Clr_Type_ID:
                        this.taskTitle = ((/** @type {?} */ (extensionElement)));
                        break;
                    case CustomizeAction.Clr_Type_ID:
                        this.customizeActions.push((/** @type {?} */ (extensionElement)));
                        break;
                    case TimeLimitControl.Clr_Type_ID:
                        this.timeLimitControl = ((/** @type {?} */ (extensionElement)));
                        break;
                    case VariableSetting.Clr_Type_ID:
                        this.variableSettings.push((/** @type {?} */ (extensionElement)));
                        break;
                    case MessageNotice.Clr_Type_ID:
                        this.messageNotices.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ExtendProperty.Clr_Type_ID:
                        this.extendProperties.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ApprovalPivotConfig.Clr_Type_ID:
                        this.approvalPivotConfig = (/** @type {?} */ (extensionElement));
                        break;
                    case ImageSettings.Clr_Type_ID:
                        this.imageSettings = (/** @type {?} */ (extensionElement));
                        break;
                    case CheckCondition.Clr_Type_ID:
                        if (this.checkConditions == null) {
                            this.checkConditions = new Array();
                        }
                        this.checkConditions.push((/** @type {?} */ (extensionElement)));
                        break;
                    case OtherAssignNodes.Clr_Type_ID:
                        this.otherAssignNodes = (/** @type {?} */ (extensionElement));
                        break;
                    default:
                        if (extensionElement instanceof Tool) {
                            this.Tools.push((/** @type {?} */ (extensionElement)));
                        }
                        else if (extensionElement instanceof ParticipantExpression) {
                            this.dynamicParticipants.push((/** @type {?} */ (extensionElement)));
                        }
                        break;
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_13) throw e_13.error; }
        }
    };
    /**
     * 审批活动预制通过，驳回工作项
     * @param model
     */
    /**
     * 审批活动预制通过，驳回工作项
     * @param {?} model
     * @return {?}
     */
    UserActivity.prototype.initConclusions = /**
     * 审批活动预制通过，驳回工作项
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var pass = new ConclusionItem(model);
        pass.Value = 'Pass';
        pass.Text = '通过';
        pass.WorkFlowAction = WorkFlowAction.Forward;
        pass.IsDefault = true;
        pass.commentNecessary = false;
        this.Conclusions.push(pass);
        /** @type {?} */
        var back = new ConclusionItem(model);
        back.Value = 'Back';
        back.Text = '驳回';
        back.WorkFlowAction = WorkFlowAction.Backward;
        back.IsDefault = false;
        back.commentNecessary = true;
        this.Conclusions.push(back);
        // 审批项存在反向时，初始化驳回规则
        this.BackWardRule = new BackWardRule(model);
    };
    /**
     * 初始业务活动审批项
     * @param model
     * @param actions
     */
    /**
     * 初始业务活动审批项
     * @param {?} model
     * @param {?} actions
     * @return {?}
     */
    UserActivity.prototype.setBizConclusions = /**
     * 初始业务活动审批项
     * @param {?} model
     * @param {?} actions
     * @return {?}
     */
    function (model, actions) {
        var e_14, _a;
        if (actions && actions.length > 0) {
            try {
                for (var actions_1 = tslib_1.__values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
                    var a = actions_1_1.value;
                    /** @type {?} */
                    var conclusion = new ConclusionItem(model);
                    conclusion.Value = a.code;
                    conclusion.Text = a.name;
                    conclusion.WorkFlowAction = a.workFlowAction;
                    conclusion.IsDefault = a === actions[0] ? true : false;
                    conclusion.commentNecessary = false;
                    this.Conclusions.push(conclusion);
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_14) throw e_14.error; }
            }
            if (this.Conclusions.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.WorkFlowAction === WorkFlowAction.Backward; })).length > 0) {
                // 审批项存在反向时，初始化驳回规则
                this.BackWardRule = new BackWardRule(model);
            }
        }
    };
    /**
     * undo操作临时clone方法
     * @returns BpmnElement
     */
    /**
     * undo操作临时clone方法
     * @return {?} BpmnElement
     */
    UserActivity.prototype.clone = /**
     * undo操作临时clone方法
     * @return {?} BpmnElement
     */
    function () {
        var e_15, _a, e_16, _b, e_17, _c, e_18, _d, e_19, _e, e_20, _f, e_21, _g, e_22, _h, e_23, _j, e_24, _k, e_25, _l, e_26, _m, e_27, _o;
        /** @type {?} */
        var userActivity = new UserActivity(this.Model);
        userActivity.Name = this.Name;
        if (this.taskTitle) {
            userActivity.taskTitle = this.taskTitle.clone();
        }
        /** @type {?} */
        var resourceRoles = this.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            try {
                for (var resourceRoles_1 = tslib_1.__values(resourceRoles), resourceRoles_1_1 = resourceRoles_1.next(); !resourceRoles_1_1.done; resourceRoles_1_1 = resourceRoles_1.next()) {
                    var role = resourceRoles_1_1.value;
                    if (role instanceof UserParticipant) {
                        /** @type {?} */
                        var user = (/** @type {?} */ (role));
                        /** @type {?} */
                        var userParticipant = user.clone();
                        userActivity.AddResourceRole(userParticipant);
                    }
                    else if (role instanceof PositionParticipant) {
                        /** @type {?} */
                        var position = (/** @type {?} */ (role));
                        /** @type {?} */
                        var positionParticipant = position.clone();
                        userActivity.AddResourceRole(positionParticipant);
                    }
                    else if (role instanceof ReportingLineParticipant) {
                        /** @type {?} */
                        var reportingLine = (/** @type {?} */ (role));
                        /** @type {?} */
                        var reportingLineParticipant = reportingLine.clone();
                        userActivity.AddResourceRole(reportingLineParticipant);
                    }
                    else if (role instanceof ActivityExecutorParticipant) {
                        /** @type {?} */
                        var activityExecutor = (/** @type {?} */ (role));
                        /** @type {?} */
                        var activityExecutorParticipant = activityExecutor.clone();
                        userActivity.AddResourceRole(activityExecutorParticipant);
                    }
                    else if (role instanceof ComponentParticipant) {
                        /** @type {?} */
                        var component = (/** @type {?} */ (role));
                        /** @type {?} */
                        var componentParticipant = component.clone();
                        userActivity.AddResourceRole(componentParticipant);
                    }
                    else if (role instanceof MatrixParticipant) {
                        /** @type {?} */
                        var matrix = (/** @type {?} */ (role));
                        /** @type {?} */
                        var matrixParticipant = matrix.clone();
                        userActivity.AddResourceRole(matrixParticipant);
                    }
                    else if (role instanceof OrganizationPotentialOwner) {
                        /** @type {?} */
                        var org = (/** @type {?} */ (role));
                        /** @type {?} */
                        var organizationPotentialOwner = org.clone();
                        userActivity.AddResourceRole(organizationPotentialOwner);
                    }
                    else if (role instanceof HumanPerformerImpl) {
                        /** @type {?} */
                        var performer = (/** @type {?} */ (role));
                        /** @type {?} */
                        var humanPerformerImpl = performer.clone();
                        userActivity.AddResourceRole(humanPerformerImpl);
                    }
                    else if (role instanceof PotentialOwnerImpl) {
                        /** @type {?} */
                        var owner = (/** @type {?} */ (role));
                        /** @type {?} */
                        var potentialOwnerImpl = owner.clone();
                        userActivity.AddResourceRole(potentialOwnerImpl);
                    }
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (resourceRoles_1_1 && !resourceRoles_1_1.done && (_a = resourceRoles_1.return)) _a.call(resourceRoles_1);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
        userActivity.ParticipantSchemes = new Array();
        if (this.ParticipantSchemes && this.ParticipantSchemes.length > 0) {
            try {
                for (var _p = tslib_1.__values(this.ParticipantSchemes), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var s = _q.value;
                    /** @type {?} */
                    var scheme = s.clone();
                    userActivity.ParticipantSchemes.push(scheme);
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_b = _p.return)) _b.call(_p);
                }
                finally { if (e_16) throw e_16.error; }
            }
        }
        if (this.ParticipantSetting) {
            userActivity.ParticipantSetting = this.ParticipantSetting.clone();
        }
        userActivity.AssignmentStrategy = this.AssignmentStrategy;
        if (this.AssignPerformerConfig) {
            userActivity.AssignPerformerConfig = this.AssignPerformerConfig.clone();
        }
        userActivity.PerformerNotFundExecption = this.PerformerNotFundExecption;
        userActivity.Retrievable = this.Retrievable;
        userActivity.IsRollback = this.IsRollback;
        userActivity.SelectBranch = this.SelectBranch;
        userActivity.NotifyAble = this.NotifyAble;
        userActivity.AddSignFrontAble = this.AddSignFrontAble;
        userActivity.AddSignBehindAble = this.AddSignBehindAble;
        userActivity.Priority = this.Priority;
        userActivity.ExecuteWorkItemMode = this.ExecuteWorkItemMode;
        userActivity.DisplayTerminal = this.DisplayTerminal;
        userActivity.SelectTargetAble = this.SelectTargetAble;
        if (this.JumpScope) {
            userActivity.JumpScope = this.JumpScope.clone();
        }
        if (this.BackWardRule) {
            userActivity.BackWardRule = this.BackWardRule.clone();
        }
        if (this.LoopCharacteristics) {
            userActivity.LoopCharacteristics = this.LoopCharacteristics.clone();
        }
        userActivity.transferAble = this.transferAble;
        userActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            try {
                for (var _r = tslib_1.__values(this.ExecuteForms), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var f = _s.value;
                    /** @type {?} */
                    var executeForm = f.clone();
                    userActivity.ExecuteForms.push(executeForm);
                }
            }
            catch (e_17_1) { e_17 = { error: e_17_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_c = _r.return)) _c.call(_r);
                }
                finally { if (e_17) throw e_17.error; }
            }
        }
        userActivity.customizeActions = new Array();
        if (this.customizeActions && this.customizeActions.length > 0) {
            try {
                for (var _t = tslib_1.__values(this.customizeActions), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var a = _u.value;
                    /** @type {?} */
                    var customizeAction = a.clone();
                    userActivity.customizeActions.push(customizeAction);
                }
            }
            catch (e_18_1) { e_18 = { error: e_18_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_d = _t.return)) _d.call(_t);
                }
                finally { if (e_18) throw e_18.error; }
            }
        }
        userActivity.CounterSignRules = new Array();
        if (this.CounterSignRules && this.CounterSignRules.length > 0) {
            try {
                for (var _v = tslib_1.__values(this.CounterSignRules), _w = _v.next(); !_w.done; _w = _v.next()) {
                    var r = _w.value;
                    /** @type {?} */
                    var counterSignRule = r.clone();
                    userActivity.CounterSignRules.push(counterSignRule);
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (_w && !_w.done && (_e = _v.return)) _e.call(_v);
                }
                finally { if (e_19) throw e_19.error; }
            }
        }
        userActivity.AdhocActivitySecurities = new Array();
        if (this.AdhocActivitySecurities && this.AdhocActivitySecurities.length > 0) {
            try {
                for (var _x = tslib_1.__values(this.AdhocActivitySecurities), _y = _x.next(); !_y.done; _y = _x.next()) {
                    var s = _y.value;
                    userActivity.AdhocActivitySecurities.push(s);
                }
            }
            catch (e_20_1) { e_20 = { error: e_20_1 }; }
            finally {
                try {
                    if (_y && !_y.done && (_f = _x.return)) _f.call(_x);
                }
                finally { if (e_20) throw e_20.error; }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        userActivity.NotificationList = new Array();
        userActivity.anonymous = this.anonymous;
        userActivity.anonymousText = this.anonymousText;
        userActivity.BizActivityID = this.BizActivityID;
        userActivity.BizActivityName = this.BizActivityName;
        userActivity.Conclusions = new Array();
        if (this.Conclusions && this.Conclusions.length > 0) {
            try {
                for (var _z = tslib_1.__values(this.Conclusions), _0 = _z.next(); !_0.done; _0 = _z.next()) {
                    var c = _0.value;
                    /** @type {?} */
                    var conclusion = c.clone();
                    userActivity.Conclusions.push(conclusion);
                }
            }
            catch (e_21_1) { e_21 = { error: e_21_1 }; }
            finally {
                try {
                    if (_0 && !_0.done && (_g = _z.return)) _g.call(_z);
                }
                finally { if (e_21) throw e_21.error; }
            }
        }
        userActivity.Tools = new Array();
        if (this.Tools && this.Tools.length > 0) {
            try {
                for (var _1 = tslib_1.__values(this.Tools), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                    var t = _2.value;
                    if (t instanceof Component) {
                        /** @type {?} */
                        var c = (/** @type {?} */ (t));
                        /** @type {?} */
                        var tool = c.clone();
                        userActivity.Tools.push(tool);
                    }
                }
            }
            catch (e_22_1) { e_22 = { error: e_22_1 }; }
            finally {
                try {
                    if (_2 && !_2.done && (_h = _1.return)) _h.call(_1);
                }
                finally { if (e_22) throw e_22.error; }
            }
        }
        userActivity.dynamicParticipants = new Array();
        if (this.dynamicParticipants && this.dynamicParticipants.length > 0) {
            try {
                for (var _3 = tslib_1.__values(this.dynamicParticipants), _4 = _3.next(); !_4.done; _4 = _3.next()) {
                    var p = _4.value;
                    if (p instanceof OrganizationParticipantExpression) {
                        /** @type {?} */
                        var o = (/** @type {?} */ (p));
                        /** @type {?} */
                        var organizationParticipantExpression = o.clone();
                        userActivity.dynamicParticipants.push(organizationParticipantExpression);
                    }
                }
            }
            catch (e_23_1) { e_23 = { error: e_23_1 }; }
            finally {
                try {
                    if (_4 && !_4.done && (_j = _3.return)) _j.call(_3);
                }
                finally { if (e_23) throw e_23.error; }
            }
        }
        // TODO: 这个好像暂时还没启用，赋空值
        userActivity.BizParameters = new Array();
        if (this.timeLimitControl) {
            userActivity.timeLimitControl = this.timeLimitControl.clone();
        }
        userActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            try {
                for (var _5 = tslib_1.__values(this.variableSettings), _6 = _5.next(); !_6.done; _6 = _5.next()) {
                    var v = _6.value;
                    /** @type {?} */
                    var variableSetting = v.clone();
                    userActivity.variableSettings.push(variableSetting);
                }
            }
            catch (e_24_1) { e_24 = { error: e_24_1 }; }
            finally {
                try {
                    if (_6 && !_6.done && (_k = _5.return)) _k.call(_5);
                }
                finally { if (e_24) throw e_24.error; }
            }
        }
        userActivity.messageNotices = new Array();
        if (this.messageNotices && this.messageNotices.length > 0) {
            try {
                for (var _7 = tslib_1.__values(this.messageNotices), _8 = _7.next(); !_8.done; _8 = _7.next()) {
                    var m = _8.value;
                    /** @type {?} */
                    var messageNotice = m.clone();
                    userActivity.messageNotices.push(messageNotice);
                }
            }
            catch (e_25_1) { e_25 = { error: e_25_1 }; }
            finally {
                try {
                    if (_8 && !_8.done && (_l = _7.return)) _l.call(_7);
                }
                finally { if (e_25) throw e_25.error; }
            }
        }
        userActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            try {
                for (var _9 = tslib_1.__values(this.extendProperties), _10 = _9.next(); !_10.done; _10 = _9.next()) {
                    var e = _10.value;
                    /** @type {?} */
                    var extendProperty = e.clone();
                    userActivity.extendProperties.push(extendProperty);
                }
            }
            catch (e_26_1) { e_26 = { error: e_26_1 }; }
            finally {
                try {
                    if (_10 && !_10.done && (_m = _9.return)) _m.call(_9);
                }
                finally { if (e_26) throw e_26.error; }
            }
        }
        if (this.approvalPivotConfig) {
            userActivity.approvalPivotConfig = this.approvalPivotConfig.clone();
        }
        if (this.urgeHandleRule) {
            userActivity.urgeHandleRule = this.urgeHandleRule.clone();
        }
        if (this.imageSettings) {
            userActivity.imageSettings = this.imageSettings.clone();
        }
        if (this.checkConditions && this.checkConditions.length > 0) {
            userActivity.checkConditions = new Array();
            try {
                for (var _11 = tslib_1.__values(this.checkConditions), _12 = _11.next(); !_12.done; _12 = _11.next()) {
                    var c = _12.value;
                    /** @type {?} */
                    var condition = c.clone();
                    userActivity.checkConditions.push(condition);
                }
            }
            catch (e_27_1) { e_27 = { error: e_27_1 }; }
            finally {
                try {
                    if (_12 && !_12.done && (_o = _11.return)) _o.call(_11);
                }
                finally { if (e_27) throw e_27.error; }
            }
        }
        if (this.otherAssignNodes) {
            userActivity.otherAssignNodes = this.otherAssignNodes.clone();
        }
        return userActivity;
    };
    /**
     * 模型校验
     * @param errors 模型校验错误信息
     */
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    UserActivity.prototype.Validate = /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    function (errors) {
        // TODO: 需要添加自定义校验信息
        _super.prototype.Validate.call(this, errors);
    };
    UserActivity.Clr_Type_ID = "wf.UserActivity";
    UserActivity.MEXTAG = 'wf.UserActivity';
    return UserActivity;
}(UserTask));
export { UserActivity };
if (false) {
    /** @type {?} */
    UserActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @protected
     */
    UserActivity.MEXTAG;
    /** @type {?} */
    UserActivity.prototype.ClrTypeID;
    /** @type {?} */
    UserActivity.prototype.AssignmentStrategy;
    /** @type {?} */
    UserActivity.prototype.AssignPerformerConfig;
    /** @type {?} */
    UserActivity.prototype.PerformerNotFundExecption;
    /** @type {?} */
    UserActivity.prototype.Retrievable;
    /** @type {?} */
    UserActivity.prototype.IsRollback;
    /** @type {?} */
    UserActivity.prototype.SelectBranch;
    /** @type {?} */
    UserActivity.prototype.NotifyAble;
    /** @type {?} */
    UserActivity.prototype.AddSignFrontAble;
    /** @type {?} */
    UserActivity.prototype.AddSignBehindAble;
    /** @type {?} */
    UserActivity.prototype.Priority;
    /** @type {?} */
    UserActivity.prototype.ExecuteWorkItemMode;
    /** @type {?} */
    UserActivity.prototype.DisplayTerminal;
    /** @type {?} */
    UserActivity.prototype.SelectTargetAble;
    /** @type {?} */
    UserActivity.prototype.JumpScope;
    /** @type {?} */
    UserActivity.prototype.BackWardRule;
    /** @type {?} */
    UserActivity.prototype.transferAble;
    /** @type {?} */
    UserActivity.prototype.ExecuteForms;
    /** @type {?} */
    UserActivity.prototype.customizeActions;
    /** @type {?} */
    UserActivity.prototype.ParticipantSchemes;
    /** @type {?} */
    UserActivity.prototype.ParticipantSetting;
    /** @type {?} */
    UserActivity.prototype.CounterSignRules;
    /** @type {?} */
    UserActivity.prototype.AdhocActivitySecurities;
    /** @type {?} */
    UserActivity.prototype.NotificationList;
    /** @type {?} */
    UserActivity.prototype.humanPerformers;
    /** @type {?} */
    UserActivity.prototype.potentialOwners;
    /** @type {?} */
    UserActivity.prototype.dynamicParticipants;
    /** @type {?} */
    UserActivity.prototype.taskTitle;
    /** @type {?} */
    UserActivity.prototype.anonymous;
    /** @type {?} */
    UserActivity.prototype.anonymousText;
    /** @type {?} */
    UserActivity.prototype.BizActivityID;
    /** @type {?} */
    UserActivity.prototype.BizActivityName;
    /** @type {?} */
    UserActivity.prototype.Conclusions;
    /** @type {?} */
    UserActivity.prototype.Tools;
    /** @type {?} */
    UserActivity.prototype.BizParameters;
    /** @type {?} */
    UserActivity.prototype.timeLimitControl;
    /** @type {?} */
    UserActivity.prototype.variableSettings;
    /** @type {?} */
    UserActivity.prototype.messageNotices;
    /** @type {?} */
    UserActivity.prototype.extendProperties;
    /** @type {?} */
    UserActivity.prototype.approvalPivotConfig;
    /** @type {?} */
    UserActivity.prototype.urgeHandleRule;
    /** @type {?} */
    UserActivity.prototype.imageSettings;
    /** @type {?} */
    UserActivity.prototype.checkConditions;
    /** @type {?} */
    UserActivity.prototype.otherAssignNodes;
}
BpmnModelHelper.RegisterElementType(new UserActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,