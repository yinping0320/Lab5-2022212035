/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, StartEvent, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ExtendProperty } from "../ExtendProperty";
import { ExecuteForm, TerminalType } from "../extension/ExecuteForm";
import { JumpScope } from "../extension/JumpScope";
import { OtherAssignNodes } from "../extension/OtherAssignNodes";
import { ActualParameter } from "../parameter/WFActualParameter";
var StartActivity = /** @class */ (function (_super) {
    tslib_1.__extends(StartActivity, _super);
    function StartActivity(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = StartActivity.Clr_Type_ID;
        _this.sendBackedTask = true;
        _this.selectTargetAble = false;
        return _this;
    }
    /**
     * @return {?}
     */
    StartActivity.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.ExecuteForms = new Array();
        this.extendProperties = new Array();
        this.sendBackedTask = true;
        this.selectTargetAble = false;
        this.jumpScope = null;
        this.otherAssignNodes = null;
    };
    /**
     * @return {?}
     */
    StartActivity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, 'SendBackedTask', this.sendBackedTask);
        BpmnModelHelper.SetAttributeValue(obj, 'SelectTargetAble', this.selectTargetAble);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    StartActivity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.sendBackedTask = ExtensionMethod.GetAttributeValue4Boolean(obj, "SendBackedTask");
        this.selectTargetAble = ExtensionMethod.GetAttributeValue4Boolean(obj, "SelectTargetAble");
    };
    /**
     * @protected
     * @return {?}
     */
    StartActivity.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.ExecuteForms != null) {
            try {
                for (var _c = tslib_1.__values(this.ExecuteForms), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var form = _d.value;
                    form.MexTag = StartActivity.MEXTAG;
                    list.push(form);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.extendProperties != null) {
            try {
                for (var _e = tslib_1.__values(this.extendProperties), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var e = _f.value;
                    e.MexTag = StartActivity.MEXTAG;
                    list.push(e);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.jumpScope != null) {
            this.jumpScope.MexTag = StartActivity.MEXTAG;
            list.push(this.jumpScope);
        }
        if (this.otherAssignNodes != null) {
            this.otherAssignNodes.MexTag = StartActivity.MEXTAG;
            list.push(this.otherAssignNodes);
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    StartActivity.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_3, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== StartActivity.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case ExecuteForm.Clr_Type_ID:
                        this.ExecuteForms.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ExtendProperty.Clr_Type_ID:
                        this.extendProperties.push((/** @type {?} */ (extensionElement)));
                        break;
                    case JumpScope.Clr_Type_ID:
                        this.jumpScope = ((/** @type {?} */ (extensionElement)));
                        break;
                    case OtherAssignNodes.Clr_Type_ID:
                        this.otherAssignNodes = ((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @return {?}
     */
    StartActivity.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new StartActivity(this.Model);
    };
    /**
    * 模型校验
    * @param errors 模型校验错误信息
    */
    /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    StartActivity.prototype.Validate = /**
     * 模型校验
     * @param {?} errors 模型校验错误信息
     * @return {?}
     */
    function (errors) {
        // TODO: 需要添加自定义校验信息
        _super.prototype.Validate.call(this, errors);
    };
    /**
     * @return {?}
     */
    StartActivity.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_4, _a, e_5, _b;
        /** @type {?} */
        var startActivity = new StartActivity(this.Model);
        startActivity.Name = this.Name;
        startActivity.sendBackedTask = this.sendBackedTask;
        startActivity.selectTargetAble = this.selectTargetAble;
        startActivity.jumpScope = null;
        if (this.jumpScope) {
            startActivity.jumpScope = this.jumpScope.clone();
        }
        startActivity.ExecuteForms = new Array();
        if (this.ExecuteForms && this.ExecuteForms.length > 0) {
            try {
                for (var _c = tslib_1.__values(this.ExecuteForms), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var f = _d.value;
                    /** @type {?} */
                    var executeForm = f.clone();
                    startActivity.ExecuteForms.push(executeForm);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.extendProperties && this.extendProperties.length > 0) {
            try {
                for (var _e = tslib_1.__values(this.extendProperties), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var e = _f.value;
                    /** @type {?} */
                    var extendProperty = e.clone();
                    startActivity.extendProperties.push(extendProperty);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.otherAssignNodes) {
            startActivity.otherAssignNodes = this.otherAssignNodes.clone();
        }
        return startActivity;
    };
    /**
     * @param {?} forms
     * @return {?}
     */
    StartActivity.prototype.setDefaultForms = /**
     * @param {?} forms
     * @return {?}
     */
    function (forms) {
        var e_6, _a, e_7, _b;
        if (!this.ExecuteForms) {
            this.ExecuteForms = new Array();
        }
        try {
            for (var forms_1 = tslib_1.__values(forms), forms_1_1 = forms_1.next(); !forms_1_1.done; forms_1_1 = forms_1.next()) {
                var form = forms_1_1.value;
                /** @type {?} */
                var params = (/** @type {?} */ (form.urlParameters));
                /** @type {?} */
                var actParas = new Array();
                if (params && params.length > 0) {
                    try {
                        for (var params_1 = tslib_1.__values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                            var para = params_1_1.value;
                            /** @type {?} */
                            var actPara = new ActualParameter(this.Model, para.code, para.value);
                            if (para.Value && para.Value.length >= 8 && para.Value.slice(0, 8) === "{\"expr\":") {
                                actPara.Tag = 'expression';
                            }
                            else {
                                actPara.Tag = 'constant';
                            }
                            actParas.push(actPara);
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (params_1_1 && !params_1_1.done && (_b = params_1.return)) _b.call(params_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
                /** @type {?} */
                var id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                var item = new ExecuteForm(this.Model, id, form.name, actParas);
                item.ComponentId = null;
                item.FormType = '0';
                item.formFormatId = form.id;
                if (form.terminal === 'PC') {
                    item.TerminalType = TerminalType.PC;
                }
                else if (form.terminal === 'Mobile') {
                    item.TerminalType = TerminalType.MOBILE;
                }
                this.ExecuteForms.push(item);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    StartActivity.Clr_Type_ID = "wf.StartActivity";
    StartActivity.MEXTAG = "wf.StartActivity";
    return StartActivity;
}(StartEvent));
export { StartActivity };
if (false) {
    /** @type {?} */
    StartActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    StartActivity.MEXTAG;
    /** @type {?} */
    StartActivity.prototype.ClrTypeID;
    /** @type {?} */
    StartActivity.prototype.ExecuteForms;
    /** @type {?} */
    StartActivity.prototype.extendProperties;
    /** @type {?} */
    StartActivity.prototype.sendBackedTask;
    /** @type {?} */
    StartActivity.prototype.selectTargetAble;
    /** @type {?} */
    StartActivity.prototype.jumpScope;
    /** @type {?} */
    StartActivity.prototype.otherAssignNodes;
}
BpmnModelHelper.RegisterElementType(new StartActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,