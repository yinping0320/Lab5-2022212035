/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod, ExtensionElement } from "@edp-pmf/bpmn-model";
import { ApprovalPivot } from "./ApprovalPivot";
var ApprovalPivotConfig = /** @class */ (function (_super) {
    tslib_1.__extends(ApprovalPivotConfig, _super);
    function ApprovalPivotConfig(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = ApprovalPivotConfig.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    ApprovalPivotConfig.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.approvalPivots = new Array();
    };
    /**
     * @return {?}
     */
    ApprovalPivotConfig.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Title", this.title);
        ExtensionMethod.SetAttributeValue(obj, "Enable", this.enable);
        ExtensionMethod.SetAttributeValue(obj, "Expand", this.expand);
        /** @type {?} */
        var approvalPivots = new Array();
        if (this.approvalPivots !== null && this.approvalPivots.length > 0) {
            this.approvalPivots.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                approvalPivots.push(item.ConvertToJsonObject());
            }));
        }
        ExtensionMethod.SetAttributeValue(obj, "ApprovalPivots", approvalPivots);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ApprovalPivotConfig.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.title = ExtensionMethod.GetAttributeValue4String(obj, "Title");
        this.enable = ExtensionMethod.GetAttributeValue4Boolean(obj, "Enable");
        this.expand = ExtensionMethod.GetAttributeValue4Boolean(obj, "Expand");
        /** @type {?} */
        var approvalPivots = (/** @type {?} */ (ExtensionMethod.GetAttributeValue(obj, "ApprovalPivots")));
        if (approvalPivots !== null && approvalPivots.length > 0) {
            approvalPivots.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var approvalPivot = new ApprovalPivot(_this.Model);
                approvalPivot.LoadFromJsonObject(item);
                _this.approvalPivots.push(approvalPivot);
            }));
        }
    };
    /**
     * @return {?}
     */
    ApprovalPivotConfig.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new ApprovalPivotConfig(this.Model);
    };
    /**
     * @return {?}
     */
    ApprovalPivotConfig.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var approvalPivotConfig = new ApprovalPivotConfig(this.Model);
        approvalPivotConfig.title = this.title;
        approvalPivotConfig.enable = this.enable;
        approvalPivotConfig.expand = this.expand;
        approvalPivotConfig.approvalPivots = new Array();
        if (this.approvalPivots && this.approvalPivots.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.approvalPivots), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    /** @type {?} */
                    var approvalPivot = p.clone();
                    approvalPivotConfig.approvalPivots.push(approvalPivot);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return approvalPivotConfig;
    };
    ApprovalPivotConfig.Clr_Type_ID = "wf.ApprovalPivotConfig";
    return ApprovalPivotConfig;
}(ExtensionElement));
export { ApprovalPivotConfig };
if (false) {
    /** @type {?} */
    ApprovalPivotConfig.Clr_Type_ID;
    /** @type {?} */
    ApprovalPivotConfig.prototype.ClrTypeID;
    /** @type {?} */
    ApprovalPivotConfig.prototype.title;
    /** @type {?} */
    ApprovalPivotConfig.prototype.enable;
    /** @type {?} */
    ApprovalPivotConfig.prototype.expand;
    /** @type {?} */
    ApprovalPivotConfig.prototype.approvalPivots;
}
BpmnModelHelper.RegisterElementType(new ApprovalPivotConfig(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwcm92YWxQaXZvdENvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1tb2RlbC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9BcHByb3ZhbFBpdm90Q29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhEO0lBQXlDLCtDQUFnQjtJQVNyRCw2QkFBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBVFEsZUFBUyxHQUFXLG1CQUFtQixDQUFDLFdBQVcsQ0FBQzs7SUFTN0QsQ0FBQzs7Ozs7SUFFUyxpREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsaURBQW1COzs7SUFBbkI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztZQUN4RCxjQUFjLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDbEMsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxJQUFJO2dCQUM3QixjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7WUFDcEQsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFekUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELGdEQUFrQjs7OztJQUFsQixVQUFtQixHQUFRO1FBQTNCLGlCQWNDO1FBYkcsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7O1lBQ2pFLGNBQWMsR0FBRyxtQkFBQSxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLEVBQWM7UUFFN0YsSUFBSSxjQUFjLEtBQUssSUFBSSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RELGNBQWMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxJQUFJOztvQkFDbEIsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ25ELGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDNUMsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7SUFFRCx5Q0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCxtQ0FBSzs7O0lBQUw7OztZQUNVLG1CQUFtQixHQUFHLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvRCxtQkFBbUIsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN6QyxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN6QyxtQkFBbUIsQ0FBQyxjQUFjLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDdkQsS0FBZ0IsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxjQUFjLENBQUEsZ0JBQUEsNEJBQUU7b0JBQWhDLElBQU0sQ0FBQyxXQUFBOzt3QkFDRixhQUFhLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRTtvQkFDL0IsbUJBQW1CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDMUQ7Ozs7Ozs7OztTQUNKO1FBRUQsT0FBTyxtQkFBbUIsQ0FBQztJQUMvQixDQUFDO0lBbkVNLCtCQUFXLEdBQVcsd0JBQXdCLENBQUM7SUFvRTFELDBCQUFDO0NBQUEsQUFyRUQsQ0FBeUMsZ0JBQWdCLEdBcUV4RDtTQXJFWSxtQkFBbUI7OztJQUM1QixnQ0FBc0Q7O0lBQ3RELHdDQUE2RDs7SUFFN0Qsb0NBQWM7O0lBQ2QscUNBQWdCOztJQUNoQixxQ0FBZ0I7O0lBQ2hCLDZDQUFxQzs7QUErRHpDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsLCBCcG1uTW9kZWxIZWxwZXIsIEV4dGVuc2lvbk1ldGhvZCwgRXh0ZW5zaW9uRWxlbWVudCB9IGZyb20gXCJAZWRwLXBtZi9icG1uLW1vZGVsXCI7XHJcbmltcG9ydCB7IEFwcHJvdmFsUGl2b3QgfSBmcm9tIFwiLi9BcHByb3ZhbFBpdm90XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXBwcm92YWxQaXZvdENvbmZpZyBleHRlbmRzIEV4dGVuc2lvbkVsZW1lbnQge1xyXG4gICAgc3RhdGljIENscl9UeXBlX0lEOiBzdHJpbmcgPSBcIndmLkFwcHJvdmFsUGl2b3RDb25maWdcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gQXBwcm92YWxQaXZvdENvbmZpZy5DbHJfVHlwZV9JRDtcclxuXHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgZW5hYmxlOiBib29sZWFuO1xyXG4gICAgZXhwYW5kOiBib29sZWFuO1xyXG4gICAgYXBwcm92YWxQaXZvdHM6IEFycmF5PEFwcHJvdmFsUGl2b3Q+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBCcG1uTW9kZWwpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKSB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgICAgIHRoaXMuYXBwcm92YWxQaXZvdHMgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlRpdGxlXCIsIHRoaXMudGl0bGUpO1xyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiRW5hYmxlXCIsIHRoaXMuZW5hYmxlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkV4cGFuZFwiLCB0aGlzLmV4cGFuZCk7XHJcbiAgICAgICAgY29uc3QgYXBwcm92YWxQaXZvdHMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBpZiAodGhpcy5hcHByb3ZhbFBpdm90cyAhPT0gbnVsbCAmJiB0aGlzLmFwcHJvdmFsUGl2b3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hcHByb3ZhbFBpdm90cy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhcHByb3ZhbFBpdm90cy5wdXNoKGl0ZW0uQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEV4dGVuc2lvbk1ldGhvZC5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiQXBwcm92YWxQaXZvdHNcIiwgYXBwcm92YWxQaXZvdHMpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJUaXRsZVwiKTtcclxuICAgICAgICB0aGlzLmVuYWJsZSA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRCb29sZWFuKG9iaiwgXCJFbmFibGVcIik7XHJcbiAgICAgICAgdGhpcy5leHBhbmQgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0Qm9vbGVhbihvYmosIFwiRXhwYW5kXCIpO1xyXG4gICAgICAgIGNvbnN0IGFwcHJvdmFsUGl2b3RzID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJBcHByb3ZhbFBpdm90c1wiKSBhcyBBcnJheTxhbnk+O1xyXG5cclxuICAgICAgICBpZiAoYXBwcm92YWxQaXZvdHMgIT09IG51bGwgJiYgYXBwcm92YWxQaXZvdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBhcHByb3ZhbFBpdm90cy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcHByb3ZhbFBpdm90ID0gbmV3IEFwcHJvdmFsUGl2b3QodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBhcHByb3ZhbFBpdm90LkxvYWRGcm9tSnNvbk9iamVjdChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwcm92YWxQaXZvdHMucHVzaChhcHByb3ZhbFBpdm90KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IEFwcHJvdmFsUGl2b3RDb25maWcge1xyXG4gICAgICAgIHJldHVybiBuZXcgQXBwcm92YWxQaXZvdENvbmZpZyh0aGlzLk1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBBcHByb3ZhbFBpdm90Q29uZmlnIHtcclxuICAgICAgICBjb25zdCBhcHByb3ZhbFBpdm90Q29uZmlnID0gbmV3IEFwcHJvdmFsUGl2b3RDb25maWcodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgYXBwcm92YWxQaXZvdENvbmZpZy50aXRsZSA9IHRoaXMudGl0bGU7XHJcbiAgICAgICAgYXBwcm92YWxQaXZvdENvbmZpZy5lbmFibGUgPSB0aGlzLmVuYWJsZTtcclxuICAgICAgICBhcHByb3ZhbFBpdm90Q29uZmlnLmV4cGFuZCA9IHRoaXMuZXhwYW5kO1xyXG4gICAgICAgIGFwcHJvdmFsUGl2b3RDb25maWcuYXBwcm92YWxQaXZvdHMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBpZiAodGhpcy5hcHByb3ZhbFBpdm90cyAmJiB0aGlzLmFwcHJvdmFsUGl2b3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMuYXBwcm92YWxQaXZvdHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsUGl2b3QgPSBwLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBhcHByb3ZhbFBpdm90Q29uZmlnLmFwcHJvdmFsUGl2b3RzLnB1c2goYXBwcm92YWxQaXZvdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcHByb3ZhbFBpdm90Q29uZmlnO1xyXG4gICAgfVxyXG59XHJcbkJwbW5Nb2RlbEhlbHBlci5SZWdpc3RlckVsZW1lbnRUeXBlKG5ldyBBcHByb3ZhbFBpdm90Q29uZmlnKG5ldyBCcG1uTW9kZWwoKSkpOyJdfQ==