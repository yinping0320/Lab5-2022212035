/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionElement, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { SmsMessageVariable } from "./SmsMessageVariable";
var SmsMessageTemplate = /** @class */ (function (_super) {
    tslib_1.__extends(SmsMessageTemplate, _super);
    function SmsMessageTemplate(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = SmsMessageTemplate.Clr_Type_ID;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    SmsMessageTemplate.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.smsMessageVariables = new Array();
    };
    /**
     * @return {?}
     */
    SmsMessageTemplate.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Code", this.code);
        ExtensionMethod.SetAttributeValue(obj, "Content", this.content);
        if (this.smsMessageVariables && this.smsMessageVariables.length > 0) {
            /** @type {?} */
            var variables = new Array();
            try {
                for (var _b = tslib_1.__values(this.smsMessageVariables), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var variable = _c.value;
                    variables.push(variable.ConvertToJsonObject());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            BpmnModelHelper.SetAttributeValue(obj, "SmsMessageVariables", variables);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SmsMessageTemplate.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var e_2, _a;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.code = ExtensionMethod.GetAttributeValue4String(obj, "Code");
        this.content = ExtensionMethod.GetAttributeValue4String(obj, "Content");
        this.smsMessageVariables = new Array();
        /** @type {?} */
        var variables = ExtensionMethod.GetAttributeValue(obj, "SmsMessageVariables");
        if (variables && variables.length > 0) {
            try {
                for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var variable = variables_1_1.value;
                    /** @type {?} */
                    var smsMessageVariable = new SmsMessageVariable(this.Model);
                    smsMessageVariable.LoadFromJsonObject(variable);
                    this.smsMessageVariables.push(smsMessageVariable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_a = variables_1.return)) _a.call(variables_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    SmsMessageTemplate.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new SmsMessageTemplate(this.Model);
    };
    /**
     * @return {?}
     */
    SmsMessageTemplate.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var smsMessageTemplate = new SmsMessageTemplate(this.Model);
        smsMessageTemplate.code = this.code;
        smsMessageTemplate.content = this.content;
        smsMessageTemplate.smsMessageVariables = new Array();
        if (this.smsMessageVariables && this.smsMessageVariables.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.smsMessageVariables), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var variable = _c.value;
                    /** @type {?} */
                    var smsMessageVariable = variable.clone();
                    smsMessageTemplate.smsMessageVariables.push(smsMessageVariable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return smsMessageTemplate;
    };
    SmsMessageTemplate.Clr_Type_ID = "wf.SmsMessageTemplate";
    return SmsMessageTemplate;
}(ExtensionElement));
export { SmsMessageTemplate };
if (false) {
    /** @type {?} */
    SmsMessageTemplate.Clr_Type_ID;
    /** @type {?} */
    SmsMessageTemplate.prototype.ClrTypeID;
    /** @type {?} */
    SmsMessageTemplate.prototype.code;
    /** @type {?} */
    SmsMessageTemplate.prototype.content;
    /** @type {?} */
    SmsMessageTemplate.prototype.smsMessageVariables;
}
BpmnModelHelper.RegisterElementType(new SmsMessageTemplate(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU21zTWVzc2FnZVRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsLyIsInNvdXJjZXMiOlsibGliL21vZGVsL1Ntc01lc3NhZ2VUZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTFEO0lBQXdDLDhDQUFnQjtJQVVwRCw0QkFBWSxLQUFnQjtRQUE1QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUNmO1FBVlEsZUFBUyxHQUFXLGtCQUFrQixDQUFDLFdBQVcsQ0FBQzs7SUFVNUQsQ0FBQzs7Ozs7SUFFUyxnREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxnREFBbUI7OztJQUFuQjs7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBQ3JDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEUsSUFBSSxJQUFJLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2dCQUMzRCxTQUFTLEdBQUcsSUFBSSxLQUFLLEVBQUU7O2dCQUM3QixLQUF1QixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLG1CQUFtQixDQUFBLGdCQUFBLDRCQUFFO29CQUE1QyxJQUFNLFFBQVEsV0FBQTtvQkFDZixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7aUJBQ2xEOzs7Ozs7Ozs7WUFDRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHFCQUFxQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzVFO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVELCtDQUFrQjs7OztJQUFsQixVQUFtQixHQUFROztRQUN2QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDOztZQUNqQyxTQUFTLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQztRQUMvRSxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ25DLEtBQXVCLElBQUEsY0FBQSxpQkFBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7b0JBQTdCLElBQU0sUUFBUSxzQkFBQTs7d0JBQ1Qsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO29CQUM3RCxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDaEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2lCQUNyRDs7Ozs7Ozs7O1NBQ0o7SUFDTCxDQUFDOzs7O0lBR0Qsd0NBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsa0NBQUs7OztJQUFMOzs7WUFDVSxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0Qsa0JBQWtCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEMsa0JBQWtCLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDMUMsa0JBQWtCLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ2pFLEtBQXVCLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsbUJBQW1CLENBQUEsZ0JBQUEsNEJBQUU7b0JBQTVDLElBQU0sUUFBUSxXQUFBOzt3QkFDVCxrQkFBa0IsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFO29CQUMzQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztpQkFDbkU7Ozs7Ozs7OztTQUNKO1FBRUQsT0FBTyxrQkFBa0IsQ0FBQztJQUM5QixDQUFDO0lBakVNLDhCQUFXLEdBQVcsdUJBQXVCLENBQUM7SUFrRXpELHlCQUFDO0NBQUEsQUFuRUQsQ0FBd0MsZ0JBQWdCLEdBbUV2RDtTQW5FWSxrQkFBa0I7OztJQUMzQiwrQkFBcUQ7O0lBQ3JELHVDQUE0RDs7SUFFNUQsa0NBQWE7O0lBRWIscUNBQWdCOztJQUVoQixpREFBK0M7O0FBNERuRCxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbCwgQnBtbk1vZGVsSGVscGVyLCBFeHRlbnNpb25FbGVtZW50LCBFeHRlbnNpb25NZXRob2QgfSBmcm9tIFwiQGVkcC1wbWYvYnBtbi1tb2RlbFwiO1xyXG5pbXBvcnQgeyBTbXNNZXNzYWdlVmFyaWFibGUgfSBmcm9tIFwiLi9TbXNNZXNzYWdlVmFyaWFibGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTbXNNZXNzYWdlVGVtcGxhdGUgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50IHtcclxuICAgIHN0YXRpYyBDbHJfVHlwZV9JRDogc3RyaW5nID0gXCJ3Zi5TbXNNZXNzYWdlVGVtcGxhdGVcIjtcclxuICAgIHJlYWRvbmx5IENsclR5cGVJRDogc3RyaW5nID0gU21zTWVzc2FnZVRlbXBsYXRlLkNscl9UeXBlX0lEO1xyXG5cclxuICAgIGNvZGU6IHN0cmluZztcclxuXHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgc21zTWVzc2FnZVZhcmlhYmxlczogQXJyYXk8U21zTWVzc2FnZVZhcmlhYmxlPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbDogQnBtbk1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLnNtc01lc3NhZ2VWYXJpYWJsZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvZGVcIiwgdGhpcy5jb2RlKTtcclxuICAgICAgICBFeHRlbnNpb25NZXRob2QuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIkNvbnRlbnRcIiwgdGhpcy5jb250ZW50KTtcclxuICAgICAgICBpZiAodGhpcy5zbXNNZXNzYWdlVmFyaWFibGVzICYmIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIG9mIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzLnB1c2godmFyaWFibGUuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBCcG1uTW9kZWxIZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIlNtc01lc3NhZ2VWYXJpYWJsZXNcIiwgdmFyaWFibGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiBhbnkpIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLmNvZGUgPSBFeHRlbnNpb25NZXRob2QuR2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IEV4dGVuc2lvbk1ldGhvZC5HZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcIkNvbnRlbnRcIik7XHJcbiAgICAgICAgdGhpcy5zbXNNZXNzYWdlVmFyaWFibGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY29uc3QgdmFyaWFibGVzID0gRXh0ZW5zaW9uTWV0aG9kLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJTbXNNZXNzYWdlVmFyaWFibGVzXCIpO1xyXG4gICAgICAgIGlmICh2YXJpYWJsZXMgJiYgdmFyaWFibGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB2YXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNtc01lc3NhZ2VWYXJpYWJsZSA9IG5ldyBTbXNNZXNzYWdlVmFyaWFibGUodGhpcy5Nb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBzbXNNZXNzYWdlVmFyaWFibGUuTG9hZEZyb21Kc29uT2JqZWN0KHZhcmlhYmxlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcy5wdXNoKHNtc01lc3NhZ2VWYXJpYWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIE5ld0luc3RhbmNlKCk6IFNtc01lc3NhZ2VUZW1wbGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTbXNNZXNzYWdlVGVtcGxhdGUodGhpcy5Nb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogU21zTWVzc2FnZVRlbXBsYXRlIHtcclxuICAgICAgICBjb25zdCBzbXNNZXNzYWdlVGVtcGxhdGUgPSBuZXcgU21zTWVzc2FnZVRlbXBsYXRlKHRoaXMuTW9kZWwpO1xyXG4gICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5jb2RlID0gdGhpcy5jb2RlO1xyXG4gICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5jb250ZW50ID0gdGhpcy5jb250ZW50O1xyXG4gICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcyAmJiB0aGlzLnNtc01lc3NhZ2VWYXJpYWJsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIG9mIHRoaXMuc21zTWVzc2FnZVZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc21zTWVzc2FnZVZhcmlhYmxlID0gdmFyaWFibGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHNtc01lc3NhZ2VUZW1wbGF0ZS5zbXNNZXNzYWdlVmFyaWFibGVzLnB1c2goc21zTWVzc2FnZVZhcmlhYmxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNtc01lc3NhZ2VUZW1wbGF0ZTtcclxuICAgIH1cclxufVxyXG5CcG1uTW9kZWxIZWxwZXIuUmVnaXN0ZXJFbGVtZW50VHlwZShuZXcgU21zTWVzc2FnZVRlbXBsYXRlKG5ldyBCcG1uTW9kZWwoKSkpO1xyXG4iXX0=