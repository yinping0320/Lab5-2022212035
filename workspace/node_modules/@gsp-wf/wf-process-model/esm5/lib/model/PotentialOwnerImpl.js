/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod, PotentialOwner } from "@edp-pmf/bpmn-model";
import { Condition } from "./extension/condition-expression/Condition";
import { ActivityExecutorParticipantExpression } from "./participants/ActivityExecutorParticipantExpression";
import { ComponentParticipantExpression } from "./participants/ComponentParticipantExpression";
import { MatrixParticipantExpression } from "./participants/MatrixParticipantExpression";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { PositionParticipantExpression } from "./participants/PositionParticipantExpression";
import { ReportingLineParticipantExpression } from "./participants/ReportingLineParticipantExpression";
import { UserParticipantExpression } from "./participants/UserParticipantExpression";
import { VariableParticipantExpression } from "./participants/VariableParticipantExpression";
var PotentialOwnerImpl = /** @class */ (function (_super) {
    tslib_1.__extends(PotentialOwnerImpl, _super);
    function PotentialOwnerImpl(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = PotentialOwnerImpl.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    PotentialOwnerImpl.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    PotentialOwnerImpl.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
    };
    /**
     * @protected
     * @return {?}
     */
    PotentialOwnerImpl.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.participantExpression != null) {
            list.push(this.participantExpression);
        }
        if (this.condition != null) {
            list.push(this.condition);
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    PotentialOwnerImpl.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_1, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                switch (extensionElement.ClrTypeID) {
                    case UserParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case VariableParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case PositionParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ReportingLineParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case OrganizationParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case MatrixParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ComponentParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ActivityExecutorParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case Condition.Clr_Type_ID:
                        this.condition = ((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    PotentialOwnerImpl.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var potentialOwnerImpl = new PotentialOwnerImpl(this.Model);
        if (this.participantExpression) {
            switch (this.participantExpression.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    potentialOwnerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
            }
        }
        if (this.condition) {
            potentialOwnerImpl.condition = this.condition.clone();
        }
        potentialOwnerImpl.order = this.order;
        return potentialOwnerImpl;
    };
    /**
     * @return {?}
     */
    PotentialOwnerImpl.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new PotentialOwnerImpl(this.Model);
    };
    PotentialOwnerImpl.Clr_Type_ID = "wf.PotentialOwnerImpl";
    return PotentialOwnerImpl;
}(PotentialOwner));
export { PotentialOwnerImpl };
if (false) {
    /** @type {?} */
    PotentialOwnerImpl.Clr_Type_ID;
    /** @type {?} */
    PotentialOwnerImpl.prototype.ClrTypeID;
    /** @type {?} */
    PotentialOwnerImpl.prototype.participantExpression;
    /** @type {?} */
    PotentialOwnerImpl.prototype.condition;
    /** @type {?} */
    PotentialOwnerImpl.prototype.order;
}
BpmnModelHelper.RegisterElementType(new PotentialOwnerImpl(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,