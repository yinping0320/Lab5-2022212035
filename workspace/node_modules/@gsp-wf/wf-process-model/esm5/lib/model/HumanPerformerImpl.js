/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, HumanPerformer, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { Condition } from "./extension/condition-expression/Condition";
import { ActivityExecutorParticipantExpression } from "./participants/ActivityExecutorParticipantExpression";
import { ComponentParticipantExpression } from "./participants/ComponentParticipantExpression";
import { MatrixParticipantExpression } from "./participants/MatrixParticipantExpression";
import { OrganizationParticipantExpression } from "./participants/OrganizationParticipantExpression";
import { PositionParticipantExpression } from "./participants/PositionParticipantExpression";
import { ReportingLineParticipantExpression } from "./participants/ReportingLineParticipantExpression";
import { UserParticipantExpression } from "./participants/UserParticipantExpression";
import { VariableParticipantExpression } from "./participants/VariableParticipantExpression";
var HumanPerformerImpl = /** @class */ (function (_super) {
    tslib_1.__extends(HumanPerformerImpl, _super);
    function HumanPerformerImpl(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = HumanPerformerImpl.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    HumanPerformerImpl.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "Order", this.order);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HumanPerformerImpl.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.order = ExtensionMethod.GetAttributeValue4Int64(obj, "Order");
    };
    /**
     * @protected
     * @return {?}
     */
    HumanPerformerImpl.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.participantExpression != null) {
            list.push(this.participantExpression);
        }
        if (this.condition != null) {
            list.push(this.condition);
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    HumanPerformerImpl.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_1, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                switch (extensionElement.ClrTypeID) {
                    case UserParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case VariableParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case PositionParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ReportingLineParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case OrganizationParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case MatrixParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ComponentParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case ActivityExecutorParticipantExpression.Clr_Type_ID:
                        this.participantExpression = ((/** @type {?} */ (extensionElement)));
                        break;
                    case Condition.Clr_Type_ID:
                        this.condition = ((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    HumanPerformerImpl.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var humanPerformerImpl = new HumanPerformerImpl(this.Model);
        if (this.participantExpression) {
            switch (this.participantExpression.ClrTypeID) {
                case UserParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case VariableParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case PositionParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ReportingLineParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case OrganizationParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case MatrixParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ComponentParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
                case ActivityExecutorParticipantExpression.Clr_Type_ID:
                    humanPerformerImpl.participantExpression = ((/** @type {?} */ (this.participantExpression))).clone();
                    break;
            }
        }
        if (this.condition) {
            humanPerformerImpl.condition = this.condition.clone();
        }
        humanPerformerImpl.order = this.order;
        return humanPerformerImpl;
    };
    /**
     * @return {?}
     */
    HumanPerformerImpl.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new HumanPerformerImpl(this.Model);
    };
    HumanPerformerImpl.Clr_Type_ID = "wf.HumanPerformerImpl";
    return HumanPerformerImpl;
}(HumanPerformer));
export { HumanPerformerImpl };
if (false) {
    /** @type {?} */
    HumanPerformerImpl.Clr_Type_ID;
    /** @type {?} */
    HumanPerformerImpl.prototype.ClrTypeID;
    /** @type {?} */
    HumanPerformerImpl.prototype.participantExpression;
    /** @type {?} */
    HumanPerformerImpl.prototype.condition;
    /** @type {?} */
    HumanPerformerImpl.prototype.order;
}
BpmnModelHelper.RegisterElementType(new HumanPerformerImpl(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,