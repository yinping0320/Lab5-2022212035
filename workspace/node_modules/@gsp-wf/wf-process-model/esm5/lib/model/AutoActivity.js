/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ServiceTask } from "@edp-pmf/bpmn-model";
import { ExtendProperty } from "./ExtendProperty";
import { Component } from "./extension/tool/Component";
import { Tool } from "./extension/tool/Tool";
import { VariableSetting } from "./VariableSetting";
var AutoActivity = /** @class */ (function (_super) {
    tslib_1.__extends(AutoActivity, _super);
    function AutoActivity(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = AutoActivity.Clr_Type_ID;
        return _this;
    }
    /**
     * @return {?}
     */
    AutoActivity.prototype.ResetBeforeLoadFrom = /**
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.tools = new Array();
        this.variableSettings = new Array();
        this.extendProperties = new Array();
    };
    /**
     * @return {?}
     */
    AutoActivity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AutoActivity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
    };
    /**
     * @protected
     * @return {?}
     */
    AutoActivity.prototype.GetExtensionElements4ConvertTo = /**
     * @protected
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        if (this.tools != null) {
            try {
                for (var _d = tslib_1.__values(this.tools), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var item = _e.value;
                    item.MexTag = AutoActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.variableSettings != null && this.variableSettings.length > 0) {
            try {
                for (var _f = tslib_1.__values(this.variableSettings), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var item = _g.value;
                    item.MexTag = AutoActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.extendProperties != null && this.extendProperties.length > 0) {
            try {
                for (var _h = tslib_1.__values(this.extendProperties), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var item = _j.value;
                    item.MexTag = AutoActivity.MEXTAG;
                    list.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return list;
    };
    /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    AutoActivity.prototype.SetExtensionElements4LoadFrom = /**
     * @protected
     * @param {?} extensionElements
     * @return {?}
     */
    function (extensionElements) {
        var e_4, _a;
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        try {
            for (var extensionElements_1 = tslib_1.__values(extensionElements), extensionElements_1_1 = extensionElements_1.next(); !extensionElements_1_1.done; extensionElements_1_1 = extensionElements_1.next()) {
                var extensionElement = extensionElements_1_1.value;
                if (extensionElement.MexTag !== AutoActivity.MEXTAG)
                    continue;
                switch (extensionElement.ClrTypeID) {
                    case VariableSetting.Clr_Type_ID:
                        this.variableSettings.push((/** @type {?} */ (extensionElement)));
                        break;
                    case ExtendProperty.Clr_Type_ID:
                        this.extendProperties.push((/** @type {?} */ (extensionElement)));
                        break;
                    default:
                        if (extensionElement instanceof Tool) {
                            this.tools.push((/** @type {?} */ (extensionElement)));
                        }
                        break;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (extensionElements_1_1 && !extensionElements_1_1.done && (_a = extensionElements_1.return)) _a.call(extensionElements_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    /**
     * @return {?}
     */
    AutoActivity.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new AutoActivity(this.Model);
    };
    /**
     * @return {?}
     */
    AutoActivity.prototype.clone = /**
     * @return {?}
     */
    function () {
        var e_5, _a, e_6, _b, e_7, _c;
        /** @type {?} */
        var autoActivity = new AutoActivity(this.Model);
        autoActivity.Name = this.Name;
        autoActivity.tools = new Array();
        if (this.tools && this.tools.length > 0) {
            try {
                for (var _d = tslib_1.__values(this.tools), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var t = _e.value;
                    if (t instanceof Component) {
                        /** @type {?} */
                        var c = (/** @type {?} */ (t));
                        /** @type {?} */
                        var tool = c.clone();
                        autoActivity.tools.push(tool);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        autoActivity.variableSettings = new Array();
        if (this.variableSettings && this.variableSettings.length > 0) {
            try {
                for (var _f = tslib_1.__values(this.variableSettings), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var v = _g.value;
                    /** @type {?} */
                    var variableSetting = v.clone();
                    autoActivity.variableSettings.push(variableSetting);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        autoActivity.extendProperties = new Array();
        if (this.extendProperties && this.extendProperties.length > 0) {
            try {
                for (var _h = tslib_1.__values(this.extendProperties), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var e = _j.value;
                    /** @type {?} */
                    var extendProperty = e.clone();
                    autoActivity.extendProperties.push(extendProperty);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        return autoActivity;
    };
    AutoActivity.Clr_Type_ID = "wf.AutoActivity";
    AutoActivity.MEXTAG = 'wf.AutoActivity';
    return AutoActivity;
}(ServiceTask));
export { AutoActivity };
if (false) {
    /** @type {?} */
    AutoActivity.Clr_Type_ID;
    /**
     * @type {?}
     * @private
     */
    AutoActivity.MEXTAG;
    /** @type {?} */
    AutoActivity.prototype.ClrTypeID;
    /** @type {?} */
    AutoActivity.prototype.tools;
    /** @type {?} */
    AutoActivity.prototype.variableSettings;
    /** @type {?} */
    AutoActivity.prototype.extendProperties;
}
BpmnModelHelper.RegisterElementType(new AutoActivity(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,