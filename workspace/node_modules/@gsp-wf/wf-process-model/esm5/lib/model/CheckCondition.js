/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModel, BpmnModelHelper, ExtensionMethod } from "@edp-pmf/bpmn-model";
import { ConditionValueVersion } from "./extension/condition-expression/ConditionValueVersion";
import { MexExpressionImpl } from "./mex/MexExpressionImpl";
var CheckCondition = /** @class */ (function (_super) {
    tslib_1.__extends(CheckCondition, _super);
    function CheckCondition(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = CheckCondition.Clr_Type_ID;
        _this.valueVersion = ConditionValueVersion.Unsure;
        _this.checkTime = 'UNDEFINITION';
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    CheckCondition.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.value = '';
    };
    /**
     * @return {?}
     */
    CheckCondition.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "CheckTime", this.checkTime);
        ExtensionMethod.SetAttributeValue(obj, "ValueVersion", this.valueVersion);
        if (this.errorTips && this.errorTips.size > 0) {
            /** @type {?} */
            var jsonArray_1 = new Array();
            this.errorTips.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                /** @type {?} */
                var childObj = new Object;
                ExtensionMethod.SetAttributeValue(childObj, "Key", key);
                ExtensionMethod.SetAttributeValue(childObj, "Value", value);
                jsonArray_1.push(childObj);
            }));
            ExtensionMethod.SetAttributeValue(obj, "ErrorTips", jsonArray_1);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CheckCondition.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var e_1, _a;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.checkTime = ExtensionMethod.GetAttributeValue4String(obj, "CheckTime");
        this.valueVersion = (/** @type {?} */ (ExtensionMethod.GetAttributeValue4String(obj, "ValueVersion")));
        /** @type {?} */
        var jsonArray = ExtensionMethod.GetAttributeValue(obj, "ErrorTips");
        if (jsonArray && jsonArray.length > 0) {
            if (!this.errorTips) {
                this.errorTips = new Map();
            }
            try {
                for (var jsonArray_2 = tslib_1.__values(jsonArray), jsonArray_2_1 = jsonArray_2.next(); !jsonArray_2_1.done; jsonArray_2_1 = jsonArray_2.next()) {
                    var childObj = jsonArray_2_1.value;
                    /** @type {?} */
                    var key = ExtensionMethod.GetAttributeValue4String(childObj, "Key");
                    /** @type {?} */
                    var value = ExtensionMethod.GetAttributeValue4String(childObj, "Value");
                    this.errorTips.set(key, value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (jsonArray_2_1 && !jsonArray_2_1.done && (_a = jsonArray_2.return)) _a.call(jsonArray_2);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    CheckCondition.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var condition = new CheckCondition(this.Model);
        condition.value = this.value;
        condition.valueVersion = this.valueVersion;
        condition.checkTime = this.checkTime;
        if (this.errorTips && this.errorTips.size > 0) {
            condition.errorTips = new Map();
            this.errorTips.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                condition.errorTips.set(key, value);
            }));
        }
        return condition;
    };
    /**
     * @return {?}
     */
    CheckCondition.prototype.NewInstance = /**
     * @return {?}
     */
    function () {
        return new CheckCondition(this.Model);
    };
    CheckCondition.Clr_Type_ID = "wf.CheckCondition";
    return CheckCondition;
}(MexExpressionImpl));
export { CheckCondition };
if (false) {
    /** @type {?} */
    CheckCondition.Clr_Type_ID;
    /** @type {?} */
    CheckCondition.prototype.ClrTypeID;
    /** @type {?} */
    CheckCondition.prototype.valueVersion;
    /** @type {?} */
    CheckCondition.prototype.checkTime;
    /** @type {?} */
    CheckCondition.prototype.errorTips;
}
BpmnModelHelper.RegisterElementType(new CheckCondition(new BpmnModel()));
//# sourceMappingURL=data:application/json;base64,