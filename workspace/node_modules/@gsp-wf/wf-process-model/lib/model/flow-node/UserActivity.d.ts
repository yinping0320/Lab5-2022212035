import { BpmnModel, ExtensionElement, UserTask, ValidationError } from "@edp-pmf/bpmn-model";
import { ApprovalPivotConfig } from "../ApprovalPivotConfig";
import { CheckCondition } from "../CheckCondition";
import { ExtendProperty } from "../ExtendProperty";
import { AssignmentStrategy } from "../extension/assignment-strategy/AssignmentStrategy";
import { AssignPerformerConfig } from "../extension/assignment-strategy/AssignPerformerConfig";
import { BackWardRule } from "../extension/completion-strategy/BackWardRule";
import { ConclusionItem } from "../extension/completion-strategy/ConclusionItem";
import { CounterSignRule } from "../extension/completion-strategy/CounterSignRule";
import { ExecuteWorkItemMode } from "../extension/completion-strategy/ExecuteWorkItemMode";
import { CustomizeAction } from "../extension/CustomizeAction";
import { DisplayTerminal } from "../extension/DisplayTerminal";
import { ExecuteForm } from "../extension/ExecuteForm";
import { JumpScope } from "../extension/JumpScope";
import { Tool } from "../extension/tool/Tool";
import { HumanPerformerImpl } from "../HumanPerformerImpl";
import { ImageSettings } from "../ImageSetting";
import { MessageNotice } from "../MessageNotice";
import { TitleExpression } from "../mex/TitleExpression";
import { FormalParameter } from "../parameter/FormalParameter";
import { ParticipantExpression } from "../participants/ParticipantExpression";
import { ParticipantScheme } from "../participants/ParticipantScheme";
import { ParticipantSetting } from "../participants/ParticipantSetting";
import { PotentialOwnerImpl } from "../PotentialOwnerImpl";
import { TimeLimitControl } from "../TimeLimitControl";
import { UrgeHandleRule } from "../UrgeHandleRule";
import { VariableSetting } from "../VariableSetting";
import { Notification } from "../extension/Notification";
import { OtherAssignNodes } from "../extension/OtherAssignNodes";
export declare class UserActivity extends UserTask {
    constructor(model: BpmnModel);
    static Clr_Type_ID: string;
    ClrTypeID: string;
    protected static MEXTAG: string;
    NewInstance(): UserActivity;
    AssignmentStrategy: AssignmentStrategy;
    AssignPerformerConfig: AssignPerformerConfig;
    PerformerNotFundExecption: boolean;
    Retrievable: boolean;
    IsRollback: boolean;
    SelectBranch: boolean;
    NotifyAble: boolean;
    AddSignFrontAble: boolean;
    AddSignBehindAble: boolean;
    Priority: string;
    ExecuteWorkItemMode: ExecuteWorkItemMode;
    DisplayTerminal: DisplayTerminal;
    SelectTargetAble: boolean;
    JumpScope: JumpScope;
    BackWardRule: BackWardRule;
    transferAble: boolean;
    ExecuteForms: ExecuteForm[];
    customizeActions: CustomizeAction[];
    ParticipantSchemes: ParticipantScheme[];
    ParticipantSetting: ParticipantSetting;
    CounterSignRules: CounterSignRule[];
    AdhocActivitySecurities: string[];
    NotificationList: Notification[];
    humanPerformers: Array<HumanPerformerImpl>;
    potentialOwners: Array<PotentialOwnerImpl>;
    dynamicParticipants: Array<ParticipantExpression>;
    taskTitle: TitleExpression;
    anonymous: boolean;
    anonymousText: string;
    BizActivityID: string;
    BizActivityName: string;
    Conclusions: Array<ConclusionItem>;
    Tools: Tool[];
    BizParameters: FormalParameter[];
    timeLimitControl: TimeLimitControl;
    variableSettings: Array<VariableSetting>;
    messageNotices: Array<MessageNotice>;
    extendProperties: Array<ExtendProperty>;
    approvalPivotConfig: ApprovalPivotConfig;
    urgeHandleRule: UrgeHandleRule;
    imageSettings: ImageSettings;
    checkConditions: Array<CheckCondition>;
    otherAssignNodes: OtherAssignNodes;
    ResetBeforeLoadFrom(): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): any;
    protected GetExtensionElements4ConvertTo(): ExtensionElement[];
    protected SetExtensionElements4LoadFrom(extensionElements: ExtensionElement[]): void;
    /**
     * 审批活动预制通过，驳回工作项
     * @param model
     */
    initConclusions(model: BpmnModel): void;
    /**
     * 初始业务活动审批项
     * @param model
     * @param actions
     */
    setBizConclusions(model: BpmnModel, actions: any[]): void;
    /**
     * undo操作临时clone方法
     * @returns BpmnElement
     */
    clone(): UserActivity;
    /**
     * 模型校验
     * @param errors 模型校验错误信息
     */
    Validate(errors: ValidationError[]): void;
}
