/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, Optional } from '@angular/core';
import { SchemaManagerService, LcpService } from '@qdp/common';
import { CacheService } from '@ecp-caf/caf-common';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { DataRenderExtendService } from '@qdp/common';
import { RtfServices } from '@qdp/common';
import { LocalizeService } from '@qdp/localize';
import { MessagerService } from '@farris/ui-messager';
import { FormErrorService } from '@farris/command-services';
import { CloudprintService } from '@gsp-svc/cloudprint';
import { ServicesUtils } from '../../util/services.utils';
import { CrosstabRender } from '../../engine/crosstab-render';
import { ListTreeRender } from '../../engine/list-render';
export class RenderService {
    /**
     * @param {?} schemaManager
     * @param {?} lcpService
     * @param {?} cache
     * @param {?} loadService
     * @param {?} msgService
     * @param {?} dataRenderExtendService
     * @param {?} injector
     */
    constructor(schemaManager, lcpService, cache, loadService, msgService, dataRenderExtendService, injector) {
        this.schemaManager = schemaManager;
        this.lcpService = lcpService;
        this.cache = cache;
        this.loadService = loadService;
        this.msgService = msgService;
        this.dataRenderExtendService = dataRenderExtendService;
        this.injector = injector;
        this.serviceCache = {};
        this.columnCount = 0;
        this.operations = {};
        this.funcInfoCache = {
            funcIds: [],
            firstLoadCache: []
        };
        /** @type {?} */
        const self = this;
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.formErrorService = this.injector.get(FormErrorService);
            this.cloudprintService = this.injector.get(CloudprintService);
            this.notifyService = this.injector.get(NotifyService);
            this.setService();
            self.schemaManager.operationChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                if (value) {
                    self.operations = value;
                }
            }));
            self.setSecurityLevel();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setService() {
        /** @type {?} */
        const tabId = RtfServices.getTabId() || 'default';
        this.serviceCache[tabId] = {
            'formErrorService': this.formErrorService,
            'cloudprintService': this.cloudprintService,
            'schemaManagerService': this.schemaManager,
            'lcpService': this.lcpService,
            'cacheService': this.cache,
            'loadingService': this.loadService,
            'msgService': this.msgService,
            'localizeService': this.localizeService,
            'notifyService': this.notifyService
        };
    }
    /**
     * @private
     * @return {?}
     */
    getService() {
        /** @type {?} */
        const tabId = RtfServices.getTabId() || 'default';
        return this.serviceCache[tabId];
    }
    /**
     * @private
     * @return {?}
     */
    setSecurityLevel() {
        this.lcpService.variablesChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.hasOwnProperty('securityLevel') && data['securityLevel']) {
                this.cache.set(RtfServices.getTabId() + 'securityLevel', data['securityLevel']);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getSecurityLevel() {
        if (this.cache.get(RtfServices.getTabId() + 'securityLevel')) {
            return this.cache.get(RtfServices.getTabId() + 'securityLevel');
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} option
     * @return {?}
     */
    render(option) {
        if (!option.loading) {
            option.loading = this.loadService.show({ container: 'body' });
        }
        this.spread = option.spread ? option.spread : null;
        this.renderObject = this.getRender(option);
        this.renderObject.render(option);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    getRender(obj) {
        this.setService();
        ServicesUtils.setServices('dataRenderExtendService' + obj.queryId, this.dataRenderExtendService);
        /** @type {?} */
        let render;
        switch (obj.controlType) {
            case 'crosstab':
                render = new CrosstabRender(obj.queryId, obj.controlType, obj.jointsearchInfoList, this.funcInfoCache, this.getService());
                break;
            default:
                render = new ListTreeRender(obj.queryId, obj.controlType, obj.jointsearchInfoList, this.funcInfoCache, this.getService());
                break;
        }
        render.isSchemaSelectChanged = obj.isSchemaSelectChanged ? obj.isSchemaSelectChanged : false;
        return render;
    }
    /**
     * @param {?} renderOption
     * @return {?}
     */
    exportData(renderOption) {
        // exportData(queryId: any, schemaId: any, controlType: any, pageIndex?: number, qoManagerCode?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, voId?: any, totalCount?: any, exportType?: any) {
        /** @type {?} */
        const loading = this.loadService.show({ container: 'body' });
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            let schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            if (RtfServices.getFuncName()) {
                schemaName = RtfServices.getFuncName() + '-' + schemaName;
            }
            renderOption.excelExportName = schemaName;
            /** @type {?} */
            const params = this.renderObject.utils.get('parameter').createParameters(renderOption);
            params['exportType'] = renderOption.exportType ? renderOption.exportType : '';
            /** @type {?} */
            let isCustomShema = false;
            /** @type {?} */
            let customSchema = null;
            if (params['schemaId'] === '1') {
                if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                    isCustomShema = true;
                    params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                    customSchema = JSON.parse(params.customSchema);
                    if (!params.excelExportName) {
                        params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                            ? customSchema.titleOption.title : 'export';
                    }
                }
                else {
                    this.msgService.warning(this.localizeService.getValue('spread.message.export'));
                    loading.close();
                    return;
                }
            }
            if (this.operations['QdpQueryExport'] === false) {
                this.msgService.warning(this.localizeService.getValue('spread.message.validate.qdpQueryExport'));
                loading.close();
                return;
            }
            try {
                if (renderOption.controlType === 'treelist' && this.spread) {
                    /** @type {?} */
                    let expandNodes = '';
                    if (value && value.schemaValue && value.schemaValue.otherOption && value.schemaValue.otherOption.treeInfoType !== 2) {
                        /** @type {?} */
                        const pathField = value.schemaValue.otherOption.treeInfoType === 0 ? value.schemaValue.otherOption.pathField : value.schemaValue.otherOption.idField;
                        if (pathField) {
                            for (let i = 0; i < this.spread.getActiveSheet().getRowCount(); i++) {
                                if (this.spread.getActiveSheet().rowOutlines.isCollapsed(i)) {
                                    expandNodes += ',' + this.spread.getActiveSheet().getDataItem(i)[pathField];
                                }
                            }
                            params['expandNodes'] = expandNodes.substring(1);
                        }
                    }
                }
            }
            catch (e) {
            }
            this.columnCount = 0;
            if (!isCustomShema) {
                this.calculationColumnCount(value.schemaValue.columnOption.colList);
            }
            else {
                if (customSchema && customSchema.columnOption && customSchema.columnOption.colList) {
                    this.calculationColumnCount(customSchema.columnOption.colList);
                }
            }
            this.lcpService.loading = loading;
            if (this.getSecurityLevel()) {
                params.excelExportName += '_' + this.getSecurityLevel();
            }
            if ((this.columnCount * renderOption.totalCount) < 100000) {
                this.lcpService.exportData(params, renderOption.queryRelativeUrl);
                loading.close();
            }
            else {
                this.lcpService.aysnExportData(params, renderOption.queryRelativeUrl);
                loading.close();
                this.msgService.warning(this.localizeService.getValue('spread.message.aysnExport'));
            }
        }));
    }
    /**
     * @private
     * @param {?} colList
     * @return {?}
     */
    calculationColumnCount(colList) {
        try {
            colList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.childList && item.childList.length) {
                    this.calculationColumnCount(item.childList);
                }
                else {
                    this.columnCount += 1;
                }
            }));
        }
        catch (e) {
            this.columnCount = 0;
        }
    }
    /**
     * @param {?} queryId
     * @param {?} schemaId
     * @param {?} controlType
     * @param {?=} qoManagerCode
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} groupType
     * @param {?=} voId
     * @return {?}
     */
    clearCache(queryId, schemaId, controlType, qoManagerCode, queryRelativeUrl, filterCondition, groupType, voId) {
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId, queryId, queryRelativeUrl, groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            schemaId = schemaId ? schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            const schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            /** @type {?} */
            const params = this.renderObject.utils.get('parameter').createParameters({
                queryId,
                controlType,
                schemaId,
                qoManagerCode,
                pageIndex: 0,
                pageSize: 0,
                excelExportName: schemaName,
                filterCondition,
                voId
            });
            if (ServicesUtils.getServices(RtfServices.getTabId(queryId) + 'customScheme')) {
                params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(queryId) + 'customScheme');
            }
            this.lcpService.clearCache(params).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data) {
                    this.notifyService['success']((/** @type {?} */ ({
                        title: this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: this.localizeService.getValue('spread.message.clearCache'), timeout: 3000
                    })));
                }
            }));
        }));
    }
    /**
     * @param {?} renderOption
     * @return {?}
     */
    pdfExportEvent(renderOption) {
        // pdfExportEvent(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, pageIndex?: any, voId?: any) {
        /** @type {?} */
        const loading = this.loadService.show({ container: 'body' });
        try {
            this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
                /** @type {?} */
                let schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                    ? value.schemaValue.titleOption.title
                    : value && value.schemaName
                        ? value.schemaName
                        : '';
                if (RtfServices.getFuncName()) {
                    schemaName = RtfServices.getFuncName() + '-' + schemaName;
                }
                renderOption.excelExportName = schemaName;
                /** @type {?} */
                const params = this.renderObject.utils.get('parameter').createParameters(renderOption);
                if (params['schemaId'] === '1') {
                    if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                        params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                        /** @type {?} */
                        const customSchema = JSON.parse(params.customSchema);
                        if (!params.excelExportName) {
                            params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                                ? customSchema.titleOption.title : 'export';
                        }
                    }
                    else {
                        this.msgService.warning(this.localizeService.getValue('spread.message.print'));
                        loading.close();
                        return;
                    }
                }
                if (this.operations['QdpQueryPrint'] === false) {
                    this.msgService.warning(this.localizeService.getValue('spread.message.validate.qdpQueryPrint'));
                    loading.close();
                    return;
                }
                if (this.getSecurityLevel()) {
                    params.excelExportName += '_' + this.getSecurityLevel();
                }
                this.lcpService.pdfExportEvent(params, renderOption.queryRelativeUrl);
                loading.close();
            }));
        }
        catch (e) {
            loading.close();
            // console.log(e);
        }
    }
    /**
     * @param {?} renderOption
     * @return {?}
     */
    printPreView(renderOption) {
        // printPreView(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, pageIndex?: any, voId?: any) {
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            const schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            renderOption.excelExportName = schemaName;
            /** @type {?} */
            const params = this.renderObject.utils.get('parameter').createParameters(renderOption);
            if (params['schemaId'] === '1') {
                if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                    params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                    /** @type {?} */
                    const customSchema = JSON.parse(params.customSchema);
                    if (!params.excelExportName) {
                        params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                            ? customSchema.titleOption.title : 'export';
                    }
                }
                else {
                    this.msgService.warning(this.localizeService.getValue('spread.message.preview'));
                    return;
                }
            }
            if (this.getSecurityLevel()) {
                params.excelExportName += '_' + this.getSecurityLevel();
            }
            this.lcpService.cloudprintService = this.cloudprintService;
            this.lcpService.printPreView(params, renderOption.queryRelativeUrl);
        }));
    }
    /**
     * @param {?=} queryId
     * @return {?}
     */
    clearFirstLoadCache(queryId) {
        /** @type {?} */
        const funcId = RtfServices.getTabId(queryId);
        /** @type {?} */
        const index = this.funcInfoCache.firstLoadCache.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        el => el === funcId));
        if (index >= 0) {
            this.funcInfoCache.firstLoadCache.splice(index, 1);
        }
    }
}
RenderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RenderService.ctorParameters = () => [
    { type: SchemaManagerService },
    { type: LcpService },
    { type: CacheService },
    { type: LoadingService },
    { type: MessagerService },
    { type: DataRenderExtendService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    RenderService.prototype.cloudprintService;
    /** @type {?} */
    RenderService.prototype.formErrorService;
    /** @type {?} */
    RenderService.prototype.localizeService;
    /** @type {?} */
    RenderService.prototype.notifyService;
    /** @type {?} */
    RenderService.prototype.serviceCache;
    /** @type {?} */
    RenderService.prototype.columnCount;
    /** @type {?} */
    RenderService.prototype.operations;
    /** @type {?} */
    RenderService.prototype.renderObject;
    /** @type {?} */
    RenderService.prototype.spread;
    /** @type {?} */
    RenderService.prototype.funcInfoCache;
    /** @type {?} */
    RenderService.prototype.schemaManager;
    /** @type {?} */
    RenderService.prototype.lcpService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.dataRenderExtendService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,