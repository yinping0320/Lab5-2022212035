/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventBus, RtfServices } from "@qdp/common";
import { filter } from 'lodash-es';
export class SpreadStyleUtils {
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _controlType, _jointsearchInfoList, _serviceCache) {
        this.dataStyleArray = [];
        this.dataRowHeightArray = [];
        this.dataColInfoArray = [];
        this.footerStyleArray = [];
        this.footerRowHeightArray = [];
        this.footerSpansArray = [];
        this.footerDataArray = [];
        this.hyperLinkQuery = {};
        this.autoFitColumnIndex = 0;
        this.valueHeaderRowCount = 0; // 值维度数量
        // 值维度数量
        this.valueHeaderRowArray = [];
        this.rowHeadersColumnCount = 0; // 行标题列数
        // 行标题列数
        this.rowHeaderRowArray = [];
        this.joinParam = {};
        this.queryId = _queryId;
        this.type = _controlType;
        this.jointsearchInfoList = _jointsearchInfoList;
        this.cache = _serviceCache.cacheService;
        this.loadService = _serviceCache.loadingService;
        this.msgService = _serviceCache.msgService;
        this.localizeService = _serviceCache.localizeService;
        this.schemaManager = _serviceCache.schemaManagerService;
        this.formErrorService = _serviceCache.formErrorService;
        this.lcpService = _serviceCache.lcpService;
    }
    /**
     * @param {?} schema
     * @param {?} sheet
     * @return {?}
     */
    setAutoFitColumn(schema, sheet) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursionAutoFitColumn(col, null, sheet);
            }));
        }
    }
    /**
     * @private
     * @param {?} column
     * @param {?} childList
     * @param {?} sheet
     * @return {?}
     */
    recursionAutoFitColumn(column, childList, sheet) {
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionAutoFitColumn(null, column.childList, sheet);
            }
            else {
                if (column.autoFit) {
                    sheet.autoFitColumn(this.autoFitColumnIndex);
                }
                this.autoFitColumnIndex += 1;
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (col.childList && col.childList.length) {
                    this.recursionAutoFitColumn(null, col.childList, sheet);
                }
                else {
                    if (col.autoFit) {
                        sheet.autoFitColumn(this.autoFitColumnIndex);
                    }
                    this.autoFitColumnIndex += 1;
                }
            }));
        }
    }
    /**
     * @param {?} sheet
     * @return {?}
     */
    cacheStyle(sheet) {
        this.dataStyleArray = [];
        this.dataRowHeightArray = [];
        this.dataColInfoArray = [];
        this.footerStyleArray = [];
        this.footerRowHeightArray = [];
        this.footerSpansArray = [];
        this.footerDataArray = [];
        // 缓存区域样式信息
        for (let r = 0; r < sheet.getRowCount(); r++) {
            /** @type {?} */
            const columnStyleArray = new Array();
            /** @type {?} */
            const dataArray = new Array();
            for (let c = 0; c < sheet.getColumnCount(); c++) {
                if (r === 0) {
                    /** @type {?} */
                    let formatter = '';
                    if (sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport)) {
                        formatter = sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport);
                    }
                    /** @type {?} */
                    const colHeaderCount = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    const colInfo = {
                        name: sheet.getCell(r, c, GC.Spread.Sheets.SheetArea.viewport).value(),
                        size: sheet.getColumnWidth(c, GC.Spread.Sheets.SheetArea.viewport),
                        visible: sheet.getColumnVisible(c, GC.Spread.Sheets.SheetArea.viewport),
                        resizable: sheet.getColumnResizable(c, GC.Spread.Sheets.SheetArea.viewport),
                        formatter: formatter.indexOf('&') >= 0 ? new MyNumFormatter(formatter) : formatter,
                        displayName: sheet.getCell((colHeaderCount - 1), c, GC.Spread.Sheets.SheetArea.colHeader).value()
                    };
                    this.dataColInfoArray.push(colInfo);
                }
                /** @type {?} */
                let style = sheet.getStyle(r, c, GC.Spread.Sheets.SheetArea.viewport);
                if (style == null) {
                    style = new GC.Spread.Sheets.Style();
                    style.locked = true;
                }
                else {
                    style.locked = true;
                }
                if (style && style.formatter && style.formatter.indexOf('&') >= 0) {
                    style.formatter = new MyNumFormatter(style.formatter);
                }
                columnStyleArray.push(style);
                /** @type {?} */
                const text = sheet.getValue(r, c, GC.Spread.Sheets.SheetArea.viewport)
                    || sheet.getText(r, c, GC.Spread.Sheets.SheetArea.viewport)
                    || '';
                dataArray.push(text);
            }
            if (r === 0) {
                this.dataRowHeightArray.push(sheet.getRowHeight(r));
                this.dataStyleArray.push(columnStyleArray);
            }
            else {
                this.footerRowHeightArray.push(sheet.getRowHeight(r));
                this.footerStyleArray.push(columnStyleArray);
                this.footerDataArray.push(dataArray);
            }
        }
        // 缓存span
        /** @type {?} */
        const spans = sheet.getSpans();
        if (spans && spans.length) {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < spans.length; i++) {
                if (spans[i].row > 0) {
                    this.footerSpansArray.push(spans[i]);
                }
            }
        }
        sheet.deleteRows(1, sheet.getRowCount() - 1);
    }
    /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?=} showZero
     * @return {?}
     */
    applyStyle(sheet, schema, showZero) {
        /** @type {?} */
        let rowCount = sheet.getRowCount();
        /** @type {?} */
        const colCount = sheet.getColumnCount();
        /** @type {?} */
        const footerCount = this.footerRowHeightArray.length;
        sheet.addRows(rowCount, footerCount);
        /** @type {?} */
        let index = 0;
        /** @type {?} */
        const groupFieldCache = [];
        /** @type {?} */
        const groupFieldValueCache = [];
        /** @type {?} */
        const groupRowCache = [];
        /** @type {?} */
        const groupTreeLevel = {};
        /** @type {?} */
        const columns = sheet.toJSON().columns;
        this.getGroupField(groupFieldCache, schema);
        /** @type {?} */
        const formatFieldCache = [];
        this.getFormatField(formatFieldCache, schema);
        this.getIsRedColumns(formatFieldCache, schema);
        /** @type {?} */
        const isRedColumns = {
            colIndex: 0,
            isRedColumns: []
        };
        this.getIsRedColumns(schema, isRedColumns);
        /** @type {?} */
        const sheetColumns = sheet.toJSON().columns;
        for (let r = 0; r < (rowCount + footerCount); r++) {
            if (formatFieldCache && formatFieldCache.length && r < rowCount) {
                formatFieldCache.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    /** @type {?} */
                    const dataItem = sheet.getDataItem(r);
                    /** @type {?} */
                    const precision = dataItem[item.formatField] - 0;
                    /** @type {?} */
                    let numberFormat = item.formatter && (item.formatter.indexOf('#,###') >= 0 || item.formatter.indexOf('#,##0') >= 0) ? '#,##0.' : '0.';
                    if (this.isNumber(precision)) {
                        for (let p = 0; p < precision; p++) {
                            numberFormat += '0';
                        }
                    }
                    /** @type {?} */
                    const formatColIndex = sheetColumns.findIndex((/**
                     * @param {?} el
                     * @return {?}
                     */
                    (el) => el.name == item.sourceField));
                    if (formatColIndex >= 0 && numberFormat != '0.' && numberFormat != '#,##0.') {
                        sheet.getCell(r, formatColIndex).formatter(numberFormat);
                    }
                }));
            }
            for (let c = 0; c < colCount; c++) {
                if (r === 0 && !sheet.getColumnVisible(index)) {
                    index += 1;
                }
                if (r >= rowCount) {
                    if (c === 0) {
                        sheet.setStyle(r, c, this.footerStyleArray[r - rowCount][c]);
                        if (this.footerDataArray && this.footerDataArray.length) {
                            sheet.setValue(r, c, this.footerDataArray[r - rowCount][c]);
                        }
                        sheet.setRowHeight(r, this.footerRowHeightArray[r - rowCount]);
                        if (this.footerSpansArray && this.footerSpansArray.length) {
                            sheet.addSpan(r, this.footerSpansArray[0].col, this.footerSpansArray[0].rowCount, this.footerSpansArray[0].colCount);
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const formatter = sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport);
                    if (formatter && formatter.indexOf && formatter.indexOf('/') >= 0 && formatter.indexOf(';') >= 0) {
                        /** @type {?} */
                        const cellValue = this.logicFormat(formatter, sheet.getValue(r, c));
                        sheet.setText(r, c, cellValue);
                    }
                    if (formatter && typeof formatter === 'string' && (formatter.indexOf('yy') >= 0 || formatter.indexOf('MM') >= 0 || formatter.indexOf('dd') >= 0 || formatter.indexOf('HH') >= 0 || formatter.indexOf('mm') >= 0 || formatter.indexOf('ss') >= 0)) {
                        if (sheet.getDataItem(r).hasOwnProperty("qdp_data_flag")) {
                            sheet.setFormatter(r, c, '');
                        }
                    }
                    if (isRedColumns.isRedColumns.findIndex((/**
                     * @param {?} el
                     * @return {?}
                     */
                    el => el.colIndex == c)) >= 0 && this.isNumber(sheet.getCell(r, c).value()) && (sheet.getCell(r, c).value() - 0 < 0)) {
                        sheet.getCell(r, c).foreColor('red');
                    }
                    if (!showZero) {
                        if (!showZero && columns && columns.length) {
                            if (columns[c].name === 'treeLevel' || columns[c].name === 'isDetail') {
                                continue;
                            }
                            if (sheet.getCell(r, c).value() === 0 || sheet.getCell(r, c).value() == '0') {
                                sheet.getCell(r, c).value('');
                            }
                        }
                    }
                }
            }
            if (r < rowCount) {
                // 设置行高
                sheet.setRowHeight(r, this.dataRowHeightArray[0]);
                if (this.type === 'treelist') {
                    /** @type {?} */
                    const level = sheet.getDataItem(r)['treeLevel'];
                    /** @type {?} */
                    const isDetail = sheet.getDataItem(r)['isDetail'];
                    sheet.setCellType(r, index, new TreeCellType(null, false, level, isDetail));
                    sheet.getStyle(r, index).hAlign = 0;
                    sheet.getStyle(r, index).textIndent = level + 2;
                    for (let i = 0; i <= level; i++) {
                        sheet.rowOutlines.group(r, 1);
                    }
                }
                else if (this.type === 'list' && groupFieldCache.length) {
                    /** @type {?} */
                    let filterCondition = {};
                    if (groupRowCache.findIndex((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x === r)) >= 0) {
                        continue;
                    }
                    for (let c = 0; c < colCount; c++) {
                        if (sheet.getDataItem(r).hasOwnProperty("qdp_data_flag") && (sheet.getDataItem(r)["qdp_data_flag"] + '') === (4 + '')) {
                            if (sheet.getFormatter(r, c) && (sheet.getFormatter(r, c).toString().indexOf('y') >= 0 || sheet.getFormatter(r, c).toString().indexOf('d') >= 0 || sheet.getFormatter(r, c).toString().indexOf('M') >= 0)) {
                                sheet.setFormatter(r, c, '');
                            }
                        }
                    }
                    /** @type {?} */
                    const addRowsCache = [];
                    for (let i = 0; i < groupFieldCache.length; i++) {
                        /** @type {?} */
                        const addRowIndex = r + addRowsCache.length;
                        // const groupField = groupFieldCache[i];
                        /** @type {?} */
                        const fieldIndex = this.dataColInfoArray.findIndex((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => x.name === groupFieldCache[i]));
                        filterCondition = {};
                        for (let f = 0; f <= i; f++) {
                            filterCondition[groupFieldCache[f]] = sheet.getDataItem(addRowIndex)[groupFieldCache[f]];
                        }
                        /** @type {?} */
                        const filterResult = filter(groupFieldValueCache, filterCondition);
                        if ((!filterResult || !filterResult.length) && !sheet.getDataItem(addRowIndex).hasOwnProperty("qdp_data_flag")) {
                            // const groupFieldValue = {};
                            // groupFieldValue[groupField] = filterCondition[groupField];
                            groupFieldValueCache.push(filterCondition);
                            /** @type {?} */
                            const style = this.dataStyleArray[0][fieldIndex];
                            style.hAlign = 0;
                            style.cellType = null;
                            style.backColor = '#F4F7FA';
                            sheet.addRows(addRowIndex, 1);
                            sheet.setRowHeight(addRowIndex, this.dataRowHeightArray[0]);
                            sheet.setStyle(addRowIndex, index, style);
                            sheet.getCell(addRowIndex, index).value(filterCondition[groupFieldCache[i]]);
                            sheet.addSpan(addRowIndex, index, 1, (colCount - index));
                            sheet.getCell(addRowIndex, index).textIndent((i + 1) * 2);
                            groupTreeLevel[addRowIndex + ''] = { treeLevel: i, isDetail: 0 };
                            if (i === (groupFieldCache.length - 1)) {
                                groupTreeLevel[(addRowIndex + 1) + ''] = { treeLevel: groupFieldCache.length, isDetail: 1 };
                            }
                            rowCount += 1;
                            addRowsCache.push(i);
                            groupRowCache.push(addRowIndex);
                        }
                        else {
                            if (sheet.getDataItem(addRowIndex).hasOwnProperty("qdp_data_flag") && (sheet.getDataItem(addRowIndex)["qdp_data_flag"] + '') === (3 + '')) {
                                continue;
                            }
                            if (i === (groupFieldCache.length - 1)) {
                                groupTreeLevel[(addRowIndex + 1) + ''] = { treeLevel: groupFieldCache.length, isDetail: 1 };
                            }
                        }
                    }
                }
            }
        }
        for (let r = 0; r < rowCount; r++) {
            if (!groupTreeLevel.hasOwnProperty(r)) {
                break;
            }
            for (let t = 0; t <= groupTreeLevel[r + ''].treeLevel; t++) {
                sheet.rowOutlines.group(r, 1);
            }
            sheet.setCellType(r, index, new TreeCellType(null, false, groupTreeLevel[r + ''].treeLevel, groupTreeLevel[r + ''].isDetail));
        }
        if (this.type !== 'crosstab' && this.getShowFilterRow(schema)) {
            this.filterRow(sheet);
        }
    }
    /**
     * @param {?} groupColCache
     * @param {?} schema
     * @return {?}
     */
    getGroupField(groupColCache, schema) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursionGetGroupColumn(groupColCache, col, null);
            }));
        }
    }
    /**
     * @param {?} schema
     * @param {?} params
     * @return {?}
     */
    getIsRedColumns(schema, params) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursiveIsRedColumn(col, null, params);
            }));
        }
    }
    /**
     * @param {?} fieldCache
     * @param {?} schema
     * @return {?}
     */
    getFormatField(fieldCache, schema) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursionGetFormatColumn(fieldCache, col, null);
            }));
        }
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    getShowHeaderSort(schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.showHeaderSort != null && schema.schemaValue.otherOption.showHeaderSort != undefined) {
                return schema.schemaValue.otherOption.showHeaderSort;
            }
            return true;
        }
        catch (e) {
            return true;
        }
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    getShowFilterRow(schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.showFilterRow != null && schema.schemaValue.otherOption.showFilterRow != undefined) {
                return schema.schemaValue.otherOption.showFilterRow;
            }
            return true;
        }
        catch (e) {
            return true;
        }
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    getMergeCell(schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.mergeCell != null && schema.schemaValue.otherOption.mergeCell != undefined) {
                return schema.schemaValue.otherOption.mergeCell;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @private
     * @param {?} fieldCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    recursionGetFormatColumn(fieldCache, column, childList) {
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionGetFormatColumn(fieldCache, null, column.childList);
            }
            else {
                if (column.formatType == 1 && column.formatField) {
                    fieldCache.push({ sourceField: column.bindField, formatField: column.formatField, formatter: column.formattor });
                }
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (col.childList && col.childList.length) {
                    this.recursionGetFormatColumn(fieldCache, null, col.childList);
                }
                else {
                    if (col.formatType == 1 && col.formatField) {
                        fieldCache.push({ sourceField: col.bindField, formatField: col.formatField, formatter: col.formattor });
                    }
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} groupColCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    recursionGetGroupColumn(groupColCache, column, childList) {
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionGetGroupColumn(groupColCache, null, column.childList);
            }
            else {
                if (column.isGroup) {
                    groupColCache.push(column.bindField);
                }
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (col.childList && col.childList.length) {
                    this.recursionGetGroupColumn(groupColCache, null, col.childList);
                }
                else {
                    if (col.isGroup) {
                        groupColCache.push(col.bindField);
                    }
                }
            }));
        }
    }
    /**
     * @param {?} formattor
     * @param {?} cellValue
     * @return {?}
     */
    logicFormat(formattor, cellValue) {
        /** @type {?} */
        const str = formattor.split(';');
        /** @type {?} */
        const real = str[0].split('/');
        /** @type {?} */
        const disp = str[1].split('/');
        for (let i = 0; i < real.length; i++) {
            // tslint:disable-next-line:triple-equals
            if (real[i] == (cellValue + '')) {
                cellValue = disp[i];
                break;
            }
        }
        return cellValue;
    }
    /**
     * @param {?} sheet
     * @return {?}
     */
    filterRow(sheet) {
        sheet.addRows(0, 1);
        for (let i = 0; i < sheet.getRowCount(); i++) {
            sheet.getCell(i, 0, GC.Spread.Sheets.SheetArea.rowHeader).value(i == 0 ? '' : i);
        }
        sheet.setRowHeight(0, this.dataRowHeightArray[0]);
        for (let i = 0; i < sheet.getColumnCount(); i++) {
            /** @type {?} */
            const s = new GC.Spread.Sheets.Style();
            s.fromJSON(this.dataStyleArray[0][i].toJSON());
            s.locked = false;
            s.formatter = '@';
            sheet.setStyle(0, i, s);
            sheet.setCellType(0, i, new FilterCellType(sheet));
        }
        /** @type {?} */
        const filter = new GC.Spread.Sheets.Filter.HideRowFilter(new GC.Spread.Sheets.Range(1, 0, sheet.getRowCount(), sheet.getColumnCount()));
        sheet.rowFilter(filter);
        filter.filterButtonVisible(false);
    }
    /**
     * @param {?} spread
     * @param {?} sheet
     * @return {?}
     */
    linkField(spread, sheet) {
        try {
            /** @type {?} */
            const self = this;
            /** @type {?} */
            const rowCount = sheet.getRowCount();
            /** @type {?} */
            const colCount = sheet.getColumnCount();
            // const footerCount = this.footerRowHeightArray.length;
            for (let r = 1; r < (rowCount); r++) {
                /** @type {?} */
                const dataItem = sheet.getDataItem(r);
                if (dataItem.hasOwnProperty('dynamicPropSet') && dataItem.dynamicPropSet.hasOwnProperty('qdp_data_flag')) {
                    continue;
                }
                for (let c = 0; c < colCount; c++) {
                    /** @type {?} */
                    const joinSearch = JSON.parse(this.jointsearchInfoList['joinSearch']);
                    // tslint:disable-next-line:prefer-for-of
                    for (let i = 0; i < joinSearch.length; i++) {
                        /** @type {?} */
                        const el = joinSearch[i];
                        if (el.jointserachdisplaystyle === 2) {
                            if (el.linkfield === this.dataColInfoArray[c].name) {
                                if (!this.hyperLinkQuery[this.queryId]) {
                                    this.hyperLinkQuery[this.queryId] = {};
                                }
                                this.hyperLinkQuery[this.queryId][c + ''] = el;
                                /** @type {?} */
                                const h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                h1.text(h1.format(sheet.getCell(r, c).value(), this.dataColInfoArray[c].formatter));
                                h1.activeOnClick(true);
                                h1.onClickAction((/**
                                 * @return {?}
                                 */
                                function () {
                                    spread.commandManager().execute({
                                        cmd: 'dropdownquery',
                                        self: self
                                    });
                                }));
                                sheet.setCellType(r, c, h1, GC.Spread.Sheets.SheetArea.viewport);
                            }
                        }
                    }
                }
            }
            spread.commandManager().register('dropdownquery', {
                canUndo: true,
                execute: (/**
                 * @param {?} context
                 * @param {?} options
                 * @param {?} isUndo
                 * @return {?}
                 */
                function (context, options, isUndo) {
                    /** @type {?} */
                    const row = context.getActiveSheet().getActiveRowIndex();
                    /** @type {?} */
                    const col = context.getActiveSheet().getActiveColumnIndex();
                    for (const key in options.self.hyperLinkQuery[options.self.queryId]) {
                        if (key === (col + '')) {
                            /** @type {?} */
                            const el = options.self.hyperLinkQuery[options.self.queryId][key];
                            /** @type {?} */
                            let entityParam = { 'id': 'null' };
                            /** @type {?} */
                            const paramMap = new Map();
                            /** @type {?} */
                            const searchparas = JSON.parse(options.self.jointsearchInfoList['jointparam']).filter((/**
                             * @param {?} x
                             * @return {?}
                             */
                            x => x.functionid === el['id']));
                            /** @type {?} */
                            const joinParam = options.self.cache.get(RtfServices.getTabId(options.self.queryId) + 'joinSearch');
                            /** @type {?} */
                            let dataItem = { 'id': 'null' };
                            if (joinParam.controlType === 'crosstab') { // 交叉表
                                // 获取行标题的数据
                                for (let i = joinParam.rowHeaderColInfo.start; i < joinParam.rowHeaderColInfo.end; i++) {
                                    /** @type {?} */
                                    const value = context.getActiveSheet().getValue(row, i, GC.Spread.Sheets.SheetArea.viewport);
                                    /** @type {?} */
                                    const name = context.getActiveSheet().getValue(joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                                    /** @type {?} */
                                    const colInfo = joinParam.colInfos.find((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    (x) => x.dimension === 1 && x.name === name)).bindField;
                                    dataItem[colInfo] = value;
                                }
                                // 获取列标题的数据
                                for (let i = joinParam.colHeaderRowInfo.start; i < joinParam.colHeaderRowInfo.end; i++) {
                                    /** @type {?} */
                                    const value = context.getActiveSheet().getValue(i, col, GC.Spread.Sheets.SheetArea.colHeader);
                                    /** @type {?} */
                                    const colInfo = joinParam.colInfos.filter((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    (x) => x.dimension === 2))[i - joinParam.colHeaderRowInfo.start].bindField;
                                    dataItem[colInfo] = value;
                                }
                                // 获取值标题的数据
                                /** @type {?} */
                                const value = context.getActiveSheet().getValue(row, col, GC.Spread.Sheets.SheetArea.viewport);
                                /** @type {?} */
                                const name = context.getActiveSheet().getValue(joinParam.colHeaderRowInfo.end, col, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                let colInfo = joinParam.colInfos.find((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                (x) => x.dimension === 3 && x.name === name));
                                if (colInfo) {
                                    colInfo = colInfo.bindField;
                                    dataItem[colInfo] = value;
                                }
                            }
                            else {
                                dataItem = context.getActiveSheet().getDataItem(row);
                            }
                            /** @type {?} */
                            const currentSelectedItem = dataItem;
                            if (searchparas.length > 0) {
                                searchparas.forEach((/**
                                 * @param {?} value
                                 * @return {?}
                                 */
                                value => {
                                    if (value.paravaluetype) { // 表达式
                                        if (value.paravalue.indexOf('getParameter(') >= 0) {
                                            /** @type {?} */
                                            const parameterKey = value.paravalue.replace(/'/g, '').replace(/"/g, '').replace(/getParameter\(/g, '').replace(/\)/g, '');
                                            options.self.getQueryParameters(entityParam, paramMap, parameterKey, value.para);
                                        }
                                        else {
                                            entityParam[value.para] = currentSelectedItem[value.paravalue];
                                            paramMap.set(value.para, currentSelectedItem[value.paravalue]);
                                        }
                                    }
                                    else {
                                        entityParam[value.para] = value.paravalue;
                                        paramMap.set(value.para, value.paravalue);
                                    }
                                }));
                            }
                            else {
                                entityParam = currentSelectedItem;
                            }
                            /** @type {?} */
                            const op = {
                                ParentSessionId: options.self.cache.get('session'),
                                EntityParam: entityParam
                            };
                            /** @type {?} */
                            let tabId = '';
                            if (el.searchtype === 'func') {
                                // 联查前
                                /** @type {?} */
                                const openMenuoptions = {
                                    'appType': 'menu',
                                    'funcId': el.functioncode,
                                    'tabId': EventBus.guid(),
                                    'appId': '',
                                    'appEntrance': '',
                                    'entityParams': op.entityParam,
                                    'queryStringParams': paramMap,
                                    'isNewTab': true
                                };
                                tabId = RtfServices.getFuncId(openMenuoptions);
                                options.self.cache.set(tabId ? tabId : options.self.queryId, op.EntityParam);
                                /** @type {?} */
                                const menuSwitchControl = Object.assign({}, openMenuoptions['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
                                openMenuoptions['entityParams'] = menuSwitchControl;
                                // 卡片塞进去params
                                gspframeworkService.rtf.func.openMenu(openMenuoptions);
                            }
                            else if (el.searchtype === 'app') {
                                /** @type {?} */
                                const appOption = {
                                    appType: 'app',
                                    appId: el.functioncode,
                                    appEntrance: el.appEntrance,
                                    funcId: '',
                                    isReload: true,
                                    tabId: EventBus.guid(),
                                    entityParams: op.entityParam,
                                    queryStringParams: paramMap
                                };
                                tabId = RtfServices.getFuncId(appOption);
                                options.self.cache.set(tabId ? tabId : options.queryId, op.EntityParam);
                                /** @type {?} */
                                const menuSwitchControl = Object.assign({}, appOption['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
                                appOption['entityParams'] = menuSwitchControl;
                                gspframeworkService.rtf.func.openMenu(appOption);
                            }
                        }
                    }
                })
            }, null, false, false, false, false);
        }
        catch (e) { }
    }
    /**
     * @param {?} spread
     * @param {?} sheet
     * @param {?} extObj
     * @return {?}
     */
    inSuiteLinkField(spread, sheet, extObj) {
        try {
            /** @type {?} */
            const self = this;
            /** @type {?} */
            let data = null;
            try {
                if (this.lcpService.inSuiteDropDownInfo && typeof this.lcpService.inSuiteDropDownInfo == 'string') {
                    data = JSON.parse(this.lcpService.inSuiteDropDownInfo);
                }
            }
            catch (e) {
                throw e;
            }
            /** @type {?} */
            const rowCount = sheet.getRowCount();
            /** @type {?} */
            const colCount = sheet.getColumnCount();
            /** @type {?} */
            let rowDropDown = true;
            /** @type {?} */
            const cacheRowDropDown = [];
            /** @type {?} */
            const cacheCellDropDown = {};
            // 解析相关数据
            const { click_events: clickEvents, event_data: eventData, double_click_event: dcEvent, double_click_event_params: dcEventParams, rc_event_ids: rcEventIds } = data;
            if (dcEvent && !("{}" == JSON.stringify(dcEvent)) && dcEventParams && !("{}" == JSON.stringify(dcEventParams))) {
                rowDropDown = true;
                for (let key in dcEventParams) {
                    cacheRowDropDown.push(key);
                }
            }
            else if (eventData && !("{}" == JSON.stringify(eventData))) {
                rowDropDown = false;
                for (let key in eventData) {
                    if (eventData[key]) {
                        /** @type {?} */
                        const cellIndex = [];
                        cacheCellDropDown[key] = cellIndex;
                        for (let key1 in eventData[key]) {
                            cacheCellDropDown[key].push(key1);
                        }
                    }
                }
            }
            for (let r = 1; r < (rowCount); r++) {
                /** @type {?} */
                const dataItem = sheet.getDataItem(r);
                if (dataItem.hasOwnProperty('dynamicPropSet') && dataItem.dynamicPropSet.hasOwnProperty('qdp_data_flag')) {
                    continue;
                }
                for (let c = 0; c < colCount; c++) {
                    if (rowDropDown) {
                        for (let i = 0; i < cacheRowDropDown.length; i++) {
                            if (r == (cacheRowDropDown[i] - 0)) {
                                /** @type {?} */
                                const h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                /** @type {?} */
                                const formatter = sheet.getFormatter(r, c);
                                h1.text(h1.format(sheet.getCell(r, c).value(), formatter));
                                h1.activeOnClick(true);
                                h1.onClickAction((/**
                                 * @return {?}
                                 */
                                function () {
                                    spread.commandManager().execute({
                                        cmd: 'dropdownquery',
                                        self: self
                                    });
                                }));
                                sheet.setCellType(r, c, h1, GC.Spread.Sheets.SheetArea.viewport);
                            }
                        }
                    }
                    else {
                        for (let key in cacheCellDropDown) {
                            if ((r + '') === key) {
                                for (let i = 0; i < cacheCellDropDown[key].length; i++) {
                                    /** @type {?} */
                                    const h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                    /** @type {?} */
                                    const formatter = sheet.getFormatter(r, cacheCellDropDown[key][i]);
                                    h1.text(h1.format(sheet.getCell(r, cacheCellDropDown[key][i]).value(), formatter));
                                    h1.activeOnClick(true);
                                    h1.onClickAction((/**
                                     * @return {?}
                                     */
                                    function () {
                                        spread.commandManager().execute({
                                            cmd: 'dropdownquery',
                                            self: self
                                        });
                                    }));
                                    sheet.setCellType(r, cacheCellDropDown[key][i], h1, GC.Spread.Sheets.SheetArea.viewport);
                                }
                            }
                        }
                    }
                }
            }
            spread.commandManager().register('dropdownquery', {
                canUndo: true,
                execute: (/**
                 * @param {?} context
                 * @param {?} options
                 * @param {?} isUndo
                 * @return {?}
                 */
                function (context, options, isUndo) {
                    /** @type {?} */
                    const row = context.getActiveSheet().getActiveRowIndex();
                    /** @type {?} */
                    const col = context.getActiveSheet().getActiveColumnIndex();
                    // 双击事件的逻辑
                    /** @type {?} */
                    let event;
                    /** @type {?} */
                    let params;
                    // 行点击数据
                    if (dcEvent && !("{}" == JSON.stringify(dcEvent)) && dcEventParams && !("{}" == JSON.stringify(dcEventParams))) {
                        event = dcEvent;
                        // args.row为行序号，下同
                        params = dcEventParams[row];
                        // 如果eventData数据不为空，并且对应行的数据也不为空
                        // 单元格数据
                    }
                    else if (eventData && !("{}" == JSON.stringify(eventData)) && eventData[row] && !("{}" == JSON.stringify(eventData[row]))) {
                        /** @type {?} */
                        let thisEventId;
                        // 如果对应行包含-1，则取-1中的数据, 否则取对应列号的数据
                        // args.col为列序号
                        /** @type {?} */
                        let thisEventData = eventData[row][-1] || eventData[row][col];
                        if (thisEventData && !("{}" == JSON.stringify(thisEventData))) {
                            if (!rcEventIds && rcEventIds.length) {
                                /** @type {?} */
                                const obj = {};
                                for (let key in thisEventData) {
                                    if (rcEventIds.findIndex((/**
                                     * @param {?} el
                                     * @return {?}
                                     */
                                    (el) => el == key)) < 0) {
                                        obj[key] = thisEventData[key];
                                    }
                                }
                                thisEventData = obj;
                            }
                            /** @type {?} */
                            let index = 0;
                            for (let key in thisEventData) {
                                if (index == 0) {
                                    thisEventId = key;
                                }
                                else {
                                    break;
                                }
                                index++;
                            }
                            params = thisEventData[thisEventId];
                        }
                        // 根据event id获取event
                        if (thisEventId != null && thisEventId != undefined) {
                            event = clickEvents[thisEventId] && !("{}" == JSON.stringify(clickEvents[thisEventId])) ? clickEvents[thisEventId].event : {};
                        }
                    }
                    /** @type {?} */
                    let message;
                    if (!("{}" == JSON.stringify(event)) && !("{}" == JSON.stringify(params))) {
                        // 返回数据
                        message = { type: 'cellAction', event, params, defaults: data.defaults };
                    }
                    if (message) {
                        try {
                            extObj.inSuiteWindow().postMessage(message, location.origin);
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                })
            }, null, false, false, false, false);
        }
        catch (e) { }
    }
    /**
     * @private
     * @param {?} entityParam
     * @param {?} paramMap
     * @param {?} parameterKey
     * @param {?} key
     * @return {?}
     */
    getQueryParameters(entityParam, paramMap, parameterKey, key) {
        try {
            /** @type {?} */
            const tab = gspframeworkService.rtf.session.getCommonVariable();
            if (tab && tab.tabId) {
                /** @type {?} */
                const tid = tab.tabId + RtfServices.getInSuiteFrmUUID();
                if (this.cache.get(tid) && this.cache.get(tid)[parameterKey]) {
                    entityParam[key] = this.cache.get(tid)[parameterKey];
                    paramMap.set(key, this.cache.get(tid)[parameterKey]);
                }
            }
        }
        catch (e) {
        }
    }
    /**
     * @param {?} spread
     * @param {?} queryId
     * @return {?}
     */
    bindSelectChanged(spread, queryId) {
        /** @type {?} */
        const self = this;
        spread.bind(GC.Spread.Sheets.Events.SelectionChanging, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            /** @type {?} */
            const tempData = {};
            /** @type {?} */
            const selection = args.newSelections.pop();
            /** @type {?} */
            const sheetArea = args.sheetArea === 0 ? 'sheetCorner' : args.sheetArea === 1 ? 'columnHeader' : args.sheetArea === 2 ? 'rowHeader' : 'viewPort';
            if (selection) {
                tempData['SpreadEvent'] = GC.Spread.Sheets.Events.SelectionChanging;
                tempData['sheetArea'] = sheetArea;
                tempData['row'] = selection.row;
                tempData['column'] = selection.col;
                tempData['rowCount'] = selection.rowCount;
                tempData['colCount'] = selection.colCount;
                this.selectChanging = tempData;
            }
        }));
        spread.bind(GC.Spread.Sheets.Events.CellClick, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            // 解析当前选中的数据
            /** @type {?} */
            const dataItems = [];
            // 联动参数
            /** @type {?} */
            let linkageParams = {};
            for (let rowIndex = 0; rowIndex < this.selectChanging.rowCount; rowIndex++) {
                if (self.joinParam.controlType !== 'crosstab') {
                    /** @type {?} */
                    const dataItem = args.sheet.getDataItem(rowIndex + this.selectChanging.row);
                    linkageParams = dataItem;
                    dataItems.push(dataItem);
                }
                else {
                    if (this.selectChanging.column === -1) {
                        this.selectChanging.colCount = this.selectChanging.colCount + 1;
                    }
                    for (let colIndex = 0; colIndex < this.selectChanging.colCount; colIndex++) {
                        /** @type {?} */
                        const dataItem = {};
                        if (self.joinParam.controlType === 'crosstab') { // 交叉表
                            if (args.sheetArea === 1) {
                                this.selectChanging.row = 0;
                            }
                            if (colIndex + this.selectChanging.column < self.joinParam.rowHeaderColInfo.end) {
                                continue;
                            }
                            // 获取行标题的数据
                            for (let i = self.joinParam.rowHeaderColInfo.start; i < self.joinParam.rowHeaderColInfo.end; i++) {
                                /** @type {?} */
                                const value = args.sheet.getValue(rowIndex + this.selectChanging.row, i, GC.Spread.Sheets.SheetArea.viewport);
                                /** @type {?} */
                                const name = args.sheet.getValue(self.joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                const colInfo = self.joinParam.colInfos.find((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                (x) => x.dimension === 1 && x.name === name)).bindField;
                                dataItem[colInfo] = value;
                            }
                            // 获取列标题的数据
                            for (let i = self.joinParam.colHeaderRowInfo.start; i < self.joinParam.colHeaderRowInfo.end; i++) {
                                /** @type {?} */
                                const value = args.sheet.getValue(i, colIndex + this.selectChanging.column, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                const colInfo = self.joinParam.colInfos.filter((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                (x) => x.dimension === 2))[i - self.joinParam.colHeaderRowInfo.start].bindField;
                                dataItem[colInfo] = value;
                            }
                            // 获取值标题的数据
                            /** @type {?} */
                            const value = args.sheet.getValue(rowIndex + this.selectChanging.row, colIndex + this.selectChanging.column, GC.Spread.Sheets.SheetArea.viewport);
                            /** @type {?} */
                            const name = args.sheet.getValue(self.joinParam.colHeaderRowInfo.end, colIndex + this.selectChanging.column, GC.Spread.Sheets.SheetArea.colHeader);
                            /** @type {?} */
                            const colInfo = self.joinParam.colInfos.find((/**
                             * @param {?} x
                             * @return {?}
                             */
                            (x) => x.dimension === 3 && x.name === name)).bindField;
                            dataItem[colInfo] = value;
                        }
                        linkageParams = dataItem;
                        dataItems.push(dataItem);
                    }
                }
            }
            // spread 联动事件
            EventBus.dispatch(queryId + '_spread_change', linkageParams);
        }));
    }
    /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    setSortCellType(sheet, schema, qdpView) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const header = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
        for (let i = 0; i < sheet.getColumnCount(); i++) {
            /** @type {?} */
            const span = sheet.getSpan(header - 1, i, GC.Spread.Sheets.SheetArea.colHeader);
            if (span && span.rowCount > 1) {
                sheet.setCellType(header - span.rowCount, i, new SortCellType(self.columnSort.bind(self), schema, qdpView), GC.Spread.Sheets.SheetArea.colHeader);
            }
            else {
                sheet.setCellType(header - 1, i, new SortCellType(self.columnSort.bind(self), schema, qdpView), GC.Spread.Sheets.SheetArea.colHeader);
            }
        }
    }
    /**
     * @param {?} sheet
     * @param {?} schema
     * @return {?}
     */
    mergeCell(sheet, schema) {
        if (!this.getMergeCell(schema)) {
            return;
        }
        /** @type {?} */
        const groupFieldCache1 = [];
        this.getGroupField(groupFieldCache1, schema);
        if (groupFieldCache1.length) {
            return;
        }
        /** @type {?} */
        const columnCount = sheet.getColumnCount();
        /** @type {?} */
        const rowCount = sheet.getRowCount();
        /** @type {?} */
        let beginRowIndex = 0;
        if (this.getShowFilterRow(schema)) {
            beginRowIndex = 1;
        }
        // 检查参数
        if (columnCount < 1 || (rowCount - beginRowIndex) < 1) {
            return;
        }
        /** @type {?} */
        const rowSpans = {};
        /** @type {?} */
        let curCellValues = '';
        /** @type {?} */
        let currentName = '';
        /** @type {?} */
        let key = '';
        for (let row = beginRowIndex; row < rowCount; row++) {
            if (sheet.getDataItem(row).hasOwnProperty("qdp_data_flag") &&
                ((sheet.getDataItem(row)["qdp_data_flag"] + '') === (4 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (3 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (2 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (1 + ''))) {
                continue;
            }
            for (let col = 0; col < columnCount; col++) {
                currentName = sheet.getCell(row, col).value();
                if (col == 0) {
                    key = currentName;
                    if (rowSpans.hasOwnProperty(key)) {
                        rowSpans[key].rowCount = row - rowSpans[key].row + 1;
                    }
                    else {
                        rowSpans[key] = { 'row': row, 'rowCount': 1, 'col': col, 'colCount': 1 };
                    }
                }
                else {
                    curCellValues = '';
                    for (let i = 0; i <= col; i++) {
                        curCellValues += sheet.getCell(row, i).value();
                        curCellValues += "_&_";
                    }
                    if (rowSpans.hasOwnProperty(curCellValues)) {
                        rowSpans[curCellValues].rowCount = row - rowSpans[curCellValues].row + 1;
                    }
                    else {
                        rowSpans[curCellValues] = { 'row': row, 'rowCount': 1, 'col': col, 'colCount': 1 };
                    }
                }
            }
        }
        for (let k in rowSpans) {
            if ((rowSpans[k].rowCount == 1 && rowSpans[k].colCount == 1) == false) {
                sheet.addSpan(rowSpans[k].row, rowSpans[k].col, rowSpans[k].rowCount, rowSpans[k].colCount);
            }
        }
    }
    /**
     * @private
     * @param {?} index
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    columnSort(index, sheet, schema, qdpView) {
        /** @type {?} */
        const loading = this.loadService.show({ container: 'body' });
        try {
            /** @type {?} */
            const header = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
            if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
                /** @type {?} */
                let cell = null;
                /** @type {?} */
                const span = sheet.getSpan(header - 1, index, GC.Spread.Sheets.SheetArea.colHeader);
                if (span && span.rowCount > 1) {
                    cell = sheet.getCell(header - span.rowCount, index, GC.Spread.Sheets.SheetArea.colHeader);
                }
                else {
                    cell = sheet.getCell(header - 1, index, GC.Spread.Sheets.SheetArea.colHeader);
                }
                if (schema && schema.isPrefab === 1) {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                    return;
                }
                if (schema.isProtected === 1 || schema.isProtected === '1') {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                    return;
                }
                /** @type {?} */
                const colList = schema.schemaValue.columnOption.colList;
                /** @type {?} */
                const params = {
                    index: index,
                    cell: cell,
                    colIndex: 0,
                    sortInfo: { sortIndex: 0, bindField: '' },
                    isText: []
                };
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    this.recursiveColumnSortIndex(colList[i], null, params);
                }
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    this.recursiveColumnSort(colList[i], null, params);
                }
                if (params.isText.length) {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.warning(params.isText[0] + ' ' + this.localizeService.getValue('ideCmp.schemaManager.message.validate.textColumnSort'));
                    return;
                }
                /** @type {?} */
                const newSchema = JSON.parse(JSON.stringify(schema));
                newSchema.schemaValue.columnOption.colList = colList;
                newSchema.schemaValue = JSON.stringify(newSchema.schemaValue);
                this.schemaManager.saveSchema({ schema: JSON.stringify(newSchema), groupType: qdpView.groupType }, '').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    loading.close();
                    qdpView.initSpread(qdpView.queryId, newSchema.id, qdpView.controlType, qdpView.qoManagerCode, qdpView.pageIndex, qdpView.queryRelativeUrl, qdpView.conditionExpression, qdpView.groupType, qdpView.voId, true);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    loading.close();
                    this.formErrorService.exception(error.Message, error);
                }));
            }
            else {
                loading.close();
                this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                return;
            }
        }
        catch (e) {
            loading.close();
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveColumnSortIndex(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSortIndex(null, col.childList, params);
            }
            else {
                if (col.sort !== 0 && col['sortIndex'] != null && col['sortIndex'] !== undefined && col.sortIndex > params.sortInfo.sortIndex) {
                    params.sortInfo.sortIndex = col['sortIndex'];
                    params.sortInfo.bindField = col.bindField;
                }
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSortIndex(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].sort !== 0 && colList[i]['sortIndex'] != null && colList[i]['sortIndex'] !== undefined && colList[i].sortIndex > params.sortInfo.sortIndex) {
                        params.sortInfo.sortIndex = colList[i]['sortIndex'];
                        params.sortInfo.bindField = colList[i].bindField;
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveColumnSort(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSort(null, col.childList, params);
            }
            else {
                if (params.colIndex === params.index) {
                    if (col.type && col.type.toLowerCase() === 'text') {
                        params.isText.push(col.bindField);
                    }
                    else {
                        switch (params.cell.tag()) {
                            case 0:
                                col.sort = 0;
                                col['sortIndex'] = 0;
                                break;
                            case 1:
                                col.sort = 1;
                                col['sortIndex'] = col['sortIndex'] !== null && col['sortIndex'] !== undefined && col['sortIndex'] > 0 ? col['sortIndex'] : col.bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                break;
                            case 2:
                                col.sort = 2;
                                col['sortIndex'] = col['sortIndex'] !== null && col['sortIndex'] !== undefined && col['sortIndex'] > 0 ? col['sortIndex'] : col.bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                break;
                        }
                    }
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSort(null, colList[i].childList, params);
                }
                else {
                    if (params.colIndex === params.index) {
                        if (colList[i].type && colList[i].type.toLowerCase() === 'text') {
                            params.isText.push(colList[i].bindField);
                        }
                        else {
                            switch (params.cell.tag()) {
                                case 0:
                                    colList[i].sort = 0;
                                    colList[i]['sortIndex'] = 0;
                                    break;
                                case 1:
                                    colList[i].sort = 1;
                                    colList[i]['sortIndex'] = colList[i]['sortIndex'] !== null && colList[i]['sortIndex'] !== undefined && colList[i]['sortIndex'] > 0 ? colList[i]['sortIndex'] : colList[i].bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                    break;
                                case 2:
                                    colList[i].sort = 2;
                                    colList[i]['sortIndex'] = colList[i]['sortIndex'] !== null && colList[i]['sortIndex'] !== undefined && colList[i]['sortIndex'] > 0 ? colList[i]['sortIndex'] : colList[i].bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                    break;
                            }
                        }
                    }
                    params.colIndex++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveIsRedColumn(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveIsRedColumn(null, col.childList, params);
            }
            else {
                if (col.isRed) {
                    params.isRedColumns.push({
                        colIndex: params.colIndex
                    });
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveIsRedColumn(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].isRed) {
                        params.isRedColumns.push({
                            colIndex: params.colIndex
                        });
                    }
                    params.colIndex++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    isNumber(val) {
        if (parseFloat(val).toString() == "NaN") {
            return false;
        }
        else {
            return true;
        }
    }
}
if (false) {
    /** @type {?} */
    SpreadStyleUtils.prototype.dataStyleArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.dataRowHeightArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.dataColInfoArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerStyleArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerRowHeightArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerSpansArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerDataArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.hyperLinkQuery;
    /**
     * @type {?}
     * @private
     */
    SpreadStyleUtils.prototype.autoFitColumnIndex;
    /** @type {?} */
    SpreadStyleUtils.prototype.type;
    /** @type {?} */
    SpreadStyleUtils.prototype.queryId;
    /** @type {?} */
    SpreadStyleUtils.prototype.valueHeaderRowCount;
    /** @type {?} */
    SpreadStyleUtils.prototype.valueHeaderRowArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.rowHeadersColumnCount;
    /** @type {?} */
    SpreadStyleUtils.prototype.rowHeaderRowArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.rowHeaderInfo;
    /** @type {?} */
    SpreadStyleUtils.prototype.valInfo;
    /** @type {?} */
    SpreadStyleUtils.prototype.joinParam;
    /** @type {?} */
    SpreadStyleUtils.prototype.jointsearchInfoList;
    /** @type {?} */
    SpreadStyleUtils.prototype.cache;
    /** @type {?} */
    SpreadStyleUtils.prototype.loadService;
    /** @type {?} */
    SpreadStyleUtils.prototype.msgService;
    /** @type {?} */
    SpreadStyleUtils.prototype.localizeService;
    /** @type {?} */
    SpreadStyleUtils.prototype.schemaManager;
    /** @type {?} */
    SpreadStyleUtils.prototype.formErrorService;
    /** @type {?} */
    SpreadStyleUtils.prototype.lcpService;
}
//# sourceMappingURL=data:application/json;base64,