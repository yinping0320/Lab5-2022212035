/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ParameterUtils } from "../util/parameter.utils";
import { RenderExtendsUtils } from "../util/render.extends.utils";
import { SchemaUtils } from "../util/schema.utils";
import { ServicesUtils } from "../util/services.utils";
import { SpreadStyleUtils } from "../util/spread.style.utils";
import { RtfServices } from '@qdp/common';
export class BaseRender {
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        this.utils = new Map();
        this.autoFitColumnIndex = 0;
        this.isSchemaSelectChanged = false;
        this.tabId = RtfServices.getTabId(_queryId);
        this.queryId = _queryId;
        this.type = _controlType;
        this.funcInfoCache = _funcInfoCache;
        this.serviceCache = _serviceCache;
        this.baseRenderInit(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache);
    }
    /**
     * @private
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @return {?}
     */
    baseRenderInit(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache) {
        /** @type {?} */
        const parameterUtils = new ParameterUtils(_queryId, _funcInfoCache, this.serviceCache);
        /** @type {?} */
        const schemaUtils = new SchemaUtils(this.serviceCache);
        /** @type {?} */
        const spreadStyleUtils = new SpreadStyleUtils(_queryId, _controlType, _jointsearchInfoList, this.serviceCache);
        /** @type {?} */
        const renderExtendsUtils = new RenderExtendsUtils(_queryId);
        this.msgService = this.serviceCache.msgService;
        this.cache = this.serviceCache.cacheService;
        this.lcpService = this.serviceCache.lcpService;
        this.loadService = this.serviceCache.loadService;
        this.localizeService = this.serviceCache.localizeService;
        this.schemaManager = this.serviceCache.schemaManagerService;
        this.formErrorService = this.serviceCache.formErrorService;
        this.queryId = _queryId;
        this.utils.set('parameter', parameterUtils);
        this.utils.set('schema', schemaUtils);
        this.utils.set('spreadStyle', spreadStyleUtils);
        this.utils.set('renderExtends', renderExtendsUtils);
        this.utils.set('queryId', _queryId);
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getData(params, queryRelativeUrl) {
        this.cache.set(this.queryId + 'param', params);
        return this.lcpService.getData(params, queryRelativeUrl);
    }
    /**
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    changeData(data, value) {
        if (data && data.data && data.dynamicCols && value) {
            if (value.schemaValue.columnOption && value.schemaValue.columnOption.colList && value.schemaValue.columnOption.colList.length) {
                /** @type {?} */
                const columns = value.schemaValue.columnOption.colList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.type === 'enum'));
                if (columns && columns.length > 0) {
                    data.data.forEach((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => {
                        columns.forEach((/**
                         * @param {?} y
                         * @return {?}
                         */
                        y => {
                            /** @type {?} */
                            const orginValue = x[y.bindField];
                            /** @type {?} */
                            let showValue = orginValue;
                            if (data.resultEnumItems) {
                                /** @type {?} */
                                const resultEnumItem = data.resultEnumItems.find((/**
                                 * @param {?} resultEnumItem
                                 * @return {?}
                                 */
                                resultEnumItem => resultEnumItem.enumName === y.bindField));
                                if (resultEnumItem) {
                                    /** @type {?} */
                                    const findShowValue = resultEnumItem.resultEnumInfoList.find((/**
                                     * @param {?} resultEnum
                                     * @return {?}
                                     */
                                    resultEnum => resultEnum.key === orginValue));
                                    if (findShowValue) {
                                        showValue = y.showType === '0' ? findShowValue.key : y.showType === '1' ? findShowValue.code : findShowValue.name;
                                    }
                                }
                            }
                            x[y.bindField] = showValue;
                        }));
                    }));
                }
            }
        }
    }
    /**
     * 二开人员自定义格式方案处理
     * @param {?} data
     * @param {?} obj
     * @return {?}
     */
    operateCustomFormatSchema(data, obj) {
        if (data.customFormatScheme) {
            obj.customFormatScheme = data.customFormatScheme;
            this.schemaManager.customSchema[obj.groupType ? obj.groupType : obj.queryId] = data.customFormatScheme;
            /** @type {?} */
            let customSchema = null;
            if (obj.schemaId === '1') {
                customSchema = this.schemaManager.mergeCustomSchema(obj.groupType ? obj.groupType : obj.queryId, obj.queryId);
            }
            if (customSchema && customSchema.schemaValue) {
                ServicesUtils.setServices(RtfServices.getTabId(obj.queryId) + 'customScheme', JSON.stringify(customSchema.schemaValue));
            }
        }
    }
    /**
     * 处理分页信息
     * @param {?} obj
     * @param {?} params
     * @return {?}
     */
    operatePagination(obj, params) {
        /** @type {?} */
        const self = this;
        if (obj.controlType === 'list') {
            /** @type {?} */
            let pageSize = 0;
            if (obj.schemaId !== '1' && self.schemaManager.schemaList && self.schemaManager.schemaList[obj.schemaId]) {
                if (typeof self.schemaManager.schemaList[obj.schemaId].schemaValue === "string") {
                    self.schemaManager.schemaList[obj.schemaId].schemaValue = JSON.parse(self.schemaManager.schemaList[obj.schemaId].schemaValue);
                }
                if (self.schemaManager.schemaList[obj.schemaId].schemaValue.otherOption.loadDataType !== 0) {
                    pageSize = self.schemaManager.schemaList[obj.schemaId].schemaValue.otherOption.pageSize;
                }
            }
            else {
                if (obj.schemaId === '1' && self.schemaManager.preSchema && self.schemaManager.preSchema.schemaValue.otherOption.loadDataType !== 0) {
                    pageSize = self.schemaManager.preSchema.schemaValue.otherOption.pageSize;
                }
            }
            if (pageSize !== 0) {
                params['pageSize'] = pageSize;
                params['pageIndex'] = !obj.pageIndex ? 1 : obj.pageIndex;
            }
        }
    }
    /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    titleVariablesReplace(sheet, data) {
        /** @type {?} */
        const colCount = sheet.getColumnCount(GC.Spread.Sheets.SheetArea.colHeader);
        /** @type {?} */
        const rowCount = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
        if (data && data.variables) {
            for (let r = 0; r < rowCount; r++) {
                for (let c = 0; c < colCount; c++) {
                    sheet.setValue(r, c, this.variablesReplace(sheet.getValue(r, c, GC.Spread.Sheets.SheetArea.colHeader), data), GC.Spread.Sheets.SheetArea.colHeader);
                }
            }
        }
    }
    /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    footerVariablesReplace(sheet, data) {
        /** @type {?} */
        const rowCount = sheet.getRowCount();
        /** @type {?} */
        const colCount = sheet.getColumnCount();
        if (this.utils.get('spreadStyle').footerDataArray && this.utils.get('spreadStyle').footerDataArray.length) {
            for (let r = 0; r < this.utils.get('spreadStyle').footerDataArray.length; r++) {
                for (let c = 0; c < colCount; c++) {
                    sheet.setValue(r + (rowCount - this.utils.get('spreadStyle').footerDataArray.length), c, this.variablesReplace(this.utils.get('spreadStyle').footerDataArray[r][c], data));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} cellValue
     * @param {?} data
     * @return {?}
     */
    variablesReplace(cellValue, data) {
        if (data && data.variables) {
            Object.keys(data.variables).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                /** @type {?} */
                const reg = new RegExp(key, 'g');
                if (cellValue) {
                    cellValue = cellValue.replace(reg, data.variables[key]);
                }
            }));
        }
        return cellValue;
    }
    /**
     * @param {?} spread
     * @param {?} errmsg
     * @return {?}
     */
    errorHandle(spread, errmsg) {
        if (spread.getActiveSheet()) {
            spread.removeSheet(0);
        }
        spread.options.tabStripVisible = false;
        this.msgService.warning(errmsg);
        return;
    }
}
if (false) {
    /** @type {?} */
    BaseRender.prototype.queryId;
    /** @type {?} */
    BaseRender.prototype.type;
    /** @type {?} */
    BaseRender.prototype.utils;
    /** @type {?} */
    BaseRender.prototype.autoFitColumnIndex;
    /** @type {?} */
    BaseRender.prototype.cache;
    /** @type {?} */
    BaseRender.prototype.msgService;
    /** @type {?} */
    BaseRender.prototype.lcpService;
    /** @type {?} */
    BaseRender.prototype.localizeService;
    /** @type {?} */
    BaseRender.prototype.schemaManager;
    /** @type {?} */
    BaseRender.prototype.formErrorService;
    /** @type {?} */
    BaseRender.prototype.loadService;
    /** @type {?} */
    BaseRender.prototype.funcInfoCache;
    /** @type {?} */
    BaseRender.prototype.serviceCache;
    /** @type {?} */
    BaseRender.prototype.isSchemaSelectChanged;
    /** @type {?} */
    BaseRender.prototype.tabId;
}
//# sourceMappingURL=data:application/json;base64,