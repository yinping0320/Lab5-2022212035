/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, Optional } from '@angular/core';
import { SchemaManagerService, LcpService } from '@qdp/common';
import { CacheService } from '@ecp-caf/caf-common';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { DataRenderExtendService } from '@qdp/common';
import { RtfServices } from '@qdp/common';
import { LocalizeService } from '@qdp/localize';
import { MessagerService } from '@farris/ui-messager';
import { FormErrorService } from '@farris/command-services';
import { CloudprintService } from '@gsp-svc/cloudprint';
import { ServicesUtils } from '../../util/services.utils';
import { CrosstabRender } from '../../engine/crosstab-render';
import { ListTreeRender } from '../../engine/list-render';
var RenderService = /** @class */ (function () {
    function RenderService(schemaManager, lcpService, cache, loadService, msgService, dataRenderExtendService, injector) {
        this.schemaManager = schemaManager;
        this.lcpService = lcpService;
        this.cache = cache;
        this.loadService = loadService;
        this.msgService = msgService;
        this.dataRenderExtendService = dataRenderExtendService;
        this.injector = injector;
        this.serviceCache = {};
        this.columnCount = 0;
        this.operations = {};
        this.funcInfoCache = {
            funcIds: [],
            firstLoadCache: []
        };
        /** @type {?} */
        var self = this;
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.formErrorService = this.injector.get(FormErrorService);
            this.cloudprintService = this.injector.get(CloudprintService);
            this.notifyService = this.injector.get(NotifyService);
            this.setService();
            self.schemaManager.operationChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    self.operations = value;
                }
            }));
            self.setSecurityLevel();
        }
    }
    /**
     * @private
     * @return {?}
     */
    RenderService.prototype.setService = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tabId = RtfServices.getTabId() || 'default';
        this.serviceCache[tabId] = {
            'formErrorService': this.formErrorService,
            'cloudprintService': this.cloudprintService,
            'schemaManagerService': this.schemaManager,
            'lcpService': this.lcpService,
            'cacheService': this.cache,
            'loadingService': this.loadService,
            'msgService': this.msgService,
            'localizeService': this.localizeService,
            'notifyService': this.notifyService
        };
    };
    /**
     * @private
     * @return {?}
     */
    RenderService.prototype.getService = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tabId = RtfServices.getTabId() || 'default';
        return this.serviceCache[tabId];
    };
    /**
     * @private
     * @return {?}
     */
    RenderService.prototype.setSecurityLevel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.lcpService.variablesChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && data.hasOwnProperty('securityLevel') && data['securityLevel']) {
                _this.cache.set(RtfServices.getTabId() + 'securityLevel', data['securityLevel']);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RenderService.prototype.getSecurityLevel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.cache.get(RtfServices.getTabId() + 'securityLevel')) {
            return this.cache.get(RtfServices.getTabId() + 'securityLevel');
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    RenderService.prototype.render = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (!option.loading) {
            option.loading = this.loadService.show({ container: 'body' });
        }
        this.spread = option.spread ? option.spread : null;
        this.renderObject = this.getRender(option);
        this.renderObject.render(option);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    RenderService.prototype.getRender = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.setService();
        ServicesUtils.setServices('dataRenderExtendService' + obj.queryId, this.dataRenderExtendService);
        /** @type {?} */
        var render;
        switch (obj.controlType) {
            case 'crosstab':
                render = new CrosstabRender(obj.queryId, obj.controlType, obj.jointsearchInfoList, this.funcInfoCache, this.getService());
                break;
            default:
                render = new ListTreeRender(obj.queryId, obj.controlType, obj.jointsearchInfoList, this.funcInfoCache, this.getService());
                break;
        }
        render.isSchemaSelectChanged = obj.isSchemaSelectChanged ? obj.isSchemaSelectChanged : false;
        return render;
    };
    /**
     * @param {?} renderOption
     * @return {?}
     */
    RenderService.prototype.exportData = /**
     * @param {?} renderOption
     * @return {?}
     */
    function (renderOption) {
        var _this = this;
        // exportData(queryId: any, schemaId: any, controlType: any, pageIndex?: number, qoManagerCode?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, voId?: any, totalCount?: any, exportType?: any) {
        /** @type {?} */
        var loading = this.loadService.show({ container: 'body' });
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            var schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            if (RtfServices.getFuncName()) {
                schemaName = RtfServices.getFuncName() + '-' + schemaName;
            }
            renderOption.excelExportName = schemaName;
            /** @type {?} */
            var params = _this.renderObject.utils.get('parameter').createParameters(renderOption);
            params['exportType'] = renderOption.exportType ? renderOption.exportType : '';
            /** @type {?} */
            var isCustomShema = false;
            /** @type {?} */
            var customSchema = null;
            if (params['schemaId'] === '1') {
                if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                    isCustomShema = true;
                    params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                    customSchema = JSON.parse(params.customSchema);
                    if (!params.excelExportName) {
                        params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                            ? customSchema.titleOption.title : 'export';
                    }
                }
                else {
                    _this.msgService.warning(_this.localizeService.getValue('spread.message.export'));
                    loading.close();
                    return;
                }
            }
            if (_this.operations['QdpQueryExport'] === false) {
                _this.msgService.warning(_this.localizeService.getValue('spread.message.validate.qdpQueryExport'));
                loading.close();
                return;
            }
            try {
                if (renderOption.controlType === 'treelist' && _this.spread) {
                    /** @type {?} */
                    var expandNodes = '';
                    if (value && value.schemaValue && value.schemaValue.otherOption && value.schemaValue.otherOption.treeInfoType !== 2) {
                        /** @type {?} */
                        var pathField = value.schemaValue.otherOption.treeInfoType === 0 ? value.schemaValue.otherOption.pathField : value.schemaValue.otherOption.idField;
                        if (pathField) {
                            for (var i = 0; i < _this.spread.getActiveSheet().getRowCount(); i++) {
                                if (_this.spread.getActiveSheet().rowOutlines.isCollapsed(i)) {
                                    expandNodes += ',' + _this.spread.getActiveSheet().getDataItem(i)[pathField];
                                }
                            }
                            params['expandNodes'] = expandNodes.substring(1);
                        }
                    }
                }
            }
            catch (e) {
            }
            _this.columnCount = 0;
            if (!isCustomShema) {
                _this.calculationColumnCount(value.schemaValue.columnOption.colList);
            }
            else {
                if (customSchema && customSchema.columnOption && customSchema.columnOption.colList) {
                    _this.calculationColumnCount(customSchema.columnOption.colList);
                }
            }
            _this.lcpService.loading = loading;
            if (_this.getSecurityLevel()) {
                params.excelExportName += '_' + _this.getSecurityLevel();
            }
            if ((_this.columnCount * renderOption.totalCount) < 100000) {
                _this.lcpService.exportData(params, renderOption.queryRelativeUrl);
                loading.close();
            }
            else {
                _this.lcpService.aysnExportData(params, renderOption.queryRelativeUrl);
                loading.close();
                _this.msgService.warning(_this.localizeService.getValue('spread.message.aysnExport'));
            }
        }));
    };
    /**
     * @private
     * @param {?} colList
     * @return {?}
     */
    RenderService.prototype.calculationColumnCount = /**
     * @private
     * @param {?} colList
     * @return {?}
     */
    function (colList) {
        var _this = this;
        try {
            colList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.childList && item.childList.length) {
                    _this.calculationColumnCount(item.childList);
                }
                else {
                    _this.columnCount += 1;
                }
            }));
        }
        catch (e) {
            this.columnCount = 0;
        }
    };
    /**
     * @param {?} queryId
     * @param {?} schemaId
     * @param {?} controlType
     * @param {?=} qoManagerCode
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} groupType
     * @param {?=} voId
     * @return {?}
     */
    RenderService.prototype.clearCache = /**
     * @param {?} queryId
     * @param {?} schemaId
     * @param {?} controlType
     * @param {?=} qoManagerCode
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} groupType
     * @param {?=} voId
     * @return {?}
     */
    function (queryId, schemaId, controlType, qoManagerCode, queryRelativeUrl, filterCondition, groupType, voId) {
        var _this = this;
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: schemaId, queryId: queryId, queryRelativeUrl: queryRelativeUrl, groupType: groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            schemaId = schemaId ? schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            var schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            /** @type {?} */
            var params = _this.renderObject.utils.get('parameter').createParameters({
                queryId: queryId,
                controlType: controlType,
                schemaId: schemaId,
                qoManagerCode: qoManagerCode,
                pageIndex: 0,
                pageSize: 0,
                excelExportName: schemaName,
                filterCondition: filterCondition,
                voId: voId
            });
            if (ServicesUtils.getServices(RtfServices.getTabId(queryId) + 'customScheme')) {
                params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(queryId) + 'customScheme');
            }
            _this.lcpService.clearCache(params).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data) {
                    _this.notifyService['success']((/** @type {?} */ ({
                        title: _this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: _this.localizeService.getValue('spread.message.clearCache'), timeout: 3000
                    })));
                }
            }));
        }));
    };
    /**
     * @param {?} renderOption
     * @return {?}
     */
    RenderService.prototype.pdfExportEvent = /**
     * @param {?} renderOption
     * @return {?}
     */
    function (renderOption) {
        var _this = this;
        // pdfExportEvent(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, pageIndex?: any, voId?: any) {
        /** @type {?} */
        var loading = this.loadService.show({ container: 'body' });
        try {
            this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
                /** @type {?} */
                var schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                    ? value.schemaValue.titleOption.title
                    : value && value.schemaName
                        ? value.schemaName
                        : '';
                if (RtfServices.getFuncName()) {
                    schemaName = RtfServices.getFuncName() + '-' + schemaName;
                }
                renderOption.excelExportName = schemaName;
                /** @type {?} */
                var params = _this.renderObject.utils.get('parameter').createParameters(renderOption);
                if (params['schemaId'] === '1') {
                    if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                        params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                        /** @type {?} */
                        var customSchema = JSON.parse(params.customSchema);
                        if (!params.excelExportName) {
                            params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                                ? customSchema.titleOption.title : 'export';
                        }
                    }
                    else {
                        _this.msgService.warning(_this.localizeService.getValue('spread.message.print'));
                        loading.close();
                        return;
                    }
                }
                if (_this.operations['QdpQueryPrint'] === false) {
                    _this.msgService.warning(_this.localizeService.getValue('spread.message.validate.qdpQueryPrint'));
                    loading.close();
                    return;
                }
                if (_this.getSecurityLevel()) {
                    params.excelExportName += '_' + _this.getSecurityLevel();
                }
                _this.lcpService.pdfExportEvent(params, renderOption.queryRelativeUrl);
                loading.close();
            }));
        }
        catch (e) {
            loading.close();
            // console.log(e);
        }
    };
    /**
     * @param {?} renderOption
     * @return {?}
     */
    RenderService.prototype.printPreView = /**
     * @param {?} renderOption
     * @return {?}
     */
    function (renderOption) {
        var _this = this;
        // printPreView(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, pageIndex?: any, voId?: any) {
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            var schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            renderOption.excelExportName = schemaName;
            /** @type {?} */
            var params = _this.renderObject.utils.get('parameter').createParameters(renderOption);
            if (params['schemaId'] === '1') {
                if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                    params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                    /** @type {?} */
                    var customSchema = JSON.parse(params.customSchema);
                    if (!params.excelExportName) {
                        params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                            ? customSchema.titleOption.title : 'export';
                    }
                }
                else {
                    _this.msgService.warning(_this.localizeService.getValue('spread.message.preview'));
                    return;
                }
            }
            if (_this.getSecurityLevel()) {
                params.excelExportName += '_' + _this.getSecurityLevel();
            }
            _this.lcpService.cloudprintService = _this.cloudprintService;
            _this.lcpService.printPreView(params, renderOption.queryRelativeUrl);
        }));
    };
    /**
     * @param {?=} queryId
     * @return {?}
     */
    RenderService.prototype.clearFirstLoadCache = /**
     * @param {?=} queryId
     * @return {?}
     */
    function (queryId) {
        /** @type {?} */
        var funcId = RtfServices.getTabId(queryId);
        /** @type {?} */
        var index = this.funcInfoCache.firstLoadCache.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return el === funcId; }));
        if (index >= 0) {
            this.funcInfoCache.firstLoadCache.splice(index, 1);
        }
    };
    RenderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RenderService.ctorParameters = function () { return [
        { type: SchemaManagerService },
        { type: LcpService },
        { type: CacheService },
        { type: LoadingService },
        { type: MessagerService },
        { type: DataRenderExtendService, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return RenderService;
}());
export { RenderService };
if (false) {
    /** @type {?} */
    RenderService.prototype.cloudprintService;
    /** @type {?} */
    RenderService.prototype.formErrorService;
    /** @type {?} */
    RenderService.prototype.localizeService;
    /** @type {?} */
    RenderService.prototype.notifyService;
    /** @type {?} */
    RenderService.prototype.serviceCache;
    /** @type {?} */
    RenderService.prototype.columnCount;
    /** @type {?} */
    RenderService.prototype.operations;
    /** @type {?} */
    RenderService.prototype.renderObject;
    /** @type {?} */
    RenderService.prototype.spread;
    /** @type {?} */
    RenderService.prototype.funcInfoCache;
    /** @type {?} */
    RenderService.prototype.schemaManager;
    /** @type {?} */
    RenderService.prototype.lcpService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.dataRenderExtendService;
    /**
     * @type {?}
     * @private
     */
    RenderService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL3NwcmVhZC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3JlbmRlci9yZW5kZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUF5RCxNQUFNLGFBQWEsQ0FBQztBQUd0SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLHVCQUF1QixFQUFZLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFTMUQ7SUFnQkUsdUJBQ1MsYUFBbUMsRUFDbkMsVUFBc0IsRUFDckIsS0FBbUIsRUFDbkIsV0FBMkIsRUFDM0IsVUFBMkIsRUFDZix1QkFBZ0QsRUFDaEQsUUFBa0I7UUFOL0Isa0JBQWEsR0FBYixhQUFh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SUFDTCxDQUFDOzs7OztJQUVELDJDQUFtQjs7OztJQUFuQixVQUFvQixPQUFhOztZQUN6QixNQUFNLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7O1lBQ3RDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLEtBQUssTUFBTSxFQUFiLENBQWEsRUFBQztRQUM5RSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQzs7Z0JBdlRGLFVBQVU7Ozs7Z0JBeEJGLG9CQUFvQjtnQkFBRSxVQUFVO2dCQUdoQyxZQUFZO2dCQUNaLGNBQWM7Z0JBS2QsZUFBZTtnQkFIZix1QkFBdUIsdUJBd0MzQixRQUFRO2dCQS9DUSxRQUFRLHVCQWdEeEIsUUFBUTs7SUFpU2Isb0JBQUM7Q0FBQSxBQXhURCxJQXdUQztTQXZUWSxhQUFhOzs7SUFDeEIsMENBQXFDOztJQUNyQyx5Q0FBc0I7O0lBQ3RCLHdDQUFpQzs7SUFDakMsc0NBQTZCOztJQUM3QixxQ0FBa0I7O0lBQ2xCLG9DQUFnQjs7SUFDaEIsbUNBQWdCOztJQUNoQixxQ0FBa0I7O0lBQ2xCLCtCQUFZOztJQUNaLHNDQUdDOztJQUdDLHNDQUEwQzs7SUFDMUMsbUNBQTZCOzs7OztJQUM3Qiw4QkFBMkI7Ozs7O0lBQzNCLG9DQUFtQzs7Ozs7SUFDbkMsbUNBQW1DOzs7OztJQUNuQyxnREFBb0U7Ozs7O0lBQ3BFLGlDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBPcHRpb25hbCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNjaGVtYU1hbmFnZXJTZXJ2aWNlLCBMY3BTZXJ2aWNlLCBQYXJhc01hcHBpbmdNYW5hZ2VyU2VydmljZSwgSm9pbnRTZWFyY2hNYW5hZ2VyU2VydmljZSB9IGZyb20gJ0BxZHAvY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgTG9hZGluZ1NlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvYWRpbmcnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlLCBOb3RpZnlPcHRpb25zIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBEYXRhUmVuZGVyRXh0ZW5kU2VydmljZSwgRXZlbnRCdXMgfSBmcm9tICdAcWRwL2NvbW1vbic7XHJcbmltcG9ydCB7IFJ0ZlNlcnZpY2VzIH0gZnJvbSAnQHFkcC9jb21tb24nO1xyXG5pbXBvcnQgeyBMb2NhbGl6ZVNlcnZpY2UgfSBmcm9tICdAcWRwL2xvY2FsaXplJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEZvcm1FcnJvclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL2NvbW1hbmQtc2VydmljZXMnO1xyXG5pbXBvcnQgeyBDbG91ZHByaW50U2VydmljZSB9IGZyb20gJ0Bnc3Atc3ZjL2Nsb3VkcHJpbnQnO1xyXG5pbXBvcnQgeyBTZXJ2aWNlc1V0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbC9zZXJ2aWNlcy51dGlscyc7XHJcbmltcG9ydCB7IFJlbmRlck9wdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9SZW5kZXJPcHRpb24nO1xyXG5pbXBvcnQgeyBDcm9zc3RhYlJlbmRlciB9IGZyb20gJy4uLy4uL2VuZ2luZS9jcm9zc3RhYi1yZW5kZXInO1xyXG5pbXBvcnQgeyBMaXN0VHJlZVJlbmRlciB9IGZyb20gJy4uLy4uL2VuZ2luZS9saXN0LXJlbmRlcic7XHJcblxyXG5kZWNsYXJlIHZhciBHQzogYW55O1xyXG5kZWNsYXJlIHZhciBUcmVlQ2VsbFR5cGU6IGFueTtcclxuZGVjbGFyZSB2YXIgTXlOdW1Gb3JtYXR0ZXI6IGFueTtcclxuZGVjbGFyZSB2YXIgRmlsdGVyQ2VsbFR5cGU6IGFueTtcclxuZGVjbGFyZSB2YXIgZ3NwZnJhbWV3b3JrU2VydmljZTogYW55O1xyXG5kZWNsYXJlIHZhciBTb3J0Q2VsbFR5cGU6IGFueTtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlbmRlclNlcnZpY2Uge1xyXG4gIGNsb3VkcHJpbnRTZXJ2aWNlOiBDbG91ZHByaW50U2VydmljZTtcclxuICBmb3JtRXJyb3JTZXJ2aWNlOiBhbnk7XHJcbiAgbG9jYWxpemVTZXJ2aWNlOiBMb2NhbGl6ZVNlcnZpY2U7XHJcbiAgbm90aWZ5U2VydmljZTogTm90aWZ5U2VydmljZTtcclxuICBzZXJ2aWNlQ2FjaGUgPSB7fTtcclxuICBjb2x1bW5Db3VudCA9IDA7XHJcbiAgb3BlcmF0aW9ucyA9IHt9O1xyXG4gIHJlbmRlck9iamVjdDogYW55O1xyXG4gIHNwcmVhZDogYW55O1xyXG4gIGZ1bmNJbmZvQ2FjaGUgPSB7XHJcbiAgICBmdW5jSWRzOiBbXSxcclxuICAgIGZpcnN0TG9hZENhY2hlOiBbXVxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgc2NoZW1hTWFuYWdlcjogU2NoZW1hTWFuYWdlclNlcnZpY2UsXHJcbiAgICBwdWJsaWMgbGNwU2VydmljZTogTGNwU2VydmljZSxcclxuICAgIHByaXZhdGUgY2FjaGU6IENhY2hlU2VydmljZSxcclxuICAgIHByaXZhdGUgbG9hZFNlcnZpY2U6IExvYWRpbmdTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGRhdGFSZW5kZXJFeHRlbmRTZXJ2aWNlOiBEYXRhUmVuZGVyRXh0ZW5kU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgKSB7XHJcbiAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgIGlmICh0aGlzLmluamVjdG9yKSB7XHJcbiAgICAgIHRoaXMubG9jYWxpemVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxpemVTZXJ2aWNlKTtcclxuICAgICAgdGhpcy5mb3JtRXJyb3JTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoRm9ybUVycm9yU2VydmljZSk7XHJcbiAgICAgIHRoaXMuY2xvdWRwcmludFNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChDbG91ZHByaW50U2VydmljZSk7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE5vdGlmeVNlcnZpY2UpO1xyXG4gICAgICB0aGlzLnNldFNlcnZpY2UoKTtcclxuICAgICAgc2VsZi5zY2hlbWFNYW5hZ2VyLm9wZXJhdGlvbkNoYW5nZS5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgIHNlbGYub3BlcmF0aW9ucyA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgc2VsZi5zZXRTZWN1cml0eUxldmVsKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFNlcnZpY2UoKSB7XHJcbiAgICBjb25zdCB0YWJJZCA9IFJ0ZlNlcnZpY2VzLmdldFRhYklkKCkgfHwgJ2RlZmF1bHQnO1xyXG4gICAgdGhpcy5zZXJ2aWNlQ2FjaGVbdGFiSWRdID0ge1xyXG4gICAgICAnZm9ybUVycm9yU2VydmljZSc6IHRoaXMuZm9ybUVycm9yU2VydmljZSxcclxuICAgICAgJ2Nsb3VkcHJpbnRTZXJ2aWNlJzogdGhpcy5jbG91ZHByaW50U2VydmljZSxcclxuICAgICAgJ3NjaGVtYU1hbmFnZXJTZXJ2aWNlJzogdGhpcy5zY2hlbWFNYW5hZ2VyLFxyXG4gICAgICAnbGNwU2VydmljZSc6IHRoaXMubGNwU2VydmljZSxcclxuICAgICAgJ2NhY2hlU2VydmljZSc6IHRoaXMuY2FjaGUsXHJcbiAgICAgICdsb2FkaW5nU2VydmljZSc6IHRoaXMubG9hZFNlcnZpY2UsXHJcbiAgICAgICdtc2dTZXJ2aWNlJzogdGhpcy5tc2dTZXJ2aWNlLFxyXG4gICAgICAnbG9jYWxpemVTZXJ2aWNlJzogdGhpcy5sb2NhbGl6ZVNlcnZpY2UsXHJcbiAgICAgICdub3RpZnlTZXJ2aWNlJzogdGhpcy5ub3RpZnlTZXJ2aWNlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRTZXJ2aWNlKCkge1xyXG4gICAgY29uc3QgdGFiSWQgPSBSdGZTZXJ2aWNlcy5nZXRUYWJJZCgpIHx8ICdkZWZhdWx0JztcclxuICAgIHJldHVybiB0aGlzLnNlcnZpY2VDYWNoZVt0YWJJZF07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFNlY3VyaXR5TGV2ZWwoKSB7XHJcbiAgICB0aGlzLmxjcFNlcnZpY2UudmFyaWFibGVzQ2hhbmdlLnN1YnNjcmliZSgoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgIGlmIChkYXRhICYmIGRhdGEuaGFzT3duUHJvcGVydHkoJ3NlY3VyaXR5TGV2ZWwnKSAmJiBkYXRhWydzZWN1cml0eUxldmVsJ10pIHtcclxuICAgICAgICB0aGlzLmNhY2hlLnNldChSdGZTZXJ2aWNlcy5nZXRUYWJJZCgpICsgJ3NlY3VyaXR5TGV2ZWwnLCBkYXRhWydzZWN1cml0eUxldmVsJ10pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0U2VjdXJpdHlMZXZlbCgpIHtcclxuICAgIGlmICh0aGlzLmNhY2hlLmdldChSdGZTZXJ2aWNlcy5nZXRUYWJJZCgpICsgJ3NlY3VyaXR5TGV2ZWwnKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoUnRmU2VydmljZXMuZ2V0VGFiSWQoKSArICdzZWN1cml0eUxldmVsJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIob3B0aW9uOiBSZW5kZXJPcHRpb24pIHtcclxuICAgIGlmICghb3B0aW9uLmxvYWRpbmcpIHtcclxuICAgICAgb3B0aW9uLmxvYWRpbmcgPSB0aGlzLmxvYWRTZXJ2aWNlLnNob3coeyBjb250YWluZXI6ICdib2R5JyB9KTtcclxuICAgIH1cclxuICAgIHRoaXMuc3ByZWFkID0gb3B0aW9uLnNwcmVhZCA/IG9wdGlvbi5zcHJlYWQgOiBudWxsO1xyXG4gICAgdGhpcy5yZW5kZXJPYmplY3QgPSB0aGlzLmdldFJlbmRlcihvcHRpb24pO1xyXG4gICAgdGhpcy5yZW5kZXJPYmplY3QucmVuZGVyKG9wdGlvbik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFJlbmRlcihvYmo6IFJlbmRlck9wdGlvbikge1xyXG4gICAgdGhpcy5zZXRTZXJ2aWNlKCk7XHJcbiAgICBTZXJ2aWNlc1V0aWxzLnNldFNlcnZpY2VzKCdkYXRhUmVuZGVyRXh0ZW5kU2VydmljZScgKyBvYmoucXVlcnlJZCwgdGhpcy5kYXRhUmVuZGVyRXh0ZW5kU2VydmljZSk7XHJcbiAgICBsZXQgcmVuZGVyO1xyXG4gICAgc3dpdGNoIChvYmouY29udHJvbFR5cGUpIHtcclxuICAgICAgY2FzZSAnY3Jvc3N0YWInOlxyXG4gICAgICAgIHJlbmRlciA9IG5ldyBDcm9zc3RhYlJlbmRlcihvYmoucXVlcnlJZCwgb2JqLmNvbnRyb2xUeXBlLCBvYmouam9pbnRzZWFyY2hJbmZvTGlzdCwgdGhpcy5mdW5jSW5mb0NhY2hlLCB0aGlzLmdldFNlcnZpY2UoKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmVuZGVyID0gbmV3IExpc3RUcmVlUmVuZGVyKG9iai5xdWVyeUlkLCBvYmouY29udHJvbFR5cGUsIG9iai5qb2ludHNlYXJjaEluZm9MaXN0LCB0aGlzLmZ1bmNJbmZvQ2FjaGUsIHRoaXMuZ2V0U2VydmljZSgpKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJlbmRlci5pc1NjaGVtYVNlbGVjdENoYW5nZWQgPSBvYmouaXNTY2hlbWFTZWxlY3RDaGFuZ2VkID8gb2JqLmlzU2NoZW1hU2VsZWN0Q2hhbmdlZCA6IGZhbHNlO1xyXG4gICAgcmV0dXJuIHJlbmRlcjtcclxuICB9XHJcblxyXG4gIGV4cG9ydERhdGEocmVuZGVyT3B0aW9uOiBSZW5kZXJPcHRpb24pIHtcclxuICAvLyBleHBvcnREYXRhKHF1ZXJ5SWQ6IGFueSwgc2NoZW1hSWQ6IGFueSwgY29udHJvbFR5cGU6IGFueSwgcGFnZUluZGV4PzogbnVtYmVyLCBxb01hbmFnZXJDb2RlPzogYW55LCBxdWVyeVJlbGF0aXZlVXJsPzogYW55LCBmaWx0ZXJDb25kaXRpb24/OiBhbnksIGdyb3VwVHlwZT86IGFueSwgdm9JZD86IGFueSwgdG90YWxDb3VudD86IGFueSwgZXhwb3J0VHlwZT86IGFueSkge1xyXG4gICAgY29uc3QgbG9hZGluZyA9IHRoaXMubG9hZFNlcnZpY2Uuc2hvdyh7IGNvbnRhaW5lcjogJ2JvZHknIH0pO1xyXG4gICAgdGhpcy5yZW5kZXJPYmplY3QudXRpbHMuZ2V0KCdzY2hlbWEnKS5nZXRTY2hlbWFJbmZvKHsgc2NoZW1hSWQ6IHJlbmRlck9wdGlvbi5zY2hlbWFWYWx1ZSwgcXVlcnlJZDogcmVuZGVyT3B0aW9uLnF1ZXJ5SWQsIHF1ZXJ5UmVsYXRpdmVVcmw6IHJlbmRlck9wdGlvbi5xdWVyeVJlbGF0aXZlVXJsLCBncm91cFR5cGU6IHJlbmRlck9wdGlvbi5ncm91cFR5cGUgfSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgcmVuZGVyT3B0aW9uLnNjaGVtYUlkID0gcmVuZGVyT3B0aW9uLnNjaGVtYUlkID8gcmVuZGVyT3B0aW9uLnNjaGVtYUlkIDogKHZhbHVlICYmIHZhbHVlLmlkID8gdmFsdWUuaWQgOiAnMScpO1xyXG4gICAgICBsZXQgc2NoZW1hTmFtZSA9IHZhbHVlICYmIHZhbHVlLnNjaGVtYVZhbHVlICYmIHZhbHVlLnNjaGVtYVZhbHVlLnRpdGxlT3B0aW9uICYmIHZhbHVlLnNjaGVtYVZhbHVlLnRpdGxlT3B0aW9uLnRpdGxlXHJcbiAgICAgICAgPyB2YWx1ZS5zY2hlbWFWYWx1ZS50aXRsZU9wdGlvbi50aXRsZVxyXG4gICAgICAgIDogdmFsdWUgJiYgdmFsdWUuc2NoZW1hTmFtZVxyXG4gICAgICAgICAgPyB2YWx1ZS5zY2hlbWFOYW1lXHJcbiAgICAgICAgICA6ICcnO1xyXG4gICAgICBpZiAoUnRmU2VydmljZXMuZ2V0RnVuY05hbWUoKSkge1xyXG4gICAgICAgIHNjaGVtYU5hbWUgPSBSdGZTZXJ2aWNlcy5nZXRGdW5jTmFtZSgpICsgJy0nICsgc2NoZW1hTmFtZTtcclxuICAgICAgfVxyXG4gICAgICByZW5kZXJPcHRpb24uZXhjZWxFeHBvcnROYW1lID0gc2NoZW1hTmFtZTtcclxuICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5yZW5kZXJPYmplY3QudXRpbHMuZ2V0KCdwYXJhbWV0ZXInKS5jcmVhdGVQYXJhbWV0ZXJzKHJlbmRlck9wdGlvbik7XHJcbiAgICAgIHBhcmFtc1snZXhwb3J0VHlwZSddID0gcmVuZGVyT3B0aW9uLmV4cG9ydFR5cGUgPyByZW5kZXJPcHRpb24uZXhwb3J0VHlwZSA6ICcnO1xyXG4gICAgICBsZXQgaXNDdXN0b21TaGVtYSA9IGZhbHNlO1xyXG4gICAgICBsZXQgY3VzdG9tU2NoZW1hID0gbnVsbDtcclxuICAgICAgaWYgKHBhcmFtc1snc2NoZW1hSWQnXSA9PT0gJzEnKSB7XHJcbiAgICAgICAgaWYgKFNlcnZpY2VzVXRpbHMuZ2V0U2VydmljZXMoUnRmU2VydmljZXMuZ2V0VGFiSWQocmVuZGVyT3B0aW9uLnF1ZXJ5SWQpICsgJ2N1c3RvbVNjaGVtZScpKSB7XHJcbiAgICAgICAgICBpc0N1c3RvbVNoZW1hID0gdHJ1ZTtcclxuICAgICAgICAgIHBhcmFtcy5jdXN0b21TY2hlbWEgPSBTZXJ2aWNlc1V0aWxzLmdldFNlcnZpY2VzKFJ0ZlNlcnZpY2VzLmdldFRhYklkKHJlbmRlck9wdGlvbi5xdWVyeUlkKSArICdjdXN0b21TY2hlbWUnKTtcclxuICAgICAgICAgIGN1c3RvbVNjaGVtYSA9IEpTT04ucGFyc2UocGFyYW1zLmN1c3RvbVNjaGVtYSk7XHJcbiAgICAgICAgICBpZiAoIXBhcmFtcy5leGNlbEV4cG9ydE5hbWUpIHtcclxuICAgICAgICAgICAgcGFyYW1zLmV4Y2VsRXhwb3J0TmFtZSA9IGN1c3RvbVNjaGVtYSAmJiBjdXN0b21TY2hlbWEudGl0bGVPcHRpb24gJiYgY3VzdG9tU2NoZW1hLnRpdGxlT3B0aW9uLnRpdGxlXHJcbiAgICAgICAgICAgICAgPyBjdXN0b21TY2hlbWEudGl0bGVPcHRpb24udGl0bGUgOiAnZXhwb3J0J1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLm1zZ1NlcnZpY2Uud2FybmluZyh0aGlzLmxvY2FsaXplU2VydmljZS5nZXRWYWx1ZSgnc3ByZWFkLm1lc3NhZ2UuZXhwb3J0JykpO1xyXG4gICAgICAgICAgbG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5vcGVyYXRpb25zWydRZHBRdWVyeUV4cG9ydCddID09PSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMubXNnU2VydmljZS53YXJuaW5nKHRoaXMubG9jYWxpemVTZXJ2aWNlLmdldFZhbHVlKCdzcHJlYWQubWVzc2FnZS52YWxpZGF0ZS5xZHBRdWVyeUV4cG9ydCcpKTtcclxuICAgICAgICBsb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmIChyZW5kZXJPcHRpb24uY29udHJvbFR5cGUgPT09ICd0cmVlbGlzdCcgJiYgdGhpcy5zcHJlYWQpIHtcclxuICAgICAgICAgIGxldCBleHBhbmROb2RlcyA9ICcnO1xyXG4gICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnNjaGVtYVZhbHVlICYmIHZhbHVlLnNjaGVtYVZhbHVlLm90aGVyT3B0aW9uICYmIHZhbHVlLnNjaGVtYVZhbHVlLm90aGVyT3B0aW9uLnRyZWVJbmZvVHlwZSAhPT0gMikge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoRmllbGQgPSB2YWx1ZS5zY2hlbWFWYWx1ZS5vdGhlck9wdGlvbi50cmVlSW5mb1R5cGUgPT09IDAgPyB2YWx1ZS5zY2hlbWFWYWx1ZS5vdGhlck9wdGlvbi5wYXRoRmllbGQgOiB2YWx1ZS5zY2hlbWFWYWx1ZS5vdGhlck9wdGlvbi5pZEZpZWxkO1xyXG4gICAgICAgICAgICBpZiAocGF0aEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNwcmVhZC5nZXRBY3RpdmVTaGVldCgpLmdldFJvd0NvdW50KCk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ByZWFkLmdldEFjdGl2ZVNoZWV0KCkucm93T3V0bGluZXMuaXNDb2xsYXBzZWQoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgZXhwYW5kTm9kZXMgKz0gJywnICsgdGhpcy5zcHJlYWQuZ2V0QWN0aXZlU2hlZXQoKS5nZXREYXRhSXRlbShpKVtwYXRoRmllbGRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBwYXJhbXNbJ2V4cGFuZE5vZGVzJ10gPSBleHBhbmROb2Rlcy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jb2x1bW5Db3VudCA9IDA7XHJcbiAgICAgIGlmICghaXNDdXN0b21TaGVtYSkge1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRpb25Db2x1bW5Db3VudCh2YWx1ZS5zY2hlbWFWYWx1ZS5jb2x1bW5PcHRpb24uY29sTGlzdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGN1c3RvbVNjaGVtYSAmJiBjdXN0b21TY2hlbWEuY29sdW1uT3B0aW9uICYmIGN1c3RvbVNjaGVtYS5jb2x1bW5PcHRpb24uY29sTGlzdCkge1xyXG4gICAgICAgICAgdGhpcy5jYWxjdWxhdGlvbkNvbHVtbkNvdW50KGN1c3RvbVNjaGVtYS5jb2x1bW5PcHRpb24uY29sTGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubGNwU2VydmljZS5sb2FkaW5nID0gbG9hZGluZztcclxuICAgICAgaWYgKHRoaXMuZ2V0U2VjdXJpdHlMZXZlbCgpKSB7XHJcbiAgICAgICAgcGFyYW1zLmV4Y2VsRXhwb3J0TmFtZSArPSAnXycgKyB0aGlzLmdldFNlY3VyaXR5TGV2ZWwoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoKHRoaXMuY29sdW1uQ291bnQgKiByZW5kZXJPcHRpb24udG90YWxDb3VudCkgPCAxMDAwMDApIHtcclxuICAgICAgICB0aGlzLmxjcFNlcnZpY2UuZXhwb3J0RGF0YShwYXJhbXMsIHJlbmRlck9wdGlvbi5xdWVyeVJlbGF0aXZlVXJsKTtcclxuICAgICAgICBsb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5sY3BTZXJ2aWNlLmF5c25FeHBvcnREYXRhKHBhcmFtcywgcmVuZGVyT3B0aW9uLnF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gICAgICAgIGxvYWRpbmcuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLm1zZ1NlcnZpY2Uud2FybmluZyh0aGlzLmxvY2FsaXplU2VydmljZS5nZXRWYWx1ZSgnc3ByZWFkLm1lc3NhZ2UuYXlzbkV4cG9ydCcpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNhbGN1bGF0aW9uQ29sdW1uQ291bnQoY29sTGlzdDogYW55KSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb2xMaXN0LmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChpdGVtLmNoaWxkTGlzdCAmJiBpdGVtLmNoaWxkTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMuY2FsY3VsYXRpb25Db2x1bW5Db3VudChpdGVtLmNoaWxkTGlzdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY29sdW1uQ291bnQgKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZSkgeyB0aGlzLmNvbHVtbkNvdW50ID0gMDsgfVxyXG4gIH1cclxuXHJcbiAgY2xlYXJDYWNoZShxdWVyeUlkOiBhbnksIHNjaGVtYUlkOiBhbnksIGNvbnRyb2xUeXBlOiBhbnksIHFvTWFuYWdlckNvZGU/OiBhbnksIHF1ZXJ5UmVsYXRpdmVVcmw/OiBhbnksIGZpbHRlckNvbmRpdGlvbj86IGFueSwgZ3JvdXBUeXBlPzogYW55LCB2b0lkPzogYW55KSB7XHJcbiAgICB0aGlzLnJlbmRlck9iamVjdC51dGlscy5nZXQoJ3NjaGVtYScpLmdldFNjaGVtYUluZm8oeyBzY2hlbWFJZCwgcXVlcnlJZCwgcXVlcnlSZWxhdGl2ZVVybCwgZ3JvdXBUeXBlIH0pLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgIHNjaGVtYUlkID0gc2NoZW1hSWQgPyBzY2hlbWFJZCA6ICh2YWx1ZSAmJiB2YWx1ZS5pZCA/IHZhbHVlLmlkIDogJzEnKTtcclxuICAgICAgY29uc3Qgc2NoZW1hTmFtZSA9IHZhbHVlICYmIHZhbHVlLnNjaGVtYVZhbHVlICYmIHZhbHVlLnNjaGVtYVZhbHVlLnRpdGxlT3B0aW9uICYmIHZhbHVlLnNjaGVtYVZhbHVlLnRpdGxlT3B0aW9uLnRpdGxlXHJcbiAgICAgICAgPyB2YWx1ZS5zY2hlbWFWYWx1ZS50aXRsZU9wdGlvbi50aXRsZVxyXG4gICAgICAgIDogdmFsdWUgJiYgdmFsdWUuc2NoZW1hTmFtZVxyXG4gICAgICAgICAgPyB2YWx1ZS5zY2hlbWFOYW1lXHJcbiAgICAgICAgICA6ICcnO1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnJlbmRlck9iamVjdC51dGlscy5nZXQoJ3BhcmFtZXRlcicpLmNyZWF0ZVBhcmFtZXRlcnMoe1xyXG4gICAgICAgIHF1ZXJ5SWQsXHJcbiAgICAgICAgY29udHJvbFR5cGUsXHJcbiAgICAgICAgc2NoZW1hSWQsXHJcbiAgICAgICAgcW9NYW5hZ2VyQ29kZSxcclxuICAgICAgICBwYWdlSW5kZXg6IDAsXHJcbiAgICAgICAgcGFnZVNpemU6IDAsXHJcbiAgICAgICAgZXhjZWxFeHBvcnROYW1lOiBzY2hlbWFOYW1lLFxyXG4gICAgICAgIGZpbHRlckNvbmRpdGlvbixcclxuICAgICAgICB2b0lkXHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoU2VydmljZXNVdGlscy5nZXRTZXJ2aWNlcyhSdGZTZXJ2aWNlcy5nZXRUYWJJZChxdWVyeUlkKSArICdjdXN0b21TY2hlbWUnKSkge1xyXG4gICAgICAgIHBhcmFtcy5jdXN0b21TY2hlbWEgPSBTZXJ2aWNlc1V0aWxzLmdldFNlcnZpY2VzKFJ0ZlNlcnZpY2VzLmdldFRhYklkKHF1ZXJ5SWQpICsgJ2N1c3RvbVNjaGVtZScpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubGNwU2VydmljZS5jbGVhckNhY2hlKHBhcmFtcykuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2VbJ3N1Y2Nlc3MnXSh7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmxvY2FsaXplU2VydmljZS5nZXRWYWx1ZSgnaWRlQ21wLnNjaGVtYU1hbmFnZXIubWVzc2FnZS5pbmZvLnRpdGxlJyksIG1zZzogdGhpcy5sb2NhbGl6ZVNlcnZpY2UuZ2V0VmFsdWUoJ3NwcmVhZC5tZXNzYWdlLmNsZWFyQ2FjaGUnKSwgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwZGZFeHBvcnRFdmVudChyZW5kZXJPcHRpb246IFJlbmRlck9wdGlvbikge1xyXG4gIC8vIHBkZkV4cG9ydEV2ZW50KHF1ZXJ5SWQ6IGFueSwgc2NoZW1hSWQ6IGFueSwgY29udHJvbFR5cGU6IGFueSwgcW9NYW5hZ2VyQ29kZT86IGFueSwgcHJpbnRJbnRlZ3JhdGlvbj86IGFueSwgcXVlcnlSZWxhdGl2ZVVybD86IGFueSwgZmlsdGVyQ29uZGl0aW9uPzogYW55LCBncm91cFR5cGU/OiBhbnksIHBhZ2VJbmRleD86IGFueSwgdm9JZD86IGFueSkge1xyXG4gICAgY29uc3QgbG9hZGluZyA9IHRoaXMubG9hZFNlcnZpY2Uuc2hvdyh7IGNvbnRhaW5lcjogJ2JvZHknIH0pO1xyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5yZW5kZXJPYmplY3QudXRpbHMuZ2V0KCdzY2hlbWEnKS5nZXRTY2hlbWFJbmZvKHsgc2NoZW1hSWQ6IHJlbmRlck9wdGlvbi5zY2hlbWFWYWx1ZSwgcXVlcnlJZDogcmVuZGVyT3B0aW9uLnF1ZXJ5SWQsIHF1ZXJ5UmVsYXRpdmVVcmw6IHJlbmRlck9wdGlvbi5xdWVyeVJlbGF0aXZlVXJsLCBncm91cFR5cGU6IHJlbmRlck9wdGlvbi5ncm91cFR5cGUgfSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgICByZW5kZXJPcHRpb24uc2NoZW1hSWQgPSByZW5kZXJPcHRpb24uc2NoZW1hSWQgPyByZW5kZXJPcHRpb24uc2NoZW1hSWQgOiAodmFsdWUgJiYgdmFsdWUuaWQgPyB2YWx1ZS5pZCA6ICcxJyk7XHJcbiAgICAgICAgbGV0IHNjaGVtYU5hbWUgPSB2YWx1ZSAmJiB2YWx1ZS5zY2hlbWFWYWx1ZSAmJiB2YWx1ZS5zY2hlbWFWYWx1ZS50aXRsZU9wdGlvbiAmJiB2YWx1ZS5zY2hlbWFWYWx1ZS50aXRsZU9wdGlvbi50aXRsZVxyXG4gICAgICAgICAgPyB2YWx1ZS5zY2hlbWFWYWx1ZS50aXRsZU9wdGlvbi50aXRsZVxyXG4gICAgICAgICAgOiB2YWx1ZSAmJiB2YWx1ZS5zY2hlbWFOYW1lXHJcbiAgICAgICAgICAgID8gdmFsdWUuc2NoZW1hTmFtZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG4gICAgICAgIGlmIChSdGZTZXJ2aWNlcy5nZXRGdW5jTmFtZSgpKSB7XHJcbiAgICAgICAgICBzY2hlbWFOYW1lID0gUnRmU2VydmljZXMuZ2V0RnVuY05hbWUoKSArICctJyArIHNjaGVtYU5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlck9wdGlvbi5leGNlbEV4cG9ydE5hbWUgPSBzY2hlbWFOYW1lO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMucmVuZGVyT2JqZWN0LnV0aWxzLmdldCgncGFyYW1ldGVyJykuY3JlYXRlUGFyYW1ldGVycyhyZW5kZXJPcHRpb24pO1xyXG4gICAgICAgIGlmIChwYXJhbXNbJ3NjaGVtYUlkJ10gPT09ICcxJykge1xyXG4gICAgICAgICAgaWYgKFNlcnZpY2VzVXRpbHMuZ2V0U2VydmljZXMoUnRmU2VydmljZXMuZ2V0VGFiSWQocmVuZGVyT3B0aW9uLnF1ZXJ5SWQpICsgJ2N1c3RvbVNjaGVtZScpKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5jdXN0b21TY2hlbWEgPSBTZXJ2aWNlc1V0aWxzLmdldFNlcnZpY2VzKFJ0ZlNlcnZpY2VzLmdldFRhYklkKHJlbmRlck9wdGlvbi5xdWVyeUlkKSArICdjdXN0b21TY2hlbWUnKTtcclxuICAgICAgICAgICAgY29uc3QgY3VzdG9tU2NoZW1hID0gSlNPTi5wYXJzZShwYXJhbXMuY3VzdG9tU2NoZW1hKTtcclxuICAgICAgICAgICAgaWYgKCFwYXJhbXMuZXhjZWxFeHBvcnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgcGFyYW1zLmV4Y2VsRXhwb3J0TmFtZSA9IGN1c3RvbVNjaGVtYSAmJiBjdXN0b21TY2hlbWEudGl0bGVPcHRpb24gJiYgY3VzdG9tU2NoZW1hLnRpdGxlT3B0aW9uLnRpdGxlXHJcbiAgICAgICAgICAgICAgICA/IGN1c3RvbVNjaGVtYS50aXRsZU9wdGlvbi50aXRsZSA6ICdleHBvcnQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubXNnU2VydmljZS53YXJuaW5nKHRoaXMubG9jYWxpemVTZXJ2aWNlLmdldFZhbHVlKCdzcHJlYWQubWVzc2FnZS5wcmludCcpKTtcclxuICAgICAgICAgICAgbG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wZXJhdGlvbnNbJ1FkcFF1ZXJ5UHJpbnQnXSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHRoaXMubXNnU2VydmljZS53YXJuaW5nKHRoaXMubG9jYWxpemVTZXJ2aWNlLmdldFZhbHVlKCdzcHJlYWQubWVzc2FnZS52YWxpZGF0ZS5xZHBRdWVyeVByaW50JykpO1xyXG4gICAgICAgICAgbG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nZXRTZWN1cml0eUxldmVsKCkpIHtcclxuICAgICAgICAgIHBhcmFtcy5leGNlbEV4cG9ydE5hbWUgKz0gJ18nICsgdGhpcy5nZXRTZWN1cml0eUxldmVsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGNwU2VydmljZS5wZGZFeHBvcnRFdmVudChwYXJhbXMsIHJlbmRlck9wdGlvbi5xdWVyeVJlbGF0aXZlVXJsKTtcclxuICAgICAgICBsb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBsb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpbnRQcmVWaWV3KHJlbmRlck9wdGlvbjogUmVuZGVyT3B0aW9uKSB7XHJcbiAgLy8gcHJpbnRQcmVWaWV3KHF1ZXJ5SWQ6IGFueSwgc2NoZW1hSWQ6IGFueSwgY29udHJvbFR5cGU6IGFueSwgcW9NYW5hZ2VyQ29kZT86IGFueSwgcHJpbnRJbnRlZ3JhdGlvbj86IGFueSwgcXVlcnlSZWxhdGl2ZVVybD86IGFueSwgZmlsdGVyQ29uZGl0aW9uPzogYW55LCBncm91cFR5cGU/OiBhbnksIHBhZ2VJbmRleD86IGFueSwgdm9JZD86IGFueSkge1xyXG4gICAgdGhpcy5yZW5kZXJPYmplY3QudXRpbHMuZ2V0KCdzY2hlbWEnKS5nZXRTY2hlbWFJbmZvKHsgc2NoZW1hSWQ6IHJlbmRlck9wdGlvbi5zY2hlbWFWYWx1ZSwgcXVlcnlJZDogcmVuZGVyT3B0aW9uLnF1ZXJ5SWQsIHF1ZXJ5UmVsYXRpdmVVcmw6IHJlbmRlck9wdGlvbi5xdWVyeVJlbGF0aXZlVXJsLCBncm91cFR5cGU6IHJlbmRlck9wdGlvbi5ncm91cFR5cGUgfSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgcmVuZGVyT3B0aW9uLnNjaGVtYUlkID0gcmVuZGVyT3B0aW9uLnNjaGVtYUlkID8gcmVuZGVyT3B0aW9uLnNjaGVtYUlkIDogKHZhbHVlICYmIHZhbHVlLmlkID8gdmFsdWUuaWQgOiAnMScpO1xyXG4gICAgICBjb25zdCBzY2hlbWFOYW1lID0gdmFsdWUgJiYgdmFsdWUuc2NoZW1hVmFsdWUgJiYgdmFsdWUuc2NoZW1hVmFsdWUudGl0bGVPcHRpb24gJiYgdmFsdWUuc2NoZW1hVmFsdWUudGl0bGVPcHRpb24udGl0bGVcclxuICAgICAgICA/IHZhbHVlLnNjaGVtYVZhbHVlLnRpdGxlT3B0aW9uLnRpdGxlXHJcbiAgICAgICAgOiB2YWx1ZSAmJiB2YWx1ZS5zY2hlbWFOYW1lXHJcbiAgICAgICAgICA/IHZhbHVlLnNjaGVtYU5hbWVcclxuICAgICAgICAgIDogJyc7XHJcbiAgICAgIHJlbmRlck9wdGlvbi5leGNlbEV4cG9ydE5hbWUgPSBzY2hlbWFOYW1lO1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnJlbmRlck9iamVjdC51dGlscy5nZXQoJ3BhcmFtZXRlcicpLmNyZWF0ZVBhcmFtZXRlcnMocmVuZGVyT3B0aW9uKTtcclxuICAgICAgaWYgKHBhcmFtc1snc2NoZW1hSWQnXSA9PT0gJzEnKSB7XHJcbiAgICAgICAgaWYgKFNlcnZpY2VzVXRpbHMuZ2V0U2VydmljZXMoUnRmU2VydmljZXMuZ2V0VGFiSWQocmVuZGVyT3B0aW9uLnF1ZXJ5SWQpICsgJ2N1c3RvbVNjaGVtZScpKSB7XHJcbiAgICAgICAgICBwYXJhbXMuY3VzdG9tU2NoZW1hID0gU2VydmljZXNVdGlscy5nZXRTZXJ2aWNlcyhSdGZTZXJ2aWNlcy5nZXRUYWJJZChyZW5kZXJPcHRpb24ucXVlcnlJZCkgKyAnY3VzdG9tU2NoZW1lJyk7XHJcbiAgICAgICAgICBjb25zdCBjdXN0b21TY2hlbWEgPSBKU09OLnBhcnNlKHBhcmFtcy5jdXN0b21TY2hlbWEpO1xyXG4gICAgICAgICAgaWYgKCFwYXJhbXMuZXhjZWxFeHBvcnROYW1lKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5leGNlbEV4cG9ydE5hbWUgPSBjdXN0b21TY2hlbWEgJiYgY3VzdG9tU2NoZW1hLnRpdGxlT3B0aW9uICYmIGN1c3RvbVNjaGVtYS50aXRsZU9wdGlvbi50aXRsZVxyXG4gICAgICAgICAgICAgID8gY3VzdG9tU2NoZW1hLnRpdGxlT3B0aW9uLnRpdGxlIDogJ2V4cG9ydCdcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLndhcm5pbmcodGhpcy5sb2NhbGl6ZVNlcnZpY2UuZ2V0VmFsdWUoJ3NwcmVhZC5tZXNzYWdlLnByZXZpZXcnKSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLmdldFNlY3VyaXR5TGV2ZWwoKSkge1xyXG4gICAgICAgIHBhcmFtcy5leGNlbEV4cG9ydE5hbWUgKz0gJ18nICsgdGhpcy5nZXRTZWN1cml0eUxldmVsKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5sY3BTZXJ2aWNlLmNsb3VkcHJpbnRTZXJ2aWNlID0gdGhpcy5jbG91ZHByaW50U2VydmljZTtcclxuICAgICAgdGhpcy5sY3BTZXJ2aWNlLnByaW50UHJlVmlldyhwYXJhbXMsIHJlbmRlck9wdGlvbi5xdWVyeVJlbGF0aXZlVXJsKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJGaXJzdExvYWRDYWNoZShxdWVyeUlkPzogYW55KSB7XHJcbiAgICBjb25zdCBmdW5jSWQgPSBSdGZTZXJ2aWNlcy5nZXRUYWJJZChxdWVyeUlkKTtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5mdW5jSW5mb0NhY2hlLmZpcnN0TG9hZENhY2hlLmZpbmRJbmRleChlbCA9PiBlbCA9PT0gZnVuY0lkKTtcclxuICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgIHRoaXMuZnVuY0luZm9DYWNoZS5maXJzdExvYWRDYWNoZS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=