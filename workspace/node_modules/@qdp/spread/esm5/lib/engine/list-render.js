/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventBus, RtfServices } from "@qdp/common";
import { BaseRender } from "./base-render";
var ListTreeRender = /** @class */ (function (_super) {
    tslib_1.__extends(ListTreeRender, _super);
    function ListTreeRender(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        var _this = _super.call(this, _queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) || this;
        _this.listRenderInit(_queryId, _controlType);
        return _this;
    }
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @return {?}
     */
    ListTreeRender.prototype.listRenderInit = /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @return {?}
     */
    function (_queryId, _controlType) {
        this.type = _controlType;
        this.queryId = _queryId;
    };
    /**
     * 渲染
     * @param obj 参数配置项
     */
    /**
     * 渲染
     * @param {?} obj 参数配置项
     * @return {?}
     */
    ListTreeRender.prototype.render = /**
     * 渲染
     * @param {?} obj 参数配置项
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var self = this;
        this.queryId = obj.queryId;
        this.type = obj.controlType;
        obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
        this.utils.get('schema').getSchemaInfo(obj).subscribe((/**
         * @param {?} schemaValue
         * @return {?}
         */
        function (schemaValue) {
            if (schemaValue) {
                obj['schemaId'] = schemaValue.id;
                obj['schemaValue'] = schemaValue;
                // this.currentSchemaValueChanger.next(schemaValue);
                EventBus.dispatch('schemaValueChanged', schemaValue);
                /** @type {?} */
                var delay = schemaValue.schemaValue.otherOption.delay;
                /** @type {?} */
                var interval_1 = schemaValue.schemaValue.otherOption.interval;
                /** @type {?} */
                var funcId_1 = RtfServices.getTabId(obj.queryId);
                /** @type {?} */
                var index = self.funcInfoCache.firstLoadCache.findIndex((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return el === funcId_1; }));
                /** @type {?} */
                var firstLoad = schemaValue.schemaValue.otherOption.firstLoad;
                if (index < 0 && _this.isSchemaSelectChanged === false) {
                    if (firstLoad === false) {
                        self.funcInfoCache.firstLoadCache.push(funcId_1);
                        obj.loading.close();
                        if (obj.spread.getActiveSheet()) {
                            obj.spread.getActiveSheet().deleteRows(0, obj.spread.getActiveSheet().getRowCount());
                            obj.spread.getActiveSheet().options.colHeaderVisible = false;
                            obj.spread.invalidateLayout();
                            obj.spread.repaint();
                            self.serviceCache.lcpService.pageInfoChange.next({
                                pageCount: 1,
                                pageIndex: 1,
                                pageSize: schemaValue.schemaValue.otherOption.pageSize || 20,
                                totalCount: 1
                            });
                        }
                        return;
                    }
                }
                if (!delay) {
                    delay = 0;
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.getRenderDataForList.call(_this, Object.assign({}, obj));
                    if (interval_1 > 0) {
                        setInterval((/**
                         * @return {?}
                         */
                        function () {
                            _this.getRenderDataForList.call(_this, Object.assign({}, obj));
                        }), interval_1 * 1000);
                    }
                }), delay * 1000);
            }
            else {
                obj['schemaId'] = '1';
                _this.getRenderDataForList.call(_this, Object.assign({}, obj));
            }
        }));
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ListTreeRender.prototype.getRenderDataForList = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var self = this;
        obj.schemaId = obj.schemaId ? obj.schemaId : (obj.schemaValue && obj.schemaValue.id ? obj.schemaValue.id : '1');
        if (!obj.formData) {
            /** @type {?} */
            var params_1 = this.utils.get('parameter').createParameters(Object.assign({}, obj, { pageIndex: 0, pageSize: 0 }));
            params_1['queryId'] = obj.queryId ? obj.queryId : '';
            self.operatePagination(obj, params_1);
            // 查询数据前事件
            params_1 = this.utils.get('renderExtends').runRenderExtends('beforeQueryData', this.localizeService.getValue('spread.message.extend.query.before'), params_1, obj.spread);
            try {
                /** @type {?} */
                var tab = RtfServices.getTabId(obj.queryId);
                this.cache.set(tab, JSON.parse(params_1['entityData']));
                this.cache.set(tab + 'extendCond', params_1['extendCond']);
            }
            catch (e) { }
            self.getData(params_1, obj.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                data = data || { data: [], dynamicCols: [] };
                if (obj.schemaId !== '1' || (data && data.dynamicCols && data.dynamicCols.length)) {
                    self.schemaManager.dynamicCols[obj.groupType ? obj.groupType : obj.queryId] = data.dynamicCols || [];
                    self.schemaManager.dynamicCols[obj.schemaId] = data.dynamicCols || [];
                    self.schemaManager.operateDynamicColsForSchema(obj.schemaValue, obj.groupType ? obj.groupType : obj.queryId, obj.schemaId);
                    self.schemaManager.schemaInfoChange.next({ schemaList: self.schemaManager.schemaInfo, isDefaultSchema: self.schemaManager.isDefaultSchema && self.schemaManager.isDefaultSchema[obj.queryId] ? self.schemaManager.isDefaultSchema[obj.queryId] : null, preSchema: self.schemaManager.preSchema });
                }
                if (!obj.schemaValue || obj.schemaId == '1') {
                    self.operateCustomFormatSchema(data, obj);
                }
                // 数据加载前事件
                _this.utils.get('renderExtends').runRenderExtends('beforeLoadData', self.localizeService.getValue('spread.message.extend.dataLoading.before'), data, obj.spread);
                self.lcpService.getCol(params_1, obj.queryRelativeUrl).subscribe((/**
                 * @param {?} resultData
                 * @return {?}
                 */
                function (resultData) {
                    if (obj.schemaId === '1') {
                        if (!data.dynamicCols.length) {
                            data.dynamicCols = resultData.dynamicCols || [];
                        }
                    }
                    obj.frozenCols = (resultData && resultData.dynamicCols) || [];
                    obj['data'] = data;
                    self.getListRenderTemplate(obj);
                    // { schemaId: _schemaId, queryId, data, queryRelativeUrl, spread, schemaValue, pageIndex, controlType, loading }
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                self.formErrorService.exception(error.Message, error);
                obj.loading.close();
            }));
            this.cache.set('schema_schemaid' + obj.queryId, obj.schemaId);
            // EventBus.dispatch('schema_schemaid', _schemaId);
        }
        else {
            obj['data'] = obj.formData;
            obj['frozenCols'] = obj.formData.dynamicCols;
            self.getListRenderTemplate(obj);
            // { schemaId: _schemaId, queryId, formData, queryRelativeUrl, spread, schemaValue, pageIndex, controlType, loading }
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ListTreeRender.prototype.getListRenderTemplate = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var self = this;
        self.schemaManager.getSpreadTemplate(obj.schemaId, obj.queryId, obj.data && obj.data.dynamicCols ? obj.data.dynamicCols : [], obj.queryRelativeUrl, obj.customFormatScheme, obj.frozenCols, obj.groupType).subscribe((/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            template = template.returnValue ? JSON.parse(template.returnValue) : template;
            self.renderList.call(self, Object.assign({}, obj, { template: template }));
            self.utils.get('spreadStyle').bindSelectChanged(obj.spread, obj.queryId);
            /** @type {?} */
            var event = RtfServices.getMenuSwitchControlEvent();
            if (event && typeof event === 'object') {
                event.next('ok');
            }
            EventBus.dispatch(self.queryId + 'spread_init', {});
            obj.loading.close();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            self.formErrorService.exception(error.Message, error);
            obj.loading.close();
        }));
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ListTreeRender.prototype.renderList = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var self = this;
        this.type = obj.controlType;
        obj.spread.suspendEvent();
        obj.spread.suspendPaint();
        obj.spread.fromJSON(obj.template);
        /** @type {?} */
        var sheet = obj.spread.getActiveSheet();
        // 储粮需求，多sheet页
        if (obj.curSheet && obj.multiSheets.length) {
            sheet.name(obj.curSheet);
            for (var i = 0; i < obj.multiSheets.length; i++) {
                if (obj.curSheet !== obj.multiSheets[i]) {
                    obj.spread.addSheet(i, new GC.Spread.Sheets.Worksheet(obj.multiSheets[i]));
                    obj.spread.sheets[i].deleteRows(0, obj.spread.sheets[i].getRowCount());
                    obj.spread.sheets[i].deleteColumns(0, obj.spread.sheets[i].getColumnCount());
                }
            }
            obj.spread.setActiveSheet(obj.curSheet);
            obj.spread.options.tabStripVisible = true;
            obj.spread.options.tabEditable = false;
        }
        // 储粮需求，多sheet页
        this.utils.get('spreadStyle').cacheStyle(sheet);
        /** @type {?} */
        var showZero = true;
        if (obj.schemaValue && obj.schemaValue.schemaValue && obj.schemaValue.schemaValue.otherOption) {
            if (obj.schemaValue.schemaValue.otherOption.showZero != null && obj.schemaValue.schemaValue.otherOption.showZero !== undefined) {
                showZero = obj.schemaValue.schemaValue.otherOption.showZero;
            }
        }
        if (obj.data && obj.data.data && obj.data.data.length) {
            obj.data.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.dynamicPropSet) {
                    for (var key in item.dynamicPropSet) {
                        item[key] = item.dynamicPropSet[key];
                    }
                }
            }));
            // 修改枚举字段显示
            self.changeData(obj.data, obj.schemaValue);
            sheet.setDataSource(obj.data.data);
            sheet.bindColumns(this.utils.get('spreadStyle').dataColInfoArray);
            sheet.options.isProtected = true;
            sheet.options.protectionOptions = {
                allowSelectLockedCells: true,
                allowSelectUnlockedCells: true,
                allowFilter: true,
                allowSort: true,
                allowResizeRows: true,
                allowResizeColumns: true,
                allowEditObjects: false
            };
            obj.spread.options.allowCopyPasteExcelStyle = true;
            obj.spread.options.allowExtendPasteRange = true;
            obj.spread.options.copyPasteHeaderOptions = GC.Spread.Sheets.CopyPasteHeaderOptions.allHeaders;
            sheet.rowOutlines.direction(GC.Spread.Sheets.Outlines.OutlineDirection.backward);
            try {
                if (!obj.schemaValue && obj.customFormatScheme) {
                    if (typeof obj.customFormatScheme == 'string') {
                        obj.schemaValue = {};
                        obj.schemaValue['schemaValue'] = JSON.parse(obj.customFormatScheme);
                    }
                }
            }
            catch (e) { }
            this.utils.get('spreadStyle').applyStyle(sheet, obj.schemaValue, showZero);
            this.utils.get('spreadStyle').linkField(obj.spread, sheet);
            try {
                /** @type {?} */
                var extObj = gspframeworkService.rtf.extendMethod.getExtObj();
                if (extObj) {
                    this.utils.get('spreadStyle').inSuiteLinkField(obj.spread, sheet, extObj);
                }
            }
            catch (e) {
            }
            this.footerVariablesReplace(sheet, obj.data);
        }
        else {
            this.footerVariablesReplace(sheet, obj.data);
            sheet.deleteRows(0, 1);
        }
        this.titleVariablesReplace(sheet, obj.data);
        this.utils.get('spreadStyle').setAutoFitColumn(obj.schemaValue, sheet);
        if (this.utils.get('spreadStyle').getShowHeaderSort(obj.schemaValue)) {
            this.utils.get('spreadStyle').setSortCellType(sheet, obj.schemaValue, obj.qdpView);
        }
        if (obj.controlType == 'list') {
            this.utils.get('spreadStyle').mergeCell(sheet, obj.schemaValue);
        }
        sheet.clearSelection();
        // 页面渲染后事件
        this.utils.get('renderExtends').runRenderExtends('afterLoadData', this.localizeService.getValue('spread.message.extend.dataLoading.after'), obj.data, obj.spread);
        obj.spread.resumePaint();
        obj.spread.resumeEvent();
        // 增加当前单元格联查参数缓存
        this.utils.get('spreadStyle').joinParam['controlType'] = this.type;
        this.cache.set(RtfServices.getTabId(obj.queryId) + 'joinSearch', this.utils.get('spreadStyle').joinParam);
    };
    return ListTreeRender;
}(BaseRender));
export { ListTreeRender };
//# sourceMappingURL=data:application/json;base64,