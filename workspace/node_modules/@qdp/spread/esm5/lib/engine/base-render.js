/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ParameterUtils } from "../util/parameter.utils";
import { RenderExtendsUtils } from "../util/render.extends.utils";
import { SchemaUtils } from "../util/schema.utils";
import { ServicesUtils } from "../util/services.utils";
import { SpreadStyleUtils } from "../util/spread.style.utils";
import { RtfServices } from '@qdp/common';
var BaseRender = /** @class */ (function () {
    function BaseRender(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        this.utils = new Map();
        this.autoFitColumnIndex = 0;
        this.isSchemaSelectChanged = false;
        this.tabId = RtfServices.getTabId(_queryId);
        this.queryId = _queryId;
        this.type = _controlType;
        this.funcInfoCache = _funcInfoCache;
        this.serviceCache = _serviceCache;
        this.baseRenderInit(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache);
    }
    /**
     * @private
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @return {?}
     */
    BaseRender.prototype.baseRenderInit = /**
     * @private
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @return {?}
     */
    function (_queryId, _controlType, _jointsearchInfoList, _funcInfoCache) {
        /** @type {?} */
        var parameterUtils = new ParameterUtils(_queryId, _funcInfoCache, this.serviceCache);
        /** @type {?} */
        var schemaUtils = new SchemaUtils(this.serviceCache);
        /** @type {?} */
        var spreadStyleUtils = new SpreadStyleUtils(_queryId, _controlType, _jointsearchInfoList, this.serviceCache);
        /** @type {?} */
        var renderExtendsUtils = new RenderExtendsUtils(_queryId);
        this.msgService = this.serviceCache.msgService;
        this.cache = this.serviceCache.cacheService;
        this.lcpService = this.serviceCache.lcpService;
        this.loadService = this.serviceCache.loadService;
        this.localizeService = this.serviceCache.localizeService;
        this.schemaManager = this.serviceCache.schemaManagerService;
        this.formErrorService = this.serviceCache.formErrorService;
        this.queryId = _queryId;
        this.utils.set('parameter', parameterUtils);
        this.utils.set('schema', schemaUtils);
        this.utils.set('spreadStyle', spreadStyleUtils);
        this.utils.set('renderExtends', renderExtendsUtils);
        this.utils.set('queryId', _queryId);
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    BaseRender.prototype.getData = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        this.cache.set(this.queryId + 'param', params);
        return this.lcpService.getData(params, queryRelativeUrl);
    };
    /**
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    BaseRender.prototype.changeData = /**
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    function (data, value) {
        if (data && data.data && data.dynamicCols && value) {
            if (value.schemaValue.columnOption && value.schemaValue.columnOption.colList && value.schemaValue.columnOption.colList.length) {
                /** @type {?} */
                var columns_1 = value.schemaValue.columnOption.colList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.type === 'enum'; }));
                if (columns_1 && columns_1.length > 0) {
                    data.data.forEach((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) {
                        columns_1.forEach((/**
                         * @param {?} y
                         * @return {?}
                         */
                        function (y) {
                            /** @type {?} */
                            var orginValue = x[y.bindField];
                            /** @type {?} */
                            var showValue = orginValue;
                            if (data.resultEnumItems) {
                                /** @type {?} */
                                var resultEnumItem = data.resultEnumItems.find((/**
                                 * @param {?} resultEnumItem
                                 * @return {?}
                                 */
                                function (resultEnumItem) { return resultEnumItem.enumName === y.bindField; }));
                                if (resultEnumItem) {
                                    /** @type {?} */
                                    var findShowValue = resultEnumItem.resultEnumInfoList.find((/**
                                     * @param {?} resultEnum
                                     * @return {?}
                                     */
                                    function (resultEnum) { return resultEnum.key === orginValue; }));
                                    if (findShowValue) {
                                        showValue = y.showType === '0' ? findShowValue.key : y.showType === '1' ? findShowValue.code : findShowValue.name;
                                    }
                                }
                            }
                            x[y.bindField] = showValue;
                        }));
                    }));
                }
            }
        }
    };
    /**
     * 二开人员自定义格式方案处理
     */
    /**
     * 二开人员自定义格式方案处理
     * @param {?} data
     * @param {?} obj
     * @return {?}
     */
    BaseRender.prototype.operateCustomFormatSchema = /**
     * 二开人员自定义格式方案处理
     * @param {?} data
     * @param {?} obj
     * @return {?}
     */
    function (data, obj) {
        if (data.customFormatScheme) {
            obj.customFormatScheme = data.customFormatScheme;
            this.schemaManager.customSchema[obj.groupType ? obj.groupType : obj.queryId] = data.customFormatScheme;
            /** @type {?} */
            var customSchema = null;
            if (obj.schemaId === '1') {
                customSchema = this.schemaManager.mergeCustomSchema(obj.groupType ? obj.groupType : obj.queryId, obj.queryId);
            }
            if (customSchema && customSchema.schemaValue) {
                ServicesUtils.setServices(RtfServices.getTabId(obj.queryId) + 'customScheme', JSON.stringify(customSchema.schemaValue));
            }
        }
    };
    /**
     * 处理分页信息
     */
    /**
     * 处理分页信息
     * @param {?} obj
     * @param {?} params
     * @return {?}
     */
    BaseRender.prototype.operatePagination = /**
     * 处理分页信息
     * @param {?} obj
     * @param {?} params
     * @return {?}
     */
    function (obj, params) {
        /** @type {?} */
        var self = this;
        if (obj.controlType === 'list') {
            /** @type {?} */
            var pageSize = 0;
            if (obj.schemaId !== '1' && self.schemaManager.schemaList && self.schemaManager.schemaList[obj.schemaId]) {
                if (typeof self.schemaManager.schemaList[obj.schemaId].schemaValue === "string") {
                    self.schemaManager.schemaList[obj.schemaId].schemaValue = JSON.parse(self.schemaManager.schemaList[obj.schemaId].schemaValue);
                }
                if (self.schemaManager.schemaList[obj.schemaId].schemaValue.otherOption.loadDataType !== 0) {
                    pageSize = self.schemaManager.schemaList[obj.schemaId].schemaValue.otherOption.pageSize;
                }
            }
            else {
                if (obj.schemaId === '1' && self.schemaManager.preSchema && self.schemaManager.preSchema.schemaValue.otherOption.loadDataType !== 0) {
                    pageSize = self.schemaManager.preSchema.schemaValue.otherOption.pageSize;
                }
            }
            if (pageSize !== 0) {
                params['pageSize'] = pageSize;
                params['pageIndex'] = !obj.pageIndex ? 1 : obj.pageIndex;
            }
        }
    };
    /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    BaseRender.prototype.titleVariablesReplace = /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    function (sheet, data) {
        /** @type {?} */
        var colCount = sheet.getColumnCount(GC.Spread.Sheets.SheetArea.colHeader);
        /** @type {?} */
        var rowCount = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
        if (data && data.variables) {
            for (var r = 0; r < rowCount; r++) {
                for (var c = 0; c < colCount; c++) {
                    sheet.setValue(r, c, this.variablesReplace(sheet.getValue(r, c, GC.Spread.Sheets.SheetArea.colHeader), data), GC.Spread.Sheets.SheetArea.colHeader);
                }
            }
        }
    };
    /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    BaseRender.prototype.footerVariablesReplace = /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    function (sheet, data) {
        /** @type {?} */
        var rowCount = sheet.getRowCount();
        /** @type {?} */
        var colCount = sheet.getColumnCount();
        if (this.utils.get('spreadStyle').footerDataArray && this.utils.get('spreadStyle').footerDataArray.length) {
            for (var r = 0; r < this.utils.get('spreadStyle').footerDataArray.length; r++) {
                for (var c = 0; c < colCount; c++) {
                    sheet.setValue(r + (rowCount - this.utils.get('spreadStyle').footerDataArray.length), c, this.variablesReplace(this.utils.get('spreadStyle').footerDataArray[r][c], data));
                }
            }
        }
    };
    /**
     * @private
     * @param {?} cellValue
     * @param {?} data
     * @return {?}
     */
    BaseRender.prototype.variablesReplace = /**
     * @private
     * @param {?} cellValue
     * @param {?} data
     * @return {?}
     */
    function (cellValue, data) {
        if (data && data.variables) {
            Object.keys(data.variables).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var reg = new RegExp(key, 'g');
                if (cellValue) {
                    cellValue = cellValue.replace(reg, data.variables[key]);
                }
            }));
        }
        return cellValue;
    };
    /**
     * @param {?} spread
     * @param {?} errmsg
     * @return {?}
     */
    BaseRender.prototype.errorHandle = /**
     * @param {?} spread
     * @param {?} errmsg
     * @return {?}
     */
    function (spread, errmsg) {
        if (spread.getActiveSheet()) {
            spread.removeSheet(0);
        }
        spread.options.tabStripVisible = false;
        this.msgService.warning(errmsg);
        return;
    };
    return BaseRender;
}());
export { BaseRender };
if (false) {
    /** @type {?} */
    BaseRender.prototype.queryId;
    /** @type {?} */
    BaseRender.prototype.type;
    /** @type {?} */
    BaseRender.prototype.utils;
    /** @type {?} */
    BaseRender.prototype.autoFitColumnIndex;
    /** @type {?} */
    BaseRender.prototype.cache;
    /** @type {?} */
    BaseRender.prototype.msgService;
    /** @type {?} */
    BaseRender.prototype.lcpService;
    /** @type {?} */
    BaseRender.prototype.localizeService;
    /** @type {?} */
    BaseRender.prototype.schemaManager;
    /** @type {?} */
    BaseRender.prototype.formErrorService;
    /** @type {?} */
    BaseRender.prototype.loadService;
    /** @type {?} */
    BaseRender.prototype.funcInfoCache;
    /** @type {?} */
    BaseRender.prototype.serviceCache;
    /** @type {?} */
    BaseRender.prototype.isSchemaSelectChanged;
    /** @type {?} */
    BaseRender.prototype.tabId;
}
//# sourceMappingURL=data:application/json;base64,