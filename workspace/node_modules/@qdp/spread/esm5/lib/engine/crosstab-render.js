/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventBus } from "@qdp/common";
import { RtfServices } from "@qdp/common";
import { BaseRender } from "./base-render";
var CrosstabRender = /** @class */ (function (_super) {
    tslib_1.__extends(CrosstabRender, _super);
    function CrosstabRender(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        var _this = _super.call(this, _queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) || this;
        _this.crosstabInit();
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    CrosstabRender.prototype.crosstabInit = /**
     * @private
     * @return {?}
     */
    function () {
    };
    /**
     * 渲染
     * @param obj 参数配置项
     */
    /**
     * 渲染
     * @param {?} obj 参数配置项
     * @return {?}
     */
    CrosstabRender.prototype.render = /**
     * 渲染
     * @param {?} obj 参数配置项
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var self = this;
        this.queryId = obj.queryId;
        obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
        this.utils.get('schema').getSchemaInfo(obj).subscribe((/**
         * @param {?} schemaValue
         * @return {?}
         */
        function (schemaValue) {
            if (schemaValue) {
                obj['schemaId'] = schemaValue.id;
                obj['schemaValue'] = schemaValue;
                // this.currentSchemaValueChanger.next(schemaValue);
                EventBus.dispatch('schemaValueChanged', schemaValue);
                /** @type {?} */
                var delay = schemaValue.schemaValue.otherOption.delay;
                /** @type {?} */
                var interval_1 = schemaValue.schemaValue.otherOption.interval;
                /** @type {?} */
                var index = self.funcInfoCache.firstLoadCache.findIndex((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return el === _this.tabId; }));
                /** @type {?} */
                var firstLoad = schemaValue.schemaValue.otherOption.firstLoad;
                if (index < 0 && _this.isSchemaSelectChanged === false) {
                    if (firstLoad === false) {
                        self.funcInfoCache.firstLoadCache.push(_this.tabId);
                        obj.loading.close();
                        if (obj.spread.getActiveSheet()) {
                            obj.spread.getActiveSheet().deleteRows(0, obj.spread.getActiveSheet().getRowCount());
                            obj.spread.getActiveSheet().options.colHeaderVisible = false;
                            obj.spread.invalidateLayout();
                            obj.spread.repaint();
                        }
                        return;
                    }
                }
                if (!delay) {
                    delay = 0;
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.getRenderDataForCrosstab.call(_this, Object.assign({}, obj));
                    if (interval_1 > 0) {
                        setInterval((/**
                         * @return {?}
                         */
                        function () {
                            _this.getRenderDataForCrosstab.call(_this, Object.assign({}, obj));
                        }), interval_1 * 1000);
                    }
                }), delay * 1000);
            }
            else {
                obj['schemaId'] = '1';
                _this.getRenderDataForCrosstab.call(_this, Object.assign({}, obj));
            }
        }));
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CrosstabRender.prototype.getRenderDataForCrosstab = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var self = this;
        obj.schemaId = obj.schemaId ? obj.schemaId : (obj.schemaValue && obj.schemaValue.id ? obj.schemaValue.id : '1');
        if (!obj.formData) {
            /** @type {?} */
            var params_1 = this.utils.get('parameter').createParameters(Object.assign({}, obj, { pageIndex: 0, pageSize: 0 }));
            params_1['queryId'] = obj.queryId ? obj.queryId : '';
            // 查询数据前事件
            params_1 = this.utils.get('renderExtends').runRenderExtends('beforeQueryData', this.localizeService.getValue('spread.message.extend.query.before'), params_1, obj.spread);
            try {
                this.cache.set(self.tabId, JSON.parse(params_1['entityData']));
                this.cache.set(self.tabId + 'extendCond', params_1['extendCond']);
            }
            catch (e) { }
            self.lcpService.getCol(params_1, obj.queryRelativeUrl).subscribe((/**
             * @param {?} resultData
             * @return {?}
             */
            function (resultData) {
                /** @type {?} */
                var dynamicColumns = (resultData && resultData.dynamicCols) || [];
                self.initJoinParams(obj, dynamicColumns);
                self.schemaManager.setColInfo(dynamicColumns);
                if (obj.schemaId === '1' || !obj.schemaId) {
                    obj.loading.close();
                    return self.errorHandle(obj.spread, _this.localizeService.getValue('spread.message.validate.schemaInfo'));
                }
                self.lcpService.getCrosstabTemplate(params_1, obj.queryRelativeUrl).subscribe((/**
                 * @param {?} template
                 * @return {?}
                 */
                function (template) {
                    if (!template || !template.sheets || !template.sheets.sheet1 || !template.sheets.sheet1.data || !template.sheets.sheet1.data.dataTable || !template.sheets.sheet1.data.dataTable['0']) {
                        obj.loading.close();
                        return self.errorHandle(obj.spread, _this.localizeService.getValue('spread.message.validate.nodata'));
                    }
                    self.renderCrossTable(Object.assign({}, obj, { template: template }));
                    /** @type {?} */
                    var event = RtfServices.getMenuSwitchControlEvent();
                    if (event && typeof event === 'object') {
                        event.next('ok');
                    }
                    obj.loading.close();
                    _this.utils.get('spreadStyle').bindSelectChanged(obj.spread, obj.queryId);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    self.formErrorService.exception(error.Message, error);
                    obj.loading.close();
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                self.formErrorService.exception(error.Message, error);
                obj.loading.close();
            }));
            this.cache.set('schema_schemaid' + obj.queryId, obj.schemaId);
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CrosstabRender.prototype.renderCrossTable = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        obj.spread.suspendEvent();
        obj.spread.suspendPaint();
        if (obj.template) {
            obj.spread.fromJSON(obj.template);
            obj.spread.getActiveSheet().rowOutlines.direction(GC.Spread.Sheets.Outlines.OutlineDirection.backward);
            /** @type {?} */
            var row = obj.spread.getActiveSheet().getRowCount();
            for (var i = 0; i < row; i++) {
                /** @type {?} */
                var cellType = obj.spread.getActiveSheet().getCellType(i, 0);
                if (cellType && cellType.typeName === 'TreeCellType') {
                    /** @type {?} */
                    var level = cellType.level;
                    for (var r = 0; r <= level; r++) {
                        obj.spread.getActiveSheet().rowOutlines.group(i, 1);
                    }
                }
            }
        }
        /** @type {?} */
        var sheet = obj.spread.getActiveSheet();
        if (sheet) {
            this.titleVariablesReplace(sheet, obj.data);
            sheet.clearSelection();
        }
        // 页面渲染后事件
        this.utils.get('renderExtends').runRenderExtends('afterLoadData', this.localizeService.getValue('spread.message.extend.dataLoading.after'), obj.data, obj.spread);
        obj.spread.resumePaint();
        obj.spread.resumeEvent();
        // 增加当前单元格联查参数缓存
        this.utils.get('spreadStyle').joinParam['controlType'] = obj.controlType;
        this.cache.set(this.tabId + 'joinSearch', this.utils.get('spreadStyle').joinParam);
    };
    /**
     * @private
     * @param {?} obj
     * @param {?} dynamicColumns
     * @return {?}
     */
    CrosstabRender.prototype.initJoinParams = /**
     * @private
     * @param {?} obj
     * @param {?} dynamicColumns
     * @return {?}
     */
    function (obj, dynamicColumns) {
        var _this = this;
        this.utils.get('spreadStyle').joinParam = {
            controlType: obj.controlType,
            rowHeaderColInfo: { start: 0, end: 0 },
            // 行标题起始位置信息（行号）
            colHeaderRowInfo: { start: 0, end: 0 },
            // 列标题信息起始位置信息（列号)
            valueColCount: 0,
            // 行标题信息起始位置信息（列号)
            colInfos: dynamicColumns,
        };
        /** @type {?} */
        var columnHeaderRowCount = this.utils.get('spreadStyle').rowHeadersColumnCount = this.utils.get('spreadStyle').valueHeaderRowCount = 0;
        /** @type {?} */
        var titleCount = 0;
        if (obj.schemaId !== '1') {
            titleCount += obj.schemaValue.schemaValue.titleOption.title ? 1 : 0;
            titleCount += obj.schemaValue.schemaValue.titleOption.subTitles.length;
            obj.schemaValue.schemaValue.columnOption.colList.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data.dimension && data.dimension !== 0) {
                    if (data.dimension === 1) {
                        _this.utils.get('spreadStyle').rowHeadersColumnCount++;
                    }
                    else if (data.dimension === 2) {
                        columnHeaderRowCount++;
                    }
                    else if (data.dimension === 3) {
                        _this.utils.get('spreadStyle').valueHeaderRowCount++;
                    }
                }
            }));
            this.utils.get('spreadStyle').joinParam['controlType'] = obj.controlType;
            this.utils.get('spreadStyle').joinParam['rowHeaderColInfo'] = { start: 0, end: this.utils.get('spreadStyle').rowHeadersColumnCount }; // 行标题起始位置信息（行号）
            this.utils.get('spreadStyle').joinParam['colHeaderRowInfo'] = { start: titleCount, end: titleCount + columnHeaderRowCount }; // 列标题信息起始位置信息（列号)
            this.utils.get('spreadStyle').joinParam['valueColCount'] = this.utils.get('spreadStyle').valueHeaderRowCount; // 行标题信息起始位置信息（列号)
            this.utils.get('spreadStyle').joinParam['colInfos'] = obj.schemaValue.schemaValue.columnOption.colList; // 列信息
        }
        this.cache.set(this.tabId + 'joinSearch', this.utils.get('spreadStyle').joinParam);
    };
    return CrosstabRender;
}(BaseRender));
export { CrosstabRender };
//# sourceMappingURL=data:application/json;base64,