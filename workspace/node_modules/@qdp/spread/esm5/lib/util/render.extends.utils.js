/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ServicesUtils } from "./services.utils";
var RenderExtendsUtils = /** @class */ (function () {
    function RenderExtendsUtils(_queryId) {
        this.init(_queryId);
    }
    /**
     * @private
     * @param {?} _queryId
     * @return {?}
     */
    RenderExtendsUtils.prototype.init = /**
     * @private
     * @param {?} _queryId
     * @return {?}
     */
    function (_queryId) {
        this.dataRenderExtendService = ServicesUtils.getServices('dataRenderExtendService' + _queryId);
        this.renderExtends = ServicesUtils.getServices('renderExtends' + _queryId);
    };
    /**
   * 执行查询扩展
   */
    /**
     * 执行查询扩展
     * @param {?} extendCode
     * @param {?} extendName
     * @param {?} extendData
     * @param {?} control
     * @return {?}
     */
    RenderExtendsUtils.prototype.runRenderExtends = /**
     * 执行查询扩展
     * @param {?} extendCode
     * @param {?} extendName
     * @param {?} extendData
     * @param {?} control
     * @return {?}
     */
    function (extendCode, extendName, extendData, control) {
        /** @type {?} */
        var $event = this.createRenderExtendParams({
            eventCode: extendCode,
            // 'beforeQueryData',
            eventName: extendName,
            // this.localizeService.getValue('spread.message.extend.query.before'),
            data: extendData,
            // params,
            spread: control,
            // obj.spread
            control: control // obj.spread
        });
        if (extendCode === 'beforeQueryData') {
            if (this.dataRenderExtendService && this.dataRenderExtendService.beforeQueryData) {
                this.dataRenderExtendService.beforeQueryData($event);
            }
            else {
                if (this.renderExtends && this.renderExtends.beforeQueryData) {
                    this.renderExtends.beforeQueryData($event);
                }
            }
        }
        else if (extendCode === 'beforeLoadData') {
            if (this.dataRenderExtendService && this.dataRenderExtendService.beforeLoadData) {
                this.dataRenderExtendService.beforeLoadData($event);
            }
            else {
                if (this.renderExtends && this.renderExtends.beforeQueryData) {
                    this.renderExtends.beforeLoadData($event);
                }
            }
        }
        else if (extendCode === 'afterLoadData') {
            if (this.dataRenderExtendService && this.dataRenderExtendService.afterLoadData) {
                this.dataRenderExtendService.afterLoadData($event);
            }
            else {
                if (this.renderExtends && this.renderExtends.beforeQueryData) {
                    this.renderExtends.afterLoadData($event);
                }
            }
        }
        return $event['data'];
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RenderExtendsUtils.prototype.createRenderExtendParams = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return {
            eventCode: obj.eventCode,
            eventName: obj.eventName,
            data: obj.data,
            control: obj.control,
            spread: obj.spread || undefined
        };
    };
    return RenderExtendsUtils;
}());
export { RenderExtendsUtils };
if (false) {
    /** @type {?} */
    RenderExtendsUtils.prototype.dataRenderExtendService;
    /** @type {?} */
    RenderExtendsUtils.prototype.renderExtends;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmV4dGVuZHMudXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL3NwcmVhZC8iLCJzb3VyY2VzIjpbImxpYi91dGlsL3JlbmRlci5leHRlbmRzLnV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQ7SUFJSSw0QkFBWSxRQUFhO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBRU8saUNBQUk7Ozs7O0lBQVosVUFBYSxRQUFhO1FBQ3RCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLHlCQUF5QixHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQy9GLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVEOztLQUVDOzs7Ozs7Ozs7SUFDRCw2Q0FBZ0I7Ozs7Ozs7O0lBQWhCLFVBQWlCLFVBQWUsRUFBRSxVQUFlLEVBQUUsVUFBZSxFQUFFLE9BQVk7O1lBQ3RFLE1BQU0sR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUM7WUFDekMsU0FBUyxFQUFFLFVBQVU7O1lBQ3JCLFNBQVMsRUFBRSxVQUFVOztZQUNyQixJQUFJLEVBQUUsVUFBVTs7WUFDaEIsTUFBTSxFQUFFLE9BQU87O1lBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhO1NBQ2pDLENBQUM7UUFDRixJQUFJLFVBQVUsS0FBSyxpQkFBaUIsRUFBRTtZQUNsQyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxFQUFFO2dCQUM5RSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNILElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRTtvQkFDMUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzlDO2FBQ0o7U0FDSjthQUFNLElBQUksVUFBVSxLQUFLLGdCQUFnQixFQUFFO1lBQ3hDLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLEVBQUU7Z0JBQzdFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkQ7aUJBQU07Z0JBQ0gsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFO29CQUMxRCxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDN0M7YUFDSjtTQUNKO2FBQU0sSUFBSSxVQUFVLEtBQUssZUFBZSxFQUFFO1lBQ3ZDLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLEVBQUU7Z0JBQzVFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdEQ7aUJBQU07Z0JBQ0gsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFO29CQUMxRCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDNUM7YUFDSjtTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFRCxxREFBd0I7Ozs7SUFBeEIsVUFBeUIsR0FBRztRQUN4QixPQUFPO1lBQ0gsU0FBUyxFQUFFLEdBQUcsQ0FBQyxTQUFTO1lBQ3hCLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUztZQUN4QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7WUFDZCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87WUFDcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLElBQUksU0FBUztTQUNsQyxDQUFDO0lBQ04sQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQTdERCxJQTZEQzs7OztJQTVERyxxREFBaUQ7O0lBQ2pELDJDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFSZW5kZXJFeHRlbmRTZXJ2aWNlIH0gZnJvbSBcIkBxZHAvY29tbW9uXCI7XHJcbmltcG9ydCB7IFNlcnZpY2VzVXRpbHMgfSBmcm9tIFwiLi9zZXJ2aWNlcy51dGlsc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlbmRlckV4dGVuZHNVdGlscyB7XHJcbiAgICBkYXRhUmVuZGVyRXh0ZW5kU2VydmljZTogRGF0YVJlbmRlckV4dGVuZFNlcnZpY2U7XHJcbiAgICByZW5kZXJFeHRlbmRzOiBEYXRhUmVuZGVyRXh0ZW5kU2VydmljZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihfcXVlcnlJZDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5pbml0KF9xdWVyeUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXQoX3F1ZXJ5SWQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGF0YVJlbmRlckV4dGVuZFNlcnZpY2UgPSBTZXJ2aWNlc1V0aWxzLmdldFNlcnZpY2VzKCdkYXRhUmVuZGVyRXh0ZW5kU2VydmljZScgKyBfcXVlcnlJZCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJFeHRlbmRzID0gU2VydmljZXNVdGlscy5nZXRTZXJ2aWNlcygncmVuZGVyRXh0ZW5kcycgKyBfcXVlcnlJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICog5omn6KGM5p+l6K+i5omp5bGVXHJcbiAgICovXHJcbiAgICBydW5SZW5kZXJFeHRlbmRzKGV4dGVuZENvZGU6IGFueSwgZXh0ZW5kTmFtZTogYW55LCBleHRlbmREYXRhOiBhbnksIGNvbnRyb2w6IGFueSkge1xyXG4gICAgICAgIGNvbnN0ICRldmVudCA9IHRoaXMuY3JlYXRlUmVuZGVyRXh0ZW5kUGFyYW1zKHtcclxuICAgICAgICAgICAgZXZlbnRDb2RlOiBleHRlbmRDb2RlLCAvLyAnYmVmb3JlUXVlcnlEYXRhJyxcclxuICAgICAgICAgICAgZXZlbnROYW1lOiBleHRlbmROYW1lLCAvLyB0aGlzLmxvY2FsaXplU2VydmljZS5nZXRWYWx1ZSgnc3ByZWFkLm1lc3NhZ2UuZXh0ZW5kLnF1ZXJ5LmJlZm9yZScpLFxyXG4gICAgICAgICAgICBkYXRhOiBleHRlbmREYXRhLCAvLyBwYXJhbXMsXHJcbiAgICAgICAgICAgIHNwcmVhZDogY29udHJvbCwgLy8gb2JqLnNwcmVhZFxyXG4gICAgICAgICAgICBjb250cm9sOiBjb250cm9sIC8vIG9iai5zcHJlYWRcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZXh0ZW5kQ29kZSA9PT0gJ2JlZm9yZVF1ZXJ5RGF0YScpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVJlbmRlckV4dGVuZFNlcnZpY2UgJiYgdGhpcy5kYXRhUmVuZGVyRXh0ZW5kU2VydmljZS5iZWZvcmVRdWVyeURhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVJlbmRlckV4dGVuZFNlcnZpY2UuYmVmb3JlUXVlcnlEYXRhKCRldmVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJFeHRlbmRzICYmIHRoaXMucmVuZGVyRXh0ZW5kcy5iZWZvcmVRdWVyeURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckV4dGVuZHMuYmVmb3JlUXVlcnlEYXRhKCRldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGV4dGVuZENvZGUgPT09ICdiZWZvcmVMb2FkRGF0YScpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVJlbmRlckV4dGVuZFNlcnZpY2UgJiYgdGhpcy5kYXRhUmVuZGVyRXh0ZW5kU2VydmljZS5iZWZvcmVMb2FkRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhUmVuZGVyRXh0ZW5kU2VydmljZS5iZWZvcmVMb2FkRGF0YSgkZXZlbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyRXh0ZW5kcyAmJiB0aGlzLnJlbmRlckV4dGVuZHMuYmVmb3JlUXVlcnlEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJFeHRlbmRzLmJlZm9yZUxvYWREYXRhKCRldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGV4dGVuZENvZGUgPT09ICdhZnRlckxvYWREYXRhJykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhUmVuZGVyRXh0ZW5kU2VydmljZSAmJiB0aGlzLmRhdGFSZW5kZXJFeHRlbmRTZXJ2aWNlLmFmdGVyTG9hZERhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVJlbmRlckV4dGVuZFNlcnZpY2UuYWZ0ZXJMb2FkRGF0YSgkZXZlbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyRXh0ZW5kcyAmJiB0aGlzLnJlbmRlckV4dGVuZHMuYmVmb3JlUXVlcnlEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJFeHRlbmRzLmFmdGVyTG9hZERhdGEoJGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJGV2ZW50WydkYXRhJ107XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUmVuZGVyRXh0ZW5kUGFyYW1zKG9iaikge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGV2ZW50Q29kZTogb2JqLmV2ZW50Q29kZSxcclxuICAgICAgICAgICAgZXZlbnROYW1lOiBvYmouZXZlbnROYW1lLFxyXG4gICAgICAgICAgICBkYXRhOiBvYmouZGF0YSxcclxuICAgICAgICAgICAgY29udHJvbDogb2JqLmNvbnRyb2wsXHJcbiAgICAgICAgICAgIHNwcmVhZDogb2JqLnNwcmVhZCB8fCB1bmRlZmluZWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59Il19