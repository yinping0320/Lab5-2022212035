/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { RtfServices } from "@qdp/common";
import { of } from "rxjs";
import { switchMap } from "rxjs/operators";
var SchemaUtils = /** @class */ (function () {
    function SchemaUtils(_serviceCache) {
        this.init(_serviceCache);
    }
    /**
     * @private
     * @param {?} _serviceCache
     * @return {?}
     */
    SchemaUtils.prototype.init = /**
     * @private
     * @param {?} _serviceCache
     * @return {?}
     */
    function (_serviceCache) {
        this.schemaManager = _serviceCache.schemaManagerService;
        this.cacheService = _serviceCache.cacheService;
    };
    /**
     * 获取格式方案信息
     * @param option 参数配置项
     * { schemaId: 方案ID, schemaValue: 格式方案（交叉表時快速設置時使用）, controlType: 查询类型：list  treelist  crosstab, queryId: 查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @returns 方案列表
     */
    /**
     * 获取格式方案信息
     * @param {?} option 参数配置项
     * { schemaId: 方案ID, schemaValue: 格式方案（交叉表時快速設置時使用）, controlType: 查询类型：list  treelist  crosstab, queryId: 查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @return {?} 方案列表
     */
    SchemaUtils.prototype.getSchemaInfo = /**
     * 获取格式方案信息
     * @param {?} option 参数配置项
     * { schemaId: 方案ID, schemaValue: 格式方案（交叉表時快速設置時使用）, controlType: 查询类型：list  treelist  crosstab, queryId: 查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @return {?} 方案列表
     */
    function (option) {
        /** @type {?} */
        var self = this;
        option.schemaId = option.schemaId === 'prefab' || option.schemaId === '1'
            ? '1'
            : option.schemaValue && option.schemaValue.id && option.controlType === 'crosstab'
                ? option.schemaValue.id
                : option.schemaId;
        if (!option.schemaId) {
            return self.getDefaultSchemaInfo(option);
        }
        else {
            /** @type {?} */
            var organizationId = this.cacheService.get(RtfServices.getTabId(option.queryId) + 'organizationId') || '';
            /** @type {?} */
            var result$ = this.schemaManager.getSchema(option.schemaId, option.queryId, option.queryRelativeUrl, option.groupType, organizationId, option.fromCache);
            return result$.pipe(switchMap((/**
             * @param {?} schemaValue
             * @return {?}
             */
            function (schemaValue) {
                if (schemaValue && schemaValue['id']) {
                    return of(schemaValue);
                }
            })));
        }
    };
    /**
     * 获取默认格式方案
     * @param option 参数配置项
     * { queryId：查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @returns 默认格式方案
     */
    /**
     * 获取默认格式方案
     * @param {?} option 参数配置项
     * { queryId：查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @return {?} 默认格式方案
     */
    SchemaUtils.prototype.getDefaultSchemaInfo = /**
     * 获取默认格式方案
     * @param {?} option 参数配置项
     * { queryId：查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @return {?} 默认格式方案
     */
    function (option) {
        /** @type {?} */
        var organizationId = this.cacheService.get(RtfServices.getTabId(option.queryId) + 'organizationId') || '';
        return this.schemaManager.getDefaultSchema(option.queryId, option.queryRelativeUrl, option.groupType, organizationId);
    };
    return SchemaUtils;
}());
export { SchemaUtils };
if (false) {
    /** @type {?} */
    SchemaUtils.prototype.schemaManager;
    /** @type {?} */
    SchemaUtils.prototype.cacheService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9zcHJlYWQvIiwic291cmNlcyI6WyJsaWIvdXRpbC9zY2hlbWEudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQXdCLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0lBSUkscUJBQVksYUFBa0I7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7Ozs7SUFFTywwQkFBSTs7Ozs7SUFBWixVQUFhLGFBQWtCO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDLG9CQUFvQixDQUFDO1FBQ3hELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNuRCxDQUFDO0lBQ0Q7Ozs7O09BS0c7Ozs7Ozs7SUFDSCxtQ0FBYTs7Ozs7O0lBQWIsVUFBYyxNQUFXOztZQUNmLElBQUksR0FBRyxJQUFJO1FBQ2pCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxHQUFHO1lBQ3JFLENBQUMsQ0FBQyxHQUFHO1lBQ0wsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLFdBQVcsS0FBSyxVQUFVO2dCQUM5RSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUN2QixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QzthQUFNOztnQkFDRyxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxFQUFFOztnQkFDckcsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUMxSixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2YsU0FBUzs7OztZQUFDLFVBQUMsV0FBZ0I7Z0JBQ3ZCLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDbEMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzFCO1lBQ0wsQ0FBQyxFQUFDLENBQ0wsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsMENBQW9COzs7Ozs7SUFBcEIsVUFBcUIsTUFBVzs7WUFDdEIsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLGdCQUFnQixDQUFDLElBQUksRUFBRTtRQUMzRyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMxSCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBbERELElBa0RDOzs7O0lBakRHLG9DQUFvQzs7SUFDcEMsbUNBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnRmU2VydmljZXMsIFNjaGVtYU1hbmFnZXJTZXJ2aWNlIH0gZnJvbSBcIkBxZHAvY29tbW9uXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2NoZW1hVXRpbHMge1xyXG4gICAgc2NoZW1hTWFuYWdlcjogU2NoZW1hTWFuYWdlclNlcnZpY2U7XHJcbiAgICBjYWNoZVNlcnZpY2U6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihfc2VydmljZUNhY2hlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmluaXQoX3NlcnZpY2VDYWNoZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgaW5pdChfc2VydmljZUNhY2hlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnNjaGVtYU1hbmFnZXIgPSBfc2VydmljZUNhY2hlLnNjaGVtYU1hbmFnZXJTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlID0gX3NlcnZpY2VDYWNoZS5jYWNoZVNlcnZpY2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluagvOW8j+aWueahiOS/oeaBr1xyXG4gICAgICogQHBhcmFtIG9wdGlvbiDlj4LmlbDphY3nva7pobkgXHJcbiAgICAgKiB7IHNjaGVtYUlkOiDmlrnmoYhJRCwgc2NoZW1hVmFsdWU6IOagvOW8j+aWueahiO+8iOS6pOWPieihqOaZguW/q+mAn+ioree9ruaZguS9v+eUqO+8iSwgY29udHJvbFR5cGU6IOafpeivouexu+Wei++8mmxpc3QgIHRyZWVsaXN0ICBjcm9zc3RhYiwgcXVlcnlJZDog5p+l6K+iSUQsIHF1ZXJ5UmVsYXRpdmVVcmzvvJplYXBp5Z+656GAdXJpLCBncm91cFR5cGU6IOaWueahiOWIhue7hOagh+ivhiB9XHJcbiAgICAgKiBAcmV0dXJucyDmlrnmoYjliJfooahcclxuICAgICAqL1xyXG4gICAgZ2V0U2NoZW1hSW5mbyhvcHRpb246IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgb3B0aW9uLnNjaGVtYUlkID0gb3B0aW9uLnNjaGVtYUlkID09PSAncHJlZmFiJyB8fCBvcHRpb24uc2NoZW1hSWQgPT09ICcxJ1xyXG4gICAgICAgICAgICA/ICcxJ1xyXG4gICAgICAgICAgICA6IG9wdGlvbi5zY2hlbWFWYWx1ZSAmJiBvcHRpb24uc2NoZW1hVmFsdWUuaWQgJiYgb3B0aW9uLmNvbnRyb2xUeXBlID09PSAnY3Jvc3N0YWInXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbi5zY2hlbWFWYWx1ZS5pZFxyXG4gICAgICAgICAgICAgICAgOiBvcHRpb24uc2NoZW1hSWQ7XHJcbiAgICAgICAgaWYgKCFvcHRpb24uc2NoZW1hSWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0RGVmYXVsdFNjaGVtYUluZm8ob3B0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBvcmdhbml6YXRpb25JZCA9IHRoaXMuY2FjaGVTZXJ2aWNlLmdldChSdGZTZXJ2aWNlcy5nZXRUYWJJZChvcHRpb24ucXVlcnlJZCkgKyAnb3JnYW5pemF0aW9uSWQnKSB8fCAnJztcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0JCA9IHRoaXMuc2NoZW1hTWFuYWdlci5nZXRTY2hlbWEob3B0aW9uLnNjaGVtYUlkLCBvcHRpb24ucXVlcnlJZCwgb3B0aW9uLnF1ZXJ5UmVsYXRpdmVVcmwsIG9wdGlvbi5ncm91cFR5cGUsIG9yZ2FuaXphdGlvbklkLCBvcHRpb24uZnJvbUNhY2hlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCQucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoc2NoZW1hVmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2hlbWFWYWx1ZSAmJiBzY2hlbWFWYWx1ZVsnaWQnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2Yoc2NoZW1hVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6buY6K6k5qC85byP5pa55qGIXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uIOWPguaVsOmFjee9rumhuSBcclxuICAgICAqIHsgcXVlcnlJZO+8muafpeivoklELCBxdWVyeVJlbGF0aXZlVXJs77yaZWFwaeWfuuehgHVyaSwgZ3JvdXBUeXBlOiDmlrnmoYjliIbnu4TmoIfor4YgfVxyXG4gICAgICogQHJldHVybnMg6buY6K6k5qC85byP5pa55qGIXHJcbiAgICAgKi9cclxuICAgIGdldERlZmF1bHRTY2hlbWFJbmZvKG9wdGlvbjogYW55KSB7XHJcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPSB0aGlzLmNhY2hlU2VydmljZS5nZXQoUnRmU2VydmljZXMuZ2V0VGFiSWQob3B0aW9uLnF1ZXJ5SWQpICsgJ29yZ2FuaXphdGlvbklkJykgfHwgJyc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hTWFuYWdlci5nZXREZWZhdWx0U2NoZW1hKG9wdGlvbi5xdWVyeUlkLCBvcHRpb24ucXVlcnlSZWxhdGl2ZVVybCwgb3B0aW9uLmdyb3VwVHlwZSwgb3JnYW5pemF0aW9uSWQpO1xyXG4gICAgfVxyXG59Il19