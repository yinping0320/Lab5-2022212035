/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventBus, RtfServices } from "@qdp/common";
import { filter } from 'lodash-es';
var SpreadStyleUtils = /** @class */ (function () {
    function SpreadStyleUtils(_queryId, _controlType, _jointsearchInfoList, _serviceCache) {
        this.dataStyleArray = [];
        this.dataRowHeightArray = [];
        this.dataColInfoArray = [];
        this.footerStyleArray = [];
        this.footerRowHeightArray = [];
        this.footerSpansArray = [];
        this.footerDataArray = [];
        this.hyperLinkQuery = {};
        this.autoFitColumnIndex = 0;
        this.valueHeaderRowCount = 0; // 值维度数量
        // 值维度数量
        this.valueHeaderRowArray = [];
        this.rowHeadersColumnCount = 0; // 行标题列数
        // 行标题列数
        this.rowHeaderRowArray = [];
        this.joinParam = {};
        this.queryId = _queryId;
        this.type = _controlType;
        this.jointsearchInfoList = _jointsearchInfoList;
        this.cache = _serviceCache.cacheService;
        this.loadService = _serviceCache.loadingService;
        this.msgService = _serviceCache.msgService;
        this.localizeService = _serviceCache.localizeService;
        this.schemaManager = _serviceCache.schemaManagerService;
        this.formErrorService = _serviceCache.formErrorService;
        this.lcpService = _serviceCache.lcpService;
    }
    /**
     * @param {?} schema
     * @param {?} sheet
     * @return {?}
     */
    SpreadStyleUtils.prototype.setAutoFitColumn = /**
     * @param {?} schema
     * @param {?} sheet
     * @return {?}
     */
    function (schema, sheet) {
        var _this = this;
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                _this.recursionAutoFitColumn(col, null, sheet);
            }));
        }
    };
    /**
     * @private
     * @param {?} column
     * @param {?} childList
     * @param {?} sheet
     * @return {?}
     */
    SpreadStyleUtils.prototype.recursionAutoFitColumn = /**
     * @private
     * @param {?} column
     * @param {?} childList
     * @param {?} sheet
     * @return {?}
     */
    function (column, childList, sheet) {
        var _this = this;
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionAutoFitColumn(null, column.childList, sheet);
            }
            else {
                if (column.autoFit) {
                    sheet.autoFitColumn(this.autoFitColumnIndex);
                }
                this.autoFitColumnIndex += 1;
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (col.childList && col.childList.length) {
                    _this.recursionAutoFitColumn(null, col.childList, sheet);
                }
                else {
                    if (col.autoFit) {
                        sheet.autoFitColumn(_this.autoFitColumnIndex);
                    }
                    _this.autoFitColumnIndex += 1;
                }
            }));
        }
    };
    /**
     * @param {?} sheet
     * @return {?}
     */
    SpreadStyleUtils.prototype.cacheStyle = /**
     * @param {?} sheet
     * @return {?}
     */
    function (sheet) {
        this.dataStyleArray = [];
        this.dataRowHeightArray = [];
        this.dataColInfoArray = [];
        this.footerStyleArray = [];
        this.footerRowHeightArray = [];
        this.footerSpansArray = [];
        this.footerDataArray = [];
        // 缓存区域样式信息
        for (var r = 0; r < sheet.getRowCount(); r++) {
            /** @type {?} */
            var columnStyleArray = new Array();
            /** @type {?} */
            var dataArray = new Array();
            for (var c = 0; c < sheet.getColumnCount(); c++) {
                if (r === 0) {
                    /** @type {?} */
                    var formatter = '';
                    if (sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport)) {
                        formatter = sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport);
                    }
                    /** @type {?} */
                    var colHeaderCount = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    var colInfo = {
                        name: sheet.getCell(r, c, GC.Spread.Sheets.SheetArea.viewport).value(),
                        size: sheet.getColumnWidth(c, GC.Spread.Sheets.SheetArea.viewport),
                        visible: sheet.getColumnVisible(c, GC.Spread.Sheets.SheetArea.viewport),
                        resizable: sheet.getColumnResizable(c, GC.Spread.Sheets.SheetArea.viewport),
                        formatter: formatter.indexOf('&') >= 0 ? new MyNumFormatter(formatter) : formatter,
                        displayName: sheet.getCell((colHeaderCount - 1), c, GC.Spread.Sheets.SheetArea.colHeader).value()
                    };
                    this.dataColInfoArray.push(colInfo);
                }
                /** @type {?} */
                var style = sheet.getStyle(r, c, GC.Spread.Sheets.SheetArea.viewport);
                if (style == null) {
                    style = new GC.Spread.Sheets.Style();
                    style.locked = true;
                }
                else {
                    style.locked = true;
                }
                if (style && style.formatter && style.formatter.indexOf('&') >= 0) {
                    style.formatter = new MyNumFormatter(style.formatter);
                }
                columnStyleArray.push(style);
                /** @type {?} */
                var text = sheet.getValue(r, c, GC.Spread.Sheets.SheetArea.viewport)
                    || sheet.getText(r, c, GC.Spread.Sheets.SheetArea.viewport)
                    || '';
                dataArray.push(text);
            }
            if (r === 0) {
                this.dataRowHeightArray.push(sheet.getRowHeight(r));
                this.dataStyleArray.push(columnStyleArray);
            }
            else {
                this.footerRowHeightArray.push(sheet.getRowHeight(r));
                this.footerStyleArray.push(columnStyleArray);
                this.footerDataArray.push(dataArray);
            }
        }
        // 缓存span
        /** @type {?} */
        var spans = sheet.getSpans();
        if (spans && spans.length) {
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < spans.length; i++) {
                if (spans[i].row > 0) {
                    this.footerSpansArray.push(spans[i]);
                }
            }
        }
        sheet.deleteRows(1, sheet.getRowCount() - 1);
    };
    /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?=} showZero
     * @return {?}
     */
    SpreadStyleUtils.prototype.applyStyle = /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?=} showZero
     * @return {?}
     */
    function (sheet, schema, showZero) {
        var _this = this;
        /** @type {?} */
        var rowCount = sheet.getRowCount();
        /** @type {?} */
        var colCount = sheet.getColumnCount();
        /** @type {?} */
        var footerCount = this.footerRowHeightArray.length;
        sheet.addRows(rowCount, footerCount);
        /** @type {?} */
        var index = 0;
        /** @type {?} */
        var groupFieldCache = [];
        /** @type {?} */
        var groupFieldValueCache = [];
        /** @type {?} */
        var groupRowCache = [];
        /** @type {?} */
        var groupTreeLevel = {};
        /** @type {?} */
        var columns = sheet.toJSON().columns;
        this.getGroupField(groupFieldCache, schema);
        /** @type {?} */
        var formatFieldCache = [];
        this.getFormatField(formatFieldCache, schema);
        this.getIsRedColumns(formatFieldCache, schema);
        /** @type {?} */
        var isRedColumns = {
            colIndex: 0,
            isRedColumns: []
        };
        this.getIsRedColumns(schema, isRedColumns);
        /** @type {?} */
        var sheetColumns = sheet.toJSON().columns;
        var _loop_1 = function (r) {
            if (formatFieldCache && formatFieldCache.length && r < rowCount) {
                formatFieldCache.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var dataItem = sheet.getDataItem(r);
                    /** @type {?} */
                    var precision = dataItem[item.formatField] - 0;
                    /** @type {?} */
                    var numberFormat = item.formatter && (item.formatter.indexOf('#,###') >= 0 || item.formatter.indexOf('#,##0') >= 0) ? '#,##0.' : '0.';
                    if (_this.isNumber(precision)) {
                        for (var p = 0; p < precision; p++) {
                            numberFormat += '0';
                        }
                    }
                    /** @type {?} */
                    var formatColIndex = sheetColumns.findIndex((/**
                     * @param {?} el
                     * @return {?}
                     */
                    function (el) { return el.name == item.sourceField; }));
                    if (formatColIndex >= 0 && numberFormat != '0.' && numberFormat != '#,##0.') {
                        sheet.getCell(r, formatColIndex).formatter(numberFormat);
                    }
                }));
            }
            var _loop_2 = function (c) {
                if (r === 0 && !sheet.getColumnVisible(index)) {
                    index += 1;
                }
                if (r >= rowCount) {
                    if (c === 0) {
                        sheet.setStyle(r, c, this_1.footerStyleArray[r - rowCount][c]);
                        if (this_1.footerDataArray && this_1.footerDataArray.length) {
                            sheet.setValue(r, c, this_1.footerDataArray[r - rowCount][c]);
                        }
                        sheet.setRowHeight(r, this_1.footerRowHeightArray[r - rowCount]);
                        if (this_1.footerSpansArray && this_1.footerSpansArray.length) {
                            sheet.addSpan(r, this_1.footerSpansArray[0].col, this_1.footerSpansArray[0].rowCount, this_1.footerSpansArray[0].colCount);
                        }
                    }
                }
                else {
                    /** @type {?} */
                    var formatter = sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport);
                    if (formatter && formatter.indexOf && formatter.indexOf('/') >= 0 && formatter.indexOf(';') >= 0) {
                        /** @type {?} */
                        var cellValue = this_1.logicFormat(formatter, sheet.getValue(r, c));
                        sheet.setText(r, c, cellValue);
                    }
                    if (formatter && typeof formatter === 'string' && (formatter.indexOf('yy') >= 0 || formatter.indexOf('MM') >= 0 || formatter.indexOf('dd') >= 0 || formatter.indexOf('HH') >= 0 || formatter.indexOf('mm') >= 0 || formatter.indexOf('ss') >= 0)) {
                        if (sheet.getDataItem(r).hasOwnProperty("qdp_data_flag")) {
                            sheet.setFormatter(r, c, '');
                        }
                    }
                    if (isRedColumns.isRedColumns.findIndex((/**
                     * @param {?} el
                     * @return {?}
                     */
                    function (el) { return el.colIndex == c; })) >= 0 && this_1.isNumber(sheet.getCell(r, c).value()) && (sheet.getCell(r, c).value() - 0 < 0)) {
                        sheet.getCell(r, c).foreColor('red');
                    }
                    if (!showZero) {
                        if (!showZero && columns && columns.length) {
                            if (columns[c].name === 'treeLevel' || columns[c].name === 'isDetail') {
                                return "continue";
                            }
                            if (sheet.getCell(r, c).value() === 0 || sheet.getCell(r, c).value() == '0') {
                                sheet.getCell(r, c).value('');
                            }
                        }
                    }
                }
            };
            for (var c = 0; c < colCount; c++) {
                _loop_2(c);
            }
            if (r < rowCount) {
                // 设置行高
                sheet.setRowHeight(r, this_1.dataRowHeightArray[0]);
                if (this_1.type === 'treelist') {
                    /** @type {?} */
                    var level = sheet.getDataItem(r)['treeLevel'];
                    /** @type {?} */
                    var isDetail = sheet.getDataItem(r)['isDetail'];
                    sheet.setCellType(r, index, new TreeCellType(null, false, level, isDetail));
                    sheet.getStyle(r, index).hAlign = 0;
                    sheet.getStyle(r, index).textIndent = level + 2;
                    for (var i = 0; i <= level; i++) {
                        sheet.rowOutlines.group(r, 1);
                    }
                }
                else if (this_1.type === 'list' && groupFieldCache.length) {
                    /** @type {?} */
                    var filterCondition = {};
                    if (groupRowCache.findIndex((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) { return x === r; })) >= 0) {
                        return "continue";
                    }
                    for (var c = 0; c < colCount; c++) {
                        if (sheet.getDataItem(r).hasOwnProperty("qdp_data_flag") && (sheet.getDataItem(r)["qdp_data_flag"] + '') === (4 + '')) {
                            if (sheet.getFormatter(r, c) && (sheet.getFormatter(r, c).toString().indexOf('y') >= 0 || sheet.getFormatter(r, c).toString().indexOf('d') >= 0 || sheet.getFormatter(r, c).toString().indexOf('M') >= 0)) {
                                sheet.setFormatter(r, c, '');
                            }
                        }
                    }
                    /** @type {?} */
                    var addRowsCache = [];
                    var _loop_3 = function (i) {
                        /** @type {?} */
                        var addRowIndex = r + addRowsCache.length;
                        // const groupField = groupFieldCache[i];
                        /** @type {?} */
                        var fieldIndex = this_1.dataColInfoArray.findIndex((/**
                         * @param {?} x
                         * @return {?}
                         */
                        function (x) { return x.name === groupFieldCache[i]; }));
                        filterCondition = {};
                        for (var f = 0; f <= i; f++) {
                            filterCondition[groupFieldCache[f]] = sheet.getDataItem(addRowIndex)[groupFieldCache[f]];
                        }
                        /** @type {?} */
                        var filterResult = filter(groupFieldValueCache, filterCondition);
                        if ((!filterResult || !filterResult.length) && !sheet.getDataItem(addRowIndex).hasOwnProperty("qdp_data_flag")) {
                            // const groupFieldValue = {};
                            // groupFieldValue[groupField] = filterCondition[groupField];
                            groupFieldValueCache.push(filterCondition);
                            /** @type {?} */
                            var style = this_1.dataStyleArray[0][fieldIndex];
                            style.hAlign = 0;
                            style.cellType = null;
                            style.backColor = '#F4F7FA';
                            sheet.addRows(addRowIndex, 1);
                            sheet.setRowHeight(addRowIndex, this_1.dataRowHeightArray[0]);
                            sheet.setStyle(addRowIndex, index, style);
                            sheet.getCell(addRowIndex, index).value(filterCondition[groupFieldCache[i]]);
                            sheet.addSpan(addRowIndex, index, 1, (colCount - index));
                            sheet.getCell(addRowIndex, index).textIndent((i + 1) * 2);
                            groupTreeLevel[addRowIndex + ''] = { treeLevel: i, isDetail: 0 };
                            if (i === (groupFieldCache.length - 1)) {
                                groupTreeLevel[(addRowIndex + 1) + ''] = { treeLevel: groupFieldCache.length, isDetail: 1 };
                            }
                            rowCount += 1;
                            addRowsCache.push(i);
                            groupRowCache.push(addRowIndex);
                        }
                        else {
                            if (sheet.getDataItem(addRowIndex).hasOwnProperty("qdp_data_flag") && (sheet.getDataItem(addRowIndex)["qdp_data_flag"] + '') === (3 + '')) {
                                return "continue";
                            }
                            if (i === (groupFieldCache.length - 1)) {
                                groupTreeLevel[(addRowIndex + 1) + ''] = { treeLevel: groupFieldCache.length, isDetail: 1 };
                            }
                        }
                    };
                    for (var i = 0; i < groupFieldCache.length; i++) {
                        _loop_3(i);
                    }
                }
            }
        };
        var this_1 = this;
        for (var r = 0; r < (rowCount + footerCount); r++) {
            _loop_1(r);
        }
        for (var r = 0; r < rowCount; r++) {
            if (!groupTreeLevel.hasOwnProperty(r)) {
                break;
            }
            for (var t = 0; t <= groupTreeLevel[r + ''].treeLevel; t++) {
                sheet.rowOutlines.group(r, 1);
            }
            sheet.setCellType(r, index, new TreeCellType(null, false, groupTreeLevel[r + ''].treeLevel, groupTreeLevel[r + ''].isDetail));
        }
        if (this.type !== 'crosstab' && this.getShowFilterRow(schema)) {
            this.filterRow(sheet);
        }
    };
    /**
     * @param {?} groupColCache
     * @param {?} schema
     * @return {?}
     */
    SpreadStyleUtils.prototype.getGroupField = /**
     * @param {?} groupColCache
     * @param {?} schema
     * @return {?}
     */
    function (groupColCache, schema) {
        var _this = this;
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                _this.recursionGetGroupColumn(groupColCache, col, null);
            }));
        }
    };
    /**
     * @param {?} schema
     * @param {?} params
     * @return {?}
     */
    SpreadStyleUtils.prototype.getIsRedColumns = /**
     * @param {?} schema
     * @param {?} params
     * @return {?}
     */
    function (schema, params) {
        var _this = this;
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                _this.recursiveIsRedColumn(col, null, params);
            }));
        }
    };
    /**
     * @param {?} fieldCache
     * @param {?} schema
     * @return {?}
     */
    SpreadStyleUtils.prototype.getFormatField = /**
     * @param {?} fieldCache
     * @param {?} schema
     * @return {?}
     */
    function (fieldCache, schema) {
        var _this = this;
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                _this.recursionGetFormatColumn(fieldCache, col, null);
            }));
        }
    };
    /**
     * @param {?} schema
     * @return {?}
     */
    SpreadStyleUtils.prototype.getShowHeaderSort = /**
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.showHeaderSort != null && schema.schemaValue.otherOption.showHeaderSort != undefined) {
                return schema.schemaValue.otherOption.showHeaderSort;
            }
            return true;
        }
        catch (e) {
            return true;
        }
    };
    /**
     * @param {?} schema
     * @return {?}
     */
    SpreadStyleUtils.prototype.getShowFilterRow = /**
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.showFilterRow != null && schema.schemaValue.otherOption.showFilterRow != undefined) {
                return schema.schemaValue.otherOption.showFilterRow;
            }
            return true;
        }
        catch (e) {
            return true;
        }
    };
    /**
     * @param {?} schema
     * @return {?}
     */
    SpreadStyleUtils.prototype.getMergeCell = /**
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.mergeCell != null && schema.schemaValue.otherOption.mergeCell != undefined) {
                return schema.schemaValue.otherOption.mergeCell;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * @private
     * @param {?} fieldCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    SpreadStyleUtils.prototype.recursionGetFormatColumn = /**
     * @private
     * @param {?} fieldCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    function (fieldCache, column, childList) {
        var _this = this;
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionGetFormatColumn(fieldCache, null, column.childList);
            }
            else {
                if (column.formatType == 1 && column.formatField) {
                    fieldCache.push({ sourceField: column.bindField, formatField: column.formatField, formatter: column.formattor });
                }
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (col.childList && col.childList.length) {
                    _this.recursionGetFormatColumn(fieldCache, null, col.childList);
                }
                else {
                    if (col.formatType == 1 && col.formatField) {
                        fieldCache.push({ sourceField: col.bindField, formatField: col.formatField, formatter: col.formattor });
                    }
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} groupColCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    SpreadStyleUtils.prototype.recursionGetGroupColumn = /**
     * @private
     * @param {?} groupColCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    function (groupColCache, column, childList) {
        var _this = this;
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionGetGroupColumn(groupColCache, null, column.childList);
            }
            else {
                if (column.isGroup) {
                    groupColCache.push(column.bindField);
                }
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (col.childList && col.childList.length) {
                    _this.recursionGetGroupColumn(groupColCache, null, col.childList);
                }
                else {
                    if (col.isGroup) {
                        groupColCache.push(col.bindField);
                    }
                }
            }));
        }
    };
    /**
     * @param {?} formattor
     * @param {?} cellValue
     * @return {?}
     */
    SpreadStyleUtils.prototype.logicFormat = /**
     * @param {?} formattor
     * @param {?} cellValue
     * @return {?}
     */
    function (formattor, cellValue) {
        /** @type {?} */
        var str = formattor.split(';');
        /** @type {?} */
        var real = str[0].split('/');
        /** @type {?} */
        var disp = str[1].split('/');
        for (var i = 0; i < real.length; i++) {
            // tslint:disable-next-line:triple-equals
            if (real[i] == (cellValue + '')) {
                cellValue = disp[i];
                break;
            }
        }
        return cellValue;
    };
    /**
     * @param {?} sheet
     * @return {?}
     */
    SpreadStyleUtils.prototype.filterRow = /**
     * @param {?} sheet
     * @return {?}
     */
    function (sheet) {
        sheet.addRows(0, 1);
        for (var i = 0; i < sheet.getRowCount(); i++) {
            sheet.getCell(i, 0, GC.Spread.Sheets.SheetArea.rowHeader).value(i == 0 ? '' : i);
        }
        sheet.setRowHeight(0, this.dataRowHeightArray[0]);
        for (var i = 0; i < sheet.getColumnCount(); i++) {
            /** @type {?} */
            var s = new GC.Spread.Sheets.Style();
            s.fromJSON(this.dataStyleArray[0][i].toJSON());
            s.locked = false;
            s.formatter = '@';
            sheet.setStyle(0, i, s);
            sheet.setCellType(0, i, new FilterCellType(sheet));
        }
        /** @type {?} */
        var filter = new GC.Spread.Sheets.Filter.HideRowFilter(new GC.Spread.Sheets.Range(1, 0, sheet.getRowCount(), sheet.getColumnCount()));
        sheet.rowFilter(filter);
        filter.filterButtonVisible(false);
    };
    /**
     * @param {?} spread
     * @param {?} sheet
     * @return {?}
     */
    SpreadStyleUtils.prototype.linkField = /**
     * @param {?} spread
     * @param {?} sheet
     * @return {?}
     */
    function (spread, sheet) {
        try {
            /** @type {?} */
            var self_1 = this;
            /** @type {?} */
            var rowCount = sheet.getRowCount();
            /** @type {?} */
            var colCount = sheet.getColumnCount();
            // const footerCount = this.footerRowHeightArray.length;
            for (var r = 1; r < (rowCount); r++) {
                /** @type {?} */
                var dataItem = sheet.getDataItem(r);
                if (dataItem.hasOwnProperty('dynamicPropSet') && dataItem.dynamicPropSet.hasOwnProperty('qdp_data_flag')) {
                    continue;
                }
                for (var c = 0; c < colCount; c++) {
                    /** @type {?} */
                    var joinSearch = JSON.parse(this.jointsearchInfoList['joinSearch']);
                    // tslint:disable-next-line:prefer-for-of
                    for (var i = 0; i < joinSearch.length; i++) {
                        /** @type {?} */
                        var el = joinSearch[i];
                        if (el.jointserachdisplaystyle === 2) {
                            if (el.linkfield === this.dataColInfoArray[c].name) {
                                if (!this.hyperLinkQuery[this.queryId]) {
                                    this.hyperLinkQuery[this.queryId] = {};
                                }
                                this.hyperLinkQuery[this.queryId][c + ''] = el;
                                /** @type {?} */
                                var h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                h1.text(h1.format(sheet.getCell(r, c).value(), this.dataColInfoArray[c].formatter));
                                h1.activeOnClick(true);
                                h1.onClickAction((/**
                                 * @return {?}
                                 */
                                function () {
                                    spread.commandManager().execute({
                                        cmd: 'dropdownquery',
                                        self: self_1
                                    });
                                }));
                                sheet.setCellType(r, c, h1, GC.Spread.Sheets.SheetArea.viewport);
                            }
                        }
                    }
                }
            }
            spread.commandManager().register('dropdownquery', {
                canUndo: true,
                execute: (/**
                 * @param {?} context
                 * @param {?} options
                 * @param {?} isUndo
                 * @return {?}
                 */
                function (context, options, isUndo) {
                    /** @type {?} */
                    var row = context.getActiveSheet().getActiveRowIndex();
                    /** @type {?} */
                    var col = context.getActiveSheet().getActiveColumnIndex();
                    var _loop_4 = function (key) {
                        if (key === (col + '')) {
                            /** @type {?} */
                            var el_1 = options.self.hyperLinkQuery[options.self.queryId][key];
                            /** @type {?} */
                            var entityParam_1 = { 'id': 'null' };
                            /** @type {?} */
                            var paramMap_1 = new Map();
                            /** @type {?} */
                            var searchparas = JSON.parse(options.self.jointsearchInfoList['jointparam']).filter((/**
                             * @param {?} x
                             * @return {?}
                             */
                            function (x) { return x.functionid === el_1['id']; }));
                            /** @type {?} */
                            var joinParam = options.self.cache.get(RtfServices.getTabId(options.self.queryId) + 'joinSearch');
                            /** @type {?} */
                            var dataItem = { 'id': 'null' };
                            if (joinParam.controlType === 'crosstab') { // 交叉表
                                var _loop_5 = function (i) {
                                    /** @type {?} */
                                    var value_1 = context.getActiveSheet().getValue(row, i, GC.Spread.Sheets.SheetArea.viewport);
                                    /** @type {?} */
                                    var name_1 = context.getActiveSheet().getValue(joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                                    /** @type {?} */
                                    var colInfo_1 = joinParam.colInfos.find((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    function (x) { return x.dimension === 1 && x.name === name_1; })).bindField;
                                    dataItem[colInfo_1] = value_1;
                                };
                                // 获取行标题的数据
                                for (var i = joinParam.rowHeaderColInfo.start; i < joinParam.rowHeaderColInfo.end; i++) {
                                    _loop_5(i);
                                }
                                // 获取列标题的数据
                                for (var i = joinParam.colHeaderRowInfo.start; i < joinParam.colHeaderRowInfo.end; i++) {
                                    /** @type {?} */
                                    var value_2 = context.getActiveSheet().getValue(i, col, GC.Spread.Sheets.SheetArea.colHeader);
                                    /** @type {?} */
                                    var colInfo_2 = joinParam.colInfos.filter((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    function (x) { return x.dimension === 2; }))[i - joinParam.colHeaderRowInfo.start].bindField;
                                    dataItem[colInfo_2] = value_2;
                                }
                                // 获取值标题的数据
                                /** @type {?} */
                                var value = context.getActiveSheet().getValue(row, col, GC.Spread.Sheets.SheetArea.viewport);
                                /** @type {?} */
                                var name_2 = context.getActiveSheet().getValue(joinParam.colHeaderRowInfo.end, col, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                var colInfo = joinParam.colInfos.find((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                function (x) { return x.dimension === 3 && x.name === name_2; }));
                                if (colInfo) {
                                    colInfo = colInfo.bindField;
                                    dataItem[colInfo] = value;
                                }
                            }
                            else {
                                dataItem = context.getActiveSheet().getDataItem(row);
                            }
                            /** @type {?} */
                            var currentSelectedItem_1 = dataItem;
                            if (searchparas.length > 0) {
                                searchparas.forEach((/**
                                 * @param {?} value
                                 * @return {?}
                                 */
                                function (value) {
                                    if (value.paravaluetype) { // 表达式
                                        if (value.paravalue.indexOf('getParameter(') >= 0) {
                                            /** @type {?} */
                                            var parameterKey = value.paravalue.replace(/'/g, '').replace(/"/g, '').replace(/getParameter\(/g, '').replace(/\)/g, '');
                                            options.self.getQueryParameters(entityParam_1, paramMap_1, parameterKey, value.para);
                                        }
                                        else {
                                            entityParam_1[value.para] = currentSelectedItem_1[value.paravalue];
                                            paramMap_1.set(value.para, currentSelectedItem_1[value.paravalue]);
                                        }
                                    }
                                    else {
                                        entityParam_1[value.para] = value.paravalue;
                                        paramMap_1.set(value.para, value.paravalue);
                                    }
                                }));
                            }
                            else {
                                entityParam_1 = currentSelectedItem_1;
                            }
                            /** @type {?} */
                            var op = {
                                ParentSessionId: options.self.cache.get('session'),
                                EntityParam: entityParam_1
                            };
                            /** @type {?} */
                            var tabId = '';
                            if (el_1.searchtype === 'func') {
                                // 联查前
                                /** @type {?} */
                                var openMenuoptions = {
                                    'appType': 'menu',
                                    'funcId': el_1.functioncode,
                                    'tabId': EventBus.guid(),
                                    'appId': '',
                                    'appEntrance': '',
                                    'entityParams': op.entityParam,
                                    'queryStringParams': paramMap_1,
                                    'isNewTab': true
                                };
                                tabId = RtfServices.getFuncId(openMenuoptions);
                                options.self.cache.set(tabId ? tabId : options.self.queryId, op.EntityParam);
                                /** @type {?} */
                                var menuSwitchControl = Object.assign({}, openMenuoptions['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
                                openMenuoptions['entityParams'] = menuSwitchControl;
                                // 卡片塞进去params
                                gspframeworkService.rtf.func.openMenu(openMenuoptions);
                            }
                            else if (el_1.searchtype === 'app') {
                                /** @type {?} */
                                var appOption = {
                                    appType: 'app',
                                    appId: el_1.functioncode,
                                    appEntrance: el_1.appEntrance,
                                    funcId: '',
                                    isReload: true,
                                    tabId: EventBus.guid(),
                                    entityParams: op.entityParam,
                                    queryStringParams: paramMap_1
                                };
                                tabId = RtfServices.getFuncId(appOption);
                                options.self.cache.set(tabId ? tabId : options.queryId, op.EntityParam);
                                /** @type {?} */
                                var menuSwitchControl = Object.assign({}, appOption['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
                                appOption['entityParams'] = menuSwitchControl;
                                gspframeworkService.rtf.func.openMenu(appOption);
                            }
                        }
                    };
                    for (var key in options.self.hyperLinkQuery[options.self.queryId]) {
                        _loop_4(key);
                    }
                })
            }, null, false, false, false, false);
        }
        catch (e) { }
    };
    /**
     * @param {?} spread
     * @param {?} sheet
     * @param {?} extObj
     * @return {?}
     */
    SpreadStyleUtils.prototype.inSuiteLinkField = /**
     * @param {?} spread
     * @param {?} sheet
     * @param {?} extObj
     * @return {?}
     */
    function (spread, sheet, extObj) {
        try {
            /** @type {?} */
            var self_2 = this;
            /** @type {?} */
            var data_1 = null;
            try {
                if (this.lcpService.inSuiteDropDownInfo && typeof this.lcpService.inSuiteDropDownInfo == 'string') {
                    data_1 = JSON.parse(this.lcpService.inSuiteDropDownInfo);
                }
            }
            catch (e) {
                throw e;
            }
            /** @type {?} */
            var rowCount = sheet.getRowCount();
            /** @type {?} */
            var colCount = sheet.getColumnCount();
            /** @type {?} */
            var rowDropDown = true;
            /** @type {?} */
            var cacheRowDropDown = [];
            /** @type {?} */
            var cacheCellDropDown = {};
            // 解析相关数据
            var clickEvents_1 = data_1.click_events, eventData_1 = data_1.event_data, dcEvent_1 = data_1.double_click_event, dcEventParams_1 = data_1.double_click_event_params, rcEventIds_1 = data_1.rc_event_ids;
            if (dcEvent_1 && !("{}" == JSON.stringify(dcEvent_1)) && dcEventParams_1 && !("{}" == JSON.stringify(dcEventParams_1))) {
                rowDropDown = true;
                for (var key in dcEventParams_1) {
                    cacheRowDropDown.push(key);
                }
            }
            else if (eventData_1 && !("{}" == JSON.stringify(eventData_1))) {
                rowDropDown = false;
                for (var key in eventData_1) {
                    if (eventData_1[key]) {
                        /** @type {?} */
                        var cellIndex = [];
                        cacheCellDropDown[key] = cellIndex;
                        for (var key1 in eventData_1[key]) {
                            cacheCellDropDown[key].push(key1);
                        }
                    }
                }
            }
            for (var r = 1; r < (rowCount); r++) {
                /** @type {?} */
                var dataItem = sheet.getDataItem(r);
                if (dataItem.hasOwnProperty('dynamicPropSet') && dataItem.dynamicPropSet.hasOwnProperty('qdp_data_flag')) {
                    continue;
                }
                for (var c = 0; c < colCount; c++) {
                    if (rowDropDown) {
                        for (var i = 0; i < cacheRowDropDown.length; i++) {
                            if (r == (cacheRowDropDown[i] - 0)) {
                                /** @type {?} */
                                var h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                /** @type {?} */
                                var formatter = sheet.getFormatter(r, c);
                                h1.text(h1.format(sheet.getCell(r, c).value(), formatter));
                                h1.activeOnClick(true);
                                h1.onClickAction((/**
                                 * @return {?}
                                 */
                                function () {
                                    spread.commandManager().execute({
                                        cmd: 'dropdownquery',
                                        self: self_2
                                    });
                                }));
                                sheet.setCellType(r, c, h1, GC.Spread.Sheets.SheetArea.viewport);
                            }
                        }
                    }
                    else {
                        for (var key in cacheCellDropDown) {
                            if ((r + '') === key) {
                                for (var i = 0; i < cacheCellDropDown[key].length; i++) {
                                    /** @type {?} */
                                    var h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                    /** @type {?} */
                                    var formatter = sheet.getFormatter(r, cacheCellDropDown[key][i]);
                                    h1.text(h1.format(sheet.getCell(r, cacheCellDropDown[key][i]).value(), formatter));
                                    h1.activeOnClick(true);
                                    h1.onClickAction((/**
                                     * @return {?}
                                     */
                                    function () {
                                        spread.commandManager().execute({
                                            cmd: 'dropdownquery',
                                            self: self_2
                                        });
                                    }));
                                    sheet.setCellType(r, cacheCellDropDown[key][i], h1, GC.Spread.Sheets.SheetArea.viewport);
                                }
                            }
                        }
                    }
                }
            }
            spread.commandManager().register('dropdownquery', {
                canUndo: true,
                execute: (/**
                 * @param {?} context
                 * @param {?} options
                 * @param {?} isUndo
                 * @return {?}
                 */
                function (context, options, isUndo) {
                    /** @type {?} */
                    var row = context.getActiveSheet().getActiveRowIndex();
                    /** @type {?} */
                    var col = context.getActiveSheet().getActiveColumnIndex();
                    // 双击事件的逻辑
                    /** @type {?} */
                    var event;
                    /** @type {?} */
                    var params;
                    // 行点击数据
                    if (dcEvent_1 && !("{}" == JSON.stringify(dcEvent_1)) && dcEventParams_1 && !("{}" == JSON.stringify(dcEventParams_1))) {
                        event = dcEvent_1;
                        // args.row为行序号，下同
                        params = dcEventParams_1[row];
                        // 如果eventData数据不为空，并且对应行的数据也不为空
                        // 单元格数据
                    }
                    else if (eventData_1 && !("{}" == JSON.stringify(eventData_1)) && eventData_1[row] && !("{}" == JSON.stringify(eventData_1[row]))) {
                        /** @type {?} */
                        var thisEventId = void 0;
                        // 如果对应行包含-1，则取-1中的数据, 否则取对应列号的数据
                        // args.col为列序号
                        /** @type {?} */
                        var thisEventData = eventData_1[row][-1] || eventData_1[row][col];
                        if (thisEventData && !("{}" == JSON.stringify(thisEventData))) {
                            if (!rcEventIds_1 && rcEventIds_1.length) {
                                /** @type {?} */
                                var obj = {};
                                var _loop_6 = function (key) {
                                    if (rcEventIds_1.findIndex((/**
                                     * @param {?} el
                                     * @return {?}
                                     */
                                    function (el) { return el == key; })) < 0) {
                                        obj[key] = thisEventData[key];
                                    }
                                };
                                for (var key in thisEventData) {
                                    _loop_6(key);
                                }
                                thisEventData = obj;
                            }
                            /** @type {?} */
                            var index = 0;
                            for (var key in thisEventData) {
                                if (index == 0) {
                                    thisEventId = key;
                                }
                                else {
                                    break;
                                }
                                index++;
                            }
                            params = thisEventData[thisEventId];
                        }
                        // 根据event id获取event
                        if (thisEventId != null && thisEventId != undefined) {
                            event = clickEvents_1[thisEventId] && !("{}" == JSON.stringify(clickEvents_1[thisEventId])) ? clickEvents_1[thisEventId].event : {};
                        }
                    }
                    /** @type {?} */
                    var message;
                    if (!("{}" == JSON.stringify(event)) && !("{}" == JSON.stringify(params))) {
                        // 返回数据
                        message = { type: 'cellAction', event: event, params: params, defaults: data_1.defaults };
                    }
                    if (message) {
                        try {
                            extObj.inSuiteWindow().postMessage(message, location.origin);
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                })
            }, null, false, false, false, false);
        }
        catch (e) { }
    };
    /**
     * @private
     * @param {?} entityParam
     * @param {?} paramMap
     * @param {?} parameterKey
     * @param {?} key
     * @return {?}
     */
    SpreadStyleUtils.prototype.getQueryParameters = /**
     * @private
     * @param {?} entityParam
     * @param {?} paramMap
     * @param {?} parameterKey
     * @param {?} key
     * @return {?}
     */
    function (entityParam, paramMap, parameterKey, key) {
        try {
            /** @type {?} */
            var tab = gspframeworkService.rtf.session.getCommonVariable();
            if (tab && tab.tabId) {
                /** @type {?} */
                var tid = tab.tabId + RtfServices.getInSuiteFrmUUID();
                if (this.cache.get(tid) && this.cache.get(tid)[parameterKey]) {
                    entityParam[key] = this.cache.get(tid)[parameterKey];
                    paramMap.set(key, this.cache.get(tid)[parameterKey]);
                }
            }
        }
        catch (e) {
        }
    };
    /**
     * @param {?} spread
     * @param {?} queryId
     * @return {?}
     */
    SpreadStyleUtils.prototype.bindSelectChanged = /**
     * @param {?} spread
     * @param {?} queryId
     * @return {?}
     */
    function (spread, queryId) {
        /** @type {?} */
        var self = this;
        spread.bind(GC.Spread.Sheets.Events.SelectionChanging, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            /** @type {?} */
            var tempData = {};
            /** @type {?} */
            var selection = args.newSelections.pop();
            /** @type {?} */
            var sheetArea = args.sheetArea === 0 ? 'sheetCorner' : args.sheetArea === 1 ? 'columnHeader' : args.sheetArea === 2 ? 'rowHeader' : 'viewPort';
            if (selection) {
                tempData['SpreadEvent'] = GC.Spread.Sheets.Events.SelectionChanging;
                tempData['sheetArea'] = sheetArea;
                tempData['row'] = selection.row;
                tempData['column'] = selection.col;
                tempData['rowCount'] = selection.rowCount;
                tempData['colCount'] = selection.colCount;
                this.selectChanging = tempData;
            }
        }));
        spread.bind(GC.Spread.Sheets.Events.CellClick, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            // 解析当前选中的数据
            /** @type {?} */
            var dataItems = [];
            // 联动参数
            /** @type {?} */
            var linkageParams = {};
            for (var rowIndex = 0; rowIndex < this.selectChanging.rowCount; rowIndex++) {
                if (self.joinParam.controlType !== 'crosstab') {
                    /** @type {?} */
                    var dataItem = args.sheet.getDataItem(rowIndex + this.selectChanging.row);
                    linkageParams = dataItem;
                    dataItems.push(dataItem);
                }
                else {
                    if (this.selectChanging.column === -1) {
                        this.selectChanging.colCount = this.selectChanging.colCount + 1;
                    }
                    var _loop_7 = function (colIndex) {
                        /** @type {?} */
                        var dataItem = {};
                        if (self.joinParam.controlType === 'crosstab') { // 交叉表
                            if (args.sheetArea === 1) {
                                this_2.selectChanging.row = 0;
                            }
                            if (colIndex + this_2.selectChanging.column < self.joinParam.rowHeaderColInfo.end) {
                                return "continue";
                            }
                            var _loop_8 = function (i) {
                                /** @type {?} */
                                var value_3 = args.sheet.getValue(rowIndex + this_2.selectChanging.row, i, GC.Spread.Sheets.SheetArea.viewport);
                                /** @type {?} */
                                var name_3 = args.sheet.getValue(self.joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                var colInfo_3 = self.joinParam.colInfos.find((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                function (x) { return x.dimension === 1 && x.name === name_3; })).bindField;
                                dataItem[colInfo_3] = value_3;
                            };
                            // 获取行标题的数据
                            for (var i = self.joinParam.rowHeaderColInfo.start; i < self.joinParam.rowHeaderColInfo.end; i++) {
                                _loop_8(i);
                            }
                            // 获取列标题的数据
                            for (var i = self.joinParam.colHeaderRowInfo.start; i < self.joinParam.colHeaderRowInfo.end; i++) {
                                /** @type {?} */
                                var value_4 = args.sheet.getValue(i, colIndex + this_2.selectChanging.column, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                var colInfo_4 = self.joinParam.colInfos.filter((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                function (x) { return x.dimension === 2; }))[i - self.joinParam.colHeaderRowInfo.start].bindField;
                                dataItem[colInfo_4] = value_4;
                            }
                            // 获取值标题的数据
                            /** @type {?} */
                            var value = args.sheet.getValue(rowIndex + this_2.selectChanging.row, colIndex + this_2.selectChanging.column, GC.Spread.Sheets.SheetArea.viewport);
                            /** @type {?} */
                            var name_4 = args.sheet.getValue(self.joinParam.colHeaderRowInfo.end, colIndex + this_2.selectChanging.column, GC.Spread.Sheets.SheetArea.colHeader);
                            /** @type {?} */
                            var colInfo = self.joinParam.colInfos.find((/**
                             * @param {?} x
                             * @return {?}
                             */
                            function (x) { return x.dimension === 3 && x.name === name_4; })).bindField;
                            dataItem[colInfo] = value;
                        }
                        linkageParams = dataItem;
                        dataItems.push(dataItem);
                    };
                    var this_2 = this;
                    for (var colIndex = 0; colIndex < this.selectChanging.colCount; colIndex++) {
                        _loop_7(colIndex);
                    }
                }
            }
            // spread 联动事件
            EventBus.dispatch(queryId + '_spread_change', linkageParams);
        }));
    };
    /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    SpreadStyleUtils.prototype.setSortCellType = /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    function (sheet, schema, qdpView) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var header = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
        for (var i = 0; i < sheet.getColumnCount(); i++) {
            /** @type {?} */
            var span = sheet.getSpan(header - 1, i, GC.Spread.Sheets.SheetArea.colHeader);
            if (span && span.rowCount > 1) {
                sheet.setCellType(header - span.rowCount, i, new SortCellType(self.columnSort.bind(self), schema, qdpView), GC.Spread.Sheets.SheetArea.colHeader);
            }
            else {
                sheet.setCellType(header - 1, i, new SortCellType(self.columnSort.bind(self), schema, qdpView), GC.Spread.Sheets.SheetArea.colHeader);
            }
        }
    };
    /**
     * @param {?} sheet
     * @param {?} schema
     * @return {?}
     */
    SpreadStyleUtils.prototype.mergeCell = /**
     * @param {?} sheet
     * @param {?} schema
     * @return {?}
     */
    function (sheet, schema) {
        if (!this.getMergeCell(schema)) {
            return;
        }
        /** @type {?} */
        var groupFieldCache1 = [];
        this.getGroupField(groupFieldCache1, schema);
        if (groupFieldCache1.length) {
            return;
        }
        /** @type {?} */
        var columnCount = sheet.getColumnCount();
        /** @type {?} */
        var rowCount = sheet.getRowCount();
        /** @type {?} */
        var beginRowIndex = 0;
        if (this.getShowFilterRow(schema)) {
            beginRowIndex = 1;
        }
        // 检查参数
        if (columnCount < 1 || (rowCount - beginRowIndex) < 1) {
            return;
        }
        /** @type {?} */
        var rowSpans = {};
        /** @type {?} */
        var curCellValues = '';
        /** @type {?} */
        var currentName = '';
        /** @type {?} */
        var key = '';
        for (var row = beginRowIndex; row < rowCount; row++) {
            if (sheet.getDataItem(row).hasOwnProperty("qdp_data_flag") &&
                ((sheet.getDataItem(row)["qdp_data_flag"] + '') === (4 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (3 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (2 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (1 + ''))) {
                continue;
            }
            for (var col = 0; col < columnCount; col++) {
                currentName = sheet.getCell(row, col).value();
                if (col == 0) {
                    key = currentName;
                    if (rowSpans.hasOwnProperty(key)) {
                        rowSpans[key].rowCount = row - rowSpans[key].row + 1;
                    }
                    else {
                        rowSpans[key] = { 'row': row, 'rowCount': 1, 'col': col, 'colCount': 1 };
                    }
                }
                else {
                    curCellValues = '';
                    for (var i = 0; i <= col; i++) {
                        curCellValues += sheet.getCell(row, i).value();
                        curCellValues += "_&_";
                    }
                    if (rowSpans.hasOwnProperty(curCellValues)) {
                        rowSpans[curCellValues].rowCount = row - rowSpans[curCellValues].row + 1;
                    }
                    else {
                        rowSpans[curCellValues] = { 'row': row, 'rowCount': 1, 'col': col, 'colCount': 1 };
                    }
                }
            }
        }
        for (var k in rowSpans) {
            if ((rowSpans[k].rowCount == 1 && rowSpans[k].colCount == 1) == false) {
                sheet.addSpan(rowSpans[k].row, rowSpans[k].col, rowSpans[k].rowCount, rowSpans[k].colCount);
            }
        }
    };
    /**
     * @private
     * @param {?} index
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    SpreadStyleUtils.prototype.columnSort = /**
     * @private
     * @param {?} index
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    function (index, sheet, schema, qdpView) {
        var _this = this;
        /** @type {?} */
        var loading = this.loadService.show({ container: 'body' });
        try {
            /** @type {?} */
            var header = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
            if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
                /** @type {?} */
                var cell = null;
                /** @type {?} */
                var span = sheet.getSpan(header - 1, index, GC.Spread.Sheets.SheetArea.colHeader);
                if (span && span.rowCount > 1) {
                    cell = sheet.getCell(header - span.rowCount, index, GC.Spread.Sheets.SheetArea.colHeader);
                }
                else {
                    cell = sheet.getCell(header - 1, index, GC.Spread.Sheets.SheetArea.colHeader);
                }
                if (schema && schema.isPrefab === 1) {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                    return;
                }
                if (schema.isProtected === 1 || schema.isProtected === '1') {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                    return;
                }
                /** @type {?} */
                var colList = schema.schemaValue.columnOption.colList;
                /** @type {?} */
                var params = {
                    index: index,
                    cell: cell,
                    colIndex: 0,
                    sortInfo: { sortIndex: 0, bindField: '' },
                    isText: []
                };
                // tslint:disable-next-line:prefer-for-of
                for (var i = 0; i < colList.length; i++) {
                    this.recursiveColumnSortIndex(colList[i], null, params);
                }
                // tslint:disable-next-line:prefer-for-of
                for (var i = 0; i < colList.length; i++) {
                    this.recursiveColumnSort(colList[i], null, params);
                }
                if (params.isText.length) {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.warning(params.isText[0] + ' ' + this.localizeService.getValue('ideCmp.schemaManager.message.validate.textColumnSort'));
                    return;
                }
                /** @type {?} */
                var newSchema_1 = JSON.parse(JSON.stringify(schema));
                newSchema_1.schemaValue.columnOption.colList = colList;
                newSchema_1.schemaValue = JSON.stringify(newSchema_1.schemaValue);
                this.schemaManager.saveSchema({ schema: JSON.stringify(newSchema_1), groupType: qdpView.groupType }, '').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    loading.close();
                    qdpView.initSpread(qdpView.queryId, newSchema_1.id, qdpView.controlType, qdpView.qoManagerCode, qdpView.pageIndex, qdpView.queryRelativeUrl, qdpView.conditionExpression, qdpView.groupType, qdpView.voId, true);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    loading.close();
                    _this.formErrorService.exception(error.Message, error);
                }));
            }
            else {
                loading.close();
                this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                return;
            }
        }
        catch (e) {
            loading.close();
        }
    };
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    SpreadStyleUtils.prototype.recursiveColumnSortIndex = /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    function (col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSortIndex(null, col.childList, params);
            }
            else {
                if (col.sort !== 0 && col['sortIndex'] != null && col['sortIndex'] !== undefined && col.sortIndex > params.sortInfo.sortIndex) {
                    params.sortInfo.sortIndex = col['sortIndex'];
                    params.sortInfo.bindField = col.bindField;
                }
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSortIndex(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].sort !== 0 && colList[i]['sortIndex'] != null && colList[i]['sortIndex'] !== undefined && colList[i].sortIndex > params.sortInfo.sortIndex) {
                        params.sortInfo.sortIndex = colList[i]['sortIndex'];
                        params.sortInfo.bindField = colList[i].bindField;
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    SpreadStyleUtils.prototype.recursiveColumnSort = /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    function (col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSort(null, col.childList, params);
            }
            else {
                if (params.colIndex === params.index) {
                    if (col.type && col.type.toLowerCase() === 'text') {
                        params.isText.push(col.bindField);
                    }
                    else {
                        switch (params.cell.tag()) {
                            case 0:
                                col.sort = 0;
                                col['sortIndex'] = 0;
                                break;
                            case 1:
                                col.sort = 1;
                                col['sortIndex'] = col['sortIndex'] !== null && col['sortIndex'] !== undefined && col['sortIndex'] > 0 ? col['sortIndex'] : col.bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                break;
                            case 2:
                                col.sort = 2;
                                col['sortIndex'] = col['sortIndex'] !== null && col['sortIndex'] !== undefined && col['sortIndex'] > 0 ? col['sortIndex'] : col.bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                break;
                        }
                    }
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSort(null, colList[i].childList, params);
                }
                else {
                    if (params.colIndex === params.index) {
                        if (colList[i].type && colList[i].type.toLowerCase() === 'text') {
                            params.isText.push(colList[i].bindField);
                        }
                        else {
                            switch (params.cell.tag()) {
                                case 0:
                                    colList[i].sort = 0;
                                    colList[i]['sortIndex'] = 0;
                                    break;
                                case 1:
                                    colList[i].sort = 1;
                                    colList[i]['sortIndex'] = colList[i]['sortIndex'] !== null && colList[i]['sortIndex'] !== undefined && colList[i]['sortIndex'] > 0 ? colList[i]['sortIndex'] : colList[i].bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                    break;
                                case 2:
                                    colList[i].sort = 2;
                                    colList[i]['sortIndex'] = colList[i]['sortIndex'] !== null && colList[i]['sortIndex'] !== undefined && colList[i]['sortIndex'] > 0 ? colList[i]['sortIndex'] : colList[i].bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                    break;
                            }
                        }
                    }
                    params.colIndex++;
                }
            }
        }
    };
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    SpreadStyleUtils.prototype.recursiveIsRedColumn = /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    function (col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveIsRedColumn(null, col.childList, params);
            }
            else {
                if (col.isRed) {
                    params.isRedColumns.push({
                        colIndex: params.colIndex
                    });
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveIsRedColumn(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].isRed) {
                        params.isRedColumns.push({
                            colIndex: params.colIndex
                        });
                    }
                    params.colIndex++;
                }
            }
        }
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    SpreadStyleUtils.prototype.isNumber = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (parseFloat(val).toString() == "NaN") {
            return false;
        }
        else {
            return true;
        }
    };
    return SpreadStyleUtils;
}());
export { SpreadStyleUtils };
if (false) {
    /** @type {?} */
    SpreadStyleUtils.prototype.dataStyleArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.dataRowHeightArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.dataColInfoArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerStyleArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerRowHeightArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerSpansArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.footerDataArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.hyperLinkQuery;
    /**
     * @type {?}
     * @private
     */
    SpreadStyleUtils.prototype.autoFitColumnIndex;
    /** @type {?} */
    SpreadStyleUtils.prototype.type;
    /** @type {?} */
    SpreadStyleUtils.prototype.queryId;
    /** @type {?} */
    SpreadStyleUtils.prototype.valueHeaderRowCount;
    /** @type {?} */
    SpreadStyleUtils.prototype.valueHeaderRowArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.rowHeadersColumnCount;
    /** @type {?} */
    SpreadStyleUtils.prototype.rowHeaderRowArray;
    /** @type {?} */
    SpreadStyleUtils.prototype.rowHeaderInfo;
    /** @type {?} */
    SpreadStyleUtils.prototype.valInfo;
    /** @type {?} */
    SpreadStyleUtils.prototype.joinParam;
    /** @type {?} */
    SpreadStyleUtils.prototype.jointsearchInfoList;
    /** @type {?} */
    SpreadStyleUtils.prototype.cache;
    /** @type {?} */
    SpreadStyleUtils.prototype.loadService;
    /** @type {?} */
    SpreadStyleUtils.prototype.msgService;
    /** @type {?} */
    SpreadStyleUtils.prototype.localizeService;
    /** @type {?} */
    SpreadStyleUtils.prototype.schemaManager;
    /** @type {?} */
    SpreadStyleUtils.prototype.formErrorService;
    /** @type {?} */
    SpreadStyleUtils.prototype.lcpService;
}
//# sourceMappingURL=data:application/json;base64,