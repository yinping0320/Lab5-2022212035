/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { RtfServices } from "@qdp/common";
import { ServicesUtils } from "./services.utils";
var ParameterUtils = /** @class */ (function () {
    function ParameterUtils(_queryId, _funcInfoCache, _serviceCache) {
        this.queryId = _queryId;
        this.funcInfoCache = _funcInfoCache;
        this.cache = _serviceCache.cacheService;
    }
    /**
     * 创建参数
     * @param option 参数配置项
     * { queryId: 查询ID, controlType: 查询类型：list  treelist  crosstab, schemaId: 方案ID, qoManagerCode: 查询对象编号, extendCond: 扩展条件, pageIndex: 页索引, pageSize: 分页大小, filterCondition: 结果过滤条件, printIntegration: 打印配置, excelExportName: 导出Excel文件名 }
     * @returns
     */
    /**
     * 创建参数
     * @param {?} option 参数配置项
     * { queryId: 查询ID, controlType: 查询类型：list  treelist  crosstab, schemaId: 方案ID, qoManagerCode: 查询对象编号, extendCond: 扩展条件, pageIndex: 页索引, pageSize: 分页大小, filterCondition: 结果过滤条件, printIntegration: 打印配置, excelExportName: 导出Excel文件名 }
     * @return {?}
     */
    ParameterUtils.prototype.createParameters = /**
     * 创建参数
     * @param {?} option 参数配置项
     * { queryId: 查询ID, controlType: 查询类型：list  treelist  crosstab, schemaId: 方案ID, qoManagerCode: 查询对象编号, extendCond: 扩展条件, pageIndex: 页索引, pageSize: 分页大小, filterCondition: 结果过滤条件, printIntegration: 打印配置, excelExportName: 导出Excel文件名 }
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var tabId = this.bindCloseTabEvent();
        /** @type {?} */
        var entityData;
        if (this.cache.get(tabId)) {
            entityData = JSON.stringify(this.cache.get(tabId));
        }
        else if (this.cache.get(option.queryId)) {
            entityData = JSON.stringify(this.cache.get(option.queryId));
        }
        else {
            entityData = JSON.stringify({ 'id': 'undefined_null' });
        }
        /** @type {?} */
        var params = {
            entityData: entityData,
            extendCond: this.cache.get(tabId + 'extendCond') ? this.cache.get(tabId + 'extendCond') : option.extendCond,
            pageIndex: option.pageIndex ? option.pageIndex : 0,
            pageSize: option.pageSize ? option.pageSize : 0,
            schemaId: option.schemaId && option.schemaId !== 'prefab' ? option.schemaId : '1',
            filterCond: option.filterCondition ? option.filterCondition : (this.cache.get(tabId + 'filtercondition') ? this.cache.get(tabId + 'filtercondition') : ''),
            qoManagerCode: option.qoManagerCode ? option.qoManagerCode : '',
            voCode: option.voId ? option.voId : '',
        };
        try {
            /** @type {?} */
            var parameterEntityData = JSON.parse(entityData);
            if (parameterEntityData.hasOwnProperty('@filterExpressionString@')) {
                /** @type {?} */
                var filterExpression = params && params.filterCond ? JSON.parse(params.filterCond) : null;
                if (!filterExpression) {
                    params.filterCond = parameterEntityData['@filterExpressionString@'];
                }
                else {
                    /** @type {?} */
                    var advanceFilterExpression = JSON.parse(parameterEntityData['@filterExpressionString@']);
                    advanceFilterExpression.expressItems = advanceFilterExpression.expressItems.concat(filterExpression.expressItems);
                    params.filterCond = JSON.stringify(advanceFilterExpression);
                }
            }
        }
        catch (e) {
        }
        if (option.controlType) {
            params['controlType'] = option.controlType;
        }
        if (option.excelExportName) {
            params['excelExportName'] = option.excelExportName;
        }
        if (option.printIntegration) {
            params['printIntegration'] = option.printIntegration ? JSON.stringify(option.printIntegration) : '';
        }
        if (option.multiSheets) {
            params['multiSheets'] = option.multiSheets && option.multiSheets.length ? option.multiSheets.join(",") : '';
        }
        if (option.curSheet) {
            params['curSheet'] = option.curSheet;
        }
        if (option.multiSheetsSchemaIds) {
            params['multiSheetsSchemaIds'] = option.multiSheetsSchemaIds ? JSON.stringify(option.multiSheetsSchemaIds) : '';
        }
        if (option.groupType) {
            params['groupType'] = option.groupType ? option.groupType : '';
        }
        if (option.queryId) {
            params['queryId'] = option.queryId ? option.queryId : '';
        }
        if (RtfServices.getMenuParameter('enableQOExtends')) {
            params['enableQOExtends'] = RtfServices.getMenuParameter('enableQOExtends');
            params['qoId'] = ServicesUtils.getServices(RtfServices.getTabId(this.queryId) + 'qoId');
        }
        return params;
    };
    /**
     * 绑定功能菜单关闭事件
     */
    /**
     * 绑定功能菜单关闭事件
     * @return {?}
     */
    ParameterUtils.prototype.bindCloseTabEvent = /**
     * 绑定功能菜单关闭事件
     * @return {?}
     */
    function () {
        try {
            /** @type {?} */
            var tab_1 = gspframeworkService.rtf.session.getCommonVariable();
            gspframeworkService.rtf.frmEvent.eventListener('beforeFuncCloseEvent', this.clearParametersCache.bind(this), tab_1);
            /** @type {?} */
            var index = this.funcInfoCache.funcIds.findIndex((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return el === tab_1.tabId; }));
            if (index < 0) {
                this.funcInfoCache.funcIds.push(tab_1.tabId);
            }
            return tab_1.tabId + RtfServices.getInSuiteFrmUUID();
        }
        catch (e) {
        }
    };
    /**
     * 清除查询缓存
     */
    /**
     * 清除查询缓存
     * @return {?}
     */
    ParameterUtils.prototype.clearParametersCache = /**
     * 清除查询缓存
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tabId = arguments[0].tabId;
        if (this.queryId) {
            this.cache.set(this.queryId, '');
        }
        this.cache.set(tabId, '');
        this.cache.set(tabId + 'renderMode', '');
        /** @type {?} */
        var index = this.funcInfoCache.funcIds.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return el === tabId; }));
        if (index >= 0) {
            this.funcInfoCache.funcIds.splice(index, 1);
            index = this.funcInfoCache.firstLoadCache.findIndex((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return el === tabId; }));
            if (index >= 0) {
                this.funcInfoCache.firstLoadCache.splice(index, 1);
            }
            gspframeworkService.rtf.func.close(arguments[0]);
        }
    };
    return ParameterUtils;
}());
export { ParameterUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParameterUtils.prototype.cache;
    /** @type {?} */
    ParameterUtils.prototype.queryId;
    /** @type {?} */
    ParameterUtils.prototype.funcInfoCache;
}
//# sourceMappingURL=data:application/json;base64,