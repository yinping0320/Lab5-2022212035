import { NotifyService } from '@farris/ui-notify';
import { CloudprintService } from '@gsp-svc/cloudprint';
import { switchMap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { LocalizeService, DEFAULT_LANGUAGE } from '@qdp/localize';
import { filter } from 'lodash-es';
import { FormErrorService } from '@farris/command-services';
import { CacheService } from '@ecp-caf/caf-common';
import { of, Subject } from 'rxjs';
import { Injectable, Injector, Optional, Component, Input, LOCALE_ID, ElementRef, Inject, Renderer2, HostBinding, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { InputGroupModule } from '@farris/ui-input-group';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { RtfServices, EventBus, SchemaManagerService, LcpService, DataRenderExtendService, JSONUtils, FilterManagerService, JointSearchManagerService, QDPCacheUtil, DndListModule } from '@qdp/common';
import { ComboListModule } from '@farris/ui-combo-list';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ServicesUtils {
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    static setServices(key, value) {
        ServicesUtils.ServicesMap.set(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static getServices(key) {
        return ServicesUtils.ServicesMap.get(key);
    }
}
ServicesUtils.ServicesMap = new Map();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParameterUtils {
    /**
     * @param {?=} _queryId
     * @param {?=} _funcInfoCache
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _funcInfoCache, _serviceCache) {
        this.queryId = _queryId;
        this.funcInfoCache = _funcInfoCache;
        this.cache = _serviceCache.cacheService;
    }
    /**
     * 创建参数
     * @param {?} option 参数配置项
     * { queryId: 查询ID, controlType: 查询类型：list  treelist  crosstab, schemaId: 方案ID, qoManagerCode: 查询对象编号, extendCond: 扩展条件, pageIndex: 页索引, pageSize: 分页大小, filterCondition: 结果过滤条件, printIntegration: 打印配置, excelExportName: 导出Excel文件名 }
     * @return {?}
     */
    createParameters(option) {
        /** @type {?} */
        const tabId = this.bindCloseTabEvent();
        /** @type {?} */
        let entityData;
        if (this.cache.get(tabId)) {
            entityData = JSON.stringify(this.cache.get(tabId));
        }
        else if (this.cache.get(option.queryId)) {
            entityData = JSON.stringify(this.cache.get(option.queryId));
        }
        else {
            entityData = JSON.stringify({ 'id': 'undefined_null' });
        }
        /** @type {?} */
        const params = {
            entityData: entityData,
            extendCond: this.cache.get(tabId + 'extendCond') ? this.cache.get(tabId + 'extendCond') : option.extendCond,
            pageIndex: option.pageIndex ? option.pageIndex : 0,
            pageSize: option.pageSize ? option.pageSize : 0,
            schemaId: option.schemaId && option.schemaId !== 'prefab' ? option.schemaId : '1',
            filterCond: option.filterCondition ? option.filterCondition : (this.cache.get(tabId + 'filtercondition') ? this.cache.get(tabId + 'filtercondition') : ''),
            qoManagerCode: option.qoManagerCode ? option.qoManagerCode : '',
            voCode: option.voId ? option.voId : '',
        };
        try {
            /** @type {?} */
            const parameterEntityData = JSON.parse(entityData);
            if (parameterEntityData.hasOwnProperty('@filterExpressionString@')) {
                /** @type {?} */
                const filterExpression = params && params.filterCond ? JSON.parse(params.filterCond) : null;
                if (!filterExpression) {
                    params.filterCond = parameterEntityData['@filterExpressionString@'];
                }
                else {
                    /** @type {?} */
                    const advanceFilterExpression = JSON.parse(parameterEntityData['@filterExpressionString@']);
                    advanceFilterExpression.expressItems = advanceFilterExpression.expressItems.concat(filterExpression.expressItems);
                    params.filterCond = JSON.stringify(advanceFilterExpression);
                }
            }
        }
        catch (e) {
        }
        if (option.controlType) {
            params['controlType'] = option.controlType;
        }
        if (option.excelExportName) {
            params['excelExportName'] = option.excelExportName;
        }
        if (option.printIntegration) {
            params['printIntegration'] = option.printIntegration ? JSON.stringify(option.printIntegration) : '';
        }
        if (option.multiSheets) {
            params['multiSheets'] = option.multiSheets && option.multiSheets.length ? option.multiSheets.join(",") : '';
        }
        if (option.curSheet) {
            params['curSheet'] = option.curSheet;
        }
        if (option.multiSheetsSchemaIds) {
            params['multiSheetsSchemaIds'] = option.multiSheetsSchemaIds ? JSON.stringify(option.multiSheetsSchemaIds) : '';
        }
        if (option.groupType) {
            params['groupType'] = option.groupType ? option.groupType : '';
        }
        if (option.queryId) {
            params['queryId'] = option.queryId ? option.queryId : '';
        }
        if (RtfServices.getMenuParameter('enableQOExtends')) {
            params['enableQOExtends'] = RtfServices.getMenuParameter('enableQOExtends');
            params['qoId'] = ServicesUtils.getServices(RtfServices.getTabId(this.queryId) + 'qoId');
        }
        return params;
    }
    /**
     * 绑定功能菜单关闭事件
     * @return {?}
     */
    bindCloseTabEvent() {
        try {
            /** @type {?} */
            const tab = gspframeworkService.rtf.session.getCommonVariable();
            gspframeworkService.rtf.frmEvent.eventListener('beforeFuncCloseEvent', this.clearParametersCache.bind(this), tab);
            /** @type {?} */
            const index = this.funcInfoCache.funcIds.findIndex((/**
             * @param {?} el
             * @return {?}
             */
            el => el === tab.tabId));
            if (index < 0) {
                this.funcInfoCache.funcIds.push(tab.tabId);
            }
            return tab.tabId + RtfServices.getInSuiteFrmUUID();
        }
        catch (e) {
        }
    }
    /**
     * 清除查询缓存
     * @return {?}
     */
    clearParametersCache() {
        /** @type {?} */
        const tabId = arguments[0].tabId;
        if (this.queryId) {
            this.cache.set(this.queryId, '');
        }
        this.cache.set(tabId, '');
        this.cache.set(tabId + 'renderMode', '');
        /** @type {?} */
        let index = this.funcInfoCache.funcIds.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        el => el === tabId));
        if (index >= 0) {
            this.funcInfoCache.funcIds.splice(index, 1);
            index = this.funcInfoCache.firstLoadCache.findIndex((/**
             * @param {?} el
             * @return {?}
             */
            el => el === tabId));
            if (index >= 0) {
                this.funcInfoCache.firstLoadCache.splice(index, 1);
            }
            gspframeworkService.rtf.func.close(arguments[0]);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RenderExtendsUtils {
    /**
     * @param {?} _queryId
     */
    constructor(_queryId) {
        this.init(_queryId);
    }
    /**
     * @private
     * @param {?} _queryId
     * @return {?}
     */
    init(_queryId) {
        this.dataRenderExtendService = ServicesUtils.getServices('dataRenderExtendService' + _queryId);
        this.renderExtends = ServicesUtils.getServices('renderExtends' + _queryId);
    }
    /**
     * 执行查询扩展
     * @param {?} extendCode
     * @param {?} extendName
     * @param {?} extendData
     * @param {?} control
     * @return {?}
     */
    runRenderExtends(extendCode, extendName, extendData, control) {
        /** @type {?} */
        const $event = this.createRenderExtendParams({
            eventCode: extendCode,
            // 'beforeQueryData',
            eventName: extendName,
            // this.localizeService.getValue('spread.message.extend.query.before'),
            data: extendData,
            // params,
            spread: control,
            // obj.spread
            control: control // obj.spread
        });
        if (extendCode === 'beforeQueryData') {
            if (this.dataRenderExtendService && this.dataRenderExtendService.beforeQueryData) {
                this.dataRenderExtendService.beforeQueryData($event);
            }
            else {
                if (this.renderExtends && this.renderExtends.beforeQueryData) {
                    this.renderExtends.beforeQueryData($event);
                }
            }
        }
        else if (extendCode === 'beforeLoadData') {
            if (this.dataRenderExtendService && this.dataRenderExtendService.beforeLoadData) {
                this.dataRenderExtendService.beforeLoadData($event);
            }
            else {
                if (this.renderExtends && this.renderExtends.beforeQueryData) {
                    this.renderExtends.beforeLoadData($event);
                }
            }
        }
        else if (extendCode === 'afterLoadData') {
            if (this.dataRenderExtendService && this.dataRenderExtendService.afterLoadData) {
                this.dataRenderExtendService.afterLoadData($event);
            }
            else {
                if (this.renderExtends && this.renderExtends.beforeQueryData) {
                    this.renderExtends.afterLoadData($event);
                }
            }
        }
        return $event['data'];
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    createRenderExtendParams(obj) {
        return {
            eventCode: obj.eventCode,
            eventName: obj.eventName,
            data: obj.data,
            control: obj.control,
            spread: obj.spread || undefined
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SchemaUtils {
    /**
     * @param {?} _serviceCache
     */
    constructor(_serviceCache) {
        this.init(_serviceCache);
    }
    /**
     * @private
     * @param {?} _serviceCache
     * @return {?}
     */
    init(_serviceCache) {
        this.schemaManager = _serviceCache.schemaManagerService;
        this.cacheService = _serviceCache.cacheService;
    }
    /**
     * 获取格式方案信息
     * @param {?} option 参数配置项
     * { schemaId: 方案ID, schemaValue: 格式方案（交叉表時快速設置時使用）, controlType: 查询类型：list  treelist  crosstab, queryId: 查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @return {?} 方案列表
     */
    getSchemaInfo(option) {
        /** @type {?} */
        const self = this;
        option.schemaId = option.schemaId === 'prefab' || option.schemaId === '1'
            ? '1'
            : option.schemaValue && option.schemaValue.id && option.controlType === 'crosstab'
                ? option.schemaValue.id
                : option.schemaId;
        if (!option.schemaId) {
            return self.getDefaultSchemaInfo(option);
        }
        else {
            /** @type {?} */
            const organizationId = this.cacheService.get(RtfServices.getTabId(option.queryId) + 'organizationId') || '';
            /** @type {?} */
            const result$ = this.schemaManager.getSchema(option.schemaId, option.queryId, option.queryRelativeUrl, option.groupType, organizationId, option.fromCache);
            return result$.pipe(switchMap((/**
             * @param {?} schemaValue
             * @return {?}
             */
            (schemaValue) => {
                if (schemaValue && schemaValue['id']) {
                    return of(schemaValue);
                }
            })));
        }
    }
    /**
     * 获取默认格式方案
     * @param {?} option 参数配置项
     * { queryId：查询ID, queryRelativeUrl：eapi基础uri, groupType: 方案分组标识 }
     * @return {?} 默认格式方案
     */
    getDefaultSchemaInfo(option) {
        /** @type {?} */
        const organizationId = this.cacheService.get(RtfServices.getTabId(option.queryId) + 'organizationId') || '';
        return this.schemaManager.getDefaultSchema(option.queryId, option.queryRelativeUrl, option.groupType, organizationId);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SpreadStyleUtils {
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _controlType, _jointsearchInfoList, _serviceCache) {
        this.dataStyleArray = [];
        this.dataRowHeightArray = [];
        this.dataColInfoArray = [];
        this.footerStyleArray = [];
        this.footerRowHeightArray = [];
        this.footerSpansArray = [];
        this.footerDataArray = [];
        this.hyperLinkQuery = {};
        this.autoFitColumnIndex = 0;
        this.valueHeaderRowCount = 0; // 值维度数量
        // 值维度数量
        this.valueHeaderRowArray = [];
        this.rowHeadersColumnCount = 0; // 行标题列数
        // 行标题列数
        this.rowHeaderRowArray = [];
        this.joinParam = {};
        this.queryId = _queryId;
        this.type = _controlType;
        this.jointsearchInfoList = _jointsearchInfoList;
        this.cache = _serviceCache.cacheService;
        this.loadService = _serviceCache.loadingService;
        this.msgService = _serviceCache.msgService;
        this.localizeService = _serviceCache.localizeService;
        this.schemaManager = _serviceCache.schemaManagerService;
        this.formErrorService = _serviceCache.formErrorService;
        this.lcpService = _serviceCache.lcpService;
    }
    /**
     * @param {?} schema
     * @param {?} sheet
     * @return {?}
     */
    setAutoFitColumn(schema, sheet) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursionAutoFitColumn(col, null, sheet);
            }));
        }
    }
    /**
     * @private
     * @param {?} column
     * @param {?} childList
     * @param {?} sheet
     * @return {?}
     */
    recursionAutoFitColumn(column, childList, sheet) {
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionAutoFitColumn(null, column.childList, sheet);
            }
            else {
                if (column.autoFit) {
                    sheet.autoFitColumn(this.autoFitColumnIndex);
                }
                this.autoFitColumnIndex += 1;
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (col.childList && col.childList.length) {
                    this.recursionAutoFitColumn(null, col.childList, sheet);
                }
                else {
                    if (col.autoFit) {
                        sheet.autoFitColumn(this.autoFitColumnIndex);
                    }
                    this.autoFitColumnIndex += 1;
                }
            }));
        }
    }
    /**
     * @param {?} sheet
     * @return {?}
     */
    cacheStyle(sheet) {
        this.dataStyleArray = [];
        this.dataRowHeightArray = [];
        this.dataColInfoArray = [];
        this.footerStyleArray = [];
        this.footerRowHeightArray = [];
        this.footerSpansArray = [];
        this.footerDataArray = [];
        // 缓存区域样式信息
        for (let r = 0; r < sheet.getRowCount(); r++) {
            /** @type {?} */
            const columnStyleArray = new Array();
            /** @type {?} */
            const dataArray = new Array();
            for (let c = 0; c < sheet.getColumnCount(); c++) {
                if (r === 0) {
                    /** @type {?} */
                    let formatter = '';
                    if (sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport)) {
                        formatter = sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport);
                    }
                    /** @type {?} */
                    const colHeaderCount = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    const colInfo = {
                        name: sheet.getCell(r, c, GC.Spread.Sheets.SheetArea.viewport).value(),
                        size: sheet.getColumnWidth(c, GC.Spread.Sheets.SheetArea.viewport),
                        visible: sheet.getColumnVisible(c, GC.Spread.Sheets.SheetArea.viewport),
                        resizable: sheet.getColumnResizable(c, GC.Spread.Sheets.SheetArea.viewport),
                        formatter: formatter.indexOf('&') >= 0 ? new MyNumFormatter(formatter) : formatter,
                        displayName: sheet.getCell((colHeaderCount - 1), c, GC.Spread.Sheets.SheetArea.colHeader).value()
                    };
                    this.dataColInfoArray.push(colInfo);
                }
                /** @type {?} */
                let style = sheet.getStyle(r, c, GC.Spread.Sheets.SheetArea.viewport);
                if (style == null) {
                    style = new GC.Spread.Sheets.Style();
                    style.locked = true;
                }
                else {
                    style.locked = true;
                }
                if (style && style.formatter && style.formatter.indexOf('&') >= 0) {
                    style.formatter = new MyNumFormatter(style.formatter);
                }
                columnStyleArray.push(style);
                /** @type {?} */
                const text = sheet.getValue(r, c, GC.Spread.Sheets.SheetArea.viewport)
                    || sheet.getText(r, c, GC.Spread.Sheets.SheetArea.viewport)
                    || '';
                dataArray.push(text);
            }
            if (r === 0) {
                this.dataRowHeightArray.push(sheet.getRowHeight(r));
                this.dataStyleArray.push(columnStyleArray);
            }
            else {
                this.footerRowHeightArray.push(sheet.getRowHeight(r));
                this.footerStyleArray.push(columnStyleArray);
                this.footerDataArray.push(dataArray);
            }
        }
        // 缓存span
        /** @type {?} */
        const spans = sheet.getSpans();
        if (spans && spans.length) {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < spans.length; i++) {
                if (spans[i].row > 0) {
                    this.footerSpansArray.push(spans[i]);
                }
            }
        }
        sheet.deleteRows(1, sheet.getRowCount() - 1);
    }
    /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?=} showZero
     * @return {?}
     */
    applyStyle(sheet, schema, showZero) {
        /** @type {?} */
        let rowCount = sheet.getRowCount();
        /** @type {?} */
        const colCount = sheet.getColumnCount();
        /** @type {?} */
        const footerCount = this.footerRowHeightArray.length;
        sheet.addRows(rowCount, footerCount);
        /** @type {?} */
        let index = 0;
        /** @type {?} */
        const groupFieldCache = [];
        /** @type {?} */
        const groupFieldValueCache = [];
        /** @type {?} */
        const groupRowCache = [];
        /** @type {?} */
        const groupTreeLevel = {};
        /** @type {?} */
        const columns = sheet.toJSON().columns;
        this.getGroupField(groupFieldCache, schema);
        /** @type {?} */
        const formatFieldCache = [];
        this.getFormatField(formatFieldCache, schema);
        this.getIsRedColumns(formatFieldCache, schema);
        /** @type {?} */
        const isRedColumns = {
            colIndex: 0,
            isRedColumns: []
        };
        this.getIsRedColumns(schema, isRedColumns);
        /** @type {?} */
        const sheetColumns = sheet.toJSON().columns;
        for (let r = 0; r < (rowCount + footerCount); r++) {
            if (formatFieldCache && formatFieldCache.length && r < rowCount) {
                formatFieldCache.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    /** @type {?} */
                    const dataItem = sheet.getDataItem(r);
                    /** @type {?} */
                    const precision = dataItem[item.formatField] - 0;
                    /** @type {?} */
                    let numberFormat = item.formatter && (item.formatter.indexOf('#,###') >= 0 || item.formatter.indexOf('#,##0') >= 0) ? '#,##0.' : '0.';
                    if (this.isNumber(precision)) {
                        for (let p = 0; p < precision; p++) {
                            numberFormat += '0';
                        }
                    }
                    /** @type {?} */
                    const formatColIndex = sheetColumns.findIndex((/**
                     * @param {?} el
                     * @return {?}
                     */
                    (el) => el.name == item.sourceField));
                    if (formatColIndex >= 0 && numberFormat != '0.' && numberFormat != '#,##0.') {
                        sheet.getCell(r, formatColIndex).formatter(numberFormat);
                    }
                }));
            }
            for (let c = 0; c < colCount; c++) {
                if (r === 0 && !sheet.getColumnVisible(index)) {
                    index += 1;
                }
                if (r >= rowCount) {
                    if (c === 0) {
                        sheet.setStyle(r, c, this.footerStyleArray[r - rowCount][c]);
                        if (this.footerDataArray && this.footerDataArray.length) {
                            sheet.setValue(r, c, this.footerDataArray[r - rowCount][c]);
                        }
                        sheet.setRowHeight(r, this.footerRowHeightArray[r - rowCount]);
                        if (this.footerSpansArray && this.footerSpansArray.length) {
                            sheet.addSpan(r, this.footerSpansArray[0].col, this.footerSpansArray[0].rowCount, this.footerSpansArray[0].colCount);
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const formatter = sheet.getFormatter(r, c, GC.Spread.Sheets.SheetArea.viewport);
                    if (formatter && formatter.indexOf && formatter.indexOf('/') >= 0 && formatter.indexOf(';') >= 0) {
                        /** @type {?} */
                        const cellValue = this.logicFormat(formatter, sheet.getValue(r, c));
                        sheet.setText(r, c, cellValue);
                    }
                    if (formatter && typeof formatter === 'string' && (formatter.indexOf('yy') >= 0 || formatter.indexOf('MM') >= 0 || formatter.indexOf('dd') >= 0 || formatter.indexOf('HH') >= 0 || formatter.indexOf('mm') >= 0 || formatter.indexOf('ss') >= 0)) {
                        if (sheet.getDataItem(r).hasOwnProperty("qdp_data_flag")) {
                            sheet.setFormatter(r, c, '');
                        }
                    }
                    if (isRedColumns.isRedColumns.findIndex((/**
                     * @param {?} el
                     * @return {?}
                     */
                    el => el.colIndex == c)) >= 0 && this.isNumber(sheet.getCell(r, c).value()) && (sheet.getCell(r, c).value() - 0 < 0)) {
                        sheet.getCell(r, c).foreColor('red');
                    }
                    if (!showZero) {
                        if (!showZero && columns && columns.length) {
                            if (columns[c].name === 'treeLevel' || columns[c].name === 'isDetail') {
                                continue;
                            }
                            if (sheet.getCell(r, c).value() === 0 || sheet.getCell(r, c).value() == '0') {
                                sheet.getCell(r, c).value('');
                            }
                        }
                    }
                }
            }
            if (r < rowCount) {
                // 设置行高
                sheet.setRowHeight(r, this.dataRowHeightArray[0]);
                if (this.type === 'treelist') {
                    /** @type {?} */
                    const level = sheet.getDataItem(r)['treeLevel'];
                    /** @type {?} */
                    const isDetail = sheet.getDataItem(r)['isDetail'];
                    sheet.setCellType(r, index, new TreeCellType(null, false, level, isDetail));
                    sheet.getStyle(r, index).hAlign = 0;
                    sheet.getStyle(r, index).textIndent = level + 2;
                    for (let i = 0; i <= level; i++) {
                        sheet.rowOutlines.group(r, 1);
                    }
                }
                else if (this.type === 'list' && groupFieldCache.length) {
                    /** @type {?} */
                    let filterCondition = {};
                    if (groupRowCache.findIndex((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x === r)) >= 0) {
                        continue;
                    }
                    for (let c = 0; c < colCount; c++) {
                        if (sheet.getDataItem(r).hasOwnProperty("qdp_data_flag") && (sheet.getDataItem(r)["qdp_data_flag"] + '') === (4 + '')) {
                            if (sheet.getFormatter(r, c) && (sheet.getFormatter(r, c).toString().indexOf('y') >= 0 || sheet.getFormatter(r, c).toString().indexOf('d') >= 0 || sheet.getFormatter(r, c).toString().indexOf('M') >= 0)) {
                                sheet.setFormatter(r, c, '');
                            }
                        }
                    }
                    /** @type {?} */
                    const addRowsCache = [];
                    for (let i = 0; i < groupFieldCache.length; i++) {
                        /** @type {?} */
                        const addRowIndex = r + addRowsCache.length;
                        // const groupField = groupFieldCache[i];
                        /** @type {?} */
                        const fieldIndex = this.dataColInfoArray.findIndex((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => x.name === groupFieldCache[i]));
                        filterCondition = {};
                        for (let f = 0; f <= i; f++) {
                            filterCondition[groupFieldCache[f]] = sheet.getDataItem(addRowIndex)[groupFieldCache[f]];
                        }
                        /** @type {?} */
                        const filterResult = filter(groupFieldValueCache, filterCondition);
                        if ((!filterResult || !filterResult.length) && !sheet.getDataItem(addRowIndex).hasOwnProperty("qdp_data_flag")) {
                            // const groupFieldValue = {};
                            // groupFieldValue[groupField] = filterCondition[groupField];
                            groupFieldValueCache.push(filterCondition);
                            /** @type {?} */
                            const style = this.dataStyleArray[0][fieldIndex];
                            style.hAlign = 0;
                            style.cellType = null;
                            style.backColor = '#F4F7FA';
                            sheet.addRows(addRowIndex, 1);
                            sheet.setRowHeight(addRowIndex, this.dataRowHeightArray[0]);
                            sheet.setStyle(addRowIndex, index, style);
                            sheet.getCell(addRowIndex, index).value(filterCondition[groupFieldCache[i]]);
                            sheet.addSpan(addRowIndex, index, 1, (colCount - index));
                            sheet.getCell(addRowIndex, index).textIndent((i + 1) * 2);
                            groupTreeLevel[addRowIndex + ''] = { treeLevel: i, isDetail: 0 };
                            if (i === (groupFieldCache.length - 1)) {
                                groupTreeLevel[(addRowIndex + 1) + ''] = { treeLevel: groupFieldCache.length, isDetail: 1 };
                            }
                            rowCount += 1;
                            addRowsCache.push(i);
                            groupRowCache.push(addRowIndex);
                        }
                        else {
                            if (sheet.getDataItem(addRowIndex).hasOwnProperty("qdp_data_flag") && (sheet.getDataItem(addRowIndex)["qdp_data_flag"] + '') === (3 + '')) {
                                continue;
                            }
                            if (i === (groupFieldCache.length - 1)) {
                                groupTreeLevel[(addRowIndex + 1) + ''] = { treeLevel: groupFieldCache.length, isDetail: 1 };
                            }
                        }
                    }
                }
            }
        }
        for (let r = 0; r < rowCount; r++) {
            if (!groupTreeLevel.hasOwnProperty(r)) {
                break;
            }
            for (let t = 0; t <= groupTreeLevel[r + ''].treeLevel; t++) {
                sheet.rowOutlines.group(r, 1);
            }
            sheet.setCellType(r, index, new TreeCellType(null, false, groupTreeLevel[r + ''].treeLevel, groupTreeLevel[r + ''].isDetail));
        }
        if (this.type !== 'crosstab' && this.getShowFilterRow(schema)) {
            this.filterRow(sheet);
        }
    }
    /**
     * @param {?} groupColCache
     * @param {?} schema
     * @return {?}
     */
    getGroupField(groupColCache, schema) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursionGetGroupColumn(groupColCache, col, null);
            }));
        }
    }
    /**
     * @param {?} schema
     * @param {?} params
     * @return {?}
     */
    getIsRedColumns(schema, params) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursiveIsRedColumn(col, null, params);
            }));
        }
    }
    /**
     * @param {?} fieldCache
     * @param {?} schema
     * @return {?}
     */
    getFormatField(fieldCache, schema) {
        if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
            this.autoFitColumnIndex = 0;
            schema.schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                this.recursionGetFormatColumn(fieldCache, col, null);
            }));
        }
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    getShowHeaderSort(schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.showHeaderSort != null && schema.schemaValue.otherOption.showHeaderSort != undefined) {
                return schema.schemaValue.otherOption.showHeaderSort;
            }
            return true;
        }
        catch (e) {
            return true;
        }
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    getShowFilterRow(schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.showFilterRow != null && schema.schemaValue.otherOption.showFilterRow != undefined) {
                return schema.schemaValue.otherOption.showFilterRow;
            }
            return true;
        }
        catch (e) {
            return true;
        }
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    getMergeCell(schema) {
        try {
            if (schema && schema.schemaValue && schema.schemaValue.otherOption && schema.schemaValue.otherOption.mergeCell != null && schema.schemaValue.otherOption.mergeCell != undefined) {
                return schema.schemaValue.otherOption.mergeCell;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @private
     * @param {?} fieldCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    recursionGetFormatColumn(fieldCache, column, childList) {
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionGetFormatColumn(fieldCache, null, column.childList);
            }
            else {
                if (column.formatType == 1 && column.formatField) {
                    fieldCache.push({ sourceField: column.bindField, formatField: column.formatField, formatter: column.formattor });
                }
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (col.childList && col.childList.length) {
                    this.recursionGetFormatColumn(fieldCache, null, col.childList);
                }
                else {
                    if (col.formatType == 1 && col.formatField) {
                        fieldCache.push({ sourceField: col.bindField, formatField: col.formatField, formatter: col.formattor });
                    }
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} groupColCache
     * @param {?} column
     * @param {?} childList
     * @return {?}
     */
    recursionGetGroupColumn(groupColCache, column, childList) {
        if (column) {
            if (column.childList && column.childList.length) {
                this.recursionGetGroupColumn(groupColCache, null, column.childList);
            }
            else {
                if (column.isGroup) {
                    groupColCache.push(column.bindField);
                }
            }
        }
        else {
            childList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                if (col.childList && col.childList.length) {
                    this.recursionGetGroupColumn(groupColCache, null, col.childList);
                }
                else {
                    if (col.isGroup) {
                        groupColCache.push(col.bindField);
                    }
                }
            }));
        }
    }
    /**
     * @param {?} formattor
     * @param {?} cellValue
     * @return {?}
     */
    logicFormat(formattor, cellValue) {
        /** @type {?} */
        const str = formattor.split(';');
        /** @type {?} */
        const real = str[0].split('/');
        /** @type {?} */
        const disp = str[1].split('/');
        for (let i = 0; i < real.length; i++) {
            // tslint:disable-next-line:triple-equals
            if (real[i] == (cellValue + '')) {
                cellValue = disp[i];
                break;
            }
        }
        return cellValue;
    }
    /**
     * @param {?} sheet
     * @return {?}
     */
    filterRow(sheet) {
        sheet.addRows(0, 1);
        for (let i = 0; i < sheet.getRowCount(); i++) {
            sheet.getCell(i, 0, GC.Spread.Sheets.SheetArea.rowHeader).value(i == 0 ? '' : i);
        }
        sheet.setRowHeight(0, this.dataRowHeightArray[0]);
        for (let i = 0; i < sheet.getColumnCount(); i++) {
            /** @type {?} */
            const s = new GC.Spread.Sheets.Style();
            s.fromJSON(this.dataStyleArray[0][i].toJSON());
            s.locked = false;
            s.formatter = '@';
            sheet.setStyle(0, i, s);
            sheet.setCellType(0, i, new FilterCellType(sheet));
        }
        /** @type {?} */
        const filter$$1 = new GC.Spread.Sheets.Filter.HideRowFilter(new GC.Spread.Sheets.Range(1, 0, sheet.getRowCount(), sheet.getColumnCount()));
        sheet.rowFilter(filter$$1);
        filter$$1.filterButtonVisible(false);
    }
    /**
     * @param {?} spread
     * @param {?} sheet
     * @return {?}
     */
    linkField(spread, sheet) {
        try {
            /** @type {?} */
            const self = this;
            /** @type {?} */
            const rowCount = sheet.getRowCount();
            /** @type {?} */
            const colCount = sheet.getColumnCount();
            // const footerCount = this.footerRowHeightArray.length;
            for (let r = 1; r < (rowCount); r++) {
                /** @type {?} */
                const dataItem = sheet.getDataItem(r);
                if (dataItem.hasOwnProperty('dynamicPropSet') && dataItem.dynamicPropSet.hasOwnProperty('qdp_data_flag')) {
                    continue;
                }
                for (let c = 0; c < colCount; c++) {
                    /** @type {?} */
                    const joinSearch = JSON.parse(this.jointsearchInfoList['joinSearch']);
                    // tslint:disable-next-line:prefer-for-of
                    for (let i = 0; i < joinSearch.length; i++) {
                        /** @type {?} */
                        const el = joinSearch[i];
                        if (el.jointserachdisplaystyle === 2) {
                            if (el.linkfield === this.dataColInfoArray[c].name) {
                                if (!this.hyperLinkQuery[this.queryId]) {
                                    this.hyperLinkQuery[this.queryId] = {};
                                }
                                this.hyperLinkQuery[this.queryId][c + ''] = el;
                                /** @type {?} */
                                const h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                h1.text(h1.format(sheet.getCell(r, c).value(), this.dataColInfoArray[c].formatter));
                                h1.activeOnClick(true);
                                h1.onClickAction((/**
                                 * @return {?}
                                 */
                                function () {
                                    spread.commandManager().execute({
                                        cmd: 'dropdownquery',
                                        self: self
                                    });
                                }));
                                sheet.setCellType(r, c, h1, GC.Spread.Sheets.SheetArea.viewport);
                            }
                        }
                    }
                }
            }
            spread.commandManager().register('dropdownquery', {
                canUndo: true,
                execute: (/**
                 * @param {?} context
                 * @param {?} options
                 * @param {?} isUndo
                 * @return {?}
                 */
                function (context, options, isUndo) {
                    /** @type {?} */
                    const row = context.getActiveSheet().getActiveRowIndex();
                    /** @type {?} */
                    const col = context.getActiveSheet().getActiveColumnIndex();
                    for (const key in options.self.hyperLinkQuery[options.self.queryId]) {
                        if (key === (col + '')) {
                            /** @type {?} */
                            const el = options.self.hyperLinkQuery[options.self.queryId][key];
                            /** @type {?} */
                            let entityParam = { 'id': 'null' };
                            /** @type {?} */
                            const paramMap = new Map();
                            /** @type {?} */
                            const searchparas = JSON.parse(options.self.jointsearchInfoList['jointparam']).filter((/**
                             * @param {?} x
                             * @return {?}
                             */
                            x => x.functionid === el['id']));
                            /** @type {?} */
                            const joinParam = options.self.cache.get(RtfServices.getTabId(options.self.queryId) + 'joinSearch');
                            /** @type {?} */
                            let dataItem = { 'id': 'null' };
                            if (joinParam.controlType === 'crosstab') { // 交叉表
                                // 获取行标题的数据
                                for (let i = joinParam.rowHeaderColInfo.start; i < joinParam.rowHeaderColInfo.end; i++) {
                                    /** @type {?} */
                                    const value = context.getActiveSheet().getValue(row, i, GC.Spread.Sheets.SheetArea.viewport);
                                    /** @type {?} */
                                    const name = context.getActiveSheet().getValue(joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                                    /** @type {?} */
                                    const colInfo = joinParam.colInfos.find((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    (x) => x.dimension === 1 && x.name === name)).bindField;
                                    dataItem[colInfo] = value;
                                }
                                // 获取列标题的数据
                                for (let i = joinParam.colHeaderRowInfo.start; i < joinParam.colHeaderRowInfo.end; i++) {
                                    /** @type {?} */
                                    const value = context.getActiveSheet().getValue(i, col, GC.Spread.Sheets.SheetArea.colHeader);
                                    /** @type {?} */
                                    const colInfo = joinParam.colInfos.filter((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    (x) => x.dimension === 2))[i - joinParam.colHeaderRowInfo.start].bindField;
                                    dataItem[colInfo] = value;
                                }
                                // 获取值标题的数据
                                /** @type {?} */
                                const value = context.getActiveSheet().getValue(row, col, GC.Spread.Sheets.SheetArea.viewport);
                                /** @type {?} */
                                const name = context.getActiveSheet().getValue(joinParam.colHeaderRowInfo.end, col, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                let colInfo = joinParam.colInfos.find((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                (x) => x.dimension === 3 && x.name === name));
                                if (colInfo) {
                                    colInfo = colInfo.bindField;
                                    dataItem[colInfo] = value;
                                }
                            }
                            else {
                                dataItem = context.getActiveSheet().getDataItem(row);
                            }
                            /** @type {?} */
                            const currentSelectedItem = dataItem;
                            if (searchparas.length > 0) {
                                searchparas.forEach((/**
                                 * @param {?} value
                                 * @return {?}
                                 */
                                value => {
                                    if (value.paravaluetype) { // 表达式
                                        if (value.paravalue.indexOf('getParameter(') >= 0) {
                                            /** @type {?} */
                                            const parameterKey = value.paravalue.replace(/'/g, '').replace(/"/g, '').replace(/getParameter\(/g, '').replace(/\)/g, '');
                                            options.self.getQueryParameters(entityParam, paramMap, parameterKey, value.para);
                                        }
                                        else {
                                            entityParam[value.para] = currentSelectedItem[value.paravalue];
                                            paramMap.set(value.para, currentSelectedItem[value.paravalue]);
                                        }
                                    }
                                    else {
                                        entityParam[value.para] = value.paravalue;
                                        paramMap.set(value.para, value.paravalue);
                                    }
                                }));
                            }
                            else {
                                entityParam = currentSelectedItem;
                            }
                            /** @type {?} */
                            const op = {
                                ParentSessionId: options.self.cache.get('session'),
                                EntityParam: entityParam
                            };
                            /** @type {?} */
                            let tabId = '';
                            if (el.searchtype === 'func') {
                                // 联查前
                                /** @type {?} */
                                const openMenuoptions = {
                                    'appType': 'menu',
                                    'funcId': el.functioncode,
                                    'tabId': EventBus.guid(),
                                    'appId': '',
                                    'appEntrance': '',
                                    'entityParams': op.entityParam,
                                    'queryStringParams': paramMap,
                                    'isNewTab': true
                                };
                                tabId = RtfServices.getFuncId(openMenuoptions);
                                options.self.cache.set(tabId ? tabId : options.self.queryId, op.EntityParam);
                                /** @type {?} */
                                const menuSwitchControl = Object.assign({}, openMenuoptions['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
                                openMenuoptions['entityParams'] = menuSwitchControl;
                                // 卡片塞进去params
                                gspframeworkService.rtf.func.openMenu(openMenuoptions);
                            }
                            else if (el.searchtype === 'app') {
                                /** @type {?} */
                                const appOption = {
                                    appType: 'app',
                                    appId: el.functioncode,
                                    appEntrance: el.appEntrance,
                                    funcId: '',
                                    isReload: true,
                                    tabId: EventBus.guid(),
                                    entityParams: op.entityParam,
                                    queryStringParams: paramMap
                                };
                                tabId = RtfServices.getFuncId(appOption);
                                options.self.cache.set(tabId ? tabId : options.queryId, op.EntityParam);
                                /** @type {?} */
                                const menuSwitchControl = Object.assign({}, appOption['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
                                appOption['entityParams'] = menuSwitchControl;
                                gspframeworkService.rtf.func.openMenu(appOption);
                            }
                        }
                    }
                })
            }, null, false, false, false, false);
        }
        catch (e) { }
    }
    /**
     * @param {?} spread
     * @param {?} sheet
     * @param {?} extObj
     * @return {?}
     */
    inSuiteLinkField(spread, sheet, extObj) {
        try {
            /** @type {?} */
            const self = this;
            /** @type {?} */
            let data = null;
            try {
                if (this.lcpService.inSuiteDropDownInfo && typeof this.lcpService.inSuiteDropDownInfo == 'string') {
                    data = JSON.parse(this.lcpService.inSuiteDropDownInfo);
                }
            }
            catch (e) {
                throw e;
            }
            /** @type {?} */
            const rowCount = sheet.getRowCount();
            /** @type {?} */
            const colCount = sheet.getColumnCount();
            /** @type {?} */
            let rowDropDown = true;
            /** @type {?} */
            const cacheRowDropDown = [];
            /** @type {?} */
            const cacheCellDropDown = {};
            // 解析相关数据
            const { click_events: clickEvents, event_data: eventData, double_click_event: dcEvent, double_click_event_params: dcEventParams, rc_event_ids: rcEventIds } = data;
            if (dcEvent && !("{}" == JSON.stringify(dcEvent)) && dcEventParams && !("{}" == JSON.stringify(dcEventParams))) {
                rowDropDown = true;
                for (let key in dcEventParams) {
                    cacheRowDropDown.push(key);
                }
            }
            else if (eventData && !("{}" == JSON.stringify(eventData))) {
                rowDropDown = false;
                for (let key in eventData) {
                    if (eventData[key]) {
                        /** @type {?} */
                        const cellIndex = [];
                        cacheCellDropDown[key] = cellIndex;
                        for (let key1 in eventData[key]) {
                            cacheCellDropDown[key].push(key1);
                        }
                    }
                }
            }
            for (let r = 1; r < (rowCount); r++) {
                /** @type {?} */
                const dataItem = sheet.getDataItem(r);
                if (dataItem.hasOwnProperty('dynamicPropSet') && dataItem.dynamicPropSet.hasOwnProperty('qdp_data_flag')) {
                    continue;
                }
                for (let c = 0; c < colCount; c++) {
                    if (rowDropDown) {
                        for (let i = 0; i < cacheRowDropDown.length; i++) {
                            if (r == (cacheRowDropDown[i] - 0)) {
                                /** @type {?} */
                                const h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                /** @type {?} */
                                const formatter = sheet.getFormatter(r, c);
                                h1.text(h1.format(sheet.getCell(r, c).value(), formatter));
                                h1.activeOnClick(true);
                                h1.onClickAction((/**
                                 * @return {?}
                                 */
                                function () {
                                    spread.commandManager().execute({
                                        cmd: 'dropdownquery',
                                        self: self
                                    });
                                }));
                                sheet.setCellType(r, c, h1, GC.Spread.Sheets.SheetArea.viewport);
                            }
                        }
                    }
                    else {
                        for (let key in cacheCellDropDown) {
                            if ((r + '') === key) {
                                for (let i = 0; i < cacheCellDropDown[key].length; i++) {
                                    /** @type {?} */
                                    const h1 = new GC.Spread.Sheets.CellTypes.HyperLink();
                                    /** @type {?} */
                                    const formatter = sheet.getFormatter(r, cacheCellDropDown[key][i]);
                                    h1.text(h1.format(sheet.getCell(r, cacheCellDropDown[key][i]).value(), formatter));
                                    h1.activeOnClick(true);
                                    h1.onClickAction((/**
                                     * @return {?}
                                     */
                                    function () {
                                        spread.commandManager().execute({
                                            cmd: 'dropdownquery',
                                            self: self
                                        });
                                    }));
                                    sheet.setCellType(r, cacheCellDropDown[key][i], h1, GC.Spread.Sheets.SheetArea.viewport);
                                }
                            }
                        }
                    }
                }
            }
            spread.commandManager().register('dropdownquery', {
                canUndo: true,
                execute: (/**
                 * @param {?} context
                 * @param {?} options
                 * @param {?} isUndo
                 * @return {?}
                 */
                function (context, options, isUndo) {
                    /** @type {?} */
                    const row = context.getActiveSheet().getActiveRowIndex();
                    /** @type {?} */
                    const col = context.getActiveSheet().getActiveColumnIndex();
                    // 双击事件的逻辑
                    /** @type {?} */
                    let event;
                    /** @type {?} */
                    let params;
                    // 行点击数据
                    if (dcEvent && !("{}" == JSON.stringify(dcEvent)) && dcEventParams && !("{}" == JSON.stringify(dcEventParams))) {
                        event = dcEvent;
                        // args.row为行序号，下同
                        params = dcEventParams[row];
                        // 如果eventData数据不为空，并且对应行的数据也不为空
                        // 单元格数据
                    }
                    else if (eventData && !("{}" == JSON.stringify(eventData)) && eventData[row] && !("{}" == JSON.stringify(eventData[row]))) {
                        /** @type {?} */
                        let thisEventId;
                        // 如果对应行包含-1，则取-1中的数据, 否则取对应列号的数据
                        // args.col为列序号
                        /** @type {?} */
                        let thisEventData = eventData[row][-1] || eventData[row][col];
                        if (thisEventData && !("{}" == JSON.stringify(thisEventData))) {
                            if (!rcEventIds && rcEventIds.length) {
                                /** @type {?} */
                                const obj = {};
                                for (let key in thisEventData) {
                                    if (rcEventIds.findIndex((/**
                                     * @param {?} el
                                     * @return {?}
                                     */
                                    (el) => el == key)) < 0) {
                                        obj[key] = thisEventData[key];
                                    }
                                }
                                thisEventData = obj;
                            }
                            /** @type {?} */
                            let index = 0;
                            for (let key in thisEventData) {
                                if (index == 0) {
                                    thisEventId = key;
                                }
                                else {
                                    break;
                                }
                                index++;
                            }
                            params = thisEventData[thisEventId];
                        }
                        // 根据event id获取event
                        if (thisEventId != null && thisEventId != undefined) {
                            event = clickEvents[thisEventId] && !("{}" == JSON.stringify(clickEvents[thisEventId])) ? clickEvents[thisEventId].event : {};
                        }
                    }
                    /** @type {?} */
                    let message;
                    if (!("{}" == JSON.stringify(event)) && !("{}" == JSON.stringify(params))) {
                        // 返回数据
                        message = { type: 'cellAction', event, params, defaults: data.defaults };
                    }
                    if (message) {
                        try {
                            extObj.inSuiteWindow().postMessage(message, location.origin);
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                })
            }, null, false, false, false, false);
        }
        catch (e) { }
    }
    /**
     * @private
     * @param {?} entityParam
     * @param {?} paramMap
     * @param {?} parameterKey
     * @param {?} key
     * @return {?}
     */
    getQueryParameters(entityParam, paramMap, parameterKey, key) {
        try {
            /** @type {?} */
            const tab = gspframeworkService.rtf.session.getCommonVariable();
            if (tab && tab.tabId) {
                /** @type {?} */
                const tid = tab.tabId + RtfServices.getInSuiteFrmUUID();
                if (this.cache.get(tid) && this.cache.get(tid)[parameterKey]) {
                    entityParam[key] = this.cache.get(tid)[parameterKey];
                    paramMap.set(key, this.cache.get(tid)[parameterKey]);
                }
            }
        }
        catch (e) {
        }
    }
    /**
     * @param {?} spread
     * @param {?} queryId
     * @return {?}
     */
    bindSelectChanged(spread, queryId) {
        /** @type {?} */
        const self = this;
        spread.bind(GC.Spread.Sheets.Events.SelectionChanging, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            /** @type {?} */
            const tempData = {};
            /** @type {?} */
            const selection = args.newSelections.pop();
            /** @type {?} */
            const sheetArea = args.sheetArea === 0 ? 'sheetCorner' : args.sheetArea === 1 ? 'columnHeader' : args.sheetArea === 2 ? 'rowHeader' : 'viewPort';
            if (selection) {
                tempData['SpreadEvent'] = GC.Spread.Sheets.Events.SelectionChanging;
                tempData['sheetArea'] = sheetArea;
                tempData['row'] = selection.row;
                tempData['column'] = selection.col;
                tempData['rowCount'] = selection.rowCount;
                tempData['colCount'] = selection.colCount;
                this.selectChanging = tempData;
            }
        }));
        spread.bind(GC.Spread.Sheets.Events.CellClick, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            // 联动参数
            /** @type {?} */
            let linkageParams = {};
            for (let rowIndex = 0; rowIndex < this.selectChanging.rowCount; rowIndex++) {
                if (self.joinParam.controlType !== 'crosstab') {
                    /** @type {?} */
                    const dataItem = args.sheet.getDataItem(rowIndex + this.selectChanging.row);
                    linkageParams = dataItem;
                }
                else {
                    if (this.selectChanging.column === -1) {
                        this.selectChanging.colCount = this.selectChanging.colCount + 1;
                    }
                    for (let colIndex = 0; colIndex < this.selectChanging.colCount; colIndex++) {
                        /** @type {?} */
                        const dataItem = {};
                        if (self.joinParam.controlType === 'crosstab') { // 交叉表
                            if (args.sheetArea === 1) {
                                this.selectChanging.row = 0;
                            }
                            if (colIndex + this.selectChanging.column < self.joinParam.rowHeaderColInfo.end) {
                                continue;
                            }
                            // 获取行标题的数据
                            for (let i = self.joinParam.rowHeaderColInfo.start; i < self.joinParam.rowHeaderColInfo.end; i++) {
                                /** @type {?} */
                                const value = args.sheet.getValue(rowIndex + this.selectChanging.row, i, GC.Spread.Sheets.SheetArea.viewport);
                                /** @type {?} */
                                const name = args.sheet.getValue(self.joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                const colInfo = self.joinParam.colInfos.find((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                (x) => x.dimension === 1 && x.name === name)).bindField;
                                dataItem[colInfo] = value;
                            }
                            // 获取列标题的数据
                            for (let i = self.joinParam.colHeaderRowInfo.start; i < self.joinParam.colHeaderRowInfo.end; i++) {
                                /** @type {?} */
                                const value = args.sheet.getValue(i, colIndex + this.selectChanging.column, GC.Spread.Sheets.SheetArea.colHeader);
                                /** @type {?} */
                                const colInfo = self.joinParam.colInfos.filter((/**
                                 * @param {?} x
                                 * @return {?}
                                 */
                                (x) => x.dimension === 2))[i - self.joinParam.colHeaderRowInfo.start].bindField;
                                dataItem[colInfo] = value;
                            }
                            // 获取值标题的数据
                            /** @type {?} */
                            const value = args.sheet.getValue(rowIndex + this.selectChanging.row, colIndex + this.selectChanging.column, GC.Spread.Sheets.SheetArea.viewport);
                            /** @type {?} */
                            const name = args.sheet.getValue(self.joinParam.colHeaderRowInfo.end, colIndex + this.selectChanging.column, GC.Spread.Sheets.SheetArea.colHeader);
                            /** @type {?} */
                            const colInfo = self.joinParam.colInfos.find((/**
                             * @param {?} x
                             * @return {?}
                             */
                            (x) => x.dimension === 3 && x.name === name)).bindField;
                            dataItem[colInfo] = value;
                        }
                        linkageParams = dataItem;
                    }
                }
            }
            // spread 联动事件
            EventBus.dispatch(queryId + '_spread_change', linkageParams);
        }));
    }
    /**
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    setSortCellType(sheet, schema, qdpView) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const header = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
        for (let i = 0; i < sheet.getColumnCount(); i++) {
            /** @type {?} */
            const span = sheet.getSpan(header - 1, i, GC.Spread.Sheets.SheetArea.colHeader);
            if (span && span.rowCount > 1) {
                sheet.setCellType(header - span.rowCount, i, new SortCellType(self.columnSort.bind(self), schema, qdpView), GC.Spread.Sheets.SheetArea.colHeader);
            }
            else {
                sheet.setCellType(header - 1, i, new SortCellType(self.columnSort.bind(self), schema, qdpView), GC.Spread.Sheets.SheetArea.colHeader);
            }
        }
    }
    /**
     * @param {?} sheet
     * @param {?} schema
     * @return {?}
     */
    mergeCell(sheet, schema) {
        if (!this.getMergeCell(schema)) {
            return;
        }
        /** @type {?} */
        const groupFieldCache1 = [];
        this.getGroupField(groupFieldCache1, schema);
        if (groupFieldCache1.length) {
            return;
        }
        /** @type {?} */
        const columnCount = sheet.getColumnCount();
        /** @type {?} */
        const rowCount = sheet.getRowCount();
        /** @type {?} */
        let beginRowIndex = 0;
        if (this.getShowFilterRow(schema)) {
            beginRowIndex = 1;
        }
        // 检查参数
        if (columnCount < 1 || (rowCount - beginRowIndex) < 1) {
            return;
        }
        /** @type {?} */
        const rowSpans = {};
        /** @type {?} */
        let curCellValues = '';
        /** @type {?} */
        let currentName = '';
        /** @type {?} */
        let key = '';
        for (let row = beginRowIndex; row < rowCount; row++) {
            if (sheet.getDataItem(row).hasOwnProperty("qdp_data_flag") &&
                ((sheet.getDataItem(row)["qdp_data_flag"] + '') === (4 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (3 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (2 + '')
                    || (sheet.getDataItem(row)["qdp_data_flag"] + '') === (1 + ''))) {
                continue;
            }
            for (let col = 0; col < columnCount; col++) {
                currentName = sheet.getCell(row, col).value();
                if (col == 0) {
                    key = currentName;
                    if (rowSpans.hasOwnProperty(key)) {
                        rowSpans[key].rowCount = row - rowSpans[key].row + 1;
                    }
                    else {
                        rowSpans[key] = { 'row': row, 'rowCount': 1, 'col': col, 'colCount': 1 };
                    }
                }
                else {
                    curCellValues = '';
                    for (let i = 0; i <= col; i++) {
                        curCellValues += sheet.getCell(row, i).value();
                        curCellValues += "_&_";
                    }
                    if (rowSpans.hasOwnProperty(curCellValues)) {
                        rowSpans[curCellValues].rowCount = row - rowSpans[curCellValues].row + 1;
                    }
                    else {
                        rowSpans[curCellValues] = { 'row': row, 'rowCount': 1, 'col': col, 'colCount': 1 };
                    }
                }
            }
        }
        for (let k in rowSpans) {
            if ((rowSpans[k].rowCount == 1 && rowSpans[k].colCount == 1) == false) {
                sheet.addSpan(rowSpans[k].row, rowSpans[k].col, rowSpans[k].rowCount, rowSpans[k].colCount);
            }
        }
    }
    /**
     * @private
     * @param {?} index
     * @param {?} sheet
     * @param {?} schema
     * @param {?} qdpView
     * @return {?}
     */
    columnSort(index, sheet, schema, qdpView) {
        /** @type {?} */
        const loading = this.loadService.show({ container: 'body' });
        try {
            /** @type {?} */
            const header = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
            if (schema && schema.schemaValue && schema.schemaValue.columnOption && schema.schemaValue.columnOption.colList && schema.schemaValue.columnOption.colList.length) {
                /** @type {?} */
                let cell = null;
                /** @type {?} */
                const span = sheet.getSpan(header - 1, index, GC.Spread.Sheets.SheetArea.colHeader);
                if (span && span.rowCount > 1) {
                    cell = sheet.getCell(header - span.rowCount, index, GC.Spread.Sheets.SheetArea.colHeader);
                }
                else {
                    cell = sheet.getCell(header - 1, index, GC.Spread.Sheets.SheetArea.colHeader);
                }
                if (schema && schema.isPrefab === 1) {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                    return;
                }
                if (schema.isProtected === 1 || schema.isProtected === '1') {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                    return;
                }
                /** @type {?} */
                const colList = schema.schemaValue.columnOption.colList;
                /** @type {?} */
                const params = {
                    index: index,
                    cell: cell,
                    colIndex: 0,
                    sortInfo: { sortIndex: 0, bindField: '' },
                    isText: []
                };
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    this.recursiveColumnSortIndex(colList[i], null, params);
                }
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    this.recursiveColumnSort(colList[i], null, params);
                }
                if (params.isText.length) {
                    loading.close();
                    cell.tag(0);
                    sheet.invalidateLayout();
                    sheet.repaint();
                    this.msgService.warning(params.isText[0] + ' ' + this.localizeService.getValue('ideCmp.schemaManager.message.validate.textColumnSort'));
                    return;
                }
                /** @type {?} */
                const newSchema = JSON.parse(JSON.stringify(schema));
                newSchema.schemaValue.columnOption.colList = colList;
                newSchema.schemaValue = JSON.stringify(newSchema.schemaValue);
                this.schemaManager.saveSchema({ schema: JSON.stringify(newSchema), groupType: qdpView.groupType }, '').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    loading.close();
                    qdpView.initSpread(qdpView.queryId, newSchema.id, qdpView.controlType, qdpView.qoManagerCode, qdpView.pageIndex, qdpView.queryRelativeUrl, qdpView.conditionExpression, qdpView.groupType, qdpView.voId, true);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    loading.close();
                    this.formErrorService.exception(error.Message, error);
                }));
            }
            else {
                loading.close();
                this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                return;
            }
        }
        catch (e) {
            loading.close();
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveColumnSortIndex(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSortIndex(null, col.childList, params);
            }
            else {
                if (col.sort !== 0 && col['sortIndex'] != null && col['sortIndex'] !== undefined && col.sortIndex > params.sortInfo.sortIndex) {
                    params.sortInfo.sortIndex = col['sortIndex'];
                    params.sortInfo.bindField = col.bindField;
                }
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSortIndex(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].sort !== 0 && colList[i]['sortIndex'] != null && colList[i]['sortIndex'] !== undefined && colList[i].sortIndex > params.sortInfo.sortIndex) {
                        params.sortInfo.sortIndex = colList[i]['sortIndex'];
                        params.sortInfo.bindField = colList[i].bindField;
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveColumnSort(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSort(null, col.childList, params);
            }
            else {
                if (params.colIndex === params.index) {
                    if (col.type && col.type.toLowerCase() === 'text') {
                        params.isText.push(col.bindField);
                    }
                    else {
                        switch (params.cell.tag()) {
                            case 0:
                                col.sort = 0;
                                col['sortIndex'] = 0;
                                break;
                            case 1:
                                col.sort = 1;
                                col['sortIndex'] = col['sortIndex'] !== null && col['sortIndex'] !== undefined && col['sortIndex'] > 0 ? col['sortIndex'] : col.bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                break;
                            case 2:
                                col.sort = 2;
                                col['sortIndex'] = col['sortIndex'] !== null && col['sortIndex'] !== undefined && col['sortIndex'] > 0 ? col['sortIndex'] : col.bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                break;
                        }
                    }
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSort(null, colList[i].childList, params);
                }
                else {
                    if (params.colIndex === params.index) {
                        if (colList[i].type && colList[i].type.toLowerCase() === 'text') {
                            params.isText.push(colList[i].bindField);
                        }
                        else {
                            switch (params.cell.tag()) {
                                case 0:
                                    colList[i].sort = 0;
                                    colList[i]['sortIndex'] = 0;
                                    break;
                                case 1:
                                    colList[i].sort = 1;
                                    colList[i]['sortIndex'] = colList[i]['sortIndex'] !== null && colList[i]['sortIndex'] !== undefined && colList[i]['sortIndex'] > 0 ? colList[i]['sortIndex'] : colList[i].bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                    break;
                                case 2:
                                    colList[i].sort = 2;
                                    colList[i]['sortIndex'] = colList[i]['sortIndex'] !== null && colList[i]['sortIndex'] !== undefined && colList[i]['sortIndex'] > 0 ? colList[i]['sortIndex'] : colList[i].bindField === params.sortInfo.bindField ? params.sortInfo.sortIndex : params.sortInfo.sortIndex + 1;
                                    break;
                            }
                        }
                    }
                    params.colIndex++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveIsRedColumn(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveIsRedColumn(null, col.childList, params);
            }
            else {
                if (col.isRed) {
                    params.isRedColumns.push({
                        colIndex: params.colIndex
                    });
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveIsRedColumn(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].isRed) {
                        params.isRedColumns.push({
                            colIndex: params.colIndex
                        });
                    }
                    params.colIndex++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    isNumber(val) {
        if (parseFloat(val).toString() == "NaN") {
            return false;
        }
        else {
            return true;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseRender {
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        this.utils = new Map();
        this.autoFitColumnIndex = 0;
        this.isSchemaSelectChanged = false;
        this.tabId = RtfServices.getTabId(_queryId);
        this.queryId = _queryId;
        this.type = _controlType;
        this.funcInfoCache = _funcInfoCache;
        this.serviceCache = _serviceCache;
        this.baseRenderInit(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache);
    }
    /**
     * @private
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @return {?}
     */
    baseRenderInit(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache) {
        /** @type {?} */
        const parameterUtils = new ParameterUtils(_queryId, _funcInfoCache, this.serviceCache);
        /** @type {?} */
        const schemaUtils = new SchemaUtils(this.serviceCache);
        /** @type {?} */
        const spreadStyleUtils = new SpreadStyleUtils(_queryId, _controlType, _jointsearchInfoList, this.serviceCache);
        /** @type {?} */
        const renderExtendsUtils = new RenderExtendsUtils(_queryId);
        this.msgService = this.serviceCache.msgService;
        this.cache = this.serviceCache.cacheService;
        this.lcpService = this.serviceCache.lcpService;
        this.loadService = this.serviceCache.loadService;
        this.localizeService = this.serviceCache.localizeService;
        this.schemaManager = this.serviceCache.schemaManagerService;
        this.formErrorService = this.serviceCache.formErrorService;
        this.queryId = _queryId;
        this.utils.set('parameter', parameterUtils);
        this.utils.set('schema', schemaUtils);
        this.utils.set('spreadStyle', spreadStyleUtils);
        this.utils.set('renderExtends', renderExtendsUtils);
        this.utils.set('queryId', _queryId);
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getData(params, queryRelativeUrl) {
        this.cache.set(this.queryId + 'param', params);
        return this.lcpService.getData(params, queryRelativeUrl);
    }
    /**
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    changeData(data, value) {
        if (data && data.data && data.dynamicCols && value) {
            if (value.schemaValue.columnOption && value.schemaValue.columnOption.colList && value.schemaValue.columnOption.colList.length) {
                /** @type {?} */
                const columns = value.schemaValue.columnOption.colList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.type === 'enum'));
                if (columns && columns.length > 0) {
                    data.data.forEach((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => {
                        columns.forEach((/**
                         * @param {?} y
                         * @return {?}
                         */
                        y => {
                            /** @type {?} */
                            const orginValue = x[y.bindField];
                            /** @type {?} */
                            let showValue = orginValue;
                            if (data.resultEnumItems) {
                                /** @type {?} */
                                const resultEnumItem = data.resultEnumItems.find((/**
                                 * @param {?} resultEnumItem
                                 * @return {?}
                                 */
                                resultEnumItem => resultEnumItem.enumName === y.bindField));
                                if (resultEnumItem) {
                                    /** @type {?} */
                                    const findShowValue = resultEnumItem.resultEnumInfoList.find((/**
                                     * @param {?} resultEnum
                                     * @return {?}
                                     */
                                    resultEnum => resultEnum.key === orginValue));
                                    if (findShowValue) {
                                        showValue = y.showType === '0' ? findShowValue.key : y.showType === '1' ? findShowValue.code : findShowValue.name;
                                    }
                                }
                            }
                            x[y.bindField] = showValue;
                        }));
                    }));
                }
            }
        }
    }
    /**
     * 二开人员自定义格式方案处理
     * @param {?} data
     * @param {?} obj
     * @return {?}
     */
    operateCustomFormatSchema(data, obj) {
        if (data.customFormatScheme) {
            obj.customFormatScheme = data.customFormatScheme;
            this.schemaManager.customSchema[obj.groupType ? obj.groupType : obj.queryId] = data.customFormatScheme;
            /** @type {?} */
            let customSchema = null;
            if (obj.schemaId === '1') {
                customSchema = this.schemaManager.mergeCustomSchema(obj.groupType ? obj.groupType : obj.queryId, obj.queryId);
            }
            if (customSchema && customSchema.schemaValue) {
                ServicesUtils.setServices(RtfServices.getTabId(obj.queryId) + 'customScheme', JSON.stringify(customSchema.schemaValue));
            }
        }
    }
    /**
     * 处理分页信息
     * @param {?} obj
     * @param {?} params
     * @return {?}
     */
    operatePagination(obj, params) {
        /** @type {?} */
        const self = this;
        if (obj.controlType === 'list') {
            /** @type {?} */
            let pageSize = 0;
            if (obj.schemaId !== '1' && self.schemaManager.schemaList && self.schemaManager.schemaList[obj.schemaId]) {
                if (typeof self.schemaManager.schemaList[obj.schemaId].schemaValue === "string") {
                    self.schemaManager.schemaList[obj.schemaId].schemaValue = JSON.parse(self.schemaManager.schemaList[obj.schemaId].schemaValue);
                }
                if (self.schemaManager.schemaList[obj.schemaId].schemaValue.otherOption.loadDataType !== 0) {
                    pageSize = self.schemaManager.schemaList[obj.schemaId].schemaValue.otherOption.pageSize;
                }
            }
            else {
                if (obj.schemaId === '1' && self.schemaManager.preSchema && self.schemaManager.preSchema.schemaValue.otherOption.loadDataType !== 0) {
                    pageSize = self.schemaManager.preSchema.schemaValue.otherOption.pageSize;
                }
            }
            if (pageSize !== 0) {
                params['pageSize'] = pageSize;
                params['pageIndex'] = !obj.pageIndex ? 1 : obj.pageIndex;
            }
        }
    }
    /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    titleVariablesReplace(sheet, data) {
        /** @type {?} */
        const colCount = sheet.getColumnCount(GC.Spread.Sheets.SheetArea.colHeader);
        /** @type {?} */
        const rowCount = sheet.getRowCount(GC.Spread.Sheets.SheetArea.colHeader);
        if (data && data.variables) {
            for (let r = 0; r < rowCount; r++) {
                for (let c = 0; c < colCount; c++) {
                    sheet.setValue(r, c, this.variablesReplace(sheet.getValue(r, c, GC.Spread.Sheets.SheetArea.colHeader), data), GC.Spread.Sheets.SheetArea.colHeader);
                }
            }
        }
    }
    /**
     * @param {?} sheet
     * @param {?} data
     * @return {?}
     */
    footerVariablesReplace(sheet, data) {
        /** @type {?} */
        const rowCount = sheet.getRowCount();
        /** @type {?} */
        const colCount = sheet.getColumnCount();
        if (this.utils.get('spreadStyle').footerDataArray && this.utils.get('spreadStyle').footerDataArray.length) {
            for (let r = 0; r < this.utils.get('spreadStyle').footerDataArray.length; r++) {
                for (let c = 0; c < colCount; c++) {
                    sheet.setValue(r + (rowCount - this.utils.get('spreadStyle').footerDataArray.length), c, this.variablesReplace(this.utils.get('spreadStyle').footerDataArray[r][c], data));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} cellValue
     * @param {?} data
     * @return {?}
     */
    variablesReplace(cellValue, data) {
        if (data && data.variables) {
            Object.keys(data.variables).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                /** @type {?} */
                const reg = new RegExp(key, 'g');
                if (cellValue) {
                    cellValue = cellValue.replace(reg, data.variables[key]);
                }
            }));
        }
        return cellValue;
    }
    /**
     * @param {?} spread
     * @param {?} errmsg
     * @return {?}
     */
    errorHandle(spread, errmsg) {
        if (spread.getActiveSheet()) {
            spread.removeSheet(0);
        }
        spread.options.tabStripVisible = false;
        this.msgService.warning(errmsg);
        return;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CrosstabRender extends BaseRender {
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        super(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache);
        this.crosstabInit();
    }
    /**
     * @private
     * @return {?}
     */
    crosstabInit() {
    }
    /**
     * 渲染
     * @param {?} obj 参数配置项
     * @return {?}
     */
    render(obj) {
        /** @type {?} */
        const self = this;
        this.queryId = obj.queryId;
        obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
        this.utils.get('schema').getSchemaInfo(obj).subscribe((/**
         * @param {?} schemaValue
         * @return {?}
         */
        (schemaValue) => {
            if (schemaValue) {
                obj['schemaId'] = schemaValue.id;
                obj['schemaValue'] = schemaValue;
                // this.currentSchemaValueChanger.next(schemaValue);
                EventBus.dispatch('schemaValueChanged', schemaValue);
                /** @type {?} */
                let delay = schemaValue.schemaValue.otherOption.delay;
                /** @type {?} */
                const interval = schemaValue.schemaValue.otherOption.interval;
                /** @type {?} */
                const index = self.funcInfoCache.firstLoadCache.findIndex((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el === this.tabId));
                /** @type {?} */
                const firstLoad = schemaValue.schemaValue.otherOption.firstLoad;
                if (index < 0 && this.isSchemaSelectChanged === false) {
                    if (firstLoad === false) {
                        self.funcInfoCache.firstLoadCache.push(this.tabId);
                        obj.loading.close();
                        if (obj.spread.getActiveSheet()) {
                            obj.spread.getActiveSheet().deleteRows(0, obj.spread.getActiveSheet().getRowCount());
                            obj.spread.getActiveSheet().options.colHeaderVisible = false;
                            obj.spread.invalidateLayout();
                            obj.spread.repaint();
                        }
                        return;
                    }
                }
                if (!delay) {
                    delay = 0;
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.getRenderDataForCrosstab.call(this, Object.assign({}, obj));
                    if (interval > 0) {
                        setInterval((/**
                         * @return {?}
                         */
                        () => {
                            this.getRenderDataForCrosstab.call(this, Object.assign({}, obj));
                        }), interval * 1000);
                    }
                }), delay * 1000);
            }
            else {
                obj['schemaId'] = '1';
                this.getRenderDataForCrosstab.call(this, Object.assign({}, obj));
            }
        }));
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    getRenderDataForCrosstab(obj) {
        /** @type {?} */
        const self = this;
        obj.schemaId = obj.schemaId ? obj.schemaId : (obj.schemaValue && obj.schemaValue.id ? obj.schemaValue.id : '1');
        if (!obj.formData) {
            /** @type {?} */
            let params = this.utils.get('parameter').createParameters(Object.assign({}, obj, { pageIndex: 0, pageSize: 0 }));
            params['queryId'] = obj.queryId ? obj.queryId : '';
            // 查询数据前事件
            params = this.utils.get('renderExtends').runRenderExtends('beforeQueryData', this.localizeService.getValue('spread.message.extend.query.before'), params, obj.spread);
            try {
                this.cache.set(self.tabId, JSON.parse(params['entityData']));
                this.cache.set(self.tabId + 'extendCond', params['extendCond']);
            }
            catch (e) { }
            self.lcpService.getCol(params, obj.queryRelativeUrl).subscribe((/**
             * @param {?} resultData
             * @return {?}
             */
            resultData => {
                /** @type {?} */
                const dynamicColumns = (resultData && resultData.dynamicCols) || [];
                self.initJoinParams(obj, dynamicColumns);
                self.schemaManager.setColInfo(dynamicColumns);
                if (obj.schemaId === '1' || !obj.schemaId) {
                    obj.loading.close();
                    return self.errorHandle(obj.spread, this.localizeService.getValue('spread.message.validate.schemaInfo'));
                }
                self.lcpService.getCrosstabTemplate(params, obj.queryRelativeUrl).subscribe((/**
                 * @param {?} template
                 * @return {?}
                 */
                (template) => {
                    if (!template || !template.sheets || !template.sheets.sheet1 || !template.sheets.sheet1.data || !template.sheets.sheet1.data.dataTable || !template.sheets.sheet1.data.dataTable['0']) {
                        obj.loading.close();
                        return self.errorHandle(obj.spread, this.localizeService.getValue('spread.message.validate.nodata'));
                    }
                    self.renderCrossTable(Object.assign({}, obj, { template }));
                    /** @type {?} */
                    const event = RtfServices.getMenuSwitchControlEvent();
                    if (event && typeof event === 'object') {
                        event.next('ok');
                    }
                    obj.loading.close();
                    this.utils.get('spreadStyle').bindSelectChanged(obj.spread, obj.queryId);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    self.formErrorService.exception(error.Message, error);
                    obj.loading.close();
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                self.formErrorService.exception(error.Message, error);
                obj.loading.close();
            }));
            this.cache.set('schema_schemaid' + obj.queryId, obj.schemaId);
        }
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    renderCrossTable(obj) {
        obj.spread.suspendEvent();
        obj.spread.suspendPaint();
        if (obj.template) {
            obj.spread.fromJSON(obj.template);
            obj.spread.getActiveSheet().rowOutlines.direction(GC.Spread.Sheets.Outlines.OutlineDirection.backward);
            /** @type {?} */
            const row = obj.spread.getActiveSheet().getRowCount();
            for (let i = 0; i < row; i++) {
                /** @type {?} */
                const cellType = obj.spread.getActiveSheet().getCellType(i, 0);
                if (cellType && cellType.typeName === 'TreeCellType') {
                    /** @type {?} */
                    const level = cellType.level;
                    for (let r = 0; r <= level; r++) {
                        obj.spread.getActiveSheet().rowOutlines.group(i, 1);
                    }
                }
            }
        }
        /** @type {?} */
        const sheet = obj.spread.getActiveSheet();
        if (sheet) {
            this.titleVariablesReplace(sheet, obj.data);
            sheet.clearSelection();
        }
        // 页面渲染后事件
        this.utils.get('renderExtends').runRenderExtends('afterLoadData', this.localizeService.getValue('spread.message.extend.dataLoading.after'), obj.data, obj.spread);
        obj.spread.resumePaint();
        obj.spread.resumeEvent();
        // 增加当前单元格联查参数缓存
        this.utils.get('spreadStyle').joinParam['controlType'] = obj.controlType;
        this.cache.set(this.tabId + 'joinSearch', this.utils.get('spreadStyle').joinParam);
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} dynamicColumns
     * @return {?}
     */
    initJoinParams(obj, dynamicColumns) {
        this.utils.get('spreadStyle').joinParam = {
            controlType: obj.controlType,
            rowHeaderColInfo: { start: 0, end: 0 },
            // 行标题起始位置信息（行号）
            colHeaderRowInfo: { start: 0, end: 0 },
            // 列标题信息起始位置信息（列号)
            valueColCount: 0,
            // 行标题信息起始位置信息（列号)
            colInfos: dynamicColumns,
        };
        /** @type {?} */
        let columnHeaderRowCount = this.utils.get('spreadStyle').rowHeadersColumnCount = this.utils.get('spreadStyle').valueHeaderRowCount = 0;
        /** @type {?} */
        let titleCount = 0;
        if (obj.schemaId !== '1') {
            titleCount += obj.schemaValue.schemaValue.titleOption.title ? 1 : 0;
            titleCount += obj.schemaValue.schemaValue.titleOption.subTitles.length;
            obj.schemaValue.schemaValue.columnOption.colList.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data.dimension && data.dimension !== 0) {
                    if (data.dimension === 1) {
                        this.utils.get('spreadStyle').rowHeadersColumnCount++;
                    }
                    else if (data.dimension === 2) {
                        columnHeaderRowCount++;
                    }
                    else if (data.dimension === 3) {
                        this.utils.get('spreadStyle').valueHeaderRowCount++;
                    }
                }
            }));
            this.utils.get('spreadStyle').joinParam['controlType'] = obj.controlType;
            this.utils.get('spreadStyle').joinParam['rowHeaderColInfo'] = { start: 0, end: this.utils.get('spreadStyle').rowHeadersColumnCount }; // 行标题起始位置信息（行号）
            this.utils.get('spreadStyle').joinParam['colHeaderRowInfo'] = { start: titleCount, end: titleCount + columnHeaderRowCount }; // 列标题信息起始位置信息（列号)
            this.utils.get('spreadStyle').joinParam['valueColCount'] = this.utils.get('spreadStyle').valueHeaderRowCount; // 行标题信息起始位置信息（列号)
            this.utils.get('spreadStyle').joinParam['colInfos'] = obj.schemaValue.schemaValue.columnOption.colList; // 列信息
        }
        this.cache.set(this.tabId + 'joinSearch', this.utils.get('spreadStyle').joinParam);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ListTreeRender extends BaseRender {
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @param {?=} _jointsearchInfoList
     * @param {?=} _funcInfoCache
     * @param {?=} _serviceCache
     */
    constructor(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache) {
        super(_queryId, _controlType, _jointsearchInfoList, _funcInfoCache, _serviceCache);
        this.listRenderInit(_queryId, _controlType);
    }
    /**
     * @param {?} _queryId
     * @param {?} _controlType
     * @return {?}
     */
    listRenderInit(_queryId, _controlType) {
        this.type = _controlType;
        this.queryId = _queryId;
    }
    /**
     * 渲染
     * @param {?} obj 参数配置项
     * @return {?}
     */
    render(obj) {
        /** @type {?} */
        const self = this;
        this.queryId = obj.queryId;
        this.type = obj.controlType;
        obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
        this.utils.get('schema').getSchemaInfo(obj).subscribe((/**
         * @param {?} schemaValue
         * @return {?}
         */
        (schemaValue) => {
            if (schemaValue) {
                obj['schemaId'] = schemaValue.id;
                obj['schemaValue'] = schemaValue;
                // this.currentSchemaValueChanger.next(schemaValue);
                EventBus.dispatch('schemaValueChanged', schemaValue);
                /** @type {?} */
                let delay = schemaValue.schemaValue.otherOption.delay;
                /** @type {?} */
                const interval = schemaValue.schemaValue.otherOption.interval;
                /** @type {?} */
                const funcId = RtfServices.getTabId(obj.queryId);
                /** @type {?} */
                const index = self.funcInfoCache.firstLoadCache.findIndex((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el === funcId));
                /** @type {?} */
                const firstLoad = schemaValue.schemaValue.otherOption.firstLoad;
                if (index < 0 && this.isSchemaSelectChanged === false) {
                    if (firstLoad === false) {
                        self.funcInfoCache.firstLoadCache.push(funcId);
                        obj.loading.close();
                        if (obj.spread.getActiveSheet()) {
                            obj.spread.getActiveSheet().deleteRows(0, obj.spread.getActiveSheet().getRowCount());
                            obj.spread.getActiveSheet().options.colHeaderVisible = false;
                            obj.spread.invalidateLayout();
                            obj.spread.repaint();
                            self.serviceCache.lcpService.pageInfoChange.next({
                                pageCount: 1,
                                pageIndex: 1,
                                pageSize: schemaValue.schemaValue.otherOption.pageSize || 20,
                                totalCount: 1
                            });
                        }
                        return;
                    }
                }
                if (!delay) {
                    delay = 0;
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.getRenderDataForList.call(this, Object.assign({}, obj));
                    if (interval > 0) {
                        setInterval((/**
                         * @return {?}
                         */
                        () => {
                            this.getRenderDataForList.call(this, Object.assign({}, obj));
                        }), interval * 1000);
                    }
                }), delay * 1000);
            }
            else {
                obj['schemaId'] = '1';
                this.getRenderDataForList.call(this, Object.assign({}, obj));
            }
        }));
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    getRenderDataForList(obj) {
        /** @type {?} */
        const self = this;
        obj.schemaId = obj.schemaId ? obj.schemaId : (obj.schemaValue && obj.schemaValue.id ? obj.schemaValue.id : '1');
        if (!obj.formData) {
            /** @type {?} */
            let params = this.utils.get('parameter').createParameters(Object.assign({}, obj, { pageIndex: 0, pageSize: 0 }));
            params['queryId'] = obj.queryId ? obj.queryId : '';
            self.operatePagination(obj, params);
            // 查询数据前事件
            params = this.utils.get('renderExtends').runRenderExtends('beforeQueryData', this.localizeService.getValue('spread.message.extend.query.before'), params, obj.spread);
            try {
                /** @type {?} */
                const tab = RtfServices.getTabId(obj.queryId);
                this.cache.set(tab, JSON.parse(params['entityData']));
                this.cache.set(tab + 'extendCond', params['extendCond']);
            }
            catch (e) { }
            self.getData(params, obj.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                data = data || { data: [], dynamicCols: [] };
                if (obj.schemaId !== '1' || (data && data.dynamicCols && data.dynamicCols.length)) {
                    self.schemaManager.dynamicCols[obj.groupType ? obj.groupType : obj.queryId] = data.dynamicCols || [];
                    self.schemaManager.dynamicCols[obj.schemaId] = data.dynamicCols || [];
                    self.schemaManager.operateDynamicColsForSchema(obj.schemaValue, obj.groupType ? obj.groupType : obj.queryId, obj.schemaId);
                    self.schemaManager.schemaInfoChange.next({ schemaList: self.schemaManager.schemaInfo, isDefaultSchema: self.schemaManager.isDefaultSchema && self.schemaManager.isDefaultSchema[obj.queryId] ? self.schemaManager.isDefaultSchema[obj.queryId] : null, preSchema: self.schemaManager.preSchema });
                }
                if (!obj.schemaValue || obj.schemaId == '1') {
                    self.operateCustomFormatSchema(data, obj);
                }
                // 数据加载前事件
                this.utils.get('renderExtends').runRenderExtends('beforeLoadData', self.localizeService.getValue('spread.message.extend.dataLoading.before'), data, obj.spread);
                self.lcpService.getCol(params, obj.queryRelativeUrl).subscribe((/**
                 * @param {?} resultData
                 * @return {?}
                 */
                resultData => {
                    if (obj.schemaId === '1') {
                        if (!data.dynamicCols.length) {
                            data.dynamicCols = resultData.dynamicCols || [];
                        }
                    }
                    obj.frozenCols = (resultData && resultData.dynamicCols) || [];
                    obj['data'] = data;
                    self.getListRenderTemplate(obj);
                    // { schemaId: _schemaId, queryId, data, queryRelativeUrl, spread, schemaValue, pageIndex, controlType, loading }
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                self.formErrorService.exception(error.Message, error);
                obj.loading.close();
            }));
            this.cache.set('schema_schemaid' + obj.queryId, obj.schemaId);
            // EventBus.dispatch('schema_schemaid', _schemaId);
        }
        else {
            obj['data'] = obj.formData;
            obj['frozenCols'] = obj.formData.dynamicCols;
            self.getListRenderTemplate(obj);
            // { schemaId: _schemaId, queryId, formData, queryRelativeUrl, spread, schemaValue, pageIndex, controlType, loading }
        }
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    getListRenderTemplate(obj) {
        /** @type {?} */
        const self = this;
        self.schemaManager.getSpreadTemplate(obj.schemaId, obj.queryId, obj.data && obj.data.dynamicCols ? obj.data.dynamicCols : [], obj.queryRelativeUrl, obj.customFormatScheme, obj.frozenCols, obj.groupType).subscribe((/**
         * @param {?} template
         * @return {?}
         */
        template => {
            template = template.returnValue ? JSON.parse(template.returnValue) : template;
            self.renderList.call(self, Object.assign({}, obj, { template }));
            self.utils.get('spreadStyle').bindSelectChanged(obj.spread, obj.queryId);
            /** @type {?} */
            const event = RtfServices.getMenuSwitchControlEvent();
            if (event && typeof event === 'object') {
                event.next('ok');
            }
            EventBus.dispatch(self.queryId + 'spread_init', {});
            obj.loading.close();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            self.formErrorService.exception(error.Message, error);
            obj.loading.close();
        }));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    renderList(obj) {
        /** @type {?} */
        const self = this;
        this.type = obj.controlType;
        obj.spread.suspendEvent();
        obj.spread.suspendPaint();
        obj.spread.fromJSON(obj.template);
        /** @type {?} */
        const sheet = obj.spread.getActiveSheet();
        // 储粮需求，多sheet页
        if (obj.curSheet && obj.multiSheets.length) {
            sheet.name(obj.curSheet);
            for (let i = 0; i < obj.multiSheets.length; i++) {
                if (obj.curSheet !== obj.multiSheets[i]) {
                    obj.spread.addSheet(i, new GC.Spread.Sheets.Worksheet(obj.multiSheets[i]));
                    obj.spread.sheets[i].deleteRows(0, obj.spread.sheets[i].getRowCount());
                    obj.spread.sheets[i].deleteColumns(0, obj.spread.sheets[i].getColumnCount());
                }
            }
            obj.spread.setActiveSheet(obj.curSheet);
            obj.spread.options.tabStripVisible = true;
            obj.spread.options.tabEditable = false;
        }
        // 储粮需求，多sheet页
        this.utils.get('spreadStyle').cacheStyle(sheet);
        /** @type {?} */
        let showZero = true;
        if (obj.schemaValue && obj.schemaValue.schemaValue && obj.schemaValue.schemaValue.otherOption) {
            if (obj.schemaValue.schemaValue.otherOption.showZero != null && obj.schemaValue.schemaValue.otherOption.showZero !== undefined) {
                showZero = obj.schemaValue.schemaValue.otherOption.showZero;
            }
        }
        if (obj.data && obj.data.data && obj.data.data.length) {
            obj.data.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.dynamicPropSet) {
                    for (const key in item.dynamicPropSet) {
                        item[key] = item.dynamicPropSet[key];
                    }
                }
            }));
            // 修改枚举字段显示
            self.changeData(obj.data, obj.schemaValue);
            sheet.setDataSource(obj.data.data);
            sheet.bindColumns(this.utils.get('spreadStyle').dataColInfoArray);
            sheet.options.isProtected = true;
            sheet.options.protectionOptions = {
                allowSelectLockedCells: true,
                allowSelectUnlockedCells: true,
                allowFilter: true,
                allowSort: true,
                allowResizeRows: true,
                allowResizeColumns: true,
                allowEditObjects: false
            };
            obj.spread.options.allowCopyPasteExcelStyle = true;
            obj.spread.options.allowExtendPasteRange = true;
            obj.spread.options.copyPasteHeaderOptions = GC.Spread.Sheets.CopyPasteHeaderOptions.allHeaders;
            sheet.rowOutlines.direction(GC.Spread.Sheets.Outlines.OutlineDirection.backward);
            try {
                if (!obj.schemaValue && obj.customFormatScheme) {
                    if (typeof obj.customFormatScheme == 'string') {
                        obj.schemaValue = {};
                        obj.schemaValue['schemaValue'] = JSON.parse(obj.customFormatScheme);
                    }
                }
            }
            catch (e) { }
            this.utils.get('spreadStyle').applyStyle(sheet, obj.schemaValue, showZero);
            this.utils.get('spreadStyle').linkField(obj.spread, sheet);
            try {
                /** @type {?} */
                let extObj = gspframeworkService.rtf.extendMethod.getExtObj();
                if (extObj) {
                    this.utils.get('spreadStyle').inSuiteLinkField(obj.spread, sheet, extObj);
                }
            }
            catch (e) {
            }
            this.footerVariablesReplace(sheet, obj.data);
        }
        else {
            this.footerVariablesReplace(sheet, obj.data);
            sheet.deleteRows(0, 1);
        }
        this.titleVariablesReplace(sheet, obj.data);
        this.utils.get('spreadStyle').setAutoFitColumn(obj.schemaValue, sheet);
        if (this.utils.get('spreadStyle').getShowHeaderSort(obj.schemaValue)) {
            this.utils.get('spreadStyle').setSortCellType(sheet, obj.schemaValue, obj.qdpView);
        }
        if (obj.controlType == 'list') {
            this.utils.get('spreadStyle').mergeCell(sheet, obj.schemaValue);
        }
        sheet.clearSelection();
        // 页面渲染后事件
        this.utils.get('renderExtends').runRenderExtends('afterLoadData', this.localizeService.getValue('spread.message.extend.dataLoading.after'), obj.data, obj.spread);
        obj.spread.resumePaint();
        obj.spread.resumeEvent();
        // 增加当前单元格联查参数缓存
        this.utils.get('spreadStyle').joinParam['controlType'] = this.type;
        this.cache.set(RtfServices.getTabId(obj.queryId) + 'joinSearch', this.utils.get('spreadStyle').joinParam);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RenderService {
    /**
     * @param {?} schemaManager
     * @param {?} lcpService
     * @param {?} cache
     * @param {?} loadService
     * @param {?} msgService
     * @param {?} dataRenderExtendService
     * @param {?} injector
     */
    constructor(schemaManager, lcpService, cache, loadService, msgService, dataRenderExtendService, injector) {
        this.schemaManager = schemaManager;
        this.lcpService = lcpService;
        this.cache = cache;
        this.loadService = loadService;
        this.msgService = msgService;
        this.dataRenderExtendService = dataRenderExtendService;
        this.injector = injector;
        this.serviceCache = {};
        this.columnCount = 0;
        this.operations = {};
        this.funcInfoCache = {
            funcIds: [],
            firstLoadCache: []
        };
        /** @type {?} */
        const self = this;
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.formErrorService = this.injector.get(FormErrorService);
            this.cloudprintService = this.injector.get(CloudprintService);
            this.notifyService = this.injector.get(NotifyService);
            this.setService();
            self.schemaManager.operationChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                if (value) {
                    self.operations = value;
                }
            }));
            self.setSecurityLevel();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setService() {
        /** @type {?} */
        const tabId = RtfServices.getTabId() || 'default';
        this.serviceCache[tabId] = {
            'formErrorService': this.formErrorService,
            'cloudprintService': this.cloudprintService,
            'schemaManagerService': this.schemaManager,
            'lcpService': this.lcpService,
            'cacheService': this.cache,
            'loadingService': this.loadService,
            'msgService': this.msgService,
            'localizeService': this.localizeService,
            'notifyService': this.notifyService
        };
    }
    /**
     * @private
     * @return {?}
     */
    getService() {
        /** @type {?} */
        const tabId = RtfServices.getTabId() || 'default';
        return this.serviceCache[tabId];
    }
    /**
     * @private
     * @return {?}
     */
    setSecurityLevel() {
        this.lcpService.variablesChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.hasOwnProperty('securityLevel') && data['securityLevel']) {
                this.cache.set(RtfServices.getTabId() + 'securityLevel', data['securityLevel']);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getSecurityLevel() {
        if (this.cache.get(RtfServices.getTabId() + 'securityLevel')) {
            return this.cache.get(RtfServices.getTabId() + 'securityLevel');
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} option
     * @return {?}
     */
    render(option) {
        if (!option.loading) {
            option.loading = this.loadService.show({ container: 'body' });
        }
        this.spread = option.spread ? option.spread : null;
        this.renderObject = this.getRender(option);
        this.renderObject.render(option);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    getRender(obj) {
        this.setService();
        ServicesUtils.setServices('dataRenderExtendService' + obj.queryId, this.dataRenderExtendService);
        /** @type {?} */
        let render;
        switch (obj.controlType) {
            case 'crosstab':
                render = new CrosstabRender(obj.queryId, obj.controlType, obj.jointsearchInfoList, this.funcInfoCache, this.getService());
                break;
            default:
                render = new ListTreeRender(obj.queryId, obj.controlType, obj.jointsearchInfoList, this.funcInfoCache, this.getService());
                break;
        }
        render.isSchemaSelectChanged = obj.isSchemaSelectChanged ? obj.isSchemaSelectChanged : false;
        return render;
    }
    /**
     * @param {?} renderOption
     * @return {?}
     */
    exportData(renderOption) {
        // exportData(queryId: any, schemaId: any, controlType: any, pageIndex?: number, qoManagerCode?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, voId?: any, totalCount?: any, exportType?: any) {
        /** @type {?} */
        const loading = this.loadService.show({ container: 'body' });
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            let schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            if (RtfServices.getFuncName()) {
                schemaName = RtfServices.getFuncName() + '-' + schemaName;
            }
            renderOption.excelExportName = schemaName;
            /** @type {?} */
            const params = this.renderObject.utils.get('parameter').createParameters(renderOption);
            params['exportType'] = renderOption.exportType ? renderOption.exportType : '';
            /** @type {?} */
            let isCustomShema = false;
            /** @type {?} */
            let customSchema = null;
            if (params['schemaId'] === '1') {
                if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                    isCustomShema = true;
                    params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                    customSchema = JSON.parse(params.customSchema);
                    if (!params.excelExportName) {
                        params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                            ? customSchema.titleOption.title : 'export';
                    }
                }
                else {
                    this.msgService.warning(this.localizeService.getValue('spread.message.export'));
                    loading.close();
                    return;
                }
            }
            if (this.operations['QdpQueryExport'] === false) {
                this.msgService.warning(this.localizeService.getValue('spread.message.validate.qdpQueryExport'));
                loading.close();
                return;
            }
            try {
                if (renderOption.controlType === 'treelist' && this.spread) {
                    /** @type {?} */
                    let expandNodes = '';
                    if (value && value.schemaValue && value.schemaValue.otherOption && value.schemaValue.otherOption.treeInfoType !== 2) {
                        /** @type {?} */
                        const pathField = value.schemaValue.otherOption.treeInfoType === 0 ? value.schemaValue.otherOption.pathField : value.schemaValue.otherOption.idField;
                        if (pathField) {
                            for (let i = 0; i < this.spread.getActiveSheet().getRowCount(); i++) {
                                if (this.spread.getActiveSheet().rowOutlines.isCollapsed(i)) {
                                    expandNodes += ',' + this.spread.getActiveSheet().getDataItem(i)[pathField];
                                }
                            }
                            params['expandNodes'] = expandNodes.substring(1);
                        }
                    }
                }
            }
            catch (e) {
            }
            this.columnCount = 0;
            if (!isCustomShema) {
                this.calculationColumnCount(value.schemaValue.columnOption.colList);
            }
            else {
                if (customSchema && customSchema.columnOption && customSchema.columnOption.colList) {
                    this.calculationColumnCount(customSchema.columnOption.colList);
                }
            }
            this.lcpService.loading = loading;
            if (this.getSecurityLevel()) {
                params.excelExportName += '_' + this.getSecurityLevel();
            }
            if ((this.columnCount * renderOption.totalCount) < 100000) {
                this.lcpService.exportData(params, renderOption.queryRelativeUrl);
                loading.close();
            }
            else {
                this.lcpService.aysnExportData(params, renderOption.queryRelativeUrl);
                loading.close();
                this.msgService.warning(this.localizeService.getValue('spread.message.aysnExport'));
            }
        }));
    }
    /**
     * @private
     * @param {?} colList
     * @return {?}
     */
    calculationColumnCount(colList) {
        try {
            colList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.childList && item.childList.length) {
                    this.calculationColumnCount(item.childList);
                }
                else {
                    this.columnCount += 1;
                }
            }));
        }
        catch (e) {
            this.columnCount = 0;
        }
    }
    /**
     * @param {?} queryId
     * @param {?} schemaId
     * @param {?} controlType
     * @param {?=} qoManagerCode
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} groupType
     * @param {?=} voId
     * @return {?}
     */
    clearCache(queryId, schemaId, controlType, qoManagerCode, queryRelativeUrl, filterCondition, groupType, voId) {
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId, queryId, queryRelativeUrl, groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            schemaId = schemaId ? schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            const schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            /** @type {?} */
            const params = this.renderObject.utils.get('parameter').createParameters({
                queryId,
                controlType,
                schemaId,
                qoManagerCode,
                pageIndex: 0,
                pageSize: 0,
                excelExportName: schemaName,
                filterCondition,
                voId
            });
            if (ServicesUtils.getServices(RtfServices.getTabId(queryId) + 'customScheme')) {
                params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(queryId) + 'customScheme');
            }
            this.lcpService.clearCache(params).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data) {
                    this.notifyService['success']((/** @type {?} */ ({
                        title: this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: this.localizeService.getValue('spread.message.clearCache'), timeout: 3000
                    })));
                }
            }));
        }));
    }
    /**
     * @param {?} renderOption
     * @return {?}
     */
    pdfExportEvent(renderOption) {
        // pdfExportEvent(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, pageIndex?: any, voId?: any) {
        /** @type {?} */
        const loading = this.loadService.show({ container: 'body' });
        try {
            this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
                /** @type {?} */
                let schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                    ? value.schemaValue.titleOption.title
                    : value && value.schemaName
                        ? value.schemaName
                        : '';
                if (RtfServices.getFuncName()) {
                    schemaName = RtfServices.getFuncName() + '-' + schemaName;
                }
                renderOption.excelExportName = schemaName;
                /** @type {?} */
                const params = this.renderObject.utils.get('parameter').createParameters(renderOption);
                if (params['schemaId'] === '1') {
                    if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                        params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                        /** @type {?} */
                        const customSchema = JSON.parse(params.customSchema);
                        if (!params.excelExportName) {
                            params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                                ? customSchema.titleOption.title : 'export';
                        }
                    }
                    else {
                        this.msgService.warning(this.localizeService.getValue('spread.message.print'));
                        loading.close();
                        return;
                    }
                }
                if (this.operations['QdpQueryPrint'] === false) {
                    this.msgService.warning(this.localizeService.getValue('spread.message.validate.qdpQueryPrint'));
                    loading.close();
                    return;
                }
                if (this.getSecurityLevel()) {
                    params.excelExportName += '_' + this.getSecurityLevel();
                }
                this.lcpService.pdfExportEvent(params, renderOption.queryRelativeUrl);
                loading.close();
            }));
        }
        catch (e) {
            loading.close();
            // console.log(e);
        }
    }
    /**
     * @param {?} renderOption
     * @return {?}
     */
    printPreView(renderOption) {
        // printPreView(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, pageIndex?: any, voId?: any) {
        this.renderObject.utils.get('schema').getSchemaInfo({ schemaId: renderOption.schemaValue, queryId: renderOption.queryId, queryRelativeUrl: renderOption.queryRelativeUrl, groupType: renderOption.groupType }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            renderOption.schemaId = renderOption.schemaId ? renderOption.schemaId : (value && value.id ? value.id : '1');
            /** @type {?} */
            const schemaName = value && value.schemaValue && value.schemaValue.titleOption && value.schemaValue.titleOption.title
                ? value.schemaValue.titleOption.title
                : value && value.schemaName
                    ? value.schemaName
                    : '';
            renderOption.excelExportName = schemaName;
            /** @type {?} */
            const params = this.renderObject.utils.get('parameter').createParameters(renderOption);
            if (params['schemaId'] === '1') {
                if (ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme')) {
                    params.customSchema = ServicesUtils.getServices(RtfServices.getTabId(renderOption.queryId) + 'customScheme');
                    /** @type {?} */
                    const customSchema = JSON.parse(params.customSchema);
                    if (!params.excelExportName) {
                        params.excelExportName = customSchema && customSchema.titleOption && customSchema.titleOption.title
                            ? customSchema.titleOption.title : 'export';
                    }
                }
                else {
                    this.msgService.warning(this.localizeService.getValue('spread.message.preview'));
                    return;
                }
            }
            if (this.getSecurityLevel()) {
                params.excelExportName += '_' + this.getSecurityLevel();
            }
            this.lcpService.cloudprintService = this.cloudprintService;
            this.lcpService.printPreView(params, renderOption.queryRelativeUrl);
        }));
    }
    /**
     * @param {?=} queryId
     * @return {?}
     */
    clearFirstLoadCache(queryId) {
        /** @type {?} */
        const funcId = RtfServices.getTabId(queryId);
        /** @type {?} */
        const index = this.funcInfoCache.firstLoadCache.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        el => el === funcId));
        if (index >= 0) {
            this.funcInfoCache.firstLoadCache.splice(index, 1);
        }
    }
}
RenderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RenderService.ctorParameters = () => [
    { type: SchemaManagerService },
    { type: LcpService },
    { type: CacheService },
    { type: LoadingService },
    { type: MessagerService },
    { type: DataRenderExtendService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionSettingComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.isCompare = false;
        // 值维度  
        this.searchText = '';
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
        this.lists = [];
        this.listsCache = [];
        this.models = {
            selected: null,
            lists: this.lists
        };
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.renderService = this.injector.get(RenderService);
            this.msgService = this.injector.get(MessagerService);
            this.formErrorService = this.injector.get(FormErrorService);
            this.schemaManagerService = this.injector.get(SchemaManagerService);
        }
        this.initLists();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const eventId = RtfServices.getTabId(this.queryId);
        EventBus.register('schemaValueChanged', this.handleSchemaValueChanged.bind(this), eventId + 'dimensionSetting');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    initLists() {
        this.lists = [];
        for (let i = 0; i < 4; i++) {
            this.lists.push({
                name: this.localizeService.getValue('spread.crossTable.dimensionName')[i],
                value: []
            });
        }
    }
    /**
     * 初始化交叉表维度设置
     * @return {?}
     */
    initCrosstab() {
        // this.renderService.renderObject.currentSchemaValueChanger.subscribe((schemaValue: any) => {
        // });
    }
    /**
     * @private
     * @param {?} schemaValue
     * @return {?}
     */
    handleSchemaValueChanged(schemaValue) {
        if (schemaValue) {
            if (schemaValue.id === 1 || schemaValue.id === '1')
                return;
            this.schemaValue = schemaValue;
            if (this.controlType === 'crosstab') {
                this.colList = schemaValue.schemaValue.columnOption.colList;
                if (this.colList) {
                    this.zero = this.colList.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    (x) => x.dimension === 0));
                    this.rowDimension = this.colList.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.dimension === 1));
                    this.colDimension = this.colList.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.dimension === 2));
                    this.valDimension = this.colList.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.dimension === 3));
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.lists[0].value = this.zero;
                        this.listsCache = this.zero;
                        this.lists[1].value = this.rowDimension;
                        this.lists[2].value = this.colDimension;
                        this.lists[3].value = this.valDimension;
                    }));
                }
            }
        }
    }
    /**
     * @param {?} index
     * @param {?} list
     * @return {?}
     */
    moved(index, list) {
        list.splice(index, 1);
        this.selectedDimesion();
        if (this.schemaValue) {
            if (this.schemaValue.isProtected === 1 || this.schemaValue.isProtected === '1') {
                this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                return;
            }
            this.schemaValue.schemaValue = JSON.stringify(this.schemaValue.schemaValue);
            this.schemaManagerService.saveSchema({ 'schema': JSON.stringify(this.schemaValue) }, this.queryRelativeUrl).subscribe((/**
             * @return {?}
             */
            () => {
                this.renderService.render({ queryId: this.queryId, spread: this.spread, controlType: this.controlType, qoManagerCode: this.qoManagerCode, queryRelativeUrl: this.queryRelativeUrl, schemaValue: this.schemaValue, filterCondition: this.conditionExpression, groupType: this.groupType, voId: this.voId, jointsearchInfoList: this.jointsearchInfoList, fromCache: true, qdpView: this.qdpView });
                this.schemaValue.schemaValue = typeof this.schemaValue.schemaValue === 'string' ? JSON.parse(this.schemaValue.schemaValue) : this.schemaValue.schemaValue;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.formErrorService.exception(error.Message, error);
            }));
        }
    }
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    crosstabColumnValidate(columns) {
        /** @type {?} */
        let flag = false;
        if (this.controlType === 'crosstab') {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < columns.length; i++) {
                if (columns[i].groupAggre !== 4 && columns[i].totalAggre !== 4) {
                    if (!'int,integer,float,double,decimal,number'.includes(columns[i].type ? columns[i].type.toLowerCase() : '')) {
                        flag = true;
                        break;
                    }
                }
            }
        }
        return flag;
    }
    /**
     * @return {?}
     */
    selectedDimesion() {
        this.colList = [];
        if (this.lists[0]) {
            this.lists[0].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.dimension = 0;
                value.isGroup = false;
                value.groupAggre = 0;
            }));
            this.colList = this.lists[0].value;
        }
        if (this.lists[1]) {
            this.lists[1].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.dimension = 1;
                value.isGroup = true;
                value.groupAggre = 0;
            }));
            if (this.colList.length === 0) {
                this.colList = this.lists[1].value;
            }
            else {
                this.colList = this.colList.concat(this.lists[1].value);
            }
        }
        if (this.lists[2]) {
            this.lists[2].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.dimension = 2;
                value.isGroup = true;
                value.groupAggre = 0;
            }));
            if (this.colList.length === 0) {
                this.colList = this.lists[2].value;
            }
            else {
                this.colList = this.colList.concat(this.lists[2].value);
            }
        }
        if (this.lists[3]) {
            this.lists[3].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.dimension = 3;
                value.isGroup = false;
                value.groupAggre = 1;
            }));
            if (this.colList.length === 0) {
                this.colList = this.lists[3].value;
            }
            else {
                this.colList = this.colList.concat(this.lists[3].value);
            }
        }
        if (this.colList.length > 0) {
            try {
                this.isCompare = JSONUtils.Compare({ schema: this.schemaValue.schemaValue.columnOption.colList }, { schema: this.colList });
            }
            catch (e) { }
            this.schemaValue.schemaValue.columnOption.colList = this.colList;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    dimensionSearchValueOnChange(val) {
        if (val) {
            /** @type {?} */
            const searchCols = this.listsCache.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.name.indexOf(val) >= 0));
            this.lists[0].value = [...searchCols];
        }
        else {
            this.lists[0].value = [...this.listsCache];
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange0($event) {
        if (this.lists && this.lists.length) {
            this.lists[0].value = $event;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange1($event) {
        if (this.lists && this.lists.length) {
            this.lists[1].value = $event;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange2($event) {
        if (this.lists && this.lists.length) {
            this.lists[2].value = $event;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange3($event) {
        if (this.crosstabColumnValidate($event)) {
            for (let i = 0; i < $event.length; i++) {
                /** @type {?} */
                const dimensionIndex = $event[i].dimension - 0;
                if (dimensionIndex !== 3) {
                    this.lists[dimensionIndex].value = [...this.lists[dimensionIndex].value, $event.splice(i, 1)[0]];
                }
            }
            this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.crosstabValueDimension'));
            return;
        }
        if (this.lists && this.lists.length) {
            this.lists[3].value = $event;
        }
    }
}
DimensionSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'dimension-setting',
                template: "<div class=\"container f-utils-fill-flex-column h-100\">\r\n  <div class=\"simpleDemo f-utils-fill-flex-row\">\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"unselected\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTZweCcgaGVpZ2h0PScxNnB4JyB2aWV3Qm94PScwIDAgMTYgMTYnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuW+hemAieWtl+autTwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJyBvcGFjaXR5PScwLjQ1OTU0MjQxMSc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTkzMi4wMDAwMDAsIC0xNTEuMDAwMDAwKScgZmlsbD0nIzAwMDAwMCcgZmlsbC1ydWxlPSdub256ZXJvJz48ZyBpZD0n57yW57uELTI2JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg4OTguMDAwMDAwLCA3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTI0JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgyMC4wMDAwMDAsIDY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjEnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDEuMDAwMDAwLCAxLjAwMDAwMCknPjxnIGlkPSdzaG91Y2FuZy0yJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgxMy4wMDAwMDAsIDEwLjAwMDAwMCknPjxwYXRoIGQ9J00xMS41NjA5NDkyLDE0LjQ3MjcxODMgQzExLjM2NDAzMzIsMTQuNDcyNzE4MyAxMS4xNDI4MzU5LDE0LjQxNjE4MzYgMTAuOTM3NTI1NCwxNC4zMTM1NjI1IEw4LjAwNzc1MTk1LDEyLjg0ODE4MzYgTDUuMDU5ODM1OTQsMTQuMzExMTgzNiBDNC44NzMxNDY0OCwxNC40MTA1NzgxIDQuNjU5NDQxNDEsMTQuNDYyODczIDQuNDQxNTI1MzksMTQuNDYyODczIEM0LjE1ODM1ODQyLDE0LjQ2MzkxNTcgMy44ODI0MTU1NCwxNC4zNzM1NDU4IDMuNjU0NzIyNjYsMTQuMjA1MTk5MiBDMy4yNDIxNDY0OCwxMy44OTU4MDQ3IDMuMDMwNzM4MjgsMTMuMzU5NTkzNyAzLjEyODMyODEyLDEyLjg3MTQ5NDEgTDMuNzMxMjQ0MTQsOS43NDM4ODg2NyBMMS40MjAzMjgxMiw3LjU4OTc4OTA2IEMxLjA2MzM4MzQyLDcuMjI4MTM2ODYgMC45MjY0MjQ0NTgsNi43MDM1NjQzOCAxLjA2MTAxNzU4LDYuMjEzNTc4MTIgTDEuMDY1NjM4NjcsNi4xOTc2OTE0MSBDMS4yMzM2Mzg2Nyw1LjY5NDE4MzU5IDEuNjUwNDEyMTEsNS4zNDEzODA4NiAyLjE1NTc1MTk1LDUuMjczNjkxNDEgTDUuMzY2NDQxNDEsNC42ODk5MDIzNCBMNi44MDc1MjUzOSwxLjc2MzA0MTAyIEM3LjAzOTAxNzU4LDEuMjk5NjMyODEgNy41MDk4NDk2MSwxLjAwMTg1OTM3IDguMDA3NzUxOTUsMS4wMDE4NTkzNyBDOC41MjcxNDY0OCwxLjAwMTg1OTM3IDkuMDEwMTQ2NDgsMS4zMTA4NDM3NSA5LjIxMjY1NDMsMS43NzE0NDkyMiBMMTAuNjQ5MTMwOSw0LjY4OTAyNzM0IEwxMy44NjAzMTI1LDUuMjUwNDQ5MjIgQzE0LjM2OTg3NDcsNS4zMjQzMDAwMyAxNC43ODg3MTU0LDUuNjkwMjA3NjIgMTQuOTMwMzI4MSw2LjE4NTIzNjMzIEMxNS4wODg4NDQ4LDYuNjcxNzczNDkgMTQuOTU5MzY4Miw3LjIwNjExMjA4IDE0LjU5NTcyMjcsNy41NjYxMjMwNSBMMTQuNTg3ODIwMyw3LjU3NDAzOTA2IEwxMi4yODM0MjU4LDkuNzQ0MDM5MDYgTDEyLjg2NTgyMDMsMTIuODc3MjIyNyBDMTIuOTU5NjA5NCwxMy4zNzg0MzM2IDEyLjc2MDMyODEsMTMuODg0MzIwMyAxMi4zNDU0NDE0LDE0LjE5OTc0NDEgQzEyLjEyMzMxODEsMTQuMzc4NjAyMiAxMS44NDYxMjE3LDE0LjQ3NTA0MTMgMTEuNTYwOTQ5MiwxNC40NzI3MTgzIEwxMS41NjA5NDkyLDE0LjQ3MjcxODMgWiBNOC4wMDg4MDQ2OSwxMS43NDY1MDM5IEwxMS4wODYyNzU0LDEzLjI4NTQ2NDggQzExLjE3NjcxNDgsMTMuMzMxMTAxNiAxMS4yODA4ODA5LDEzLjM1OTY2MjEgMTEuMzUyMDU2NiwxMy4zNTk2NjIxIEMxMS40NjE4MjgxLDEzLjM1OTY2MjEgMTEuNTYzNzUyLDEzLjMyNTkxOTkgMTEuNjM4NDQxNCwxMy4yNjM1NDg4IEwxMS42NTI1MDk4LDEzLjI1MjA2NDUgQzExLjgyNzM3MywxMy4xMjA3NDYxIDExLjkxMjU0ODgsMTIuOTEyNDI3NyAxMS44NzQzMzU5LDEyLjcwODEwMTYgTDExLjI1NDgzNTksOS4zNzE5NzI2NiBMMTMuNzA0NDk0MSw3LjA2NTE4NTU1IEMxMy44NTQ3NzU0LDYuOTEyNzMwNDcgMTMuOTA2MjIyNyw2LjY5NDQwNDMgMTMuODM5NDM1NSw2LjQ5MzU2NDQ1IEwxMy44MzI4NzMsNi40NzI1MDk3NyBDMTMuNzc4OTIxMiw2LjI3ODAxNzY2IDEzLjYxNDIyNjEsNi4xMzQ0MTAzMyAxMy40MTQxOTkyLDYuMTA3NDQzMzYgTDEzLjQwMDE5OTIsNi4xMDUyODMyIEwxMC4wMTA4MDQ3LDUuNTEyNjYyMTEgTDguNDg1NDg4MjgsMi40MTQxOTE0MSBDOC40MTEyMDg5OCwyLjI0MTA3ODEyIDguMjEwNDUxMTcsMi4xMTU0MzM1OSA4LjAwNzQ1MTE3LDIuMTE1NDMzNTkgQzcuODA4MDE5NTMsMi4xMTU0MzM1OSA3LjYxNzMzNzg5LDIuMjQwMjQ0MTQgNy41MjA2Nzc3MywyLjQzMzA4NTk0IEw2LjAwNTA1NDY5LDUuNTExMzM1OTQgTDIuNTk3NzIyNjYsNi4xMzAyODkwNiBDMi4zOTA4MTI1LDYuMTU2MjUxOTUgMi4yMzAwMTc1OCw2LjI5MzczNjMzIDIuMTU1ODIwMzEsNi41MDgwNzAzMSBDMi4xMDMxMDE1Niw2LjcwNDAwMTk1IDIuMTY1NDcyNjYsNi45Mzk4OTY0OCAyLjMwOTUzMzIsNy4wODcxMTUyMyBMNC43NjE4NTc0Miw5LjM3MjM5NjQ4IEw0LjExODI2NzU4LDEyLjcxMDM1NzQgQzQuMDc5NjMwODYsMTIuOTAzMjY3NiA0LjE3MDk3MjY2LDEzLjEyNTUxNzYgNC4zNDAwOTM3NSwxMy4yNTI1MDIgQzQuNDI0ODU5MzcsMTMuMzE2MjEyOSA0LjUzNDY5OTIyLDEzLjM1MTM0OTYgNC42NDk4NDM3NSwxMy4zNTEzNDk2IEM0LjczODYwMTU2LDEzLjM1MTM0OTYgNC44MjM4MDQ2OSwxMy4zMzA2MjMgNC44OTcxNjc5NywxMy4yOTExMzg3IEw0LjkwNzcyMjY2LDEzLjI4NDk4NjMgTDguMDA4ODA0NjksMTEuNzQ2NTAzOSBaJyBpZD0n5b2i54q2Jz48L3BhdGg+PC9nPjwvZz48L2c+PC9nPjwvZz48L2c+PC9zdmc+\" style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[0].name : ''}}</span>\r\n          </div>\r\n          <input-group [groupText]=\"groupIcon\" class=\"m-1\" [(value)]=\"searchText\"\r\n            (valueChange)=\"dimensionSearchValueOnChange($event)\"></input-group>\r\n          <ul id=\"unselectFieldList\" class=\"f-utils-overflow-xhya f-utils-fill pb-1\" [dndList]=\"lists && lists.length ? lists[0].value : []\"  (dndListChange)=\"dndListChange0($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[0].value : []); let i = index;\" [dndDraggable]=\"item\"\r\n              (dndMoved)=\"moved(i, lists[0].value)\" dndEffectAllowed=\"move\" (dndSelected)=\"models.selected = item\"\r\n              [ngClass]=\"{'selected': models.selected === item}\">\r\n              <span class=\"unselectFieldFront mr-2\" *ngIf=\"'int,float,double,decimal,number'.includes(item.type)==false\">Abc</span>\r\n              <span class=\"unselectFieldFront mr-2\" *ngIf=\"'int,float,double,decimal,number'.includes(item.type)==true\">123</span>\r\n              <span class=\"unselectField\">{{item.name}}</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body  f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"valuefield\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTZweCcgaGVpZ2h0PScxNnB4JyB2aWV3Qm94PScwIDAgMTYgMTYnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWAvOe7tOW6pjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJyBvcGFjaXR5PScwLjQ1OTU0MjQxMSc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTExNTEuMDAwMDAwLCAtMTUyLjAwMDAwMCknIGZpbGw9JyMwMDAwMDAnIGZpbGwtcnVsZT0nbm9uemVybyc+PGcgaWQ9J+e8lue7hC0yNicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoODk4LjAwMDAwMCwgNzUuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0zMicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMjM5LjAwMDAwMCwgNjUuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0zMSc+PGcgaWQ9J+e8lue7hC0yMeWkh+S7vScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMS4wMDAwMDAsIDEuMDAwMDAwKSc+PGcgaWQ9J3dlaWR1JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgxMy4wMDAwMDAsIDExLjAwMDAwMCknPjxwYXRoIGQ9J00xMS41NSw0Ljk4NCBDMTIuMTMsNC42NTQgMTIuNjI0LDUuNTI0IDEyLjA0NCw1Ljg1MyBMOS4wMDIsNy42MiBDOS4wMDQsNy42MzYgOS4wMTIsNy42NSA5LjAxMiw3LjY2NiBMOS4wMTIsMTEuNjk4IEM5LjAxMiwxMS45NzQxNDI0IDguNzg4MTQyMzcsMTIuMTk4IDguNTEyLDEyLjE5OCBDOC4yMzU4NTc2MywxMi4xOTggOC4wMTIsMTEuOTc0MTQyNCA4LjAxMiwxMS42OTggTDguMDEyLDcuNjg3IEw0LjkwNiw1LjkwOSBDNC4zMjYsNS41NzkgNC44MjEsNC43MDkgNS40MDEsNS4wMzkgTDguNDQ5LDYuNzg1IEwxMS41NSw0Ljk4NCBaIE0xNC4yNTQsMy4xMzIgQzE0LjcxNywzLjQwNCAxNC45OTk5OTk1LDMuOSAxNC45OTk5OTk1LDQuNDM2IEwxNC45OTk5OTk1LDEwLjY0OSBDMTQuOTk5OTk5NSwxMS4xOTIgMTQuNzEsMTEuNjkzIDE0LjIzOCwxMS45NjIgTDkuMjM4LDE0LjgwNSBDOC43OCwxNS4wNjUgOC4yMTksMTUuMDY1IDcuNzYyLDE0LjgwNSBMMi43NjIsMTEuOTYyIEMyLjI5MDQ2NDQ2LDExLjY5MzEwOTEgMS45OTk1MzgxNSwxMS4xOTE4MTQ4IDEuOTk5OTk5NDUsMTAuNjQ5IEwxLjk5OTk5OTQ1LDQuNDM2IEMxLjk5OTk5OTQ1LDMuOSAyLjI4MywzLjQwNCAyLjc0NSwzLjEzMiBMNy43NDMsMC4yMDUgQzguMjA5MzUxMzMsLTAuMDY3ODY4Mjc5OSA4Ljc4NjY0ODY3LC0wLjA2Nzg2ODI3OTkgOS4yNTMsMC4yMDUgTDE0LjI1NSwzLjEzMiBMMTQuMjU0LDMuMTMyIFogTTEzLjk5OTk5OTgsMTAuNjUgTDEzLjk5OTk5OTgsNC40MzYgQzE0LjAwMDU2MDQsNC4yNTc0ODA4NiAxMy45MDYwODU2LDQuMDkyMTQ5OTUgMTMuNzUyLDQuMDAyIEw4Ljc0OCwxLjA3NCBDOC41OTI3MTAyMywwLjk4Mjg5MTQzOCA4LjQwMDI4OTc3LDAuOTgyODkxNDM4IDguMjQ1LDEuMDc0IEwzLjI0OCw0LjAwMiBDMy4wOTQyMTQ3Niw0LjA5MjQ0Njk2IDIuOTk5ODQ3OTUsNC4yNTc1ODg4OCAyLjk5OTk5OTgyLDQuNDM2IEwyLjk5OTk5OTgyLDEwLjY0OSBDMi45OTk5OTk4MiwxMC44Mjk5Njc1IDMuMDk2OTYxOTUsMTAuOTk3MDY1IDMuMjU0LDExLjA4NyBMOC4yNTQsMTMuOTMgQzguNDA2LDE0LjAxNiA4LjU5NCwxNC4wMTYgOC43NDYsMTMuOTMgTDEzLjc0NiwxMS4wODcgQzEzLjkwMzMzMzIsMTAuOTk3MzYyMSAxNC4wMDAzNDM3LDEwLjgzMDA3NjEgMTMuOTk5OTk5OCwxMC42NDkgTDEzLjk5OTk5OTgsMTAuNjUgWicgaWQ9J+W9oueKtic+PC9wYXRoPjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\" style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[3].name : ''}}</span>\r\n          </div>\r\n          <div id=\"valuefieldimg\" *ngIf=\"lists && lists.length ? (lists[3]?.value?.length < 1) : true\"\r\n            class=\"f-utils-absolute-all f-utils-flex-column justify-content-center align-items-center\"\r\n            role=\"presentation\" style=\"align-items: center; top: 36px; z-index: 10;\">\r\n            <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nNTBweCcgaGVpZ2h0PSc1MHB4JyB2aWV3Qm94PScwIDAgNTAgNTAnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6puWbvjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGRlZnM+PHJlY3QgaWQ9J3BhdGgtMScgeD0nMjYnIHk9JzMxJyB3aWR0aD0nMjQnIGhlaWdodD0nMTgnIHJ4PScwLjUnPjwvcmVjdD48ZmlsdGVyIHg9Jy02LjIlJyB5PSctOC4zJScgd2lkdGg9JzExMi41JScgaGVpZ2h0PScxMTYuNyUnIGZpbHRlclVuaXRzPSdvYmplY3RCb3VuZGluZ0JveCcgaWQ9J2ZpbHRlci0yJz48ZmVPZmZzZXQgZHg9JzAnIGR5PScwJyBpbj0nU291cmNlQWxwaGEnIHJlc3VsdD0nc2hhZG93T2Zmc2V0T3V0ZXIxJz48L2ZlT2Zmc2V0PjxmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JzAuNScgaW49J3NoYWRvd09mZnNldE91dGVyMScgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlR2F1c3NpYW5CbHVyPjxmZUNvbXBvc2l0ZSBpbj0nc2hhZG93Qmx1ck91dGVyMScgaW4yPSdTb3VyY2VBbHBoYScgb3BlcmF0b3I9J291dCcgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlQ29tcG9zaXRlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz0nMCAwIDAgMCAwLjExNDg0Mzc1IDAgMCAwIDAgMC41MTU4ODE4MTcgMCAwIDAgMCAxIDAgMCAwIDAuNzI2NDgwNTUxIDAnIHR5cGU9J21hdHJpeCcgaW49J3NoYWRvd0JsdXJPdXRlcjEnPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48bGluZWFyR3JhZGllbnQgeDE9JzUwJScgeTE9JzEwMCUnIHgyPSc1MCUnIHkyPScwJScgaWQ9J2xpbmVhckdyYWRpZW50LTMnPjxzdG9wIHN0b3AtY29sb3I9JyNEQUVCRkYnIHN0b3Atb3BhY2l0eT0nMC4yMDMwNDMwNTEnIG9mZnNldD0nMCUnPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPScjQjNEMkZGJyBzdG9wLW9wYWNpdHk9JzAuNDczMDM4NjgnIG9mZnNldD0nMTAwJSc+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjxnIGlkPSfpobXpnaItMScgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTEyMTQuMDAwMDAwLCAtNTY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMzAnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIzOS4wMDAwMDAsIDM3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTM05aSH5Lu9JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg0MC4wMDAwMDAsIDExNS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMzJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgzNy4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC01Jz48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTMnIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScyNicgeT0nMTAnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjxnIGlkPSfnn6nlvaLlpIfku70tNicgb3BhY2l0eT0nMC41OTYxMjE2NTInPjx1c2UgZmlsbD0nYmxhY2snIGZpbGwtb3BhY2l0eT0nMScgZmlsdGVyPSd1cmwoI2ZpbHRlci0yKScgeGxpbms6aHJlZj0nI3BhdGgtMSc+PC91c2U+PHJlY3Qgc3Ryb2tlLW9wYWNpdHk9JzAuMjIzNDQ4NDI3JyBzdHJva2U9JyMwMDUxQjknIHN0cm9rZS13aWR0aD0nMScgc3Ryb2tlLWxpbmVqb2luPSdzcXVhcmUnIGZpbGw9JyM3QkIyRjgnIGZpbGwtcnVsZT0nZXZlbm9kZCcgeD0nMjYuNScgeT0nMzEuNScgd2lkdGg9JzIzJyBoZWlnaHQ9JzE3JyByeD0nMC41Jz48L3JlY3Q+PC9nPjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTInIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScwJyB5PScxMCcgd2lkdGg9JzI0JyBoZWlnaHQ9JzE4JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xNCcgZmlsbD0nI0IzRDJGRicgb3BhY2l0eT0nMC4yNDM4NjE2MDcnIHg9JzAnIHk9JzEnIHdpZHRoPSc1MCcgaGVpZ2h0PSc2JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xOCcgZmlsbD0ndXJsKCNsaW5lYXJHcmFkaWVudC0zKScgeD0nMCcgeT0nMzEnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\" style=\"width: 50px;height: 56px;display: block;\">\r\n            <span class=\"imgFont\">{{localizeService?.getValue('spread.crossTable.valueDimensionTitle')}}</span>\r\n          </div>\r\n          <ul class=\"f-utils-overflow-xhya f-utils-fill pb-1\" style=\"z-index: 20\" [dndList]=\"lists && lists.length ? lists[3].value : []\" (dndListChange)=\"dndListChange3($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[3].value : []); let i = index;\" [dndDraggable]=\"item\" class=\"mb-1 p-1\"\r\n              (dndMoved)=\"moved(i, lists[3].value)\" dndEffectAllowed=\"move\" (dndSelected)=\"models.selected = item\"\r\n              [ngClass]=\"{'selected': models.selected === item}\">\r\n              {{item.name}}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"simpleDemo f-utils-fill-flex-row\">\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body  f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"rowfield\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTZweCcgaGVpZ2h0PScxNnB4JyB2aWV3Qm94PScwIDAgMTYgMTYnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuihjOe7tOW6pjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJz48ZyBpZD0nMeOAgeafpeivolVJ6K6+6K6hJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtOTMxLjAwMDAwMCwgLTQ2MC4wMDAwMDApJyBzdHJva2U9JyM5Nzk3OTcnPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjknIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIwLjAwMDAwMCwgMzc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjHlpIfku70tMicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMS4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0yMicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMTIuMDAwMDAwLCAxMC4wMDAwMDApJz48cmVjdCBpZD0n55+p5b2iJyB4PScxLjUnIHk9JzIuNScgd2lkdGg9JzQuMjUnIGhlaWdodD0nNC4yNScgcng9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2iJyBmaWxsPScjRDhEOEQ4JyB4PSc4LjUnIHk9JzMuMzc1JyB3aWR0aD0nNScgaGVpZ2h0PScxJz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xMicgZmlsbD0nI0Q4RDhEOCcgeD0nOC41JyB5PScxMC4zNzUnIHdpZHRoPSc1JyBoZWlnaHQ9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTcnIGZpbGw9JyNEOEQ4RDgnIHg9JzguNScgeT0nNicgd2lkdGg9JzUnIGhlaWdodD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTMnIGZpbGw9JyNEOEQ4RDgnIHg9JzguNScgeT0nMTMnIHdpZHRoPSc1JyBoZWlnaHQ9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTYnIHg9JzEuNScgeT0nOS41JyB3aWR0aD0nNC4yNScgaGVpZ2h0PSc0LjI1JyByeD0nMSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvc3ZnPg==\" style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[1].name : ''}}</span>\r\n          </div>\r\n          <div id=\"rowfieldimg\" *ngIf=\"lists && lists.length ? (lists[1]?.value?.length < 1) : true\"\r\n            class=\"f-utils-absolute-all f-utils-flex-column justify-content-center align-items-center\"\r\n            role=\"presentation\" style=\"align-items: center; top: 36px; z-index: 10;\">\r\n            <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nNTBweCcgaGVpZ2h0PSc1MHB4JyB2aWV3Qm94PScwIDAgNTAgNTAnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6puWbvjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGRlZnM+PHJlY3QgaWQ9J3BhdGgtMScgeD0nMjYnIHk9JzMxJyB3aWR0aD0nMjQnIGhlaWdodD0nMTgnIHJ4PScwLjUnPjwvcmVjdD48ZmlsdGVyIHg9Jy02LjIlJyB5PSctOC4zJScgd2lkdGg9JzExMi41JScgaGVpZ2h0PScxMTYuNyUnIGZpbHRlclVuaXRzPSdvYmplY3RCb3VuZGluZ0JveCcgaWQ9J2ZpbHRlci0yJz48ZmVPZmZzZXQgZHg9JzAnIGR5PScwJyBpbj0nU291cmNlQWxwaGEnIHJlc3VsdD0nc2hhZG93T2Zmc2V0T3V0ZXIxJz48L2ZlT2Zmc2V0PjxmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JzAuNScgaW49J3NoYWRvd09mZnNldE91dGVyMScgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlR2F1c3NpYW5CbHVyPjxmZUNvbXBvc2l0ZSBpbj0nc2hhZG93Qmx1ck91dGVyMScgaW4yPSdTb3VyY2VBbHBoYScgb3BlcmF0b3I9J291dCcgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlQ29tcG9zaXRlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz0nMCAwIDAgMCAwLjExNDg0Mzc1IDAgMCAwIDAgMC41MTU4ODE4MTcgMCAwIDAgMCAxIDAgMCAwIDAuNzI2NDgwNTUxIDAnIHR5cGU9J21hdHJpeCcgaW49J3NoYWRvd0JsdXJPdXRlcjEnPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48bGluZWFyR3JhZGllbnQgeDE9JzUwJScgeTE9JzEwMCUnIHgyPSc1MCUnIHkyPScwJScgaWQ9J2xpbmVhckdyYWRpZW50LTMnPjxzdG9wIHN0b3AtY29sb3I9JyNEQUVCRkYnIHN0b3Atb3BhY2l0eT0nMC4yMDMwNDMwNTEnIG9mZnNldD0nMCUnPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPScjQjNEMkZGJyBzdG9wLW9wYWNpdHk9JzAuNDczMDM4NjgnIG9mZnNldD0nMTAwJSc+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjxnIGlkPSfpobXpnaItMScgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTEyMTQuMDAwMDAwLCAtNTY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMzAnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIzOS4wMDAwMDAsIDM3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTM05aSH5Lu9JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg0MC4wMDAwMDAsIDExNS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMzJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgzNy4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC01Jz48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTMnIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScyNicgeT0nMTAnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjxnIGlkPSfnn6nlvaLlpIfku70tNicgb3BhY2l0eT0nMC41OTYxMjE2NTInPjx1c2UgZmlsbD0nYmxhY2snIGZpbGwtb3BhY2l0eT0nMScgZmlsdGVyPSd1cmwoI2ZpbHRlci0yKScgeGxpbms6aHJlZj0nI3BhdGgtMSc+PC91c2U+PHJlY3Qgc3Ryb2tlLW9wYWNpdHk9JzAuMjIzNDQ4NDI3JyBzdHJva2U9JyMwMDUxQjknIHN0cm9rZS13aWR0aD0nMScgc3Ryb2tlLWxpbmVqb2luPSdzcXVhcmUnIGZpbGw9JyM3QkIyRjgnIGZpbGwtcnVsZT0nZXZlbm9kZCcgeD0nMjYuNScgeT0nMzEuNScgd2lkdGg9JzIzJyBoZWlnaHQ9JzE3JyByeD0nMC41Jz48L3JlY3Q+PC9nPjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTInIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScwJyB5PScxMCcgd2lkdGg9JzI0JyBoZWlnaHQ9JzE4JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xNCcgZmlsbD0nI0IzRDJGRicgb3BhY2l0eT0nMC4yNDM4NjE2MDcnIHg9JzAnIHk9JzEnIHdpZHRoPSc1MCcgaGVpZ2h0PSc2JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xOCcgZmlsbD0ndXJsKCNsaW5lYXJHcmFkaWVudC0zKScgeD0nMCcgeT0nMzEnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\" style=\"width: 50px;height: 56px;display: block;\">\r\n            <span class=\"imgFont\">{{localizeService?.getValue('spread.crossTable.rowDimensionTitle')}}</span>\r\n          </div>\r\n          <ul class=\"f-utils-overflow-xhya f-utils-fill pb-1\" style=\"z-index: 20\" [dndList]=\"lists && lists.length ? lists[1].value : []\" (dndListChange)=\"dndListChange1($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[1].value : []); let i = index;\" [dndDraggable]=\"item\" class=\"mb-1 p-1\"\r\n              (dndMoved)=\"moved(i, lists[1].value)\" dndEffectAllowed=\"move\" (dndSelected)=\"models.selected = item\"\r\n              [ngClass]=\"{'selected': models.selected === item}\">\r\n              {{item.name}}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"colfield\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTdweCcgaGVpZ2h0PScxN3B4JyB2aWV3Qm94PScwIDAgMTcgMTcnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6pjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJz48ZyBpZD0nMeOAgeafpeivolVJ6K6+6K6hJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtMTE1MC4wMDAwMDAsIC00NjAuMDAwMDAwKScgc3Ryb2tlPScjOTc5Nzk3Jz48ZyBpZD0n57yW57uELTI2JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg4OTguMDAwMDAwLCA3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMwJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgyMzkuMDAwMDAwLCAzNzUuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0yMeWkh+S7vS0zJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgxLjAwMDAwMCwgMC4wMDAwMDApJz48ZyBpZD0n57yW57uELTIyJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgyMC4xMjUwMDAsIDE4LjEyNTAwMCkgcm90YXRlKDkwLjAwMDAwMCkgdHJhbnNsYXRlKC0yMC4xMjUwMDAsIC0xOC4xMjUwMDApIHRyYW5zbGF0ZSgxMi4xMjUwMDAsIDEwLjEyNTAwMCknPjxyZWN0IGlkPSfnn6nlvaInIHg9JzEuNScgeT0nMi41JyB3aWR0aD0nNC4yNScgaGVpZ2h0PSc0LjI1JyByeD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaInIGZpbGw9JyNEOEQ4RDgnIHg9JzguNScgeT0nMy4zNzUnIHdpZHRoPSc1JyBoZWlnaHQ9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTEyJyBmaWxsPScjRDhEOEQ4JyB4PSc4LjUnIHk9JzEwLjM3NScgd2lkdGg9JzUnIGhlaWdodD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaLlpIfku70tNycgZmlsbD0nI0Q4RDhEOCcgeD0nOC41JyB5PSc2JyB3aWR0aD0nNScgaGVpZ2h0PScxJz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xMycgZmlsbD0nI0Q4RDhEOCcgeD0nOC41JyB5PScxMycgd2lkdGg9JzUnIGhlaWdodD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaLlpIfku70tNicgeD0nMS41JyB5PSc5LjUnIHdpZHRoPSc0LjI1JyBoZWlnaHQ9JzQuMjUnIHJ4PScxJz48L3JlY3Q+PC9nPjwvZz48L2c+PC9nPjwvZz48L2c+PC9zdmc+\" style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[2].name : ''}}</span>\r\n          </div>\r\n          <div id=\"colfieldimg\" *ngIf=\"lists && lists.length ? (lists[2]?.value?.length < 1) : true\"\r\n            class=\"f-utils-absolute-all f-utils-flex-column justify-content-center align-items-center\"\r\n            role=\"presentation\" style=\"align-items: center; top: 36px; z-index: 10;\">\r\n            <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nNTBweCcgaGVpZ2h0PSc1MHB4JyB2aWV3Qm94PScwIDAgNTAgNTAnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6puWbvjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGRlZnM+PHJlY3QgaWQ9J3BhdGgtMScgeD0nMjYnIHk9JzMxJyB3aWR0aD0nMjQnIGhlaWdodD0nMTgnIHJ4PScwLjUnPjwvcmVjdD48ZmlsdGVyIHg9Jy02LjIlJyB5PSctOC4zJScgd2lkdGg9JzExMi41JScgaGVpZ2h0PScxMTYuNyUnIGZpbHRlclVuaXRzPSdvYmplY3RCb3VuZGluZ0JveCcgaWQ9J2ZpbHRlci0yJz48ZmVPZmZzZXQgZHg9JzAnIGR5PScwJyBpbj0nU291cmNlQWxwaGEnIHJlc3VsdD0nc2hhZG93T2Zmc2V0T3V0ZXIxJz48L2ZlT2Zmc2V0PjxmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JzAuNScgaW49J3NoYWRvd09mZnNldE91dGVyMScgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlR2F1c3NpYW5CbHVyPjxmZUNvbXBvc2l0ZSBpbj0nc2hhZG93Qmx1ck91dGVyMScgaW4yPSdTb3VyY2VBbHBoYScgb3BlcmF0b3I9J291dCcgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlQ29tcG9zaXRlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz0nMCAwIDAgMCAwLjExNDg0Mzc1IDAgMCAwIDAgMC41MTU4ODE4MTcgMCAwIDAgMCAxIDAgMCAwIDAuNzI2NDgwNTUxIDAnIHR5cGU9J21hdHJpeCcgaW49J3NoYWRvd0JsdXJPdXRlcjEnPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48bGluZWFyR3JhZGllbnQgeDE9JzUwJScgeTE9JzEwMCUnIHgyPSc1MCUnIHkyPScwJScgaWQ9J2xpbmVhckdyYWRpZW50LTMnPjxzdG9wIHN0b3AtY29sb3I9JyNEQUVCRkYnIHN0b3Atb3BhY2l0eT0nMC4yMDMwNDMwNTEnIG9mZnNldD0nMCUnPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPScjQjNEMkZGJyBzdG9wLW9wYWNpdHk9JzAuNDczMDM4NjgnIG9mZnNldD0nMTAwJSc+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjxnIGlkPSfpobXpnaItMScgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTEyMTQuMDAwMDAwLCAtNTY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMzAnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIzOS4wMDAwMDAsIDM3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTM05aSH5Lu9JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg0MC4wMDAwMDAsIDExNS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMzJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgzNy4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC01Jz48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTMnIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScyNicgeT0nMTAnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjxnIGlkPSfnn6nlvaLlpIfku70tNicgb3BhY2l0eT0nMC41OTYxMjE2NTInPjx1c2UgZmlsbD0nYmxhY2snIGZpbGwtb3BhY2l0eT0nMScgZmlsdGVyPSd1cmwoI2ZpbHRlci0yKScgeGxpbms6aHJlZj0nI3BhdGgtMSc+PC91c2U+PHJlY3Qgc3Ryb2tlLW9wYWNpdHk9JzAuMjIzNDQ4NDI3JyBzdHJva2U9JyMwMDUxQjknIHN0cm9rZS13aWR0aD0nMScgc3Ryb2tlLWxpbmVqb2luPSdzcXVhcmUnIGZpbGw9JyM3QkIyRjgnIGZpbGwtcnVsZT0nZXZlbm9kZCcgeD0nMjYuNScgeT0nMzEuNScgd2lkdGg9JzIzJyBoZWlnaHQ9JzE3JyByeD0nMC41Jz48L3JlY3Q+PC9nPjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTInIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScwJyB5PScxMCcgd2lkdGg9JzI0JyBoZWlnaHQ9JzE4JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xNCcgZmlsbD0nI0IzRDJGRicgb3BhY2l0eT0nMC4yNDM4NjE2MDcnIHg9JzAnIHk9JzEnIHdpZHRoPSc1MCcgaGVpZ2h0PSc2JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xOCcgZmlsbD0ndXJsKCNsaW5lYXJHcmFkaWVudC0zKScgeD0nMCcgeT0nMzEnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\" style=\"width: 50px;height: 56px;display: block;\">\r\n            <span class=\"imgFont\">{{localizeService?.getValue('spread.crossTable.colDimensionTitle')}}</span>\r\n          </div>\r\n          <ul class=\"f-utils-overflow-xhya f-utils-fill pb-1\" style=\"z-index: 20\" [dndList]=\"lists && lists.length ? lists[2].value : []\"  (dndListChange)=\"dndListChange2($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[2].value : []); let i = index;\" [dndDraggable]=\"item\" class=\"mb-1 p-1\"\r\n              (dndMoved)=\"moved(i, lists[2].value)\" dndEffectAllowed=\"move\" (dndSelected)=\"models.selected = item\"\r\n              [ngClass]=\"{'selected': models.selected === item}\">\r\n              {{item.name}}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
                styles: [".simpleDemo ul{min-height:42px;padding:0}.card-title,.demo-header{text-align:center}.title{margin:20px 0}.simpleDemo ul .dndDraggingSource{display:none}.simpleDemo ul .dndPlaceholder{background:rgba(56,143,255,.06);border:1px dashed #388fff;box-shadow:0 0 4px 0 rgba(13,95,201,.22);margin:.25rem!important;padding:.25rem!important}.simpleDemo ul li{background:rgba(235,244,254,.84);border:1px solid #388fff;box-shadow:0 0 10px 0 rgba(63,113,177,.22);border-radius:3px;height:28px;font-family:PingFangSC-Regular;font-size:13px;color:#388fff;margin:.25rem!important;padding:.25rem!important}#unselectFieldList li{border:none;background-color:rgba(0,0,0,0);box-shadow:0 0 #000;border-radius:3px;height:28px;margin:.25rem!important;padding:.25rem!important}#unselectFieldList li:hover{background:#f4f5f9}#unselectFieldList .dndPlaceholder{background:rgba(56,143,255,.06);border:1px dashed #388fff;box-shadow:0 0 4px 0 rgba(13,95,201,.22);margin:.25rem!important;padding:.25rem!important}.unselectField{font-family:PingFangSC-Regular;font-size:13px;color:rgba(0,0,0,.85)}.unselectFieldFront{font-family:PingFangSC-Medium;font-size:13px;color:#b4bccc}.simpleDemo ul li.selected{background-color:#dff0d8;color:#3c763d}.current-model{background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px;padding:18px 22px}.slicer{height:220px;position:relative}.headerMenu{position:fixed;display:none;top:0;left:0}.cardTitle{background:#f5f7fa;border-radius:3px 3px 0 0;height:36px}.dimensionTitle{font-family:PingFangSC-Medium;font-size:14px;color:rgba(0,0,0,.65);line-height:20px}.imgFont{font-family:PingFangSC-Regular;font-size:13px;color:#b4bccc}"]
            }] }
];
/** @nocollapse */
DimensionSettingComponent.ctorParameters = () => [
    { type: Injector }
];
DimensionSettingComponent.propDecorators = {
    controlType: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    queryId: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    qoId: [{ type: Input }],
    voId: [{ type: Input }],
    groupType: [{ type: Input }],
    spread: [{ type: Input }],
    conditionExpression: [{ type: Input }],
    jointsearchInfoList: [{ type: Input }],
    qdpView: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnsSettingComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.hideColCache = []; // 隐藏列
        // 隐藏列
        this.showColCache = []; // 显示列
        // 显示列
        this.groupColCache = []; // 分组列
        // 分组列
        this.allColCache = []; // 全部列
        // 全部列
        this.searchText = '';
        this.isCompare = false;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
        this.lists = [];
        this.listsCache = [];
        this.multiSheetsSchemaIds = {};
        this.models = {
            selected: null,
            lists: this.lists
        };
        this.formInline = true;
        this.isOrNotPaging = true;
        // formatTypeData: any = [
        //   { name: '请选择', value: 0 },
        //   { name: '数字', value: 1 },
        //   { name: '日期', value: 2 },
        //   { name: '逻辑', value: 3 }
        // ];
        // formatTypeSelectValue: any = this.formatTypeData[0].value;
        // formatText = '';
        this.aggreData = [
            { name: '请选择', value: 0 },
            { name: '合计', value: 1 },
            { name: '最小值', value: 2 },
            { name: '最大值', value: 3 },
            { name: '计数', value: 4 },
            { name: '平均值', value: 5 }
        ];
        this.pageSelectValue = this.aggreData[0].value;
        this.pageText = '';
        this.colIsGroup = false;
        this.groupSelectValue = this.aggreData[0].value;
        this.groupSubSelectValue = this.aggreData[0].value;
        this.groupText = '';
        this.totalSelectValue = this.aggreData[0].value;
        this.totalText = '';
        this.currentColIndex = 0;
        this.enumType = [
            { name: '索引', value: '0' },
            { name: '编号', value: '1' },
            { name: '名称', value: '2' }
        ];
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.renderService = this.injector.get(RenderService);
            this.msgService = this.injector.get(MessagerService);
            this.formErrorService = this.injector.get(FormErrorService);
            this.schemaManagerService = this.injector.get(SchemaManagerService);
            this.localId = this.injector.get(LOCALE_ID) || DEFAULT_LANGUAGE;
            this.formInline = this.localId.toLowerCase() === DEFAULT_LANGUAGE;
            this.aggreData = this.localizeService.getValue('ideCmp.schemaManager.columnOption.aggregateData');
            this.enumType = this.localizeService.getValue('ideCmp.schemaManager.columnOption.enumType');
        }
        this.initLists();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const eventId = RtfServices.getTabId(this.queryId);
        EventBus.register('pagingModeChanges', this.handlePagingModeChanged.bind(this), eventId + 'columnsSetting');
        EventBus.register('schemaValueChanged', this.handleSchemaValueChanged.bind(this), eventId + 'columnsSetting');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    initLists() {
        this.lists = [];
        for (let i = 0; i < 3; i++) {
            this.lists.push({
                name: this.localizeService.getValue('spread.crossTable.columnSetting')[i],
                value: []
            });
        }
    }
    /**
     * 初始化交叉表维度设置
     * @return {?}
     */
    initCrosstab() {
        // this.renderService.renderObject.currentSchemaValueChanger.subscribe((schemaValue: any) => {
        // });
    }
    /**
     * @private
     * @param {?} schemaValue
     * @return {?}
     */
    handleSchemaValueChanged(schemaValue) {
        if (schemaValue) {
            this.schemaValue = schemaValue;
            if (schemaValue.id === 1 || schemaValue.id === '1') {
                this.lists[0].value = [];
                this.listsCache = [];
                this.lists[1].value = [];
                this.lists[2].value = [];
                return;
            }
            if (this.controlType !== 'crosstab') {
                this.colList = schemaValue.schemaValue.columnOption.colList;
                if (this.colList) {
                    this.hideColCache = []; // 隐藏列
                    this.showColCache = []; // 显示列
                    this.groupColCache = []; // 分组列
                    this.allColCache = []; // 全部列
                    for (let i = 0; i < this.colList.length; i++) {
                        this.getSubColumns(this.colList[i], null, '');
                    }
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.lists[0].value = this.hideColCache;
                        this.listsCache = this.hideColCache;
                        this.lists[1].value = this.showColCache;
                        this.lists[2].value = this.groupColCache;
                    }));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} pid
     * @return {?}
     */
    getSubColumns(col, colList, pid) {
        if (col) {
            col['id'] = EventBus.guid();
            col['pid'] = pid;
            /** @type {?} */
            const pcol = JSON.parse(JSON.stringify(col));
            pcol.childList = [];
            this.allColCache.push(pcol);
            if (col.childList && col.childList.length) {
                this.getSubColumns(null, col.childList, col['id']);
            }
            else {
                if (col.isGroup) {
                    this.groupColCache.push(col);
                }
                else if (col.visible) {
                    this.showColCache.push(col);
                }
                else {
                    this.hideColCache.push(col);
                }
            }
        }
        else {
            for (let i = 0; i < colList.length; i++) {
                colList[i]['id'] = EventBus.guid();
                colList[i]['pid'] = pid;
                /** @type {?} */
                const pcol = JSON.parse(JSON.stringify(colList[i]));
                pcol.childList = [];
                this.allColCache.push(pcol);
                if (colList[i].childList && colList[i].childList.length) {
                    this.getSubColumns(null, colList[i].childList, colList[i]['id']);
                }
                else {
                    if (colList[i].isGroup) {
                        this.groupColCache.push(colList[i]);
                    }
                    else if (colList[i].visible) {
                        this.showColCache.push(colList[i]);
                    }
                    else {
                        this.hideColCache.push(colList[i]);
                    }
                }
            }
        }
    }
    /**
     * @param {?} index
     * @param {?} list
     * @return {?}
     */
    moved(index, list) {
        list.splice(index, 1);
        this.selectedDimesion();
        if (this.schemaValue) {
            if (this.schemaValue.isProtected === 1 || this.schemaValue.isProtected === '1') {
                this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                return;
            }
            this.schemaValue.schemaValue = JSON.stringify(this.schemaValue.schemaValue);
            this.schemaManagerService.saveSchema({ 'schema': JSON.stringify(this.schemaValue) }, this.queryRelativeUrl).subscribe((/**
             * @return {?}
             */
            () => {
                this.renderService.render({ multiSheetsSchemaIds: this.multiSheetsSchemaIds, curSheet: this.curSheet, multiSheets: this.multiSheets, schemaId: this.schemaValue.id, queryId: this.queryId, spread: this.spread, controlType: this.controlType, qoManagerCode: this.qoManagerCode, queryRelativeUrl: this.queryRelativeUrl, schemaValue: this.schemaValue, filterCondition: this.conditionExpression, groupType: this.groupType, voId: this.voId, jointsearchInfoList: this.jointsearchInfoList, fromCache: true, qdpView: this.qdpView });
                this.schemaValue.schemaValue = typeof this.schemaValue.schemaValue === 'string' ? JSON.parse(this.schemaValue.schemaValue) : this.schemaValue.schemaValue;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.formErrorService.exception(error.Message, error);
            }));
        }
    }
    /**
     * @return {?}
     */
    selectedDimesion() {
        this.colList = [];
        if (this.lists[0]) {
            this.lists[0].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.isGroup = false;
                value.visible = false;
            }));
            this.colList = this.lists[0].value;
        }
        if (this.lists[1]) {
            this.lists[1].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.isGroup = false;
                value.visible = true;
            }));
            if (this.colList.length === 0) {
                this.colList = this.lists[1].value;
            }
            else {
                this.colList = this.colList.concat(this.lists[1].value);
            }
        }
        if (this.lists[2]) {
            this.lists[2].value.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                value.isGroup = true;
                value.visible = false;
            }));
            if (this.colList.length === 0) {
                this.colList = this.lists[2].value;
            }
            else {
                this.colList = this.colList.concat(this.lists[2].value);
            }
        }
        if (this.colList.length > 0) {
            for (let i = 0; i < this.colList.length; i++) {
                if (this.colList[i].isGroup)
                    continue;
                /** @type {?} */
                const filterCondition = { pid: this.colList[i]['pid'] };
                if (i == 0 && this.colList.length > 1) {
                    if (this.colList.length > 2) {
                        if (this.colList[i]['pid'] && this.colList[i + 2]['pid'] && this.colList[i]['pid'] == this.colList[i + 2]['pid']) {
                            this.colList[i]['pid'] = this.colList[i + 2]['pid'];
                        }
                    }
                    else {
                        if (this.colList[i]['pid'] && this.colList[i]['pid'] != this.colList[i + 1]['pid'] && filter(this.colList, filterCondition) && filter(this.colList, filterCondition).length > 1) {
                            this.colList[i]['pid'] = '';
                        }
                    }
                }
                else if (i == (this.colList.length - 1) && this.colList.length > 1) {
                    if (this.colList[i]['pid'] && this.colList[i]['pid'] != this.colList[i - 1]['pid'] && filter(this.colList, filterCondition) && filter(this.colList, filterCondition).length > 1) {
                        this.colList[i]['pid'] = '';
                    }
                }
                else if (i > 0 && i < (this.colList.length - 1)) {
                    if (this.colList[i - 1]['pid'] && this.colList[i + 1]['pid'] && this.colList[i - 1]['pid'] == this.colList[i + 1]['pid']) {
                        this.colList[i]['pid'] = this.colList[i - 1]['pid'];
                    }
                }
            }
            for (let i = 0; i < this.colList.length; i++) {
                this.recursiveFindParent(this.colList, i, this.colList[i]['pid']);
            }
            /** @type {?} */
            const objCache = {};
            for (let i = 0; i < this.colList.length; i++) {
                objCache[this.colList[i]['id']] = this.colList[i];
            }
            /** @type {?} */
            const result = [];
            for (const key in objCache) {
                /** @type {?} */
                const parent = objCache[objCache[key]['pid']];
                if (!parent) {
                    result.push(objCache[key]);
                }
                else {
                    parent['childList'].push(objCache[key]);
                }
            }
            if (this.colList.length > 0) {
                try {
                    this.isCompare = JSONUtils.Compare({ schema: this.schemaValue.schemaValue.columnOption.colList }, { schema: result });
                }
                catch (e) { }
                this.schemaValue.schemaValue.columnOption.colList = result;
                // this.schemaValue.schemaValue.columnOption.colList = this.colList;
            }
        }
    }
    /**
     * @private
     * @param {?} colList
     * @param {?} index
     * @param {?} pid
     * @return {?}
     */
    recursiveFindParent(colList, index, pid) {
        /** @type {?} */
        const colIndex = this.allColCache.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id == pid));
        if (colIndex >= 0 && this.colList.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === this.allColCache[colIndex].id)) < 0) {
            this.colList.splice(index, 0, this.allColCache[colIndex]);
            if (this.allColCache[colIndex]['pid']) {
                this.recursiveFindParent(colList, index, this.allColCache[colIndex]['pid']);
            }
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    dimensionSearchValueOnChange(val) {
        if (val) {
            /** @type {?} */
            const searchCols = this.listsCache.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.name.indexOf(val) >= 0));
            this.lists[0].value = [...searchCols];
        }
        else {
            this.lists[0].value = [...this.listsCache];
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange0($event) {
        if (this.lists && this.lists.length) {
            this.lists[0].value = $event;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange1($event) {
        if (this.lists && this.lists.length) {
            this.lists[1].value = $event;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange2($event) {
        if (this.lists && this.lists.length) {
            this.lists[2].value = $event;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dndListChange3($event) {
        if (this.lists && this.lists.length) {
            this.lists[3].value = $event;
        }
    }
    /**
     * @private
     * @param {?} pagingMode
     * @return {?}
     */
    handlePagingModeChanged(pagingMode) {
        this.isOrNotPaging = pagingMode.value === 1;
    }
}
ColumnsSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'columns-setting',
                template: "<div class=\"container f-utils-fill-flex-column h-100\">\r\n  <div class=\"simpleDemo f-utils-fill-flex-row\">\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"unselected\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img\r\n                src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTZweCcgaGVpZ2h0PScxNnB4JyB2aWV3Qm94PScwIDAgMTYgMTYnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuW+hemAieWtl+autTwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJyBvcGFjaXR5PScwLjQ1OTU0MjQxMSc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTkzMi4wMDAwMDAsIC0xNTEuMDAwMDAwKScgZmlsbD0nIzAwMDAwMCcgZmlsbC1ydWxlPSdub256ZXJvJz48ZyBpZD0n57yW57uELTI2JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg4OTguMDAwMDAwLCA3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTI0JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgyMC4wMDAwMDAsIDY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjEnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDEuMDAwMDAwLCAxLjAwMDAwMCknPjxnIGlkPSdzaG91Y2FuZy0yJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgxMy4wMDAwMDAsIDEwLjAwMDAwMCknPjxwYXRoIGQ9J00xMS41NjA5NDkyLDE0LjQ3MjcxODMgQzExLjM2NDAzMzIsMTQuNDcyNzE4MyAxMS4xNDI4MzU5LDE0LjQxNjE4MzYgMTAuOTM3NTI1NCwxNC4zMTM1NjI1IEw4LjAwNzc1MTk1LDEyLjg0ODE4MzYgTDUuMDU5ODM1OTQsMTQuMzExMTgzNiBDNC44NzMxNDY0OCwxNC40MTA1NzgxIDQuNjU5NDQxNDEsMTQuNDYyODczIDQuNDQxNTI1MzksMTQuNDYyODczIEM0LjE1ODM1ODQyLDE0LjQ2MzkxNTcgMy44ODI0MTU1NCwxNC4zNzM1NDU4IDMuNjU0NzIyNjYsMTQuMjA1MTk5MiBDMy4yNDIxNDY0OCwxMy44OTU4MDQ3IDMuMDMwNzM4MjgsMTMuMzU5NTkzNyAzLjEyODMyODEyLDEyLjg3MTQ5NDEgTDMuNzMxMjQ0MTQsOS43NDM4ODg2NyBMMS40MjAzMjgxMiw3LjU4OTc4OTA2IEMxLjA2MzM4MzQyLDcuMjI4MTM2ODYgMC45MjY0MjQ0NTgsNi43MDM1NjQzOCAxLjA2MTAxNzU4LDYuMjEzNTc4MTIgTDEuMDY1NjM4NjcsNi4xOTc2OTE0MSBDMS4yMzM2Mzg2Nyw1LjY5NDE4MzU5IDEuNjUwNDEyMTEsNS4zNDEzODA4NiAyLjE1NTc1MTk1LDUuMjczNjkxNDEgTDUuMzY2NDQxNDEsNC42ODk5MDIzNCBMNi44MDc1MjUzOSwxLjc2MzA0MTAyIEM3LjAzOTAxNzU4LDEuMjk5NjMyODEgNy41MDk4NDk2MSwxLjAwMTg1OTM3IDguMDA3NzUxOTUsMS4wMDE4NTkzNyBDOC41MjcxNDY0OCwxLjAwMTg1OTM3IDkuMDEwMTQ2NDgsMS4zMTA4NDM3NSA5LjIxMjY1NDMsMS43NzE0NDkyMiBMMTAuNjQ5MTMwOSw0LjY4OTAyNzM0IEwxMy44NjAzMTI1LDUuMjUwNDQ5MjIgQzE0LjM2OTg3NDcsNS4zMjQzMDAwMyAxNC43ODg3MTU0LDUuNjkwMjA3NjIgMTQuOTMwMzI4MSw2LjE4NTIzNjMzIEMxNS4wODg4NDQ4LDYuNjcxNzczNDkgMTQuOTU5MzY4Miw3LjIwNjExMjA4IDE0LjU5NTcyMjcsNy41NjYxMjMwNSBMMTQuNTg3ODIwMyw3LjU3NDAzOTA2IEwxMi4yODM0MjU4LDkuNzQ0MDM5MDYgTDEyLjg2NTgyMDMsMTIuODc3MjIyNyBDMTIuOTU5NjA5NCwxMy4zNzg0MzM2IDEyLjc2MDMyODEsMTMuODg0MzIwMyAxMi4zNDU0NDE0LDE0LjE5OTc0NDEgQzEyLjEyMzMxODEsMTQuMzc4NjAyMiAxMS44NDYxMjE3LDE0LjQ3NTA0MTMgMTEuNTYwOTQ5MiwxNC40NzI3MTgzIEwxMS41NjA5NDkyLDE0LjQ3MjcxODMgWiBNOC4wMDg4MDQ2OSwxMS43NDY1MDM5IEwxMS4wODYyNzU0LDEzLjI4NTQ2NDggQzExLjE3NjcxNDgsMTMuMzMxMTAxNiAxMS4yODA4ODA5LDEzLjM1OTY2MjEgMTEuMzUyMDU2NiwxMy4zNTk2NjIxIEMxMS40NjE4MjgxLDEzLjM1OTY2MjEgMTEuNTYzNzUyLDEzLjMyNTkxOTkgMTEuNjM4NDQxNCwxMy4yNjM1NDg4IEwxMS42NTI1MDk4LDEzLjI1MjA2NDUgQzExLjgyNzM3MywxMy4xMjA3NDYxIDExLjkxMjU0ODgsMTIuOTEyNDI3NyAxMS44NzQzMzU5LDEyLjcwODEwMTYgTDExLjI1NDgzNTksOS4zNzE5NzI2NiBMMTMuNzA0NDk0MSw3LjA2NTE4NTU1IEMxMy44NTQ3NzU0LDYuOTEyNzMwNDcgMTMuOTA2MjIyNyw2LjY5NDQwNDMgMTMuODM5NDM1NSw2LjQ5MzU2NDQ1IEwxMy44MzI4NzMsNi40NzI1MDk3NyBDMTMuNzc4OTIxMiw2LjI3ODAxNzY2IDEzLjYxNDIyNjEsNi4xMzQ0MTAzMyAxMy40MTQxOTkyLDYuMTA3NDQzMzYgTDEzLjQwMDE5OTIsNi4xMDUyODMyIEwxMC4wMTA4MDQ3LDUuNTEyNjYyMTEgTDguNDg1NDg4MjgsMi40MTQxOTE0MSBDOC40MTEyMDg5OCwyLjI0MTA3ODEyIDguMjEwNDUxMTcsMi4xMTU0MzM1OSA4LjAwNzQ1MTE3LDIuMTE1NDMzNTkgQzcuODA4MDE5NTMsMi4xMTU0MzM1OSA3LjYxNzMzNzg5LDIuMjQwMjQ0MTQgNy41MjA2Nzc3MywyLjQzMzA4NTk0IEw2LjAwNTA1NDY5LDUuNTExMzM1OTQgTDIuNTk3NzIyNjYsNi4xMzAyODkwNiBDMi4zOTA4MTI1LDYuMTU2MjUxOTUgMi4yMzAwMTc1OCw2LjI5MzczNjMzIDIuMTU1ODIwMzEsNi41MDgwNzAzMSBDMi4xMDMxMDE1Niw2LjcwNDAwMTk1IDIuMTY1NDcyNjYsNi45Mzk4OTY0OCAyLjMwOTUzMzIsNy4wODcxMTUyMyBMNC43NjE4NTc0Miw5LjM3MjM5NjQ4IEw0LjExODI2NzU4LDEyLjcxMDM1NzQgQzQuMDc5NjMwODYsMTIuOTAzMjY3NiA0LjE3MDk3MjY2LDEzLjEyNTUxNzYgNC4zNDAwOTM3NSwxMy4yNTI1MDIgQzQuNDI0ODU5MzcsMTMuMzE2MjEyOSA0LjUzNDY5OTIyLDEzLjM1MTM0OTYgNC42NDk4NDM3NSwxMy4zNTEzNDk2IEM0LjczODYwMTU2LDEzLjM1MTM0OTYgNC44MjM4MDQ2OSwxMy4zMzA2MjMgNC44OTcxNjc5NywxMy4yOTExMzg3IEw0LjkwNzcyMjY2LDEzLjI4NDk4NjMgTDguMDA4ODA0NjksMTEuNzQ2NTAzOSBaJyBpZD0n5b2i54q2Jz48L3BhdGg+PC9nPjwvZz48L2c+PC9nPjwvZz48L2c+PC9zdmc+\"\r\n                style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[0].name : ''}}</span>\r\n          </div>\r\n          <input-group [groupText]=\"groupIcon\" class=\"m-1\" [(value)]=\"searchText\"\r\n            (valueChange)=\"dimensionSearchValueOnChange($event)\"></input-group>\r\n          <ul id=\"unselectFieldList\" class=\"f-utils-overflow-xhya f-utils-fill pb-1\"\r\n            [dndList]=\"lists && lists.length ? lists[0].value : []\" (dndListChange)=\"dndListChange0($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[0].value : []); let i = index;\" [dndDraggable]=\"item\"\r\n              (dndMoved)=\"moved(i, lists[0].value)\" dndEffectAllowed=\"move\" (dndSelected)=\"models.selected = item\"\r\n              [ngClass]=\"{'selected': models.selected === item}\">\r\n              <span class=\"unselectFieldFront mr-2\"\r\n                *ngIf=\"'int,float,double,decimal,number'.includes(item.type)==false\">Abc</span>\r\n              <span class=\"unselectFieldFront mr-2\"\r\n                *ngIf=\"'int,float,double,decimal,number'.includes(item.type)==true\">123</span>\r\n              <span class=\"unselectField\">{{item.name}}</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body  f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"rowfield\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img\r\n                src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTZweCcgaGVpZ2h0PScxNnB4JyB2aWV3Qm94PScwIDAgMTYgMTYnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuihjOe7tOW6pjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJz48ZyBpZD0nMeOAgeafpeivolVJ6K6+6K6hJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtOTMxLjAwMDAwMCwgLTQ2MC4wMDAwMDApJyBzdHJva2U9JyM5Nzk3OTcnPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjknIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIwLjAwMDAwMCwgMzc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjHlpIfku70tMicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMS4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0yMicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMTIuMDAwMDAwLCAxMC4wMDAwMDApJz48cmVjdCBpZD0n55+p5b2iJyB4PScxLjUnIHk9JzIuNScgd2lkdGg9JzQuMjUnIGhlaWdodD0nNC4yNScgcng9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2iJyBmaWxsPScjRDhEOEQ4JyB4PSc4LjUnIHk9JzMuMzc1JyB3aWR0aD0nNScgaGVpZ2h0PScxJz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xMicgZmlsbD0nI0Q4RDhEOCcgeD0nOC41JyB5PScxMC4zNzUnIHdpZHRoPSc1JyBoZWlnaHQ9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTcnIGZpbGw9JyNEOEQ4RDgnIHg9JzguNScgeT0nNicgd2lkdGg9JzUnIGhlaWdodD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTMnIGZpbGw9JyNEOEQ4RDgnIHg9JzguNScgeT0nMTMnIHdpZHRoPSc1JyBoZWlnaHQ9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTYnIHg9JzEuNScgeT0nOS41JyB3aWR0aD0nNC4yNScgaGVpZ2h0PSc0LjI1JyByeD0nMSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvc3ZnPg==\"\r\n                style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[1].name : ''}}</span>\r\n          </div>\r\n          <div id=\"rowfieldimg\" *ngIf=\"lists && lists.length ? (lists[1]?.value?.length < 1) : true\"\r\n            class=\"f-utils-absolute-all f-utils-flex-column justify-content-center align-items-center\"\r\n            role=\"presentation\" style=\"align-items: center; top: 36px; z-index: 10;\">\r\n            <img\r\n              src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nNTBweCcgaGVpZ2h0PSc1MHB4JyB2aWV3Qm94PScwIDAgNTAgNTAnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6puWbvjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGRlZnM+PHJlY3QgaWQ9J3BhdGgtMScgeD0nMjYnIHk9JzMxJyB3aWR0aD0nMjQnIGhlaWdodD0nMTgnIHJ4PScwLjUnPjwvcmVjdD48ZmlsdGVyIHg9Jy02LjIlJyB5PSctOC4zJScgd2lkdGg9JzExMi41JScgaGVpZ2h0PScxMTYuNyUnIGZpbHRlclVuaXRzPSdvYmplY3RCb3VuZGluZ0JveCcgaWQ9J2ZpbHRlci0yJz48ZmVPZmZzZXQgZHg9JzAnIGR5PScwJyBpbj0nU291cmNlQWxwaGEnIHJlc3VsdD0nc2hhZG93T2Zmc2V0T3V0ZXIxJz48L2ZlT2Zmc2V0PjxmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JzAuNScgaW49J3NoYWRvd09mZnNldE91dGVyMScgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlR2F1c3NpYW5CbHVyPjxmZUNvbXBvc2l0ZSBpbj0nc2hhZG93Qmx1ck91dGVyMScgaW4yPSdTb3VyY2VBbHBoYScgb3BlcmF0b3I9J291dCcgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlQ29tcG9zaXRlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz0nMCAwIDAgMCAwLjExNDg0Mzc1IDAgMCAwIDAgMC41MTU4ODE4MTcgMCAwIDAgMCAxIDAgMCAwIDAuNzI2NDgwNTUxIDAnIHR5cGU9J21hdHJpeCcgaW49J3NoYWRvd0JsdXJPdXRlcjEnPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48bGluZWFyR3JhZGllbnQgeDE9JzUwJScgeTE9JzEwMCUnIHgyPSc1MCUnIHkyPScwJScgaWQ9J2xpbmVhckdyYWRpZW50LTMnPjxzdG9wIHN0b3AtY29sb3I9JyNEQUVCRkYnIHN0b3Atb3BhY2l0eT0nMC4yMDMwNDMwNTEnIG9mZnNldD0nMCUnPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPScjQjNEMkZGJyBzdG9wLW9wYWNpdHk9JzAuNDczMDM4NjgnIG9mZnNldD0nMTAwJSc+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjxnIGlkPSfpobXpnaItMScgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTEyMTQuMDAwMDAwLCAtNTY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMzAnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIzOS4wMDAwMDAsIDM3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTM05aSH5Lu9JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg0MC4wMDAwMDAsIDExNS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMzJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgzNy4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC01Jz48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTMnIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScyNicgeT0nMTAnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjxnIGlkPSfnn6nlvaLlpIfku70tNicgb3BhY2l0eT0nMC41OTYxMjE2NTInPjx1c2UgZmlsbD0nYmxhY2snIGZpbGwtb3BhY2l0eT0nMScgZmlsdGVyPSd1cmwoI2ZpbHRlci0yKScgeGxpbms6aHJlZj0nI3BhdGgtMSc+PC91c2U+PHJlY3Qgc3Ryb2tlLW9wYWNpdHk9JzAuMjIzNDQ4NDI3JyBzdHJva2U9JyMwMDUxQjknIHN0cm9rZS13aWR0aD0nMScgc3Ryb2tlLWxpbmVqb2luPSdzcXVhcmUnIGZpbGw9JyM3QkIyRjgnIGZpbGwtcnVsZT0nZXZlbm9kZCcgeD0nMjYuNScgeT0nMzEuNScgd2lkdGg9JzIzJyBoZWlnaHQ9JzE3JyByeD0nMC41Jz48L3JlY3Q+PC9nPjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTInIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScwJyB5PScxMCcgd2lkdGg9JzI0JyBoZWlnaHQ9JzE4JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xNCcgZmlsbD0nI0IzRDJGRicgb3BhY2l0eT0nMC4yNDM4NjE2MDcnIHg9JzAnIHk9JzEnIHdpZHRoPSc1MCcgaGVpZ2h0PSc2JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xOCcgZmlsbD0ndXJsKCNsaW5lYXJHcmFkaWVudC0zKScgeD0nMCcgeT0nMzEnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\"\r\n              style=\"width: 50px;height: 56px;display: block;\">\r\n            <!-- <span class=\"imgFont\">{{localizeService?.getValue('spread.crossTable.rowDimensionTitle')}}</span> -->\r\n          </div>\r\n          <ul class=\"f-utils-overflow-xhya f-utils-fill pb-1\" style=\"z-index: 20\"\r\n            [dndList]=\"lists && lists.length ? lists[1].value : []\" (dndListChange)=\"dndListChange1($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[1].value : []); let i = index;\" [dndDraggable]=\"item\"\r\n              class=\"mb-1 p-1\" (dndMoved)=\"moved(i, lists[1].value)\" dndEffectAllowed=\"move\"\r\n              (dndSelected)=\"models.selected = item\" [ngClass]=\"{'selected': models.selected === item}\">\r\n              {{item.name}}\r\n              <!-- <div class=\"btn-group mr-3\" fDropdown>\r\n                <button class=\"btn btn-link dropdown-toggle\" fDropdownToggle type=\"button\">\r\n                  {{item.name}}\r\n                </button>\r\n                <div class=\"dropdown-menu\" fDropdownMenu>\r\n                  <div class=\"flex-fill farris-split-section farris-overflow-hidden\">\r\n                    <div class=\"farris-form farris-card-content-bg\">\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && controlType!='treelist' && isOrNotPaging)\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colPageText\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.pageTotal')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [(ngModel)]=\"pageText\" id=\"colPageText\"></input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && controlType!='treelist' && isOrNotPaging)\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colPageAggre\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.pageTotalType')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list id=\"colPageAggre\" [(ngModel)]=\"pageSelectValue\" [data]=\"aggreData\"\r\n                                [textField]=\"'name'\" [idField]=\"'value'\" [enableClear]=\"false\"></farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && controlType!='treelist')\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colGroupText\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.groupTotal')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [(ngModel)]=\"groupText\" id=\"colGroupText\"></input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && controlType!='treelist')\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colGroupAggre\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.groupSubTotalType')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list id=\"colGroupAggre\" [disabled]=\"colIsGroup\"\r\n                                [(ngModel)]=\"groupSubSelectValue\" [data]=\"aggreData\" [textField]=\"'name'\"\r\n                                [idField]=\"'value'\" [enableClear]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && controlType!='treelist')\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colGroupAggre\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.groupTotalType')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list id=\"colGroupAggre\" [disabled]=\"colIsGroup\"\r\n                                [(ngModel)]=\"groupSelectValue\" [data]=\"aggreData\" [textField]=\"'name'\"\r\n                                [idField]=\"'value'\" [enableClear]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && !isOrNotPaging)\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colTotalText\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.aggregateTotal')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [(ngModel)]=\"totalText\" id=\"colTotalText\"></input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-12 col-md-12 col-lg-12\"\r\n                        *ngIf=\"(controlType!='crosstab' && !isOrNotPaging)\">\r\n                        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\"\r\n                          [class.farris-form-inline]=\"formInline\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <label class=\"col-form-label\" for=\"colTotalAggre\">\r\n                              <span\r\n                                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.totalType')}}:</span>\r\n                            </label>\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list id=\"colTotalAggre\" [(ngModel)]=\"totalSelectValue\" [data]=\"aggreData\"\r\n                                [textField]=\"'name'\" [idField]=\"'value'\" [enableClear]=\"false\"></farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div> -->\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"simpleDemo f-utils-fill-flex-row\" *ngIf=\"controlType=='list'\">\r\n    <div class=\"col-md-6 f-utils-flex-column p-1\">\r\n      <div class=\"card f-utils-fill-flex-column\">\r\n        <div class=\"card-body f-utils-fill-flex-column p-0\">\r\n          <div class=\"cardTitle mb-2 pt-2\">\r\n            <span id=\"colfield\" class=\"f-icon pt-1 pr-2 pl-2\" role=\"presentation\">\r\n              <img\r\n                src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTdweCcgaGVpZ2h0PScxN3B4JyB2aWV3Qm94PScwIDAgMTcgMTcnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6pjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJz48ZyBpZD0nMeOAgeafpeivolVJ6K6+6K6hJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtMTE1MC4wMDAwMDAsIC00NjAuMDAwMDAwKScgc3Ryb2tlPScjOTc5Nzk3Jz48ZyBpZD0n57yW57uELTI2JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg4OTguMDAwMDAwLCA3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMwJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgyMzkuMDAwMDAwLCAzNzUuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0yMeWkh+S7vS0zJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgxLjAwMDAwMCwgMC4wMDAwMDApJz48ZyBpZD0n57yW57uELTIyJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgyMC4xMjUwMDAsIDE4LjEyNTAwMCkgcm90YXRlKDkwLjAwMDAwMCkgdHJhbnNsYXRlKC0yMC4xMjUwMDAsIC0xOC4xMjUwMDApIHRyYW5zbGF0ZSgxMi4xMjUwMDAsIDEwLjEyNTAwMCknPjxyZWN0IGlkPSfnn6nlvaInIHg9JzEuNScgeT0nMi41JyB3aWR0aD0nNC4yNScgaGVpZ2h0PSc0LjI1JyByeD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaInIGZpbGw9JyNEOEQ4RDgnIHg9JzguNScgeT0nMy4zNzUnIHdpZHRoPSc1JyBoZWlnaHQ9JzEnPjwvcmVjdD48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTEyJyBmaWxsPScjRDhEOEQ4JyB4PSc4LjUnIHk9JzEwLjM3NScgd2lkdGg9JzUnIGhlaWdodD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaLlpIfku70tNycgZmlsbD0nI0Q4RDhEOCcgeD0nOC41JyB5PSc2JyB3aWR0aD0nNScgaGVpZ2h0PScxJz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xMycgZmlsbD0nI0Q4RDhEOCcgeD0nOC41JyB5PScxMycgd2lkdGg9JzUnIGhlaWdodD0nMSc+PC9yZWN0PjxyZWN0IGlkPSfnn6nlvaLlpIfku70tNicgeD0nMS41JyB5PSc5LjUnIHdpZHRoPSc0LjI1JyBoZWlnaHQ9JzQuMjUnIHJ4PScxJz48L3JlY3Q+PC9nPjwvZz48L2c+PC9nPjwvZz48L2c+PC9zdmc+\"\r\n                style=\"width: 15px; height: 15px; display: block;\" />\r\n            </span>\r\n            <span class=\"pl-3 dimensionTitle\">{{lists && lists.length ? lists[2].name : ''}}</span>\r\n          </div>\r\n          <div id=\"colfieldimg\" *ngIf=\"lists && lists.length ? (lists[2]?.value?.length < 1) : true\"\r\n            class=\"f-utils-absolute-all f-utils-flex-column justify-content-center align-items-center\"\r\n            role=\"presentation\" style=\"align-items: center; top: 36px; z-index: 10;\">\r\n            <img\r\n              src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nNTBweCcgaGVpZ2h0PSc1MHB4JyB2aWV3Qm94PScwIDAgNTAgNTAnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuWIl+e7tOW6puWbvjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGRlZnM+PHJlY3QgaWQ9J3BhdGgtMScgeD0nMjYnIHk9JzMxJyB3aWR0aD0nMjQnIGhlaWdodD0nMTgnIHJ4PScwLjUnPjwvcmVjdD48ZmlsdGVyIHg9Jy02LjIlJyB5PSctOC4zJScgd2lkdGg9JzExMi41JScgaGVpZ2h0PScxMTYuNyUnIGZpbHRlclVuaXRzPSdvYmplY3RCb3VuZGluZ0JveCcgaWQ9J2ZpbHRlci0yJz48ZmVPZmZzZXQgZHg9JzAnIGR5PScwJyBpbj0nU291cmNlQWxwaGEnIHJlc3VsdD0nc2hhZG93T2Zmc2V0T3V0ZXIxJz48L2ZlT2Zmc2V0PjxmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JzAuNScgaW49J3NoYWRvd09mZnNldE91dGVyMScgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlR2F1c3NpYW5CbHVyPjxmZUNvbXBvc2l0ZSBpbj0nc2hhZG93Qmx1ck91dGVyMScgaW4yPSdTb3VyY2VBbHBoYScgb3BlcmF0b3I9J291dCcgcmVzdWx0PSdzaGFkb3dCbHVyT3V0ZXIxJz48L2ZlQ29tcG9zaXRlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz0nMCAwIDAgMCAwLjExNDg0Mzc1IDAgMCAwIDAgMC41MTU4ODE4MTcgMCAwIDAgMCAxIDAgMCAwIDAuNzI2NDgwNTUxIDAnIHR5cGU9J21hdHJpeCcgaW49J3NoYWRvd0JsdXJPdXRlcjEnPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48bGluZWFyR3JhZGllbnQgeDE9JzUwJScgeTE9JzEwMCUnIHgyPSc1MCUnIHkyPScwJScgaWQ9J2xpbmVhckdyYWRpZW50LTMnPjxzdG9wIHN0b3AtY29sb3I9JyNEQUVCRkYnIHN0b3Atb3BhY2l0eT0nMC4yMDMwNDMwNTEnIG9mZnNldD0nMCUnPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPScjQjNEMkZGJyBzdG9wLW9wYWNpdHk9JzAuNDczMDM4NjgnIG9mZnNldD0nMTAwJSc+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjxnIGlkPSfpobXpnaItMScgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCc+PGcgaWQ9JzHjgIHmn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTEyMTQuMDAwMDAwLCAtNTY1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMjYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDg5OC4wMDAwMDAsIDc1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMzAnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDIzOS4wMDAwMDAsIDM3NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTM05aSH5Lu9JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg0MC4wMDAwMDAsIDExNS4wMDAwMDApJz48ZyBpZD0n57yW57uELTMzJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgzNy4wMDAwMDAsIDAuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC01Jz48cmVjdCBpZD0n55+p5b2i5aSH5Lu9LTMnIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScyNicgeT0nMTAnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjxnIGlkPSfnn6nlvaLlpIfku70tNicgb3BhY2l0eT0nMC41OTYxMjE2NTInPjx1c2UgZmlsbD0nYmxhY2snIGZpbGwtb3BhY2l0eT0nMScgZmlsdGVyPSd1cmwoI2ZpbHRlci0yKScgeGxpbms6aHJlZj0nI3BhdGgtMSc+PC91c2U+PHJlY3Qgc3Ryb2tlLW9wYWNpdHk9JzAuMjIzNDQ4NDI3JyBzdHJva2U9JyMwMDUxQjknIHN0cm9rZS13aWR0aD0nMScgc3Ryb2tlLWxpbmVqb2luPSdzcXVhcmUnIGZpbGw9JyM3QkIyRjgnIGZpbGwtcnVsZT0nZXZlbm9kZCcgeD0nMjYuNScgeT0nMzEuNScgd2lkdGg9JzIzJyBoZWlnaHQ9JzE3JyByeD0nMC41Jz48L3JlY3Q+PC9nPjxyZWN0IGlkPSfnn6nlvaLlpIfku70tMTInIGZpbGw9JyNCM0QyRkYnIG9wYWNpdHk9JzAuMjQzODYxNjA3JyB4PScwJyB5PScxMCcgd2lkdGg9JzI0JyBoZWlnaHQ9JzE4JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xNCcgZmlsbD0nI0IzRDJGRicgb3BhY2l0eT0nMC4yNDM4NjE2MDcnIHg9JzAnIHk9JzEnIHdpZHRoPSc1MCcgaGVpZ2h0PSc2JyByeD0nMC41Jz48L3JlY3Q+PHJlY3QgaWQ9J+efqeW9ouWkh+S7vS0xOCcgZmlsbD0ndXJsKCNsaW5lYXJHcmFkaWVudC0zKScgeD0nMCcgeT0nMzEnIHdpZHRoPScyNCcgaGVpZ2h0PScxOCcgcng9JzAuNSc+PC9yZWN0PjwvZz48L2c+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\"\r\n              style=\"width: 50px;height: 56px;display: block;\">\r\n            <!-- <span class=\"imgFont\">{{localizeService?.getValue('spread.crossTable.colDimensionTitle')}}</span> -->\r\n          </div>\r\n          <ul class=\"f-utils-overflow-xhya f-utils-fill pb-1\" style=\"z-index: 20\"\r\n            [dndList]=\"lists && lists.length ? lists[2].value : []\" (dndListChange)=\"dndListChange2($event)\">\r\n            <li *ngFor=\"let item of (lists && lists.length ? lists[2].value : []); let i = index;\" [dndDraggable]=\"item\"\r\n              class=\"mb-1 p-1\" (dndMoved)=\"moved(i, lists[2].value)\" dndEffectAllowed=\"move\"\r\n              (dndSelected)=\"models.selected = item\" [ngClass]=\"{'selected': models.selected === item}\">\r\n              {{item.name}}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".simpleDemo ul{min-height:42px;padding:0}.card-title,.demo-header{text-align:center}.title{margin:20px 0}.simpleDemo ul .dndDraggingSource{display:none}.simpleDemo ul .dndPlaceholder{background:rgba(56,143,255,.06);border:1px dashed #388fff;box-shadow:0 0 4px 0 rgba(13,95,201,.22);margin:.25rem!important;padding:.25rem!important}.simpleDemo ul li{background:rgba(235,244,254,.84);border:1px solid #388fff;box-shadow:0 0 10px 0 rgba(63,113,177,.22);border-radius:3px;height:28px;font-family:PingFangSC-Regular;font-size:13px;color:#388fff;margin:.25rem!important;padding:.25rem!important}#unselectFieldList li{border:none;background-color:rgba(0,0,0,0);box-shadow:0 0 #000;border-radius:3px;height:28px;margin:.25rem!important;padding:.25rem!important}#unselectFieldList li:hover{background:#f4f5f9}#unselectFieldList .dndPlaceholder{background:rgba(56,143,255,.06);border:1px dashed #388fff;box-shadow:0 0 4px 0 rgba(13,95,201,.22);margin:.25rem!important;padding:.25rem!important}.unselectField{font-family:PingFangSC-Regular;font-size:13px;color:rgba(0,0,0,.85)}.unselectFieldFront{font-family:PingFangSC-Medium;font-size:13px;color:#b4bccc}.simpleDemo ul li.selected{background-color:#dff0d8;color:#3c763d}.current-model{background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px;padding:18px 22px}.slicer{height:220px;position:relative}.headerMenu{position:fixed;display:none;top:0;left:0}.cardTitle{background:#f5f7fa;border-radius:3px 3px 0 0;height:36px}.dimensionTitle{font-family:PingFangSC-Medium;font-size:14px;color:rgba(0,0,0,.65);line-height:20px}.imgFont{font-family:PingFangSC-Regular;font-size:13px;color:#b4bccc}"]
            }] }
];
/** @nocollapse */
ColumnsSettingComponent.ctorParameters = () => [
    { type: Injector }
];
ColumnsSettingComponent.propDecorators = {
    controlType: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    queryId: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    qoId: [{ type: Input }],
    voId: [{ type: Input }],
    groupType: [{ type: Input }],
    spread: [{ type: Input }],
    conditionExpression: [{ type: Input }],
    jointsearchInfoList: [{ type: Input }],
    qdpView: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QdpViewComponent {
    /**
     * @param {?} elRef
     * @param {?} renderService
     * @param {?} renderer
     * @param {?} filterService
     * @param {?} injector
     */
    constructor(elRef, renderService, renderer, filterService, injector) {
        this.renderService = renderService;
        this.renderer = renderer;
        this.filterService = filterService;
        this.injector = injector;
        this.aggreData = [
            { name: '请选择', value: 0 },
            { name: '合计', value: 1 },
            { name: '最小值', value: 2 },
            { name: '最大值', value: 3 },
            { name: '计数', value: 4 },
            { name: '平均值', value: 5 }
        ];
        this.groupSelectValue = this.aggreData[0].value;
        this.groupText = '';
        this.colIsGroup = false;
        this.formInline = true;
        this.currentColIndex = 0;
        this.isInitQdpView = true; // 是否初始化qdpViewComponent
        // 是否初始化qdpViewComponent
        this.isShowDimension = true;
        this.cls = true;
        this.isOpen = false;
        this.headerMenuTop = 0;
        this.headerMenuLeft = 0;
        this.headerMenuDisplay = 'none';
        this.colIsGroupId = 'colIsGroup' + EventBus.guid();
        this.style = {
            width: '800px',
            height: '600px'
        };
        // indicate all options
        this.isCommonQdpViewComponent = false;
        this.sheetChanged = new Subject(); //切换sheet监听事件
        //切换sheet监听事件
        this.multiSheetsSchemaIds = {};
        // 来源数据
        this.searchText = '';
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
        this.conditionExpression = null;
        this.elRef = elRef;
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.msgService = this.injector.get(MessagerService);
            this.localId = this.injector.get(LOCALE_ID) || DEFAULT_LANGUAGE;
            this.formInline = this.localId.toLowerCase() === DEFAULT_LANGUAGE;
            this.loadService = this.injector.get(LoadingService);
            this.lcpService = this.injector.get(LcpService);
            this.jointSearchManagerService = this.injector.get(JointSearchManagerService);
            this.schemaManager = this.injector.get(SchemaManagerService);
            this.dataRenderExtendService = this.injector.get(DataRenderExtendService);
            this.formErrorService = this.injector.get(FormErrorService);
            this.aggreData = this.localizeService.getValue('ideCmp.schemaManager.columnOption.aggregateData');
            this.cache = this.injector.get(CacheService);
        }
    }
    /**
     * @private
     * @return {?}
     */
    setServices() {
        ServicesUtils.setServices('renderExtends' + this.queryId, this.dataRenderExtendService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loading = this.loadService.show({ container: 'body' });
        this.setServices();
        // 交叉表结果页监听事件
        if (this.controlType === 'crosstab') {
            this.docClickSubscription = this.renderer.listen('document', 'click', this.onDocumentClick.bind(this));
        }
        this.tabId = RtfServices.getTabId(this.queryId);
        // 缓存结果页对象，给工具栏使用
        QDPCacheUtil.setCache(this.tabId + this.queryId + this.controlType + 'qdpview', this);
        ServicesUtils.setServices(this.tabId + 'qoId', this.qoId);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        try {
            // 通过配置中心，获取spreadjs控件序列号
            this.lcpService.formErrorService = this.formErrorService;
            this.lcpService.getSpreadLicense().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data) {
                    GC.Spread.Sheets.LicenseKey = data;
                }
                this.afterView();
            }));
        }
        catch (e) {
            this.loading.close();
        }
        this.setMultiSheetsVarible();
    }
    /**
     * @private
     * @return {?}
     */
    setMultiSheetsVarible() {
        if (this.columnsSettingComponent) {
            this.columnsSettingComponent.multiSheets = this.multiSheets;
            this.columnsSettingComponent.curSheet = this.curSheet;
            this.columnsSettingComponent.multiSheetsSchemaIds = this.multiSheetsSchemaIds;
        }
    }
    /**
     * @return {?}
     */
    afterView() {
        /** @type {?} */
        const elRef = this.elRef;
        /** @type {?} */
        const dom = (/** @type {?} */ (elRef.nativeElement));
        /** @type {?} */
        const hostElement = dom.querySelector('#sheet');
        if (this.licenseKey) {
            GC.Spread.Sheets.LicenseKey = this.licenseKey;
        }
        this.spread = new GC.Spread.Sheets.Workbook(hostElement, { sheetCount: 0 });
        this.setSpreadOptions();
        // this.bindCustomEvent(this.spread);
        /** @type {?} */
        const eventId = this.tabId;
        EventBus.register('schemaValueChanged', this.handleSchemaValueChanged.bind(this), eventId + 'qdpViewComponent');
        if (this.templateType !== 'qdpAdvancedTemplate' && this.isInitQdpView) {
            this.initQdpView();
        }
        else {
            this.loading.close();
        }
    }
    /**
     * @private
     * @param {?} schemaValue
     * @return {?}
     */
    handleSchemaValueChanged(schemaValue) {
        this.schemaValue = schemaValue;
        if (this.curSheet && this.multiSheets.length && schemaValue && schemaValue.id) {
            this.multiSheetsSchemaIds[this.curSheet] = schemaValue.id;
            this.setMultiSheetsVarible();
        }
    }
    /**
     * @return {?}
     */
    initQdpView() {
        /** @type {?} */
        const self = this;
        if (!this.loading) {
            this.loading = this.loadService.show({ container: 'body' });
        }
        this.jointSearchManagerService.getjointsearch('form' + 'ff3ea474-cc65-23b0-cdb1-73c9146cea3b', this.queryId, '').subscribe((/**
         * @param {?} jointsearchList
         * @return {?}
         */
        (jointsearchList) => {
            this.filterService.getFilter(this.qoManagerCode ? this.qoManagerCode : this.queryId, this.queryId, this.queryRelativeUrl, 1, this.groupType).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                self.conditionExpression = null;
                self.jointsearchInfoList = jointsearchList;
                if (data && data.filter) {
                    self.conditionExpression = JSON.stringify(data.filter);
                }
                /** @type {?} */
                const renderOption = Object.assign({ multiSheetsSchemaIds: self.multiSheetsSchemaIds, curSheet: self.curSheet, multiSheets: self.multiSheets }, { queryId: self.queryId, controlType: self.controlType, qoManagerCode: self.qoManagerCode, pageIndex: 0, queryRelativeUrl: self.queryRelativeUrl, filterCondition: self.conditionExpression, groupType: self.groupType, voId: self.voId, jointsearchInfoList: self.jointsearchInfoList, loading: this.loading });
                this.qdpViewRender(renderOption);
            }));
        }));
    }
    /**
     * @private
     * @param {?} spread
     * @return {?}
     */
    bindCustomEvent(spread) {
        // const customEventNameSpace = '.ng';
        // const events = [];
        // events.forEach((event) => {
        //   spread.bind(event + customEventNameSpace, (event: any, data: any) => {
        //     const eventType = event.type;
        //     const camelCaseEvent = eventType[0].toLowerCase() + eventType.substr(1);
        //     this[camelCaseEvent].emit(data);
        //   });
        // });
    }
    /**
     * @return {?}
     */
    setSpreadOptions() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const spread = this.spread;
        if (!this.spread) {
            return;
        }
        spread.suspendEvent();
        spread.suspendPaint();
        this.spread.fromJSON(null);
        /** @type {?} */
        const options = this.spreadOptions;
        if (options) {
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                if (option.name === 'name') {
                    spread.name = option.value;
                }
                else {
                    spread.options[option.name] = option.value;
                }
            }));
        }
        spread.unbind(GC.Spread.Sheets.Events.ActiveSheetChanged);
        spread.bind(GC.Spread.Sheets.Events.ActiveSheetChanged, (/**
         * @param {?} e
         * @param {?} args
         * @return {?}
         */
        function (e, args) {
            self.curSheet = args.newSheet.name();
            self.setGroup(self.curSheet);
            self.setMultiSheetsVarible();
            self.initQdpView();
        }));
        spread.resumePaint();
        spread.resumeEvent();
    }
    /**
     * 方法已废弃，建议替换为initQDPView方法
     * 初始化查询结果页控件
     * @param {?} queryId
     * @param {?} schemaId
     * @param {?=} controlType
     * @param {?=} qoManagerCode
     * @param {?=} pageIndex
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} groupType
     * @param {?=} voId
     * @param {?=} fromCache
     * @param {?=} isSchemaSelectChanged
     * @return {?}
     */
    initSpread(queryId, schemaId, controlType, qoManagerCode, pageIndex, queryRelativeUrl, filterCondition, groupType, voId, fromCache, isSchemaSelectChanged) {
        if (this.curSheet && this.multiSheets.length) {
            this.multiSheetsSchemaIds[this.curSheet] = schemaId;
            this.setMultiSheetsVarible();
        }
        this.qdpViewRender(Object.assign({ multiSheetsSchemaIds: this.multiSheetsSchemaIds, curSheet: this.curSheet, multiSheets: this.multiSheets }, { schemaId, queryId, spread: this.spread, controlType, qoManagerCode, pageIndex, queryRelativeUrl, filterCondition, formData: this.formData, groupType: groupType, voId: voId, qdpView: this, fromCache, isSchemaSelectChanged, jointsearchInfoList: this.jointsearchInfoList }));
    }
    /**
     * 初始化查询结果控件
     * @param {?} option
     * @return {?}
     */
    qdpViewRender(option) {
        if (!option.loading) {
            option.loading = this.loadService.show({ container: 'body' });
        }
        option.voId = !option.voId ? this.voId : option.voId;
        option.groupType = !option.groupType ? this.groupType : option.groupType;
        option.fromCache = option.fromCache ? option.fromCache : false;
        if (option.filterCondition) {
            this.conditionExpression = option.filterCondition;
        }
        /** @type {?} */
        const renderOption = Object.assign({}, option, { formData: this.formData, spread: this.spread, qdpView: this });
        this.renderService.render(renderOption);
        EventBus.register(this.queryId + 'spread_init', this.registeSpreadColumnWidthChangedEvent.bind(this), this.queryId);
    }
    /**
     * 方法已废弃，建议替换为export方法
     * 导出Excel
     * @param {?} queryId
     * @param {?} id
     * @param {?=} type
     * @param {?=} pageIndex
     * @param {?=} qoManagerCode
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} groupType
     * @param {?=} voId
     * @param {?=} totalCount
     * @param {?=} exportType
     * @return {?}
     */
    exportExcel(queryId, id, type, pageIndex, qoManagerCode, queryRelativeUrl, filterCondition, groupType, voId, totalCount, exportType) {
        this.export(Object.assign({ multiSheetsSchemaIds: this.multiSheetsSchemaIds, curSheet: this.curSheet, multiSheets: this.multiSheets }, { queryId, schemaId: id, controlType: type, pageIndex, qoManagerCode, queryRelativeUrl, filterCondition, groupType, voId, totalCount, exportType }));
    }
    /**
     * 导出Excel
     * @param {?} option
     * @return {?}
     */
    export(option) {
        if (this.controlType === 'crosstab') {
            option.totalCount = this.spread.getActiveSheet().getRowCount();
        }
        option.voId = this.voId ? this.voId : option.voId;
        option.queryId = this.queryId ? this.queryId : option.queryId;
        option.groupType = this.groupType ? this.groupType : option.groupType;
        option.qoManagerCode = this.qoManagerCode ? this.qoManagerCode : option.qoManagerCode;
        this.renderService.exportData(option);
        // this.renderService.exportData(option.queryId, option.schemaId, option.controlType, option.pageIndex, option.qoManagerCode, option.queryRelativeUrl, option.filterCondition, option.groupType, option.voId, option.totalCount || 1, option.exportType);
    }
    /**
     * 方法已废弃，建议替换为print方法
     * 打印PDF
     * @param {?} queryId
     * @param {?} id
     * @param {?=} type
     * @param {?=} qoManagerCode
     * @param {?=} printIntegration
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} pageIndex
     * @param {?=} groupType
     * @param {?=} voId
     * @return {?}
     */
    pdfExportEvent(queryId, id, type, qoManagerCode, printIntegration, queryRelativeUrl, filterCondition, pageIndex, groupType, voId) {
        this.print(Object.assign({ multiSheetsSchemaIds: this.multiSheetsSchemaIds, curSheet: this.curSheet, multiSheets: this.multiSheets }, { queryId, schemaId: id, controlType: type, pageIndex, qoManagerCode, queryRelativeUrl, printIntegration, filterCondition, groupType, voId }));
    }
    /**
     * 打印
     * @param {?} option 渲染配置项
     * @return {?}
     */
    print(option) {
        option.voId = this.voId ? this.voId : option.voId;
        option.queryId = this.queryId ? this.queryId : option.queryId;
        option.groupType = this.groupType ? this.groupType : option.groupType;
        option.qoManagerCode = this.qoManagerCode ? this.qoManagerCode : option.qoManagerCode;
        this.renderService.pdfExportEvent(option);
        // this.renderService.pdfExportEvent(option.queryId, option.schemaId, option.controlType, option.qoManagerCode, option.printIntegration, option.queryRelativeUrl, option.filterCondition, option.groupType, option.pageIndex, option.voId);
    }
    /**
     * 方法已废弃，建议替换为printPreview(option: RenderOption)方法
     * 打印预览
     * @param {?} queryId
     * @param {?} id
     * @param {?=} type
     * @param {?=} qoManagerCode
     * @param {?=} printIntegration
     * @param {?=} queryRelativeUrl
     * @param {?=} filterCondition
     * @param {?=} pageIndex
     * @param {?=} groupType
     * @param {?=} voId
     * @return {?}
     */
    printPreView(queryId, id, type, qoManagerCode, printIntegration, queryRelativeUrl, filterCondition, pageIndex, groupType, voId) {
        /** @type {?} */
        const _voId = this.voId ? this.voId : voId;
        /** @type {?} */
        const _queryId = this.queryId ? this.queryId : queryId;
        /** @type {?} */
        const _groupType = this.groupType ? this.groupType : groupType;
        /** @type {?} */
        const _qoManagerCode = this.qoManagerCode ? this.qoManagerCode : qoManagerCode;
        this.renderService.printPreView(Object.assign({ multiSheetsSchemaIds: this.multiSheetsSchemaIds, curSheet: this.curSheet, multiSheets: this.multiSheets }, { queryId: _queryId, schemaId: id, controlType: type, qoManagerCode: _qoManagerCode, printIntegration, queryRelativeUrl, filterCondition, groupType: _groupType, pageIndex, voId: _voId }));
        // this.renderService.printPreView(queryId, id, type, qoManagerCode, printIntegration, queryRelativeUrl, filterCondition, groupType ? groupType : this.groupType, pageIndex, voId ? voId : this.voId);
    }
    /**
     * 打印预览
     * @param {?} option 渲染配置项
     * @return {?}
     */
    printPreview(option) {
        option.groupType = this.groupType ? this.groupType : option.groupType;
        option.voId = this.voId ? this.voId : option.voId;
        this.renderService.printPreView(option);
        // this.renderService.printPreView(option.queryId, option.schemaId, option.controlType, option.qoManagerCode, option.printIntegration, option.queryRelativeUrl, option.filterCondition, option.groupType, option.pageIndex, option.voId);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const options = [];
        for (const changeName in changes) {
            /** @type {?} */
            const newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                this.tabId = RtfServices.getTabId(this.queryId);
                switch (changeName) {
                    case 'hostStyle':
                        this.style = newValue;
                        if (this.spread) {
                            this.spread.refresh();
                        }
                        break;
                    case 'hostClass':
                        break;
                    case 'name':
                        this.spread.name = newValue;
                        break;
                    case 'formData':
                        newValue.dynamicCols.forEach((/**
                         * @param {?} col
                         * @return {?}
                         */
                        col => {
                            col.name = col.title;
                            col.bindField = col.field;
                            col.colWidth = 150;
                            col.align = 0;
                            col.visible = true;
                            col.isFixed = false;
                            col.formatType = 0;
                            col.formattor = '';
                            col.sort = 0;
                            col.pageAggreText = null;
                            col.pageAggre = 0;
                            col.isGroup = false;
                            col.groupAggreText = '';
                            col.groupAggre = 0;
                            col.totalAggreText = '';
                            col.totalAggre = 0;
                            col.level = 1;
                            col.childList = [];
                            col.dimension = 0;
                            col.rowColor = null;
                        }));
                        this.formData = newValue;
                        this.ngOnDestroy();
                        this.afterView();
                        break;
                    case 'groupType':
                        this.groupType = newValue;
                        break;
                    case 'queryId':
                        this.queryId = newValue;
                        QDPCacheUtil.setCache(this.tabId + this.queryId + this.controlType + 'qdpview', this);
                        break;
                    case 'controlType':
                        this.controlType = newValue;
                        break;
                    case 'qoId':
                        this.qoId = newValue;
                        ServicesUtils.setServices(this.tabId + 'qoId', this.qoId);
                        break;
                    case 'qoManagerCode':
                    case 'voId':
                    case 'queryRelativeUrl':
                    case 'templateType':
                        break;
                    case 'multiSheets':
                        this.multiSheets = newValue;
                        this.setGroup(this.multiSheets[0]);
                        break;
                    case 'licenseKey':
                        if (newValue) {
                            GC.Spread.Sheets.LicenseKey = newValue;
                        }
                        break;
                    case 'isCommonQdpViewComponent':
                        this.isCommonQdpViewComponent = newValue;
                        if (this.isCommonQdpViewComponent) ;
                        break;
                    default:
                        options.push({ name: changeName, value: newValue });
                }
            }
        }
        this.spreadOptions = options;
        this.setSpreadOptions();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.spread) {
            this.spread.destroy();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        this.style.height = event.newHeight + 'px';
        this.style.width = event.newWidth + 'px';
    }
    /**
     * @return {?}
     */
    toggle() {
        /** @type {?} */
        let isCompare = false;
        if (this.isOpen) {
            if (this.controlType === 'crosstab') {
                this.dimensionSettingComponent.isCompare = false;
                this.dimensionSettingComponent.selectedDimesion();
                isCompare = this.dimensionSettingComponent.isCompare;
            }
            else {
                this.columnsSettingComponent.isCompare = false;
                this.columnsSettingComponent.selectedDimesion();
                isCompare = this.columnsSettingComponent.isCompare;
            }
            if (this.schemaValue && this.schemaValue.isPrefab !== 1 && !isCompare) {
                this.schemaValue.schemaValue = this.controlType === 'crosstab' ? JSON.stringify(this.dimensionSettingComponent.schemaValue.schemaValue) : JSON.stringify(this.columnsSettingComponent.schemaValue.schemaValue);
                this.schemaManager.saveSchema({ 'schema': JSON.stringify(this.schemaValue), groupType: this.groupType }, '').subscribe((/**
                 * @return {?}
                 */
                () => { }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.formErrorService.exception(error.Message, error);
                }));
                this.schemaValue.schemaValue = JSON.parse(this.schemaValue.schemaValue);
            }
        }
        this.isOpen = !this.isOpen;
    }
    /**
     * @param {?} sheetName
     * @return {?}
     */
    setGroup(sheetName) {
        this.curSheet = sheetName;
        if (this.groupType) {
            for (let i = 0; i < this.multiSheets.length; i++) {
                this.groupType = this.groupType.replace(this.multiSheets[i], "");
            }
            this.groupType += sheetName;
        }
        else {
            this.groupType = sheetName;
        }
        this.sheetChanged.next(this.groupType);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    onDocumentClick(e) {
        if (e.target.tagName === 'CANVAS') {
            this.isOpen = false;
        }
    }
    /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @return {?}
     */
    handleCrosstabPageChange(pageIndex, pageSize) {
        this.sheet = this.spread.getActiveSheet();
        for (let i = 0; i < this.sheet.getRowCount(); i++) {
            if (i >= (pageIndex - 1) * pageSize && i < pageIndex * pageSize) {
                this.sheet.setRowVisible(i, true, GC.Spread.Sheets.SheetArea.viewport);
                this.sheet.showRow(i, GC.Spread.Sheets.VerticalPosition.bottom);
            }
            else {
                this.sheet.setRowVisible(i, false, GC.Spread.Sheets.SheetArea.viewport);
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleContextMenu($event) {
        if ('list' === this.controlType.toLowerCase()) {
            /** @type {?} */
            let x = 0;
            /** @type {?} */
            let y = 0;
            /** @type {?} */
            let qdpviewNative = this.sheetEl.nativeElement;
            while (qdpviewNative) {
                x += qdpviewNative.offsetLeft;
                y += qdpviewNative.offsetTop;
                qdpviewNative = qdpviewNative.offsetParent;
            }
            /** @type {?} */
            const activeSheet = this.spread.getActiveSheet();
            /** @type {?} */
            const colHeader = GC.Spread.Sheets.SheetArea.colHeader;
            /** @type {?} */
            const target = activeSheet.hitTest($event.clientX - x, $event.clientY - y);
            if (target.hitTestType !== colHeader || target.col === undefined || target.row === undefined) {
                return false;
            }
            /** @type {?} */
            const headerRowCount = activeSheet.getRowCount(colHeader);
            /** @type {?} */
            const span = activeSheet.getSpan(target.row, target.col, colHeader);
            // 判断多级表头的情况下，只处理最子集表头
            if (span && (target.row + span.rowCount) < headerRowCount) {
                return false;
            }
            this.currentColIndex = target.col;
            this.initColGroupAggre(this.currentColIndex);
            this.headerMenuDisplay = 'block';
            this.headerMenuTop = $event.clientY;
            this.headerMenuLeft = $event.clientX;
        }
        return false;
    }
    /**
     * @return {?}
     */
    handleIsGroupClick() {
        if (this.colIsGroup) {
            this.groupSelectValue = this.aggreData[0].value;
            this.groupText = '';
        }
    }
    /**
     * @return {?}
     */
    handleSaveClick() {
        /** @type {?} */
        const self = this;
        try {
            if (this.schemaValue && this.schemaValue.schemaValue && this.schemaValue.schemaValue.columnOption && this.schemaValue.schemaValue.columnOption.colList) {
                if (this.schemaValue && this.schemaValue.isPrefab === 1) {
                    this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                    return;
                }
                /** @type {?} */
                const colList = JSON.parse(JSON.stringify(this.schemaValue.schemaValue.columnOption.colList));
                /** @type {?} */
                const params = { index: this.currentColIndex, colIndex: 0, type: 'edit' };
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    this.recursiveColumnSort(colList[i], null, params);
                }
                this.schemaValue.schemaValue.columnOption.colList = colList;
                this.schemaValue.schemaValue = JSON.stringify(this.schemaValue.schemaValue);
                this.schemaManager.saveSchema({ schema: JSON.stringify(this.schemaValue), groupType: this.groupType }, '').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    self.initQdpView();
                    self.currentColIndex = 0;
                    self.headerMenuDisplay = 'none';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.formErrorService.exception(error.Message, error);
                }));
            }
        }
        catch (e) {
            self.currentColIndex = 0;
        }
    }
    /**
     * @return {?}
     */
    handleClearSort() {
        /** @type {?} */
        const self = this;
        try {
            if (this.schemaValue && this.schemaValue.schemaValue && this.schemaValue.schemaValue.columnOption && this.schemaValue.schemaValue.columnOption.colList && this.schemaValue.schemaValue.columnOption.colList.length) {
                if (this.schemaValue && this.schemaValue.isPrefab === 1) {
                    this.msgService.info(this.localizeService.getValue('spread.message.validate.sort'));
                    return;
                }
                /** @type {?} */
                const colList = JSON.parse(JSON.stringify(this.schemaValue.schemaValue.columnOption.colList));
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    this.recursiveClearColumnSort(colList[i], null);
                }
                this.schemaValue.schemaValue.columnOption.colList = colList;
                this.schemaValue.schemaValue = JSON.stringify(this.schemaValue.schemaValue);
                this.schemaManager.saveSchema({ schema: JSON.stringify(this.schemaValue), groupType: this.groupType }, '').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    /** @type {?} */
                    const renderOption = Object.assign({ multiSheetsSchemaIds: this.multiSheetsSchemaIds, curSheet: this.curSheet, multiSheets: this.multiSheets }, { schemaId: this.schemaValue.id, queryId: self.queryId, controlType: self.controlType, qoManagerCode: self.qoManagerCode, pageIndex: 0, queryRelativeUrl: self.queryRelativeUrl, filterCondition: self.conditionExpression, groupType: self.groupType, voId: self.voId, jointsearchInfoList: self.jointsearchInfoList });
                    self.qdpViewRender(renderOption);
                    self.currentColIndex = 0;
                    self.headerMenuDisplay = 'none';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.formErrorService.exception(error.Message, error);
                }));
            }
        }
        catch (e) {
            self.currentColIndex = 0;
        }
    }
    // @HostListener('click')
    /**
     * @param {?} $event
     * @return {?}
     */
    handleBlur($event) {
        this.headerMenuDisplay = 'none';
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    initColGroupAggre(index) {
        if (this.schemaValue && this.schemaValue.schemaValue && this.schemaValue.schemaValue.columnOption
            && this.schemaValue.schemaValue.columnOption.colList && this.schemaValue.schemaValue.columnOption.colList.length > index) {
            /** @type {?} */
            const params = { index: this.currentColIndex, colIndex: 0, type: 'init' };
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < this.schemaValue.schemaValue.columnOption.colList.length; i++) {
                this.recursiveColumnSort(this.schemaValue.schemaValue.columnOption.colList[i], null, params);
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveColumnSort(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnSort(null, col.childList, params);
            }
            else {
                if (params.colIndex === params.index) {
                    if (params.type === 'init') {
                        this.colIsGroup = col.isGroup;
                        this.groupText = col.groupAggreText || '';
                        this.groupSelectValue = col.groupAggre;
                    }
                    else if (params.type === 'edit') {
                        col.isGroup = this.colIsGroup;
                        col.groupAggreText = this.groupText || '';
                        col.groupAggre = this.groupSelectValue;
                    }
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnSort(null, colList[i].childList, params);
                }
                else {
                    if (params.colIndex === params.index) {
                        if (params.type === 'init') {
                            this.colIsGroup = colList[i].isGroup;
                            this.groupText = colList[i].groupAggreText || '';
                            this.groupSelectValue = colList[i].groupAggre;
                        }
                        else if (params.type === 'edit') {
                            colList[i].isGroup = this.colIsGroup;
                            colList[i].groupAggreText = this.groupText || '';
                            colList[i].groupAggre = this.groupSelectValue;
                        }
                    }
                    params.colIndex++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @return {?}
     */
    recursiveClearColumnSort(col, colList) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveClearColumnSort(null, col.childList);
            }
            else {
                col['sort'] = 0;
                col['sortIndex'] = 0;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveClearColumnSort(null, colList[i].childList);
                }
                else {
                    colList[i]['sort'] = 0;
                    colList[i]['sortIndex'] = 0;
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    registeSpreadColumnWidthChangedEvent() {
        /** @type {?} */
        const self = this;
        this.sheet = this.spread.getActiveSheet();
        self.sheet.bind(GC.Spread.Sheets.Events.ColumnWidthChanged, (/**
         * @param {?} sender
         * @param {?} info
         * @return {?}
         */
        function (sender, info) {
            /** @type {?} */
            const index = info.colList[0];
            /** @type {?} */
            const colW = info.sheet.getColumnWidth(info.colList[0]);
            if (self.schemaValue && self.schemaValue.schemaValue && self.schemaValue.schemaValue.columnOption
                && self.schemaValue.schemaValue.columnOption.colList && self.schemaValue.schemaValue.columnOption.colList.length) {
                if (self.schemaValue && self.schemaValue.isPrefab === 1) {
                    self.msgService.info(self.localizeService.getValue('spread.message.validate.sort'));
                    return;
                }
                /** @type {?} */
                const colList = JSON.parse(JSON.stringify(self.schemaValue.schemaValue.columnOption.colList));
                /** @type {?} */
                const params = { index: index, colIndex: 0, colWidth: colW };
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < colList.length; i++) {
                    self.recursiveColumnWidthChanged(colList[i], null, params);
                }
                self.schemaValue.schemaValue.columnOption.colList = colList;
                self.schemaValue.schemaValue = JSON.stringify(self.schemaValue.schemaValue);
                self.schemaManager.saveSchema({ schema: JSON.stringify(self.schemaValue), groupType: this.groupType }, '').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    self.schemaValue.schemaValue = JSON.parse(self.schemaValue.schemaValue);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    self.formErrorService.exception(error.Message, error);
                }));
            }
        }));
    }
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    recursiveColumnWidthChanged(col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveColumnWidthChanged(null, col.childList, params);
            }
            else {
                if (params.colIndex === params.index) {
                    col.colWidth = params.colWidth;
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveColumnWidthChanged(null, colList[i].childList, params);
                }
                else {
                    if (params.colIndex === params.index) {
                        colList[i].colWidth = params.colWidth;
                    }
                    params.colIndex++;
                }
            }
        }
    }
}
QdpViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'qdp-view',
                template: "<div *ngIf=\"isShowDimension\" #crosstab class=\"f-cmp-sidebar f-sidebar-slide  f-sidebar-pos-right\"\r\n  [ngClass]=\"{'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\">\r\n  <div class=\"f-sidebar-main\">\r\n    <div class=\"f-sidebar-header-ctr ng-star-inserted border mb-2\">\r\n      <h5 class=\"f-sidebar-header-title\">{{localizeService.getValue('spread.crossTable.dimensionManager')}}</h5>\r\n      <span id=\"dimensionClose\" (click)=\"toggle()\">\r\n        <img src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMTRweCcgaGVpZ2h0PScxNHB4JyB2aWV3Qm94PScwIDAgMTQgMTQnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPuW9oueKtue7k+WQiDwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJyBzdHJva2UtbGluZWNhcD0ncm91bmQnPjxnIGlkPScwMi3mn6Xor6JVSeiuvuiuoScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTEzMjUuMDAwMDAwLCAtOTUuMDAwMDAwKScgc3Ryb2tlPScjMkQyRjMzJyBzdHJva2Utd2lkdGg9JzEuNCc+PGcgaWQ9J+e8lue7hC0yNicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoODk4LjAwMDAwMCwgNzUuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0yNScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoNDIwLjAwMDAwMCwgMTMuMDAwMDAwKSc+PHBhdGggZD0nTTE0LDE0IEw4LDggTDE0LDE0IEw4LDIwIEwxNCwxNCBaIE0xNCwxNCBMMjAsMjAgTDE0LDE0IEwyMCw4IEwxNCwxNCBaJyBpZD0n5b2i54q257uT5ZCIJz48L3BhdGg+PC9nPjwvZz48L2c+PC9nPjwvc3ZnPg==\" style=\"width: 16px; height: 16px; display: block;\" />\r\n      </span>\r\n    </div>\r\n    <div class=\"container f-utils-fill-flex-column\">\r\n      <dimension-setting class=\"h-100\"  *ngIf=\"controlType=='crosstab'\"\r\n        [controlType]=\"controlType\" \r\n        [queryRelativeUrl]=\"queryRelativeUrl\"\r\n        [qoManagerCode]=\"qoManagerCode\"\r\n        [queryId]=\"queryId\"\r\n        [qoId]=\"qoId\"\r\n        [voId]=\"voId\"\r\n        [groupType]=\"groupType\"\r\n        [spread]=\"spread\"\r\n        [conditionExpression]=\"conditionExpression\"\r\n        [jointsearchInfoList]=\"jointsearchInfoList\"\r\n        [qdpView]=\"this\"\r\n      ></dimension-setting>\r\n      <columns-setting class=\"h-100\"  *ngIf=\"controlType!='crosstab'\"\r\n        [controlType]=\"controlType\" \r\n        [queryRelativeUrl]=\"queryRelativeUrl\"\r\n        [qoManagerCode]=\"qoManagerCode\"\r\n        [queryId]=\"queryId\"\r\n        [qoId]=\"qoId\"\r\n        [voId]=\"voId\"\r\n        [groupType]=\"groupType\"\r\n        [spread]=\"spread\"\r\n        [conditionExpression]=\"conditionExpression\"\r\n        [jointsearchInfoList]=\"jointsearchInfoList\"\r\n        [qdpView]=\"this\"\r\n      ></columns-setting>\r\n    </div>\r\n  </div>\r\n  <div class=\"f-sidebar-entry-ctr\">\r\n    <div class=\"f-sidebar-entry-icon ng-star-inserted\"><span class=\"f-icon f-sidebar-entry\" (click)=\"toggle()\"></span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div #sheet id='sheet' [ngStyle]=\"style\" [ngClass]=\"hostClass\" class=\"flex-fill qdp-overflow-hidden ml-3 mr-3 border\"\r\n  (resized)=\"onResized($event)\" (contextmenu)=\"handleContextMenu($event)\" (click)=\"handleBlur($event)\">\r\n</div>\r\n\r\n<div class=\"dropdown-menu headerMenu\" *ngIf=\"controlType!='crosstab' && controlType!='charts'\"\r\n  [style.left.px]=\"headerMenuLeft\" [style.top.px]=\"headerMenuTop\" [style.display]=\"headerMenuDisplay\">\r\n  <div class=\"flex-fill farris-split-section farris-overflow-hidden\">\r\n    <div class=\"farris-form farris-card-content-bg\">\r\n      <div class=\"col-12 col-md-12 col-lg-12\">\r\n        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\" [class.farris-form-inline]=\"formInline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"{{colIsGroupId}}\">\r\n              <span\r\n                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.group')}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n              <div class=\"custom-control custom-checkbox mb-0\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"colIsGroup\" class=\"custom-control-input\" id=\"{{colIsGroupId}}\"\r\n                  checked=\"\">\r\n                <label class=\"custom-control-label\" for=\"{{colIsGroupId}}\" (click)=\"handleIsGroupClick()\"></label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 col-md-12 col-lg-12\">\r\n        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\" [class.farris-form-inline]=\"formInline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"colGroupText\">\r\n              <span\r\n                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.groupTotal')}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group [(ngModel)]=\"groupText\" id=\"colGroupText\"></input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 col-md-12 col-lg-12\">\r\n        <div class=\"farris-group-wrap\" [class.form-inline]=\"formInline\" [class.farris-form-inline]=\"formInline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"colGroupAggre\">\r\n              <span\r\n                class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.columnOption.totalType')}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <farris-combo-list id=\"colGroupAggre\" [disabled]=\"colIsGroup\" [(ngModel)]=\"groupSelectValue\"\r\n                [data]=\"aggreData\" [textField]=\"'name'\" [idField]=\"'value'\" [enableClear]=\"false\"></farris-combo-list>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 col-md-12 col-lg-12\">\r\n        <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleSaveClick()\">\r\n          {{localizeService.getValue('ideCmp.schemaManager.btnSave')}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".qdp-overflow-hidden{overflow:hidden!important}.simpleDemo ul{min-height:42px;padding:0}.card-title,.demo-header{text-align:center}.title{margin:20px 0}.simpleDemo ul .dndDraggingSource{display:none}.simpleDemo ul .dndPlaceholder{background:rgba(56,143,255,.06);border:1px dashed #388fff;box-shadow:0 0 4px 0 rgba(13,95,201,.22);margin:.25rem!important;padding:.25rem!important}.simpleDemo ul li{background:rgba(235,244,254,.84);border:1px solid #388fff;box-shadow:0 0 10px 0 rgba(63,113,177,.22);border-radius:3px;height:28px;font-family:PingFangSC-Regular;font-size:13px;color:#388fff;margin:.25rem!important;padding:.25rem!important}#unselectFieldList li{border:none;background-color:rgba(0,0,0,0);box-shadow:0 0 #000;border-radius:3px;height:28px;margin:.25rem!important;padding:.25rem!important}#unselectFieldList li:hover{background:#f4f5f9}#unselectFieldList .dndPlaceholder{background:rgba(56,143,255,.06);border:1px dashed #388fff;box-shadow:0 0 4px 0 rgba(13,95,201,.22);margin:.25rem!important;padding:.25rem!important}.unselectField{font-family:PingFangSC-Regular;font-size:13px;color:rgba(0,0,0,.85)}.unselectFieldFront{font-family:PingFangSC-Medium;font-size:13px;color:#b4bccc}.simpleDemo ul li.selected{background-color:#dff0d8;color:#3c763d}.current-model{background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px;padding:18px 22px}.slicer{height:220px;position:relative}.headerMenu{position:fixed;display:none;top:0;left:0}.cardTitle{background:#f5f7fa;border-radius:3px 3px 0 0;height:36px}.dimensionTitle{font-family:PingFangSC-Medium;font-size:14px;color:rgba(0,0,0,.65);line-height:20px}.imgFont{font-family:PingFangSC-Regular;font-size:13px;color:#b4bccc}"]
            }] }
];
/** @nocollapse */
QdpViewComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: RenderService },
    { type: Renderer2 },
    { type: FilterManagerService },
    { type: Injector, decorators: [{ type: Optional }] }
];
QdpViewComponent.propDecorators = {
    sheetEl: [{ type: ViewChild, args: ['sheet', { read: ElementRef },] }],
    dimensionSettingComponent: [{ type: ViewChild, args: [DimensionSettingComponent,] }],
    columnsSettingComponent: [{ type: ViewChild, args: [ColumnsSettingComponent,] }],
    isInitQdpView: [{ type: Input }],
    isShowDimension: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
    isCommonQdpViewComponent: [{ type: Input }],
    allowUserDragDrop: [{ type: Input }],
    allowUserDragFill: [{ type: Input }],
    allowUserZoom: [{ type: Input }],
    allowUserResize: [{ type: Input }],
    showHorizontalScrollbar: [{ type: Input }],
    showVerticalScrollbar: [{ type: Input }],
    tabStripVisible: [{ type: Input }],
    allowUndo: [{ type: Input }],
    allowSheetReorder: [{ type: Input }],
    allowCopyPasteExcelStyle: [{ type: Input }],
    allowExtendPasteRange: [{ type: Input }],
    copyPasteHeaderOptions: [{ type: Input }],
    showDragFillSmartTag: [{ type: Input }],
    scrollbarShowMax: [{ type: Input }],
    scrollbarMaxAlign: [{ type: Input }],
    tabEditable: [{ type: Input }],
    newTabVisible: [{ type: Input }],
    tabNavigationVisible: [{ type: Input }],
    backColor: [{ type: Input }],
    backgroundImage: [{ type: Input }],
    backgroundImageLayout: [{ type: Input }],
    grayAreaBackColor: [{ type: Input }],
    showResizeTip: [{ type: Input }],
    showDragDropTip: [{ type: Input }],
    showDragFillTip: [{ type: Input }],
    showScrollTip: [{ type: Input }],
    highlightInvalidData: [{ type: Input }],
    useTouchLayout: [{ type: Input }],
    hideSelection: [{ type: Input }],
    allowUserEditFormula: [{ type: Input }],
    enableFormulaTextbox: [{ type: Input }],
    autoFitType: [{ type: Input }],
    referenceStyle: [{ type: Input }],
    hostStyle: [{ type: Input }],
    hostClass: [{ type: Input }],
    name: [{ type: Input }],
    queryId: [{ type: Input }],
    controlType: [{ type: Input }],
    licenseKey: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    qoId: [{ type: Input }],
    voId: [{ type: Input }],
    groupType: [{ type: Input }],
    templateType: [{ type: Input }],
    multiSheets: [{ type: Input }],
    formData: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SpreadModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: SpreadModule,
            providers: [
                RenderService
            ]
        };
    }
}
SpreadModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    LoadingModule.forRoot({
                        message: 'Loading...'
                    }),
                    DndListModule,
                    FormsModule,
                    ReactiveFormsModule,
                    ComboListModule,
                    InputGroupModule,
                    FDropdownDirectiveTypeModule,
                ],
                declarations: [
                    QdpViewComponent,
                    ColumnsSettingComponent,
                    DimensionSettingComponent,
                    DimensionSettingComponent
                ],
                exports: [
                    QdpViewComponent,
                    ColumnsSettingComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { QdpViewComponent, ColumnsSettingComponent, DimensionSettingComponent, RenderService, ServicesUtils, ParameterUtils, RenderExtendsUtils, SchemaUtils, SpreadStyleUtils, SpreadModule };

//# sourceMappingURL=qdp-spread.js.map