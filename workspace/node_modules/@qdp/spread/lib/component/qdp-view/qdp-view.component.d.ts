import { OnChanges, SimpleChanges, AfterViewInit, OnDestroy, ElementRef, OnInit, Renderer2, Injector } from '@angular/core';
import { RenderService } from '../../service/render/render.service';
import { FilterManagerService, SchemaManagerService, JointSearchManagerService, LcpService } from '@qdp/common';
import { LocalizeService } from '@qdp/localize';
import { RenderOption } from '../../entity/RenderOption';
import { LoadingService } from '@farris/ui-loading';
import { FormErrorService } from '@farris/command-services';
import { CacheService } from '@ecp-caf/caf-common';
import { Subject } from 'rxjs';
export declare class QdpViewComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    renderService: RenderService;
    private renderer;
    private filterService;
    private injector;
    localizeService: LocalizeService;
    sheetEl: ElementRef;
    dimensionSettingComponent: any;
    columnsSettingComponent: any;
    aggreData: any;
    groupSelectValue: any;
    groupText: string;
    colIsGroup: boolean;
    formInline: boolean;
    localId: any;
    msgService: any;
    currentColIndex: number;
    schemaManager: SchemaManagerService;
    jointSearchManagerService: JointSearchManagerService;
    lcpService: LcpService;
    pageIndex: any;
    dataRenderExtendService: any;
    loadService: LoadingService;
    formErrorService: FormErrorService;
    cache: CacheService;
    isInitQdpView: boolean;
    isShowDimension: boolean;
    constructor(elRef: ElementRef, renderService: RenderService, renderer: Renderer2, filterService: FilterManagerService, injector: Injector);
    private setServices;
    cls: boolean;
    spread: any;
    private elRef;
    private spreadOptions;
    isOpen: boolean;
    private docClickSubscription;
    headerMenuTop: number;
    headerMenuLeft: number;
    headerMenuDisplay: string;
    colIsGroupId: string;
    style: {
        width: string;
        height: string;
    };
    isCommonQdpViewComponent: boolean;
    allowUserDragDrop: boolean;
    allowUserDragFill: boolean;
    allowUserZoom: boolean;
    allowUserResize: boolean;
    showHorizontalScrollbar: boolean;
    showVerticalScrollbar: boolean;
    tabStripVisible: boolean;
    allowUndo: boolean;
    allowSheetReorder: boolean;
    allowCopyPasteExcelStyle: boolean;
    allowExtendPasteRange: boolean;
    copyPasteHeaderOptions: boolean;
    showDragFillSmartTag: boolean;
    scrollbarShowMax: boolean;
    scrollbarMaxAlign: boolean;
    tabEditable: boolean;
    newTabVisible: boolean;
    tabNavigationVisible: boolean;
    backColor: string;
    backgroundImage: string;
    backgroundImageLayout: number;
    grayAreaBackColor: string;
    showResizeTip: number;
    showDragDropTip: boolean;
    showDragFillTip: boolean;
    showScrollTip: number;
    highlightInvalidData: boolean;
    useTouchLayout: boolean;
    hideSelection: boolean;
    allowUserEditFormula: boolean;
    enableFormulaTextbox: boolean;
    autoFitType: number;
    referenceStyle: number;
    hostStyle: any;
    hostClass: string;
    name: string;
    queryId: string;
    controlType: string;
    licenseKey: string;
    qoManagerCode: any;
    queryRelativeUrl: any;
    qoId: any;
    voId: any;
    groupType: any;
    templateType: any;
    multiSheets: any[];
    curSheet: any;
    sheetChanged: Subject<any>;
    multiSheetsSchemaIds: any;
    sheet: any;
    schemaValue: any;
    colList: any;
    formData: any;
    searchText: string;
    groupIcon: string;
    conditionExpression: any;
    jointsearchInfoList: any;
    loading: any;
    tabId: any;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private setMultiSheetsVarible;
    afterView(): void;
    private handleSchemaValueChanged;
    initQdpView(): void;
    private bindCustomEvent;
    setSpreadOptions(): void;
    /**
     * 方法已废弃，建议替换为initQDPView方法
     * 初始化查询结果页控件
     */
    initSpread(queryId: string, schemaId: string, controlType?: any, qoManagerCode?: any, pageIndex?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, voId?: any, fromCache?: any, isSchemaSelectChanged?: any): void;
    /**
     * 初始化查询结果控件
     */
    qdpViewRender(option: RenderOption): void;
    /**
     * 方法已废弃，建议替换为export方法
     * 导出Excel
     */
    exportExcel(queryId: string, id: string, type?: any, pageIndex?: any, qoManagerCode?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, voId?: any, totalCount?: any, exportType?: any): void;
    /**
     * 导出Excel
     * @param opiton 渲染配置项
     */
    export(option: RenderOption): void;
    /**
     * 方法已废弃，建议替换为print方法
     * 打印PDF
     */
    pdfExportEvent(queryId: string, id: string, type?: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, pageIndex?: any, groupType?: any, voId?: any): void;
    /**
     * 打印
     * @param option 渲染配置项
     */
    print(option: RenderOption): void;
    /**
     * 方法已废弃，建议替换为printPreview(option: RenderOption)方法
     * 打印预览
     */
    printPreView(queryId: string, id: string, type?: any, qoManagerCode?: any, printIntegration?: any, queryRelativeUrl?: any, filterCondition?: any, pageIndex?: any, groupType?: any, voId?: any): void;
    /**
     * 打印预览
     * @param option 渲染配置项
     */
    printPreview(option: RenderOption): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onResized(event: any): void;
    toggle(): void;
    setGroup(sheetName: any): void;
    private onDocumentClick;
    handleCrosstabPageChange(pageIndex: any, pageSize: any): void;
    handleContextMenu($event: any): boolean;
    handleIsGroupClick(): void;
    handleSaveClick(): void;
    handleClearSort(): void;
    handleBlur($event: any): void;
    private initColGroupAggre;
    private recursiveColumnSort;
    private recursiveClearColumnSort;
    private registeSpreadColumnWidthChangedEvent;
    private recursiveColumnWidthChanged;
}
