import { Injector } from '@angular/core';
import { SchemaManagerService, LcpService } from '@qdp/common';
import { CacheService } from '@ecp-caf/caf-common';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { DataRenderExtendService } from '@qdp/common';
import { LocalizeService } from '@qdp/localize';
import { MessagerService } from '@farris/ui-messager';
import { CloudprintService } from '@gsp-svc/cloudprint';
import { RenderOption } from '../../entity/RenderOption';
export declare class RenderService {
    schemaManager: SchemaManagerService;
    lcpService: LcpService;
    private cache;
    private loadService;
    private msgService;
    private dataRenderExtendService;
    private injector;
    cloudprintService: CloudprintService;
    formErrorService: any;
    localizeService: LocalizeService;
    notifyService: NotifyService;
    serviceCache: {};
    columnCount: number;
    operations: {};
    renderObject: any;
    spread: any;
    funcInfoCache: {
        funcIds: any[];
        firstLoadCache: any[];
    };
    constructor(schemaManager: SchemaManagerService, lcpService: LcpService, cache: CacheService, loadService: LoadingService, msgService: MessagerService, dataRenderExtendService: DataRenderExtendService, injector: Injector);
    private setService;
    private getService;
    private setSecurityLevel;
    private getSecurityLevel;
    render(option: RenderOption): void;
    private getRender;
    exportData(renderOption: RenderOption): void;
    private calculationColumnCount;
    clearCache(queryId: any, schemaId: any, controlType: any, qoManagerCode?: any, queryRelativeUrl?: any, filterCondition?: any, groupType?: any, voId?: any): void;
    pdfExportEvent(renderOption: RenderOption): void;
    printPreView(renderOption: RenderOption): void;
    clearFirstLoadCache(queryId?: any): void;
}
