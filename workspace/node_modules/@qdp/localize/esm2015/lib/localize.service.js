/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, LOCALE_ID, Inject } from '@angular/core';
import { CommonUtils } from '@farris/ui-common';
import { QDP_LOCALIZE, DEFAULT_LANGUAGE } from './i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-common";
export class LocalizeService {
    /**
     * @param {?} localeId
     * @param {?} utils
     */
    constructor(localeId, utils) {
        this.localeId = localeId;
        this.utils = utils;
        if (!localeId) {
            localeId = DEFAULT_LANGUAGE;
            this.language = 'zh-CHS';
        }
        else {
            this.language = localeId;
        }
        if (!QDP_LOCALIZE[localeId.toLowerCase()]) {
            localeId = DEFAULT_LANGUAGE;
        }
        this.languageData = QDP_LOCALIZE[localeId.toLowerCase()];
    }
    /**
     * @param {?} propertyName
     * @return {?}
     */
    getValue(propertyName) {
        /** @type {?} */
        const val = this.utils.getValue(propertyName, this.languageData);
        if (val) {
            return val;
        }
        else {
            console.warn(`Can\'t find language Data for the ${propertyName}`);
        }
    }
}
LocalizeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocalizeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: CommonUtils }
];
/** @nocollapse */ LocalizeService.ngInjectableDef = i0.defineInjectable({ factory: function LocalizeService_Factory() { return new LocalizeService(i0.inject(i0.LOCALE_ID), i0.inject(i1.CommonUtils)); }, token: LocalizeService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LocalizeService.prototype.languageData;
    /** @type {?} */
    LocalizeService.prototype.language;
    /** @type {?} */
    LocalizeService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    LocalizeService.prototype.utils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BxZHAvbG9jYWxpemUvIiwic291cmNlcyI6WyJsaWIvbG9jYWxpemUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFLOUQsTUFBTSxPQUFPLGVBQWU7Ozs7O0lBSTFCLFlBQXNDLFFBQWdCLEVBQVUsS0FBa0I7UUFBNUMsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDaEYsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztZQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMxQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQ3pDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztTQUM3QjtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLFlBQW9COztjQUNyQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDaEUsSUFBSSxHQUFHLEVBQUU7WUFDUCxPQUFPLEdBQUcsQ0FBQztTQUNaO2FBQU07WUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1NBQ25FO0lBQ0gsQ0FBQzs7O1lBM0JGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozt5Q0FLYyxNQUFNLFNBQUMsU0FBUztZQVZ0QixXQUFXOzs7OztJQU9sQix1Q0FBa0I7O0lBQ2xCLG1DQUFjOztJQUVGLG1DQUEwQzs7Ozs7SUFBRSxnQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBMT0NBTEVfSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgUURQX0xPQ0FMSVpFLCBERUZBVUxUX0xBTkdVQUdFIH0gZnJvbSAnLi9pMThuL2luZGV4JztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvY2FsaXplU2VydmljZSB7XHJcbiAgbGFuZ3VhZ2VEYXRhOiBhbnk7XHJcbiAgbGFuZ3VhZ2U6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChMT0NBTEVfSUQpIHB1YmxpYyBsb2NhbGVJZDogc3RyaW5nLCBwcml2YXRlIHV0aWxzOiBDb21tb25VdGlscykge1xyXG4gICAgaWYgKCFsb2NhbGVJZCkge1xyXG4gICAgICBsb2NhbGVJZCA9IERFRkFVTFRfTEFOR1VBR0U7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2UgPSAnemgtQ0hTJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2UgPSBsb2NhbGVJZDtcclxuICAgIH1cclxuICAgIGlmICghUURQX0xPQ0FMSVpFW2xvY2FsZUlkLnRvTG93ZXJDYXNlKCldKSB7XHJcbiAgICAgIGxvY2FsZUlkID0gREVGQVVMVF9MQU5HVUFHRTtcclxuICAgIH1cclxuICAgIHRoaXMubGFuZ3VhZ2VEYXRhID0gUURQX0xPQ0FMSVpFW2xvY2FsZUlkLnRvTG93ZXJDYXNlKCldO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmFsdWUocHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHZhbCA9IHRoaXMudXRpbHMuZ2V0VmFsdWUocHJvcGVydHlOYW1lLCB0aGlzLmxhbmd1YWdlRGF0YSk7XHJcbiAgICBpZiAodmFsKSB7XHJcbiAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oYENhblxcJ3QgZmluZCBsYW5ndWFnZSBEYXRhIGZvciB0aGUgJHtwcm9wZXJ0eU5hbWV9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==