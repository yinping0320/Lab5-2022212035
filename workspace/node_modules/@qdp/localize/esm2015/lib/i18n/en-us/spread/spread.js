/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const SPREAD = {
    crossTable: {
        dimensionManager: 'Dimension Setting',
        dimensionName: [
            'unselect', 'row dimension', 'column dimension', 'value dimension'
        ],
        columnManager: 'Column Setting',
        columnSetting: [
            'unselect', 'column setting', 'column group'
        ],
        valueDimensionTitle: 'Please drag the numeric field here',
        rowDimensionTitle: 'Please drag the text field here',
        colDimensionTitle: 'Please drag the text field here',
    },
    aggreateText: 'summary',
    message: {
        export: 'The system does not support the export of prefabricated scheme. Please save the prefabricated scheme before executing the export operation!',
        print: 'The system does not support the print of prefabricated scheme. Please save the prefabricated scheme before executing the print operation!',
        preview: 'The system does not support the preview of prefabricated scheme. Please save the prefabricated scheme before executing the preview operation!',
        aysnExport: 'Due to the large amount of data, the system carries out asynchronous export. After the export is completed, please check it in the system messageÔºÅ',
        clearCache: 'Cache cleared successfully!',
        extend: {
            query: {
                before: 'before query',
                after: 'after query',
            },
            dataLoading: {
                before: 'before data loading',
                after: 'after data loading'
            },
            render: {
                before: 'before render',
                after: 'after render'
            }
        },
        click: {
            select: 'selected event',
            cellSelect: 'selected cell event',
        },
        validate: {
            schemaInfo: 'Maintain the format scheme for the current query!',
            rowDimension: 'Maintain the row dimension of the corresponding format scheme for the current query!',
            valueDimension: 'Maintain the value dimension of the corresponding format scheme for the current query',
            nodata: 'No data',
            sort: 'Unable to modify the system preform, please save the scheme first!',
            qdpQueryExport: 'No permission to export!',
            qdpQueryPrint: 'No permission to print!',
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ByZWFkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9sb2NhbGl6ZS8iLCJzb3VyY2VzIjpbImxpYi9pMThuL2VuLXVzL3NwcmVhZC9zcHJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNLE9BQU8sTUFBTSxHQUFHO0lBQ3BCLFVBQVUsRUFBRTtRQUNWLGdCQUFnQixFQUFFLG1CQUFtQjtRQUNyQyxhQUFhLEVBQUU7WUFDYixVQUFVLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQjtTQUNuRTtRQUNELGFBQWEsRUFBRSxnQkFBZ0I7UUFDL0IsYUFBYSxFQUFFO1lBQ2IsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGNBQWM7U0FDN0M7UUFDRCxtQkFBbUIsRUFBRSxvQ0FBb0M7UUFDekQsaUJBQWlCLEVBQUUsaUNBQWlDO1FBQ3BELGlCQUFpQixFQUFFLGlDQUFpQztLQUNyRDtJQUNELFlBQVksRUFBRSxTQUFTO0lBQ3ZCLE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBRSw2SUFBNkk7UUFDckosS0FBSyxFQUFFLDJJQUEySTtRQUNsSixPQUFPLEVBQUUsK0lBQStJO1FBQ3hKLFVBQVUsRUFBRSxvSkFBb0o7UUFDaEssVUFBVSxFQUFFLDZCQUE2QjtRQUN6QyxNQUFNLEVBQUU7WUFDTixLQUFLLEVBQUU7Z0JBQ0wsTUFBTSxFQUFFLGNBQWM7Z0JBQ3RCLEtBQUssRUFBRSxhQUFhO2FBQ3JCO1lBQ0QsV0FBVyxFQUFFO2dCQUNYLE1BQU0sRUFBRSxxQkFBcUI7Z0JBQzdCLEtBQUssRUFBRSxvQkFBb0I7YUFDNUI7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLGVBQWU7Z0JBQ3ZCLEtBQUssRUFBRSxjQUFjO2FBQ3RCO1NBQ0Y7UUFDRCxLQUFLLEVBQUU7WUFDTCxNQUFNLEVBQUUsZ0JBQWdCO1lBQ3hCLFVBQVUsRUFBRSxxQkFBcUI7U0FDbEM7UUFDRCxRQUFRLEVBQUU7WUFDUixVQUFVLEVBQUUsbURBQW1EO1lBQy9ELFlBQVksRUFBRSxzRkFBc0Y7WUFDcEcsY0FBYyxFQUFFLHVGQUF1RjtZQUN2RyxNQUFNLEVBQUUsU0FBUztZQUNqQixJQUFJLEVBQUUsb0VBQW9FO1lBQzFFLGNBQWMsRUFBRSwwQkFBMEI7WUFDMUMsYUFBYSxFQUFFLHlCQUF5QjtTQUN6QztLQUNGO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgU1BSRUFEID0ge1xyXG4gIGNyb3NzVGFibGU6IHtcclxuICAgIGRpbWVuc2lvbk1hbmFnZXI6ICdEaW1lbnNpb24gU2V0dGluZycsXHJcbiAgICBkaW1lbnNpb25OYW1lOiBbXHJcbiAgICAgICd1bnNlbGVjdCcsICdyb3cgZGltZW5zaW9uJywgJ2NvbHVtbiBkaW1lbnNpb24nLCAndmFsdWUgZGltZW5zaW9uJ1xyXG4gICAgXSxcclxuICAgIGNvbHVtbk1hbmFnZXI6ICdDb2x1bW4gU2V0dGluZycsXHJcbiAgICBjb2x1bW5TZXR0aW5nOiBbXHJcbiAgICAgICd1bnNlbGVjdCcsICdjb2x1bW4gc2V0dGluZycsICdjb2x1bW4gZ3JvdXAnXHJcbiAgICBdLFxyXG4gICAgdmFsdWVEaW1lbnNpb25UaXRsZTogJ1BsZWFzZSBkcmFnIHRoZSBudW1lcmljIGZpZWxkIGhlcmUnLFxyXG4gICAgcm93RGltZW5zaW9uVGl0bGU6ICdQbGVhc2UgZHJhZyB0aGUgdGV4dCBmaWVsZCBoZXJlJyxcclxuICAgIGNvbERpbWVuc2lvblRpdGxlOiAnUGxlYXNlIGRyYWcgdGhlIHRleHQgZmllbGQgaGVyZScsXHJcbiAgfSxcclxuICBhZ2dyZWF0ZVRleHQ6ICdzdW1tYXJ5JyxcclxuICBtZXNzYWdlOiB7XHJcbiAgICBleHBvcnQ6ICdUaGUgc3lzdGVtIGRvZXMgbm90IHN1cHBvcnQgdGhlIGV4cG9ydCBvZiBwcmVmYWJyaWNhdGVkIHNjaGVtZS4gUGxlYXNlIHNhdmUgdGhlIHByZWZhYnJpY2F0ZWQgc2NoZW1lIGJlZm9yZSBleGVjdXRpbmcgdGhlIGV4cG9ydCBvcGVyYXRpb24hJyxcclxuICAgIHByaW50OiAnVGhlIHN5c3RlbSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBwcmludCBvZiBwcmVmYWJyaWNhdGVkIHNjaGVtZS4gUGxlYXNlIHNhdmUgdGhlIHByZWZhYnJpY2F0ZWQgc2NoZW1lIGJlZm9yZSBleGVjdXRpbmcgdGhlIHByaW50IG9wZXJhdGlvbiEnLFxyXG4gICAgcHJldmlldzogJ1RoZSBzeXN0ZW0gZG9lcyBub3Qgc3VwcG9ydCB0aGUgcHJldmlldyBvZiBwcmVmYWJyaWNhdGVkIHNjaGVtZS4gUGxlYXNlIHNhdmUgdGhlIHByZWZhYnJpY2F0ZWQgc2NoZW1lIGJlZm9yZSBleGVjdXRpbmcgdGhlIHByZXZpZXcgb3BlcmF0aW9uIScsXHJcbiAgICBheXNuRXhwb3J0OiAnRHVlIHRvIHRoZSBsYXJnZSBhbW91bnQgb2YgZGF0YSwgdGhlIHN5c3RlbSBjYXJyaWVzIG91dCBhc3luY2hyb25vdXMgZXhwb3J0LiBBZnRlciB0aGUgZXhwb3J0IGlzIGNvbXBsZXRlZCwgcGxlYXNlIGNoZWNrIGl0IGluIHRoZSBzeXN0ZW0gbWVzc2FnZe+8gScsXHJcbiAgICBjbGVhckNhY2hlOiAnQ2FjaGUgY2xlYXJlZCBzdWNjZXNzZnVsbHkhJyxcclxuICAgIGV4dGVuZDoge1xyXG4gICAgICBxdWVyeToge1xyXG4gICAgICAgIGJlZm9yZTogJ2JlZm9yZSBxdWVyeScsXHJcbiAgICAgICAgYWZ0ZXI6ICdhZnRlciBxdWVyeScsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRhdGFMb2FkaW5nOiB7XHJcbiAgICAgICAgYmVmb3JlOiAnYmVmb3JlIGRhdGEgbG9hZGluZycsXHJcbiAgICAgICAgYWZ0ZXI6ICdhZnRlciBkYXRhIGxvYWRpbmcnXHJcbiAgICAgIH0sXHJcbiAgICAgIHJlbmRlcjoge1xyXG4gICAgICAgIGJlZm9yZTogJ2JlZm9yZSByZW5kZXInLFxyXG4gICAgICAgIGFmdGVyOiAnYWZ0ZXIgcmVuZGVyJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xpY2s6IHtcclxuICAgICAgc2VsZWN0OiAnc2VsZWN0ZWQgZXZlbnQnLFxyXG4gICAgICBjZWxsU2VsZWN0OiAnc2VsZWN0ZWQgY2VsbCBldmVudCcsXHJcbiAgICB9LFxyXG4gICAgdmFsaWRhdGU6IHtcclxuICAgICAgc2NoZW1hSW5mbzogJ01haW50YWluIHRoZSBmb3JtYXQgc2NoZW1lIGZvciB0aGUgY3VycmVudCBxdWVyeSEnLFxyXG4gICAgICByb3dEaW1lbnNpb246ICdNYWludGFpbiB0aGUgcm93IGRpbWVuc2lvbiBvZiB0aGUgY29ycmVzcG9uZGluZyBmb3JtYXQgc2NoZW1lIGZvciB0aGUgY3VycmVudCBxdWVyeSEnLFxyXG4gICAgICB2YWx1ZURpbWVuc2lvbjogJ01haW50YWluIHRoZSB2YWx1ZSBkaW1lbnNpb24gb2YgdGhlIGNvcnJlc3BvbmRpbmcgZm9ybWF0IHNjaGVtZSBmb3IgdGhlIGN1cnJlbnQgcXVlcnknLFxyXG4gICAgICBub2RhdGE6ICdObyBkYXRhJyxcclxuICAgICAgc29ydDogJ1VuYWJsZSB0byBtb2RpZnkgdGhlIHN5c3RlbSBwcmVmb3JtLCBwbGVhc2Ugc2F2ZSB0aGUgc2NoZW1lIGZpcnN0IScsXHJcbiAgICAgIHFkcFF1ZXJ5RXhwb3J0OiAnTm8gcGVybWlzc2lvbiB0byBleHBvcnQhJyxcclxuICAgICAgcWRwUXVlcnlQcmludDogJ05vIHBlcm1pc3Npb24gdG8gcHJpbnQhJyxcclxuICAgIH1cclxuICB9XHJcbn07XHJcbiJdfQ==