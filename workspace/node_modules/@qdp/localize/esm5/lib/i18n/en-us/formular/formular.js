/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export var Formular = {
    define: {
        labelSaveFormular: 'SaveFormula',
        labelSaveAsFormular: 'SaveAsFormula',
        labelDeleteFormular: 'DeleteFormula',
        labelGeneraterFormular: 'GenerateFormula',
        labelQueryFunc: 'QueryFunc',
        labelBasicInfo: 'BasicInfo',
        labelFormularName: 'FormulaName',
        labelIsGroup: 'IsGroup',
        labelParamInfo: 'ParamInfo',
        labelResultColInfo: 'ResultColInfo',
        resultSortColumns: [
            {
                id: '0',
                label: 'None'
            },
            {
                id: '1',
                label: 'Asc'
            },
            {
                id: '2',
                label: 'Desc'
            }
        ],
        resultColVisibleColumns: [
            {
                id: '0',
                label: 'False'
            },
            {
                id: '1',
                label: 'True'
            }
        ],
        columntitles: {
            'resultcolvisible': 'isQuery',
            'resultcode': 'resultCol',
            'resultdescription': 'description',
            'resultsort': 'resultSort'
        },
        messageAlert: {
            'nameVerify': 'FormulaName required！',
            'funcVerify': 'QueryFunc required！',
            'saveFormular': 'Formula save successed',
            'saveAsFormular': 'Formula save as successed',
            'saveAsFormularFailture': 'Formula save as failture',
            'pleaseSelectQueryFunc': 'Please select QueryFunc！',
            'pleaseSelectFormular': 'Please select Formular！',
            'resultVerify': 'Keep one column in the resultInfo as the return value！',
            'formularResultVerify': 'Keep at least one column in the resultInfo as the return value！',
            'combineVerify': 'Please maintain the composition formula！',
            'formularIntegrityVerify': 'Formula is not correct, please check and click finish!',
            'saveFormularFailure': 'Save formula failed！',
            'formularSaveVerify': 'Please save the formula and click finish！',
            'deleteFormular': 'Delete formula successed!',
            'deleteFormularFailure': 'Delete formula failed!',
            'formularIsProtected': 'This formular is protected and cannot be modified.',
            'formularIsProtectedNotDelete': 'This formular is protected and cannot be deleted.'
        }
    },
    defineWizard: {
        labelSelectTemplate: 'Select Wizard',
        labelFormularDefine: 'Formula Definition',
    },
    step: {
        labelPre: 'PreStep',
        labelNext: 'NextStep',
        labelFinish: 'Finish',
    },
    formularSelect: {
        selectionFormular: '[{"value":"0","name":"formula select"},{"value":"1","name":"formula create"},{"value":"2","name":"compose formula"}]',
        lableQdpFormular: 'QdpFormula',
        messageAlert: {
            'formularSelectVerify': 'Please select the formula！',
            'formularDefineVerify': 'Please define the take number formula or combination formula！',
        }
    },
    service: {
        lableFormulaWizard: 'Formula Wizard',
        messageAlert: {
            'formulaVerify': 'No valid formula is currently formed, confirm to close'
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXVsYXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2xvY2FsaXplLyIsInNvdXJjZXMiOlsibGliL2kxOG4vZW4tdXMvZm9ybXVsYXIvZm9ybXVsYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNLEtBQU8sUUFBUSxHQUFHO0lBQ3BCLE1BQU0sRUFBRTtRQUNOLGlCQUFpQixFQUFFLGFBQWE7UUFDaEMsbUJBQW1CLEVBQUUsZUFBZTtRQUNwQyxtQkFBbUIsRUFBRSxlQUFlO1FBQ3BDLHNCQUFzQixFQUFFLGlCQUFpQjtRQUN6QyxjQUFjLEVBQUUsV0FBVztRQUMzQixjQUFjLEVBQUUsV0FBVztRQUMzQixpQkFBaUIsRUFBRSxhQUFhO1FBQ2hDLFlBQVksRUFBRSxTQUFTO1FBQ3ZCLGNBQWMsRUFBRSxXQUFXO1FBQzNCLGtCQUFrQixFQUFFLGVBQWU7UUFDbkMsaUJBQWlCLEVBQUU7WUFDakI7Z0JBQ0UsRUFBRSxFQUFFLEdBQUc7Z0JBQ1AsS0FBSyxFQUFFLE1BQU07YUFDZDtZQUNEO2dCQUNFLEVBQUUsRUFBRSxHQUFHO2dCQUNQLEtBQUssRUFBRSxLQUFLO2FBQ2I7WUFDRDtnQkFDRSxFQUFFLEVBQUUsR0FBRztnQkFDUCxLQUFLLEVBQUUsTUFBTTthQUNkO1NBQ0Y7UUFDRCx1QkFBdUIsRUFBRTtZQUN2QjtnQkFDRSxFQUFFLEVBQUUsR0FBRztnQkFDUCxLQUFLLEVBQUUsT0FBTzthQUNmO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLEdBQUc7Z0JBQ1AsS0FBSyxFQUFFLE1BQU07YUFDZDtTQUNGO1FBQ0QsWUFBWSxFQUFFO1lBQ1osa0JBQWtCLEVBQUUsU0FBUztZQUM3QixZQUFZLEVBQUUsV0FBVztZQUN6QixtQkFBbUIsRUFBRSxhQUFhO1lBQ2xDLFlBQVksRUFBRSxZQUFZO1NBQzNCO1FBQ0QsWUFBWSxFQUFFO1lBQ1osWUFBWSxFQUFFLHVCQUF1QjtZQUNyQyxZQUFZLEVBQUUscUJBQXFCO1lBQ25DLGNBQWMsRUFBRSx3QkFBd0I7WUFDeEMsZ0JBQWdCLEVBQUUsMkJBQTJCO1lBQzdDLHdCQUF3QixFQUFFLDBCQUEwQjtZQUNwRCx1QkFBdUIsRUFBRSwwQkFBMEI7WUFDbkQsc0JBQXNCLEVBQUUseUJBQXlCO1lBQ2pELGNBQWMsRUFBRSx3REFBd0Q7WUFDeEUsc0JBQXNCLEVBQUUsaUVBQWlFO1lBQ3pGLGVBQWUsRUFBRSwwQ0FBMEM7WUFDM0QseUJBQXlCLEVBQUUsd0RBQXdEO1lBQ25GLHFCQUFxQixFQUFFLHNCQUFzQjtZQUM3QyxvQkFBb0IsRUFBRSwyQ0FBMkM7WUFDakUsZ0JBQWdCLEVBQUUsMkJBQTJCO1lBQzdDLHVCQUF1QixFQUFFLHdCQUF3QjtZQUNqRCxxQkFBcUIsRUFBRSxvREFBb0Q7WUFDM0UsOEJBQThCLEVBQUUsbURBQW1EO1NBQ3BGO0tBQ0Y7SUFDRCxZQUFZLEVBQUU7UUFDVixtQkFBbUIsRUFBRSxlQUFlO1FBQ3BDLG1CQUFtQixFQUFFLG9CQUFvQjtLQUM1QztJQUNELElBQUksRUFBRTtRQUNGLFFBQVEsRUFBRSxTQUFTO1FBQ25CLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLFdBQVcsRUFBRSxRQUFRO0tBQ3hCO0lBQ0QsY0FBYyxFQUFFO1FBQ1osaUJBQWlCLEVBQUUsc0hBQXNIO1FBQ3pJLGdCQUFnQixFQUFFLFlBQVk7UUFDOUIsWUFBWSxFQUFFO1lBQ1Ysc0JBQXNCLEVBQUUsNEJBQTRCO1lBQ3BELHNCQUFzQixFQUFFLCtEQUErRDtTQUN4RjtLQUNOO0lBQ0QsT0FBTyxFQUFFO1FBQ0wsa0JBQWtCLEVBQUUsZ0JBQWdCO1FBQ3BDLFlBQVksRUFBRTtZQUNWLGVBQWUsRUFBRSx3REFBd0Q7U0FDNUU7S0FDSjtDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEZvcm11bGFyID0ge1xyXG4gICAgZGVmaW5lOiB7XHJcbiAgICAgIGxhYmVsU2F2ZUZvcm11bGFyOiAnU2F2ZUZvcm11bGEnLFxyXG4gICAgICBsYWJlbFNhdmVBc0Zvcm11bGFyOiAnU2F2ZUFzRm9ybXVsYScsXHJcbiAgICAgIGxhYmVsRGVsZXRlRm9ybXVsYXI6ICdEZWxldGVGb3JtdWxhJyxcclxuICAgICAgbGFiZWxHZW5lcmF0ZXJGb3JtdWxhcjogJ0dlbmVyYXRlRm9ybXVsYScsXHJcbiAgICAgIGxhYmVsUXVlcnlGdW5jOiAnUXVlcnlGdW5jJyxcclxuICAgICAgbGFiZWxCYXNpY0luZm86ICdCYXNpY0luZm8nLFxyXG4gICAgICBsYWJlbEZvcm11bGFyTmFtZTogJ0Zvcm11bGFOYW1lJyxcclxuICAgICAgbGFiZWxJc0dyb3VwOiAnSXNHcm91cCcsXHJcbiAgICAgIGxhYmVsUGFyYW1JbmZvOiAnUGFyYW1JbmZvJyxcclxuICAgICAgbGFiZWxSZXN1bHRDb2xJbmZvOiAnUmVzdWx0Q29sSW5mbycsXHJcbiAgICAgIHJlc3VsdFNvcnRDb2x1bW5zOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcwJyxcclxuICAgICAgICAgIGxhYmVsOiAnTm9uZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMScsXHJcbiAgICAgICAgICBsYWJlbDogJ0FzYydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMicsXHJcbiAgICAgICAgICBsYWJlbDogJ0Rlc2MnXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICByZXN1bHRDb2xWaXNpYmxlQ29sdW1uczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMCcsXHJcbiAgICAgICAgICBsYWJlbDogJ0ZhbHNlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxJyxcclxuICAgICAgICAgIGxhYmVsOiAnVHJ1ZSdcclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIGNvbHVtbnRpdGxlczoge1xyXG4gICAgICAgICdyZXN1bHRjb2x2aXNpYmxlJzogJ2lzUXVlcnknLFxyXG4gICAgICAgICdyZXN1bHRjb2RlJzogJ3Jlc3VsdENvbCcsXHJcbiAgICAgICAgJ3Jlc3VsdGRlc2NyaXB0aW9uJzogJ2Rlc2NyaXB0aW9uJyxcclxuICAgICAgICAncmVzdWx0c29ydCc6ICdyZXN1bHRTb3J0J1xyXG4gICAgICB9LFxyXG4gICAgICBtZXNzYWdlQWxlcnQ6IHtcclxuICAgICAgICAnbmFtZVZlcmlmeSc6ICdGb3JtdWxhTmFtZSByZXF1aXJlZO+8gScsXHJcbiAgICAgICAgJ2Z1bmNWZXJpZnknOiAnUXVlcnlGdW5jIHJlcXVpcmVk77yBJyxcclxuICAgICAgICAnc2F2ZUZvcm11bGFyJzogJ0Zvcm11bGEgc2F2ZSBzdWNjZXNzZWQnLFxyXG4gICAgICAgICdzYXZlQXNGb3JtdWxhcic6ICdGb3JtdWxhIHNhdmUgYXMgc3VjY2Vzc2VkJyxcclxuICAgICAgICAnc2F2ZUFzRm9ybXVsYXJGYWlsdHVyZSc6ICdGb3JtdWxhIHNhdmUgYXMgZmFpbHR1cmUnLFxyXG4gICAgICAgICdwbGVhc2VTZWxlY3RRdWVyeUZ1bmMnOiAnUGxlYXNlIHNlbGVjdCBRdWVyeUZ1bmPvvIEnLFxyXG4gICAgICAgICdwbGVhc2VTZWxlY3RGb3JtdWxhcic6ICdQbGVhc2Ugc2VsZWN0IEZvcm11bGFy77yBJyxcclxuICAgICAgICAncmVzdWx0VmVyaWZ5JzogJ0tlZXAgb25lIGNvbHVtbiBpbiB0aGUgcmVzdWx0SW5mbyBhcyB0aGUgcmV0dXJuIHZhbHVl77yBJyxcclxuICAgICAgICAnZm9ybXVsYXJSZXN1bHRWZXJpZnknOiAnS2VlcCBhdCBsZWFzdCBvbmUgY29sdW1uIGluIHRoZSByZXN1bHRJbmZvIGFzIHRoZSByZXR1cm4gdmFsdWXvvIEnLFxyXG4gICAgICAgICdjb21iaW5lVmVyaWZ5JzogJ1BsZWFzZSBtYWludGFpbiB0aGUgY29tcG9zaXRpb24gZm9ybXVsYe+8gScsXHJcbiAgICAgICAgJ2Zvcm11bGFySW50ZWdyaXR5VmVyaWZ5JzogJ0Zvcm11bGEgaXMgbm90IGNvcnJlY3QsIHBsZWFzZSBjaGVjayBhbmQgY2xpY2sgZmluaXNoIScsXHJcbiAgICAgICAgJ3NhdmVGb3JtdWxhckZhaWx1cmUnOiAnU2F2ZSBmb3JtdWxhIGZhaWxlZO+8gScsXHJcbiAgICAgICAgJ2Zvcm11bGFyU2F2ZVZlcmlmeSc6ICdQbGVhc2Ugc2F2ZSB0aGUgZm9ybXVsYSBhbmQgY2xpY2sgZmluaXNo77yBJyxcclxuICAgICAgICAnZGVsZXRlRm9ybXVsYXInOiAnRGVsZXRlIGZvcm11bGEgc3VjY2Vzc2VkIScsXHJcbiAgICAgICAgJ2RlbGV0ZUZvcm11bGFyRmFpbHVyZSc6ICdEZWxldGUgZm9ybXVsYSBmYWlsZWQhJyxcclxuICAgICAgICAnZm9ybXVsYXJJc1Byb3RlY3RlZCc6ICdUaGlzIGZvcm11bGFyIGlzIHByb3RlY3RlZCBhbmQgY2Fubm90IGJlIG1vZGlmaWVkLicsXHJcbiAgICAgICAgJ2Zvcm11bGFySXNQcm90ZWN0ZWROb3REZWxldGUnOiAnVGhpcyBmb3JtdWxhciBpcyBwcm90ZWN0ZWQgYW5kIGNhbm5vdCBiZSBkZWxldGVkLidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlZmluZVdpemFyZDoge1xyXG4gICAgICAgIGxhYmVsU2VsZWN0VGVtcGxhdGU6ICdTZWxlY3QgV2l6YXJkJyxcclxuICAgICAgICBsYWJlbEZvcm11bGFyRGVmaW5lOiAnRm9ybXVsYSBEZWZpbml0aW9uJyxcclxuICAgIH0sXHJcbiAgICBzdGVwOiB7XHJcbiAgICAgICAgbGFiZWxQcmU6ICdQcmVTdGVwJyxcclxuICAgICAgICBsYWJlbE5leHQ6ICdOZXh0U3RlcCcsXHJcbiAgICAgICAgbGFiZWxGaW5pc2g6ICdGaW5pc2gnLFxyXG4gICAgfSxcclxuICAgIGZvcm11bGFyU2VsZWN0OiB7XHJcbiAgICAgICAgc2VsZWN0aW9uRm9ybXVsYXI6ICdbe1widmFsdWVcIjpcIjBcIixcIm5hbWVcIjpcImZvcm11bGEgc2VsZWN0XCJ9LHtcInZhbHVlXCI6XCIxXCIsXCJuYW1lXCI6XCJmb3JtdWxhIGNyZWF0ZVwifSx7XCJ2YWx1ZVwiOlwiMlwiLFwibmFtZVwiOlwiY29tcG9zZSBmb3JtdWxhXCJ9XScsXHJcbiAgICAgICAgbGFibGVRZHBGb3JtdWxhcjogJ1FkcEZvcm11bGEnLFxyXG4gICAgICAgIG1lc3NhZ2VBbGVydDoge1xyXG4gICAgICAgICAgICAnZm9ybXVsYXJTZWxlY3RWZXJpZnknOiAnUGxlYXNlIHNlbGVjdCB0aGUgZm9ybXVsYe+8gScsXHJcbiAgICAgICAgICAgICdmb3JtdWxhckRlZmluZVZlcmlmeSc6ICdQbGVhc2UgZGVmaW5lIHRoZSB0YWtlIG51bWJlciBmb3JtdWxhIG9yIGNvbWJpbmF0aW9uIGZvcm11bGHvvIEnLFxyXG4gICAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNlcnZpY2U6IHtcclxuICAgICAgICBsYWJsZUZvcm11bGFXaXphcmQ6ICdGb3JtdWxhIFdpemFyZCcsXHJcbiAgICAgICAgbWVzc2FnZUFsZXJ0OiB7XHJcbiAgICAgICAgICAgICdmb3JtdWxhVmVyaWZ5JzogJ05vIHZhbGlkIGZvcm11bGEgaXMgY3VycmVudGx5IGZvcm1lZCwgY29uZmlybSB0byBjbG9zZSdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH07Il19