/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, LOCALE_ID, Inject } from '@angular/core';
import { CommonUtils } from '@farris/ui-common';
import { QDP_LOCALIZE, DEFAULT_LANGUAGE } from './i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-common";
var LocalizeService = /** @class */ (function () {
    function LocalizeService(localeId, utils) {
        this.localeId = localeId;
        this.utils = utils;
        if (!localeId) {
            localeId = DEFAULT_LANGUAGE;
            this.language = 'zh-CHS';
        }
        else {
            this.language = localeId;
        }
        if (!QDP_LOCALIZE[localeId.toLowerCase()]) {
            localeId = DEFAULT_LANGUAGE;
        }
        this.languageData = QDP_LOCALIZE[localeId.toLowerCase()];
    }
    /**
     * @param {?} propertyName
     * @return {?}
     */
    LocalizeService.prototype.getValue = /**
     * @param {?} propertyName
     * @return {?}
     */
    function (propertyName) {
        /** @type {?} */
        var val = this.utils.getValue(propertyName, this.languageData);
        if (val) {
            return val;
        }
        else {
            console.warn("Can't find language Data for the " + propertyName);
        }
    };
    LocalizeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocalizeService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: CommonUtils }
    ]; };
    /** @nocollapse */ LocalizeService.ngInjectableDef = i0.defineInjectable({ factory: function LocalizeService_Factory() { return new LocalizeService(i0.inject(i0.LOCALE_ID), i0.inject(i1.CommonUtils)); }, token: LocalizeService, providedIn: "root" });
    return LocalizeService;
}());
export { LocalizeService };
if (false) {
    /** @type {?} */
    LocalizeService.prototype.languageData;
    /** @type {?} */
    LocalizeService.prototype.language;
    /** @type {?} */
    LocalizeService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    LocalizeService.prototype.utils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BxZHAvbG9jYWxpemUvIiwic291cmNlcyI6WyJsaWIvbG9jYWxpemUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFFOUQ7SUFPRSx5QkFBc0MsUUFBZ0IsRUFBVSxLQUFrQjtRQUE1QyxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQUNoRixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsUUFBUSxHQUFHLGdCQUFnQixDQUFDO1lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzFCO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUU7WUFDekMsUUFBUSxHQUFHLGdCQUFnQixDQUFDO1NBQzdCO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7Ozs7SUFFRCxrQ0FBUTs7OztJQUFSLFVBQVMsWUFBb0I7O1lBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNoRSxJQUFJLEdBQUcsRUFBRTtZQUNQLE9BQU8sR0FBRyxDQUFDO1NBQ1o7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0NBQXFDLFlBQWMsQ0FBQyxDQUFDO1NBQ25FO0lBQ0gsQ0FBQzs7Z0JBM0JGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7NkNBS2MsTUFBTSxTQUFDLFNBQVM7Z0JBVnRCLFdBQVc7OzswQkFEcEI7Q0FnQ0MsQUE1QkQsSUE0QkM7U0F6QlksZUFBZTs7O0lBQzFCLHVDQUFrQjs7SUFDbEIsbUNBQWM7O0lBRUYsbUNBQTBDOzs7OztJQUFFLGdDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIExPQ0FMRV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vblV0aWxzIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBRRFBfTE9DQUxJWkUsIERFRkFVTFRfTEFOR1VBR0UgfSBmcm9tICcuL2kxOG4vaW5kZXgnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9jYWxpemVTZXJ2aWNlIHtcclxuICBsYW5ndWFnZURhdGE6IGFueTtcclxuICBsYW5ndWFnZTogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KExPQ0FMRV9JRCkgcHVibGljIGxvY2FsZUlkOiBzdHJpbmcsIHByaXZhdGUgdXRpbHM6IENvbW1vblV0aWxzKSB7XHJcbiAgICBpZiAoIWxvY2FsZUlkKSB7XHJcbiAgICAgIGxvY2FsZUlkID0gREVGQVVMVF9MQU5HVUFHRTtcclxuICAgICAgdGhpcy5sYW5ndWFnZSA9ICd6aC1DSFMnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5sYW5ndWFnZSA9IGxvY2FsZUlkO1xyXG4gICAgfVxyXG4gICAgaWYgKCFRRFBfTE9DQUxJWkVbbG9jYWxlSWQudG9Mb3dlckNhc2UoKV0pIHtcclxuICAgICAgbG9jYWxlSWQgPSBERUZBVUxUX0xBTkdVQUdFO1xyXG4gICAgfVxyXG4gICAgdGhpcy5sYW5ndWFnZURhdGEgPSBRRFBfTE9DQUxJWkVbbG9jYWxlSWQudG9Mb3dlckNhc2UoKV07XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZShwcm9wZXJ0eU5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgdmFsID0gdGhpcy51dGlscy5nZXRWYWx1ZShwcm9wZXJ0eU5hbWUsIHRoaXMubGFuZ3VhZ2VEYXRhKTtcclxuICAgIGlmICh2YWwpIHtcclxuICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgQ2FuXFwndCBmaW5kIGxhbmd1YWdlIERhdGEgZm9yIHRoZSAke3Byb3BlcnR5TmFtZX1gKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19