/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
export class ResizedEvent {
    /**
     * @param {?} element
     * @param {?} newWidth
     * @param {?} newHeight
     * @param {?} oldWidth
     * @param {?} oldHeight
     */
    constructor(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
}
if (false) {
    /** @type {?} */
    ResizedEvent.prototype.element;
    /** @type {?} */
    ResizedEvent.prototype.newWidth;
    /** @type {?} */
    ResizedEvent.prototype.newHeight;
    /** @type {?} */
    ResizedEvent.prototype.oldWidth;
    /** @type {?} */
    ResizedEvent.prototype.oldHeight;
}
export class ResizedDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        // tslint:disable-next-line:no-output-rename
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // tslint:disable-next-line:no-unused-expression
        new ResizeSensor(this.element.nativeElement, (/**
         * @param {?} x
         * @return {?}
         */
        x => this.onResized()));
        this.onResized();
    }
    /**
     * @private
     * @return {?}
     */
    onResized() {
        /** @type {?} */
        const newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        const newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        /** @type {?} */
        const event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.next(event);
    }
}
ResizedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resized]'
            },] }
];
/** @nocollapse */
ResizedDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizedDirective.propDecorators = {
    resized: [{ type: Output, args: ['resized',] }]
};
if (false) {
    /** @type {?} */
    ResizedDirective.prototype.resized;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldWidth;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldHeight;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlL3Jlc2l6ZWQvcmVzaXplZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5ELE1BQU0sT0FBTyxZQUFZOzs7Ozs7OztJQUN2QixZQUNXLE9BQW1CLEVBQ25CLFFBQWdCLEVBQ2hCLFNBQWlCLEVBQ2pCLFFBQWdCLEVBQ2hCLFNBQWlCO1FBSmpCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ2pCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUN6QixDQUFDO0NBQ0w7OztJQU5HLCtCQUE0Qjs7SUFDNUIsZ0NBQXlCOztJQUN6QixpQ0FBMEI7O0lBQzFCLGdDQUF5Qjs7SUFDekIsaUNBQTBCOztBQU85QixNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBUTNCLFlBQTZCLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7O1FBTHZDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztJQU1wRCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLGdEQUFnRDtRQUNoRCxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7Ozs7UUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVPLFNBQVM7O2NBQ1QsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVc7O2NBQ2pELFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZO1FBRXpELElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDOUQsT0FBTztTQUNSOztjQUVLLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FDNUIsSUFBSSxDQUFDLE9BQU8sRUFDWixRQUFRLEVBQ1IsU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUVqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUV6RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7WUF2Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2FBQ3RCOzs7O1lBZm1CLFVBQVU7OztzQkFrQjNCLE1BQU0sU0FBQyxTQUFTOzs7O0lBQWpCLG1DQUNvRDs7Ozs7SUFFcEQsb0NBQXlCOzs7OztJQUN6QixxQ0FBMEI7Ozs7O0lBRWQsbUNBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlc2l6ZVNlbnNvciB9IGZyb20gJ2Nzcy1lbGVtZW50LXF1ZXJpZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlc2l6ZWRFdmVudCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmLFxyXG4gICAgcmVhZG9ubHkgbmV3V2lkdGg6IG51bWJlcixcclxuICAgIHJlYWRvbmx5IG5ld0hlaWdodDogbnVtYmVyLFxyXG4gICAgcmVhZG9ubHkgb2xkV2lkdGg6IG51bWJlcixcclxuICAgIHJlYWRvbmx5IG9sZEhlaWdodDogbnVtYmVyXHJcbiAgKSB7fVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tyZXNpemVkXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJlc2l6ZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1vdXRwdXQtcmVuYW1lXHJcbiAgQE91dHB1dCgncmVzaXplZCcpXHJcbiAgcmVhZG9ubHkgcmVzaXplZCA9IG5ldyBFdmVudEVtaXR0ZXI8UmVzaXplZEV2ZW50PigpO1xyXG5cclxuICBwcml2YXRlIG9sZFdpZHRoOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBvbGRIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgbmV3IFJlc2l6ZVNlbnNvcih0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgeCA9PiB0aGlzLm9uUmVzaXplZCgpKTtcclxuICAgIHRoaXMub25SZXNpemVkKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uUmVzaXplZCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICBjb25zdCBuZXdIZWlnaHQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgaWYgKG5ld1dpZHRoID09PSB0aGlzLm9sZFdpZHRoICYmIG5ld0hlaWdodCA9PT0gdGhpcy5vbGRIZWlnaHQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGV2ZW50ID0gbmV3IFJlc2l6ZWRFdmVudChcclxuICAgICAgdGhpcy5lbGVtZW50LFxyXG4gICAgICBuZXdXaWR0aCxcclxuICAgICAgbmV3SGVpZ2h0LFxyXG4gICAgICB0aGlzLm9sZFdpZHRoLFxyXG4gICAgICB0aGlzLm9sZEhlaWdodCk7XHJcblxyXG4gICAgdGhpcy5vbGRXaWR0aCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgdGhpcy5vbGRIZWlnaHQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgdGhpcy5yZXNpemVkLm5leHQoZXZlbnQpO1xyXG4gIH1cclxufVxyXG4iXX0=