/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { JointSearchManagerService, LcpService } from '@qdp/common';
export class JointSearchService {
    /**
     * @param {?} jointSearchManager
     * @param {?} lcpService
     */
    constructor(jointSearchManager, lcpService) {
        this.jointSearchManager = jointSearchManager;
        this.lcpService = lcpService;
        this.jointSearchInfo = new Subject();
        this.jointSearchManager.jointsearchInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.jointSearchInfo.next(value);
        }));
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getjointsearch(id, queryId, queryRelativeUrl) {
        return this.jointSearchManager.getjointsearch(id, queryId, queryRelativeUrl);
    }
    /**
     * @param {?} jointSearchInfo
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    savejointsearch(jointSearchInfo, queryRelativeUrl) {
        return this.jointSearchManager.savejointsearch(jointSearchInfo, queryRelativeUrl);
    }
    /**
     * @param {?} formid
     * @param {?} queryID
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deletejointsearch(formid, queryID, queryRelativeUrl) {
        return this.jointSearchManager.deletejointsearch(formid, queryID, queryRelativeUrl);
    }
    /**
     * @return {?}
     */
    getLanguageList() {
        return this.jointSearchManager.getLanguageList();
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCol(params, queryRelativeUrl) {
        return this.lcpService.getCol(params, queryRelativeUrl);
    }
}
JointSearchService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
JointSearchService.ctorParameters = () => [
    { type: JointSearchManagerService },
    { type: LcpService }
];
if (false) {
    /** @type {?} */
    JointSearchService.prototype.jointSearchInfo;
    /**
     * @type {?}
     * @private
     */
    JointSearchService.prototype.jointSearchManager;
    /**
     * @type {?}
     * @private
     */
    JointSearchService.prototype.lcpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbnQtc2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9qb2ludC1zZWFyY2gvam9pbnQtc2VhcmNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3BFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBSTdCLFlBQW9CLGtCQUE2QyxFQUFVLFVBQXNCO1FBQTdFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMkI7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRmpHLG9CQUFlLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUduQyxJQUFJLENBQUMsa0JBQWtCLENBQUMscUJBQXFCLENBQUMsU0FBUzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxFQUFVLEVBQUUsT0FBZSxFQUFFLGdCQUFxQjtRQUMvRCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7OztJQUVELGVBQWUsQ0FBQyxlQUFvQixFQUFFLGdCQUFxQjtRQUN6RCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDcEYsQ0FBQzs7Ozs7OztJQUVELGlCQUFpQixDQUFDLE1BQVcsRUFBRSxPQUFZLEVBQUUsZ0JBQXFCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN0RixDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxNQUFXLEVBQUUsZ0JBQXFCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQzs7O1lBN0JGLFVBQVU7Ozs7WUFGRix5QkFBeUI7WUFBRSxVQUFVOzs7O0lBSzVDLDZDQUFxQzs7Ozs7SUFFekIsZ0RBQXFEOzs7OztJQUFFLHdDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBKb2ludFNlYXJjaE1hbmFnZXJTZXJ2aWNlLCBMY3BTZXJ2aWNlIH0gZnJvbSAnQHFkcC9jb21tb24nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSm9pbnRTZWFyY2hTZXJ2aWNlIHtcclxuXHJcbiAgam9pbnRTZWFyY2hJbmZvID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGpvaW50U2VhcmNoTWFuYWdlcjogSm9pbnRTZWFyY2hNYW5hZ2VyU2VydmljZSwgcHJpdmF0ZSBsY3BTZXJ2aWNlOiBMY3BTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLmpvaW50U2VhcmNoTWFuYWdlci5qb2ludHNlYXJjaEluZm9DaGFuZ2Uuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgdGhpcy5qb2ludFNlYXJjaEluZm8ubmV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldGpvaW50c2VhcmNoKGlkOiBzdHJpbmcsIHF1ZXJ5SWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmpvaW50U2VhcmNoTWFuYWdlci5nZXRqb2ludHNlYXJjaChpZCwgcXVlcnlJZCwgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG5cclxuICBzYXZlam9pbnRzZWFyY2goam9pbnRTZWFyY2hJbmZvOiBhbnksIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5qb2ludFNlYXJjaE1hbmFnZXIuc2F2ZWpvaW50c2VhcmNoKGpvaW50U2VhcmNoSW5mbywgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVqb2ludHNlYXJjaChmb3JtaWQ6IGFueSwgcXVlcnlJRDogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuam9pbnRTZWFyY2hNYW5hZ2VyLmRlbGV0ZWpvaW50c2VhcmNoKGZvcm1pZCwgcXVlcnlJRCwgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG5cclxuICBnZXRMYW5ndWFnZUxpc3QoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qb2ludFNlYXJjaE1hbmFnZXIuZ2V0TGFuZ3VhZ2VMaXN0KCk7XHJcbiAgfVxyXG4gIFxyXG4gIGdldENvbChwYXJhbXM6IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmxjcFNlcnZpY2UuZ2V0Q29sKHBhcmFtcywgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==