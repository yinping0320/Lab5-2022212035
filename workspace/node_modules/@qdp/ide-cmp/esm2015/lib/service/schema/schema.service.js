/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SchemaManagerService, LcpService } from '@qdp/common';
import { Subject } from 'rxjs/Subject';
export class SchemaService {
    /**
     * @param {?} schemaManager
     * @param {?} lcpService
     */
    constructor(schemaManager, lcpService) {
        this.schemaManager = schemaManager;
        this.lcpService = lcpService;
        this.schemaInfo = new Subject();
        this.colList = new Subject();
        this.pageInfoChange = new Subject();
        this.operationChange = new Subject();
        this.schemaManager.schemaInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.schemaInfo.next(value);
        }));
        this.schemaManager.colList.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.colList.next(value);
        }));
        this.lcpService.pageInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.pageInfoChange.next(value);
        }));
        this.schemaManager.operationChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.operationChange.next(value);
        }));
    }
    /**
     * @param {?} queryId
     * @param {?} userId
     * @param {?} organizationId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @return {?}
     */
    getSchemaList(queryId, userId, organizationId, queryRelativeUrl, groupType) {
        if (groupType) {
            return this.schemaManager.getSchemaListByGroupType(queryId, userId, organizationId, groupType, queryRelativeUrl);
        }
        else {
            return this.schemaManager.getSchemaList(queryId, userId, organizationId, queryRelativeUrl);
        }
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    getSchema(id, queryId, queryRelativeUrl, groupType, organizationId) {
        return this.schemaManager.getSchema(id, queryId, queryRelativeUrl, groupType, organizationId);
    }
    /**
     * @param {?} schema
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveSchema(schema, queryRelativeUrl) {
        return this.schemaManager.saveSchema(schema, queryRelativeUrl);
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    deleteSchema(id, queryId, queryRelativeUrl, groupType, organizationId) {
        return this.schemaManager.deleteSchema(id, queryId, queryRelativeUrl, groupType, organizationId);
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} sheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    getSpreadTemplate(id, queryId, dynamicCols, queryRelativeUrl, sheme, frozenCols, groupType) {
        return this.schemaManager.getSpreadTemplate(id, queryId, dynamicCols, queryRelativeUrl, sheme, frozenCols, groupType);
    }
    /**
     * @param {?} param
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getData(param, queryRelativeUrl) {
        return this.lcpService.getData(param, queryRelativeUrl);
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCol(params, queryRelativeUrl) {
        return this.lcpService.getCol(params, queryRelativeUrl);
    }
    /**
     * @return {?}
     */
    getOperation() {
        return this.schemaManager.getOperation();
    }
}
SchemaService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SchemaService.ctorParameters = () => [
    { type: SchemaManagerService },
    { type: LcpService }
];
if (false) {
    /** @type {?} */
    SchemaService.prototype.schemaInfo;
    /** @type {?} */
    SchemaService.prototype.colList;
    /** @type {?} */
    SchemaService.prototype.pageInfoChange;
    /** @type {?} */
    SchemaService.prototype.operationChange;
    /**
     * @type {?}
     * @private
     */
    SchemaService.prototype.schemaManager;
    /**
     * @type {?}
     * @private
     */
    SchemaService.prototype.lcpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9zY2hlbWEvc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBR3ZDLE1BQU0sT0FBTyxhQUFhOzs7OztJQU14QixZQUFvQixhQUFtQyxFQUFVLFVBQXNCO1FBQW5FLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFMdkYsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDaEMsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDN0IsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQ3BDLG9CQUFlLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUduQyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUMvQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7OztJQUVELGFBQWEsQ0FBQyxPQUFlLEVBQUUsTUFBYyxFQUFFLGNBQXNCLEVBQUUsZ0JBQXFCLEVBQUUsU0FBZTtRQUMzRyxJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztTQUNsSDthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzVGO0lBQ0gsQ0FBQzs7Ozs7Ozs7O0lBRUQsU0FBUyxDQUFDLEVBQVUsRUFBRSxPQUFlLEVBQUUsZ0JBQXFCLEVBQUUsU0FBZSxFQUFFLGNBQW9CO1FBQ2pHLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDaEcsQ0FBQzs7Ozs7O0lBRUQsVUFBVSxDQUFDLE1BQVcsRUFBRSxnQkFBcUI7UUFDM0MsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7Ozs7SUFFRCxZQUFZLENBQUMsRUFBVSxFQUFFLE9BQWUsRUFBRSxnQkFBcUIsRUFBRSxTQUFlLEVBQUUsY0FBb0I7UUFDcEcsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRyxDQUFDOzs7Ozs7Ozs7OztJQUVELGlCQUFpQixDQUFDLEVBQVUsRUFBRSxPQUFlLEVBQUUsV0FBZ0IsRUFBRSxnQkFBcUIsRUFBRSxLQUFXLEVBQUUsVUFBZ0IsRUFBRSxTQUFlO1FBQ3BJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hILENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBQyxLQUFVLEVBQUUsZ0JBQXFCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQVcsRUFBRSxnQkFBcUI7UUFDdkMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQyxDQUFDOzs7WUF4REYsVUFBVTs7OztZQUpGLG9CQUFvQjtZQUFFLFVBQVU7Ozs7SUFNdkMsbUNBQWdDOztJQUNoQyxnQ0FBNkI7O0lBQzdCLHVDQUFvQzs7SUFDcEMsd0NBQXFDOzs7OztJQUV6QixzQ0FBMkM7Ozs7O0lBQUUsbUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTY2hlbWFNYW5hZ2VyU2VydmljZSwgTGNwU2VydmljZSB9IGZyb20gJ0BxZHAvY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2NoZW1hU2VydmljZSB7XHJcbiAgc2NoZW1hSW5mbyA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBjb2xMaXN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIHBhZ2VJbmZvQ2hhbmdlID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIG9wZXJhdGlvbkNoYW5nZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzY2hlbWFNYW5hZ2VyOiBTY2hlbWFNYW5hZ2VyU2VydmljZSwgcHJpdmF0ZSBsY3BTZXJ2aWNlOiBMY3BTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLnNjaGVtYU1hbmFnZXIuc2NoZW1hSW5mb0NoYW5nZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICB0aGlzLnNjaGVtYUluZm8ubmV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc2NoZW1hTWFuYWdlci5jb2xMaXN0LnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgIHRoaXMuY29sTGlzdC5uZXh0KHZhbHVlKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5sY3BTZXJ2aWNlLnBhZ2VJbmZvQ2hhbmdlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgIHRoaXMucGFnZUluZm9DaGFuZ2UubmV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc2NoZW1hTWFuYWdlci5vcGVyYXRpb25DaGFuZ2Uuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgdGhpcy5vcGVyYXRpb25DaGFuZ2UubmV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFNjaGVtYUxpc3QocXVlcnlJZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZywgb3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55LCBncm91cFR5cGU/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKGdyb3VwVHlwZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zY2hlbWFNYW5hZ2VyLmdldFNjaGVtYUxpc3RCeUdyb3VwVHlwZShxdWVyeUlkLCB1c2VySWQsIG9yZ2FuaXphdGlvbklkLCBncm91cFR5cGUsIHF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hTWFuYWdlci5nZXRTY2hlbWFMaXN0KHF1ZXJ5SWQsIHVzZXJJZCwgb3JnYW5pemF0aW9uSWQsIHF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0U2NoZW1hKGlkOiBzdHJpbmcsIHF1ZXJ5SWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55LCBncm91cFR5cGU/OiBhbnksIG9yZ2FuaXphdGlvbklkPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnNjaGVtYU1hbmFnZXIuZ2V0U2NoZW1hKGlkLCBxdWVyeUlkLCBxdWVyeVJlbGF0aXZlVXJsLCBncm91cFR5cGUsIG9yZ2FuaXphdGlvbklkKTtcclxuICB9XHJcblxyXG4gIHNhdmVTY2hlbWEoc2NoZW1hOiBhbnksIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2hlbWFNYW5hZ2VyLnNhdmVTY2hlbWEoc2NoZW1hLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVNjaGVtYShpZDogc3RyaW5nLCBxdWVyeUlkOiBzdHJpbmcsIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSwgZ3JvdXBUeXBlPzogYW55LCBvcmdhbml6YXRpb25JZD86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2hlbWFNYW5hZ2VyLmRlbGV0ZVNjaGVtYShpZCwgcXVlcnlJZCwgcXVlcnlSZWxhdGl2ZVVybCwgZ3JvdXBUeXBlLCBvcmdhbml6YXRpb25JZCk7XHJcbiAgfVxyXG5cclxuICBnZXRTcHJlYWRUZW1wbGF0ZShpZDogc3RyaW5nLCBxdWVyeUlkOiBzdHJpbmcsIGR5bmFtaWNDb2xzOiBhbnksIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSwgc2hlbWU/OiBhbnksIGZyb3plbkNvbHM/OiBhbnksIGdyb3VwVHlwZT86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2hlbWFNYW5hZ2VyLmdldFNwcmVhZFRlbXBsYXRlKGlkLCBxdWVyeUlkLCBkeW5hbWljQ29scywgcXVlcnlSZWxhdGl2ZVVybCwgc2hlbWUsIGZyb3plbkNvbHMsIGdyb3VwVHlwZSk7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhKHBhcmFtOiBhbnksIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5sY3BTZXJ2aWNlLmdldERhdGEocGFyYW0sIHF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29sKHBhcmFtczogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMubGNwU2VydmljZS5nZXRDb2wocGFyYW1zLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGdldE9wZXJhdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnNjaGVtYU1hbmFnZXIuZ2V0T3BlcmF0aW9uKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==