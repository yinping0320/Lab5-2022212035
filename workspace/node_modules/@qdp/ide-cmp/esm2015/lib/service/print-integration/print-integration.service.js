/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { PrintIntegrationManagerService } from '@qdp/common';
export class PrintIntegrationService {
    /**
     * @param {?} printIntegrationManager
     */
    constructor(printIntegrationManager) {
        this.printIntegrationManager = printIntegrationManager;
        this.printIntegrationInfo = new Subject();
        this.printIntegrationManager.printIntegrationInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.printIntegrationInfo.next(value);
        }));
    }
    /**
     * @param {?} schemaId
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getPrintIntegration(schemaId, queryId, queryRelativeUrl) {
        return this.printIntegrationManager.getPrintIntegration(schemaId, queryId, queryRelativeUrl);
    }
    /**
     * @param {?} printIntegrationInfo
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    savePrintIntegration(printIntegrationInfo, queryRelativeUrl) {
        return this.printIntegrationManager.savePrintIntegration(printIntegrationInfo, queryRelativeUrl);
    }
    /**
     * @param {?} schemaId
     * @param {?} queryID
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deletPrintIntegration(schemaId, queryID, queryRelativeUrl) {
        return this.printIntegrationManager.deletePrintIntegration(schemaId, queryID, queryRelativeUrl);
    }
}
PrintIntegrationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintIntegrationService.ctorParameters = () => [
    { type: PrintIntegrationManagerService }
];
if (false) {
    /** @type {?} */
    PrintIntegrationService.prototype.printIntegrationInfo;
    /**
     * @type {?}
     * @private
     */
    PrintIntegrationService.prototype.printIntegrationManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtaW50ZWdyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BxZHAvaWRlLWNtcC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3ByaW50LWludGVncmF0aW9uL3ByaW50LWludGVncmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHN0QsTUFBTSxPQUFPLHVCQUF1Qjs7OztJQUlsQyxZQUFvQix1QkFBdUQ7UUFBdkQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFnQztRQUYzRSx5QkFBb0IsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBR3hDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQywwQkFBMEIsQ0FBQyxTQUFTOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxRQUFnQixFQUFFLE9BQWUsRUFBRSxnQkFBcUI7UUFDMUUsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9GLENBQUM7Ozs7OztJQUVELG9CQUFvQixDQUFDLG9CQUF5QixFQUFFLGdCQUFxQjtRQUNuRSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQyxvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ25HLENBQUM7Ozs7Ozs7SUFFRCxxQkFBcUIsQ0FBQyxRQUFnQixFQUFFLE9BQWUsRUFBRSxnQkFBcUI7UUFDNUUsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7OztZQXJCRixVQUFVOzs7O1lBRkYsOEJBQThCOzs7O0lBS3JDLHVEQUEwQzs7Ozs7SUFFOUIsMERBQStEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFByaW50SW50ZWdyYXRpb25NYW5hZ2VyU2VydmljZSB9IGZyb20gJ0BxZHAvY29tbW9uJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFByaW50SW50ZWdyYXRpb25TZXJ2aWNlIHtcclxuXHJcbiAgcHJpbnRJbnRlZ3JhdGlvbkluZm8gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJpbnRJbnRlZ3JhdGlvbk1hbmFnZXI6IFByaW50SW50ZWdyYXRpb25NYW5hZ2VyU2VydmljZSkge1xyXG4gICAgdGhpcy5wcmludEludGVncmF0aW9uTWFuYWdlci5wcmludEludGVncmF0aW9uSW5mb0NoYW5nZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICB0aGlzLnByaW50SW50ZWdyYXRpb25JbmZvLm5leHQodmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRQcmludEludGVncmF0aW9uKHNjaGVtYUlkOiBzdHJpbmcsIHF1ZXJ5SWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnByaW50SW50ZWdyYXRpb25NYW5hZ2VyLmdldFByaW50SW50ZWdyYXRpb24oc2NoZW1hSWQsIHF1ZXJ5SWQsIHF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gIH1cclxuXHJcbiAgc2F2ZVByaW50SW50ZWdyYXRpb24ocHJpbnRJbnRlZ3JhdGlvbkluZm86IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnByaW50SW50ZWdyYXRpb25NYW5hZ2VyLnNhdmVQcmludEludGVncmF0aW9uKHByaW50SW50ZWdyYXRpb25JbmZvLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGRlbGV0UHJpbnRJbnRlZ3JhdGlvbihzY2hlbWFJZDogc3RyaW5nLCBxdWVyeUlEOiBzdHJpbmcsIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5wcmludEludGVncmF0aW9uTWFuYWdlci5kZWxldGVQcmludEludGVncmF0aW9uKHNjaGVtYUlkLCBxdWVyeUlELCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcbn1cclxuIl19