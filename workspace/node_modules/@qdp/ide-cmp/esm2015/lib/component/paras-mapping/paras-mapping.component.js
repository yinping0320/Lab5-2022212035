/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Renderer2, ViewEncapsulation, Output, EventEmitter, TemplateRef, Optional, Injector } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { findIndex } from 'lodash-es';
import { DialogComponent } from '@farris/ui-dialog';
import { DatagridComponent } from '@farris/ui-datagrid';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { MessagerService } from '@farris/ui-messager';
import { ParasMappingService } from '../../service/paras-mapping/paras-mapping.service';
import { of } from 'rxjs';
import { EventBus } from '@qdp/common';
import { LocalizeService } from '@qdp/localize';
/** @type {?} */
const createFormGroup = (/**
 * @param {?} dataItem
 * @return {?}
 */
dataItem => new FormGroup({
    'id': new FormControl(dataItem.id),
    'parameter': new FormControl(dataItem.parameter, Validators.required),
    'sourceParameter': new FormControl(dataItem.sourceParameter),
    'mappingType': new FormControl(dataItem.mappingType),
    'constant': new FormControl(dataItem.constant),
    'expression': new FormControl(dataItem.expression),
    'paraisused': new FormControl(dataItem.paraisused)
}));
const ɵ0 = createFormGroup;
/** @type {?} */
const matches = (/**
 * @param {?} el
 * @param {?} selector
 * @return {?}
 */
(el, selector) => (el.matches || el.msMatchesSelector).call(el, selector));
const ɵ1 = matches;
export class ParasMappingComponent {
    /**
     * @param {?} renderer
     * @param {?} parasMappingService
     * @param {?} msgService
     * @param {?} injector
     */
    constructor(renderer, parasMappingService, msgService, injector) {
        this.renderer = renderer;
        this.parasMappingService = parasMappingService;
        this.msgService = msgService;
        this.injector = injector;
        this.closeModal = new EventEmitter();
        // 模态框确定后关闭，并传递参数
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '参数设置',
            width: 900,
            height: 500,
            showButtons: true
        };
        this.colName = '';
        this.size = {};
        this.mappingTypeData = [
            { name: '字段', value: 0 },
            { name: '常量', value: 1 },
            { name: '表达式', value: 2 }
        ];
        this.QueryInfoDatas = [];
        this.saveDatas = {};
        this.currentmode = true;
        this.columns = [];
        this.total = 0;
        this.editMode = 'row';
        this.pageSize = 200;
        this.pageIndex = 1;
        this.handlebeforeClose = (/**
         * @return {?}
         */
        () => {
            if (this.dg1) {
                this.dg1.endRowEdit();
            }
            this.updateParasMapping();
            return of(true);
        });
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.mappingTypeData = this.localizeService.getValue('ideCmp.paramsMapping.mappingTypeData');
            this.modalConfig.title = this.localizeService.getValue('ideCmp.paramsMapping.paramOption');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.editorParams && this.editorParams.queryId) {
            this.currentmode = true;
            this.queryId = this.editorParams.queryId;
            this.queryparaData = this.editorParams.queryparaData;
            this.sourceparaData = this.editorParams.sourceparaData;
            this.qoManagerCode = this.editorParams.datasourceid;
            this.queryRelativeUrl = this.editorParams.queryRelativeUrl;
            /*
            this.parasMappingService.getParasMapping(this.qoManagerCode , this.queryId, this.queryRelativeUrl).subscribe(
              data => { if (data != null) { this.QueryInfoDatas =  JSON.parse(data.parasmapping.value); } });
              */
            this.parasMappingService.getParasMapping(this.qoManagerCode, this.queryId, this.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data != null) {
                    this.QueryInfoDatas = JSON.parse(data.parasmapping.value);
                }
                else if (this.editorParams.QueryInfoDatas) {
                    this.QueryInfoDatas = this.editorParams.QueryInfoDatas;
                }
            }));
        }
        else {
            this.currentmode = false;
            this.parasMappingService.getParasMapping(this.qoManagerCode, this.queryId, this.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data != null) {
                    this.queryparaData = JSON.parse(data.parasmapping.queryparaData);
                    this.sourceparaData = JSON.parse(data.parasmapping.sourceparaData);
                    this.QueryInfoDatas = JSON.parse(data.parasmapping.value);
                }
            }));
        }
        this.gridInit();
    }
    /**
     * @private
     * @return {?}
     */
    gridInit() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const enumOpts = { valueField: 'value', textField: 'name', data: this.queryparaData };
        /** @type {?} */
        const enumOpts1 = { valueField: 'value', textField: 'name', data: this.mappingTypeData };
        /** @type {?} */
        const enumOpts2 = { valueField: 'value', textField: 'name', data: this.sourceparaData };
        this.columns = [
            {
                field: 'parameter', width: 100, title: self.localizeService.getValue('ideCmp.paramsMapping.columnHeader')[0], formatter: { type: 'enum', options: enumOpts },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: Object.assign({}, enumOpts, { idField: 'value' }),
                    validators: [
                        { type: 'required', messager: '该字段不能为空！' }
                    ]
                }
            },
            {
                field: 'mappingType', width: 100, title: self.localizeService.getValue('ideCmp.paramsMapping.columnHeader')[1], formatter: { type: 'enum', options: enumOpts1 },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: Object.assign({}, enumOpts1, { idField: 'value' })
                }
            },
            {
                field: 'sourceParameter', width: 100, title: self.localizeService.getValue('ideCmp.paramsMapping.columnHeader')[2], formatter: { type: 'enum', options: enumOpts2 },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: Object.assign({}, enumOpts2, { idField: 'value' })
                }
            },
            {
                field: 'constant', width: 100, title: self.localizeService.getValue('ideCmp.paramsMapping.columnHeader')[3],
                editor: {
                    type: EditorTypes.TEXTBOX
                }
            },
            {
                field: 'expression', width: 100, title: self.localizeService.getValue('ideCmp.paramsMapping.columnHeader')[4],
                editor: {
                    type: EditorTypes.TEXTBOX
                }
            },
            {
                field: 'paraisused', width: 100, title: self.localizeService.getValue('ideCmp.paramsMapping.columnHeader')[5],
                editor: {
                    type: EditorTypes.CHECKBOX
                }
            }
        ];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        this.size.height = event.newHeight;
        this.size.width = event.newWidth;
    }
    /**
     * @return {?}
     */
    clickCancel() {
        if (this.dg2) {
            this.dg2.endRowEdit();
        }
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    clickConfirm() {
        /** @type {?} */
        const self = this;
        this.updateParasMapping();
        self.submitModal.emit({ value: self.QueryInfoDatas });
    }
    /**
     * @return {?}
     */
    updateParasMapping() {
        /** @type {?} */
        const self = this;
        if (self.QueryInfoDatas && self.QueryInfoDatas.length) {
            // tslint:disable-next-line:max-line-length
            self.saveDatas = { Id: EventBus.guid(), parasmapping: JSON.stringify({ value: JSON.stringify(self.QueryInfoDatas), queryparaData: JSON.stringify(self.queryparaData), sourceparaData: JSON.stringify(self.sourceparaData) }), queryid: self.queryId, datasourceid: self.qoManagerCode };
            self.parasMappingService.saveParasMapping(self.saveDatas, self.queryRelativeUrl)
                .subscribe();
        }
        else {
            self.parasMappingService.deleteParasMapping(self.qoManagerCode, self.queryId, self.queryRelativeUrl).subscribe();
            self.QueryInfoDatas = [];
        }
    }
    /**
     * @return {?}
     */
    handleDialogShow() {
        this.farrisDialog.show();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    addFilterRow($event) {
        this.QueryInfoDatas.push({
            'id': EventBus.guid(),
            'parameter': '',
            'sourceParameter': '',
            'mappingType': 0,
            'constant': '',
            'expression': '',
            'paraisused': true
        });
        if (this.dg1) {
            this.dg1.refresh();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    addFilterRowForIde($event) {
        this.QueryInfoDatas.push({
            'id': EventBus.guid(),
            'parameter': '',
            'sourceParameter': '',
            'mappingType': 0,
            'constant': '',
            'expression': '',
            'paraisused': true
        });
        if (this.dg2) {
            this.dg2.refresh();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    deleteFilterRow($event) {
        /** @type {?} */
        const self = this;
        if (this.dg1.selectedRow) {
            /** @type {?} */
            const index = findIndex(this.QueryInfoDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === self.dg1.selectedRow.id; }));
            this.QueryInfoDatas.splice(index, 1);
            this.dg1.refresh();
        }
        else {
            this.msgService.info(self.localizeService.getValue('ideCmp.paramsMapping.message.validate.select'));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    deleteFilterRowForIde($event) {
        /** @type {?} */
        const self = this;
        if (this.dg2.selectedRow) {
            /** @type {?} */
            const index = findIndex(this.QueryInfoDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === self.dg2.selectedRow.id; }));
            this.QueryInfoDatas.splice(index, 1);
            this.dg2.refresh();
        }
        else {
            this.msgService.info(self.localizeService.getValue('ideCmp.paramsMapping.message.validate.select'));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    cancelEdit($event) {
        if (this.dg1) {
            this.dg1.endRowEdit();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    cancelEditForIde($event) {
        if (this.dg2) {
            this.dg2.endRowEdit();
        }
    }
}
ParasMappingComponent.decorators = [
    { type: Component, args: [{
                selector: 'paras-mapping',
                template: "<div class=\"btn-group mr-3\" fDropdown *ngIf=\"!currentmode\">\r\n  <button class=\"btn f-rt-btn f-btn-ml btn-secondary dropdown-toggle\" type=\"button\" id=\"menuButton\" (click)=\"handleDialogShow()\" >\r\n    <span class=\"f-icon f-icon-grid-layout\" role=\"presentation\"></span>\r\n    <span *ngIf=\"!isMultiForm\">&nbsp;{{localizeService.getValue('ideCmp.paramsMapping.paramOption')}}</span>\r\n  </button>\r\n</div>\r\n\r\n<farris-dialog #farrisDialog [title]=\"localizeService.getValue('ideCmp.paramsMapping.paramOption')\" [showButtons]=\"false\" [width]=\"700\" [height]=\"500\" *ngIf=\"!currentmode\" [beforeClose]=\"handlebeforeClose\">\r\n  <div class=\"d-flex flex-column flex-fill position-relative h-100 m-0\">\r\n    <div class=\"flex-fill farris-split-section m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n      <div class=\"farris-form farris-card-content-bg\">\r\n          <fieldSet farrisFold [style.height.px]=\"size.height\">\r\n            <button id=\"addFilterRow\" class=\"btn btn-primary mr-1 mb-1\" (click)=\"addFilterRow($event)\">{{localizeService.getValue('ideCmp.paramsMapping.btnAdd')}}</button>\r\n            <button id=\"addFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"deleteFilterRow($event)\">{{localizeService.getValue('ideCmp.paramsMapping.btnDelete')}}</button>\r\n            <button id=\"addFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"cancelEdit($event)\">{{localizeService.getValue('ideCmp.paramsMapping.btnCancel')}}</button>\r\n            <farris-datagrid [data]=\"QueryInfoDatas\" [columns]=\"columns\" #dg1=\"datagrid\" [fit]=\"true\"\r\n              [editable]=\"true\" [editMode]=\"editMode\" [showCheckbox]=\"false\" [fitColumns]=\"true\"\r\n              [showLineNumber] =\"true\" [striped]=\"true\"  [total]=\"total\" [pageSize]=\"100\"\r\n              [virtualized]=\"true\" [pagination]=\"false\">\r\n            </farris-datagrid>\r\n          </fieldSet>\r\n        </div>\r\n      </div>\r\n  </div>\r\n</farris-dialog>\r\n<div class=\"d-flex flex-column flex-fill position-relative h-100 m-0\" *ngIf=\"currentmode\">\r\n  <div class=\"flex-fill farris-split-section m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n    <div class=\"farris-form farris-card-content-bg\">\r\n        <fieldSet farrisFold [style.height.px]=\"size.height\">\r\n          <button id=\"addFilterRow\" class=\"btn btn-primary mr-1 mb-1\" (click)=\"addFilterRowForIde($event)\">{{localizeService.getValue('ideCmp.paramsMapping.btnAdd')}}</button>\r\n            <button id=\"addFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"deleteFilterRowForIde($event)\">{{localizeService.getValue('ideCmp.paramsMapping.btnDelete')}}</button>\r\n            <button id=\"addFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"cancelEditForIde($event)\">{{localizeService.getValue('ideCmp.paramsMapping.btnCancel')}}</button>\r\n            <farris-datagrid [data]=\"QueryInfoDatas\" [columns]=\"columns\" #dg2=\"datagrid\" [fit]=\"true\"\r\n              [editable]=\"true\" [editMode]=\"editMode\" [showCheckbox]=\"false\" [fitColumns]=\"true\"\r\n              [showLineNumber] =\"true\" [striped]=\"true\"  [total]=\"total\" [pageSize]=\"100\"\r\n              [virtualized]=\"true\" [pagination]=\"false\">\r\n            </farris-datagrid>\r\n        </fieldSet>\r\n      </div>\r\n    </div>\r\n</div>\r\n<ng-template #enumFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clickCancel()\">{{localizeService.getValue('ideCmp.paramsMapping.btnCancel')}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"clickConfirm()\">{{localizeService.getValue('ideCmp.paramsMapping.btnOK')}}</button>\r\n</ng-template>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["tr .center{text-align:center}"]
            }] }
];
/** @nocollapse */
ParasMappingComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ParasMappingService },
    { type: MessagerService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
ParasMappingComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    queryId: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    isMultiForm: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['enumFooter',] }],
    farrisDialog: [{ type: ViewChild, args: ['farrisDialog',] }],
    dg1: [{ type: ViewChild, args: ['dg1',] }],
    dg2: [{ type: ViewChild, args: ['dg2',] }]
};
if (false) {
    /** @type {?} */
    ParasMappingComponent.prototype.closeModal;
    /** @type {?} */
    ParasMappingComponent.prototype.submitModal;
    /** @type {?} */
    ParasMappingComponent.prototype.editorParams;
    /** @type {?} */
    ParasMappingComponent.prototype.queryId;
    /** @type {?} */
    ParasMappingComponent.prototype.qoManagerCode;
    /** @type {?} */
    ParasMappingComponent.prototype.queryRelativeUrl;
    /** @type {?} */
    ParasMappingComponent.prototype.isMultiForm;
    /** @type {?} */
    ParasMappingComponent.prototype.queryparaData;
    /** @type {?} */
    ParasMappingComponent.prototype.sourceparaData;
    /** @type {?} */
    ParasMappingComponent.prototype.modalFooter;
    /** @type {?} */
    ParasMappingComponent.prototype.modalConfig;
    /** @type {?} */
    ParasMappingComponent.prototype.farrisDialog;
    /** @type {?} */
    ParasMappingComponent.prototype.currTreeNodeId;
    /** @type {?} */
    ParasMappingComponent.prototype.currQueryInfoData;
    /** @type {?} */
    ParasMappingComponent.prototype.colSelectValue;
    /** @type {?} */
    ParasMappingComponent.prototype.colName;
    /** @type {?} */
    ParasMappingComponent.prototype.size;
    /** @type {?} */
    ParasMappingComponent.prototype.datasourceid;
    /** @type {?} */
    ParasMappingComponent.prototype.gridData;
    /** @type {?} */
    ParasMappingComponent.prototype.formGroup;
    /**
     * @type {?}
     * @private
     */
    ParasMappingComponent.prototype.editedRowIndex;
    /** @type {?} */
    ParasMappingComponent.prototype.isNew;
    /** @type {?} */
    ParasMappingComponent.prototype.mappingTypeData;
    /** @type {?} */
    ParasMappingComponent.prototype.QueryInfoDatas;
    /** @type {?} */
    ParasMappingComponent.prototype.saveDatas;
    /** @type {?} */
    ParasMappingComponent.prototype.currentmode;
    /** @type {?} */
    ParasMappingComponent.prototype.localizeService;
    /** @type {?} */
    ParasMappingComponent.prototype.columns;
    /** @type {?} */
    ParasMappingComponent.prototype.total;
    /** @type {?} */
    ParasMappingComponent.prototype.editMode;
    /** @type {?} */
    ParasMappingComponent.prototype.pageSize;
    /** @type {?} */
    ParasMappingComponent.prototype.pageIndex;
    /** @type {?} */
    ParasMappingComponent.prototype.dg1;
    /** @type {?} */
    ParasMappingComponent.prototype.dg2;
    /** @type {?} */
    ParasMappingComponent.prototype.handlebeforeClose;
    /**
     * @type {?}
     * @private
     */
    ParasMappingComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ParasMappingComponent.prototype.parasMappingService;
    /**
     * @type {?}
     * @private
     */
    ParasMappingComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ParasMappingComponent.prototype.injector;
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,