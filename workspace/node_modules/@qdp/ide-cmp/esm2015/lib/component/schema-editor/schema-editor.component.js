/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, EventEmitter, ViewChild, Injector } from '@angular/core';
import { FarrisTabsComponent } from '@farris/ui-tabs';
import { LocalizeService } from '@qdp/localize';
import { TitleEditorComponent } from './title-editor/title-editor.component';
import { ColumnEditorComponent } from './column-editor/column-editor.component';
import { StyleEditorComponent } from './style-editor/style-editor.component';
import { OtherEditorComponent } from './other-editor/other-editor.component';
export class SchemaEditorComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.tabsSelectChange = new EventEmitter();
        this.localizeService = this.injector.get(LocalizeService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    handleTabSelect(data) {
        /** @type {?} */
        const option = this.getOption();
        if (data.nextId === 'column') {
            this.columnOption.handleInfoChanged(0);
        }
        this.tabsSelectChange.emit(option);
    }
    /**
     * @return {?}
     */
    getOption() {
        /** @type {?} */
        const option = {};
        if (this.titleOption) {
            option['titleOption'] = this.titleOption.getTitleOption();
        }
        if (this.columnOption) {
            option['columnOption'] = this.columnOption.getColumnOption();
        }
        if (this.styleOption) {
            option['styleOption'] = this.styleOption.getStyleOption();
        }
        if (this.otherOption) {
            option['otherOption'] = this.otherOption.getOtherOption();
        }
        return option;
    }
}
SchemaEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'schema-editor',
                template: "<farris-tabs [value]=\"'title'\"  [contentFill]=\"true\" [autoTitleWidth]=\"true\"  (tabChange)=\"handleTabSelect($event)\">\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.schemaManager.titleOption.tab')\" [id]=\"'title'\">\r\n    <ng-template #content>\r\n      <title-editor [currSchema]=\"currSchema\" class=\"schema-editor-tab d-flex flex-column flex-fill\"></title-editor>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.schemaManager.columnOption.tab')\" [id]=\"'column'\">\r\n    <ng-template #content>\r\n      <column-editor [currSchema]=\"currSchema\" [colList]=\"colList\" [controlType]=\"controlType\"  class=\"schema-editor-tab d-flex flex-column flex-fill\"></column-editor>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.schemaManager.styleOption.tab')\" [id]=\"'style'\">\r\n    <ng-template #content>\r\n      <style-editor [currSchema]=\"currSchema\" class=\"schema-editor-tab d-flex flex-column flex-fill\"></style-editor>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.schemaManager.otherOption.tab')\" [id]=\"'other'\">\r\n    <ng-template #content>\r\n      <other-editor [currSchema]=\"currSchema\"  [controlType]=\"controlType\"  class=\"schema-editor-tab d-flex flex-column flex-fill\"></other-editor>\r\n    </ng-template>\r\n  </farris-tab>\r\n</farris-tabs>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".schema-editor-tab{position:absolute;top:0;bottom:0;left:0;right:0;overflow:hidden}"]
            }] }
];
/** @nocollapse */
SchemaEditorComponent.ctorParameters = () => [
    { type: Injector }
];
SchemaEditorComponent.propDecorators = {
    currSchema: [{ type: Input }],
    colList: [{ type: Input }],
    controlType: [{ type: Input }],
    tabsSelectChange: [{ type: Output }],
    titleOption: [{ type: ViewChild, args: [TitleEditorComponent,] }],
    columnOption: [{ type: ViewChild, args: [ColumnEditorComponent,] }],
    styleOption: [{ type: ViewChild, args: [StyleEditorComponent,] }],
    otherOption: [{ type: ViewChild, args: [OtherEditorComponent,] }],
    tabs: [{ type: ViewChild, args: [FarrisTabsComponent,] }]
};
if (false) {
    /** @type {?} */
    SchemaEditorComponent.prototype.currSchema;
    /** @type {?} */
    SchemaEditorComponent.prototype.colList;
    /** @type {?} */
    SchemaEditorComponent.prototype.controlType;
    /** @type {?} */
    SchemaEditorComponent.prototype.editorParams;
    /** @type {?} */
    SchemaEditorComponent.prototype.tabsSelectChange;
    /** @type {?} */
    SchemaEditorComponent.prototype.titleOption;
    /** @type {?} */
    SchemaEditorComponent.prototype.columnOption;
    /** @type {?} */
    SchemaEditorComponent.prototype.styleOption;
    /** @type {?} */
    SchemaEditorComponent.prototype.otherOption;
    /** @type {?} */
    SchemaEditorComponent.prototype.tabs;
    /** @type {?} */
    SchemaEditorComponent.prototype.localizeService;
    /**
     * @type {?}
     * @private
     */
    SchemaEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L3NjaGVtYS1lZGl0b3Ivc2NoZW1hLWVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW9DLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakosT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQVE3RSxNQUFNLE9BQU8scUJBQXFCOzs7O0lBYWhDLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFSNUIscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQVNuRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVELENBQUM7Ozs7SUFFRCxRQUFRO0lBQ1IsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsSUFBUzs7Y0FDakIsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDL0IsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7O0lBRUQsU0FBUzs7Y0FDRCxNQUFNLEdBQUcsRUFBRTtRQUNqQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDM0Q7UUFDRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDOUQ7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDM0Q7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDM0Q7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixtOENBQTZDO2dCQUU3QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDdEM7Ozs7WUFiZ0gsUUFBUTs7O3lCQWV0SCxLQUFLO3NCQUNMLEtBQUs7MEJBQ0wsS0FBSzsrQkFFTCxNQUFNOzBCQUNOLFNBQVMsU0FBQyxvQkFBb0I7MkJBQzlCLFNBQVMsU0FBQyxxQkFBcUI7MEJBQy9CLFNBQVMsU0FBQyxvQkFBb0I7MEJBQzlCLFNBQVMsU0FBQyxvQkFBb0I7bUJBQzlCLFNBQVMsU0FBQyxtQkFBbUI7Ozs7SUFUOUIsMkNBQXlCOztJQUN6Qix3Q0FBd0I7O0lBQ3hCLDRDQUE2Qjs7SUFDN0IsNkNBQWtCOztJQUNsQixpREFBcUQ7O0lBQ3JELDRDQUFtRTs7SUFDbkUsNkNBQXNFOztJQUN0RSw0Q0FBbUU7O0lBQ25FLDRDQUFtRTs7SUFDbkUscUNBQTBEOztJQUMxRCxnREFBaUM7Ozs7O0lBRXJCLHlDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmFycmlzVGFic0NvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktdGFicyc7XHJcbmltcG9ydCB7IExvY2FsaXplU2VydmljZSB9IGZyb20gJ0BxZHAvbG9jYWxpemUnO1xyXG5pbXBvcnQgeyBUaXRsZUVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vdGl0bGUtZWRpdG9yL3RpdGxlLWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb2x1bW5FZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbi1lZGl0b3IvY29sdW1uLWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTdHlsZUVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vc3R5bGUtZWRpdG9yL3N0eWxlLWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPdGhlckVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vb3RoZXItZWRpdG9yL290aGVyLWVkaXRvci5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdzY2hlbWEtZWRpdG9yJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vc2NoZW1hLWVkaXRvci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vc2NoZW1hLWVkaXRvci5jb21wb25lbnQuY3NzJ10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2NoZW1hRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGN1cnJTY2hlbWE6IGFueTtcclxuICBASW5wdXQoKSBjb2xMaXN0OiBhbnlbXTtcclxuICBASW5wdXQoKSBjb250cm9sVHlwZTogc3RyaW5nO1xyXG4gIGVkaXRvclBhcmFtczogYW55O1xyXG4gIEBPdXRwdXQoKSB0YWJzU2VsZWN0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQFZpZXdDaGlsZChUaXRsZUVkaXRvckNvbXBvbmVudCkgdGl0bGVPcHRpb246IFRpdGxlRWRpdG9yQ29tcG9uZW50O1xyXG4gIEBWaWV3Q2hpbGQoQ29sdW1uRWRpdG9yQ29tcG9uZW50KSBjb2x1bW5PcHRpb246IENvbHVtbkVkaXRvckNvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKFN0eWxlRWRpdG9yQ29tcG9uZW50KSBzdHlsZU9wdGlvbjogU3R5bGVFZGl0b3JDb21wb25lbnQ7XHJcbiAgQFZpZXdDaGlsZChPdGhlckVkaXRvckNvbXBvbmVudCkgb3RoZXJPcHRpb246IE90aGVyRWRpdG9yQ29tcG9uZW50O1xyXG4gIEBWaWV3Q2hpbGQoRmFycmlzVGFic0NvbXBvbmVudCkgdGFiczogRmFycmlzVGFic0NvbXBvbmVudDtcclxuICBsb2NhbGl6ZVNlcnZpY2U6IExvY2FsaXplU2VydmljZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMubG9jYWxpemVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxpemVTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlVGFiU2VsZWN0KGRhdGE6IGFueSkge1xyXG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5nZXRPcHRpb24oKTtcclxuICAgIGlmIChkYXRhLm5leHRJZCA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgdGhpcy5jb2x1bW5PcHRpb24uaGFuZGxlSW5mb0NoYW5nZWQoMCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRhYnNTZWxlY3RDaGFuZ2UuZW1pdChvcHRpb24pO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3B0aW9uKCkge1xyXG4gICAgY29uc3Qgb3B0aW9uID0ge307XHJcbiAgICBpZiAodGhpcy50aXRsZU9wdGlvbikge1xyXG4gICAgICBvcHRpb25bJ3RpdGxlT3B0aW9uJ10gPSB0aGlzLnRpdGxlT3B0aW9uLmdldFRpdGxlT3B0aW9uKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5jb2x1bW5PcHRpb24pIHtcclxuICAgICAgb3B0aW9uWydjb2x1bW5PcHRpb24nXSA9IHRoaXMuY29sdW1uT3B0aW9uLmdldENvbHVtbk9wdGlvbigpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc3R5bGVPcHRpb24pIHtcclxuICAgICAgb3B0aW9uWydzdHlsZU9wdGlvbiddID0gdGhpcy5zdHlsZU9wdGlvbi5nZXRTdHlsZU9wdGlvbigpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMub3RoZXJPcHRpb24pIHtcclxuICAgICAgb3B0aW9uWydvdGhlck9wdGlvbiddID0gdGhpcy5vdGhlck9wdGlvbi5nZXRPdGhlck9wdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvcHRpb247XHJcbiAgfVxyXG59XHJcbiJdfQ==