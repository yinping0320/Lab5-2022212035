/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, HostBinding, ViewEncapsulation, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { ChartsTypeComponent } from './charts-type/charts-type.component';
import { ChartsDataComponent } from './charts-data/charts-data.component';
import { ChartsStyleComponent } from './charts-style/charts-style.component';
import { FarrisTabsComponent } from '@farris/ui-tabs';
import { LocalizeService } from '@qdp/localize';
export class ChartsSchemaEditorComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.cls = "f-utils-flex-column h-100";
        this.tabsSelectChange = new EventEmitter();
        this.localizeService = this.injector.get(LocalizeService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    handleTabSelect(data) {
        /** @type {?} */
        const option = this.getOption();
        this.tabsSelectChange.emit(option);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    chartTypeChange(value) {
        this.chartsType = value;
    }
    /**
     * @return {?}
     */
    getOption() {
        /** @type {?} */
        const option = {};
        if (this.chartsTypeCmp) {
            option['chartsType'] = this.chartsTypeCmp.getChartsTypeOption();
            // console.log("chartsType:");
            // console.log(option['chartsType']);
        }
        if (this.chartsDataCmp) {
            option['chartsData'] = this.chartsDataCmp.getChartsDataOption();
            option['groupSummarySet'] = this.chartsDataCmp.getGroupSummarySetOption();
            // console.log("chartsData:");
            // console.log(option['chartsData']);
        }
        if (this.chartsStyleCmp) {
            option['chartsStyle'] = this.chartsStyleCmp.getChartsStyleOption();
            option['customOption'] = this.chartsStyleCmp.getCustomOption();
            // console.log("chartsStyle:");
            // console.log(option['chartsStyle']);
        }
        return option;
    }
}
ChartsSchemaEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'charts-schema-editor',
                template: "<!--<kendo-tabstrip #tabStrip id=\"chartsSchemaEditor\" class=\"schema-editor-tab h-100 pt-1\" (tabSelect)=\"handleTabSelect($event)\">-->\r\n<farris-tabs  [value]=\"'type'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\"  (tabChange)=\"handleTabSelect($event)\">\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.chartsSchemaManager.chartsType.tab')\" [id] = \"'type'\">\r\n    <ng-template #content>\r\n      <charts-type [currSchema]=\"currSchema\" class=\"schema-editor-tab\" (chartTypeChange)=\"chartTypeChange($event)\" ></charts-type>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.chartsSchemaManager.chartsData.tab')\" [id] = \"'data'\">\r\n    <ng-template #content>\r\n      <charts-data [currSchema]=\"currSchema\" class=\"schema-editor-tab\" [colList]=\"colList\" [chartsType]=\"chartsType\" ></charts-data>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.chartsSchemaManager.chartsStyle.tab')\" [id] = \"'style'\">\r\n    <ng-template #content>\r\n      <charts-style [currSchema]=\"currSchema\" class=\"schema-editor-tab\" [chartsType]=\"chartsType\" ></charts-style>\r\n    </ng-template>\r\n  </farris-tab>\r\n</farris-tabs>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".schema-editor-tab{position:absolute;top:0;bottom:0;left:0;right:0;overflow:hidden}"]
            }] }
];
/** @nocollapse */
ChartsSchemaEditorComponent.ctorParameters = () => [
    { type: Injector }
];
ChartsSchemaEditorComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    currSchema: [{ type: Input }],
    colList: [{ type: Input }],
    controlType: [{ type: Input }],
    tabsSelectChange: [{ type: Output }],
    chartsTypeCmp: [{ type: ViewChild, args: [ChartsTypeComponent,] }],
    chartsDataCmp: [{ type: ViewChild, args: [ChartsDataComponent,] }],
    chartsStyleCmp: [{ type: ViewChild, args: [ChartsStyleComponent,] }],
    tabs: [{ type: ViewChild, args: [FarrisTabsComponent,] }]
};
if (false) {
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.cls;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.currSchema;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.colList;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.controlType;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.tabsSelectChange;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsTypeCmp;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsDataCmp;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsStyleCmp;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.tabs;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsType;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.localizeService;
    /**
     * @type {?}
     * @private
     */
    ChartsSchemaEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRzLXNjaGVtYS1lZGl0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9pZGUtY21wLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9jaGFydHMtc2NoZW1hLWVkaXRvci9jaGFydHMtc2NoZW1hLWVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEksT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVFoRCxNQUFNLE9BQU8sMkJBQTJCOzs7O0lBYXRDLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFaaEIsUUFBRyxHQUFHLDJCQUEyQixDQUFDO1FBSTlDLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFTbkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1RCxDQUFDOzs7O0lBQ0QsUUFBUTtJQUNSLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLElBQVM7O2NBQ2pCLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsS0FBVTtRQUN4QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsU0FBUzs7Y0FDRCxNQUFNLEdBQUcsRUFBRTtRQUNqQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNoRSw4QkFBOEI7WUFDOUIscUNBQXFDO1NBQ3RDO1FBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDaEUsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQzFFLDhCQUE4QjtZQUM5QixxQ0FBcUM7U0FDdEM7UUFDRCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUNuRSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMvRCwrQkFBK0I7WUFDL0Isc0NBQXNDO1NBQ3ZDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyw0dkNBQW9EO2dCQUVwRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDdEM7Ozs7WUFaMkIsUUFBUTs7O2tCQWNqQyxXQUFXLFNBQUMsT0FBTzt5QkFDbkIsS0FBSztzQkFDTCxLQUFLOzBCQUNMLEtBQUs7K0JBQ0wsTUFBTTs0QkFDTixTQUFTLFNBQUMsbUJBQW1COzRCQUM3QixTQUFTLFNBQUMsbUJBQW1COzZCQUM3QixTQUFTLFNBQUMsb0JBQW9CO21CQUM5QixTQUFTLFNBQUMsbUJBQW1COzs7O0lBUjlCLDBDQUF3RDs7SUFDeEQsaURBQXlCOztJQUN6Qiw4Q0FBc0I7O0lBQ3RCLGtEQUEwQjs7SUFDMUIsdURBQXFEOztJQUNyRCxvREFBbUU7O0lBQ25FLG9EQUFtRTs7SUFDbkUscURBQXNFOztJQUN0RSwyQ0FBMEQ7O0lBQzFELGlEQUFnQjs7SUFDaEIsc0RBQWlDOzs7OztJQUVyQiwrQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0b3IsIEhvc3RCaW5kaW5nLCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2hhcnRzVHlwZUNvbXBvbmVudCB9IGZyb20gJy4vY2hhcnRzLXR5cGUvY2hhcnRzLXR5cGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hhcnRzRGF0YUNvbXBvbmVudCB9IGZyb20gJy4vY2hhcnRzLWRhdGEvY2hhcnRzLWRhdGEuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hhcnRzU3R5bGVDb21wb25lbnQgfSBmcm9tICcuL2NoYXJ0cy1zdHlsZS9jaGFydHMtc3R5bGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmFycmlzVGFic0NvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktdGFicyc7XHJcbmltcG9ydCB7IExvY2FsaXplU2VydmljZSB9IGZyb20gJ0BxZHAvbG9jYWxpemUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjaGFydHMtc2NoZW1hLWVkaXRvcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NoYXJ0cy1zY2hlbWEtZWRpdG9yLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jaGFydHMtc2NoZW1hLWVkaXRvci5jb21wb25lbnQuY3NzJ10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hhcnRzU2NoZW1hRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xzID0gXCJmLXV0aWxzLWZsZXgtY29sdW1uIGgtMTAwXCI7XHJcbiAgQElucHV0KCkgY3VyclNjaGVtYTogYW55O1xyXG4gIEBJbnB1dCgpIGNvbExpc3Q6IGFueTtcclxuICBASW5wdXQoKSBjb250cm9sVHlwZTogYW55O1xyXG4gIEBPdXRwdXQoKSB0YWJzU2VsZWN0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQFZpZXdDaGlsZChDaGFydHNUeXBlQ29tcG9uZW50KSBjaGFydHNUeXBlQ21wOiBDaGFydHNUeXBlQ29tcG9uZW50O1xyXG4gIEBWaWV3Q2hpbGQoQ2hhcnRzRGF0YUNvbXBvbmVudCkgY2hhcnRzRGF0YUNtcDogQ2hhcnRzRGF0YUNvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKENoYXJ0c1N0eWxlQ29tcG9uZW50KSBjaGFydHNTdHlsZUNtcDogQ2hhcnRzU3R5bGVDb21wb25lbnQ7XHJcbiAgQFZpZXdDaGlsZChGYXJyaXNUYWJzQ29tcG9uZW50KSB0YWJzOiBGYXJyaXNUYWJzQ29tcG9uZW50O1xyXG4gIGNoYXJ0c1R5cGU6IGFueTtcclxuICBsb2NhbGl6ZVNlcnZpY2U6IExvY2FsaXplU2VydmljZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMubG9jYWxpemVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxpemVTZXJ2aWNlKTtcclxuICB9XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVUYWJTZWxlY3QoZGF0YTogYW55KSB7XHJcbiAgICBjb25zdCBvcHRpb24gPSB0aGlzLmdldE9wdGlvbigpO1xyXG4gICAgdGhpcy50YWJzU2VsZWN0Q2hhbmdlLmVtaXQob3B0aW9uKTtcclxuICB9XHJcblxyXG4gIGNoYXJ0VHlwZUNoYW5nZSh2YWx1ZTogYW55KSB7XHJcbiAgICB0aGlzLmNoYXJ0c1R5cGUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGdldE9wdGlvbigpIHtcclxuICAgIGNvbnN0IG9wdGlvbiA9IHt9O1xyXG4gICAgaWYgKHRoaXMuY2hhcnRzVHlwZUNtcCkge1xyXG4gICAgICBvcHRpb25bJ2NoYXJ0c1R5cGUnXSA9IHRoaXMuY2hhcnRzVHlwZUNtcC5nZXRDaGFydHNUeXBlT3B0aW9uKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hhcnRzVHlwZTpcIik7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKG9wdGlvblsnY2hhcnRzVHlwZSddKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmNoYXJ0c0RhdGFDbXApIHtcclxuICAgICAgb3B0aW9uWydjaGFydHNEYXRhJ10gPSB0aGlzLmNoYXJ0c0RhdGFDbXAuZ2V0Q2hhcnRzRGF0YU9wdGlvbigpO1xyXG4gICAgICBvcHRpb25bJ2dyb3VwU3VtbWFyeVNldCddID0gdGhpcy5jaGFydHNEYXRhQ21wLmdldEdyb3VwU3VtbWFyeVNldE9wdGlvbigpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcImNoYXJ0c0RhdGE6XCIpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhvcHRpb25bJ2NoYXJ0c0RhdGEnXSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5jaGFydHNTdHlsZUNtcCkge1xyXG4gICAgICBvcHRpb25bJ2NoYXJ0c1N0eWxlJ10gPSB0aGlzLmNoYXJ0c1N0eWxlQ21wLmdldENoYXJ0c1N0eWxlT3B0aW9uKCk7XHJcbiAgICAgIG9wdGlvblsnY3VzdG9tT3B0aW9uJ10gPSB0aGlzLmNoYXJ0c1N0eWxlQ21wLmdldEN1c3RvbU9wdGlvbigpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcImNoYXJ0c1N0eWxlOlwiKTtcclxuICAgICAgLy8gY29uc29sZS5sb2cob3B0aW9uWydjaGFydHNTdHlsZSddKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvcHRpb247XHJcbiAgfVxyXG59XHJcbiJdfQ==