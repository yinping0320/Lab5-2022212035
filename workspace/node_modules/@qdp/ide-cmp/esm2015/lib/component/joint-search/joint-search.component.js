/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:max-line-length
import { Component, Input, Optional, ViewChild, Renderer2, ViewEncapsulation, ComponentFactoryResolver, Injector, Output, EventEmitter, TemplateRef } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { RtfAppHelpComponent } from '@gsp-sys/rtf-ui';
import { RtfAppHelpComponent as RtfApplicationHelpComponent } from '@gsp-sys/rtf-apphelp';
import { JointSearchService } from '../../service/joint-search/joint-search.service';
import { EventBus } from '@qdp/common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { of } from 'rxjs';
import { findIndex } from 'lodash-es';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { LocalizeService } from '@qdp/localize';
import { ExpressionService } from '@gsp-svc/expression';
export class JointSearchComponent {
    /**
     * @param {?} renderer
     * @param {?} resolver
     * @param {?} jointSearchService
     * @param {?} injector
     */
    constructor(renderer, resolver, jointSearchService, injector) {
        this.renderer = renderer;
        this.resolver = resolver;
        this.jointSearchService = jointSearchService;
        this.injector = injector;
        this.closeModal = new EventEmitter();
        // 模态框确定后关闭，并传递参数
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        // 查询ID
        this.formId = 'form' + 'ff3ea474-cc65-23b0-cdb1-73c9146cea3b'; // 当前表单ID
        this.modalConfig = {
            title: '联查映射',
            width: 900,
            height: 800,
            showButtons: true
        };
        this.functionSubDatas = []; // 数据
        // 数据
        this.functionParaDatas = [];
        this.size = {};
        this.paraColumns = [];
        this.SubColumns = [];
        this.displaystyle = [
            { 'name': '右键联查', value: 1 },
            { 'name': '超链联查', value: 2 }
        ];
        this.QueryInfoDatas = [];
        this.languages = [];
        this._currentConditionInput = null;
        this.functionParaDatasOfSub = [];
        this.handlebeforeClose = (/**
         * @return {?}
         */
        () => {
            this.dg.endRowEdit();
            this.dg1.endRowEdit();
            return of(true);
        });
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.language = this.localizeService.language;
            this.expressionService = this.injector.get(ExpressionService);
            this.modalConfig.title = this.localizeService.getValue('ideCmp.drillDown.drillDownName');
            this.displaystyle = this.localizeService.getValue('ideCmp.drillDown.displayStyle');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dropDownInitForIDE();
        this.gridInit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const changeName in changes) {
            /** @type {?} */
            const newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                switch (changeName) {
                    case 'editorParams':
                        this.dropDownInitForIDE();
                        break;
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    dropDownInitForIDE() {
        /** @type {?} */
        const self = this;
        self.formId = 'form' + 'ff3ea474-cc65-23b0-cdb1-73c9146cea3b';
        if (self.editorParams && self.editorParams.queryId) {
            self.queryId = self.editorParams.queryId;
            self.sessionId = self.editorParams.sessionId;
            self.queryRelativeUrl = self.editorParams.queryRelativeUrl;
            self.qoManagerCode = self.editorParams.qoManagerCode;
            self.domJson = self.editorParams.domJson;
            self.viewModelFields = [];
            self.getViewModelFields();
            self.jointSearchService.getLanguageList().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data && data.length) {
                    data.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        self.languages.push({ code: e.code.toLowerCase(), name: e.description });
                    }));
                }
                self.jointSearchService.getjointsearch(self.formId, self.queryId, self.queryRelativeUrl).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    if (data != null) {
                        self.functionSubDatas = JSON.parse(data.joinSearch);
                        self.functionParaDatas = JSON.parse(data.jointparam);
                        // tslint:disable-next-line:prefer-for-of
                        for (let i = 0; i < self.functionSubDatas.length; i++) {
                            if (self.functionSubDatas[i].jointserachdisplaystyle === 2) {
                                self.dg.showColumn('linkfield');
                                break;
                            }
                        }
                    }
                }));
                /** @type {?} */
                const params = {};
                params['qoManagerCode'] = self.qoManagerCode;
                params['pageIndex'] = 0;
                params['schemaId'] = '';
                params['entityData'] = '';
                params['extendCond'] = '';
                self.jointSearchService.getCol(params, self.queryRelativeUrl).subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    if (value && value.dynamicCols) {
                        self.dynamicCols = value.dynamicCols;
                    }
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    gridInit() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const enumOpts = { valueField: 'value', textField: 'name', data: this.displaystyle };
        this.SubColumns = [
            { field: 'functioncode', width: 160, title: self.localizeService.getValue('ideCmp.drillDown.columnHeader')[0], template: this.functioncodeTemp },
            { field: 'functionname', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.columnHeader')[1], template: this.functionNameTemp },
            // { field: 'jointsearchid', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.columnHeader')[2], editor: { type: EditorTypes.TEXTBOX, options: {} } },
            {
                field: 'jointserachdisplaystyle', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.columnHeader')[3],
                formatter: { type: 'enum', options: enumOpts },
                editor: { type: EditorTypes.COMBOLIST, options: {
                        data: this.displaystyle,
                        idField: 'value',
                        textField: 'name',
                        selectChange: this.selectChange.bind(this)
                    }
                }
            },
            { field: 'linkfield', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.columnHeader')[6], visible: false, editor: { type: EditorTypes.TEXTBOX, options: {} } },
            {
                field: 'visibleformula', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.columnHeader')[4],
                editor: {
                    type: EditorTypes.INPUTGROUP, options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this._currentConditionInput = e;
                            this.inputCondExp();
                        })
                    },
                }
            },
        ];
        this.paraColumns = [
            { field: 'para', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.paramColumnHeader')[0], editor: { type: EditorTypes.TEXTBOX, options: {} } },
            { field: 'paraname', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.paramColumnHeader')[1], editor: { type: EditorTypes.TEXTBOX, options: {} } },
            { field: 'paravalue', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.paramColumnHeader')[2], editor: { type: EditorTypes.TEXTBOX, options: {} } },
            {
                field: 'paravaluetype', width: 100, title: self.localizeService.getValue('ideCmp.drillDown.paramColumnHeader')[3], editor: { type: EditorTypes.CHECKBOX, options: {} },
                formatter: { type: 'boolean', options: { trueText: self.localizeService.getValue('ideCmp.drillDown.enumExpress')[0], falseText: self.localizeService.getValue('ideCmp.drillDown.enumExpress')[1] } }
            },
        ];
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    selectChange($event) {
        // console.log($event);
        /** @type {?} */
        const self = this;
        if (($event.value.data.value - 0) === 2) {
            this.dg.showColumn('linkfield');
        }
        else {
            this.dg.hideColumn('linkfield');
        }
        if (this.dg.selectedRow) {
            /** @type {?} */
            const index = findIndex(this.functionSubDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.id === self.dg.selectedRow.id;
            }));
            self.functionSubDatas[index].jointserachdisplaystyle = $event.value.data.value;
            self.functionSubDatas = [...self.functionSubDatas];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getViewModelFields() {
        if (this.domJson) {
            /** @type {?} */
            const component = this.domJson.module.components.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.componentType === 'Frame'));
            this.recursiveGetViewModelFields(component, null);
        }
    }
    /**
     * @private
     * @param {?} component
     * @param {?} contents
     * @return {?}
     */
    recursiveGetViewModelFields(component, contents) {
        if (component) {
            if (component.type === 'QdpFramework') {
                if (component && component.params && component.params.length) {
                    for (const field of component.params) {
                        this.viewModelFields.push(field.ParamCode);
                    }
                }
            }
            else if (component.contents && component.contents.length) {
                this.recursiveGetViewModelFields(null, component.contents);
            }
        }
        else {
            for (let i = 0; i < contents.length; i++) {
                if (contents[i].type === 'QdpFramework') {
                    if (contents[i] && contents[i].params && contents[i].params.length) {
                        for (const field of contents[i].params) {
                            this.viewModelFields.push(field.ParamCode);
                        }
                    }
                }
                else if (contents[i].contents && contents[i].contents.length) {
                    this.recursiveGetViewModelFields(null, contents[i].contents);
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        this.size.height = event.newHeight;
        this.size.width = event.newWidth;
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    clickConfirm() {
        /** @type {?} */
        const self = this;
        self.dg.endRowEdit();
        self.dg1.endRowEdit();
        if (self.functionSubDatas.length > 0) {
            self.jointSearchService.savejointsearch({ Id: EventBus.guid(), joinsearch: JSON.stringify(self.functionSubDatas), jointparam: JSON.stringify(self.functionParaDatas), queryid: self.queryId, FormId: self.formId }, this.queryRelativeUrl).subscribe();
        }
        else {
            self.jointSearchService.deletejointsearch(self.formId, self.queryId, this.queryRelativeUrl).subscribe();
            self.functionSubDatas = [];
            self.functionParaDatas = [];
            self.functionParaDatasOfSub = [];
        }
        this.selectedIndex = -1;
        this.submitModal.emit({ value: this.functionSubDatas });
    }
    /**
     * @return {?}
     */
    handleDialogShow() {
        this.farrisDialog.show();
    }
    /**
     * @return {?}
     */
    addSubHandler() {
        this.functionSubDatas.push({
            'id': EventBus.guid(),
            'queryParaID': this.queryId,
            'searchtype': '',
            'functioncode': '',
            'functionname': null,
            'appEntrance': '',
            'jointsearchid': '',
            'jointserachdisplaystyle': 1,
            'linkfield': '',
            'visibleformula': '',
            'doubleclikjoinsearch': true,
            'destinationqueryId': ''
        });
        this.dg.refresh();
    }
    /**
     * @return {?}
     */
    removeSubHandler() {
        /** @type {?} */
        const self = this;
        if (self.dg.selectedRow) {
            /** @type {?} */
            const id = self.dg.selectedRow.id;
            /** @type {?} */
            const index = findIndex(self.functionSubDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.id === id;
            }));
            self.functionSubDatas.splice(index, 1);
            self.functionSubDatas = [...self.functionSubDatas];
            if (self.functionSubDatas.length === 0) {
                self.functionParaDatas = [];
                self.functionParaDatasOfSub = [];
            }
            else {
                /** @type {?} */
                const params = [];
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < this.functionParaDatas.length; i++) {
                    if (self.functionParaDatas[i].functionid !== id) {
                        params.push(self.functionParaDatas[i]);
                    }
                }
                self.functionParaDatas.push(...params);
            }
            this.dg.refresh();
            this.dg1.refresh();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    cancelSubHandler(type) {
        this.dg.endRowEdit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getFunctionName(data) {
        /** @type {?} */
        let local = 'zh-chs';
        if ((!gsp && !gsp.cache) && gspframeworkService) {
            local = gspframeworkService.rtf.language.getLanguageCode().toLowerCase();
        }
        if (!local) {
            local = 'zh-chs';
        }
        return data[local] ? data[local] : data;
    }
    /**
     * @return {?}
     */
    openFunc() {
        this.appHelp.showHelp(this.sessionId);
    }
    /**
     * @return {?}
     */
    openApp() {
        this.rtfappHelp.showHelp(this.sessionId);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectedFunc($event) {
        /** @type {?} */
        const self = this;
        if (self.dg.selectedRow) {
            /** @type {?} */
            const index = findIndex(self.functionSubDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.id === self.dg.selectedRow.id;
            }));
            self.functionSubDatas[index].functioncode = $event[0].Id;
            self.functionSubDatas[index].functionname = { 'zh-chs': $event[0].Name };
            self.functionSubDatas[index].searchtype = 'func';
            /** @type {?} */
            let staticParam = $event[0].InvokingConfig.staticParams;
            if (staticParam) {
                staticParam = JSON.parse(staticParam);
                for (const staticPara of staticParam) {
                    if (staticPara.name === 'queryId') {
                        self.functionSubDatas[index].destinationqueryId = staticPara.value;
                    }
                }
            }
            self.functionSubDatas = [...self.functionSubDatas];
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectedApp($event) {
        /** @type {?} */
        const self = this;
        if (self.dg.selectedRow) {
            /** @type {?} */
            const index = findIndex(this.functionSubDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.id === self.dg.selectedRow.id;
            }));
            self.functionSubDatas[index].functioncode = $event.selectedInvok[0].appId;
            self.functionSubDatas[index].functionname = { 'zh-chs': $event.selectedInvok[0].name };
            self.functionSubDatas[index].appEntrance = $event.selectedInvok[0].appEntrance;
            self.functionSubDatas[index].searchtype = 'app';
            /** @type {?} */
            let staticParam = $event.selectedInvok[0].staticParams;
            if (staticParam) {
                staticParam = JSON.parse(staticParam);
                for (const staticPara of staticParam) {
                    if (staticPara.name === 'queryId') {
                        self.functionSubDatas[index].destinationqueryId = staticPara.value;
                    }
                }
            }
            self.functionSubDatas = [...self.functionSubDatas];
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    findIndex(event) {
        this.selectedIndex = event.data.id;
        this.functionParaDatasOfSub = this.functionParaDatas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.functionid === this.selectedIndex));
        this.dg.endRowEdit();
        this.dg1.endRowEdit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    cancelEditedPara(event) {
        this.dg1.endRowEdit();
    }
    /**
     * @return {?}
     */
    inputCondExp() {
        /** @type {?} */
        const self = this;
        if (self.dg.selectedRow) {
            /** @type {?} */
            const id = self.dg.selectedRow.id;
            /** @type {?} */
            const index = findIndex(self.functionSubDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.id === id;
            }));
            if (this.viewModelFields) {
                for (const code of this.viewModelFields) {
                    this.expressionService.addContext({
                        key: '@P_' + code,
                        name: code,
                        description: ''
                    });
                }
            }
            // 结果集列信息放进上下文
            if (this.dynamicCols) {
                this.dynamicCols.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.expressionService.addContext({
                        key: '@R_' + element.bindField,
                        name: element.name,
                        description: ''
                    });
                }));
            }
            self.expressionService.addExpressionText(self.functionSubDatas[index].visibleformula);
            self.expressionService.buildExpression().then((/**
             * @param {?} expressStr
             * @return {?}
             */
            expressStr => {
                self.functionSubDatas[index].visibleformula = expressStr;
                // if (self.dg) {
                //   self.dg.refresh();
                //   self.dg.data = self.functionSubDatas;
                // }
                self.functionSubDatas = [...self.functionSubDatas];
                if (self._currentConditionInput) {
                    self._currentConditionInput.formControl.setValue(expressStr);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    addParaHandler() {
        /** @type {?} */
        const functionid = this.selectedIndex;
        if (functionid !== -1) {
            this.functionParaDatas.push({
                'id': EventBus.guid(),
                'functionid': functionid,
                'para': '',
                'paraname': '',
                'paravalue': '',
                'paravaluetype': false
            });
            this.functionParaDatasOfSub = this.functionParaDatas.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.functionid === this.selectedIndex));
        }
        this.dg1.refresh();
    }
    /**
     * @return {?}
     */
    removeParaHandler() {
        /** @type {?} */
        const self = this;
        if (self.dg1.selectedRow) {
            /** @type {?} */
            const index = findIndex(self.functionParaDatas, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.id === self.dg1.selectedRow.id;
            }));
            self.functionParaDatas.splice(index, 1);
            self.functionParaDatasOfSub = self.functionParaDatas.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.functionid === this.selectedIndex));
            self.functionParaDatasOfSub = [...self.functionParaDatasOfSub];
        }
    }
}
JointSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'joint-search',
                template: "<div class=\"f-utils-flex-column h-100\">\r\n  <div class=\"f-utils-flex-column\" style=\" flex: 1 1 0\">\r\n    <div class=\"f-utils-fill-flex-column farris-split-section m-1 farris-overflow-hidden\">\r\n      <div class=\"farris-form farris-card-content-bg h-100\" (resized)=\"onResized($event)\">\r\n        <fieldSet style=\"height: 11% !important;\">\r\n          <button id=\"addSubFilterRow\" class=\"btn btn-primary mr-1 mb-1\" (click)=\"addSubHandler()\">{{localizeService.getValue('ideCmp.drillDown.btnAdd')}}</button>\r\n          <button id=\"addSubFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"removeSubHandler()\">{{localizeService.getValue('ideCmp.drillDown.btnDelete')}}</button>\r\n          <button id=\"addSubFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"cancelSubHandler($event)\">{{localizeService.getValue('ideCmp.drillDown.btnCancel')}}</button>\r\n        </fieldSet>\r\n        <div class=\"f-utils-fill\" style=\"height: 89% !important;\">\r\n          <farris-datagrid id=\"gridFunctionSub2\" [data]=\"functionSubDatas\"\r\n                           [columns]=\"SubColumns\" #dg=\"datagrid\"\r\n                           [fit]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                           [showCheckbox]=\"false\" [fitColumns]=\"true\"\r\n                           [showLineNumber]=\"true\" [striped]=\"true\"\r\n                           [virtualized]=\"true\" [pagination]=\"false\"\r\n                           (selectChanged)=findIndex($event)>\r\n\r\n          </farris-datagrid>\r\n          <ng-template #functioncodeTemp let-ctx>\r\n            <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n              <input [disabled]=\"true\" type=\"text\" class=\"form-control\" name=\"name\"\r\n                     [(ngModel)]=\"ctx.rowData['functioncode']\">\r\n              <button id=\"functionSelect\" class=\"btn f-rt-btn f-btn-ml btn-secondary\" (click)=\"openFunc()\">\r\n                {{localizeService.getValue('ideCmp.drillDown.menuBtn')}}\r\n              </button>\r\n              <button id=\"appSelect\" class=\"btn f-rt-btn f-btn-ml btn-secondary\" (click)=\"openApp()\">\r\n                {{localizeService.getValue('ideCmp.drillDown.appBtn')}}\r\n              </button>\r\n              <app-rtf-app-help #appHelp (afterHelpConfirm)=\"selectedFunc($event)\" [languageCode]=\"language\"></app-rtf-app-help>\r\n              <app-rtf-application-help #rtfappHelp [initSelectKeys]=\"\" (afterHelpConfirm)=\"selectedApp($event)\" [languageCode]=\"language\"></app-rtf-application-help>\r\n            </div>\r\n          </ng-template>\r\n          <ng-template #functionNameTemp let-ctx>\r\n            <language-textbox [languages]=\"languages\" [(ngModel)]=\"ctx.rowData['functionname']\"></language-textbox>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div class=\"f-utils-flex-column\" style=\" flex: 1 1 0\">\r\n    <div class=\"f-utils-fill-flex-column farris-split-section m-1 farris-overflow-hidden\">\r\n      <div class=\"farris-form farris-card-content-bg h-100\" (resized)=\"onResized($event)\">\r\n        <fieldSet style=\"height: 11% !important;\">\r\n          <button id=\"addFilterRow\" class=\"btn btn-primary mr-1 mb-1\" (click)=\"addParaHandler()\">{{localizeService.getValue('ideCmp.drillDown.btnAdd')}}</button>\r\n          <button id=\"addFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"removeParaHandler()\">{{localizeService.getValue('ideCmp.drillDown.btnDelete')}}</button>\r\n          <button id=\"addFilterRow\" class=\"btn btn-secondary mr-1 mb-1\" (click)=\"cancelEditedPara($event)\">{{localizeService.getValue('ideCmp.drillDown.btnCancel')}}</button>\r\n        </fieldSet>\r\n        <div class=\"f-utils-fill\" style=\"height: 89% !important;\">\r\n          <farris-datagrid id=\"gridFunctionPara2\" [data]=\"functionParaDatasOfSub\"\r\n                           [columns]=\"paraColumns\" #dg1=\"datagrid\"\r\n                           [fit]=\"true\"\r\n                           [editable]=\"true\" [editMode]=\"'cell'\" [showCheckbox]=\"false\" [fitColumns]=\"true\"\r\n                           [showLineNumber]=\"true\" [striped]=\"true\" [total]=\"0\" [pageSize]=\"100\"\r\n                           [virtualized]=\"true\" [pagination]=\"false\">\r\n          </farris-datagrid>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-template #enumFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clickCancel()\">{{localizeService.getValue('ideCmp.drillDown.btnCancel')}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"clickConfirm()\">{{localizeService.getValue('ideCmp.drillDown.btnOK')}}</button>\r\n  </ng-template>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["tr .center{text-align:center}"]
            }] }
];
/** @nocollapse */
JointSearchComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ComponentFactoryResolver },
    { type: JointSearchService },
    { type: Injector, decorators: [{ type: Optional }] }
];
JointSearchComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['enumFooter',] }],
    dg: [{ type: ViewChild, args: ['dg',] }],
    dg1: [{ type: ViewChild, args: ['dg1',] }],
    farrisDialog: [{ type: ViewChild, args: ['farrisDialog',] }],
    appHelp: [{ type: ViewChild, args: ['appHelp',] }],
    rtfappHelp: [{ type: ViewChild, args: ['rtfappHelp',] }],
    functioncodeTemp: [{ type: ViewChild, args: ['functioncodeTemp',] }],
    functionNameTemp: [{ type: ViewChild, args: ['functionNameTemp',] }]
};
if (false) {
    /** @type {?} */
    JointSearchComponent.prototype.closeModal;
    /** @type {?} */
    JointSearchComponent.prototype.submitModal;
    /** @type {?} */
    JointSearchComponent.prototype.editorParams;
    /** @type {?} */
    JointSearchComponent.prototype.queryId;
    /** @type {?} */
    JointSearchComponent.prototype.formId;
    /** @type {?} */
    JointSearchComponent.prototype.sessionId;
    /** @type {?} */
    JointSearchComponent.prototype.queryRelativeUrl;
    /** @type {?} */
    JointSearchComponent.prototype.qoManagerCode;
    /** @type {?} */
    JointSearchComponent.prototype.dynamicCols;
    /** @type {?} */
    JointSearchComponent.prototype.domJson;
    /** @type {?} */
    JointSearchComponent.prototype.viewModelFields;
    /** @type {?} */
    JointSearchComponent.prototype.modalFooter;
    /** @type {?} */
    JointSearchComponent.prototype.modalConfig;
    /** @type {?} */
    JointSearchComponent.prototype.functionSubDatas;
    /** @type {?} */
    JointSearchComponent.prototype.functionParaDatas;
    /** @type {?} */
    JointSearchComponent.prototype.size;
    /**
     * @type {?}
     * @private
     */
    JointSearchComponent.prototype.selectedIndex;
    /** @type {?} */
    JointSearchComponent.prototype.paraColumns;
    /** @type {?} */
    JointSearchComponent.prototype.SubColumns;
    /** @type {?} */
    JointSearchComponent.prototype.displaystyle;
    /** @type {?} */
    JointSearchComponent.prototype.QueryInfoDatas;
    /** @type {?} */
    JointSearchComponent.prototype.localizeService;
    /** @type {?} */
    JointSearchComponent.prototype.expressionService;
    /** @type {?} */
    JointSearchComponent.prototype.languages;
    /** @type {?} */
    JointSearchComponent.prototype.language;
    /** @type {?} */
    JointSearchComponent.prototype._currentConditionInput;
    /** @type {?} */
    JointSearchComponent.prototype.functionParaDatasOfSub;
    /** @type {?} */
    JointSearchComponent.prototype.dg;
    /** @type {?} */
    JointSearchComponent.prototype.dg1;
    /** @type {?} */
    JointSearchComponent.prototype.farrisDialog;
    /** @type {?} */
    JointSearchComponent.prototype.appHelp;
    /** @type {?} */
    JointSearchComponent.prototype.rtfappHelp;
    /** @type {?} */
    JointSearchComponent.prototype.functioncodeTemp;
    /** @type {?} */
    JointSearchComponent.prototype.functionNameTemp;
    /** @type {?} */
    JointSearchComponent.prototype.handlebeforeClose;
    /**
     * @type {?}
     * @private
     */
    JointSearchComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    JointSearchComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    JointSearchComponent.prototype.jointSearchService;
    /**
     * @type {?}
     * @private
     */
    JointSearchComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,