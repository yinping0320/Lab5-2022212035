/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
var ResizedEvent = /** @class */ (function () {
    function ResizedEvent(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
    return ResizedEvent;
}());
export { ResizedEvent };
if (false) {
    /** @type {?} */
    ResizedEvent.prototype.element;
    /** @type {?} */
    ResizedEvent.prototype.newWidth;
    /** @type {?} */
    ResizedEvent.prototype.newHeight;
    /** @type {?} */
    ResizedEvent.prototype.oldWidth;
    /** @type {?} */
    ResizedEvent.prototype.oldHeight;
}
var ResizedDirective = /** @class */ (function () {
    function ResizedDirective(element) {
        this.element = element;
        // tslint:disable-next-line:no-output-rename
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ResizedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // tslint:disable-next-line:no-unused-expression
        new ResizeSensor(this.element.nativeElement, (/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.onResized(); }));
        this.onResized();
    };
    /**
     * @private
     * @return {?}
     */
    ResizedDirective.prototype.onResized = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        var newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        /** @type {?} */
        var event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.next(event);
    };
    ResizedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resized]'
                },] }
    ];
    /** @nocollapse */
    ResizedDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ResizedDirective.propDecorators = {
        resized: [{ type: Output, args: ['resized',] }]
    };
    return ResizedDirective;
}());
export { ResizedDirective };
if (false) {
    /** @type {?} */
    ResizedDirective.prototype.resized;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldWidth;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldHeight;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlL3Jlc2l6ZWQvcmVzaXplZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5EO0lBQ0Usc0JBQ1csT0FBbUIsRUFDbkIsUUFBZ0IsRUFDaEIsU0FBaUIsRUFDakIsUUFBZ0IsRUFDaEIsU0FBaUI7UUFKakIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFDakIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQ3pCLENBQUM7SUFDTixtQkFBQztBQUFELENBQUMsQUFSRCxJQVFDOzs7O0lBTkcsK0JBQTRCOztJQUM1QixnQ0FBeUI7O0lBQ3pCLGlDQUEwQjs7SUFDMUIsZ0NBQXlCOztJQUN6QixpQ0FBMEI7O0FBSTlCO0lBV0UsMEJBQTZCLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7O1FBTHZDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztJQU1wRCxDQUFDOzs7O0lBRUQsbUNBQVE7OztJQUFSO1FBQUEsaUJBSUM7UUFIQyxnREFBZ0Q7UUFDaEQsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhOzs7O1FBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsU0FBUyxFQUFFLEVBQWhCLENBQWdCLEVBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7Ozs7SUFFTyxvQ0FBUzs7OztJQUFqQjs7WUFDUSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVzs7WUFDakQsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVk7UUFFekQsSUFBSSxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM5RCxPQUFPO1NBQ1I7O1lBRUssS0FBSyxHQUFHLElBQUksWUFBWSxDQUM1QixJQUFJLENBQUMsT0FBTyxFQUNaLFFBQVEsRUFDUixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxDQUFDO1FBRWpCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7O2dCQXZDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCOzs7O2dCQWZtQixVQUFVOzs7MEJBa0IzQixNQUFNLFNBQUMsU0FBUzs7SUFtQ25CLHVCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0FyQ1ksZ0JBQWdCOzs7SUFFM0IsbUNBQ29EOzs7OztJQUVwRCxvQ0FBeUI7Ozs7O0lBQ3pCLHFDQUEwQjs7Ozs7SUFFZCxtQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVzaXplU2Vuc29yIH0gZnJvbSAnY3NzLWVsZW1lbnQtcXVlcmllcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzaXplZEV2ZW50IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHJlYWRvbmx5IGVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcbiAgICByZWFkb25seSBuZXdXaWR0aDogbnVtYmVyLFxyXG4gICAgcmVhZG9ubHkgbmV3SGVpZ2h0OiBudW1iZXIsXHJcbiAgICByZWFkb25seSBvbGRXaWR0aDogbnVtYmVyLFxyXG4gICAgcmVhZG9ubHkgb2xkSGVpZ2h0OiBudW1iZXJcclxuICApIHt9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3Jlc2l6ZWRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzaXplZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW91dHB1dC1yZW5hbWVcclxuICBAT3V0cHV0KCdyZXNpemVkJylcclxuICByZWFkb25seSByZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcjxSZXNpemVkRXZlbnQ+KCk7XHJcblxyXG4gIHByaXZhdGUgb2xkV2lkdGg6IG51bWJlcjtcclxuICBwcml2YXRlIG9sZEhlaWdodDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXHJcbiAgICBuZXcgUmVzaXplU2Vuc29yKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCB4ID0+IHRoaXMub25SZXNpemVkKCkpO1xyXG4gICAgdGhpcy5vblJlc2l6ZWQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25SZXNpemVkKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbmV3V2lkdGggPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgIGNvbnN0IG5ld0hlaWdodCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICBpZiAobmV3V2lkdGggPT09IHRoaXMub2xkV2lkdGggJiYgbmV3SGVpZ2h0ID09PSB0aGlzLm9sZEhlaWdodCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXZlbnQgPSBuZXcgUmVzaXplZEV2ZW50KFxyXG4gICAgICB0aGlzLmVsZW1lbnQsXHJcbiAgICAgIG5ld1dpZHRoLFxyXG4gICAgICBuZXdIZWlnaHQsXHJcbiAgICAgIHRoaXMub2xkV2lkdGgsXHJcbiAgICAgIHRoaXMub2xkSGVpZ2h0KTtcclxuXHJcbiAgICB0aGlzLm9sZFdpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICB0aGlzLm9sZEhlaWdodCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICB0aGlzLnJlc2l6ZWQubmV4dChldmVudCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==