/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SchemaManagerService, LcpService } from '@qdp/common';
import { Subject } from 'rxjs/Subject';
var SchemaService = /** @class */ (function () {
    function SchemaService(schemaManager, lcpService) {
        var _this = this;
        this.schemaManager = schemaManager;
        this.lcpService = lcpService;
        this.schemaInfo = new Subject();
        this.colList = new Subject();
        this.pageInfoChange = new Subject();
        this.operationChange = new Subject();
        this.schemaManager.schemaInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.schemaInfo.next(value);
        }));
        this.schemaManager.colList.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.colList.next(value);
        }));
        this.lcpService.pageInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.pageInfoChange.next(value);
        }));
        this.schemaManager.operationChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.operationChange.next(value);
        }));
    }
    /**
     * @param {?} queryId
     * @param {?} userId
     * @param {?} organizationId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @return {?}
     */
    SchemaService.prototype.getSchemaList = /**
     * @param {?} queryId
     * @param {?} userId
     * @param {?} organizationId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @return {?}
     */
    function (queryId, userId, organizationId, queryRelativeUrl, groupType) {
        if (groupType) {
            return this.schemaManager.getSchemaListByGroupType(queryId, userId, organizationId, groupType, queryRelativeUrl);
        }
        else {
            return this.schemaManager.getSchemaList(queryId, userId, organizationId, queryRelativeUrl);
        }
    };
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    SchemaService.prototype.getSchema = /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl, groupType, organizationId) {
        return this.schemaManager.getSchema(id, queryId, queryRelativeUrl, groupType, organizationId);
    };
    /**
     * @param {?} schema
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    SchemaService.prototype.saveSchema = /**
     * @param {?} schema
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (schema, queryRelativeUrl) {
        return this.schemaManager.saveSchema(schema, queryRelativeUrl);
    };
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    SchemaService.prototype.deleteSchema = /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl, groupType, organizationId) {
        return this.schemaManager.deleteSchema(id, queryId, queryRelativeUrl, groupType, organizationId);
    };
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} sheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    SchemaService.prototype.getSpreadTemplate = /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} sheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    function (id, queryId, dynamicCols, queryRelativeUrl, sheme, frozenCols, groupType) {
        return this.schemaManager.getSpreadTemplate(id, queryId, dynamicCols, queryRelativeUrl, sheme, frozenCols, groupType);
    };
    /**
     * @param {?} param
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    SchemaService.prototype.getData = /**
     * @param {?} param
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (param, queryRelativeUrl) {
        return this.lcpService.getData(param, queryRelativeUrl);
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    SchemaService.prototype.getCol = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        return this.lcpService.getCol(params, queryRelativeUrl);
    };
    /**
     * @return {?}
     */
    SchemaService.prototype.getOperation = /**
     * @return {?}
     */
    function () {
        return this.schemaManager.getOperation();
    };
    SchemaService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SchemaService.ctorParameters = function () { return [
        { type: SchemaManagerService },
        { type: LcpService }
    ]; };
    return SchemaService;
}());
export { SchemaService };
if (false) {
    /** @type {?} */
    SchemaService.prototype.schemaInfo;
    /** @type {?} */
    SchemaService.prototype.colList;
    /** @type {?} */
    SchemaService.prototype.pageInfoChange;
    /** @type {?} */
    SchemaService.prototype.operationChange;
    /**
     * @type {?}
     * @private
     */
    SchemaService.prototype.schemaManager;
    /**
     * @type {?}
     * @private
     */
    SchemaService.prototype.lcpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9zY2hlbWEvc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXZDO0lBT0UsdUJBQW9CLGFBQW1DLEVBQVUsVUFBc0I7UUFBdkYsaUJBYUM7UUFibUIsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUx2RixlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUNoQyxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUM3QixtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDcEMsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBR25DLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsS0FBSztZQUNqRCxLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLEtBQUs7WUFDeEMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxLQUFLO1lBQzVDLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxD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JztcclxuaW1wb3J0IHsgU2NoZW1hTWFuYWdlclNlcnZpY2UsIExjcFNlcnZpY2UgfSBmcm9tICdAcWRwL2NvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNjaGVtYVNlcnZpY2Uge1xyXG4gIHNjaGVtYUluZm8gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgY29sTGlzdCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBwYWdlSW5mb0NoYW5nZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBvcGVyYXRpb25DaGFuZ2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NoZW1hTWFuYWdlcjogU2NoZW1hTWFuYWdlclNlcnZpY2UsIHByaXZhdGUgbGNwU2VydmljZTogTGNwU2VydmljZSkge1xyXG4gICAgdGhpcy5zY2hlbWFNYW5hZ2VyLnNjaGVtYUluZm9DaGFuZ2Uuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgdGhpcy5zY2hlbWFJbmZvLm5leHQodmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNjaGVtYU1hbmFnZXIuY29sTGlzdC5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICB0aGlzLmNvbExpc3QubmV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMubGNwU2VydmljZS5wYWdlSW5mb0NoYW5nZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICB0aGlzLnBhZ2VJbmZvQ2hhbmdlLm5leHQodmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNjaGVtYU1hbmFnZXIub3BlcmF0aW9uQ2hhbmdlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgIHRoaXMub3BlcmF0aW9uQ2hhbmdlLm5leHQodmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRTY2hlbWFMaXN0KHF1ZXJ5SWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcsIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSwgZ3JvdXBUeXBlPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmIChncm91cFR5cGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hTWFuYWdlci5nZXRTY2hlbWFMaXN0QnlHcm91cFR5cGUocXVlcnlJZCwgdXNlcklkLCBvcmdhbml6YXRpb25JZCwgZ3JvdXBUeXBlLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNjaGVtYU1hbmFnZXIuZ2V0U2NoZW1hTGlzdChxdWVyeUlkLCB1c2VySWQsIG9yZ2FuaXphdGlvbklkLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNjaGVtYShpZDogc3RyaW5nLCBxdWVyeUlkOiBzdHJpbmcsIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSwgZ3JvdXBUeXBlPzogYW55LCBvcmdhbml6YXRpb25JZD86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2hlbWFNYW5hZ2VyLmdldFNjaGVtYShpZCwgcXVlcnlJZCwgcXVlcnlSZWxhdGl2ZVVybCwgZ3JvdXBUeXBlLCBvcmdhbml6YXRpb25JZCk7XHJcbiAgfVxyXG5cclxuICBzYXZlU2NoZW1hKHNjaGVtYTogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hTWFuYWdlci5zYXZlU2NoZW1hKHNjaGVtYSwgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVTY2hlbWEoaWQ6IHN0cmluZywgcXVlcnlJZDogc3RyaW5nLCBxdWVyeVJlbGF0aXZlVXJsOiBhbnksIGdyb3VwVHlwZT86IGFueSwgb3JnYW5pemF0aW9uSWQ/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hTWFuYWdlci5kZWxldGVTY2hlbWEoaWQsIHF1ZXJ5SWQsIHF1ZXJ5UmVsYXRpdmVVcmwsIGdyb3VwVHlwZSwgb3JnYW5pemF0aW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3ByZWFkVGVtcGxhdGUoaWQ6IHN0cmluZywgcXVlcnlJZDogc3RyaW5nLCBkeW5hbWljQ29sczogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnksIHNoZW1lPzogYW55LCBmcm96ZW5Db2xzPzogYW55LCBncm91cFR5cGU/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hTWFuYWdlci5nZXRTcHJlYWRUZW1wbGF0ZShpZCwgcXVlcnlJZCwgZHluYW1pY0NvbHMsIHF1ZXJ5UmVsYXRpdmVVcmwsIHNoZW1lLCBmcm96ZW5Db2xzLCBncm91cFR5cGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YShwYXJhbTogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMubGNwU2VydmljZS5nZXREYXRhKHBhcmFtLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGdldENvbChwYXJhbXM6IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmxjcFNlcnZpY2UuZ2V0Q29sKHBhcmFtcywgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG5cclxuICBnZXRPcGVyYXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2hlbWFNYW5hZ2VyLmdldE9wZXJhdGlvbigpO1xyXG4gIH1cclxufVxyXG4iXX0=