/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ParasMappingManagerService } from '@qdp/common';
var ParasMappingService = /** @class */ (function () {
    function ParasMappingService(parasMappingManager) {
        var _this = this;
        this.parasMappingManager = parasMappingManager;
        this.paramMappingInfo = new Subject();
        this.parasMappingManager.parasmappingInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.paramMappingInfo.next(value);
        }));
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    ParasMappingService.prototype.getParasMapping = /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl) {
        return this.parasMappingManager.getParasMapping(id, queryId, queryRelativeUrl);
    };
    /**
     * @param {?} paramMappingInfo
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    ParasMappingService.prototype.saveParasMapping = /**
     * @param {?} paramMappingInfo
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (paramMappingInfo, queryRelativeUrl) {
        return this.parasMappingManager.saveParasMapping(paramMappingInfo, queryRelativeUrl);
    };
    /**
     * @param {?} datasourceID
     * @param {?} queryID
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    ParasMappingService.prototype.deleteParasMapping = /**
     * @param {?} datasourceID
     * @param {?} queryID
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (datasourceID, queryID, queryRelativeUrl) {
        return this.parasMappingManager.deleteParasMapping(datasourceID, queryID, queryRelativeUrl);
    };
    ParasMappingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ParasMappingService.ctorParameters = function () { return [
        { type: ParasMappingManagerService }
    ]; };
    return ParasMappingService;
}());
export { ParasMappingService };
if (false) {
    /** @type {?} */
    ParasMappingService.prototype.paramMappingInfo;
    /**
     * @type {?}
     * @private
     */
    ParasMappingService.prototype.parasMappingManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYXMtbWFwcGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9pZGUtY21wLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvcGFyYXMtbWFwcGluZy9wYXJhcy1tYXBwaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekQ7SUFLRSw2QkFBb0IsbUJBQStDO1FBQW5FLGlCQUlDO1FBSm1CLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBNEI7UUFGbkUscUJBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUdwQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsS0FBSztZQUM3RCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7OztJQUVELDZDQUFlOzs7Ozs7SUFBZixVQUFnQixFQUFVLEVBQUUsT0FBZSxFQUFFLGdCQUFxQjtRQUNoRSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Ozs7OztJQUVELDhDQUFnQjs7Ozs7SUFBaEIsVUFBaUIsZ0JBQXFCLEVBQUUsZ0JBQXFCO1FBQzNELE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDdkYsQ0FBQzs7Ozs7OztJQUVELGdEQUFrQjs7Ozs7O0lBQWxCLFVBQW1CLFlBQW9CLEVBQUUsT0FBZSxFQUFFLGdCQUFxQjtRQUM3RSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDOUYsQ0FBQzs7Z0JBckJGLFVBQVU7Ozs7Z0JBRkYsMEJBQTBCOztJQXdCbkMsMEJBQUM7Q0FBQSxBQXRCRCxJQXNCQztTQXJCWSxtQkFBbUI7OztJQUU5QiwrQ0FBc0M7Ozs7O0lBRTFCLGtEQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBQYXJhc01hcHBpbmdNYW5hZ2VyU2VydmljZSB9IGZyb20gJ0BxZHAvY29tbW9uJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBhcmFzTWFwcGluZ1NlcnZpY2Uge1xyXG5cclxuICBwYXJhbU1hcHBpbmdJbmZvID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmFzTWFwcGluZ01hbmFnZXI6IFBhcmFzTWFwcGluZ01hbmFnZXJTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLnBhcmFzTWFwcGluZ01hbmFnZXIucGFyYXNtYXBwaW5nSW5mb0NoYW5nZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICB0aGlzLnBhcmFtTWFwcGluZ0luZm8ubmV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFBhcmFzTWFwcGluZyhpZDogc3RyaW5nLCBxdWVyeUlkOiBzdHJpbmcsIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJhc01hcHBpbmdNYW5hZ2VyLmdldFBhcmFzTWFwcGluZyhpZCwgcXVlcnlJZCwgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgfVxyXG5cclxuICBzYXZlUGFyYXNNYXBwaW5nKHBhcmFtTWFwcGluZ0luZm86IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnBhcmFzTWFwcGluZ01hbmFnZXIuc2F2ZVBhcmFzTWFwcGluZyhwYXJhbU1hcHBpbmdJbmZvLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVBhcmFzTWFwcGluZyhkYXRhc291cmNlSUQ6IHN0cmluZywgcXVlcnlJRDogc3RyaW5nLCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyYXNNYXBwaW5nTWFuYWdlci5kZWxldGVQYXJhc01hcHBpbmcoZGF0YXNvdXJjZUlELCBxdWVyeUlELCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcbn1cclxuIl19