/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { JointSearchManagerService, LcpService } from '@qdp/common';
var JointSearchService = /** @class */ (function () {
    function JointSearchService(jointSearchManager, lcpService) {
        var _this = this;
        this.jointSearchManager = jointSearchManager;
        this.lcpService = lcpService;
        this.jointSearchInfo = new Subject();
        this.jointSearchManager.jointsearchInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.jointSearchInfo.next(value);
        }));
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    JointSearchService.prototype.getjointsearch = /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl) {
        return this.jointSearchManager.getjointsearch(id, queryId, queryRelativeUrl);
    };
    /**
     * @param {?} jointSearchInfo
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    JointSearchService.prototype.savejointsearch = /**
     * @param {?} jointSearchInfo
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (jointSearchInfo, queryRelativeUrl) {
        return this.jointSearchManager.savejointsearch(jointSearchInfo, queryRelativeUrl);
    };
    /**
     * @param {?} formid
     * @param {?} queryID
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    JointSearchService.prototype.deletejointsearch = /**
     * @param {?} formid
     * @param {?} queryID
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (formid, queryID, queryRelativeUrl) {
        return this.jointSearchManager.deletejointsearch(formid, queryID, queryRelativeUrl);
    };
    /**
     * @return {?}
     */
    JointSearchService.prototype.getLanguageList = /**
     * @return {?}
     */
    function () {
        return this.jointSearchManager.getLanguageList();
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    JointSearchService.prototype.getCol = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        return this.lcpService.getCol(params, queryRelativeUrl);
    };
    JointSearchService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    JointSearchService.ctorParameters = function () { return [
        { type: JointSearchManagerService },
        { type: LcpService }
    ]; };
    return JointSearchService;
}());
export { JointSearchService };
if (false) {
    /** @type {?} */
    JointSearchService.prototype.jointSearchInfo;
    /**
     * @type {?}
     * @private
     */
    JointSearchService.prototype.jointSearchManager;
    /**
     * @type {?}
     * @private
     */
    JointSearchService.prototype.lcpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbnQtc2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2lkZS1jbXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9qb2ludC1zZWFyY2gvam9pbnQtc2VhcmNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBFO0lBS0UsNEJBQW9CLGtCQUE2QyxFQUFVLFVBQXNCO1FBQWpHLGlCQUlDO1FBSm1CLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMkI7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRmpHLG9CQUFlLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUduQyxJQUFJLENBQUMsa0JBQWtCLENBQUMscUJBQXFCLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsS0FBSztZQUMzRCxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFFRCwyQ0FBYzs7Ozs7O0lBQWQsVUFBZSxFQUFVLEVBQUUsT0FBZSxFQUFFLGdCQUFxQjtRQUMvRCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7OztJQUVELDRDQUFlOzs7OztJQUFmLFVBQWdCLGVBQW9CLEVBQUUsZ0JBQXFCO1FBQ3pELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUNwRixDQUFDOzs7Ozs7O0lBRUQsOENBQWlCOzs7Ozs7SUFBakIsVUFBa0IsTUFBVyxFQUFFLE9BQVksRUFBRSxnQkFBcUI7UUFDaEUsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Ozs7SUFFRCw0Q0FBZTs7O0lBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNuRCxDQUFDOzs7Ozs7SUFFRCxtQ0FBTTs7Ozs7SUFBTixVQUFPLE1BQVcsRUFBRSxnQkFBcUI7UUFDdkMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxDQUFDOztnQkE3QkYsVUFBVTs7OztnQkFGRix5QkFBeUI7Z0JBQUUsVUFBVTs7SUFnQzlDLHlCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E3Qlksa0JBQWtCOzs7SUFFN0IsNkNBQXFDOzs7OztJQUV6QixnREFBcUQ7Ozs7O0lBQUUsd0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEpvaW50U2VhcmNoTWFuYWdlclNlcnZpY2UsIExjcFNlcnZpY2UgfSBmcm9tICdAcWRwL2NvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBKb2ludFNlYXJjaFNlcnZpY2Uge1xyXG5cclxuICBqb2ludFNlYXJjaEluZm8gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgam9pbnRTZWFyY2hNYW5hZ2VyOiBKb2ludFNlYXJjaE1hbmFnZXJTZXJ2aWNlLCBwcml2YXRlIGxjcFNlcnZpY2U6IExjcFNlcnZpY2UpIHtcclxuICAgIHRoaXMuam9pbnRTZWFyY2hNYW5hZ2VyLmpvaW50c2VhcmNoSW5mb0NoYW5nZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICB0aGlzLmpvaW50U2VhcmNoSW5mby5uZXh0KHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0am9pbnRzZWFyY2goaWQ6IHN0cmluZywgcXVlcnlJZDogc3RyaW5nLCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuam9pbnRTZWFyY2hNYW5hZ2VyLmdldGpvaW50c2VhcmNoKGlkLCBxdWVyeUlkLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIHNhdmVqb2ludHNlYXJjaChqb2ludFNlYXJjaEluZm86IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmpvaW50U2VhcmNoTWFuYWdlci5zYXZlam9pbnRzZWFyY2goam9pbnRTZWFyY2hJbmZvLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZWpvaW50c2VhcmNoKGZvcm1pZDogYW55LCBxdWVyeUlEOiBhbnksIHF1ZXJ5UmVsYXRpdmVVcmw6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5qb2ludFNlYXJjaE1hbmFnZXIuZGVsZXRlam9pbnRzZWFyY2goZm9ybWlkLCBxdWVyeUlELCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcblxyXG4gIGdldExhbmd1YWdlTGlzdCgpIHtcclxuICAgIHJldHVybiB0aGlzLmpvaW50U2VhcmNoTWFuYWdlci5nZXRMYW5ndWFnZUxpc3QoKTtcclxuICB9XHJcbiAgXHJcbiAgZ2V0Q29sKHBhcmFtczogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMubGNwU2VydmljZS5nZXRDb2wocGFyYW1zLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICB9XHJcbn1cclxuIl19