/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, HostBinding, ViewEncapsulation, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { ChartsTypeComponent } from './charts-type/charts-type.component';
import { ChartsDataComponent } from './charts-data/charts-data.component';
import { ChartsStyleComponent } from './charts-style/charts-style.component';
import { FarrisTabsComponent } from '@farris/ui-tabs';
import { LocalizeService } from '@qdp/localize';
var ChartsSchemaEditorComponent = /** @class */ (function () {
    function ChartsSchemaEditorComponent(injector) {
        this.injector = injector;
        this.cls = "f-utils-flex-column h-100";
        this.tabsSelectChange = new EventEmitter();
        this.localizeService = this.injector.get(LocalizeService);
    }
    /**
     * @return {?}
     */
    ChartsSchemaEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ChartsSchemaEditorComponent.prototype.handleTabSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var option = this.getOption();
        this.tabsSelectChange.emit(option);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ChartsSchemaEditorComponent.prototype.chartTypeChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.chartsType = value;
    };
    /**
     * @return {?}
     */
    ChartsSchemaEditorComponent.prototype.getOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = {};
        if (this.chartsTypeCmp) {
            option['chartsType'] = this.chartsTypeCmp.getChartsTypeOption();
            // console.log("chartsType:");
            // console.log(option['chartsType']);
        }
        if (this.chartsDataCmp) {
            option['chartsData'] = this.chartsDataCmp.getChartsDataOption();
            option['groupSummarySet'] = this.chartsDataCmp.getGroupSummarySetOption();
            // console.log("chartsData:");
            // console.log(option['chartsData']);
        }
        if (this.chartsStyleCmp) {
            option['chartsStyle'] = this.chartsStyleCmp.getChartsStyleOption();
            option['customOption'] = this.chartsStyleCmp.getCustomOption();
            // console.log("chartsStyle:");
            // console.log(option['chartsStyle']);
        }
        return option;
    };
    ChartsSchemaEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'charts-schema-editor',
                    template: "<!--<kendo-tabstrip #tabStrip id=\"chartsSchemaEditor\" class=\"schema-editor-tab h-100 pt-1\" (tabSelect)=\"handleTabSelect($event)\">-->\r\n<farris-tabs  [value]=\"'type'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\"  (tabChange)=\"handleTabSelect($event)\">\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.chartsSchemaManager.chartsType.tab')\" [id] = \"'type'\">\r\n    <ng-template #content>\r\n      <charts-type [currSchema]=\"currSchema\" class=\"schema-editor-tab\" (chartTypeChange)=\"chartTypeChange($event)\" ></charts-type>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.chartsSchemaManager.chartsData.tab')\" [id] = \"'data'\">\r\n    <ng-template #content>\r\n      <charts-data [currSchema]=\"currSchema\" class=\"schema-editor-tab\" [colList]=\"colList\" [chartsType]=\"chartsType\" ></charts-data>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"localizeService.getValue('ideCmp.chartsSchemaManager.chartsStyle.tab')\" [id] = \"'style'\">\r\n    <ng-template #content>\r\n      <charts-style [currSchema]=\"currSchema\" class=\"schema-editor-tab\" [chartsType]=\"chartsType\" ></charts-style>\r\n    </ng-template>\r\n  </farris-tab>\r\n</farris-tabs>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".schema-editor-tab{position:absolute;top:0;bottom:0;left:0;right:0;overflow:hidden}"]
                }] }
    ];
    /** @nocollapse */
    ChartsSchemaEditorComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ChartsSchemaEditorComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        currSchema: [{ type: Input }],
        colList: [{ type: Input }],
        controlType: [{ type: Input }],
        tabsSelectChange: [{ type: Output }],
        chartsTypeCmp: [{ type: ViewChild, args: [ChartsTypeComponent,] }],
        chartsDataCmp: [{ type: ViewChild, args: [ChartsDataComponent,] }],
        chartsStyleCmp: [{ type: ViewChild, args: [ChartsStyleComponent,] }],
        tabs: [{ type: ViewChild, args: [FarrisTabsComponent,] }]
    };
    return ChartsSchemaEditorComponent;
}());
export { ChartsSchemaEditorComponent };
if (false) {
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.cls;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.currSchema;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.colList;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.controlType;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.tabsSelectChange;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsTypeCmp;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsDataCmp;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsStyleCmp;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.tabs;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.chartsType;
    /** @type {?} */
    ChartsSchemaEditorComponent.prototype.localizeService;
    /**
     * @type {?}
     * @private
     */
    ChartsSchemaEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRzLXNjaGVtYS1lZGl0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9pZGUtY21wLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9jaGFydHMtc2NoZW1hLWVkaXRvci9jaGFydHMtc2NoZW1hLWVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEksT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVoRDtJQW1CRSxxQ0FBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVpoQixRQUFHLEdBQUcsMkJBQTJCLENBQUM7UUFJOUMscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQVNuRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVELENBQUM7Ozs7SUFDRCw4Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7OztJQUVELHFEQUFlOzs7O0lBQWYsVUFBZ0IsSUFBUzs7WUFDakIsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVELHFEQUFlOzs7O0lBQWYsVUFBZ0IsS0FBVTtRQUN4QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsK0NBQVM7OztJQUFUOztZQUNRLE1BQU0sR0FBRyxFQUFFO1FBQ2pCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQ2hFLDhCQUE4QjtZQUM5QixxQ0FBcUM7U0FDdEM7UUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNoRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFDMUUsOEJBQThCO1lBQzlCLHFDQUFxQztTQUN0QztRQUNELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQ25FLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQy9ELCtCQUErQjtZQUMvQixzQ0FBc0M7U0FDdkM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztnQkF0REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLDR2Q0FBb0Q7b0JBRXBELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDdEM7Ozs7Z0JBWjJCLFFBQVE7OztzQkFjakMsV0FBVyxTQUFDLE9BQU87NkJBQ25CLEtBQUs7MEJBQ0wsS0FBSzs4QkFDTCxLQUFLO21DQUNMLE1BQU07Z0NBQ04sU0FBUyxTQUFDLG1CQUFtQjtnQ0FDN0IsU0FBUyxTQUFDLG1CQUFtQjtpQ0FDN0IsU0FBUyxTQUFDLG9CQUFvQjt1QkFDOUIsU0FBUyxTQUFDLG1CQUFtQjs7SUF3Q2hDLGtDQUFDO0NBQUEsQUF2REQsSUF1REM7U0FqRFksMkJBQTJCOzs7SUFDdEMsMENBQXdEOztJQUN4RCxpREFBeUI7O0lBQ3pCLDhDQUFzQjs7SUFDdEIsa0RBQTBCOztJQUMxQix1REFBcUQ7O0lBQ3JELG9EQUFtRTs7SUFDbkUsb0RBQW1FOztJQUNuRSxxREFBc0U7O0lBQ3RFLDJDQUEwRDs7SUFDMUQsaURBQWdCOztJQUNoQixzREFBaUM7Ozs7O0lBRXJCLCtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbmplY3RvciwgSG9zdEJpbmRpbmcsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDaGFydHNUeXBlQ29tcG9uZW50IH0gZnJvbSAnLi9jaGFydHMtdHlwZS9jaGFydHMtdHlwZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGFydHNEYXRhQ29tcG9uZW50IH0gZnJvbSAnLi9jaGFydHMtZGF0YS9jaGFydHMtZGF0YS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGFydHNTdHlsZUNvbXBvbmVudCB9IGZyb20gJy4vY2hhcnRzLXN0eWxlL2NoYXJ0cy1zdHlsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGYXJyaXNUYWJzQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS10YWJzJztcclxuaW1wb3J0IHsgTG9jYWxpemVTZXJ2aWNlIH0gZnJvbSAnQHFkcC9sb2NhbGl6ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2NoYXJ0cy1zY2hlbWEtZWRpdG9yJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2hhcnRzLXNjaGVtYS1lZGl0b3IuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2NoYXJ0cy1zY2hlbWEtZWRpdG9yLmNvbXBvbmVudC5jc3MnXSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaGFydHNTY2hlbWFFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbHMgPSBcImYtdXRpbHMtZmxleC1jb2x1bW4gaC0xMDBcIjtcclxuICBASW5wdXQoKSBjdXJyU2NoZW1hOiBhbnk7XHJcbiAgQElucHV0KCkgY29sTGlzdDogYW55O1xyXG4gIEBJbnB1dCgpIGNvbnRyb2xUeXBlOiBhbnk7XHJcbiAgQE91dHB1dCgpIHRhYnNTZWxlY3RDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAVmlld0NoaWxkKENoYXJ0c1R5cGVDb21wb25lbnQpIGNoYXJ0c1R5cGVDbXA6IENoYXJ0c1R5cGVDb21wb25lbnQ7XHJcbiAgQFZpZXdDaGlsZChDaGFydHNEYXRhQ29tcG9uZW50KSBjaGFydHNEYXRhQ21wOiBDaGFydHNEYXRhQ29tcG9uZW50O1xyXG4gIEBWaWV3Q2hpbGQoQ2hhcnRzU3R5bGVDb21wb25lbnQpIGNoYXJ0c1N0eWxlQ21wOiBDaGFydHNTdHlsZUNvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKEZhcnJpc1RhYnNDb21wb25lbnQpIHRhYnM6IEZhcnJpc1RhYnNDb21wb25lbnQ7XHJcbiAgY2hhcnRzVHlwZTogYW55O1xyXG4gIGxvY2FsaXplU2VydmljZTogTG9jYWxpemVTZXJ2aWNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgdGhpcy5sb2NhbGl6ZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGl6ZVNlcnZpY2UpO1xyXG4gIH1cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIGhhbmRsZVRhYlNlbGVjdChkYXRhOiBhbnkpIHtcclxuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuZ2V0T3B0aW9uKCk7XHJcbiAgICB0aGlzLnRhYnNTZWxlY3RDaGFuZ2UuZW1pdChvcHRpb24pO1xyXG4gIH1cclxuXHJcbiAgY2hhcnRUeXBlQ2hhbmdlKHZhbHVlOiBhbnkpIHtcclxuICAgIHRoaXMuY2hhcnRzVHlwZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3B0aW9uKCkge1xyXG4gICAgY29uc3Qgb3B0aW9uID0ge307XHJcbiAgICBpZiAodGhpcy5jaGFydHNUeXBlQ21wKSB7XHJcbiAgICAgIG9wdGlvblsnY2hhcnRzVHlwZSddID0gdGhpcy5jaGFydHNUeXBlQ21wLmdldENoYXJ0c1R5cGVPcHRpb24oKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coXCJjaGFydHNUeXBlOlwiKTtcclxuICAgICAgLy8gY29uc29sZS5sb2cob3B0aW9uWydjaGFydHNUeXBlJ10pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuY2hhcnRzRGF0YUNtcCkge1xyXG4gICAgICBvcHRpb25bJ2NoYXJ0c0RhdGEnXSA9IHRoaXMuY2hhcnRzRGF0YUNtcC5nZXRDaGFydHNEYXRhT3B0aW9uKCk7XHJcbiAgICAgIG9wdGlvblsnZ3JvdXBTdW1tYXJ5U2V0J10gPSB0aGlzLmNoYXJ0c0RhdGFDbXAuZ2V0R3JvdXBTdW1tYXJ5U2V0T3B0aW9uKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hhcnRzRGF0YTpcIik7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKG9wdGlvblsnY2hhcnRzRGF0YSddKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmNoYXJ0c1N0eWxlQ21wKSB7XHJcbiAgICAgIG9wdGlvblsnY2hhcnRzU3R5bGUnXSA9IHRoaXMuY2hhcnRzU3R5bGVDbXAuZ2V0Q2hhcnRzU3R5bGVPcHRpb24oKTtcclxuICAgICAgb3B0aW9uWydjdXN0b21PcHRpb24nXSA9IHRoaXMuY2hhcnRzU3R5bGVDbXAuZ2V0Q3VzdG9tT3B0aW9uKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hhcnRzU3R5bGU6XCIpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhvcHRpb25bJ2NoYXJ0c1N0eWxlJ10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvbjtcclxuICB9XHJcbn1cclxuIl19