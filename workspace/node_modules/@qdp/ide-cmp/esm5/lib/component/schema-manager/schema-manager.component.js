/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, Optional, Injector } from '@angular/core';
import { of } from 'rxjs';
import { DialogComponent } from '@farris/ui-dialog';
import { TreeTableComponent } from '@farris/ui-treetable';
import { MessagerService } from '@farris/ui-messager';
import { FarrisPanelComponent } from '@farris/ui-panel';
import { NotifyService } from '@farris/ui-notify';
import { SchemaService } from '../../service/schema/schema.service';
import { SchemaEditorComponent } from '../schema-editor/schema-editor.component';
import { ChartsSchemaEditorComponent } from '../charts-schema-editor/charts-schema-editor.component';
import { EventBus, RtfServices } from '@qdp/common';
import { LocalizeService } from '@qdp/localize';
import { FormErrorService } from '@farris/command-services';
import { CacheService } from '@ecp-caf/caf-common';
var SchemaManagerComponent = /** @class */ (function () {
    function SchemaManagerComponent(schemaService, msgService, notifyService, injector) {
        var _this = this;
        this.schemaService = schemaService;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.injector = injector;
        this.editorParams = {};
        this.schemaSelected = new EventEmitter();
        this.saveSchema = new EventEmitter();
        this.saveAsSchema = new EventEmitter();
        this.removeSchema = new EventEmitter();
        this.saveAndCloseSchema = new EventEmitter();
        this.dialogBeforeClose = new EventEmitter();
        this.closeModal = new EventEmitter();
        // 模态框确定后关闭，并传递参数
        this.submitModal = new EventEmitter();
        this.defaultExpand = true;
        this.inputCollapse = '收起';
        this.inputExpand = '展开';
        this.size = {};
        this.isShow = false;
        this.personSchema = 'personSchema' + EventBus.guid();
        this.orgSchema = 'orgSchema' + EventBus.guid();
        this.publicSchema = 'publicSchema' + EventBus.guid();
        this.defaultSchema = 'defaultSchema' + EventBus.guid();
        this.schemaTreeData = [
            {
                data: {
                    id: 'public_schema',
                    isDefault: 0,
                    isPrefab: 1,
                    schemaName: '公共',
                    schemaType: 0,
                },
                expanded: true,
                children: []
            }, {
                data: {
                    id: 'org_schema',
                    isDefault: 0,
                    isPrefab: 1,
                    schemaName: '单位',
                    schemaType: 2
                },
                expanded: true,
                children: []
            }, {
                data: {
                    id: 'person_schema',
                    isDefault: 0,
                    isPrefab: 1,
                    schemaName: '个人',
                    schemaType: 1
                },
                expanded: true,
                children: []
            }
        ];
        this.schemaDropDownData = [];
        this.isSchemaType = 0;
        this.isDefault = false;
        this.currentmode = false;
        this.qoManagerCode = '';
        this.modalConfig = {
            title: '格式方案',
            width: 900,
            height: 500,
            showButtons: true
        };
        this.chartsOption = {
            chartsType: {
                series: {
                    type: null
                }
            },
            chartsStyle: {
                title: {
                    text: null,
                    x: null,
                    y: null,
                    textStyle: {
                        lineHeight: 25,
                        fontSize: 25,
                        fontStyle: 'normal',
                        fontWight: 'normal',
                        fontFamily: 'Microsoft YaHei',
                        color: 'black'
                    }
                },
                legend: {
                    itemGap: 10,
                    itemWidth: 25,
                    itemHeight: 14,
                    align: 'auto',
                    orient: 'horizontal'
                },
                visualMap: [{
                        type: 'continuous',
                        top: 'top',
                        bottom: null,
                        left: 'right',
                        right: null,
                        pieces: [],
                        categories: [],
                        calculable: true,
                        inRange: {
                            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
                        },
                        outOfRange: {
                            color: ['rgba(255,255,255,.2)']
                        },
                        controller: {
                            inRange: {
                                color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
                            },
                            outOfRange: {
                                color: ['#444']
                            }
                        },
                        textStyle: {
                            color: '#837' // 值域控件的文本颜色
                        },
                    }]
            },
            chartsData: {
                xAxis: {
                    type: 'category',
                    position: 'bottom'
                },
                yAxis: {
                    type: 'value',
                    position: 'left'
                },
                series: {
                    type: null,
                    encode: {
                        x: [],
                        y: []
                    }
                },
                legend: {
                    data: []
                }
            }
        };
        this.cacheSchemaData = {};
        this.operations = {};
        this.subscriptions = [];
        this.svgSchema = true;
        this.handlebeforeClose = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var id = '';
            if (_this.schemaId) {
                id = _this.schemaId === 'prefab' ? '1' : _this.schemaId;
            }
            if (!id && _this.schemaInfo && _this.schemaInfo.isDefaultSchema) {
                id = _this.schemaInfo.isDefaultSchema.id;
            }
            _this.dialogBeforeClose.emit(id);
            return of(true);
        });
        this.personSchema = this.personSchema + EventBus.guid();
        this.publicSchema = this.publicSchema + EventBus.guid();
        this.defaultSchema = this.defaultSchema + EventBus.guid();
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.modalConfig.title = this.localizeService.getValue('ideCmp.schemaManager.dailogName');
            this.schemaTreeData[0].data.schemaName = this.localizeService.getValue('ideCmp.schemaManager.schemeTypePublic');
            this.schemaTreeData[1].data.schemaName = this.localizeService.getValue('ideCmp.schemaManager.schemeTypeOrg');
            this.schemaTreeData[2].data.schemaName = this.localizeService.getValue('ideCmp.schemaManager.schemeTypePersonal');
            this.formErrorService = this.injector.get(FormErrorService);
            this.cache = this.injector.get(CacheService);
        }
    }
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        this.tabId = RtfServices.getTabId(this.queryId);
        EventBus.register('openAdvanceTemplateDialog', this.initSelectedSchemaId.bind(this), this.tabId);
        this.subscriptions.push(self.schemaService.operationChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                self.operations = value;
            }
            // console.log(value);
        })));
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.initSelectedSchemaId = /**
     * @return {?}
     */
    function () {
        this.selectedSchemaId = '';
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SchemaManagerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var changeName in changes) {
            /** @type {?} */
            var newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                switch (changeName) {
                    case 'schemaInfo':
                        if (newValue) {
                            this.schemaInfoChange(newValue);
                        }
                        break;
                    case 'colList':
                        if (newValue) {
                            this.colListChange(newValue);
                        }
                        break;
                    case 'editorParams':
                        this.schemaManagerInitForIDE();
                        break;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.subscriptions && this.subscriptions.length) {
            try {
                for (var _b = tslib_1.__values(this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var subscription = _c.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    SchemaManagerComponent.prototype.colListChange = /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        if (this.controlType !== 'charts') {
            if (this.schemaTreeData[0].data['schemaValue'] && this.schemaTreeData[1].data['schemaValue'] && this.schemaTreeData[2].data['schemaValue'] && newValue && newValue.length) {
                /** @type {?} */
                var cols = this.initColumns(this.objectCopy(newValue));
                this.schemaTreeData[0].data['schemaValue'].columnOption.colList = cols;
                this.schemaTreeData[1].data['schemaValue'].columnOption.colList = cols;
                this.schemaTreeData[2].data['schemaValue'].columnOption.colList = cols;
            }
            if (this.cacheSchemaData['public_schema'] && this.cacheSchemaData['public_schema'].schemaValue
                && this.cacheSchemaData['public_schema'].schemaValue.columnOption && this.cacheSchemaData['public_schema'].schemaValue.columnOption.colList) {
                if (this.colList && this.colList.length) {
                    /** @type {?} */
                    var cols = this.initColumns(this.objectCopy(this.colList));
                    this.cacheSchemaData['public_schema'].schemaValue.columnOption.colList = cols;
                }
                if (this.currTreeNode.id === 'public_schema') {
                    this.currTreeNodeChanged({
                        node: {
                            data: this.cacheSchemaData['public_schema']
                        }
                    });
                }
            }
        }
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    SchemaManagerComponent.prototype.initColumns = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        if (columns && columns.length) {
            columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                col.colWidth = 150, col.visible = true, col.isFixed = false, col.align = 1,
                    col.formatType = 0, col.formattor = '', col.sort = 0, col.pageAggre = 0, col.pageAggreText = '',
                    col.isGroup = false, col.groupAggre = 0, col.groupAggreText = '', col.totalAggre = 0,
                    col.totalAggreText = '', col.dimension = 0, col.rowColor = '', col.showType = '0';
            }));
        }
        return columns;
    };
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    SchemaManagerComponent.prototype.schemaInfoChange = /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        var _this = this;
        this.controlInit();
        if (this.controlType !== 'charts') {
            this.schemaTreeData[0].data['schemaValue'] = this.schemaTreeData[1].data['schemaValue'] = this.schemaTreeData[2].data['schemaValue'] = newValue && newValue.preSchema ? newValue.preSchema.schemaValue : null;
        }
        else {
            this.schemaTreeData[0].data['schemaValue'] = this.schemaTreeData[1].data['schemaValue'] = this.schemaTreeData[2].data['schemaValue'] = this.chartsOption;
        }
        if (newValue && newValue.schemaList) {
            // 初始化格式方案管理的方案导航树控件以及方案管理的下拉控件
            Object.keys(newValue.schemaList).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.cacheSchemaData[newValue.schemaList[key].id] = JSON.parse(JSON.stringify(newValue.schemaList[key]));
                _this.schemaDropDownData.push(newValue.schemaList[key]);
                if ((newValue.schemaList[key].schemaType - 0) === 0) {
                    _this.schemaTreeData[0].children.push({ data: newValue.schemaList[key], expanded: true, children: [] });
                }
                else if ((newValue.schemaList[key].schemaType - 0) === 2) {
                    _this.schemaTreeData[1].children.push({ data: newValue.schemaList[key], expanded: true, children: [] });
                }
                else {
                    _this.schemaTreeData[2].children.push({ data: newValue.schemaList[key], expanded: true, children: [] });
                }
            }));
        }
        this.schemaTree.updateSerializedValue();
        if (newValue && newValue.isDefaultSchema && newValue.isDefaultSchema.id && this.selectedSchemaId !== 'selected_prefab') {
            if (!this.schemaId || (this.schemaId && '1,public_schema'.indexOf(this.schemaId) >= 0) || ('1,public_schema'.indexOf(this.schemaId) >= 0 && !this.validateSchemaId(this.schemaId, newValue)) || ('1,public_schema'.indexOf(this.schemaId) < 0 && !this.validateSchemaId(this.schemaId, newValue))) {
                this.schemaId = newValue.isDefaultSchema.id;
            }
            this.isDefault = newValue.isDefaultSchema.isDefault === 1 ? true : false;
            this.isSchemaType = newValue.isDefaultSchema.schemaType - 0;
            this.schemaName = newValue.isDefaultSchema.schemaName;
        }
        else {
            if (!this.schemaId || !this.validateSchemaId(this.schemaId, newValue)) {
                this.schemaId = 'prefab';
            }
        }
        if (this.schemaId === 'prefab' || this.schemaId === '1' || !this.schemaId) {
            this.treeNodeSelected('public_schema');
            this.isDefault = false;
            this.isSchemaType = 0;
            this.schemaName = '';
        }
        else {
            this.treeNodeSelected(this.schemaId);
        }
    };
    /**
     * @private
     * @return {?}
     */
    SchemaManagerComponent.prototype.schemaManagerInitForIDE = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        if (this.editorParams && this.editorParams.queryId) {
            this.subscriptions = [];
            // 订阅格式信息的变化
            this.subscriptions.push(self.schemaService.schemaInfo.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    /** @type {?} */
                    var schemaInfoAll = Object.assign({}, value);
                    self.schemaInfo = schemaInfoAll;
                    if (self.schemaInfo.schemaList) {
                        self.schemaInfo.schemaList = self.schemaInfo.schemaList[self.editorParams.queryId];
                    }
                    self.schemaInfoChange(self.schemaInfo);
                }
            })));
            this.subscriptions.push(
            // 订阅数据列信息的变化
            self.schemaService.colList.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                self.colList = value;
                self.colListChange(self.colList);
            })));
            if (this.schemaEditor && this.schemaEditor.tabs) {
                this.schemaEditor.tabs.selectTab('title');
            }
            this.queryId = this.editorParams.queryId;
            this.controlType = this.editorParams.controlType;
            this.qoManagerCode = this.editorParams.qoManagerCode;
            this.queryRelativeUrl = this.editorParams.queryRelativeUrl;
            this.currentmode = true;
            /** @type {?} */
            var organizationId = this.cache.get(this.tabId + 'organizationId') || '';
            this.schemaService.getSchemaList(self.queryId, '', organizationId, self.queryRelativeUrl, self.groupType).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var schemaData = value ? value : [];
                /** @type {?} */
                var schemaId = schemaData && schemaData.length && schemaData[0] && schemaData[0].id ? schemaData[0].id : '1';
                /** @type {?} */
                var params = {};
                params['qoManagerCode'] = self.qoManagerCode;
                params['pageIndex'] = 0;
                params['schemaId'] = schemaId;
                params['entityData'] = '';
                params['extendCond'] = '';
                if (self.editorParams && self.editorParams.dynamicCols && self.editorParams.dynamicCols.length) {
                    self.schemaService.getSpreadTemplate(schemaId, self.queryId, self.editorParams.dynamicCols, self.queryRelativeUrl, null, self.editorParams.dynamicCols).subscribe();
                }
                else {
                    self.schemaService.getCol(params, self.queryRelativeUrl).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        if (result && result.dynamicCols) {
                            self.schemaService.getSpreadTemplate(schemaId, self.queryId, result.dynamicCols, self.queryRelativeUrl, null, result.dynamicCols).subscribe();
                        }
                    }));
                }
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    SchemaManagerComponent.prototype.controlInit = /**
     * @private
     * @return {?}
     */
    function () {
        this.currTreeNode = undefined;
        this.cacheSchemaData = {};
        this.schemaTreeData[0].children = [];
        this.schemaTreeData[1].children = [];
        this.schemaTreeData[2].children = [];
        this.schemaDropDownData = [];
    };
    /**
     * @private
     * @param {?} id
     * @param {?} newValue
     * @return {?}
     */
    SchemaManagerComponent.prototype.validateSchemaId = /**
     * @private
     * @param {?} id
     * @param {?} newValue
     * @return {?}
     */
    function (id, newValue) {
        /** @type {?} */
        var result = false;
        if (!id) {
            return result;
        }
        if (newValue && newValue.schemaList) {
            for (var key in newValue.schemaList) {
                if (id === key) {
                    result = true;
                }
            }
        }
        return result;
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleDialogShow = /**
     * @return {?}
     */
    function () {
        this.personSchema = 'personSchema' + EventBus.guid();
        this.publicSchema = 'publicSchema' + EventBus.guid();
        this.defaultSchema = 'defaultSchema' + EventBus.guid();
        if (this.controlType !== 'charts') {
            if (this.schemaEditor && this.schemaEditor.tabs) {
                this.schemaEditor.tabs.selectTab('title');
            }
        }
        else {
            if (this.chartsSchemaEditor && this.chartsSchemaEditor.tabs) {
                this.chartsSchemaEditor.tabs.selectTab('type');
            }
        }
        this.isShow = true;
        this.farrisDialog.show();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleDropDownItemClick = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.schemaId = id;
        if (this.schemaId === 'prefab') {
            this.selectedSchemaId = 'selected_prefab';
            this.treeNodeSelected('public_schema');
        }
        else {
            this.selectedSchemaId = id;
            this.treeNodeSelected(this.schemaId);
        }
        this.schemaSelected.emit(id === 'prefab' ? '1' : id);
    };
    /**
     * @param {?} option
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleTabsSelectChange = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (this.farrisPanelComponent && this.farrisPanelComponent.modelValue.length) {
            this.farrisPanelComponent.updateModel('schemaInfo');
        }
        this.updateCurrSchema(option, 'tabChanged');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleSchemaTypeSelect = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.isSchemaType = value;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleTreeNodeSelected = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var self = this;
        if (!this.currTreeNode) {
            this.currTreeNodeChanged(data);
        }
        else {
            if (data.node.data.id !== this.currTreeNode.id) {
                if (this.schemaEditor || this.chartsSchemaEditor) {
                    if (this.currTreeNode.id === 'public_schema' || this.currTreeNode.id === 'person_schema' || this.currTreeNode.id === 'org_schema') {
                        this.currTreeNodeChanged(data);
                    }
                    else {
                        /** @type {?} */
                        var compare = true;
                        this.updateCurrSchema(null);
                        if (this.controlType === 'charts' && this.cacheSchemaData[this.currTreeNode.id].schemaValue.chartsData) {
                            this.cacheSchemaData[this.currTreeNode.id].schemaValue.chartsData.series.type = this.cacheSchemaData[this.currTreeNode.id].schemaValue.chartsData.series.type.replace('1', '');
                        }
                        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
                            if (this.controlType === 'charts') {
                                this.currTreeNode.schemaValue.chartsData.series.type = this.currTreeNode.schemaValue.chartsType.series.type;
                                this.cacheSchemaData[this.currTreeNode.id].schemaValue.chartsData.series.type = this.cacheSchemaData[this.currTreeNode.id].schemaValue.chartsType.series.type;
                            }
                            compare = (JSON.stringify(this.currTreeNode.schemaValue) ===
                                JSON.stringify(this.cacheSchemaData[this.currTreeNode.id].schemaValue)
                                && this.currTreeNode.schemaName === this.cacheSchemaData[this.currTreeNode.id].schemaName
                                && this.currTreeNode.schemaType === this.cacheSchemaData[this.currTreeNode.id].schemaType
                                && this.currTreeNode.isDefault === this.cacheSchemaData[this.currTreeNode.id].isDefault);
                            if (false && !compare && this.cacheSchemaData[this.currTreeNode.id].schemaValue.chartsData.series.type !== 'effectScatter') {
                                this.msgService.question(this.localizeService.getValue('ideCmp.schemaManager.message.validate.judgeUpdate'), (/**
                                 * @return {?}
                                 */
                                function () {
                                    self.currTreeNodeChanged(data);
                                }), (/**
                                 * @return {?}
                                 */
                                function () {
                                    _this.schemaTree.selectNode(_this.cacheSchemaData[_this.currTreeNode.id].id);
                                    _this.schemaName = _this.cacheSchemaData[_this.currTreeNode.id].schemaName;
                                    _this.isSchemaType = _this.cacheSchemaData[_this.currTreeNode.id].schemaType;
                                    _this.isDefault = _this.cacheSchemaData[_this.currTreeNode.id].isDefault === 1 ? true : false;
                                }));
                            }
                            else {
                                this.currTreeNodeChanged(data);
                            }
                        }
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    SchemaManagerComponent.prototype.currTreeNodeChanged = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.currTreeNode && (this.currTreeNode.id === 'public_schema' || this.currTreeNode.id === 'person_schema' || this.currTreeNode.id === 'org_schema')) {
            delete this.cacheSchemaData[this.currTreeNode.id];
        }
        this.currTreeNode = data.node.data;
        if (this.currTreeNode.id === 'public_schema') {
            if (this.controlType !== 'charts' && this.colList && this.colList.length) {
                this.currTreeNode.schemaValue.columnOption.colList = this.colList;
            }
            this.isDefault = false;
            this.isSchemaType = 0;
            this.schemaName = this.localizeService.getValue('ideCmp.schemaManager.schemePublic');
            this.schemaId = 'prefab';
        }
        else if (this.currTreeNode.id === 'person_schema') {
            if (this.controlType !== 'charts') {
                this.currTreeNode.schemaValue.columnOption.colList = this.colList;
            }
            this.isDefault = false;
            this.isSchemaType = 1;
            this.schemaName = this.localizeService.getValue('ideCmp.schemaManager.schemePersonal');
            this.schemaId = 'prefab';
        }
        else if (this.currTreeNode.id === 'org_schema') {
            if (this.controlType !== 'charts') {
                this.currTreeNode.schemaValue.columnOption.colList = this.colList;
            }
            this.isDefault = false;
            this.isSchemaType = 2;
            this.schemaName = this.localizeService.getValue('ideCmp.schemaManager.schemeOrg');
            this.schemaId = 'prefab';
        }
        else {
            this.isDefault = this.currTreeNode.isDefault === 1 ? true : false;
            this.isSchemaType = this.currTreeNode.schemaType - 0;
            this.schemaName = this.currTreeNode.schemaName;
            this.schemaId = this.currTreeNode.id;
        }
        this.cacheSchemaData[this.currTreeNode.id] = JSON.parse(JSON.stringify(this.currTreeNode));
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    SchemaManagerComponent.prototype.treeNodeSelected = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.schemaTree.clearSelections();
        if (id) {
            this.schemaTree.selectNode(id);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SchemaManagerComponent.prototype.onResized = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.size.height = event.newHeight || 300;
        this.size.width = event.newWidth;
        if (this.schemaTree) {
            this.schemaTree.resize(this.size);
        }
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleSaveAsClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var self = this;
        this.updateCurrSchema(null, 'save_as');
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData['public_schema']) {
            if (this.operations['QdpModifyPublicSchema'] === false && this.cacheSchemaData['public_schema'].schemaType === 0) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
            /** @type {?} */
            var str = JSON.stringify(this.cacheSchemaData['public_schema']);
            /** @type {?} */
            var schema = JSON.parse(str);
            schema.queryId = this.queryId;
            schema.schemaValue = JSON.stringify(schema.schemaValue);
            if (!schema.schemaName) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.notNull'));
                return;
            }
            else {
                for (var key in this.cacheSchemaData) {
                    if (key !== 'public_schema' && key !== 'person_schema' && key !== 'org_schema' && key !== schema.id && schema.schemaName === this.cacheSchemaData[key].schemaName) {
                        this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.exists'));
                        if (this.farrisPanelComponent && !this.farrisPanelComponent.modelValue.length) {
                            this.farrisPanelComponent.updateModel('schemaInfo');
                        }
                        return;
                    }
                }
            }
            if (this.controlType !== 'charts') {
                if (this.crosstabColumnValidate(this.cacheSchemaData['public_schema'].schemaValue.columnOption.colList)) {
                    this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.crosstabValueDimension'));
                    return;
                }
            }
            if (schema.schemaName && schema.schemaName.length > 100) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.tooLong'));
                return;
            }
            /** @type {?} */
            var textSortColumn = { isText: [] };
            this.getTextColumnSort(schema, textSortColumn);
            if (textSortColumn.isText.length) {
                this.msgService.warning(textSortColumn.isText[0] + ' ' + this.localizeService.getValue('ideCmp.schemaManager.message.validate.textColumnSort'));
                return;
            }
            schema.id = '';
            /** @type {?} */
            var organizationId = this.cache.get(this.tabId + 'organizationId') || '';
            schema.orgId = organizationId;
            this.schemaService.saveSchema({ schema: JSON.stringify(schema), groupType: this.groupType }, this.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.schemaId = '';
                if (data && data.isDefaultSchema && data.isDefaultSchema.id) {
                    _this.schemaId = data.isDefaultSchema.id;
                }
                _this.notifyService['success']((/** @type {?} */ ({
                    title: _this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: _this.localizeService.getValue('ideCmp.schemaManager.message.save.success'), timeout: 3000
                })));
                _this.saveAsSchema.emit();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                self.formErrorService.exception(error.Message, error);
            }));
        }
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleRemoveClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var self = this;
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            if (this.operations['QdpModifyPublicSchema'] === false && this.cacheSchemaData[this.currTreeNode.id].schemaType === 0) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
            if (this.cacheSchemaData[this.currTreeNode.id].isProtected && (this.cacheSchemaData[this.currTreeNode.id].isProtected === 1 || this.cacheSchemaData[this.currTreeNode.id].isProtected === '1')) {
                this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                return;
            }
            if (this.cacheSchemaData[this.currTreeNode.id].id !== 'public_schema' &&
                this.cacheSchemaData[this.currTreeNode.id].id !== 'person_schema' &&
                this.cacheSchemaData[this.currTreeNode.id].id !== 'org_schema') {
                /** @type {?} */
                var organizationId = this.cache.get(this.tabId + 'organizationId') || '';
                this.schemaService.deleteSchema(this.cacheSchemaData[this.currTreeNode.id].id, this.queryId, this.queryRelativeUrl, this.groupType, organizationId).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    data.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        _this.schemaId = '';
                        _this.notifyService['success']((/** @type {?} */ ({
                            title: _this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: _this.localizeService.getValue('ideCmp.schemaManager.message.delete.success'), timeout: 3000
                        })));
                        _this.removeSchema.emit();
                    }));
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    self.formErrorService.exception(error.Message, error);
                }));
            }
            else {
                this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.info.delete'));
            }
        }
        else {
            this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.info.delete'));
        }
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleSaveClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            if (this.operations['QdpModifyPublicSchema'] === false && this.cacheSchemaData[this.currTreeNode.id].schemaType === 0 && this.cacheSchemaData[this.currTreeNode.id].id !== 'public_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'person_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'org_schema') {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
        }
        this.updateCurrSchema(null);
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            if (this.operations['QdpModifyPublicSchema'] === false && this.cacheSchemaData[this.currTreeNode.id].schemaType === 0 && this.cacheSchemaData[this.currTreeNode.id].id !== 'public_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'person_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'org_schema') {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
            if (this.cacheSchemaData[this.currTreeNode.id].isProtected && (this.cacheSchemaData[this.currTreeNode.id].isProtected === 1 || this.cacheSchemaData[this.currTreeNode.id].isProtected === '1')) {
                this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                return;
            }
            /** @type {?} */
            var str = JSON.stringify(this.cacheSchemaData[this.currTreeNode.id]);
            /** @type {?} */
            var schema = JSON.parse(str);
            if (schema.id === 'public_schema' || schema.id === 'person_schema' || schema.id === 'org_schema') {
                schema.id = '';
            }
            schema.queryId = this.queryId;
            schema.schemaValue = JSON.stringify(schema.schemaValue);
            if (!schema.schemaName) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.notNull'));
                return;
            }
            else {
                for (var key in this.cacheSchemaData) {
                    if (key !== 'public_schema' && key !== 'person_schema' && key !== 'org_schema' && key !== schema.id && schema.schemaName === this.cacheSchemaData[key].schemaName) {
                        this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.exists'));
                        if (this.farrisPanelComponent && !this.farrisPanelComponent.modelValue.length) {
                            this.farrisPanelComponent.updateModel('schemaInfo');
                        }
                        return;
                    }
                }
            }
            if (this.controlType !== 'charts') {
                if (this.crosstabColumnValidate(this.cacheSchemaData[this.currTreeNode.id].schemaValue.columnOption.colList)) {
                    this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.crosstabValueDimension'));
                    return;
                }
            }
            if (schema.schemaName && schema.schemaName.length > 100) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.tooLong'));
                return;
            }
            /** @type {?} */
            var textSortColumn = { isText: [] };
            this.getTextColumnSort(schema, textSortColumn);
            if (textSortColumn.isText.length) {
                this.msgService.warning(textSortColumn.isText[0] + ' ' + this.localizeService.getValue('ideCmp.schemaManager.message.validate.textColumnSort'));
                return;
            }
            /** @type {?} */
            var organizationId = this.cache.get(this.tabId + 'organizationId') || '';
            schema.orgId = organizationId;
            this.schemaService.saveSchema({ schema: JSON.stringify(schema), groupType: this.groupType }, this.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data && data.isDefaultSchema && data.isDefaultSchema.id) {
                    _this.schemaId = data.isDefaultSchema.id;
                }
                _this.schemaId = _this.schemaId === 'prefab' ? '' : _this.schemaId;
                _this.notifyService['success']((/** @type {?} */ ({
                    title: _this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: _this.localizeService.getValue('ideCmp.schemaManager.message.save.success'), timeout: 3000
                })));
                _this.treeNodeSelected(_this.schemaId);
                _this.saveSchema.emit();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.formErrorService.exception(error.Message, error);
            }));
        }
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleSaveAndCloseClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            if (this.operations['QdpModifyPublicSchema'] === false && this.cacheSchemaData[this.currTreeNode.id].schemaType === 0 && this.cacheSchemaData[this.currTreeNode.id].id !== 'public_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'person_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'org_schema') {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
        }
        this.updateCurrSchema(null);
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            if (this.operations['QdpModifyPublicSchema'] === false && this.cacheSchemaData[this.currTreeNode.id].schemaType === 0 && this.cacheSchemaData[this.currTreeNode.id].id !== 'public_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'person_schema' && this.cacheSchemaData[this.currTreeNode.id].id !== 'org_schema') {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
            if (this.cacheSchemaData[this.currTreeNode.id].isProtected && (this.cacheSchemaData[this.currTreeNode.id].isProtected === 1 || this.cacheSchemaData[this.currTreeNode.id].isProtected === '1')) {
                this.msgService.info(this.localizeService.getValue('ideCmp.schemaManager.message.validate.isProtected'));
                return;
            }
            /** @type {?} */
            var str = JSON.stringify(this.cacheSchemaData[this.currTreeNode.id]);
            /** @type {?} */
            var schema = JSON.parse(str);
            if (schema.id === 'public_schema' || schema.id === 'person_schema' || schema.id === 'org_schema') {
                schema.id = '';
            }
            schema.queryId = this.queryId;
            schema.schemaValue = JSON.stringify(schema.schemaValue);
            if (!schema.schemaName) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.notNull'));
                return;
            }
            else {
                for (var key in this.cacheSchemaData) {
                    if (key !== 'public_schema' && key !== 'person_schema' && key !== 'org_schema' && key !== schema.id && schema.schemaName === this.cacheSchemaData[key].schemaName) {
                        this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.exists'));
                        if (this.farrisPanelComponent && !this.farrisPanelComponent.modelValue.length) {
                            this.farrisPanelComponent.updateModel('schemaInfo');
                        }
                        return;
                    }
                }
            }
            if (this.controlType !== 'charts') {
                if (this.crosstabColumnValidate(this.cacheSchemaData[this.currTreeNode.id].schemaValue.columnOption.colList)) {
                    this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.crosstabValueDimension'));
                    return;
                }
            }
            if (schema.schemaName && schema.schemaName.length > 100) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.tooLong'));
                return;
            }
            /** @type {?} */
            var textSortColumn = { isText: [] };
            this.getTextColumnSort(schema, textSortColumn);
            if (textSortColumn.isText.length) {
                this.msgService.warning(textSortColumn.isText[0] + ' ' + this.localizeService.getValue('ideCmp.schemaManager.message.validate.textColumnSort'));
                return;
            }
            /** @type {?} */
            var organizationId = this.cache.get(this.tabId + 'organizationId') || '';
            schema.orgId = organizationId;
            this.schemaService.saveSchema({ schema: JSON.stringify(schema), groupType: this.groupType }, this.queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data && data.isDefaultSchema && data.isDefaultSchema.id) {
                    _this.schemaId = data.isDefaultSchema.id;
                }
                _this.schemaId = _this.schemaId === 'prefab' ? '' : _this.schemaId;
                _this.notifyService['success']((/** @type {?} */ ({
                    title: _this.localizeService.getValue('ideCmp.schemaManager.message.info.title'), msg: _this.localizeService.getValue('ideCmp.schemaManager.message.save.success'), timeout: 3000
                })));
                _this.treeNodeSelected(_this.schemaId);
                _this.saveAndCloseSchema.emit();
                if (!_this.currentmode) {
                    _this.farrisDialog.close();
                }
                else {
                    _this.closeModal.emit();
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.formErrorService.exception(error.Message, error);
            }));
        }
    };
    /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @return {?}
     */
    SchemaManagerComponent.prototype.updateCurrSchema = /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @return {?}
     */
    function (options, type) {
        if (this.controlType !== 'charts') {
            this.updateListSchema(options, type);
        }
        else {
            this.updateChartsSchema(options, type);
        }
    };
    /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @return {?}
     */
    SchemaManagerComponent.prototype.updateListSchema = /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @return {?}
     */
    function (options, type) {
        /** @type {?} */
        var option = options;
        if (!option) {
            if (this.schemaEditor) {
                option = this.schemaEditor.getOption();
            }
        }
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            /** @type {?} */
            var sId = this.currTreeNode.id;
            if (type === 'save_as') {
                sId = 'public_schema';
                this.cacheSchemaData[sId] = JSON.parse(JSON.stringify(this.cacheSchemaData[this.currTreeNode.id]));
                this.cacheSchemaData[sId].id = sId;
            }
            if (option && option.titleOption) {
                this.cacheSchemaData[sId].schemaValue.titleOption = option.titleOption;
            }
            if (option && option.columnOption && option.columnOption.length) {
                this.cacheSchemaData[sId].schemaValue.columnOption.colList = option.columnOption;
            }
            if (option && option.styleOption) {
                this.cacheSchemaData[sId].schemaValue.styleOption = option.styleOption;
            }
            if (option && option.otherOption) {
                this.cacheSchemaData[sId].schemaValue.otherOption = option.otherOption;
            }
            if (type !== 'tabChanged') {
                this.cacheSchemaData[sId].schemaName = this.schemaName;
                this.cacheSchemaData[sId].schemaType = this.isSchemaType;
                this.cacheSchemaData[sId].isDefault = this.isDefault ? 1 : 0;
            }
        }
    };
    /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @return {?}
     */
    SchemaManagerComponent.prototype.updateChartsSchema = /**
     * @private
     * @param {?} options
     * @param {?=} type
     * @return {?}
     */
    function (options, type) {
        /** @type {?} */
        var option = options;
        if (!option) {
            if (this.chartsSchemaEditor) {
                option = this.chartsSchemaEditor.getOption();
            }
        }
        if (this.currTreeNode && this.cacheSchemaData && this.cacheSchemaData[this.currTreeNode.id]) {
            /** @type {?} */
            var sId = this.currTreeNode.id;
            if (type === 'save_as') {
                sId = 'public_schema';
                this.cacheSchemaData[sId] = JSON.parse(JSON.stringify(this.cacheSchemaData[this.currTreeNode.id]));
                this.cacheSchemaData[sId].id = sId;
            }
            if (option && option.chartsType) {
                this.cacheSchemaData[sId].schemaValue.chartsType = option.chartsType;
            }
            if (option && option.chartsData) {
                this.cacheSchemaData[sId].schemaValue.chartsData = option.chartsData;
                if (option && option.groupSummarySet) {
                    this.cacheSchemaData[sId].schemaValue['groupSummarySet'] = option.groupSummarySet;
                }
            }
            if (option && option.chartsStyle) {
                this.cacheSchemaData[sId].schemaValue.chartsStyle = option.chartsStyle;
                if (option && option.customOption) {
                    if (option.customOption === 'error') {
                        this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.crosstabValueDimension'));
                        return;
                    }
                }
                this.cacheSchemaData[sId].schemaValue['customOption'] = option.customOption;
            }
            this.cacheSchemaData[sId].schemaValue.chartsData.series.type = this.cacheSchemaData[sId].schemaValue.chartsType.series.type;
            if (this.cacheSchemaData[sId].schemaValue.chartsData.legend) {
                this.cacheSchemaData[sId].schemaValue.chartsStyle.legend.show = this.cacheSchemaData[sId].schemaValue.chartsData.legend.show;
                this.cacheSchemaData[sId].schemaValue.chartsStyle.legend.data = this.cacheSchemaData[sId].schemaValue.chartsData.legend.data;
            }
            if (type !== 'tabChanged') {
                this.cacheSchemaData[sId].schemaName = this.schemaName;
                this.cacheSchemaData[sId].schemaType = this.isSchemaType;
                this.cacheSchemaData[sId].isDefault = this.isDefault ? 1 : 0;
            }
        }
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    SchemaManagerComponent.prototype.crosstabColumnValidate = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        /** @type {?} */
        var flag = false;
        if (this.controlType === 'crosstab') {
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].groupAggre !== 4 && columns[i].totalAggre !== 4) {
                    if ((columns[i].dimension - 0) === 3 && !'int,integer,float,double,decimal,number'.includes(columns[i].type ? columns[i].type.toLowerCase() : '')) {
                        flag = true;
                        break;
                    }
                }
            }
        }
        return flag;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SchemaManagerComponent.prototype.objectCopy = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var str = JSON.stringify(obj);
        return JSON.parse(str);
    };
    /**
     * @return {?}
     */
    SchemaManagerComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} type
     * @param {?} state
     * @return {?}
     */
    SchemaManagerComponent.prototype.handleHover = /**
     * @param {?} type
     * @param {?} state
     * @return {?}
     */
    function (type, state) {
        this.svgSchema = state === 1;
    };
    /**
     * @param {?} schema
     * @param {?} params
     * @return {?}
     */
    SchemaManagerComponent.prototype.getTextColumnSort = /**
     * @param {?} schema
     * @param {?} params
     * @return {?}
     */
    function (schema, params) {
        var _this = this;
        /** @type {?} */
        var schemaValue;
        if (schema && typeof schema.schemaValue === 'string') {
            schemaValue = JSON.parse(schema.schemaValue);
        }
        else {
            schemaValue = schema.schemaValue;
        }
        if (schemaValue.columnOption && schemaValue.columnOption.colList && schemaValue.columnOption.colList.length) {
            schemaValue.columnOption.colList.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                _this.recursiveTextColumnSort(col, null, params);
            }));
        }
    };
    /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    SchemaManagerComponent.prototype.recursiveTextColumnSort = /**
     * @private
     * @param {?} col
     * @param {?} colList
     * @param {?} params
     * @return {?}
     */
    function (col, colList, params) {
        if (colList == null) {
            if (col.childList && col.childList.length) {
                this.recursiveTextColumnSort(null, col.childList, params);
            }
            else {
                if (col.type && col.type.toLowerCase() === 'text' && col.sort > 0) {
                    params.isText.push(col.bindField);
                }
                params.colIndex++;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < colList.length; i++) {
                if (colList[i].childList && colList[i].childList.length) {
                    this.recursiveTextColumnSort(null, colList[i].childList, params);
                }
                else {
                    if (colList[i].type && colList[i].type.toLowerCase() === 'text' && colList[i].sort > 0) {
                        params.isText.push(colList[i].bindField);
                    }
                    params.colIndex++;
                }
            }
        }
    };
    SchemaManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'schema-manager',
                    template: "<div class=\"btn-group\" fDropdown *ngIf=\"!currentmode\">\r\n  <button class=\"btn btn-secondary btn-outline-link btn-icontext f-rt-btn border-0 dropdown-toggle\" type=\"button\"\r\n    id=\"dropdownMenuButtonSchema\" fDropdownToggle (mouseenter)=\"handleHover(0, 0)\" (mouseleave)=\"handleHover(0, 1)\">\r\n    <span class=\"f-icon\" role=\"presentation\">\r\n      <img *ngIf=\"svgSchema\" src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMThweCcgaGVpZ2h0PScxNnB4JyB2aWV3Qm94PScwIDAgMTggMTYnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPmdlc2hpPC90aXRsZT48ZGVzYz5DcmVhdGVkIHdpdGggU2tldGNoLjwvZGVzYz48ZyBpZD0n6aG16Z2iLTEnIHN0cm9rZT0nbm9uZScgc3Ryb2tlLXdpZHRoPScxJyBmaWxsPSdub25lJyBmaWxsLXJ1bGU9J2V2ZW5vZGQnPjxnIGlkPSfkuqTkupLmlrnmoYgxLeW4uOinhOaAgeWkh+S7vScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTE5LjAwMDAwMCwgLTE5NS4wMDAwMDApJz48ZyBpZD0n57yW57uELTE1JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg2LjAwMDAwMCwgMTgyLjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMTYnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDEzLjAwMDAwMCwgMTIuMDAwMDAwKSc+PGcgaWQ9J2ZhbmdhbicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMC4wMDAwMDAsIDEuMDAwMDAwKSc+PHBhdGggZD0nTTIuMzQyODU3MTQsMy4yMTUzODQ2MiBMMTYuMDU3MTQyOSwzLjIxNTM4NDYyIEMxNi4xNDgwNzQyLDMuMjE1Mzg0NjIgMTYuMjM1MjgxMywzLjI1MTA0Mzg1IDE2LjI5OTU3OTUsMy4zMTQ1MTc3IEMxNi4zNjM4Nzc3LDMuMzc3OTkxNTUgMTYuNCwzLjQ2NDA4MDU3IDE2LjQsMy41NTM4NDYxNSBMMTYuNCwxNS4wNjE1Mzg1IEMxNi40LDE1LjI0ODQ2NTYgMTYuMjQ2NDk3NiwxNS40IDE2LjA1NzE0MjksMTUuNCBMMi4zNDI4NTcxNCwxNS40IEMyLjE1MzUwMjM3LDE1LjQgMiwxNS4yNDg0NjU2IDIsMTUuMDYxNTM4NSBMMiwzLjU1Mzg0NjE1IEMyLDMuNDY0MDgwNTcgMi4wMzYxMjIzNCwzLjM3Nzk5MTU1IDIuMTAwNDIwNTMsMy4zMTQ1MTc3IEMyLjE2NDcxODcyLDMuMjUxMDQzODUgMi4yNTE5MjU3NywzLjIxNTM4NDYyIDIuMzQyODU3MTQsMy4yMTUzODQ2MiBaJyBpZD0n6Lev5b6EJyBmaWxsPScjN0E4OUIyJyBvcGFjaXR5PScwLjUnPjwvcGF0aD48cGF0aCBkPSdNMi4zNDI5MDc3MSwxIEw4Ljk4MTYwMSwxIEM5LjEwOTg5ODU2LDEgOS4yMjc0NTAwNywxLjA3MTY1NjYzIDkuMjg2Mjc0NDksMS4xODU2NTcxNCBMMTYuMzYxODMyMiwxNC44OTk5NDI4IEMxNi40MTY2ODUxLDE1LjAwNjI0NjUgMTYuNDEyMTYxLDE1LjEzMzQ0OTEgMTYuMzQ5ODk0NywxNS4yMzU1ODg2IEMxNi4yODc2Mjg0LDE1LjMzNzcyODEgMTYuMTc2NjIyNywxNS40IDE2LjA1Njk4NzMsMTUuNCBMMi4zNDI5MDc3MSwxNS40IEMyLjE1MzUyNTAxLDE1LjQgMiwxNS4yNDY0OTc2IDIsMTUuMDU3MTQyOCBMMiwxLjM0Mjg1NzE0IEMyLDEuMTUzNTAyMzcgMi4xNTM1MjUwMSwxIDIuMzQyOTA3NzEsMSBaJyBpZD0n6Lev5b6EJyBmaWxsPScjOEZBMUNCJz48L3BhdGg+PHBhdGggZD0nTTQuMzY2NDMzNTYsMy4yMTUzODQ2MiBMNy4zODc0MTI2LDMuMjE1Mzg0NjIgQzcuNDg4MTExOSwzLjIxNTM4NDYyIDcuNTM4NDYxNTQsMy4yODkyMzA3NyA3LjUzODQ2MTU0LDMuNDM2OTIzMDYgTDcuNTM4NDYxNTQsNS4yMDkyMzA3OCBDNy41Mzg0NjE1NCw1LjM1NjkyMzA5IDcuNDg4MTExODksNS40MzA3NjkyMyA3LjM4NzQxMjYsNS40MzA3NjkyMyBMNC4zNjY0MzM1Niw1LjQzMDc2OTIzIEM0LjI2NTczNDI1LDUuNDMwNzY5MjMgNC4yMTUzODQ2Miw1LjM1NjkyMzA4IDQuMjE1Mzg0NjIsNS4yMDkyMzA3OCBMNC4yMTUzODQ2MiwzLjQzNjkyMzA2IEM0LjIxNTM4NDYyLDMuMjg5MjMwNzUgNC4yNjU3MzQyNiwzLjIxNTM4NDYyIDQuMzY2NDMzNTYsMy4yMTUzODQ2MiBaJyBpZD0n6Lev5b6EJyBmaWxsPScjRkZGRkZGJyBmaWxsLXJ1bGU9J25vbnplcm8nPjwvcGF0aD48L2c+PC9nPjwvZz48L2c+PC9nPjwvc3ZnPg==\" style=\"width: 16px; height: 16px; display: block;\" />\r\n      <img *ngIf=\"!svgSchema\" src=\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0nMThweCcgaGVpZ2h0PScxN3B4JyB2aWV3Qm94PScwIDAgMTggMTcnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc+PHRpdGxlPmdlc2hpMjwvdGl0bGU+PGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+PGcgaWQ9J+mhtemdoi0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJz48ZyBpZD0n5Zu+5qCH6YCJ5Lit6aKc6Imy5YiH5Zu+5aSH5Lu9JyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtMTkuMDAwMDAwLCAtMTk1LjAwMDAwMCknPjxnIGlkPSfnvJbnu4QtMTUnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDYuMDAwMDAwLCAxODIuMDAwMDAwKSc+PGcgaWQ9J+e8lue7hC0xNicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMTMuMDAwMDAwLCAxMi4wMDAwMDApJz48ZyBpZD0nZmFuZ2FuJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgwLjAwMDAwMCwgMS4wMDAwMDApJz48cGF0aCBkPSdNMi4zNDI4NTcxNCwzLjIxNTM4NDYyIEwxNi4wNTcxNDI5LDMuMjE1Mzg0NjIgQzE2LjE0ODA3NDIsMy4yMTUzODQ2MiAxNi4yMzUyODEzLDMuMjUxMDQzODUgMTYuMjk5NTc5NSwzLjMxNDUxNzcgQzE2LjM2Mzg3NzcsMy4zNzc5OTE1NSAxNi40LDMuNDY0MDgwNTcgMTYuNCwzLjU1Mzg0NjE1IEwxNi40LDE1LjA2MTUzODUgQzE2LjQsMTUuMjQ4NDY1NiAxNi4yNDY0OTc2LDE1LjQgMTYuMDU3MTQyOSwxNS40IEwyLjM0Mjg1NzE0LDE1LjQgQzIuMTUzNTAyMzcsMTUuNCAyLDE1LjI0ODQ2NTYgMiwxNS4wNjE1Mzg1IEwyLDMuNTUzODQ2MTUgQzIsMy40NjQwODA1NyAyLjAzNjEyMjM0LDMuMzc3OTkxNTUgMi4xMDA0MjA1MywzLjMxNDUxNzcgQzIuMTY0NzE4NzIsMy4yNTEwNDM4NSAyLjI1MTkyNTc3LDMuMjE1Mzg0NjIgMi4zNDI4NTcxNCwzLjIxNTM4NDYyIFonIGlkPSfot6/lvoQnIGZpbGw9JyM0Qjk5RkYnIG9wYWNpdHk9JzAuNic+PC9wYXRoPjxwYXRoIGQ9J00yLjM0MjkwNzcxLDEgTDguOTgxNjAxLDEgQzkuMTA5ODk4NTYsMSA5LjIyNzQ1MDA3LDEuMDcxNjU2NjMgOS4yODYyNzQ0OSwxLjE4NTY1NzE0IEwxNi4zNjE4MzIyLDE0Ljg5OTk0MjggQzE2LjQxNjY4NTEsMTUuMDA2MjQ2NSAxNi40MTIxNjEsMTUuMTMzNDQ5MSAxNi4zNDk4OTQ3LDE1LjIzNTU4ODYgQzE2LjI4NzYyODQsMTUuMzM3NzI4MSAxNi4xNzY2MjI3LDE1LjQgMTYuMDU2OTg3MywxNS40IEwyLjM0MjkwNzcxLDE1LjQgQzIuMTUzNTI1MDEsMTUuNCAyLDE1LjI0NjQ5NzYgMiwxNS4wNTcxNDI4IEwyLDEuMzQyODU3MTQgQzIsMS4xNTM1MDIzNyAyLjE1MzUyNTAxLDEgMi4zNDI5MDc3MSwxIFonIGlkPSfot6/lvoQnIGZpbGw9JyM0Qjk5RkYnIG9wYWNpdHk9JzAuOCc+PC9wYXRoPjxwYXRoIGQ9J000LjM2NjQzMzU2LDMuMjE1Mzg0NjIgTDcuMzg3NDEyNiwzLjIxNTM4NDYyIEM3LjQ4ODExMTksMy4yMTUzODQ2MiA3LjUzODQ2MTU0LDMuMjg5MjMwNzcgNy41Mzg0NjE1NCwzLjQzNjkyMzA2IEw3LjUzODQ2MTU0LDUuMjA5MjMwNzggQzcuNTM4NDYxNTQsNS4zNTY5MjMwOSA3LjQ4ODExMTg5LDUuNDMwNzY5MjMgNy4zODc0MTI2LDUuNDMwNzY5MjMgTDQuMzY2NDMzNTYsNS40MzA3NjkyMyBDNC4yNjU3MzQyNSw1LjQzMDc2OTIzIDQuMjE1Mzg0NjIsNS4zNTY5MjMwOCA0LjIxNTM4NDYyLDUuMjA5MjMwNzggTDQuMjE1Mzg0NjIsMy40MzY5MjMwNiBDNC4yMTUzODQ2MiwzLjI4OTIzMDc1IDQuMjY1NzM0MjYsMy4yMTUzODQ2MiA0LjM2NjQzMzU2LDMuMjE1Mzg0NjIgWicgaWQ9J+i3r+W+hCcgZmlsbD0nI0ZGRkZGRicgZmlsbC1ydWxlPSdub256ZXJvJz48L3BhdGg+PC9nPjwvZz48L2c+PC9nPjwvZz48L3N2Zz4=\" style=\"width: 16px; height: 16px; display: block;\" />\r\n    </span>\r\n    <!-- <span *ngIf=\"isMultiForm\" class=\"f-icon f-icon-indent\" role=\"presentation\"></span> -->\r\n    <span *ngIf=\"!isMultiForm\">&nbsp;{{localizeService.getValue('ideCmp.schemaManager.formatSchemaManagerName')}}</span>\r\n  </button>\r\n  <div class=\"dropdown-menu\" fDropdownMenu>\r\n    <a class=\"dropdown-item\" href=\"javascript:void(0);\" (click)=\"handleDialogShow()\">\r\n      <span class=\"k-icon\"></span>{{localizeService.getValue('ideCmp.schemaManager.formatManager')}}</a>\r\n    <div class=\"dropdown-divider\"></div>\r\n    <a *ngIf=\"controlType!='charts' && showPreSchema\" class=\"dropdown-item\" href=\"javascript:void(0);\"\r\n      (click)=\"handleDropDownItemClick('prefab')\">\r\n      <span [class.k-i-check]=\"schemaId=='prefab'\"\r\n        class=\"k-icon\"></span>&nbsp;{{localizeService.getValue('ideCmp.schemaManager.preFormat')}}</a>\r\n    <a *ngFor=\"let item of schemaDropDownData\" class=\"dropdown-item\" href=\"javascript:void(0);\"\r\n      (click)=\"handleDropDownItemClick(item.id)\">\r\n      <span [class.k-i-check]=\"schemaId==item.id\" class=\"k-icon\"></span>&nbsp;{{item.schemaName}}</a>\r\n  </div>\r\n</div>\r\n\r\n<farris-dialog #farrisDialog [title]=\"localizeService.getValue('ideCmp.schemaManager.formatSchemaManagerName')\"\r\n  [showButtons]=\"false\" [width]=\"1258\" [height]=\"630\" [beforeClose]=\"handlebeforeClose\" *ngIf=\"!currentmode\">\r\n  <div class=\"farris-main-area flex-column bg-white\">\r\n    <div class=\"d-flex flex-row flex-fill farris-overflow-hidden\">\r\n      <div class=\"col-3 p-0 m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n        <farris-treetable #schemaTree [data]=\"schemaTreeData\" [idField]=\"'id'\" [showCheckAll]=\"false\"\r\n          [resizableColumns]=\"true\" [showHeader]=\"false\" [striped]=\"false\" [fixedHeader]=\"true\" [width]=\"size.width\"\r\n          [height]=\"size.height\" (nodeSelected)=\"handleTreeNodeSelected($event)\">\r\n          <tt-column [field]=\"'schemaName'\" [width]=\"100\" [align]=\"'left'\" [hAlign]=\"'center'\"></tt-column>\r\n        </farris-treetable>\r\n      </div>\r\n      <div class=\"d-flex flex-column flex-fill mt-1 mb-1 mr-1\">\r\n        <farris-panel class=\"w-100\" defaultExpand=\"defaultExpand\">\r\n          <farris-panel-item [title]=\"localizeService.getValue('ideCmp.schemaManager.basicInfoName')\"\r\n            [value]=\"'schemaInfo'\">\r\n            <ng-template #contentTempl>\r\n              <div class=\"farris-header p-1\">\r\n                <div class=\"form-row\">\r\n                  <div class=\"col-8 col-md-8 col-lg-8\">\r\n                    <div class=\"farris-group-wrap form-inline farris-form-inline m-1\">\r\n                      <div class=\"form-group farris-group-wrap\">\r\n                        <label class=\"col-form-label\" style=\"min-width: 0;\" for=\"schema_name_id\">\r\n                          <span\r\n                            class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.schemeName')}}:</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                          <input-group id=\"schema_name_id\" [(ngModel)]=\"schemaName\"></input-group>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <div class=\"col-12 col-md-12 col-lg-12\">\r\n                    <div class=\"farris-group-wrap form-inline farris-form-inline m-1\">\r\n                      <div class=\"form-group farris-group-wrap\">\r\n                        <label class=\"col-form-label\" style=\"min-width: 0;\" for=\"range_type_id\">\r\n                          <span\r\n                            class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.schemeType')}}:</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n                          <div class=\"custom-control custom-radio mb-0\">\r\n                            <input type=\"radio\" id=\"{{publicSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                              [checked]=\"isSchemaType==0\">\r\n                            <label class=\"custom-control-label\" for=\"{{publicSchema}}\"\r\n                              (click)=\"handleSchemaTypeSelect(0)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypePublic')}}</label>\r\n                          </div>\r\n                          <div class=\"custom-control custom-radio mb-0\">\r\n                            <input type=\"radio\" id=\"{{orgSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                              [checked]=\"isSchemaType==2\">\r\n                            <label class=\"custom-control-label\" for=\"{{orgSchema}}\"\r\n                              (click)=\"handleSchemaTypeSelect(2)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypeOrg')}}</label>\r\n                          </div>\r\n                          <div class=\"custom-control custom-radio mb-0\">\r\n                            <input type=\"radio\" id=\"{{personSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                              [checked]=\"isSchemaType==1\">\r\n                            <label class=\"custom-control-label\" for=\"{{personSchema}}\"\r\n                              (click)=\"handleSchemaTypeSelect(1)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypePersonal')}}</label>\r\n                          </div>\r\n                          <div class=\"custom-control custom-checkbox mb-0\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"{{defaultSchema}}\"\r\n                              [(ngModel)]=\"isDefault\">\r\n                            <label class=\"custom-control-label\"\r\n                              for=\"{{defaultSchema}}\">{{localizeService.getValue('ideCmp.schemaManager.schemeDefault')}}</label>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n          </farris-panel-item>\r\n        </farris-panel>\r\n        <div class=\"farris-form d-flex flex-fill flex-column farris-overflow-hidden\">\r\n          <schema-editor *ngIf=\"controlType!='charts'\" class=\"d-flex flex-fill flex-column mt-1\"\r\n            [currSchema]=\"currTreeNode\" [colList]=\"colList\" [controlType]=\"controlType\"\r\n            (tabsSelectChange)=\"handleTabsSelectChange($event)\">\r\n          </schema-editor>\r\n          <charts-schema-editor *ngIf=\"controlType=='charts'\" class=\"d-flex flex-fill flex-column mt-1\"\r\n            [currSchema]=\"currTreeNode\" [colList]=\"colList\" [controlType]=\"controlType\"\r\n            (tabsSelectChange)=\"handleTabsSelectChange($event)\"></charts-schema-editor>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <div class=\"btn-toolbar btn-group-lg\" id=\"page-header-toolbar\">\r\n        <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleSaveClick()\">\r\n          {{localizeService.getValue('ideCmp.schemaManager.btnSave')}}</button>\r\n        <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleSaveAsClick()\">\r\n          {{localizeService.getValue('ideCmp.schemaManager.btnSaveAs')}}</button>\r\n        <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleRemoveClick()\">\r\n          {{localizeService.getValue('ideCmp.schemaManager.btnDelete')}}</button>\r\n        <button class=\"btn btn-secondary\" id=\"button-edit\" (click)=\"handleSaveAndCloseClick()\">\r\n          {{localizeService.getValue('ideCmp.schemaManager.btnSaveAsClose')}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<div class=\"farris-main-area flex-column bg-white\" *ngIf=\"currentmode\">\r\n  <div class=\"d-flex flex-row flex-fill farris-overflow-hidden\">\r\n    <div class=\"col-3 p-0 m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n      <farris-treetable #schemaTree [data]=\"schemaTreeData\" [idField]=\"'id'\" [showCheckAll]=\"false\"\r\n        [resizableColumns]=\"true\" [fit]=\"true\" [showHeader]=\"false\" [striped]=\"false\" [fixedHeader]=\"true\"\r\n        [width]=\"size.width\" [height]=\"size.height\" (nodeSelected)=\"handleTreeNodeSelected($event)\">\r\n        <tt-column [field]=\"'schemaName'\" [width]=\"100\" [align]=\"'left'\" [hAlign]=\"'center'\"></tt-column>\r\n      </farris-treetable>\r\n    </div>\r\n    <div class=\"d-flex flex-column flex-fill mt-1 mb-1 mr-1\">\r\n      <farris-panel class=\"w-100\" defaultExpand=\"defaultExpand\">\r\n        <farris-panel-item [title]=\"localizeService.getValue('ideCmp.schemaManager.basicInfoName')\"\r\n          [value]=\"'schemaInfo'\">\r\n          <ng-template #contentTempl>\r\n            <div class=\"farris-header p-1\">\r\n              <div class=\"form-row\">\r\n                <div class=\"col-8 col-md-8 col-lg-8\">\r\n                  <div class=\"farris-group-wrap form-inline farris-form-inline m-1\">\r\n                    <div class=\"form-group farris-group-wrap\">\r\n                      <label class=\"col-form-label\" style=\"min-width: 0;\" for=\"schema_name_id\">\r\n                        <span\r\n                          class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.schemeName')}}:</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <input-group id=\"schema_name_id\" [(ngModel)]=\"schemaName\"></input-group>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-row\">\r\n                <div class=\"col-12 col-md-12 col-lg-12\">\r\n                  <div class=\"farris-group-wrap form-inline farris-form-inline m-1\">\r\n                    <div class=\"form-group farris-group-wrap\">\r\n                      <label class=\"col-form-label\" style=\"min-width: 0;\" for=\"range_type_id\">\r\n                        <span\r\n                          class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.schemeType')}}:</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n                        <div class=\"custom-control custom-radio mb-0\">\r\n                          <input type=\"radio\" id=\"{{publicSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                            [checked]=\"isSchemaType==0\">\r\n                          <label class=\"custom-control-label\" for=\"{{publicSchema}}\"\r\n                            (click)=\"handleSchemaTypeSelect(0)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypePublic')}}</label>\r\n                        </div>\r\n                        <div class=\"custom-control custom-radio mb-0\">\r\n                          <input type=\"radio\" id=\"{{orgSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                            [checked]=\"isSchemaType==2\">\r\n                          <label class=\"custom-control-label\" for=\"{{orgSchema}}\"\r\n                            (click)=\"handleSchemaTypeSelect(2)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypeOrg')}}</label>\r\n                        </div>\r\n                        <div class=\"custom-control custom-radio mb-0\">\r\n                          <input type=\"radio\" id=\"{{personSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                            [checked]=\"isSchemaType==1\">\r\n                          <label class=\"custom-control-label\" for=\"{{personSchema}}\"\r\n                            (click)=\"handleSchemaTypeSelect(1)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypePersonal')}}</label>\r\n                        </div>\r\n                        <div class=\"custom-control custom-checkbox mb-0\">\r\n                          <input type=\"checkbox\" class=\"custom-control-input\" id=\"{{defaultSchema}}\"\r\n                            [(ngModel)]=\"isDefault\">\r\n                          <label class=\"custom-control-label\"\r\n                            for=\"{{defaultSchema}}\">{{localizeService.getValue('ideCmp.schemaManager.schemeDefault')}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n      </farris-panel>\r\n      <div class=\"farris-form d-flex flex-fill flex-column farris-overflow-hidden\">\r\n        <schema-editor *ngIf=\"controlType!='charts'\" class=\"d-flex flex-fill flex-column mt-1\"\r\n          [currSchema]=\"currTreeNode\" [colList]=\"colList\" [controlType]=\"controlType\"\r\n          (tabsSelectChange)=\"handleTabsSelectChange($event)\">\r\n        </schema-editor>\r\n        <charts-schema-editor *ngIf=\"controlType=='charts'\" class=\"d-flex flex-fill flex-column mt-1\"\r\n          [currSchema]=\"currTreeNode\" [colList]=\"colList\" [controlType]=\"controlType\"\r\n          (tabsSelectChange)=\"handleTabsSelectChange($event)\"></charts-schema-editor>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <div class=\"btn-toolbar btn-group-lg\" id=\"page-header-toolbar\">\r\n      <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleSaveClick()\">\r\n        {{localizeService.getValue('ideCmp.schemaManager.btnSave')}}</button>\r\n      <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleSaveAsClick()\">\r\n        {{localizeService.getValue('ideCmp.schemaManager.btnSaveAs')}}</button>\r\n      <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleRemoveClick()\">\r\n        {{localizeService.getValue('ideCmp.schemaManager.btnDelete')}}</button>\r\n      <button class=\"btn btn-secondary\" id=\"button-edit\" (click)=\"handleSaveAndCloseClick()\" *ngIf=\"!currentmode\">\r\n        {{localizeService.getValue('ideCmp.schemaManager.btnSaveAsClose')}}</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #enumFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary\"\r\n    (click)=\"clickCancel()\">{{localizeService.getValue('ideCmp.schemaManager.btnCancel')}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\"\r\n    (click)=\"handleSaveAndCloseClick()\">{{localizeService.getValue('ideCmp.schemaManager.btnOK')}}</button>\r\n</ng-template>\r\n",
                    styles: [".schema-position{position:absolute;top:0;left:0;right:0}"]
                }] }
    ];
    /** @nocollapse */
    SchemaManagerComponent.ctorParameters = function () { return [
        { type: SchemaService },
        { type: MessagerService },
        { type: NotifyService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    SchemaManagerComponent.propDecorators = {
        queryId: [{ type: Input }],
        groupType: [{ type: Input }],
        schemaInfo: [{ type: Input }],
        colList: [{ type: Input }],
        controlType: [{ type: Input }],
        showPreSchema: [{ type: Input }],
        editorParams: [{ type: Input }],
        isMultiForm: [{ type: Input }],
        schemaTree: [{ type: ViewChild, args: ['schemaTree',] }],
        modalFooter: [{ type: ViewChild, args: ['enumFooter',] }],
        schemaEditor: [{ type: ViewChild, args: [SchemaEditorComponent,] }],
        chartsSchemaEditor: [{ type: ViewChild, args: [ChartsSchemaEditorComponent,] }],
        farrisPanelComponent: [{ type: ViewChild, args: [FarrisPanelComponent,] }],
        farrisDialog: [{ type: ViewChild, args: ['farrisDialog',] }],
        schemaSelected: [{ type: Output }],
        saveSchema: [{ type: Output }],
        saveAsSchema: [{ type: Output }],
        removeSchema: [{ type: Output }],
        saveAndCloseSchema: [{ type: Output }],
        dialogBeforeClose: [{ type: Output }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        queryRelativeUrl: [{ type: Input }]
    };
    return SchemaManagerComponent;
}());
export { SchemaManagerComponent };
if (false) {
    /** @type {?} */
    SchemaManagerComponent.prototype.queryId;
    /** @type {?} */
    SchemaManagerComponent.prototype.groupType;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaInfo;
    /** @type {?} */
    SchemaManagerComponent.prototype.colList;
    /** @type {?} */
    SchemaManagerComponent.prototype.controlType;
    /** @type {?} */
    SchemaManagerComponent.prototype.showPreSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.editorParams;
    /** @type {?} */
    SchemaManagerComponent.prototype.isMultiForm;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaTree;
    /** @type {?} */
    SchemaManagerComponent.prototype.modalFooter;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaEditor;
    /** @type {?} */
    SchemaManagerComponent.prototype.chartsSchemaEditor;
    /** @type {?} */
    SchemaManagerComponent.prototype.farrisPanelComponent;
    /** @type {?} */
    SchemaManagerComponent.prototype.farrisDialog;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaSelected;
    /** @type {?} */
    SchemaManagerComponent.prototype.saveSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.saveAsSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.removeSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.saveAndCloseSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.dialogBeforeClose;
    /** @type {?} */
    SchemaManagerComponent.prototype.closeModal;
    /** @type {?} */
    SchemaManagerComponent.prototype.submitModal;
    /** @type {?} */
    SchemaManagerComponent.prototype.defaultExpand;
    /** @type {?} */
    SchemaManagerComponent.prototype.inputCollapse;
    /** @type {?} */
    SchemaManagerComponent.prototype.inputExpand;
    /** @type {?} */
    SchemaManagerComponent.prototype.size;
    /** @type {?} */
    SchemaManagerComponent.prototype.isShow;
    /** @type {?} */
    SchemaManagerComponent.prototype.queryRelativeUrl;
    /** @type {?} */
    SchemaManagerComponent.prototype.personSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.orgSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.publicSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.defaultSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaTreeData;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaDropDownData;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaId;
    /** @type {?} */
    SchemaManagerComponent.prototype.selectedSchemaId;
    /** @type {?} */
    SchemaManagerComponent.prototype.isSchemaType;
    /** @type {?} */
    SchemaManagerComponent.prototype.isDefault;
    /** @type {?} */
    SchemaManagerComponent.prototype.currTreeNode;
    /** @type {?} */
    SchemaManagerComponent.prototype.schemaName;
    /** @type {?} */
    SchemaManagerComponent.prototype.currentmode;
    /** @type {?} */
    SchemaManagerComponent.prototype.qoManagerCode;
    /** @type {?} */
    SchemaManagerComponent.prototype.modalConfig;
    /** @type {?} */
    SchemaManagerComponent.prototype.chartsOption;
    /** @type {?} */
    SchemaManagerComponent.prototype.cacheSchemaData;
    /** @type {?} */
    SchemaManagerComponent.prototype.operations;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerComponent.prototype.subscriptions;
    /** @type {?} */
    SchemaManagerComponent.prototype.localizeService;
    /** @type {?} */
    SchemaManagerComponent.prototype.svgSchema;
    /** @type {?} */
    SchemaManagerComponent.prototype.formErrorService;
    /** @type {?} */
    SchemaManagerComponent.prototype.cache;
    /** @type {?} */
    SchemaManagerComponent.prototype.tabId;
    /** @type {?} */
    SchemaManagerComponent.prototype.handlebeforeClose;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerComponent.prototype.schemaService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,