/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Injector } from '@angular/core';
import { LocalizeService } from '@qdp/localize';
import { LcpService } from '@qdp/common';
var TitleEditorComponent = /** @class */ (function () {
    function TitleEditorComponent(injector) {
        this.injector = injector;
        this.columnSizeData = [
            60, 90, 160, 80, 80
        ];
        this.subTitleType = [
            { label: '副标题', value: 0 },
            { label: '表尾', value: 1 }
        ];
        this.subTitleAlign = [
            { label: '居左', value: 0 },
            { label: '居中', value: 1 },
            { label: '居右', value: 2 }
        ];
        this.newSubTitle = {
            type: 0,
            text: '',
            level: 1,
            align: 0
        };
        this.alignData = [];
        this.currentSubTitle = null;
        this.localizeService = this.injector.get(LocalizeService);
        this.lcpService = this.injector.get(LcpService);
        this.subTitleType = this.localizeService.getValue('ideCmp.schemaManager.titleOption.subTitleData');
        this.subTitleAlign = this.localizeService.getValue('ideCmp.schemaManager.titleOption.subTitleAlign');
    }
    /**
     * @return {?}
     */
    TitleEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        if (!this.subscriptions) {
            this.subscriptions = [];
        }
        this.subscriptions.push(self.lcpService.variablesChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                var _loop_1 = function (key) {
                    // if (key === 'securityLevel') { continue; }
                    if (self.alignData.findIndex((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) { return x.name.replace(x.name.substring(x.name.indexOf('[')), "").replace(/ /g, "") === key; })) < 0) {
                        self.alignData.push({ name: key + '   [' + data[key] + ']', value: key });
                    }
                };
                for (var key in data) {
                    _loop_1(key);
                }
            }
        })));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TitleEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var changeName in changes) {
            /** @type {?} */
            var newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                switch (changeName) {
                    case 'currSchema':
                        if (newValue.schemaValue && newValue.schemaValue.titleOption) {
                            /** @type {?} */
                            var str = JSON.stringify(newValue.schemaValue.titleOption);
                            this.titleOption = JSON.parse(str);
                            this.title = this.titleOption.title;
                            this.subTitles = this.titleOption.subTitles || [];
                        }
                        break;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    TitleEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.subscriptions && this.subscriptions.length) {
            try {
                for (var _b = tslib_1.__values(this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var subscription = _c.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    TitleEditorComponent.prototype.insertSubTitle = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var _newSubTitle = Object.assign({}, this.newSubTitle);
        // if (index === 0) {
        //   this.subTitles.unshift(_newSubTitle);
        // } else {
        this.subTitles.splice(index + 1, 0, _newSubTitle);
        // }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    TitleEditorComponent.prototype.removeSubTitle = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.subTitles.splice(index, 1);
        if (this.currentSubTitle) {
            if (index === this.currentSubTitle.index) {
                this.currentSubTitle = null;
            }
        }
    };
    /**
     * @return {?}
     */
    TitleEditorComponent.prototype.onAddSubTitle = /**
     * @return {?}
     */
    function () {
        this.subTitles = tslib_1.__spread(this.subTitles);
        this.subTitles.push(Object.assign({}, this.newSubTitle));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TitleEditorComponent.prototype.selected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentSubTitle = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TitleEditorComponent.prototype.isSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentSubTitle) {
            return this.currentSubTitle.index === $event;
        }
        return false;
    };
    /**
     * @return {?}
     */
    TitleEditorComponent.prototype.getTitleOption = /**
     * @return {?}
     */
    function () {
        if (this.titleOption) {
            this.titleOption.title = this.title;
            this.titleOption.subTitles = this.subTitles;
        }
        return this.titleOption;
    };
    TitleEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'title-editor',
                    template: "<div class=\"d-flex flex-column flex-fill position-relative h-100 m-0\">\r\n  <div class=\"farris-group-wrap form-inline farris-form-inline m-2\">\r\n    <div class=\"form-group farris-group-wrap mb-0\">\r\n      <label class=\"mr-2\" for=\"titleID\">\r\n        <span class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.titleOption.title')}}:</span>\r\n      </label>\r\n      <div class=\"farris-input-wrap\">\r\n        <input-group  id=\"titleID\" [(ngModel)]=\"title\" ></input-group>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"table-header\">\r\n    <table class=\"table table-bordered mb-0\">\r\n      <colgroup>\r\n        <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n      </colgroup>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            <button type=\"button\" (click)=\"onAddSubTitle()\" class=\"btn btn-link\" style=\"color: black;\"><span\r\n                class=\"f-icon f-icon-plus\"></span></button>\r\n          </th>\r\n          <th><b>{{localizeService.getValue('ideCmp.schemaManager.titleOption.subTitleColumnName')[0]}}</b></th>\r\n          <th><b>{{localizeService.getValue('ideCmp.schemaManager.titleOption.subTitleColumnName')[1]}}</b></th>\r\n          <th><b>{{localizeService.getValue('ideCmp.schemaManager.titleOption.subTitleColumnName')[2]}}</b></th>\r\n          <th><b>{{localizeService.getValue('ideCmp.schemaManager.titleOption.subTitleColumnName')[3]}}</b></th>\r\n        </tr>\r\n      </thead>\r\n    </table>\r\n  </div>\r\n  <perfect-scrollbar [config]=\"{}\" [style.height.px]=\"205\">\r\n    <div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n      <table class=\"table table-bordered\">\r\n        <colgroup>\r\n          <col *ngFor=\"let s of columnSizeData\" [style.width.px]=\"s\">\r\n        </colgroup>\r\n        <tbody>\r\n          <tr *ngFor=\"let sub of subTitles; let index=index;\" (click)=\"selected({'index':index, 'sub': sub})\"\r\n            [class.selected]=\"isSelected(index)\">\r\n            <td>\r\n              <button type=\"button\" (click)=\"insertSubTitle(index)\" class=\"btn btn-link\" style=\"color: black;\"><span\r\n                  class=\"f-icon f-icon-plus\"></span></button>\r\n              <button type=\"button\" (click)=\"removeSubTitle(index)\" class=\"btn btn-link\" style=\"color: black;\"><span\r\n                  class=\"f-icon f-icon-minus\"></span></button>\r\n            </td>\r\n            <td>\r\n              <select class=\"form-control filter-select\" [(ngModel)]=\"sub.type\" name=\"subType\">\r\n                <option *ngFor=\"let item of subTitleType\" [value]=\"item.value\">{{ item.label }}</option>\r\n              </select>\r\n            </td>\r\n            <td>\r\n              <farris-combo-list [(ngModel)]=\"sub.text\" [data]=\"alignData\" [textField]=\"'name'\" [idField]=\"'value'\" [nosearch]=\"true\" [editable]=\"true\"></farris-combo-list>\r\n              <!-- <input-group type=\"text\" style=\"width:100%\" placeholder=\"\" name=\"value\"\r\n                [(ngModel)]=\"sub.text\"></input-group> -->\r\n            </td>\r\n            <td>\r\n              <farris-number-spinner [(ngModel)]=\"sub.level\" [min]=\"1\" [step]=\"1\"></farris-number-spinner>\r\n            </td>\r\n            <td>\r\n              <select class=\"form-control filter-select\" [(ngModel)]=\"sub.align\" name=\"subAlign\">\r\n                <option *ngFor=\"let item of subTitleAlign\" [value]=\"item.value\">{{ item.label }}</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </perfect-scrollbar>\r\n</div>\r\n",
                    styles: [".filter-select{width:100%;padding-left:0;padding-right:0}.selected{background:#c2e4ff}:host{position:absolute;top:0;left:0;right:0;bottom:0}"]
                }] }
    ];
    /** @nocollapse */
    TitleEditorComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    TitleEditorComponent.propDecorators = {
        currSchema: [{ type: Input }]
    };
    return TitleEditorComponent;
}());
export { TitleEditorComponent };
if (false) {
    /** @type {?} */
    TitleEditorComponent.prototype.currSchema;
    /** @type {?} */
    TitleEditorComponent.prototype.titleOption;
    /** @type {?} */
    TitleEditorComponent.prototype.title;
    /** @type {?} */
    TitleEditorComponent.prototype.subTitles;
    /** @type {?} */
    TitleEditorComponent.prototype.columnSizeData;
    /** @type {?} */
    TitleEditorComponent.prototype.subTitleType;
    /** @type {?} */
    TitleEditorComponent.prototype.subTitleAlign;
    /**
     * @type {?}
     * @private
     */
    TitleEditorComponent.prototype.newSubTitle;
    /** @type {?} */
    TitleEditorComponent.prototype.localizeService;
    /** @type {?} */
    TitleEditorComponent.prototype.alignData;
    /** @type {?} */
    TitleEditorComponent.prototype.currentSubTitle;
    /** @type {?} */
    TitleEditorComponent.prototype.lcpService;
    /**
     * @type {?}
     * @private
     */
    TitleEditorComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    TitleEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,