import { OnInit, EventEmitter, OnChanges, SimpleChanges, TemplateRef, OnDestroy, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { DialogComponent } from '@farris/ui-dialog';
import { TreeTableComponent } from '@farris/ui-treetable';
import { MessagerService } from '@farris/ui-messager';
import { FarrisPanelComponent } from '@farris/ui-panel';
import { NotifyService } from '@farris/ui-notify';
import { SchemaService } from '../../service/schema/schema.service';
import { SchemaEditorComponent } from '../schema-editor/schema-editor.component';
import { ChartsSchemaEditorComponent } from '../charts-schema-editor/charts-schema-editor.component';
import { LocalizeService } from '@qdp/localize';
import { CacheService } from '@ecp-caf/caf-common';
export declare class SchemaManagerComponent implements OnInit, OnChanges, OnDestroy {
    private schemaService;
    private msgService;
    private notifyService;
    private injector;
    queryId: any;
    groupType: any;
    schemaInfo: any;
    colList: any;
    controlType: string;
    showPreSchema: string;
    editorParams: any;
    isMultiForm: any;
    schemaTree: TreeTableComponent;
    modalFooter: TemplateRef<any>;
    schemaEditor: SchemaEditorComponent;
    chartsSchemaEditor: ChartsSchemaEditorComponent;
    farrisPanelComponent: FarrisPanelComponent;
    farrisDialog: DialogComponent;
    schemaSelected: EventEmitter<any>;
    saveSchema: EventEmitter<any>;
    saveAsSchema: EventEmitter<any>;
    removeSchema: EventEmitter<any>;
    saveAndCloseSchema: EventEmitter<any>;
    dialogBeforeClose: EventEmitter<any>;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    defaultExpand: boolean;
    inputCollapse: string;
    inputExpand: string;
    size: any;
    isShow: any;
    queryRelativeUrl: any;
    personSchema: string;
    orgSchema: string;
    publicSchema: string;
    defaultSchema: string;
    schemaTreeData: any;
    schemaDropDownData: any[];
    schemaId: any;
    selectedSchemaId: any;
    isSchemaType: number;
    isDefault: boolean;
    currTreeNode: any;
    schemaName: string;
    currentmode: boolean;
    qoManagerCode: string;
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    chartsOption: any;
    cacheSchemaData: any;
    operations: any;
    private subscriptions;
    localizeService: LocalizeService;
    svgSchema: boolean;
    formErrorService: any;
    cache: CacheService;
    tabId: any;
    constructor(schemaService: SchemaService, msgService: MessagerService, notifyService: NotifyService, injector: Injector);
    ngOnInit(): void;
    initSelectedSchemaId(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private colListChange;
    private initColumns;
    private schemaInfoChange;
    private schemaManagerInitForIDE;
    private controlInit;
    private validateSchemaId;
    handleDialogShow(): void;
    handleDropDownItemClick(id: any): void;
    handleTabsSelectChange(option: any): void;
    handleSchemaTypeSelect(value: any): void;
    handleTreeNodeSelected(data: any): void;
    private currTreeNodeChanged;
    private treeNodeSelected;
    onResized(event: any): void;
    handleSaveAsClick(): void;
    handleRemoveClick(): void;
    handleSaveClick(): void;
    handleSaveAndCloseClick(): void;
    handlebeforeClose: () => Observable<any>;
    private updateCurrSchema;
    private updateListSchema;
    private updateChartsSchema;
    private crosstabColumnValidate;
    private objectCopy;
    clickCancel(): void;
    handleHover(type: any, state: any): void;
    getTextColumnSort(schema: any, params: any): void;
    private recursiveTextColumnSort;
}
