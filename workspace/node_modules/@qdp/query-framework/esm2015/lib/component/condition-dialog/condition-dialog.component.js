/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, ViewChild, Input, Output, EventEmitter, QueryList, ContentChildren } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { LocalizeService } from '@qdp/localize';
import { Repository } from '@farris/devkit';
import { SchemaService } from '@qdp/ide-cmp';
import { NotifyService } from '@farris/ui-notify';
import { ConditionSchemaService } from '@qdp/condition-schema';
import { ConditionManagerDialogComponent } from '../condition-manager-dialog/condition-manager-dialog.component';
import { SaveasSchemaDialogComponent } from '../saveas-schema-dialog/saveas-schema-dialog.component';
import { of, Subject } from 'rxjs';
import { CacheService } from '@ecp-caf/caf-common';
import { LcpService, QDPCacheUtil, RtfServices, EventBus } from '@qdp/common';
import { FinishLoadService } from '@qdp/condition-schema';
import { ConditionDialogTabComponent } from '../condition-dialog-tab/condition-dialog-tab.component';
import { FormErrorService } from '@farris/command-services';
export class ConditionDialogComponent {
    /**
     * @param {?} injector
     * @param {?} conditionService
     * @param {?} repository
     * @param {?} cacheService
     * @param {?} finishLoasService
     */
    constructor(injector, conditionService, repository, cacheService, finishLoasService) {
        this.injector = injector;
        this.conditionService = conditionService;
        this.repository = repository;
        this.cacheService = cacheService;
        this.finishLoasService = finishLoasService;
        // OnChanges,
        this.schemaId = '';
        this.showFilterExpression = true;
        this.tabIndex = 0;
        this.queryEvent = new EventEmitter();
        this.dialogInitEvent = new EventEmitter();
        this.idChanged = new Subject();
        this.menuShow = false;
        this.defaultSchemaName = '条件方案';
        this.publicList = [];
        this.personalList = [];
        this.controlIndexChanged = 0;
        this.subscriptions = [];
        this.closeType = '';
        this.propertyList = [];
        this.filterExpressionString = '';
        this.beforeOpen = (/**
         * @return {?}
         */
        () => true);
        this.handlebeforeClose = (/**
         * @return {?}
         */
        () => {
            // const self = this;
            // if (this.closeType !== 'query') {
            //   if (self.repository.entityCollection.getAllEntities() && self.repository.entityCollection.getAllEntities()[0]) {
            //     const obj = {
            //       id: self.repository.entityCollection.getAllEntities()[0]['id']
            //     };
            //     self.repository.entityCollection.getAllEntities()[0].load(obj);
            //     (self.repository as BefRepository<Entity>).entityManager.clearAllEntityChanges();
            //     if (this.advanceFilterTab) {
            //       this.advanceFilterTab.filterExpressionString = '';
            //     }
            //   }
            // }
            // this.closeType = '';
            return of(true);
        });
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.notifyService = this.injector.get(NotifyService);
            this.defaultSchemaName = this.localizeService.getValue('queryFramework.ispreName');
            this.formErrorService = this.injector.get(FormErrorService);
            this.schemaService = this.injector.get(SchemaService);
            this.lcpService = this.injector.get(LcpService);
        }
    }
    /**
     * @return {?}
     */
    getConditionTabs() {
        try {
            if (this.conditionTabs && this.conditionTabs.length) {
                return this.conditionTabs;
            }
            else if (QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs') && QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs').length) {
                return QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs');
            }
        }
        catch (e) {
            return this.conditionTabs;
        }
    }
    /**
     * @return {?}
     */
    get Id() {
        return this.schemaId;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set Id(value) {
        this.schemaId = value;
        this.idChanged.next(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.tabId = RtfServices.getTabId(this.queryId);
        this.queryCount = 1;
        this.conditionDialogInit();
        if (!this.beforeQuery) {
            this.beforeQuery = (/**
             * @param {?} params
             * @return {?}
             */
            (params) => of(true));
        }
        QDPCacheUtil.setCache(this.tabId + 'advanceTemplate-condition-dialog', this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        EventBus.dispatch(this.tabId + 'advanceTemplate-condition-dialog-dialogInitEvent', {});
        this.dialogInitEvent.emit(true);
    }
    /**
     * @return {?}
     */
    conditionDialogInit() {
        /** @type {?} */
        const self = this;
        this.subscriptions.push(self.conditionService.getSchemaList(self.queryId, '', '').subscribe());
        this.subscriptions.push(self.conditionService.schemaListChange.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const data = result.schemaInfo;
            if (data && data[self.queryId]) {
                self.publicList = [];
                self.personalList = [];
                for (const key in data[self.queryId]) {
                    if (data[self.queryId][key].schemaType === 0) {
                        self.publicList.push(data[self.queryId][key]);
                    }
                    else {
                        self.personalList.push(data[self.queryId][key]);
                    }
                }
                /** @type {?} */
                let flag = false;
                if (self.schemaId) {
                    /** @type {?} */
                    let index = self.publicList.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => item.id === self.schemaId));
                    if (index >= 0) {
                        flag = true;
                        self.currentSchema = self.publicList[index];
                        self.initCondition(self.currentSchema);
                    }
                    index = self.personalList.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => item.id === self.schemaId));
                    if (index >= 0) {
                        flag = true;
                        self.currentSchema = self.personalList[index];
                        self.initCondition(self.currentSchema);
                    }
                }
                if (!flag && self.conditionService.isDefaultSchema && self.conditionService.isDefaultSchema[self.queryId] && self.conditionService.isDefaultSchema[self.queryId].id) {
                    self.currentSchema = self.conditionService.isDefaultSchema[self.queryId];
                    self.schemaId = self.conditionService.isDefaultSchema[self.queryId].id;
                    self.defaultSchemaName = self.currentSchema.schemaName;
                }
                this.subscriptions.push(this.finishLoasService.finish.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    self.initCondition(self.currentSchema);
                })));
            }
            else {
                self.defaultSchemaName = self.localizeService.getValue('queryFramework.ispreName');
            }
        })));
        this.subscriptions.push(self.idChanged.subscribe((/**
         * @param {?} schemaId
         * @return {?}
         */
        (schemaId) => {
            if (schemaId) {
                self.subscriptions.push(self.conditionService.getSchema(schemaId, self.queryId, true).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    if (data) {
                        self.currentSchema = data;
                        self.defaultSchemaName = self.currentSchema.schemaName;
                        self.initCondition(self.currentSchema);
                        if (self.controlIndexChanged === 1) {
                            self.handleInfoChanged(self.controlIndexChanged);
                        }
                    }
                })));
            }
        })));
    }
    /**
     * @private
     * @param {?} schema
     * @return {?}
     */
    initCondition(schema) {
        /** @type {?} */
        const self = this;
        if (schema) { // 预制默认对象
            if (schema.schemaValue && typeof (schema.schemaValue) === 'object') {
                if (schema && schema.schemaValue && this.repository.entityCollection.getAllEntities() && this.repository.entityCollection.getAllEntities().length) {
                    schema.schemaValue.id = this.repository.entityCollection.getAllEntities()[0]['id'];
                }
                self.repository.entityCollection.getAllEntities()[0].load(schema.schemaValue);
                self.filterExpressionString = '';
                if (schema.schemaValue.hasOwnProperty('@filterExpressionString@')) {
                    self.filterExpressionString = schema.schemaValue['@filterExpressionString@'];
                }
            }
            else {
                if (self.repository.entityCollection.getAllEntities() && self.repository.entityCollection.getAllEntities()[0]) {
                    /** @type {?} */
                    const obj = {
                        id: self.repository.entityCollection.getAllEntities()[0]['id']
                    };
                    self.repository.entityCollection.getAllEntities()[0].load(obj);
                }
            }
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getPropertyList(item) {
        this.subscriptions.push(this.lcpService.getCol({
            schemaId: '1',
            entityData: JSON.stringify({ 'id': 'undefined_null' }),
            pageIndex: 1,
            pageSize: 0,
            qoManagerCode: QDPCacheUtil.getCache(this.tabId + 'qoManagerCode'),
            controlType: QDPCacheUtil.getCache(this.tabId + 'controlType'),
            voCode: QDPCacheUtil.getCache(this.tabId + 'voId')
        }, QDPCacheUtil.getCache(this.tabId + 'queryRelativeUrl')).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value.dynamicCols && value.dynamicCols.length) {
                this.analysisColListData(value.dynamicCols, 'col');
                if (this.advanceFilterTab) {
                    this.advanceFilterTab.propertyList = [...this.propertyList];
                    this.advanceFilterTab.filterExpressionString = this.filterExpressionString;
                }
                item.createFilterComponent();
            }
        })));
    }
    /**
     * @private
     * @param {?} newValue
     * @param {?=} type
     * @return {?}
     */
    analysisColListData(newValue, type) {
        this.propertyList = [];
        newValue.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            this.recursiveAnalysisColListData(null, col, type);
        }));
    }
    /**
     * @private
     * @param {?} children
     * @param {?} col
     * @param {?=} type
     * @return {?}
     */
    recursiveAnalysisColListData(children, col, type) {
        if (col) {
            /** @type {?} */
            const index = this.propertyList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.Code === col.bindField));
            if (index < 0) {
                /** @type {?} */
                const node = {};
                node['value'] = col.bindField;
                node['propertyFieldType'] = this.getDataType(col.type);
                node['text'] = col.name;
                this.propertyList.push(node);
            }
            else if (type !== 'col') {
                this.propertyList[index]['text'] = col.name;
            }
            if (col.childList && col.childList.length) {
                this.recursiveAnalysisColListData(col.childList, null);
            }
        }
        else {
            children.forEach((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                /** @type {?} */
                const index = this.propertyList.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item.Code === c.bindField));
                if (index < 0) {
                    /** @type {?} */
                    const node = {};
                    node['value'] = c.bindField;
                    node['propertyFieldType'] = this.getDataType(c.type);
                    node['text'] = c.name;
                    this.propertyList.push(node);
                }
                else if (type !== 'col') {
                    this.propertyList[index]['text'] = c.name;
                }
                if (c.childList && c.childList.length) {
                    this.recursiveAnalysisColListData(c.childList, null);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getDataType(type) {
        /** @type {?} */
        let result = 0;
        switch (type) {
            case 'string':
            case 'text':
                result = 0;
                break;
            case 'integer':
                result = 2;
                break;
            case 'decimal':
                result = 4;
                break;
            case 'boolean':
                result = 8;
                break;
            case 'date':
            case 'dateTime':
                result = 9;
                break;
            case 'byte':
                result = 6;
                break;
            case 'char':
                result = 7;
                break;
            case 'array':
                result = 10;
                break;
            default:
                break;
        }
        return result;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions && this.subscriptions.length) {
            for (const subscription of this.subscriptions) {
                subscription.unsubscribe();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    handleDialogShow() {
        this.farrisDialog.show();
    }
    /**
     * @return {?}
     */
    handleDialogClose() {
        this.farrisDialog.close();
    }
    /**
     * @return {?}
     */
    handleSchemaManagerDialog() {
        this.conditionManagerDialog.handleDialogShow();
        this.menuShow = !this.menuShow;
    }
    /**
     * @return {?}
     */
    handleSaveasSchemaDialog() {
        this.saveasSchemaDialogComponent.schemaName = '';
        this.saveasSchemaDialogComponent.isDefault = false;
        this.saveasSchemaDialogComponent.isSchemaType = 0;
        this.menuShow = false;
        this.saveasSchemaDialogComponent.handleDialogShow();
        if (this.advanceFilterTab && this.advanceFilterTab.filterInstance) {
            this.saveasSchemaDialogComponent.filterInstance = this.advanceFilterTab.filterInstance;
        }
    }
    /**
     * @return {?}
     */
    handleSchemaMenu() {
        this.menuShow = !this.menuShow;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleInfoChanged($event) {
        /** @type {?} */
        const self = this;
        this.controlIndexChanged = $event;
        if (this.getConditionTabs() && this.getConditionTabs().length) {
            this.getConditionTabs().forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                item.controlIndexChanged = $event;
                item.changeCss();
                if (item.tabIndex === 1 && self.showFilterExpression) {
                    self.advanceFilterTab = item;
                    self.getPropertyList(item);
                }
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleSchemaSelected($event) {
        this.defaultSchemaName = $event.schemaName;
        this.menuShow = !this.menuShow;
        this.currentSchema = $event;
        this.Id = this.currentSchema.id;
    }
    /**
     * @return {?}
     */
    handleQueryClick() {
        /** @type {?} */
        const params = this.handlerGetEntity();
        this.beforeQuery().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result == true) {
                EventBus.dispatch('openAdvanceTemplateDialog', {});
                this.cacheService.set(this.tabId, params);
                EventBus.dispatch(this.tabId + 'advanceTemplate-condition-dialog-queryEvent', this.queryCount++);
                this.queryEvent.emit(this.queryCount++);
                this.closeType = 'query';
                this.handleDialogClose();
            }
        }));
    }
    /**
     * @return {?}
     */
    handleSaveClick() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const params = this.handlerGetEntity();
        if (this.currentSchema) {
            this.currentSchema.schemaValue = params;
            /** @type {?} */
            const newSchema = JSON.parse(JSON.stringify(this.currentSchema));
            if (this.advanceFilterTab && this.advanceFilterTab.filterInstance) {
                if (!newSchema.schemaValue) {
                    newSchema.schemaValue = {};
                }
                newSchema.schemaValue['@filterExpressionString@'] = this.advanceFilterTab.filterInstance.getFilterExpression();
            }
            newSchema.schemaValue = newSchema.schemaValue ? JSON.stringify(newSchema.schemaValue) : null;
            this.conditionService.saveSchema(newSchema).subscribe((/**
             * @return {?}
             */
            () => {
                self.notifyService['success']((/** @type {?} */ ({
                    title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.save.success'), timeout: 3000
                })));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                self.formErrorService.exception(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'), error);
            }));
        }
    }
    /**
     * @return {?}
     */
    handlerGetEntity() {
        /** @type {?} */
        const entitys = this.repository.entityCollection.getAllEntities();
        /** @type {?} */
        let params;
        if (entitys && entitys.length) {
            params = entitys[0].toJSON();
            if (this.advanceFilterTab && this.advanceFilterTab.filterInstance) {
                if (!params) {
                    params = { id: 'undefined_null' };
                }
                params['@filterExpressionString@'] = this.advanceFilterTab.filterInstance.getFilterExpression();
            }
            else if (this.filterExpressionString) {
                if (!params) {
                    params = { id: 'undefined_null' };
                }
                params['@filterExpressionString@'] = this.filterExpressionString;
            }
        }
        return params;
    }
}
ConditionDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'condition-dialog',
                template: "<farris-dialog #farrisDialog [title]=\"localizeService.getValue('queryFramework.dialogTitle')\" [showButtons]=\"false\" [beforeClose]=\"handlebeforeClose\"\r\n  [width]=\"960\" [showMaxButton]=\"false\" [showMinButton]=\"false\" [resizable]=\"false\" [height]=\"570\" [beforeOpen]=\"beforeOpen\">\r\n  <div class=\"f-utils-absolute-all f-utils-flex-column bg-white\">\r\n    <div class=\"f-utils-flex-row-wrap farris-overflow-hidden\">\r\n      <div class=\"ml-3 mt-2 schema-manager-title\" (click)=\"handleSchemaMenu()\">{{defaultSchemaName}}</div>\r\n      <div class=\"schema-manager-tr\">\r\n      </div>\r\n    </div>\r\n    <div class=\"box ml-3 mt-2 schema-manager-dropdown\" [style.display]=\"menuShow?'block':'none'\">\r\n      <div class=\"f-utils-absolute-all f-utils-flex-column\">\r\n        <div class=\"f-utils-fill-flex-column f-utils-fill-auto\">\r\n          <div class=\"schemaType\">{{localizeService.getValue('queryFramework.schemaType.public')}}</div>\r\n          <div *ngFor=\"let item of publicList\" [class]=\"currentSchema && currentSchema.id && currentSchema.id === item.id ? 'schemaItem schemaItemHover' : 'schemaItem'\">\r\n            <div class=\"f-utils-flex-row-wrap\" (click)=\"handleSchemaSelected(item)\">\r\n              <div class=\"schemaItemFont1 col-8\">{{item.schemaName}}</div>\r\n              <div *ngIf=\"item.isDefault === 1\" class=\"schemaItemFont2 col-4\">\r\n                {{localizeService.getValue('queryFramework.defaultName')}}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"schemaType\">{{localizeService.getValue('queryFramework.schemaType.personal')}}</div>\r\n          <div *ngFor=\"let item1 of personalList\" [class]=\"currentSchema && currentSchema.id && currentSchema.id === item1.id ? 'schemaItem schemaItemHover' : 'schemaItem'\">\r\n            <div class=\"f-utils-flex-row-wrap\" (click)=\"handleSchemaSelected(item1)\">\r\n              <div class=\"schemaItemFont1 col-8\">{{item1.schemaName}}</div>\r\n              <div *ngIf=\"item1.isDefault === 1\" class=\"schemaItemFont2 col-4\">\r\n                {{localizeService.getValue('queryFramework.defaultName')}}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"p-2 schema-manager-toolbar\">\r\n          <div class=\"btn-toolbar btn-group-lg\" id=\"page-header-toolbar\">\r\n            <button class=\"btn btn-link mr-1\" id=\"button-edit\"\r\n              (click)=\"handleSchemaManagerDialog()\">{{localizeService.getValue('queryFramework.btnManager')}}</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"f-utils-flex-row pl-3 pr-3 pt-2 pb-2\">\r\n      <button [class]=\"controlIndexChanged === 0 ? 'btn btn-primary' : 'btn btn-secondary'\" id=\"button-edit1\"\r\n        (click)=\"handleInfoChanged(0)\">\r\n        {{localizeService.getValue('queryFramework.tabName1')}}</button>\r\n      <button [class]=\"controlIndexChanged === 1 ? 'btn btn-primary' : 'btn btn-secondary'\" id=\"button-edit2\"\r\n        (click)=\"handleInfoChanged(1)\">\r\n        {{localizeService.getValue('queryFramework.tabName2')}}</button>\r\n      <!-- <button [class]=\"controlIndexChanged == false ? 'btn btn-primary' : 'btn btn-secondary'\" id=\"button-edit2\"\r\n          (click)=\"handleInfoChanged(2)\">\r\n          {{localizeService.getValue('ideCmp.schemaManager.columnOption.selection2')}}</button> -->\r\n    </div>\r\n    <div class=\"f-utils-fill-flex-column\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <div class=\"btn-toolbar btn-group-lg\" id=\"page-header-toolbar\">\r\n        <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleQueryClick()\">\r\n          {{localizeService.getValue('queryFramework.btnQuery')}}</button>\r\n        <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleSaveasSchemaDialog()\">\r\n          {{localizeService.getValue('queryFramework.btnSaveAsSchema')}}</button>\r\n        <button *ngIf=\"(!currentSchema) == false\" class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleSaveClick()\">\r\n          {{localizeService.getValue('queryFramework.btnSaveSchema')}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<condition-manager-dialog [queryId]=\"queryId\" [publicList]=\"publicList\" [personalList]=\"personalList\" [currentSchema]=\"currentSchema\"></condition-manager-dialog>\r\n<saveas-schema-dialog [queryId]=\"queryId\" [currentSchema]=\"currentSchema\"></saveas-schema-dialog>\r\n",
                styles: [".schema-manager-title{cursor:pointer;display:block;height:22px;font-family:PingFangSC-Regular;font-size:16px;color:#388fff;text-align:right}.schema-manager-tr{margin-top:1.1rem!important;margin-left:.25rem!important;width:0;height:0;border-left:3px solid transparent;border-right:3px solid transparent;border-top:6px solid rgba(0,0,0,.25)}.box{cursor:pointer;display:inline-block;position:relative;width:200px;height:246px;-webkit-filter:drop-shadow(0 2px 4px rgba(0, 0, 0, .2));filter:drop-shadow(0 2px 4px rgba(0, 0, 0, .2));border-radius:3px;background-color:#fff;border:1px solid #bbb}.box:after,.box:before{content:\"\";position:absolute;border:10px solid transparent;bottom:100%;left:10px}.box:before{border-bottom-color:#bbb}.box:after{border-bottom-color:#fff;margin-bottom:-1px}.schemaType{font-family:PingFangSC-Regular;font-size:14px;color:rgba(0,0,0,.45);line-height:20px;padding-left:.75rem!important;padding-top:.75rem!important;padding-bottom:.25rem!important}.schemaItem{height:30px}.schemaItem:hover,.schemaItemHover{background:#ddf4ff}.schemaItemFont1{font-family:PingFangSC-Regular;font-size:14px;color:rgba(0,0,0,.85);line-height:20px;margin-top:.25rem!important;margin-bottom:.25rem!important;float:left;text-align:center;word-break:keep-all;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding-left:0;padding-right:0}.schemaItemFont2{font-family:PingFangSC-Regular;font-size:12px;color:rgba(0,0,0,.45);line-height:20px;margin-top:.25rem!important;margin-bottom:.25rem!important;float:right;text-align:right;padding-left:0}.schema-manager-toolbar{background:#f9f9f9;display:flex;align-items:center;justify-content:flex-end;border-top:1px solid #e2e8f0}.schema-manager-dropdown{float:left;z-index:1000;position:absolute;top:30px}"]
            }] }
];
/** @nocollapse */
ConditionDialogComponent.ctorParameters = () => [
    { type: Injector },
    { type: ConditionSchemaService },
    { type: Repository },
    { type: CacheService },
    { type: FinishLoadService }
];
ConditionDialogComponent.propDecorators = {
    showFilterExpression: [{ type: Input }],
    queryId: [{ type: Input }],
    tabIndex: [{ type: Input }],
    beforeQuery: [{ type: Input }],
    queryEvent: [{ type: Output }],
    farrisDialog: [{ type: ViewChild, args: ['farrisDialog',] }],
    conditionTabs: [{ type: ContentChildren, args: [ConditionDialogTabComponent,] }],
    conditionManagerDialog: [{ type: ViewChild, args: [ConditionManagerDialogComponent,] }],
    saveasSchemaDialogComponent: [{ type: ViewChild, args: [SaveasSchemaDialogComponent,] }]
};
if (false) {
    /** @type {?} */
    ConditionDialogComponent.prototype.schemaId;
    /** @type {?} */
    ConditionDialogComponent.prototype.showFilterExpression;
    /** @type {?} */
    ConditionDialogComponent.prototype.queryId;
    /** @type {?} */
    ConditionDialogComponent.prototype.tabIndex;
    /** @type {?} */
    ConditionDialogComponent.prototype.beforeQuery;
    /** @type {?} */
    ConditionDialogComponent.prototype.queryEvent;
    /** @type {?} */
    ConditionDialogComponent.prototype.dialogInitEvent;
    /** @type {?} */
    ConditionDialogComponent.prototype.idChanged;
    /** @type {?} */
    ConditionDialogComponent.prototype.farrisDialog;
    /** @type {?} */
    ConditionDialogComponent.prototype.conditionTabs;
    /** @type {?} */
    ConditionDialogComponent.prototype.conditionManagerDialog;
    /** @type {?} */
    ConditionDialogComponent.prototype.saveasSchemaDialogComponent;
    /** @type {?} */
    ConditionDialogComponent.prototype.localizeService;
    /** @type {?} */
    ConditionDialogComponent.prototype.menuShow;
    /** @type {?} */
    ConditionDialogComponent.prototype.defaultSchemaName;
    /** @type {?} */
    ConditionDialogComponent.prototype.currentSchema;
    /** @type {?} */
    ConditionDialogComponent.prototype.publicList;
    /** @type {?} */
    ConditionDialogComponent.prototype.personalList;
    /** @type {?} */
    ConditionDialogComponent.prototype.controlIndexChanged;
    /** @type {?} */
    ConditionDialogComponent.prototype.queryCount;
    /** @type {?} */
    ConditionDialogComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.closeType;
    /** @type {?} */
    ConditionDialogComponent.prototype.formErrorService;
    /** @type {?} */
    ConditionDialogComponent.prototype.propertyList;
    /** @type {?} */
    ConditionDialogComponent.prototype.filterExpressionString;
    /** @type {?} */
    ConditionDialogComponent.prototype.advanceFilterTab;
    /** @type {?} */
    ConditionDialogComponent.prototype.schemaService;
    /** @type {?} */
    ConditionDialogComponent.prototype.lcpService;
    /** @type {?} */
    ConditionDialogComponent.prototype.tabId;
    /** @type {?} */
    ConditionDialogComponent.prototype.beforeOpen;
    /** @type {?} */
    ConditionDialogComponent.prototype.handlebeforeClose;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.conditionService;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.cacheService;
    /**
     * @type {?}
     * @private
     */
    ConditionDialogComponent.prototype.finishLoasService;
}
//# sourceMappingURL=data:application/json;base64,