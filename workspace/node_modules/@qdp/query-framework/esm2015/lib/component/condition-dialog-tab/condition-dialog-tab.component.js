/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ViewChild } from '@angular/core';
import { FilterExpressionComponent } from '@gsp-svc/filtercondition';
import { QDPCacheUtil, RtfServices } from '@qdp/common';
export class ConditionDialogTabComponent {
    constructor() {
        this.cls = '';
        this.tabIndex = 0;
        this.controlIndexChanged = 0;
        // injector: Injector;
        // @ViewChild('adHost', { read: ViewContainerRef }) adHost: ViewContainerRef;
        // componentFactoryResolver: ComponentFactoryResolver;
        // filterInstance: any;
        this.propertyList = [];
        this.filterExpressionString = '';
        this.showFilterExpression = true;
        this.showForm = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const changeName in changes) {
            /** @type {?} */
            const newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                switch (changeName) {
                    case 'propertyList':
                        if (newValue) {
                            this.propertyList = [...newValue];
                        }
                        break;
                    case 'filterExpressionString':
                        if (newValue) {
                            this.filterExpressionString = newValue;
                        }
                        break;
                }
            }
        }
    }
    /**
     * @return {?}
     */
    changeCss() {
        this.cls = this.tabIndex === this.controlIndexChanged ? 'f-utils-fill' : '';
    }
    /**
     * @return {?}
     */
    createFilterComponent() {
        // if (this.injector) {
        //   this.componentFactoryResolver = this.injector.get(ComponentFactoryResolver);
        //   const componentFactory = this.componentFactoryResolver.resolveComponentFactory(FilterExpressionComponent);
        //   this.adHost.clear();
        //   const componentRef = this.adHost.createComponent(componentFactory);
        //   this.filterInstance = componentRef.instance;
        //   this.filterInstance.propertyList = this.propertyList;
        //   this.filterInstance.filterExpressionString = this.filterExpressionString;
        // }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        try {
            if (QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs')) {
                QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs').push(this);
            }
            else {
                QDPCacheUtil.setCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs', [this]);
            }
        }
        catch (e) {
        }
        this.changeCss();
    }
}
ConditionDialogTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'condition-dialog-tab',
                template: "<div class=\"h-100 f-utils-fill\" [style.display]=\"tabIndex===controlIndexChanged?'block':'none'\">\r\n  <div class=\"f-utils-fill-flex-row h-100\" *ngIf=\"tabIndex==1 && showFilterExpression\">\r\n    <div class=\"f-utils-fill-auto h-100\">\r\n      <app-filter-expression #funcFilter class=\"h-100\" [propertyList]=\"propertyList\" [filterExpressionString]=\"filterExpressionString\"></app-filter-expression>\r\n    </div>\r\n  </div>\r\n  <div class=\"f-utils-fill-flex-row h-100\" *ngIf=\"tabIndex!=1 || showForm\">\r\n    <div class=\"f-utils-fill-auto h-100\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ConditionDialogTabComponent.ctorParameters = () => [];
ConditionDialogTabComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    tabIndex: [{ type: Input }],
    filterInstance: [{ type: ViewChild, args: [FilterExpressionComponent,] }],
    propertyList: [{ type: Input }],
    filterExpressionString: [{ type: Input }],
    showFilterExpression: [{ type: Input }],
    showForm: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ConditionDialogTabComponent.prototype.cls;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.tabIndex;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.controlIndexChanged;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.filterInstance;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.propertyList;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.filterExpressionString;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.showFilterExpression;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.showForm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLWRpYWxvZy10YWIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9xdWVyeS1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L2NvbmRpdGlvbi1kaWFsb2ctdGFiL2NvbmRpdGlvbi1kaWFsb2ctdGFiLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsV0FBVyxFQUEyQyxTQUFTLEVBQXlDLE1BQU0sZUFBZSxDQUFDO0FBQ2pLLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBT3hELE1BQU0sT0FBTywyQkFBMkI7SUFnQnRDO1FBZEEsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUVBLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDdEIsd0JBQW1CLEdBQUcsQ0FBQyxDQUFDOzs7OztRQU1mLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLDJCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUM1Qix5QkFBb0IsR0FBRyxJQUFJLENBQUM7UUFDNUIsYUFBUSxHQUFHLEtBQUssQ0FBQztJQUcxQixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxLQUFLLE1BQU0sVUFBVSxJQUFJLE9BQU8sRUFBRTs7a0JBQzFCLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWTtZQUNqRCxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUM1QyxRQUFRLFVBQVUsRUFBRTtvQkFDbEIsS0FBSyxjQUFjO3dCQUNqQixJQUFJLFFBQVEsRUFBRTs0QkFDWixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQzt5QkFDbkM7d0JBQ0QsTUFBTTtvQkFDUixLQUFLLHdCQUF3Qjt3QkFDM0IsSUFBSSxRQUFRLEVBQUU7NEJBQ1osSUFBSSxDQUFDLHNCQUFzQixHQUFHLFFBQVEsQ0FBQzt5QkFDeEM7d0JBQ0QsTUFBTTtpQkFDVDthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7O0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFRCxxQkFBcUI7UUFDbkIsdUJBQXVCO1FBQ3ZCLGlGQUFpRjtRQUNqRiwrR0FBK0c7UUFDL0cseUJBQXlCO1FBQ3pCLHdFQUF3RTtRQUN4RSxpREFBaUQ7UUFDakQsMERBQTBEO1FBQzFELDhFQUE4RTtRQUM5RSxJQUFJO0lBQ04sQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJO1lBQ0YsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxFQUFFO2dCQUNsRyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzRztpQkFBTTtnQkFDTCxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyx1QkFBdUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDeEc7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1NBQ1g7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7O1lBdEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyw4b0JBQW9EOzthQUVyRDs7Ozs7a0JBRUUsV0FBVyxTQUFDLE9BQU87dUJBR25CLEtBQUs7NkJBRUwsU0FBUyxTQUFDLHlCQUF5QjsyQkFLbkMsS0FBSztxQ0FDTCxLQUFLO21DQUNMLEtBQUs7dUJBQ0wsS0FBSzs7OztJQWJOLDBDQUNTOztJQUVULCtDQUFzQjs7SUFDdEIsMERBQXdCOztJQUN4QixxREFBZ0Y7O0lBS2hGLG1EQUEyQjs7SUFDM0IsNkRBQXFDOztJQUNyQywyREFBcUM7O0lBQ3JDLCtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgSG9zdEJpbmRpbmcsIFNpbXBsZUNoYW5nZXMsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0NoaWxkLCBPbkNoYW5nZXMsIFZpZXdDb250YWluZXJSZWYsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlckV4cHJlc3Npb25Db21wb25lbnQgfSBmcm9tICdAZ3NwLXN2Yy9maWx0ZXJjb25kaXRpb24nO1xyXG5pbXBvcnQgeyBRRFBDYWNoZVV0aWwsIFJ0ZlNlcnZpY2VzIH0gZnJvbSAnQHFkcC9jb21tb24nO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjb25kaXRpb24tZGlhbG9nLXRhYicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbmRpdGlvbi1kaWFsb2ctdGFiLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jb25kaXRpb24tZGlhbG9nLXRhYi5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIENvbmRpdGlvbkRpYWxvZ1RhYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBjbHMgPSAnJztcclxuXHJcbiAgQElucHV0KCkgdGFiSW5kZXggPSAwO1xyXG4gIGNvbnRyb2xJbmRleENoYW5nZWQgPSAwO1xyXG4gIEBWaWV3Q2hpbGQoRmlsdGVyRXhwcmVzc2lvbkNvbXBvbmVudCkgZmlsdGVySW5zdGFuY2U6IEZpbHRlckV4cHJlc3Npb25Db21wb25lbnQ7XHJcbiAgLy8gaW5qZWN0b3I6IEluamVjdG9yO1xyXG4gIC8vIEBWaWV3Q2hpbGQoJ2FkSG9zdCcsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KSBhZEhvc3Q6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgLy8gY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XHJcbiAgLy8gZmlsdGVySW5zdGFuY2U6IGFueTtcclxuICBASW5wdXQoKSBwcm9wZXJ0eUxpc3QgPSBbXTtcclxuICBASW5wdXQoKSBmaWx0ZXJFeHByZXNzaW9uU3RyaW5nID0gJyc7XHJcbiAgQElucHV0KCkgc2hvd0ZpbHRlckV4cHJlc3Npb24gPSB0cnVlO1xyXG4gIEBJbnB1dCgpIHNob3dGb3JtID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgZm9yIChjb25zdCBjaGFuZ2VOYW1lIGluIGNoYW5nZXMpIHtcclxuICAgICAgY29uc3QgbmV3VmFsdWUgPSBjaGFuZ2VzW2NoYW5nZU5hbWVdLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBudWxsICYmIG5ld1ZhbHVlICE9PSB2b2lkIDApIHtcclxuICAgICAgICBzd2l0Y2ggKGNoYW5nZU5hbWUpIHtcclxuICAgICAgICAgIGNhc2UgJ3Byb3BlcnR5TGlzdCc6XHJcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMucHJvcGVydHlMaXN0ID0gWy4uLm5ld1ZhbHVlXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ2ZpbHRlckV4cHJlc3Npb25TdHJpbmcnOlxyXG4gICAgICAgICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICB0aGlzLmZpbHRlckV4cHJlc3Npb25TdHJpbmcgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNoYW5nZUNzcygpIHtcclxuICAgIHRoaXMuY2xzID0gdGhpcy50YWJJbmRleCA9PT0gdGhpcy5jb250cm9sSW5kZXhDaGFuZ2VkID8gJ2YtdXRpbHMtZmlsbCcgOiAnJztcclxuICB9XHJcblxyXG4gIGNyZWF0ZUZpbHRlckNvbXBvbmVudCgpIHtcclxuICAgIC8vIGlmICh0aGlzLmluamVjdG9yKSB7XHJcbiAgICAvLyAgIHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTtcclxuICAgIC8vICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZpbHRlckV4cHJlc3Npb25Db21wb25lbnQpO1xyXG4gICAgLy8gICB0aGlzLmFkSG9zdC5jbGVhcigpO1xyXG4gICAgLy8gICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLmFkSG9zdC5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XHJcbiAgICAvLyAgIHRoaXMuZmlsdGVySW5zdGFuY2UgPSBjb21wb25lbnRSZWYuaW5zdGFuY2U7XHJcbiAgICAvLyAgIHRoaXMuZmlsdGVySW5zdGFuY2UucHJvcGVydHlMaXN0ID0gdGhpcy5wcm9wZXJ0eUxpc3Q7XHJcbiAgICAvLyAgIHRoaXMuZmlsdGVySW5zdGFuY2UuZmlsdGVyRXhwcmVzc2lvblN0cmluZyA9IHRoaXMuZmlsdGVyRXhwcmVzc2lvblN0cmluZztcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKFFEUENhY2hlVXRpbC5nZXRDYWNoZShSdGZTZXJ2aWNlcy5nZXRUYWJJZCgnY29uZGl0aW9uLWRpYWxvZy10YWJzJykgKyAnY29uZGl0aW9uLWRpYWxvZy10YWJzJykpIHtcclxuICAgICAgICBRRFBDYWNoZVV0aWwuZ2V0Q2FjaGUoUnRmU2VydmljZXMuZ2V0VGFiSWQoJ2NvbmRpdGlvbi1kaWFsb2ctdGFicycpICsgJ2NvbmRpdGlvbi1kaWFsb2ctdGFicycpLnB1c2godGhpcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgUURQQ2FjaGVVdGlsLnNldENhY2hlKFJ0ZlNlcnZpY2VzLmdldFRhYklkKCdjb25kaXRpb24tZGlhbG9nLXRhYnMnKSArICdjb25kaXRpb24tZGlhbG9nLXRhYnMnLCBbdGhpc10pO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNoYW5nZUNzcygpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19