/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Injector, Input } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { LocalizeService } from '@qdp/localize';
import { ConditionSchemaService } from '@qdp/condition-schema';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { Subject } from 'rxjs';
import { FormErrorService } from '@farris/command-services';
export class ConditionManagerDialogComponent {
    /**
     * @param {?} injector
     * @param {?} msgService
     * @param {?} conditionService
     * @param {?} notifyService
     */
    constructor(injector, msgService, conditionService, notifyService) {
        this.injector = injector;
        this.msgService = msgService;
        this.conditionService = conditionService;
        this.notifyService = notifyService;
        this.expandPublic = true;
        this.expandPersonal = true;
        this.publicList = [];
        this.personalList = [];
        this.removeList = [];
        this.motifyList = [];
        this.removeListEvent = new Subject();
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.formErrorService = this.injector.get(FormErrorService);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    handleDialogShow() {
        this.farrisDialog.show();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleExpandType($event) {
        this.expandPublic = $event === 0 ? !this.expandPublic : this.expandPublic;
        this.expandPersonal = $event === 1 ? !this.expandPersonal : this.expandPersonal;
    }
    /**
     * @param {?} change
     * @param {?} item
     * @return {?}
     */
    handleNgModelChange(change, item) {
        item.isDefault = change ? 1 : 0;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleDeleteSchame($event) {
        if (this.removeList.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.id === $event.id)) < 0) {
            this.removeList.push($event);
            this.motifyList.push({ type: 'delete', id: $event.id });
        }
        /** @type {?} */
        const index = $event.schemaType === 0
            ? this.publicList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.id === $event.id))
            : this.personalList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.id === $event.id));
        if ($event.schemaType === 0) {
            this.publicList.splice(index, 1);
        }
        else {
            this.personalList.splice(index, 1);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleSettingDefault($event) {
        /** @type {?} */
        const self = this;
        this.publicList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            item.isDefault = item.id === $event.id ? 1 : 0;
            if (item.id === $event.id) {
                self.motifyList.push({ type: 'edit', id: $event.id });
            }
        }));
        this.personalList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            item.isDefault = item.id === $event.id ? 1 : 0;
            if (item.id === $event.id) {
                self.motifyList.push({ type: 'edit', id: $event.id });
            }
        }));
    }
    /**
     * @return {?}
     */
    handleOKClick() {
        /** @type {?} */
        const self = this;
        if (this.motifyList.length) {
            /** @type {?} */
            const deleteSchemas = [];
            /** @type {?} */
            let saveSchema;
            this.motifyList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.type === 'delete') {
                    deleteSchemas.push(item.id);
                }
                else {
                    saveSchema = self.publicList.find((/**
                     * @param {?} el
                     * @return {?}
                     */
                    (el) => el.id === item.id));
                    if (!saveSchema || !saveSchema.id) {
                        saveSchema = self.personalList.find((/**
                         * @param {?} el
                         * @return {?}
                         */
                        (el) => el.id === item.id));
                    }
                }
            }));
            if (saveSchema && saveSchema.schemaValue) {
                saveSchema.schemaValue = saveSchema && saveSchema.schemaValue ? JSON.stringify(saveSchema.schemaValue) : null;
            }
            if (deleteSchemas.length && saveSchema && saveSchema.id) {
                this.conditionService.deleteSchemaList(deleteSchemas.join(','), self.queryId).subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.conditionService.saveSchema(saveSchema).subscribe((/**
                     * @return {?}
                     */
                    () => {
                        self.clearChanges();
                        self.notifyService['success']((/** @type {?} */ ({
                            title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.success'), timeout: 3000
                        })));
                        self.farrisDialog.close();
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    (error) => {
                        self.formErrorService.exception(error.Message, error);
                        // self.notifyService['success']({
                        //   title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.error'), timeout: 3000
                        // } as NotifyOptions);
                        self.farrisDialog.close();
                    }));
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    self.formErrorService.exception(error.Message, error);
                    // console.log(error);
                    // self.notifyService['success']({
                    //   title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.error'), timeout: 3000
                    // } as NotifyOptions);
                    self.farrisDialog.close();
                }));
            }
            else if (deleteSchemas.length) {
                this.conditionService.deleteSchemaList(deleteSchemas.join(','), self.queryId).subscribe((/**
                 * @return {?}
                 */
                () => {
                    self.clearChanges();
                    self.notifyService['success']((/** @type {?} */ ({
                        title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.success'), timeout: 3000
                    })));
                    self.farrisDialog.close();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    self.formErrorService.exception(error.Message, error);
                    // console.log(error);
                    // self.notifyService['success']({
                    //   title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.error'), timeout: 3000
                    // } as NotifyOptions);
                    self.farrisDialog.close();
                }));
            }
            else if (saveSchema && saveSchema.id) {
                this.conditionService.saveSchema(saveSchema).subscribe((/**
                 * @return {?}
                 */
                () => {
                    self.clearChanges();
                    self.notifyService['success']((/** @type {?} */ ({
                        title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.success'), timeout: 3000
                    })));
                    self.farrisDialog.close();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    self.formErrorService.exception(error.Message, error);
                    // console.log(error);
                    // self.notifyService['success']({
                    //   title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.operate.error'), timeout: 3000
                    // } as NotifyOptions);
                    self.farrisDialog.close();
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    clearChanges() {
        this.motifyList = [];
        this.removeList = [];
    }
    /**
     * @return {?}
     */
    handleCancelClick() {
        /** @type {?} */
        const self = this;
        if (this.motifyList.length) {
            this.motifyList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.type === 'delete') {
                    /** @type {?} */
                    const result = self.removeList.find((/**
                     * @param {?} el
                     * @return {?}
                     */
                    (el) => el.id === item.id));
                    if (result.schemaType === 0) {
                        self.publicList.push(item);
                    }
                    else {
                        self.personalList.push(item);
                    }
                }
                else {
                    this.publicList.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    (el) => {
                        el.isDefault = el.id === item.id ? 1 : 0;
                    }));
                    this.personalList.forEach((/**
                     * @param {?} el1
                     * @return {?}
                     */
                    (el1) => {
                        el1.isDefault = el1.id === item.id ? 1 : 0;
                    }));
                }
            }));
            this.removeList = [];
            this.motifyList = [];
        }
        this.farrisDialog.close();
    }
}
ConditionManagerDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'condition-manager-dialog',
                template: "<farris-dialog #farrisDialog [title]=\"localizeService.getValue('queryFramework.dialogTitle1')\" [showButtons]=\"false\"\r\n  [width]=\"550\" [showMaxButton]=\"false\" [showMinButton]=\"false\" [showCloseButton]=\"false\" [resizable]=\"false\" [height]=\"570\">\r\n  <div class=\"f-utils-absolute-all f-utils-flex-column bg-white\">\r\n    <div class=\"f-utils-fill-auto\">\r\n      <div class=\"f-utils-flex-row-wrap m-2 item-header-row\" style=\"height: 40px\">\r\n        <div class=\"col-4 pt-1 item-header-col-font item-header-col1\">\r\n          {{localizeService.getValue('queryFramework.conditionManagerListColumn')[0]}}\r\n        </div>\r\n        <div class=\"col-4 pt-1 item-header-col-font item-header-col2\">\r\n          {{localizeService.getValue('queryFramework.conditionManagerListColumn')[1]}}\r\n        </div>\r\n        <div class=\"col-4 pt-1 item-header-col-font item-header-col3\">\r\n          {{localizeService.getValue('queryFramework.conditionManagerListColumn')[2]}}\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-flex-row-wrap m-2\" (click)=\"handleExpandType(0)\">\r\n        <span *ngIf=\"expandPublic\" class=\"f-icon f-icon-minus-outline ml-3 mr-2\" style=\"color: #B9C3C9;\"></span>\r\n        <span *ngIf=\"!expandPublic\" class=\"f-icon f-icon-plus-outline ml-3 mr-2\" style=\"color: #B9C3C9;\"></span>\r\n        <div class=\"item-schema-type\">{{localizeService.getValue('queryFramework.schemaType.public')}}</div>\r\n      </div>\r\n      <div [class]=\"expandPublic ? 'f-utils-flex-column item-list-block' : 'f-utils-flex-column item-list-none'\">\r\n        <div *ngFor=\"let item of publicList\" [class]=\"currentSchema && currentSchema.id  && currentSchema.id === item.id ? 'f-utils-flex-row-wrap ml-0 mr-0 mt-1 mb-1 item-row item-row-hover' : 'f-utils-flex-row-wrap ml-0 mr-0 mt-1 mb-1 item-row'\">\r\n          <div [class]=\"item.isProtected === 1 ? 'col-4 item-data-font item-data-col1' : 'col-4 item-data-font-disable item-data-col1'\">\r\n            {{item.schemaName}}\r\n          </div>\r\n          <div class=\"col-4 item-data-font item-data-col2\">\r\n            <div class=\"custom-control custom-checkbox mb-0 ml-4\">\r\n              <input type=\"checkbox\" class=\"custom-control-input\" [ngModel]=\"item.isDefault === 1 ? true : false\" (ngModelChange)=\"handleNgModelChange($event, item)\" (click)=\"handleSettingDefault(item)\" [disabled]=\"item.isProtected === 1\" id=\"{{item.id}}\" checked=\"\">\r\n              <label class=\"custom-control-label\" for=\"{{item.id}}\"></label>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-4 item-data-font item-data-col3\">\r\n            <button class=\"btn btn-link p-1 mr-1\" id=\"button-delete\" [disabled]=\"item.isProtected === 1\" (click)=\"handleDeleteSchame(item)\">\r\n              <span class=\"f-icon f-icon-delete item-delete\"></span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-flex-row-wrap m-2\" (click)=\"handleExpandType(1)\">\r\n        <span *ngIf=\"expandPersonal\" class=\"f-icon f-icon-minus-outline ml-3 mr-2\" style=\"color: #B9C3C9;\"></span>\r\n        <span *ngIf=\"!expandPersonal\" class=\"f-icon f-icon-plus-outline ml-3 mr-2\" style=\"color: #B9C3C9;\"></span>\r\n        <div class=\"item-schema-type\">{{localizeService.getValue('queryFramework.schemaType.personal')}}</div>\r\n      </div>\r\n      <div [class]=\"expandPersonal ? 'f-utils-flex-column item-list-block' : 'f-utils-flex-column item-list-none'\">\r\n        <div *ngFor=\"let item1 of personalList\" [class]=\"currentSchema && currentSchema.id && currentSchema.id === item1.id ? 'f-utils-flex-row-wrap ml-0 mr-0 mt-1 mb-1 item-row item-row-hover' : 'f-utils-flex-row-wrap ml-0 mr-0 mt-1 mb-1 item-row'\">\r\n          <div [class]=\"item1.isProtected === 1 ? 'col-4 item-data-font item-data-col1' : 'col-4 item-data-font-disable item-data-col1'\">\r\n            {{item1.schemaName}}\r\n          </div>\r\n          <div class=\"col-4 item-data-font item-data-col2\">\r\n            <div class=\"custom-control custom-checkbox mb-0 ml-4\">\r\n              <input type=\"checkbox\" class=\"custom-control-input\" [ngModel]=\"item1.isDefault === 1 ? true : false\" (ngModelChange)=\"handleNgModelChange($event, item1)\" (click)=\"handleSettingDefault(item1)\" [disabled]=\"item1.isProtected === 1\"\r\n                id=\"{{item1.id}}\" checked=\"\">\r\n              <label class=\"custom-control-label\" for=\"{{item1.id}}\"></label>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-4 item-data-font item-data-col3\">\r\n            <button class=\"btn btn-link p-1 mr-1\" id=\"button-delete\" [disabled]=\"item1.isProtected === 1\" (click)=\"handleDeleteSchame(item1)\">\r\n              <span class=\"f-icon f-icon-delete item-delete\"></span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <div class=\"btn-toolbar btn-group-lg\" id=\"page-header-toolbar\">\r\n        <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleOKClick()\">\r\n          {{localizeService.getValue('queryFramework.btnOk')}}</button>\r\n        <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleCancelClick()\">\r\n          {{localizeService.getValue('queryFramework.btnCancel')}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n",
                styles: [".item-header-row{border-bottom:1px solid #e2e8f0}.item-row{height:40px}.item-header-col-font{font-family:PingFangSC-Regular;font-size:14px;color:#000}.item-header-col1{text-align:left}.item-header-col2{text-align:center}.item-header-col3{text-align:right}.item-schema-type{font-family:PingFangSC-Regular;font-size:14px;color:#000;line-height:20px;display:block;top:-2px;position:relative}.item-row-current{background:#ddf4ff;border-left:3px solid #388fff!important}.item-data-font-disable{font-family:PingFangSC-Regular;font-size:14px;color:rgba(166,166,166,.8);line-height:20px;position:relative;top:-2px;padding-top:.75rem!important}.item-data-font{font-family:PingFangSC-Regular;font-size:14px;color:rgba(0,0,0,.8);line-height:20px;position:relative;top:-2px;padding-top:.75rem!important}.item-data-col1,.item-data-col2{text-align:center}.item-data-col3{text-align:right;padding-right:1.25rem!important}.item-row-hover,.item-row:hover{background:#ddf4ff;border-left:3px solid #388fff!important}.item-list-block{display:block!important}.item-list-none{display:none!important}.item-delete{position:relative;top:-3px}"]
            }] }
];
/** @nocollapse */
ConditionManagerDialogComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ConditionSchemaService },
    { type: NotifyService }
];
ConditionManagerDialogComponent.propDecorators = {
    farrisDialog: [{ type: ViewChild, args: ['farrisDialog',] }],
    currentSchema: [{ type: Input }],
    queryId: [{ type: Input }],
    publicList: [{ type: Input }],
    personalList: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.farrisDialog;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.currentSchema;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.localizeService;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.expandPublic;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.expandPersonal;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.queryId;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.publicList;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.personalList;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.removeList;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.motifyList;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.removeListEvent;
    /** @type {?} */
    ConditionManagerDialogComponent.prototype.formErrorService;
    /**
     * @type {?}
     * @private
     */
    ConditionManagerDialogComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ConditionManagerDialogComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ConditionManagerDialogComponent.prototype.conditionService;
    /**
     * @type {?}
     * @private
     */
    ConditionManagerDialogComponent.prototype.notifyService;
}
//# sourceMappingURL=data:application/json;base64,