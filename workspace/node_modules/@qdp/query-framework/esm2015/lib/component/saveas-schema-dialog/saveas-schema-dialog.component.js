/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Injector, LOCALE_ID, Input } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { LocalizeService, DEFAULT_LANGUAGE } from '@qdp/localize';
import { EventBus } from '@qdp/common';
import { ConditionSchemaService } from '@qdp/condition-schema';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { Repository } from '@farris/devkit';
import { FormErrorService } from '@farris/command-services';
export class SaveasSchemaDialogComponent {
    /**
     * @param {?} injector
     * @param {?} msgService
     * @param {?} conditionService
     * @param {?} notifyService
     */
    constructor(injector, msgService, conditionService, notifyService) {
        this.injector = injector;
        this.msgService = msgService;
        this.conditionService = conditionService;
        this.notifyService = notifyService;
        this.formInline = true;
        this.conditionSchemaName = 'conditionSchemaName' + EventBus.guid();
        this.schemaName = '';
        this.isDefault = false;
        this.isSchemaType = 0;
        this.publicSchema = 'publicSchema' + EventBus.guid();
        this.personSchema = 'personSchema' + EventBus.guid();
        this.defaultSchema = 'defaultSchema' + EventBus.guid();
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.localId = this.injector.get(LOCALE_ID) || DEFAULT_LANGUAGE;
            this.formInline = this.localId.toLowerCase() === DEFAULT_LANGUAGE;
            this.repository = this.injector.get(Repository);
            this.formErrorService = this.injector.get(FormErrorService);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const self = this;
        for (const changeName in changes) {
            /** @type {?} */
            const newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                switch (changeName) {
                    case 'currentSchema':
                        break;
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    handleDialogShow() {
        this.farrisDialog.show();
    }
    /**
     * @return {?}
     */
    handleOKClick() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const data = this.conditionService.schemaList;
        if (!this.schemaName) {
            this.msgService.warning(this.localizeService.getValue('queryFramework.message.validate.notNull'));
            return;
        }
        if (this.schemaName && this.schemaName.length > 15) {
            this.msgService.warning(this.localizeService.getValue('queryFramework.message.lengthValidate'));
            return;
        }
        if (data && data[this.queryId]) {
            for (const key in data[self.queryId]) {
                if (data[self.queryId][key].schemaName === self.schemaName) {
                    this.msgService.warning(this.localizeService.getValue('queryFramework.message.saveas'));
                    return;
                }
            }
        }
        /** @type {?} */
        const params = this.handlerGetEntity();
        if (this.currentSchema && this.currentSchema.id) {
            for (const key in data[self.queryId]) {
                if (data[self.queryId][key].schemaName === self.schemaName) {
                    this.msgService.warning(this.localizeService.getValue('queryFramework.message.saveas'));
                    return;
                }
            }
            /** @type {?} */
            const newValue = JSON.parse(JSON.stringify(this.currentSchema));
            newValue.schemaValue = params;
            newValue.id = '';
            newValue.queryId = self.queryId;
            if (this.filterInstance) {
                if (!newValue.schemaValue) {
                    newValue.schemaValue = {};
                }
                newValue.schemaValue['@filterExpressionString@'] = this.filterInstance.getFilterExpression();
            }
            newValue.schemaValue = newValue.schemaValue ? JSON.stringify(newValue.schemaValue) : null;
            newValue.schemaName = self.schemaName;
            newValue.isDefault = self.isDefault ? 1 : 0;
            newValue.schemaType = self.isSchemaType;
            this.conditionService.saveSchema(newValue).subscribe((/**
             * @return {?}
             */
            () => {
                self.notifyService['success']((/** @type {?} */ ({
                    title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.save.success'), timeout: 3000
                })));
                self.farrisDialog.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                self.formErrorService.exception(error.Message, error);
            }));
        }
        else {
            /** @type {?} */
            const newValue = {
                schemaName: self.schemaName,
                schemaType: self.isSchemaType,
                schemaValue: null,
                isDefault: self.isDefault ? 1 : 0,
                isProtected: 0,
                queryId: self.queryId
            };
            newValue.schemaValue = params;
            if (this.filterInstance) {
                if (!newValue.schemaValue) {
                    newValue.schemaValue = {};
                }
                newValue.schemaValue['@filterExpressionString@'] = this.filterInstance.getFilterExpression();
            }
            newValue.schemaValue = newValue.schemaValue ? JSON.stringify(newValue.schemaValue) : null;
            this.conditionService.saveSchema(newValue).subscribe((/**
             * @return {?}
             */
            () => {
                self.notifyService['success']((/** @type {?} */ ({
                    title: self.localizeService.getValue('queryFramework.message.info.title'), msg: self.localizeService.getValue('queryFramework.message.save.success'), timeout: 3000
                })));
                self.farrisDialog.close();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                self.formErrorService.exception(error.Message, error);
            }));
        }
    }
    /**
     * @return {?}
     */
    handleCancelClick() {
        this.schemaName = '';
        this.isDefault = false;
        this.isSchemaType = 0;
        this.farrisDialog.close();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleSchemaTypeSelect(value) {
        this.isSchemaType = value;
    }
    /**
     * @return {?}
     */
    handlerGetEntity() {
        /** @type {?} */
        const entitys = this.repository.entityCollection.getAllEntities();
        /** @type {?} */
        let params;
        if (entitys && entitys.length) {
            params = entitys[0].toJSON();
        }
        return params;
    }
}
SaveasSchemaDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'saveas-schema-dialog',
                template: "<farris-dialog #farrisDialog [title]=\"localizeService.getValue('queryFramework.dialogTitle2')\" [showButtons]=\"false\"\r\n  [width]=\"509\" [showMaxButton]=\"false\" [showCloseButton]=\"false\" [showMinButton]=\"false\" [resizable]=\"false\" [height]=\"285\">\r\n  <div class=\"f-utils-absolute-all f-utils-flex-column bg-white\">\r\n    <div class=\"f-utils-fill-flex-column\">\r\n      <div class=\"f-utils-flex-row pt-2\">\r\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"colName\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">{{localizeService.getValue('queryFramework.schemaName')}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"colName\" [(ngModel)]=\"schemaName\"></input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"f-utils-flex-row\">\r\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"colVisible\">\r\n              <span class=\"farris-label-text\"></span>\r\n            </label>\r\n            <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n              <div class=\"custom-control custom-checkbox mb-0\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"isDefault\" class=\"custom-control-input\" id=\"{{conditionSchemaName}}\"\r\n                  checked=\"\">\r\n                <label class=\"custom-control-label\"\r\n                  for=\"{{conditionSchemaName}}\">{{localizeService.getValue('queryFramework.defaultSchemaName')}}</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> -->\r\n      <div class=\"f-utils-flex-row pt-2\">\r\n        <div class=\"farris-group-wrap form-inline farris-form-inline m-1\">\r\n          <div class=\"form-group farris-group-wrap\">\r\n            <label class=\"col-form-label\" style=\"min-width: 0;\" for=\"range_type_id\">\r\n              <span class=\"farris-label-text\">{{localizeService.getValue('ideCmp.schemaManager.schemeType')}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n              <div class=\"custom-control custom-radio mb-0\">\r\n                <input type=\"radio\" id=\"{{publicSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                  [checked]=\"isSchemaType==0\">\r\n                <label class=\"custom-control-label\" for=\"{{publicSchema}}\"\r\n                  (click)=\"handleSchemaTypeSelect(0)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypePublic')}}</label>\r\n              </div>\r\n              <div class=\"custom-control custom-radio mb-0\">\r\n                <input type=\"radio\" id=\"{{personSchema}}\" name=\"custom-radio1\" class=\"custom-control-input\"\r\n                  [checked]=\"isSchemaType==1\">\r\n                <label class=\"custom-control-label\" for=\"{{personSchema}}\"\r\n                  (click)=\"handleSchemaTypeSelect(1)\">{{localizeService.getValue('ideCmp.schemaManager.schemeTypePersonal')}}</label>\r\n              </div>\r\n              <div class=\"custom-control custom-checkbox mb-0\">\r\n                <input type=\"checkbox\" class=\"custom-control-input\" id=\"{{defaultSchema}}\"\r\n                  [(ngModel)]=\"isDefault\">\r\n                <label class=\"custom-control-label\"\r\n                  for=\"{{defaultSchema}}\">{{localizeService.getValue('ideCmp.schemaManager.schemeDefault')}}</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <div class=\"btn-toolbar btn-group-lg\" id=\"page-header-toolbar\">\r\n        <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleOKClick()\">\r\n          {{localizeService.getValue('queryFramework.btnOk')}}</button>\r\n        <button class=\"btn btn-secondary mr-1\" id=\"button-edit\" (click)=\"handleCancelClick()\">\r\n          {{localizeService.getValue('queryFramework.btnCancel')}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
SaveasSchemaDialogComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ConditionSchemaService },
    { type: NotifyService }
];
SaveasSchemaDialogComponent.propDecorators = {
    currentSchema: [{ type: Input }],
    queryId: [{ type: Input }],
    farrisDialog: [{ type: ViewChild, args: ['farrisDialog',] }]
};
if (false) {
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.currentSchema;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.queryId;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.farrisDialog;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.localizeService;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.formInline;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.localId;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.conditionSchemaName;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.schemaName;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.isDefault;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.isSchemaType;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.publicSchema;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.personSchema;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.defaultSchema;
    /**
     * @type {?}
     * @private
     */
    SaveasSchemaDialogComponent.prototype.repository;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.formErrorService;
    /** @type {?} */
    SaveasSchemaDialogComponent.prototype.filterInstance;
    /**
     * @type {?}
     * @private
     */
    SaveasSchemaDialogComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SaveasSchemaDialogComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    SaveasSchemaDialogComponent.prototype.conditionService;
    /**
     * @type {?}
     * @private
     */
    SaveasSchemaDialogComponent.prototype.notifyService;
}
//# sourceMappingURL=data:application/json;base64,