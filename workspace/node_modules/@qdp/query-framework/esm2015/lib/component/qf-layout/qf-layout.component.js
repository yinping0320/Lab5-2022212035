/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ContentChild, TemplateRef, ViewChild } from '@angular/core';
import { QdpViewComponent, RenderService } from '@qdp/spread';
import { LcpBindingDataDirective, FormBindingDataDirective } from '@qdp/echarts';
import { SchemaService } from '@qdp/ide-cmp';
import { FilterService } from '@gsp-svc/filtercondition';
import { FilterManagerService, ParasMappingManagerService, RtfServices, QDPCacheUtil } from '@qdp/common';
import { EventBus } from '@qdp/common';
import { QueryFrameworkToolbarComponent } from '../qf-toolbar/qf-toolbar.component';
import { ConditionDialogComponent } from '../condition-dialog/condition-dialog.component';
export class QueryFrameworkLayoutComponent {
    /**
     * @param {?} schemaService
     * @param {?} renderService
     * @param {?} filter
     * @param {?} filterService
     * @param {?} parasMappingManagerService
     */
    constructor(schemaService, renderService, filter, filterService, parasMappingManagerService) {
        this.schemaService = schemaService;
        this.renderService = renderService;
        this.filter = filter;
        this.filterService = filterService;
        this.parasMappingManagerService = parasMappingManagerService;
        this.isShowToolbar = true;
        this.isMultiForm = false; // 是否嵌入式表单
        this.isInit = true;
        this.toolbarOption = {
            showPreSchema: true,
            showSchemaManager: true,
            showExport: true,
            showReFresh: true,
            showFilter: true,
            showPrint: true,
            showClearSort: true,
            showClearCache: true
        };
        this.toolBarEvent = 'toolBarEvent' + EventBus.guid();
        this.contentSizeChange = new EventEmitter();
        this.formPrintOption = {
            isShowFormPrint: false,
            printBEId: '',
            printFormIdField: ''
        };
        this.size = {
            height: '500px',
            width: '300px'
        };
        this.pageInfo = {};
        this.pageIndex = 1;
        this.co = {
            NodeType: 'QueryNode',
            IsBe: true,
            ContainElements: [],
            Code: 'QueryNode',
            Name: 'QueryNdoe',
            BizEntityID: EventBus.guid()
        };
        this.subscriptions = [];
        /** @type {?} */
        const self = this;
        this.tabId = RtfServices.getTabId(this.queryId);
        this.subscriptions = [];
        this.subscriptions.push(self.schemaService.schemaInfo.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            try {
                if (value) {
                    /** @type {?} */
                    const schemaInfoAll = Object.assign({}, value);
                    if (schemaInfoAll.schemaList && schemaInfoAll.schemaList[this.queryId]) {
                        schemaInfoAll.schemaList = schemaInfoAll.schemaList[this.queryId];
                        if (!self.schemaId) {
                            if (schemaInfoAll.isDefaultSchema && schemaInfoAll.isDefaultSchema.id) {
                                self.initColListData(schemaInfoAll.isDefaultSchema.schemaValue.columnOption.colList);
                            }
                        }
                        else if (self.schemaId !== '1' && self.schemaId !== 'prefab' && self.schemaId !== 'public_schema' && self.schemaId !== 'person_schema') {
                            self.initColListData(schemaInfoAll.schemaList[self.schemaId].schemaValue.columnOption.colList);
                        }
                    }
                    else {
                        schemaInfoAll.schemaList = null;
                        self.initColListData(schemaInfoAll.preSchema.schemaValue.columnOption.colList);
                    }
                    self.schemaInfo = schemaInfoAll;
                }
            }
            catch (e) {
                // console.log(e); 
            }
        })));
        this.subscriptions.push(self.schemaService.colList.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            self.colList = value;
            if (value && value.length) {
                this.initColListData(value, 'col');
            }
        })));
        // 如果有筛选方案
        if (this.filterService && this.filterService.isFilterQDP) {
            // this.filterService.isFilterQDP.observers = [];
            this.subscriptions.push(self.filterService.isFilterQDP.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (data) {
                        if (self.toolbarComponent && self.toolbarComponent.paginationComponent) {
                            self.toolbarComponent.paginationComponent.initPageInfo();
                            self.pageIndex = self.toolbarComponent.paginationComponent.pagination.pageIndex = 1;
                            self.pageInfo = self.toolbarComponent.paginationComponent.pagination;
                        }
                        self.refresh();
                    }
                }));
            })));
        }
    }
    /**
     * @return {?}
     */
    getQdpView() {
        if (this.qdpView) {
            return this.qdpView;
        }
        else if (QDPCacheUtil.getCache(this.tabId + this.queryId + this.controlType + 'qdpview')) {
            return QDPCacheUtil.getCache(this.tabId + this.queryId + this.controlType + 'qdpview');
        }
    }
    /**
     * @return {?}
     */
    getCharts() {
        if (this.charts) {
            return this.charts;
        }
        else if (QDPCacheUtil.getCache(this.tabId + this.queryId + 'lcp-charts')) {
            return QDPCacheUtil.getCache(this.tabId + this.queryId + 'lcp-charts');
        }
    }
    /**
     * @return {?}
     */
    getFormDatasource() {
        if (this.formdatasource) {
            return this.formdatasource;
        }
        else if (QDPCacheUtil.getCache(this.tabId + this.queryId + 'form-charts')) {
            return QDPCacheUtil.getCache(this.tabId + this.queryId + 'form-charts');
        }
    }
    /**
     * @return {?}
     */
    getConditionDialog() {
        if (this.conditionDialog) {
            return this.conditionDialog;
        }
        else if (QDPCacheUtil.getCache(this.tabId + 'advanceTemplate-condition-dialog')) {
            return QDPCacheUtil.getCache(this.tabId + 'advanceTemplate-condition-dialog');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions && this.subscriptions.length) {
            for (const subscription of this.subscriptions) {
                subscription.unsubscribe();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        if (this.controlType !== 'crosstab') {
            this.subscriptions.push(self.schemaService.pageInfoChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                self.pageInfo = value;
            })));
        }
        // if (this.qoId) {
        if (this.isInit == true) {
            this.subscriptions.push(self.filterService.getFilter(self.qoManagerCode ? self.qoManagerCode : self.queryId, self.queryId, self.queryRelativeUrl, 1, this.groupType).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data) {
                    self.conditionExpression = JSON.stringify(data.filter);
                }
            })));
        }
        // this.subscriptions.push(self.parasMappingManagerService.getMetaDataInfoById(self.qoId).subscribe(voInfo => {
        //   if (voInfo) {
        //     self.co = JSON.parse(voInfo.content).QueryNode;
        //   }
        // }));
        // }
        if (this.isMultiForm) {
            /** @type {?} */
            const divShowToolBarDom = (/** @type {?} */ (document.getElementById(this.toolBarEvent)));
            divShowToolBarDom.addEventListener('mouseover', (/**
             * @return {?}
             */
            () => {
                this.isShowToolbar = true;
            }));
            divShowToolBarDom.addEventListener('mouseout', (/**
             * @return {?}
             */
            () => {
                this.isShowToolbar = false;
            }));
        }
    }
    /**
     * @private
     * @param {?} newValue
     * @param {?=} type
     * @return {?}
     */
    initColListData(newValue, type) {
        newValue.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            this.recursiveInitColListData(null, col, type);
        }));
    }
    /**
     * @private
     * @param {?} children
     * @param {?} col
     * @param {?=} type
     * @return {?}
     */
    recursiveInitColListData(children, col, type) {
        if (col) {
            /** @type {?} */
            const index = this.co.ContainElements.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.Code === col.bindField));
            if (index < 0) {
                /** @type {?} */
                const node = {};
                node['ID'] = EventBus.guid();
                node['Code'] = col.bindField;
                node['LabelID'] = col.bindField;
                node['MDataType'] = this.getDataType(col.type);
                node['NodeType'] = 'QueryProperty';
                node['Name'] = col.name;
                this.co.ContainElements.push(node);
            }
            else if (type !== 'col') {
                this.co.ContainElements[index]['Name'] = col.name;
            }
            if (col.childList && col.childList.length) {
                this.recursiveInitColListData(col.childList, null);
            }
        }
        else {
            children.forEach((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                /** @type {?} */
                const index = this.co.ContainElements.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item.Code === c.bindField));
                if (index < 0) {
                    /** @type {?} */
                    const node = {};
                    node['ID'] = EventBus.guid();
                    node['Code'] = c.bindField;
                    node['LabelID'] = c.bindField;
                    node['MDataType'] = this.getDataType(c.type);
                    node['NodeType'] = 'QueryProperty';
                    node['Name'] = c.name;
                    this.co.ContainElements.push(node);
                }
                else if (type !== 'col') {
                    this.co.ContainElements[index]['Name'] = c.name;
                }
                if (c.childList && c.childList.length) {
                    this.recursiveInitColListData(c.childList, null);
                }
            }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const changeName in changes) {
            /** @type {?} */
            const newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                this.tabId = RtfServices.getTabId(newValue);
                switch (changeName) {
                    case 'queryId':
                        if (newValue) {
                            QDPCacheUtil.setCache(this.tabId + 'queryId', newValue);
                        }
                        break;
                    case 'qoManagerCode':
                        if (newValue) {
                            QDPCacheUtil.setCache(this.tabId + 'qoManagerCode', newValue);
                        }
                        break;
                    case 'controlType':
                        if (newValue) {
                            QDPCacheUtil.setCache(this.tabId + 'controlType', newValue);
                        }
                        break;
                    case 'queryRelativeUrl':
                        if (newValue) {
                            QDPCacheUtil.setCache(this.tabId + 'queryRelativeUrl', newValue);
                        }
                        break;
                    case 'voId':
                        if (newValue) {
                            QDPCacheUtil.setCache(this.tabId + 'voId', newValue);
                        }
                        break;
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const self = this;
        this.subscriptions.push(self.getQdpView().sheetChanged.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            self.groupType = value;
        })));
        if (this.getConditionDialog()) { // 生成型高级查询表单分支
            this.subscriptions.push(self.getConditionDialog().queryEvent.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data === 1) {
                    self.getQdpView().initQdpView();
                }
                else if (data > 1) {
                    self.refresh();
                }
            })));
            this.subscriptions.push(self.getConditionDialog().dialogInitEvent.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (self.templateType === 'qdpAdvancedTemplate') {
                    self.getConditionDialog().handleDialogShow();
                }
            })));
        }
        else { // 解析型高级查询表单分支
            EventBus.register(this.tabId + 'advanceTemplate-condition-dialog-queryEvent', (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data === 1) {
                    self.getQdpView().initQdpView();
                }
                else if (data > 1) {
                    self.refresh();
                }
            }), this.tabId);
            EventBus.register(this.tabId + 'advanceTemplate-condition-dialog-dialogInitEvent', (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (self.templateType === 'qdpAdvancedTemplate') {
                    self.getConditionDialog().handleDialogShow();
                }
            }), this.tabId);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    handleSchemaSelected(id) {
        this.schemaId = id;
        if (this.controlType !== 'charts') {
            if (this.getQdpView()) {
                this.getQdpView().initSpread(this.queryId, id, this.controlType, this.qoManagerCode, this.pageIndex, this.queryRelativeUrl, this.conditionExpression, this.groupType, this.voId, null, true);
            }
        }
        else {
            if (this.getCharts()) {
                this.getCharts().render(id, this.getChartsOption(id), '', this.conditionExpression);
            }
            else if (this.getFormDatasource()) {
                this.getFormDatasource().charts.setOption(this.getChartsOption(this.schemaId));
            }
        }
        this.pageIndex = 1;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    handleBeforeClose(id) {
        this.schemaId = id;
        if (this.controlType !== 'charts') {
            if (this.getQdpView()) {
                this.getQdpView().initSpread(this.queryId, id, this.controlType, this.qoManagerCode, this.pageIndex, this.queryRelativeUrl, this.conditionExpression, this.groupType, this.voId, null, true);
            }
        }
        else {
            if (this.getCharts()) {
                this.getCharts().render(id, this.getChartsOption(id), '', this.conditionExpression);
            }
            else if (this.getFormDatasource()) {
                this.getFormDatasource().charts.setOption(this.getChartsOption(id));
            }
        }
        this.pageIndex = this.pageIndex ? this.pageIndex : 1;
    }
    /**
     * @return {?}
     */
    refresh() {
        if (this.controlType !== 'charts') {
            if (this.getQdpView()) {
                this.getQdpView().pageIndex = this.pageIndex;
                this.getQdpView().initSpread(this.queryId, this.schemaId, this.controlType, this.qoManagerCode, this.pageIndex, this.queryRelativeUrl, this.conditionExpression, this.groupType, this.voId);
            }
        }
        else {
            if (this.getCharts()) {
                this.getCharts().render(this.schemaId, this.getChartsOption(this.schemaId), '', this.conditionExpression);
            }
            else if (this.getFormDatasource()) {
                this.getFormDatasource().charts.setOption(this.getChartsOption(this.schemaId));
            }
        }
        this.pageIndex = this.pageIndex ? this.pageIndex : 1;
    }
    /**
     * @return {?}
     */
    clearCache() {
        this.renderService.clearCache(this.queryId, this.schemaId, this.controlType, this.qoManagerCode, this.queryRelativeUrl, this.conditionExpression, this.groupType, this.voId);
    }
    /**
     * @return {?}
     */
    clearSort() {
        this.getQdpView().handleClearSort();
    }
    /**
     * @param {?} pageInfo
     * @return {?}
     */
    handlePageChange(pageInfo) {
        this.pageIndex = pageInfo.pageIndex;
        if (this.controlType !== 'crosstab') {
            this.getQdpView().pageIndex = this.pageIndex;
            this.getQdpView().initSpread(this.queryId, this.schemaId, this.controlType, this.qoManagerCode, this.pageIndex, this.queryRelativeUrl, this.conditionExpression, this.groupType, this.voId);
        }
        else {
            this.getQdpView().handleCrosstabPageChange(this.pageIndex, pageInfo.pageSize);
        }
    }
    /**
     * @param {?} eventData
     * @return {?}
     */
    handleExportExcel(eventData) {
        this.getQdpView().exportExcel(this.queryId, this.schemaId, this.controlType, this.pageIndex, this.qoManagerCode, this.queryRelativeUrl, this.conditionExpression, this.groupType, this.voId, this.pageInfo.totalCount, eventData);
    }
    /**
     * @param {?} eventData
     * @return {?}
     */
    pdfExportEvent(eventData) {
        this.getQdpView().pdfExportEvent(this.queryId, this.schemaId, this.controlType, this.qoManagerCode, eventData, this.queryRelativeUrl, this.conditionExpression, this.pageIndex, this.groupType, this.voId);
    }
    /**
     * @param {?} eventData
     * @return {?}
     */
    printPreview(eventData) {
        this.getQdpView().printPreView(this.queryId, this.schemaId, this.controlType, this.qoManagerCode, eventData, this.queryRelativeUrl, this.conditionExpression, this.pageIndex, this.groupType, this.voId);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        this.size.height = event.newHeight + 'px';
        this.size.width = (event.newWidth ? (event.newWidth - 15) : 0) + 'px';
        this.contentSizeChange.emit(Object.assign({}, this.size));
    }
    /**
     * @private
     * @param {?} schemaId
     * @return {?}
     */
    getChartsOption(schemaId) {
        /** @type {?} */
        let chartsOption = {};
        if (schemaId === 'prefab') {
        }
        else if (this.schemaInfo && this.schemaInfo.schemaList && this.schemaInfo.schemaList[schemaId]) {
            chartsOption = Object.assign({}, this.schemaInfo.schemaList[schemaId].schemaValue.chartsStyle, this.schemaInfo.schemaList[schemaId].schemaValue.chartsData);
        }
        if (chartsOption.series && this.schemaInfo.schemaList[schemaId].schemaValue.chartsType.series.type) {
            chartsOption.series.type = this.schemaInfo.schemaList[schemaId].schemaValue.chartsType.series.type;
            if (chartsOption.series.type !== 'line1') {
                delete chartsOption.series.areaStyle;
            }
            else {
                chartsOption.series.areaStyle = {};
            }
        }
        return chartsOption;
    }
    /**
     * @return {?}
     */
    filterCondition() {
        /** @type {?} */
        const self = this;
        if (this.co && this.co.ContainElements && this.co.ContainElements.length) {
            this.filter.addCommonObject(this.co);
            this.filter.addInjectedEntity(this.co.Code, 'CommonObject');
            // if (this.conditionExpression) {
            this.filter.addFilterCondition(this.conditionExpression);
            // }
            this.filter.buildExpression().then((/**
             * @param {?} buildedExpression
             * @return {?}
             */
            buildedExpression => {
                this.conditionExpression = buildedExpression;
                if (buildedExpression) {
                    // tslint:disable-next-line:max-line-length
                    /** @type {?} */
                    const filter = { Id: EventBus.guid(), filter: buildedExpression, queryid: this.queryId, datasourceid: this.qoManagerCode ? this.qoManagerCode : this.queryId, queryType: 1 };
                    this.subscriptions.push(self.filterService.saveFilter(filter, self.queryRelativeUrl)
                        .subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => self.refresh())));
                }
                else {
                    this.subscriptions.push(self.filterService.deleteFilter(self.qoManagerCode ? self.qoManagerCode : self.queryId, self.queryId, self.queryRelativeUrl, 1).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => self.refresh())));
                    this.conditionExpression = null;
                    if (self.controlType !== 'charts') {
                        self.getQdpView().conditionExpression = null;
                    }
                }
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    expendCollapseLevel($event) {
        /** @type {?} */
        const maxLevel = this.getQdpView().spread.getActiveSheet().rowOutlines.getMaxLevel();
        for (let index = 1; index <= maxLevel; index++) {
            this.getQdpView().spread.getActiveSheet().rowOutlines.expand(index, $event);
        }
        this.getQdpView().spread.getActiveSheet().resumePaint();
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getDataType(type) {
        /** @type {?} */
        let result = 'String';
        switch (type) {
            case 'string':
                result = 'String';
                break;
            case 'text':
                result = 'Text';
                break;
            case 'integer':
            case 'int':
                result = 'Integer';
                break;
            case 'decimal':
                result = 'Decimal';
                break;
            case 'boolean':
                result = 'Boolean';
                break;
            case 'date':
                result = 'Date';
                break;
            case 'dateTime':
                result = 'DateTime';
                break;
            case 'binary':
                result = 'Binary';
                break;
            default:
                break;
        }
        return result;
    }
}
QueryFrameworkLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'query-framework-layout',
                template: "<div class=\"f-page f-page-is-managelist\" id =\"{{toolBarEvent}}\" >\r\n  <div class=\"f-page-header mt-1\" [ngClass]=\"{'floatShow shadow-none': isMultiForm && isShowToolbar }\"\r\n    [hidden]=\"!isShowToolbar\">\r\n    <query-framework-toolbar [formPrintOption]=\"formPrintOption\" [conditionDialog]=\"conditionDialog\" [templateType]=\"templateType\" [schemaInfo]=\"schemaInfo\" [colList]=\"colList\" [pageInfo]=\"pageInfo\" [schemaId]=\"schemaId\"\r\n      [queryId]=\"queryId\" [groupType]=\"groupType\" [queryName]=\"queryName\" [controlType]=\"controlType\" [isShowToolbar]=\"isShowToolbar\"\r\n      [isMultiForm]=\"isMultiForm\" [inputTemplate]=\"inputTemplate\" [qoManagerCode]=\"qoManagerCode\" [qdpView]=\"qdpView\" [conditionExpression]=\"conditionExpression\"\r\n      [queryRelativeUrl]=\"queryRelativeUrl\" [qoId]=\"qoId\" [voId]=\"voId\" (schemaSelected)=\"handleSchemaSelected($event)\"\r\n      (dialogBeforeClose)=\"handleBeforeClose($event)\" (pageChange)=\"handlePageChange($event)\"\r\n      (exportExcel)=\"handleExportExcel($event)\" (printIntegration)=\"pdfExportEvent($event)\" (printPreview)=\"printPreview($event)\" (refreshEvent)=\"refresh()\"\r\n      (filterCondition)=\"filterCondition()\" (clearCache)=\"clearCache()\" (clearSort)=\"clearSort()\"\r\n      (expendCollapseLevel)=\"expendCollapseLevel($event)\"\r\n      [showSchemaManager]=\"toolbarOption.showSchemaManager\"\r\n      [showExport]=\"toolbarOption.showExport\"\r\n      [showReFresh]=\"toolbarOption.showReFresh\"\r\n      [showFilter]=\"toolbarOption.showFilter\"\r\n      [showPrint]=\"toolbarOption.showPrint\"\r\n      [showClearSort]=\"toolbarOption.showClearSort\"\r\n      [showClearCache]=\"toolbarOption.showClearCache\"\r\n      [showPreSchema]=\"toolbarOption.showPreSchema\"\r\n      >\r\n    </query-framework-toolbar>\r\n  </div>\r\n  <div class=\"position-relative h-100 ml-2 mr-2 bg-white farris-overflow-y-auto\">\r\n    <div class=\"farris-form farris-card-content-bg f-utils-absolute-all f-utils-flex-column\" (resized)=\"onResized($event)\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".floatShow{position:absolute;right:2px;top:2px;z-index:1;background-color:rgba(255,255,255,.15)}"]
            }] }
];
/** @nocollapse */
QueryFrameworkLayoutComponent.ctorParameters = () => [
    { type: SchemaService },
    { type: RenderService },
    { type: FilterService },
    { type: FilterManagerService },
    { type: ParasMappingManagerService }
];
QueryFrameworkLayoutComponent.propDecorators = {
    queryId: [{ type: Input }],
    groupType: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    controlType: [{ type: Input }],
    queryName: [{ type: Input }],
    isShowToolbar: [{ type: Input }],
    isMultiForm: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    qoId: [{ type: Input }],
    voId: [{ type: Input }],
    templateType: [{ type: Input }],
    isInit: [{ type: Input }],
    toolbarOption: [{ type: Input }],
    qdpView: [{ type: ContentChild, args: ['qdp-view',] }],
    charts: [{ type: ContentChild, args: ['lcpBindingData',] }],
    formdatasource: [{ type: ContentChild, args: ['formBindingData',] }],
    conditionDialog: [{ type: Input }],
    toolbarComponent: [{ type: ViewChild, args: [QueryFrameworkToolbarComponent,] }],
    contentSizeChange: [{ type: Output }],
    formPrintOption: [{ type: Input }],
    inputTemplate: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.queryId;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.groupType;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.qoManagerCode;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.controlType;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.queryName;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.isShowToolbar;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.isMultiForm;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.queryRelativeUrl;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.qoId;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.voId;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.templateType;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.isInit;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.toolbarOption;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.qdpView;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.toolBarEvent;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.tabId;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.charts;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.formdatasource;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.conditionDialog;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.toolbarComponent;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.contentSizeChange;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.formPrintOption;
    /**
     * 模板作为参数
     * @type {?}
     */
    QueryFrameworkLayoutComponent.prototype.inputTemplate;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.size;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.schemaInfo;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.colList;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.pageInfo;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.schemaId;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.pageIndex;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.conditionExpression;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.co;
    /** @type {?} */
    QueryFrameworkLayoutComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    QueryFrameworkLayoutComponent.prototype.schemaService;
    /**
     * @type {?}
     * @private
     */
    QueryFrameworkLayoutComponent.prototype.renderService;
    /**
     * @type {?}
     * @private
     */
    QueryFrameworkLayoutComponent.prototype.filter;
    /**
     * @type {?}
     * @private
     */
    QueryFrameworkLayoutComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    QueryFrameworkLayoutComponent.prototype.parasMappingManagerService;
}
//# sourceMappingURL=data:application/json;base64,