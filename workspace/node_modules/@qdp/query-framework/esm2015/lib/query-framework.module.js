/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FlexLayoutModule } from '@farris/ui-flex-layout';
import { FDropdownDirectiveTypeModule, FDropdownDirective } from '@farris/ui-dropdown';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { InputGroupModule } from '@farris/ui-input-group';
import { NotifyModule } from '@farris/ui-notify';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { TreeTableModule } from '@farris/ui-treetable';
import { IdeCmpModule } from '@qdp/ide-cmp';
import { QueryFrameworkLayoutComponent } from './component/qf-layout/qf-layout.component';
import { QueryFrameworkToolbarComponent } from './component/qf-toolbar/qf-toolbar.component';
import { QueryFrameworkPaginationComponent } from './component/qf-pagination/qf-pagination.component';
import { ExportDataComponent } from './component/export-data/export-data.component';
import { FilterConditionModule, FilterService } from '@gsp-svc/filtercondition';
import { ConditionSchemaService } from '@qdp/condition-schema';
import { FilterManagerService } from '@qdp/common';
import { CloudPrintModule } from '@gsp-svc/cloudprint';
import { ConditionDialogComponent } from './component/condition-dialog/condition-dialog.component';
import { ConditionManagerDialogComponent } from './component/condition-manager-dialog/condition-manager-dialog.component';
import { SaveasSchemaDialogComponent } from './component/saveas-schema-dialog/saveas-schema-dialog.component';
import { ConditionDialogTabComponent } from './component/condition-dialog-tab/condition-dialog-tab.component';
export class QueryFrameworkModule {
}
QueryFrameworkModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    NotifyModule,
                    FDropdownDirectiveTypeModule,
                    FlexLayoutModule,
                    TreeTableModule,
                    PerfectScrollbarModule,
                    IdeCmpModule,
                    FilterConditionModule,
                    // LocalizeModule,
                    CloudPrintModule,
                    FarrisDialogModule,
                    InputGroupModule
                ],
                declarations: [
                    QueryFrameworkLayoutComponent,
                    QueryFrameworkToolbarComponent,
                    QueryFrameworkPaginationComponent,
                    ExportDataComponent,
                    ConditionDialogComponent,
                    ConditionManagerDialogComponent,
                    SaveasSchemaDialogComponent,
                    ConditionDialogTabComponent
                ],
                providers: [
                    FDropdownDirective,
                    FilterService,
                    FilterManagerService,
                    ConditionSchemaService
                ],
                exports: [
                    QueryFrameworkLayoutComponent,
                    QueryFrameworkToolbarComponent,
                    QueryFrameworkPaginationComponent,
                    ExportDataComponent,
                    ConditionDialogComponent,
                    ConditionManagerDialogComponent,
                    SaveasSchemaDialogComponent,
                    ConditionDialogTabComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktZnJhbWV3b3JrLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BxZHAvcXVlcnktZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LWZyYW1ld29yay5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDMUYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDN0YsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDdEcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGFBQWEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUVsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUNuRyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx5RUFBeUUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUM5RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQThDOUcsTUFBTSxPQUFPLG9CQUFvQjs7O1lBNUNoQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLFlBQVk7b0JBQ1osNEJBQTRCO29CQUM1QixnQkFBZ0I7b0JBQ2hCLGVBQWU7b0JBQ2Ysc0JBQXNCO29CQUN0QixZQUFZO29CQUNaLHFCQUFxQjtvQkFDckIsa0JBQWtCO29CQUNsQixnQkFBZ0I7b0JBQ2hCLGtCQUFrQjtvQkFDbEIsZ0JBQWdCO2lCQUNqQjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osNkJBQTZCO29CQUM3Qiw4QkFBOEI7b0JBQzlCLGlDQUFpQztvQkFDakMsbUJBQW1CO29CQUNuQix3QkFBd0I7b0JBQ3hCLCtCQUErQjtvQkFDL0IsMkJBQTJCO29CQUMzQiwyQkFBMkI7aUJBQzVCO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxrQkFBa0I7b0JBQ2xCLGFBQWE7b0JBQ2Isb0JBQW9CO29CQUNwQixzQkFBc0I7aUJBQ3ZCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCw2QkFBNkI7b0JBQzdCLDhCQUE4QjtvQkFDOUIsaUNBQWlDO29CQUNqQyxtQkFBbUI7b0JBQ25CLHdCQUF3QjtvQkFDeEIsK0JBQStCO29CQUMvQiwyQkFBMkI7b0JBQzNCLDJCQUEyQjtpQkFDNUI7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBGbGV4TGF5b3V0TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1mbGV4LWxheW91dCc7XHJcbmltcG9ydCB7IEZEcm9wZG93bkRpcmVjdGl2ZVR5cGVNb2R1bGUsIEZEcm9wZG93bkRpcmVjdGl2ZSB9IGZyb20gJ0BmYXJyaXMvdWktZHJvcGRvd24nO1xyXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBQZXJmZWN0U2Nyb2xsYmFyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1wZXJmZWN0LXNjcm9sbGJhcic7XHJcbmltcG9ydCB7IFRyZWVUYWJsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktdHJlZXRhYmxlJztcclxuaW1wb3J0IHsgSWRlQ21wTW9kdWxlIH0gZnJvbSAnQHFkcC9pZGUtY21wJztcclxuaW1wb3J0IHsgUXVlcnlGcmFtZXdvcmtMYXlvdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9xZi1sYXlvdXQvcWYtbGF5b3V0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFF1ZXJ5RnJhbWV3b3JrVG9vbGJhckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L3FmLXRvb2xiYXIvcWYtdG9vbGJhci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBRdWVyeUZyYW1ld29ya1BhZ2luYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9xZi1wYWdpbmF0aW9uL3FmLXBhZ2luYXRpb24uY29tcG9uZW50JztcclxuaW1wb3J0IHsgRXhwb3J0RGF0YUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L2V4cG9ydC1kYXRhL2V4cG9ydC1kYXRhLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbk1vZHVsZSwgRmlsdGVyU2VydmljZX0gZnJvbSAnQGdzcC1zdmMvZmlsdGVyY29uZGl0aW9uJztcclxuaW1wb3J0IHsgQ29uZGl0aW9uU2NoZW1hU2VydmljZSB9IGZyb20gJ0BxZHAvY29uZGl0aW9uLXNjaGVtYSc7XHJcbmltcG9ydCB7IEZpbHRlck1hbmFnZXJTZXJ2aWNlfSBmcm9tICdAcWRwL2NvbW1vbic7XHJcbmltcG9ydCB7IExvY2FsaXplTW9kdWxlIH0gZnJvbSAnQHFkcC9sb2NhbGl6ZSc7XHJcbmltcG9ydCB7IENsb3VkUHJpbnRNb2R1bGUgfSBmcm9tICdAZ3NwLXN2Yy9jbG91ZHByaW50JztcclxuaW1wb3J0IHsgQ29uZGl0aW9uRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvY29uZGl0aW9uLWRpYWxvZy9jb25kaXRpb24tZGlhbG9nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbmRpdGlvbk1hbmFnZXJEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9jb25kaXRpb24tbWFuYWdlci1kaWFsb2cvY29uZGl0aW9uLW1hbmFnZXItZGlhbG9nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNhdmVhc1NjaGVtYURpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L3NhdmVhcy1zY2hlbWEtZGlhbG9nL3NhdmVhcy1zY2hlbWEtZGlhbG9nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbmRpdGlvbkRpYWxvZ1RhYkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L2NvbmRpdGlvbi1kaWFsb2ctdGFiL2NvbmRpdGlvbi1kaWFsb2ctdGFiLmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcclxuICAgIE5vdGlmeU1vZHVsZSxcclxuICAgIEZEcm9wZG93bkRpcmVjdGl2ZVR5cGVNb2R1bGUsXHJcbiAgICBGbGV4TGF5b3V0TW9kdWxlLFxyXG4gICAgVHJlZVRhYmxlTW9kdWxlLFxyXG4gICAgUGVyZmVjdFNjcm9sbGJhck1vZHVsZSxcclxuICAgIElkZUNtcE1vZHVsZSxcclxuICAgIEZpbHRlckNvbmRpdGlvbk1vZHVsZSxcclxuICAgIC8vIExvY2FsaXplTW9kdWxlLFxyXG4gICAgQ2xvdWRQcmludE1vZHVsZSxcclxuICAgIEZhcnJpc0RpYWxvZ01vZHVsZSxcclxuICAgIElucHV0R3JvdXBNb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgUXVlcnlGcmFtZXdvcmtMYXlvdXRDb21wb25lbnQsXHJcbiAgICBRdWVyeUZyYW1ld29ya1Rvb2xiYXJDb21wb25lbnQsXHJcbiAgICBRdWVyeUZyYW1ld29ya1BhZ2luYXRpb25Db21wb25lbnQsXHJcbiAgICBFeHBvcnREYXRhQ29tcG9uZW50LFxyXG4gICAgQ29uZGl0aW9uRGlhbG9nQ29tcG9uZW50LFxyXG4gICAgQ29uZGl0aW9uTWFuYWdlckRpYWxvZ0NvbXBvbmVudCxcclxuICAgIFNhdmVhc1NjaGVtYURpYWxvZ0NvbXBvbmVudCxcclxuICAgIENvbmRpdGlvbkRpYWxvZ1RhYkNvbXBvbmVudFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBGRHJvcGRvd25EaXJlY3RpdmUsXHJcbiAgICBGaWx0ZXJTZXJ2aWNlLFxyXG4gICAgRmlsdGVyTWFuYWdlclNlcnZpY2UsXHJcbiAgICBDb25kaXRpb25TY2hlbWFTZXJ2aWNlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBRdWVyeUZyYW1ld29ya0xheW91dENvbXBvbmVudCxcclxuICAgIFF1ZXJ5RnJhbWV3b3JrVG9vbGJhckNvbXBvbmVudCxcclxuICAgIFF1ZXJ5RnJhbWV3b3JrUGFnaW5hdGlvbkNvbXBvbmVudCxcclxuICAgIEV4cG9ydERhdGFDb21wb25lbnQsXHJcbiAgICBDb25kaXRpb25EaWFsb2dDb21wb25lbnQsXHJcbiAgICBDb25kaXRpb25NYW5hZ2VyRGlhbG9nQ29tcG9uZW50LFxyXG4gICAgU2F2ZWFzU2NoZW1hRGlhbG9nQ29tcG9uZW50LFxyXG4gICAgQ29uZGl0aW9uRGlhbG9nVGFiQ29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUXVlcnlGcmFtZXdvcmtNb2R1bGUgeyB9XHJcbiJdfQ==