import { OnInit, EventEmitter, TemplateRef, AfterViewInit, OnDestroy, SimpleChanges, OnChanges } from '@angular/core';
import { QdpViewComponent, RenderService } from '@qdp/spread';
import { LcpBindingDataDirective, FormBindingDataDirective } from '@qdp/echarts';
import { SchemaService } from '@qdp/ide-cmp';
import { FilterService } from '@gsp-svc/filtercondition';
import { FilterManagerService, ParasMappingManagerService } from '@qdp/common';
import { QueryFrameworkToolbarComponent } from '../qf-toolbar/qf-toolbar.component';
import { ConditionDialogComponent } from '../condition-dialog/condition-dialog.component';
export declare class QueryFrameworkLayoutComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {
    private schemaService;
    private renderService;
    private filter;
    private filterService;
    private parasMappingManagerService;
    queryId: any;
    groupType: any;
    qoManagerCode: any;
    controlType: any;
    queryName: any;
    isShowToolbar: boolean;
    isMultiForm: boolean;
    queryRelativeUrl: any;
    qoId: any;
    voId: any;
    templateType: any;
    isInit: boolean;
    toolbarOption: {
        showPreSchema: boolean;
        showSchemaManager: boolean;
        showExport: boolean;
        showReFresh: boolean;
        showFilter: boolean;
        showPrint: boolean;
        showClearSort: boolean;
        showClearCache: boolean;
    };
    qdpView: QdpViewComponent;
    toolBarEvent: string;
    tabId: any;
    getQdpView(): any;
    charts: LcpBindingDataDirective;
    getCharts(): any;
    formdatasource: FormBindingDataDirective;
    getFormDatasource(): any;
    conditionDialog: ConditionDialogComponent;
    getConditionDialog(): any;
    toolbarComponent: QueryFrameworkToolbarComponent;
    contentSizeChange: EventEmitter<any>;
    formPrintOption: {
        isShowFormPrint: boolean;
        printBEId: string;
        printFormIdField: string;
    };
    /**
     * 模板作为参数
     */
    inputTemplate: TemplateRef<any>;
    size: {
        height: string;
        width: string;
    };
    schemaInfo: any;
    colList: any;
    pageInfo: any;
    schemaId: any;
    pageIndex: any;
    conditionExpression: any;
    co: any;
    subscriptions: any;
    constructor(schemaService: SchemaService, renderService: RenderService, filter: FilterService, filterService: FilterManagerService, parasMappingManagerService: ParasMappingManagerService);
    ngOnDestroy(): void;
    ngOnInit(): void;
    private initColListData;
    private recursiveInitColListData;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    handleSchemaSelected(id: string): void;
    handleBeforeClose(id: any): void;
    refresh(): void;
    clearCache(): void;
    clearSort(): void;
    handlePageChange(pageInfo: any): void;
    handleExportExcel(eventData: any): void;
    pdfExportEvent(eventData: any): void;
    printPreview(eventData: any): void;
    onResized(event: any): void;
    private getChartsOption;
    filterCondition(): void;
    expendCollapseLevel($event: any): void;
    private getDataType;
}
