/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, HostBinding, ViewChild } from '@angular/core';
import { FilterExpressionComponent } from '@gsp-svc/filtercondition';
import { QDPCacheUtil, RtfServices } from '@qdp/common';
var ConditionDialogTabComponent = /** @class */ (function () {
    function ConditionDialogTabComponent() {
        this.cls = '';
        this.tabIndex = 0;
        this.controlIndexChanged = 0;
        // injector: Injector;
        // @ViewChild('adHost', { read: ViewContainerRef }) adHost: ViewContainerRef;
        // componentFactoryResolver: ComponentFactoryResolver;
        // filterInstance: any;
        this.propertyList = [];
        this.filterExpressionString = '';
        this.showFilterExpression = true;
        this.showForm = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ConditionDialogTabComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var changeName in changes) {
            /** @type {?} */
            var newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                switch (changeName) {
                    case 'propertyList':
                        if (newValue) {
                            this.propertyList = tslib_1.__spread(newValue);
                        }
                        break;
                    case 'filterExpressionString':
                        if (newValue) {
                            this.filterExpressionString = newValue;
                        }
                        break;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    ConditionDialogTabComponent.prototype.changeCss = /**
     * @return {?}
     */
    function () {
        this.cls = this.tabIndex === this.controlIndexChanged ? 'f-utils-fill' : '';
    };
    /**
     * @return {?}
     */
    ConditionDialogTabComponent.prototype.createFilterComponent = /**
     * @return {?}
     */
    function () {
        // if (this.injector) {
        //   this.componentFactoryResolver = this.injector.get(ComponentFactoryResolver);
        //   const componentFactory = this.componentFactoryResolver.resolveComponentFactory(FilterExpressionComponent);
        //   this.adHost.clear();
        //   const componentRef = this.adHost.createComponent(componentFactory);
        //   this.filterInstance = componentRef.instance;
        //   this.filterInstance.propertyList = this.propertyList;
        //   this.filterInstance.filterExpressionString = this.filterExpressionString;
        // }
    };
    /**
     * @return {?}
     */
    ConditionDialogTabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        try {
            if (QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs')) {
                QDPCacheUtil.getCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs').push(this);
            }
            else {
                QDPCacheUtil.setCache(RtfServices.getTabId('condition-dialog-tabs') + 'condition-dialog-tabs', [this]);
            }
        }
        catch (e) {
        }
        this.changeCss();
    };
    ConditionDialogTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'condition-dialog-tab',
                    template: "<div class=\"h-100 f-utils-fill\" [style.display]=\"tabIndex===controlIndexChanged?'block':'none'\">\r\n  <div class=\"f-utils-fill-flex-row h-100\" *ngIf=\"tabIndex==1 && showFilterExpression\">\r\n    <div class=\"f-utils-fill-auto h-100\">\r\n      <app-filter-expression #funcFilter class=\"h-100\" [propertyList]=\"propertyList\" [filterExpressionString]=\"filterExpressionString\"></app-filter-expression>\r\n    </div>\r\n  </div>\r\n  <div class=\"f-utils-fill-flex-row h-100\" *ngIf=\"tabIndex!=1 || showForm\">\r\n    <div class=\"f-utils-fill-auto h-100\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ConditionDialogTabComponent.ctorParameters = function () { return []; };
    ConditionDialogTabComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        tabIndex: [{ type: Input }],
        filterInstance: [{ type: ViewChild, args: [FilterExpressionComponent,] }],
        propertyList: [{ type: Input }],
        filterExpressionString: [{ type: Input }],
        showFilterExpression: [{ type: Input }],
        showForm: [{ type: Input }]
    };
    return ConditionDialogTabComponent;
}());
export { ConditionDialogTabComponent };
if (false) {
    /** @type {?} */
    ConditionDialogTabComponent.prototype.cls;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.tabIndex;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.controlIndexChanged;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.filterInstance;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.propertyList;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.filterExpressionString;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.showFilterExpression;
    /** @type {?} */
    ConditionDialogTabComponent.prototype.showForm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLWRpYWxvZy10YWIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9xdWVyeS1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L2NvbmRpdGlvbi1kaWFsb2ctdGFiL2NvbmRpdGlvbi1kaWFsb2ctdGFiLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBMkMsU0FBUyxFQUF5QyxNQUFNLGVBQWUsQ0FBQztBQUNqSyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4RDtJQXFCRTtRQWRBLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFFQSxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLHdCQUFtQixHQUFHLENBQUMsQ0FBQzs7Ozs7UUFNZixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQiwyQkFBc0IsR0FBRyxFQUFFLENBQUM7UUFDNUIseUJBQW9CLEdBQUcsSUFBSSxDQUFDO1FBQzVCLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFHMUIsQ0FBQzs7Ozs7SUFFRCxpREFBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsS0FBSyxJQUFNLFVBQVUsSUFBSSxPQUFPLEVBQUU7O2dCQUMxQixRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVk7WUFDakQsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxLQUFLLENBQUMsRUFBRTtnQkFDNUMsUUFBUSxVQUFVLEVBQUU7b0JBQ2xCLEtBQUssY0FBYzt3QkFDakIsSUFBSSxRQUFRLEVBQUU7NEJBQ1osSUFBSSxDQUFDLFlBQVksb0JBQU8sUUFBUSxDQUFDLENBQUM7eUJBQ25DO3dCQUNELE1BQU07b0JBQ1IsS0FBSyx3QkFBd0I7d0JBQzNCLElBQUksUUFBUSxFQUFFOzRCQUNaLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxRQUFRLENBQUM7eUJBQ3hDO3dCQUNELE1BQU07aUJBQ1Q7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELCtDQUFTOzs7SUFBVDtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFRCwyREFBcUI7OztJQUFyQjtRQUNFLHVCQUF1QjtRQUN2QixpRkFBaUY7UUFDakYsK0dBQStHO1FBQy9HLHlCQUF5QjtRQUN6Qix3RUFBd0U7UUFDeEUsaURBQWlEO1FBQ2pELDBEQUEwRDtRQUMxRCw4RUFBOEU7UUFDOUUsSUFBSTtJQUNOLENBQUM7Ozs7SUFFRCw4Q0FBUTs7O0lBQVI7UUFDRSxJQUFJO1lBQ0YsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxFQUFFO2dCQUNsRyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzRztpQkFBTTtnQkFDTCxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyx1QkFBdUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDeEc7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1NBQ1g7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7Z0JBdEVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyw4b0JBQW9EOztpQkFFckQ7Ozs7O3NCQUVFLFdBQVcsU0FBQyxPQUFPOzJCQUduQixLQUFLO2lDQUVMLFNBQVMsU0FBQyx5QkFBeUI7K0JBS25DLEtBQUs7eUNBQ0wsS0FBSzt1Q0FDTCxLQUFLOzJCQUNMLEtBQUs7O0lBcURSLGtDQUFDO0NBQUEsQUF4RUQsSUF3RUM7U0FuRVksMkJBQTJCOzs7SUFDdEMsMENBQ1M7O0lBRVQsK0NBQXNCOztJQUN0QiwwREFBd0I7O0lBQ3hCLHFEQUFnRjs7SUFLaEYsbURBQTJCOztJQUMzQiw2REFBcUM7O0lBQ3JDLDJEQUFxQzs7SUFDckMsK0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBIb3N0QmluZGluZywgU2ltcGxlQ2hhbmdlcywgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q2hpbGQsIE9uQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsdGVyRXhwcmVzc2lvbkNvbXBvbmVudCB9IGZyb20gJ0Bnc3Atc3ZjL2ZpbHRlcmNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFFEUENhY2hlVXRpbCwgUnRmU2VydmljZXMgfSBmcm9tICdAcWRwL2NvbW1vbic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2NvbmRpdGlvbi1kaWFsb2ctdGFiJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY29uZGl0aW9uLWRpYWxvZy10YWIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2NvbmRpdGlvbi1kaWFsb2ctdGFiLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uRGlhbG9nVGFiQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxyXG4gIGNscyA9ICcnO1xyXG5cclxuICBASW5wdXQoKSB0YWJJbmRleCA9IDA7XHJcbiAgY29udHJvbEluZGV4Q2hhbmdlZCA9IDA7XHJcbiAgQFZpZXdDaGlsZChGaWx0ZXJFeHByZXNzaW9uQ29tcG9uZW50KSBmaWx0ZXJJbnN0YW5jZTogRmlsdGVyRXhwcmVzc2lvbkNvbXBvbmVudDtcclxuICAvLyBpbmplY3RvcjogSW5qZWN0b3I7XHJcbiAgLy8gQFZpZXdDaGlsZCgnYWRIb3N0JywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIGFkSG9zdDogVmlld0NvbnRhaW5lclJlZjtcclxuICAvLyBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICAvLyBmaWx0ZXJJbnN0YW5jZTogYW55O1xyXG4gIEBJbnB1dCgpIHByb3BlcnR5TGlzdCA9IFtdO1xyXG4gIEBJbnB1dCgpIGZpbHRlckV4cHJlc3Npb25TdHJpbmcgPSAnJztcclxuICBASW5wdXQoKSBzaG93RmlsdGVyRXhwcmVzc2lvbiA9IHRydWU7XHJcbiAgQElucHV0KCkgc2hvd0Zvcm0gPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBmb3IgKGNvbnN0IGNoYW5nZU5hbWUgaW4gY2hhbmdlcykge1xyXG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGNoYW5nZXNbY2hhbmdlTmFtZV0uY3VycmVudFZhbHVlO1xyXG4gICAgICBpZiAobmV3VmFsdWUgIT09IG51bGwgJiYgbmV3VmFsdWUgIT09IHZvaWQgMCkge1xyXG4gICAgICAgIHN3aXRjaCAoY2hhbmdlTmFtZSkge1xyXG4gICAgICAgICAgY2FzZSAncHJvcGVydHlMaXN0JzpcclxuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eUxpc3QgPSBbLi4ubmV3VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnZmlsdGVyRXhwcmVzc2lvblN0cmluZyc6XHJcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuZmlsdGVyRXhwcmVzc2lvblN0cmluZyA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hhbmdlQ3NzKCkge1xyXG4gICAgdGhpcy5jbHMgPSB0aGlzLnRhYkluZGV4ID09PSB0aGlzLmNvbnRyb2xJbmRleENoYW5nZWQgPyAnZi11dGlscy1maWxsJyA6ICcnO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlRmlsdGVyQ29tcG9uZW50KCkge1xyXG4gICAgLy8gaWYgKHRoaXMuaW5qZWN0b3IpIHtcclxuICAgIC8vICAgdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSB0aGlzLmluamVjdG9yLmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xyXG4gICAgLy8gICBjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoRmlsdGVyRXhwcmVzc2lvbkNvbXBvbmVudCk7XHJcbiAgICAvLyAgIHRoaXMuYWRIb3N0LmNsZWFyKCk7XHJcbiAgICAvLyAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuYWRIb3N0LmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5KTtcclxuICAgIC8vICAgdGhpcy5maWx0ZXJJbnN0YW5jZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcclxuICAgIC8vICAgdGhpcy5maWx0ZXJJbnN0YW5jZS5wcm9wZXJ0eUxpc3QgPSB0aGlzLnByb3BlcnR5TGlzdDtcclxuICAgIC8vICAgdGhpcy5maWx0ZXJJbnN0YW5jZS5maWx0ZXJFeHByZXNzaW9uU3RyaW5nID0gdGhpcy5maWx0ZXJFeHByZXNzaW9uU3RyaW5nO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoUURQQ2FjaGVVdGlsLmdldENhY2hlKFJ0ZlNlcnZpY2VzLmdldFRhYklkKCdjb25kaXRpb24tZGlhbG9nLXRhYnMnKSArICdjb25kaXRpb24tZGlhbG9nLXRhYnMnKSkge1xyXG4gICAgICAgIFFEUENhY2hlVXRpbC5nZXRDYWNoZShSdGZTZXJ2aWNlcy5nZXRUYWJJZCgnY29uZGl0aW9uLWRpYWxvZy10YWJzJykgKyAnY29uZGl0aW9uLWRpYWxvZy10YWJzJykucHVzaCh0aGlzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBRRFBDYWNoZVV0aWwuc2V0Q2FjaGUoUnRmU2VydmljZXMuZ2V0VGFiSWQoJ2NvbmRpdGlvbi1kaWFsb2ctdGFicycpICsgJ2NvbmRpdGlvbi1kaWFsb2ctdGFicycsIFt0aGlzXSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgIH1cclxuICAgIHRoaXMuY2hhbmdlQ3NzKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=