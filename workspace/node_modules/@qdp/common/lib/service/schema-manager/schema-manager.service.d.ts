import { Observable, Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { SchemaRenderExtendService } from '../extend-service/schema-renderextend.service';
export declare class SchemaManagerService {
    private restService;
    private sessionService;
    private host;
    private schemaRenderExtendService;
    private uri;
    schemaInfoChange: Subject<any>;
    colList: Subject<any>;
    controlType: Subject<string>;
    schemaInfo: any;
    schemaid: any;
    operationChange: Subject<any>;
    dynamicCols: any;
    customSchema: any;
    dynamicColIndex: number;
    preSchema: {
        id: string;
        schemaName: string;
        isPrefab: number;
        isDefault: number;
        isProtected: string;
        schemaValue: {
            titleOption: {
                title: string;
                subTitles: any[];
            };
            columnOption: {
                maxLevel: number;
                colList: any[];
            };
            styleOption: {
                Title: {
                    fontFamily: number;
                    size: number;
                    fontWeight: number;
                    fontStyle: number;
                    textDecoration: number;
                    fontColor: string;
                    rowHeight: number;
                };
                SubTitle: {
                    fontFamily: number;
                    size: number;
                    fontWeight: number;
                    fontStyle: number;
                    textDecoration: number;
                    fontColor: string;
                    rowHeight: number;
                };
                Header: {
                    fontFamily: number;
                    size: number;
                    fontWeight: number;
                    fontStyle: number;
                    textDecoration: number;
                    fontColor: string;
                    rowHeight: number;
                };
                DataArea: {
                    fontFamily: number;
                    size: number;
                    fontWeight: number;
                    fontStyle: number;
                    textDecoration: number;
                    fontColor: string;
                    rowHeight: number;
                };
                Footer: {
                    fontFamily: number;
                    size: number;
                    fontWeight: number;
                    fontStyle: number;
                    textDecoration: number;
                    fontColor: string;
                    rowHeight: number;
                };
            };
            otherOption: {
                showFilterRow: boolean;
                dataCahce: boolean;
                level: string;
                isDetails: string;
                loadDataType: number;
                pageSize: number;
                treeInfoType: number;
                pathField: string;
                pathStep: number;
                idField: string;
                parentField: string;
                firstLoad: boolean;
                showZero: boolean;
                expand: boolean;
                showHeaderSort: boolean;
            };
        };
    };
    isDefaultSchema: any;
    schemaList: any;
    operations: {};
    constructor(restService: RestfulService, sessionService: SessionService, host: string, schemaRenderExtendService: SchemaRenderExtendService);
    getSpreadTemplate(id: string, queryId: string, dynamicCols: any, queryRelativeUrl: any, scheme?: any, frozenCols?: any, groupType?: any): Observable<any>;
    /**
     * 获取指定方案
     * @param id 方案ID
     * @param queryId 查询编号
     */
    getSchema(id: string, queryId: string, queryRelativeUrl: any, groupType?: any, organizationId?: any, fromCache?: any): Observable<any>;
    /**
     * 获取默认方案
     */
    getDefaultSchema(queryId: string, queryRelativeUrl: any, groupType?: any, organizationId?: any): Observable<any>;
    /**
     * 获取方案列表
     * @param queryId 查询编号
     * @param userId 用户ID
     * @param organizationId 组织id
     */
    getSchemaList(queryId: string, userId: string, organizationId: string, queryRelativeUrl: any): Observable<any>;
    /**
     * 获取方案列表
     * @param queryId 查询编号
     * @param userId 用户ID
     * @param organizationId 组织id
     */
    getSchemaListByGroupType(queryId: string, userId: string, organizationId: string, groupType: any, queryRelativeUrl: any): Observable<any>;
    private getSchemas;
    mergeCustomSchema(groupType: any, queryId?: any): any;
    private operateCustomSchema;
    /**
     * 保存方案
     * @param schema 方案实体
     */
    saveSchema(schema: any, queryRelativeUrl: any): Observable<any>;
    /**
     * 删除方案
     * @param id 方案ID
     * @param queryId 查询编号
     */
    deleteSchema(id: string, queryId: string, queryRelativeUrl: any, groupType?: any, organizationId?: any): Observable<any>;
    /**
     * 获取spread模版
     * @param id 方案ID
     */
    analysis(id: string, queryId: string, dynamicCols: any, queryRelativeUrl: any, scheme?: any): Observable<any>;
    getOperation(operators?: any): Observable<any>;
    validateOperation(type: any): boolean;
    setColInfo(dynamicCols: any): void;
    private createHeaderSessionId;
    /**
     * 二开人员预制的格式方案可以显示动态列信息
     */
    operateDynamicColsForSchema(element: any, groupType: any, schemaId?: any): void;
    /**
     * 合并动态列
     */
    private createColumns;
    private getColumn;
    private recursiveGetColumn;
    private recursiveCompareColumn;
}
