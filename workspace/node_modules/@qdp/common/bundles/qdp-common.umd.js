(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('lodash-es'), require('@gsp-svc/cloudprint'), require('rxjs/operators'), require('@ecp-caf/caf-common'), require('@angular/common'), require('rxjs'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@qdp/common', ['exports', '@angular/common/http', 'lodash-es', '@gsp-svc/cloudprint', 'rxjs/operators', '@ecp-caf/caf-common', '@angular/common', 'rxjs', '@angular/core'], factory) :
    (factory((global.qdp = global.qdp || {}, global.qdp.common = {}),global.ng.common.http,global.lodashEs,global.cloudprint,global.rxjs.operators,global.cafCommon,global.ng.common,global.rxjs,global.ng.core));
}(this, (function (exports,http,lodashEs,cloudprint,operators,cafCommon,common,rxjs,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RestfulService = /** @class */ (function () {
        /**
         * 构造函数
         * @param httpClient http客户端
         */
        function RestfulService(httpClient) {
            this.httpClient = httpClient;
        }
        /**
         * 发送GET请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送GET请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.get = /**
         * 发送GET请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, params, options) {
                return this.request(uri, 'GET', params, options);
            };
        /**
         * 发送POST请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送POST请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.put = /**
         * 发送POST请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, body, params, options) {
                /** @type {?} */
                var optionsWithBody = this.addBody(options, body);
                return this.request(uri, 'PUT', params, optionsWithBody);
            };
        /**
         * 发送PUT请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送PUT请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.post = /**
         * 发送PUT请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, body, params, options) {
                /** @type {?} */
                var optionsWithBody = this.addBody(options, body);
                return this.request(uri, 'POST', params, optionsWithBody);
            };
        /**
         * 发送DELETE请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送DELETE请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.delete = /**
         * 发送DELETE请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, params, options) {
                return this.request(uri, 'DELETE', params, options);
            };
        /**
         * 发送请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送请求
         * @private
         * @param {?} uri 请求地址
         * @param {?} method
         * @param {?} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.request = /**
         * 发送请求
         * @private
         * @param {?} uri 请求地址
         * @param {?} method
         * @param {?} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, method, params, options) {
                if (options === void 0) {
                    options = {};
                }
                options = options || {};
                if (params) {
                    /** @type {?} */
                    var httpParams = this.buildParams(params);
                    options.params = httpParams;
                }
                /** @type {?} */
                var methodName = ( /** @type {?} */(method));
                /** @type {?} */
                var result = this.httpClient.request(methodName, uri, options);
                return result;
            };
        /**
         * 构造Http请求参数
         * @param params 请求参数
         */
        /**
         * 构造Http请求参数
         * @private
         * @param {?} params 请求参数
         * @return {?}
         */
        RestfulService.prototype.buildParams = /**
         * 构造Http请求参数
         * @private
         * @param {?} params 请求参数
         * @return {?}
         */
            function (params) {
                /** @type {?} */
                var parameters = {};
                for (var key in params) {
                    if (params.hasOwnProperty(key) && params[key]) {
                        /** @type {?} */
                        var value = params[key].toString();
                        parameters[key] = value;
                    }
                }
                return parameters;
            };
        /**
         * @private
         * @param {?} options
         * @param {?} body
         * @return {?}
         */
        RestfulService.prototype.addBody = /**
         * @private
         * @param {?} options
         * @param {?} body
         * @return {?}
         */
            function (options, body) {
                options = options || {};
                /** @type {?} */
                var mergedOptions = Object.assign(options, { body: body });
                return mergedOptions;
            };
        RestfulService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        RestfulService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return RestfulService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var Server_Host = 'serverHost';
    /** @type {?} */
    var Load_Data_Uri = 'loadDataUri';
    /** @type {?} */
    var Load_Data_Col = 'loadDataCol';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var SchemaRenderExtendService = /** @class */ (function () {
        function SchemaRenderExtendService() {
        }
        SchemaRenderExtendService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ SchemaRenderExtendService.ngInjectableDef = i0.defineInjectable({ factory: function SchemaRenderExtendService_Factory() { return new SchemaRenderExtendService(); }, token: SchemaRenderExtendService, providedIn: "root" });
        return SchemaRenderExtendService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfServices = /** @class */ (function () {
        function RtfServices() {
        }
        /**
         * @param {?=} sessionService
         * @return {?}
         */
        RtfServices.createHeaderSessionId = /**
         * @param {?=} sessionService
         * @return {?}
         */
            function (sessionService) {
                /** @type {?} */
                var options = {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                };
                try {
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session && gspframeworkService.rtf.session.getFormToken()) {
                        options.headers['X-CAF-Runtime-CommonVariable'] = gspframeworkService.rtf.session.getFormToken();
                    }
                    else if (sessionService && sessionService.getCurrentSeesionId()) {
                        options.headers['X-CAF-Runtime-CommonVariable'] = sessionService.getCurrentSeesionId();
                    }
                    else if (sessionService && sessionService.getUserSessionId()) {
                        options.headers['SessionId'] = sessionService.getUserSessionId();
                    }
                    else if (localStorage.getItem('sessionId')) {
                        options.headers['SessionId'] = localStorage.getItem('sessionId');
                    }
                }
                catch (e) { }
                return options;
            };
        /**
         * @param {?=} sessionService
         * @return {?}
         */
        RtfServices.getSessionId = /**
         * @param {?=} sessionService
         * @return {?}
         */
            function (sessionService) {
                /** @type {?} */
                var sessionId;
                try {
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session && gspframeworkService.rtf.session.getFormToken()) {
                        sessionId = gspframeworkService.rtf.session.getFormToken();
                    }
                    else if (sessionService && sessionService.getCurrentSeesionId()) {
                        sessionId = sessionService.getCurrentSeesionId();
                    }
                    else if (sessionService && sessionService.getUserSessionId()) {
                        sessionId = sessionService.getUserSessionId();
                    }
                    else if (localStorage.getItem('sessionId')) {
                        sessionId = localStorage.getItem('sessionId');
                    }
                }
                catch (e) { }
                return sessionId;
            };
        /**
         * @param {?=} queryId
         * @return {?}
         */
        RtfServices.getTabId = /**
         * @param {?=} queryId
         * @return {?}
         */
            function (queryId) {
                try {
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session) {
                        /** @type {?} */
                        var tab = gspframeworkService.rtf.session.getCommonVariable();
                        if (gspframeworkService.rtf.extendMethod && gspframeworkService.rtf.extendMethod.getExtObj && gspframeworkService.rtf.extendMethod.getExtObj() && gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID) {
                            /** @type {?} */
                            var uuid = gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() ? gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() : '';
                            return tab.tabId + uuid;
                        }
                        else {
                            return tab.tabId;
                        }
                    }
                }
                catch (e) {
                    return queryId;
                }
            };
        /**
         * @return {?}
         */
        RtfServices.getInSuiteFrmUUID = /**
         * @return {?}
         */
            function () {
                try {
                    if (gspframeworkService.rtf.extendMethod && gspframeworkService.rtf.extendMethod.getExtObj && gspframeworkService.rtf.extendMethod.getExtObj() && gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID) {
                        /** @type {?} */
                        var uuid = gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() ? gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() : '';
                        return uuid;
                    }
                    else {
                        return "";
                    }
                }
                catch (e) {
                    return "";
                }
            };
        /**
         * @return {?}
         */
        RtfServices.getCommonVariable = /**
         * @return {?}
         */
            function () {
                try {
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session) {
                        /** @type {?} */
                        var tab = gspframeworkService.rtf.session.getCommonVariable();
                        return tab;
                    }
                }
                catch (e) {
                    return null;
                }
            };
        /**
         * @param {?} key
         * @return {?}
         */
        RtfServices.getMenuParameter = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                try {
                    /** @type {?} */
                    var funcId = RtfServices.getCommonVariable().funcId;
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.func) {
                        /** @type {?} */
                        var param_1 = null;
                        /** @type {?} */
                        var callback = ( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            // 回到函数得到res 即参数
                            param_1 = res;
                        });
                        gspframeworkService.rtf.func.getMenuParams(funcId, callback);
                        if (param_1) {
                            return param_1.get(key);
                        }
                    }
                    return null;
                }
                catch (e) {
                    return null;
                }
            };
        /**
         * @param {?} tabId
         * @return {?}
         */
        RtfServices.getMenuSwitchControlParameter = /**
         * @param {?} tabId
         * @return {?}
         */
            function (tabId) {
                return {
                    menuSwitchControl: {
                        key: tabId,
                        value: new rxjs.Subject(),
                        changeEnable: false
                    }
                };
            };
        /**
         * @return {?}
         */
        RtfServices.getMenuSwitchControlEvent = /**
         * @return {?}
         */
            function () {
                try {
                    /** @type {?} */
                    var tabId = RtfServices.getTabId();
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.frmEvent) {
                        /** @type {?} */
                        var param_2 = null;
                        /** @type {?} */
                        var option = RtfServices.getCommonVariable();
                        /** @type {?} */
                        var callback = ( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            // 回到函数得到res 即参数
                            param_2 = res;
                        });
                        gspframeworkService.rtf.frmEvent.eventListener(tabId, callback, option);
                        if (param_2 && param_2.hasOwnProperty('menuSwitchControl') && param_2['menuSwitchControl'].key === tabId) {
                            return param_2['menuSwitchControl'].value;
                        }
                        return null;
                    }
                }
                catch (e) {
                    return null;
                }
            };
        /**
         * 获取功能ID
         * @param option `{appId：'应用ID', appEntrance: '应用入口', appType: '类型：app, menu', funcId: '功能ID', tabId: '标签页ID'}`
         */
        /**
         * 获取功能ID
         * @param {?} option `{appId：'应用ID', appEntrance: '应用入口', appType: '类型：app, menu', funcId: '功能ID', tabId: '标签页ID'}`
         * @return {?}
         */
        RtfServices.getFuncId = /**
         * 获取功能ID
         * @param {?} option `{appId：'应用ID', appEntrance: '应用入口', appType: '类型：app, menu', funcId: '功能ID', tabId: '标签页ID'}`
         * @return {?}
         */
            function (option) {
                return RtfServices.getNewPageIdFunc(option);
            };
        /**
         * @return {?}
         */
        RtfServices.getFuncName = /**
         * @return {?}
         */
            function () {
                try {
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.tabs) {
                        /** @type {?} */
                        var func = gspframeworkService.rtf.tabs.getAll().find(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.id == gspframeworkService.rtf.tabs.getActiveTab().funcId; }));
                        return func.FuncName;
                    }
                    else {
                        return '';
                    }
                }
                catch (e) {
                    return '';
                }
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        RtfServices.getFuncIdOlde = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                /** @type {?} */
                var funcId;
                if (option.appType.toLowerCase() === 'app') {
                    funcId = RtfServices.newPageIdApp(option.appId, option.appEntrance, option.tabId);
                }
                else {
                    funcId = RtfServices.newPageIdFunc(option.funcId, option.tabId);
                }
                return funcId;
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        RtfServices.getNewPageIdFunc = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                try {
                    if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.func) {
                        return gspframeworkService.rtf.func.newPageId(option);
                    }
                    else {
                        return RtfServices.getFuncIdOlde(option);
                    }
                }
                catch (e) {
                    return RtfServices.getFuncIdOlde(option);
                }
            };
        /**
         * @private
         * @param {?} funcId
         * @param {?} tabId
         * @return {?}
         */
        RtfServices.newPageIdFunc = /**
         * @private
         * @param {?} funcId
         * @param {?} tabId
         * @return {?}
         */
            function (funcId, tabId) {
                return tabId ? funcId + "_" + tabId : funcId;
            };
        /**
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @return {?}
         */
        RtfServices.mergeAppId = /**
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @return {?}
         */
            function (appId, appEntrance) {
                return appId + "_" + appEntrance;
            };
        /**
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @return {?}
         */
        RtfServices.newPageIdApp = /**
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @return {?}
         */
            function (appId, appEntrance, tabId) {
                return tabId ? RtfServices.mergeAppId(appId, appEntrance) + "_" + tabId : RtfServices.mergeAppId(appId, appEntrance);
            };
        RtfServices.uuid = "";
        RtfServices.isInSuite = false;
        return RtfServices;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SchemaManagerService = /** @class */ (function () {
        function SchemaManagerService(restService, sessionService, host, schemaRenderExtendService) {
            this.restService = restService;
            this.sessionService = sessionService;
            this.host = host;
            this.schemaRenderExtendService = schemaRenderExtendService;
            this.uri = '/api/runtime/bcc/v1.0/qdpschemamanager/';
            this.schemaInfoChange = new rxjs.Subject();
            this.colList = new rxjs.Subject();
            this.controlType = new rxjs.Subject();
            this.schemaInfo = {};
            this.schemaid = new rxjs.Subject();
            this.operationChange = new rxjs.Subject();
            this.dynamicCols = {};
            this.customSchema = {};
            this.dynamicColIndex = 0;
            this.preSchema = {
                id: 'prefab',
                schemaName: '系统预制',
                isPrefab: 1,
                isDefault: 0,
                isProtected: '0',
                schemaValue: {
                    titleOption: {
                        title: '',
                        subTitles: []
                    },
                    columnOption: {
                        maxLevel: 0,
                        colList: []
                    },
                    styleOption: {
                        Title: {
                            fontFamily: 9,
                            size: 14,
                            fontWeight: 0,
                            fontStyle: 0,
                            textDecoration: 0,
                            fontColor: 'black',
                            rowHeight: 35
                        },
                        SubTitle: {
                            fontFamily: 9,
                            size: 14,
                            fontWeight: 0,
                            fontStyle: 0,
                            textDecoration: 0,
                            fontColor: 'black',
                            rowHeight: 35
                        },
                        Header: {
                            fontFamily: 9,
                            size: 14,
                            fontWeight: 0,
                            fontStyle: 0,
                            textDecoration: 0,
                            fontColor: 'black',
                            rowHeight: 35
                        },
                        DataArea: {
                            fontFamily: 9,
                            size: 14,
                            fontWeight: 0,
                            fontStyle: 0,
                            textDecoration: 0,
                            fontColor: 'black',
                            rowHeight: 35
                        },
                        Footer: {
                            fontFamily: 9,
                            size: 14,
                            fontWeight: 0,
                            fontStyle: 0,
                            textDecoration: 0,
                            fontColor: 'black',
                            rowHeight: 35
                        }
                    },
                    otherOption: {
                        showFilterRow: true,
                        dataCahce: true,
                        level: '',
                        isDetails: '',
                        loadDataType: 1,
                        pageSize: 20,
                        treeInfoType: 2,
                        pathField: '',
                        pathStep: 0,
                        idField: '',
                        parentField: '',
                        firstLoad: true,
                        showZero: true,
                        expand: true,
                        showHeaderSort: true
                    }
                }
            };
            this.isDefaultSchema = [];
            this.operations = {};
            /** @type {?} */
            var self = this;
            this.getOperation().subscribe(( /**
             * @param {?} value
             * @return {?}
             */function (value) {
                if (value) {
                    self.operations['QdpQueryExport'] = value['05202284-dfc4-149c-853e-cfd35b4a02bb'];
                    self.operations['QdpQueryPrint'] = value['653fe24b-d77f-d8b0-71c5-5e3d561e33ca'];
                    self.operations['QdpModifyPublicSchema'] = value['d6832d96-e6f3-114e-1d53-f9e636548eb9'];
                    self.operations['QdpPubQuery'] = value['cd6c2057-5ad6-90dd-54ac-771c192563e8'];
                    self.operationChange.next(self.operations);
                }
                // console.log(value);
            }));
        }
        /**
         * @param {?} id
         * @param {?} queryId
         * @param {?} dynamicCols
         * @param {?} queryRelativeUrl
         * @param {?=} scheme
         * @param {?=} frozenCols
         * @param {?=} groupType
         * @return {?}
         */
        SchemaManagerService.prototype.getSpreadTemplate = /**
         * @param {?} id
         * @param {?} queryId
         * @param {?} dynamicCols
         * @param {?} queryRelativeUrl
         * @param {?=} scheme
         * @param {?=} frozenCols
         * @param {?=} groupType
         * @return {?}
         */
            function (id, queryId, dynamicCols, queryRelativeUrl, scheme, frozenCols, groupType) {
                if (dynamicCols && dynamicCols.length) {
                    this.dynamicCols[groupType ? groupType : queryId] = dynamicCols;
                    this.dynamicCols[id] = dynamicCols;
                }
                /** @type {?} */
                var schema;
                if (this.schemaList && this.schemaList[id]) {
                    schema = this.schemaList[id];
                }
                /** @type {?} */
                var colInfo = [];
                // 新版本列信息通过frozenCols获取
                if (this.dynamicCols[groupType ? groupType : queryId]) {
                    colInfo = Object.assign(frozenCols, this.dynamicCols[groupType ? groupType : queryId]);
                }
                else {
                    colInfo = frozenCols;
                }
                this.colList.next(colInfo);
                return this.analysis((schema && schema.id ? schema.id : '1'), queryId, dynamicCols, queryRelativeUrl, scheme);
            };
        /**
         * 获取指定方案
         * @param id 方案ID
         * @param queryId 查询编号
         */
        /**
         * 获取指定方案
         * @param {?} id 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?=} groupType
         * @param {?=} organizationId
         * @param {?=} fromCache
         * @return {?}
         */
        SchemaManagerService.prototype.getSchema = /**
         * 获取指定方案
         * @param {?} id 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?=} groupType
         * @param {?=} organizationId
         * @param {?=} fromCache
         * @return {?}
         */
            function (id, queryId, queryRelativeUrl, groupType, organizationId, fromCache) {
                /** @type {?} */
                var self = this;
                if (this.schemaList && this.schemaList[id] && fromCache && fromCache === true) {
                    return rxjs.of(this.schemaList[id]);
                }
                else {
                    /** @type {?} */
                    var result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
                    return result$.pipe(operators.map(( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        if (id === '1' || id === 'prefab') {
                            return Object.assign({}, self.preSchema, { id: '1' });
                        }
                        else if (value && value['schemaList'] && value['schemaList'][queryId]) {
                            if (value['schemaList'][queryId][id]) {
                                return value['schemaList'][queryId][id];
                            }
                            else {
                                /** @type {?} */
                                var defaultSchemaId = '';
                                if (value.isDefaultSchema && value.isDefaultSchema.id && value['schemaList'][queryId][value.isDefaultSchema.id]) {
                                    defaultSchemaId = value.isDefaultSchema.id;
                                    return value['schemaList'][queryId][defaultSchemaId];
                                }
                                else {
                                    return null;
                                }
                            }
                        }
                        else {
                            return null;
                        }
                    })));
                }
            };
        /**
         * 获取默认方案
         */
        /**
         * 获取默认方案
         * @param {?} queryId
         * @param {?} queryRelativeUrl
         * @param {?=} groupType
         * @param {?=} organizationId
         * @return {?}
         */
        SchemaManagerService.prototype.getDefaultSchema = /**
         * 获取默认方案
         * @param {?} queryId
         * @param {?} queryRelativeUrl
         * @param {?=} groupType
         * @param {?=} organizationId
         * @return {?}
         */
            function (queryId, queryRelativeUrl, groupType, organizationId) {
                var _this = this;
                /** @type {?} */
                var result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
                return result$.pipe(operators.map(( /**
                 * @return {?}
                 */function () {
                    if (_this.isDefaultSchema[queryId] && _this.isDefaultSchema[queryId].id) {
                        return _this.isDefaultSchema[queryId];
                    }
                    else {
                        return null;
                    }
                })));
            };
        /**
         * 获取方案列表
         * @param queryId 查询编号
         * @param userId 用户ID
         * @param organizationId 组织id
         */
        /**
         * 获取方案列表
         * @param {?} queryId 查询编号
         * @param {?} userId 用户ID
         * @param {?} organizationId 组织id
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        SchemaManagerService.prototype.getSchemaList = /**
         * 获取方案列表
         * @param {?} queryId 查询编号
         * @param {?} userId 用户ID
         * @param {?} organizationId 组织id
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (queryId, userId, organizationId, queryRelativeUrl) {
                /** @type {?} */
                var restUri = this.host + this.uri + 'getschemalist';
                return this.getSchemas(restUri, queryRelativeUrl, { queryId: queryId, userId: userId, organizationId: organizationId });
            };
        /**
         * 获取方案列表
         * @param queryId 查询编号
         * @param userId 用户ID
         * @param organizationId 组织id
         */
        /**
         * 获取方案列表
         * @param {?} queryId 查询编号
         * @param {?} userId 用户ID
         * @param {?} organizationId 组织id
         * @param {?} groupType
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        SchemaManagerService.prototype.getSchemaListByGroupType = /**
         * 获取方案列表
         * @param {?} queryId 查询编号
         * @param {?} userId 用户ID
         * @param {?} organizationId 组织id
         * @param {?} groupType
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (queryId, userId, organizationId, groupType, queryRelativeUrl) {
                /** @type {?} */
                var restUri = this.host + this.uri + 'getschemalistbygroup';
                return this.getSchemas(restUri, queryRelativeUrl, { queryId: queryId, userId: userId, organizationId: organizationId, groupType: groupType });
            };
        /**
         * @private
         * @param {?} uri
         * @param {?} queryRelativeUrl
         * @param {?} params
         * @return {?}
         */
        SchemaManagerService.prototype.getSchemas = /**
         * @private
         * @param {?} uri
         * @param {?} queryRelativeUrl
         * @param {?} params
         * @return {?}
         */
            function (uri, queryRelativeUrl, params) {
                // queryId: string, userId: string, organizationId: string, groupType: any, queryRelativeUrl: any, params: any
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var result$ = self.restService.get(uri, params, self.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    self.schemaList = {};
                    if (data && data.length) {
                        self.isDefaultSchema[params.queryId] = null;
                        data.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            element.schemaValue = JSON.parse(element.schemaValue);
                            if (element.isDefault === 1) {
                                self.isDefaultSchema[params.queryId] = element;
                            }
                            self.schemaList[element.id] = element;
                            self.operateDynamicColsForSchema.call(self, element, params.groupType ? params.groupType : params.queryId);
                        }));
                        /** @type {?} */
                        var schemaExtendId = '';
                        if (self.schemaRenderExtendService && self.schemaRenderExtendService.schemaInfoRenderBefore) {
                            /** @type {?} */
                            var $event = { queryId: params.queryId };
                            $event['defaultSchemaId'] = '';
                            $event['schemalList'] = self.schemaList;
                            self.schemaRenderExtendService.schemaInfoRenderBefore($event);
                            if ($event['defaultSchemaId']) {
                                schemaExtendId = $event['defaultSchemaId'];
                            }
                        }
                        /** @type {?} */
                        var filterCondition = { schemaType: 0 };
                        if (schemaExtendId) {
                            filterCondition.id = schemaExtendId;
                        }
                        if (schemaExtendId || !self.isDefaultSchema || !self.isDefaultSchema[params.queryId]) {
                            if (lodashEs.filter(data, filterCondition) && lodashEs.filter(data, filterCondition).length) {
                                self.isDefaultSchema[params.queryId] = lodashEs.filter(data, filterCondition)[0];
                            }
                            else {
                                filterCondition.schemaType = 1;
                                if (lodashEs.filter(data, filterCondition) && lodashEs.filter(data, filterCondition).length) {
                                    self.isDefaultSchema[params.queryId] = lodashEs.filter(data, filterCondition)[0];
                                }
                                else {
                                    filterCondition.schemaType = 2;
                                    if (lodashEs.filter(data, filterCondition) && lodashEs.filter(data, filterCondition).length) {
                                        self.isDefaultSchema[params.queryId] = lodashEs.filter(data, filterCondition)[0];
                                    }
                                }
                            }
                        }
                        self.schemaInfo[params.queryId] = self.schemaList;
                        /** @type {?} */
                        var preSchema = JSON.parse(JSON.stringify(self.preSchema));
                        self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                        self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                        self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema });
                        return { schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema };
                    }
                    else {
                        delete self.schemaInfo[params.queryId];
                        /** @type {?} */
                        var preSchema = JSON.parse(JSON.stringify(self.preSchema));
                        self.isDefaultSchema[params.queryId] = null;
                        self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                        self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                        self.schemaInfoChange.next({ schemaList: null, isDefaultSchema: null, preSchema: preSchema });
                        return { schemaList: null, isDefaultSchema: null, preSchema: preSchema };
                    }
                })));
            };
        /**
         * @param {?} groupType
         * @param {?=} queryId
         * @return {?}
         */
        SchemaManagerService.prototype.mergeCustomSchema = /**
         * @param {?} groupType
         * @param {?=} queryId
         * @return {?}
         */
            function (groupType, queryId) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var preSchema = JSON.parse(JSON.stringify(self.preSchema));
                preSchema = self.operateCustomSchema(preSchema, groupType);
                self.operateDynamicColsForSchema.call(self, preSchema, groupType, 1);
                self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema && self.isDefaultSchema[queryId] ? self.isDefaultSchema[queryId] : null, preSchema: preSchema });
                return preSchema;
            };
        /**
         * @private
         * @param {?} preSchema
         * @param {?} groupType
         * @return {?}
         */
        SchemaManagerService.prototype.operateCustomSchema = /**
         * @private
         * @param {?} preSchema
         * @param {?} groupType
         * @return {?}
         */
            function (preSchema, groupType) {
                try {
                    if (this.customSchema && this.customSchema[groupType]) {
                        /** @type {?} */
                        var schema = JSON.parse(this.customSchema[groupType]);
                        preSchema.schemaValue.titleOption = Object.assign(preSchema.schemaValue.titleOption, schema.titleOption);
                        preSchema.schemaValue.columnOption = Object.assign(preSchema.schemaValue.columnOption, schema.columnOption);
                        preSchema.schemaValue.styleOption = Object.assign(preSchema.schemaValue.styleOption, schema.styleOption);
                        preSchema.schemaValue.otherOption = Object.assign(preSchema.schemaValue.otherOption, schema.otherOption);
                        return preSchema;
                    }
                }
                catch (e) {
                    console.log(e);
                }
            };
        /**
         * 保存方案
         * @param schema 方案实体
         */
        /**
         * 保存方案
         * @param {?} schema 方案实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        SchemaManagerService.prototype.saveSchema = /**
         * 保存方案
         * @param {?} schema 方案实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (schema, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'saveschema';
                /** @type {?} */
                var schemaObj = JSON.parse(schema.schema);
                /** @type {?} */
                var result$ = this.restService.post(restUri, schema, {}, this.createHeaderSessionId());
                return result$.pipe(operators.switchMap(( /**
                 * @return {?}
                 */function () {
                    if (schema.groupType) {
                        return _this.getSchemaListByGroupType(schemaObj.queryId, '', schemaObj.orgId, schema.groupType, queryRelativeUrl);
                    }
                    else {
                        return _this.getSchemaList(schemaObj.queryId, '', schemaObj.orgId, queryRelativeUrl);
                    }
                })));
            };
        /**
         * 删除方案
         * @param id 方案ID
         * @param queryId 查询编号
         */
        /**
         * 删除方案
         * @param {?} id 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?=} groupType
         * @param {?=} organizationId
         * @return {?}
         */
        SchemaManagerService.prototype.deleteSchema = /**
         * 删除方案
         * @param {?} id 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?=} groupType
         * @param {?=} organizationId
         * @return {?}
         */
            function (id, queryId, queryRelativeUrl, groupType, organizationId) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'deleteschema';
                /** @type {?} */
                var result$ = this.restService.delete(restUri, { id: id }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === true) {
                        _this.isDefaultSchema[queryId] = null;
                        /** @type {?} */
                        var result$1 = groupType ? _this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : _this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
                        return result$1.pipe(operators.map(( /**
                         * @param {?} value
                         * @return {?}
                         */function (value) {
                            return true;
                        })));
                    }
                    else {
                        return rxjs.of(false);
                    }
                })));
            };
        /**
         * 获取spread模版
         * @param id 方案ID
         */
        /**
         * 获取spread模版
         * @param {?} id 方案ID
         * @param {?} queryId
         * @param {?} dynamicCols
         * @param {?} queryRelativeUrl
         * @param {?=} scheme
         * @return {?}
         */
        SchemaManagerService.prototype.analysis = /**
         * 获取spread模版
         * @param {?} id 方案ID
         * @param {?} queryId
         * @param {?} dynamicCols
         * @param {?} queryRelativeUrl
         * @param {?=} scheme
         * @return {?}
         */
            function (id, queryId, dynamicCols, queryRelativeUrl, scheme) {
                /** @type {?} */
                var restUri = this.host + this.uri;
                /** @type {?} */
                var param = {};
                if (id !== '1') {
                    if (dynamicCols && dynamicCols.length) {
                        param = { id: id, dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
                        return this.restService.post(restUri + 'getspreadtemplatewithdynamiccolumn', param, {}, this.createHeaderSessionId());
                    }
                    else {
                        if (scheme) {
                            return this.restService.post(restUri + 'getspreadtemplatebyid', { id: id, schema: !scheme ? '' : scheme }, {}, this.createHeaderSessionId());
                        }
                        else {
                            return this.restService.get(restUri + 'getspreadtemplate', { id: id }, this.createHeaderSessionId());
                        }
                    }
                }
                else {
                    dynamicCols = dynamicCols && dynamicCols.length ? dynamicCols : [];
                    param = { dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
                    return this.restService.post(restUri + 'getinitspreadtemplate', param, {}, this.createHeaderSessionId());
                }
            };
        /**
         * @param {?=} operators
         * @return {?}
         */
        SchemaManagerService.prototype.getOperation = /**
         * @param {?=} operators
         * @return {?}
         */
            function (operators$$1) {
                /** @type {?} */
                var restUri = this.host + this.uri;
                /** @type {?} */
                var param = {};
                if (!operators$$1 || !operators$$1.length) {
                    param = {
                        operators: ['05202284-dfc4-149c-853e-cfd35b4a02bb', '653fe24b-d77f-d8b0-71c5-5e3d561e33ca', 'd6832d96-e6f3-114e-1d53-f9e636548eb9', 'cd6c2057-5ad6-90dd-54ac-771c192563e8']
                    };
                }
                else {
                    param = {
                        operators: operators$$1
                    };
                }
                return this.restService.post(restUri + 'isprincipalhasop', param, {}, this.createHeaderSessionId());
            };
        /**
         * @param {?} type
         * @return {?}
         */
        SchemaManagerService.prototype.validateOperation = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                return this.operations['QdpModifyPublicSchema'] === true && (type === 0 || type === '0');
            };
        // 设置列信息
        // 设置列信息
        /**
         * @param {?} dynamicCols
         * @return {?}
         */
        SchemaManagerService.prototype.setColInfo =
            // 设置列信息
            /**
             * @param {?} dynamicCols
             * @return {?}
             */
            function (dynamicCols) {
                /** @type {?} */
                var colInfo = [];
                if (dynamicCols && dynamicCols.length) {
                    colInfo = dynamicCols;
                }
                this.colList.next(colInfo);
            };
        /**
         * @private
         * @return {?}
         */
        SchemaManagerService.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return RtfServices.createHeaderSessionId(this.sessionService);
            };
        /**
         * 二开人员预制的格式方案可以显示动态列信息
         */
        /**
         * 二开人员预制的格式方案可以显示动态列信息
         * @param {?} element
         * @param {?} groupType
         * @param {?=} schemaId
         * @return {?}
         */
        SchemaManagerService.prototype.operateDynamicColsForSchema = /**
         * 二开人员预制的格式方案可以显示动态列信息
         * @param {?} element
         * @param {?} groupType
         * @param {?=} schemaId
         * @return {?}
         */
            function (element, groupType, schemaId) {
                if (this.dynamicCols && this.dynamicCols[groupType]) {
                    if (element && element.id && (element.isProtected === 1 || element.isProtected === '1' || schemaId === 1)) {
                        /** @type {?} */
                        var dynamicColumns = schemaId === 1 ? this.dynamicCols[groupType] : this.dynamicCols[element.id];
                        /** @type {?} */
                        var dyCols = this.createColumns(dynamicColumns, element.schemaValue.columnOption.colList);
                        element.schemaValue.columnOption.colList = dyCols;
                    }
                }
            };
        /**
         * 合并动态列
         */
        /**
         * 合并动态列
         * @private
         * @param {?} colList
         * @param {?} columns
         * @return {?}
         */
        SchemaManagerService.prototype.createColumns = /**
         * 合并动态列
         * @private
         * @param {?} colList
         * @param {?} columns
         * @return {?}
         */
            function (colList, columns) {
                /** @type {?} */
                var columnList = [];
                if (columns && columns.length) {
                    columnList.push.apply(columnList, __spread(JSON.parse(JSON.stringify(columns))));
                    if (colList && colList.length > 0) {
                        /** @type {?} */
                        var index = 0;
                        // tslint:disable-next-line:prefer-for-of
                        for (var col = 0; col < colList.length; col++) {
                            /** @type {?} */
                            var c = this.getColumn(columnList, colList[col]);
                            if (c) {
                                if (this.recursiveCompareColumn(c['childList'], colList[col]['childList']) === false) {
                                    c = colList[col];
                                }
                            }
                            else {
                                if (index >= columnList.length) {
                                    columnList.push(colList[col]);
                                }
                                else {
                                    columnList.splice(index, 0, colList[col]);
                                }
                            }
                            if (c && index === 0) {
                                index = this.dynamicColIndex + 1;
                            }
                            else {
                                index += 1;
                            }
                        }
                    }
                }
                else {
                    if (colList && colList.length > 0) {
                        columnList.push.apply(columnList, __spread(colList));
                    }
                }
                return columnList;
            };
        /**
         * @private
         * @param {?} columns
         * @param {?} col
         * @return {?}
         */
        SchemaManagerService.prototype.getColumn = /**
         * @private
         * @param {?} columns
         * @param {?} col
         * @return {?}
         */
            function (columns, col) {
                /** @type {?} */
                var result = null;
                this.dynamicColIndex = 0;
                // tslint:disable-next-line:prefer-for-of
                for (var item = 0; item < columns.length; item++) {
                    result = this.recursiveGetColumn(col, columns[item], null);
                    if (result != null) {
                        return result;
                    }
                }
                return result;
            };
        /**
         * @private
         * @param {?} col
         * @param {?} parentColumn
         * @param {?} childList
         * @return {?}
         */
        SchemaManagerService.prototype.recursiveGetColumn = /**
         * @private
         * @param {?} col
         * @param {?} parentColumn
         * @param {?} childList
         * @return {?}
         */
            function (col, parentColumn, childList) {
                if (parentColumn) {
                    if (parentColumn['bindField'] === col['bindField']) {
                        return parentColumn;
                    }
                    if (parentColumn['childList'] && parentColumn['childList'].length > 0) {
                        return this.recursiveGetColumn(col, null, parentColumn['childList']);
                    }
                    else {
                        this.dynamicColIndex += 1;
                    }
                }
                else {
                    // tslint:disable-next-line:prefer-for-of
                    for (var item = 0; item < childList.length; item++) {
                        if (childList[item]['bindField'] === col['bindField']) {
                            return childList[item];
                        }
                        if (childList[item]['childList'] && childList[item]['childList'].length > 0) {
                            return this.recursiveGetColumn(col, null, childList[item]['childList']);
                        }
                        else {
                            this.dynamicColIndex += 1;
                        }
                    }
                }
                return null;
            };
        /**
         * @private
         * @param {?} firstChildList
         * @param {?} secondChildList
         * @return {?}
         */
        SchemaManagerService.prototype.recursiveCompareColumn = /**
         * @private
         * @param {?} firstChildList
         * @param {?} secondChildList
         * @return {?}
         */
            function (firstChildList, secondChildList) {
                if (!firstChildList && !secondChildList) {
                    return true;
                }
                else if (!firstChildList && secondChildList) {
                    return false;
                }
                else if (firstChildList && !secondChildList) {
                    return false;
                }
                else if (firstChildList && secondChildList) {
                    if (firstChildList.length !== secondChildList.length) {
                        return false;
                    }
                    else {
                        if (firstChildList.length === 0 && secondChildList.length === 0) {
                            return true;
                        }
                        else if (firstChildList.length === 0) {
                            return false;
                        }
                        else {
                            for (var i = 0; i < firstChildList.length; i++) {
                                if (firstChildList[i].bindField !== secondChildList[i].bindField) {
                                    return false;
                                }
                                return this.recursiveCompareColumn(firstChildList[i].childList, secondChildList[i].childList);
                            }
                            return false;
                        }
                    }
                }
                return false;
            };
        SchemaManagerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        SchemaManagerService.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.SessionService },
                { type: String, decorators: [{ type: i0.Inject, args: [Server_Host,] }] },
                { type: SchemaRenderExtendService, decorators: [{ type: i0.Optional }] }
            ];
        };
        return SchemaManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LcpService = /** @class */ (function () {
        function LcpService(restfulService, sessionService, serverHost, loadDataUri, loadDataCol) {
            this.restfulService = restfulService;
            this.sessionService = sessionService;
            this.serverHost = serverHost;
            this.loadDataUri = loadDataUri;
            this.loadDataCol = loadDataCol;
            this.pageInfoChange = new rxjs.Subject();
            this.variablesChange = new rxjs.Subject();
            this.inSuiteDropDownInfoChange = new rxjs.Subject();
        }
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.exportData = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
                }
                /** @type {?} */
                var config = {
                    responseType: 'application/json' // 表明返回服务器返回的数据类型
                };
                Object.assign(config, this.createHeaderSessionId());
                /** @type {?} */
                var fileName = params.excelExportName + '.xlsx';
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
                    : this.restfulService.put(uri, params, {}, config);
                result$.toPromise().then(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
                    /** @type {?} */
                    var byteString = atob(data);
                    // base64 解码
                    /** @type {?} */
                    var arrayBuffer = new ArrayBuffer(byteString.length);
                    // 创建缓冲数组
                    /** @type {?} */
                    var intArray = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < byteString.length; i++) {
                        intArray[i] = byteString.charCodeAt(i);
                    }
                    /** @type {?} */
                    var blob = new Blob([intArray], { type: 'application/vnd.ms-excel' });
                    if ('download' in document.createElement('a')) { // 非IE下载
                        // 非IE下载
                        /** @type {?} */
                        var elink = document.createElement('a');
                        elink.download = fileName;
                        elink.style.display = 'none';
                        elink.href = URL.createObjectURL(blob);
                        document.body.appendChild(elink);
                        elink.click();
                        URL.revokeObjectURL(elink.href); // 释放URL 对象
                        document.body.removeChild(elink);
                    }
                    else { // IE10+下载
                        navigator.msSaveBlob(blob, fileName);
                    }
                    self.loading.close();
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    self.formErrorService.exception(error.Message, error);
                }));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.aysnExportData = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
                }
                /** @type {?} */
                var config = {
                    responseType: 'application/json' // 表明返回服务器返回的数据类型
                };
                Object.assign(config, this.createHeaderSessionId());
                params.async = 1;
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
                    : this.restfulService.put(uri, params, {}, config);
                result$.toPromise().then(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    self.formErrorService.exception(error.Message, error);
                }));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.pdfExportEvent = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
                }
                /** @type {?} */
                var config = {
                    responseType: 'application/json' // 表明返回服务器返回的数据类型
                };
                Object.assign(config, this.createHeaderSessionId());
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
                    : this.restfulService.put(uri, params, {}, config);
                result$.toPromise().then(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
                    /** @type {?} */
                    var byteString = atob(data);
                    // base64 解码
                    /** @type {?} */
                    var arrayBuffer = new ArrayBuffer(byteString.length);
                    // 创建缓冲数组
                    /** @type {?} */
                    var intArray = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < byteString.length; i++) {
                        intArray[i] = byteString.charCodeAt(i);
                    }
                    /** @type {?} */
                    var blob = new Blob([intArray], { type: 'application/pdf' });
                    if ('download' in document.createElement('a')) { // 非IE下载
                        // 非IE下载
                        /** @type {?} */
                        var elink = document.createElement('a');
                        elink.download = fileName;
                        elink.style.display = 'none';
                        elink.href = URL.createObjectURL(blob);
                        document.body.appendChild(elink);
                        elink.click();
                        URL.revokeObjectURL(elink.href); // 释放URL 对象
                        document.body.removeChild(elink);
                    }
                    else { // IE10+下载
                        navigator.msSaveBlob(blob, fileName);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    self.formErrorService.exception(error.Message, error);
                }));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.printPreView = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
                }
                /** @type {?} */
                var config = {
                    responseType: 'application/json' // 表明返回服务器返回的数据类型
                };
                Object.assign(config, this.createHeaderSessionId());
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
                    : this.restfulService.put(uri, params, {}, config);
                result$.toPromise().then(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
                    /** @type {?} */
                    var options = {
                        OutputType: cloudprint.OutputType.PRINT,
                        FileType: cloudprint.FileType.Pdf,
                        Path: '',
                        DeviceId: '',
                        printType: cloudprint.PrintType.Query,
                        printJob: false,
                        printerName: '',
                        printSetting: null
                    };
                    /** @type {?} */
                    var byteString = atob(data);
                    // base64 解码
                    /** @type {?} */
                    var arrayBuffer = new ArrayBuffer(byteString.length);
                    // 创建缓冲数组
                    /** @type {?} */
                    var intArray = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < byteString.length; i++) {
                        intArray[i] = byteString.charCodeAt(i);
                    }
                    /** @type {?} */
                    var blob = new Blob([intArray]);
                    self.cloudprintService.openRendedViewer('tab', blob, options);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    self.formErrorService.exception(error.Message, error);
                }));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.getData = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
                }
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
                    : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data) {
                        data = !queryRelativeUrl ? data : data.returnValue;
                        if (data && data.pageInfo) {
                            self.pageInfoChange.next(data.pageInfo);
                        }
                        if (data && data.variables) {
                            self.variablesChange.next(data.variables);
                        }
                        if (data && data.dropDownOption) {
                            self.inSuiteDropDownInfo = data.dropDownOption;
                            self.inSuiteDropDownInfoChange.next(data.dropDownOption);
                        }
                    }
                    return data;
                })));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.getCol = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataCol) {
                    uri += this.loadDataCol;
                }
                else {
                    uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
                }
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
                    : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data) {
                        data = !queryRelativeUrl ? data : data.returnValue;
                    }
                    return data;
                })));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpService.prototype.getCrosstabTemplate = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/getcrosstabtemplate' : (queryRelativeUrl + 'getcrosstabtemplate');
                }
                params = !queryRelativeUrl ? params : { 'Param': params };
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
                    : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} result
                 * @return {?}
                 */function (result) {
                    if (result) {
                        result = !queryRelativeUrl ? result : (result && result.returnValue) ? JSON.parse(result.returnValue) : undefined;
                    }
                    return result;
                })));
            };
        /**
         * @return {?}
         */
        LcpService.prototype.getSpreadLicense = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var uri = '/api/runtime/bcc/v1.0/qdpschemamanager/getSpreadLicense';
                /** @type {?} */
                var result$ = this.restfulService.get(uri, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    return data.spreadjs;
                })));
            };
        /**
         * @param {?} params
         * @return {?}
         */
        LcpService.prototype.clearCache = /**
         * @param {?} params
         * @return {?}
         */
            function (params) {
                /** @type {?} */
                var uri = this.serverHost + '/api/runtime/bcc/v1.0/qdpsearch/clearcache';
                /** @type {?} */
                var result$ = this.restfulService.post(uri, params, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} result
                 * @return {?}
                 */function (result) {
                    return result;
                })));
            };
        /**
         * @private
         * @return {?}
         */
        LcpService.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return RtfServices.createHeaderSessionId(this.sessionService);
            };
        LcpService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        LcpService.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.SessionService },
                { type: String, decorators: [{ type: i0.Inject, args: [Server_Host,] }, { type: i0.Optional }] },
                { type: String, decorators: [{ type: i0.Inject, args: [Load_Data_Uri,] }, { type: i0.Optional }] },
                { type: String, decorators: [{ type: i0.Inject, args: [Load_Data_Col,] }, { type: i0.Optional }] }
            ];
        };
        return LcpService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 打印服务
     * \@Scope FrameComponent
     */
    var /**
     * 打印服务
     * \@Scope FrameComponent
     */ IntegrationPrintService = /** @class */ (function () {
        /**
         * 构造函数
         */
        function IntegrationPrintService(_printService) {
            this.printService = _printService;
        }
        /**
         * 打印单据
         * @param beMetaId BE元数据标识
         * @param bizBillId 业务单据标识
         */
        /**
         * 打印单据
         * @param {?} beMetaId BE元数据标识
         * @param {?} bizBillId 业务单据标识
         * @return {?}
         */
        IntegrationPrintService.prototype.printSingle = /**
         * 打印单据
         * @param {?} beMetaId BE元数据标识
         * @param {?} bizBillId 业务单据标识
         * @return {?}
         */
            function (beMetaId, bizBillId) {
                return this.printArray(beMetaId, [bizBillId]);
            };
        /**
         * 打印单据（通过id或ids）
         * @param beMetaId be元数据Id
         * @param ids 单据id或ids
         */
        /**
         * 打印单据（通过id或ids）
         * @param {?} beMetaId be元数据Id
         * @param {?} ids 单据id或ids
         * @return {?}
         */
        IntegrationPrintService.prototype.printByIds = /**
         * 打印单据（通过id或ids）
         * @param {?} beMetaId be元数据Id
         * @param {?} ids 单据id或ids
         * @return {?}
         */
            function (beMetaId, ids) {
                /** @type {?} */
                var dataIds = ids.split(',').filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item; }));
                return this.printArray(beMetaId, dataIds);
            };
        /**
         * 打印单据（带维度）
         * @param beMetaId be元数据Id
         * @param ids 单据id或ids
         * @param dim1 维度1值
         * @param dim2 维度2值
         * @param billCategoryId 单据类型Id
         */
        /**
         * 打印单据（带维度）
         * @param {?} beMetaId be元数据Id
         * @param {?} ids 单据id或ids
         * @param {?=} dim1 维度1值
         * @param {?=} dim2 维度2值
         * @param {?=} billCategoryId 单据类型Id
         * @return {?}
         */
        IntegrationPrintService.prototype.printByIdsWithDimension = /**
         * 打印单据（带维度）
         * @param {?} beMetaId be元数据Id
         * @param {?} ids 单据id或ids
         * @param {?=} dim1 维度1值
         * @param {?=} dim2 维度2值
         * @param {?=} billCategoryId 单据类型Id
         * @return {?}
         */
            function (beMetaId, ids, dim1, dim2, billCategoryId) {
                /** @type {?} */
                var dataIds = ids.split(',').filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item; }));
                return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);
            };
        /**
         * 打印单据（带维度）
         * @param beMetaId be元数据Id
         * @param ids 单据id或ids
         * @param dim1 维度1值
         * @param dim2 维度2值
         * @param billCategoryId 单据类型Id
         */
        /**
         * 打印单据（带维度）
         * @param {?} beMetaId be元数据Id
         * @param {?} ids 单据id或ids
         * @param {?} dim1 维度1值
         * @param {?} dim2 维度2值
         * @param {?} queryType
         * @param {?} queryServiceId
         * @param {?} queryParam
         * @return {?}
         */
        IntegrationPrintService.prototype.printWithDimensionCustomDataSource = /**
         * 打印单据（带维度）
         * @param {?} beMetaId be元数据Id
         * @param {?} ids 单据id或ids
         * @param {?} dim1 维度1值
         * @param {?} dim2 维度2值
         * @param {?} queryType
         * @param {?} queryServiceId
         * @param {?} queryParam
         * @return {?}
         */
            function (beMetaId, ids, dim1, dim2, queryType, queryServiceId, queryParam) {
                /** @type {?} */
                var dataIds = ids.split(',').filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item; }));
                return this.printArray(beMetaId, dataIds, dim1, dim2, undefined, queryType, queryServiceId, queryParam);
            };
        /**
         * 打印多个单据
         * @param beMetaId BE元数据标识
         * @param dataIds 业务单据标识数组
         * @param dim1 维度1
         * @param dim2 维度2
         * @param billCategoryId 业务单据类型Id
         */
        /**
         * 打印多个单据
         * @param {?} beMetaId BE元数据标识
         * @param {?} dataIds 业务单据标识数组
         * @param {?=} dim1 维度1
         * @param {?=} dim2 维度2
         * @param {?=} billCategoryId 业务单据类型Id
         * @param {?=} queryType
         * @param {?=} queryServiceId
         * @param {?=} queryParam
         * @return {?}
         */
        IntegrationPrintService.prototype.printArray = /**
         * 打印多个单据
         * @param {?} beMetaId BE元数据标识
         * @param {?} dataIds 业务单据标识数组
         * @param {?=} dim1 维度1
         * @param {?=} dim2 维度2
         * @param {?=} billCategoryId 业务单据类型Id
         * @param {?=} queryType
         * @param {?=} queryServiceId
         * @param {?=} queryParam
         * @return {?}
         */
            function (beMetaId, dataIds, dim1, dim2, billCategoryId, queryType, queryServiceId, queryParam) {
                /** @type {?} */
                var sourceOptions = this.buildSourceOptions({
                    dataIds: dataIds,
                    sourceId: beMetaId
                });
                /** @type {?} */
                var outputOptions = this.buildOutputOptions();
                if (dim1) {
                    sourceOptions.FirstDimensionVal = dim1;
                }
                if (dim2) {
                    sourceOptions.SecondDimensionVal = dim2;
                }
                if (typeof billCategoryId !== 'undefined') {
                    sourceOptions.billCategoryId = billCategoryId;
                }
                if (queryType) {
                    sourceOptions.queryType = queryType;
                }
                if (queryServiceId) {
                    sourceOptions.queryServiceId = queryServiceId;
                }
                if (queryParam) {
                    sourceOptions.queryParam = queryParam;
                }
                return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');
            };
        /**
         * 构造SourceOptions
         * @param options options
         */
        /**
         * 构造SourceOptions
         * @private
         * @param {?} options options
         * @return {?}
         */
        IntegrationPrintService.prototype.buildSourceOptions = /**
         * 构造SourceOptions
         * @private
         * @param {?} options options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var so = {
                    DataIds: options && options.dataIds || undefined,
                    SourceId: options && options.sourceId || undefined,
                    FirstDimensionVal: options && options.dim1 || undefined,
                    SecondDimensionVal: options && options.dim2 || undefined,
                    RetrieveParam: options && options.retrieveParam || undefined,
                    FormatId: options && options.formatId || undefined,
                    billCategoryId: options && options.billCategoryId || undefined,
                    ServiceUnit: options && options.serviceUnit || undefined,
                    currentPage: options && options.currentPage || undefined,
                    pageRowCount: options && options.pageRowCount || undefined,
                    queryType: options && options.queryType || undefined,
                    queryServiceId: options && options.queryServiceId || undefined,
                    bizTypeId: options && options.bizTypeId || undefined,
                    queryParam: options && options.queryParam || undefined
                };
                return so;
            };
        /**
         * 构造OutputOptions
         * @param options options
         */
        /**
         * 构造OutputOptions
         * @private
         * @param {?=} options options
         * @return {?}
         */
        IntegrationPrintService.prototype.buildOutputOptions = /**
         * 构造OutputOptions
         * @private
         * @param {?=} options options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var oo = {
                    OutputType: options && options.outputType || cloudprint.OutputType.PRINT,
                    FileType: options && options.fileType || cloudprint.FileType.Html5,
                    Path: options && options.path || undefined,
                    DeviceId: options && options.deviceId || undefined,
                    printJob: options && options.printJob || undefined,
                    printerName: options && options.printerName || undefined,
                    printSetting: options && options.printSetting || undefined,
                    printType: options && options.printType || cloudprint.PrintType.Form
                };
                return oo;
            };
        return IntegrationPrintService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ParasMappingManagerService = /** @class */ (function () {
        function ParasMappingManagerService(restService, sessionService, host) {
            this.restService = restService;
            this.sessionService = sessionService;
            this.host = host;
            this.uri = '/api/runtime/bcc/v1.0/qdpparasmapping/';
            this.parasmappingInfoChange = new rxjs.Subject();
            this.parasmappingInfoList = {};
        }
        /**
         * 获取查询参数映射信息
         * @param id 数据源ID
         * @param queryId 查询编号
         */
        /**
         * 获取查询参数映射信息
         * @param {?} id 数据源ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?=} type
         * @return {?}
         */
        ParasMappingManagerService.prototype.getParasMapping = /**
         * 获取查询参数映射信息
         * @param {?} id 数据源ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?=} type
         * @return {?}
         */
            function (id, queryId, queryRelativeUrl, type) {
                if (type === void 0) {
                    type = 0;
                }
                /** @type {?} */
                var result$ = this.getParasMappingList(queryId, id, '', '', queryRelativeUrl, type);
                return result$.pipe(operators.map(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (value && value[id]) {
                        return value[id];
                    }
                    else {
                        return null;
                    }
                })));
            };
        /**
         * 获取参数映射列表
         * @param queryId 查询编号
         * @param userId 用户ID
         * @param languageType 语言类型
         */
        /**
         * 获取参数映射列表
         * @param {?} queryId 查询编号
         * @param {?} datasourceId
         * @param {?} userId 用户ID
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @param {?=} queryType
         * @return {?}
         */
        ParasMappingManagerService.prototype.getParasMappingList = /**
         * 获取参数映射列表
         * @param {?} queryId 查询编号
         * @param {?} datasourceId
         * @param {?} userId 用户ID
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @param {?=} queryType
         * @return {?}
         */
            function (queryId, datasourceId, userId, languageType, queryRelativeUrl, queryType) {
                var _this = this;
                if (queryType === void 0) {
                    queryType = 0;
                }
                /** @type {?} */
                var restUri = this.host + this.uri + 'getparasmappinglist';
                /** @type {?} */
                var result$ = this.restService.get(restUri, { queryId: queryId, datasourceId: datasourceId, userId: userId, languageType: languageType, queryType: queryType }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data && data.length) {
                        data.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            element.parasmapping = JSON.parse(element.parasmapping);
                            _this.parasmappingInfoList[element.datasourceid] = element;
                        }));
                        _this.parasmappingInfoChange.next({ parasInfoList: _this.parasmappingInfoList });
                        return _this.parasmappingInfoList;
                    }
                    else {
                        _this.parasmappingInfoChange.next({ parasInfoList: null });
                        return null;
                    }
                })));
            };
        /**
         * 保存参数映射
         * @param parasmapping 参数映射实体
         */
        /**
         * 保存参数映射
         * @param {?} parasmapping 参数映射实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        ParasMappingManagerService.prototype.saveParasMapping = /**
         * 保存参数映射
         * @param {?} parasmapping 参数映射实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (parasmapping, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'saveparasmapping';
                /** @type {?} */
                var result$ = this.restService.post(restUri, parasmapping, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @return {?}
                 */function () {
                    parasmapping.parasmapping = JSON.parse(parasmapping.parasmapping);
                    if (Object.keys(_this.parasmappingInfoList).indexOf(parasmapping.datasourceid)) {
                        _this.parasmappingInfoList[parasmapping.datasourceid] = parasmapping;
                    }
                })));
            };
        /**
         * 删除方案
         * @param id 方案ID
         * @param queryId 查询编号
         */
        /**
         * 删除方案
         * @param {?} datasourceid
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        ParasMappingManagerService.prototype.deleteParasMapping = /**
         * 删除方案
         * @param {?} datasourceid
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (datasourceid, queryId, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'deleteparasmapping';
                /** @type {?} */
                var result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId: queryId }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === true) {
                        _this.parasmappingInfoList[datasourceid] = null;
                    }
                    else {
                        return false;
                    }
                })));
            };
        /**
         * 获取元数据信息
         * @param Id metadataid
         */
        /**
         * 获取元数据信息
         * @param {?} Id metadataid
         * @return {?}
         */
        ParasMappingManagerService.prototype.getMetaDataInfoById = /**
         * 获取元数据信息
         * @param {?} Id metadataid
         * @return {?}
         */
            function (Id) {
                /** @type {?} */
                var restUri = this.host + '/api/runtime/lcm/v1.0/rt-metadatas/' + Id;
                /** @type {?} */
                var result$ = this.restService.get(restUri, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data) {
                        return data;
                    }
                    else {
                        return null;
                    }
                })));
            };
        /**
         * @private
         * @return {?}
         */
        ParasMappingManagerService.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return RtfServices.createHeaderSessionId(this.sessionService);
            };
        ParasMappingManagerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        ParasMappingManagerService.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.SessionService },
                { type: String, decorators: [{ type: i0.Inject, args: [Server_Host,] }] }
            ];
        };
        return ParasMappingManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PrintIntegrationManagerService = /** @class */ (function () {
        function PrintIntegrationManagerService(restService, sessionService, host) {
            this.restService = restService;
            this.sessionService = sessionService;
            this.host = host;
            this.uri = '/api/runtime/bcc/v1.0/printintegration/';
            this.printIntegrationInfoChange = new rxjs.Subject();
            this.printIntegrationInfoList = {};
        }
        /**
         * 获取查询参数映射信息
         * @param schemaId 方案ID
         * @param queryId 查询编号
         */
        /**
         * 获取查询参数映射信息
         * @param {?} schemaId 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        PrintIntegrationManagerService.prototype.getPrintIntegration = /**
         * 获取查询参数映射信息
         * @param {?} schemaId 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (schemaId, queryId, queryRelativeUrl) {
                /** @type {?} */
                var result$ = this.getPrintIntegrationList(queryId, schemaId, '', '', queryRelativeUrl);
                return result$.pipe(operators.map(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (value && value[schemaId + queryId]) {
                        return value[schemaId + queryId];
                    }
                    else {
                        return null;
                    }
                })));
            };
        /**
         * 获取打印设置信息列表
         * @param queryId 查询编号
         * @param schemaId 方案ID
         * @param userId 用户ID
         * @param languageType 语言类型
         */
        /**
         * 获取打印设置信息列表
         * @param {?} queryId 查询编号
         * @param {?} schemaId 方案ID
         * @param {?} userId 用户ID
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        PrintIntegrationManagerService.prototype.getPrintIntegrationList = /**
         * 获取打印设置信息列表
         * @param {?} queryId 查询编号
         * @param {?} schemaId 方案ID
         * @param {?} userId 用户ID
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (queryId, schemaId, userId, languageType, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'getprintintegrationlist';
                /** @type {?} */
                var result$ = this.restService.get(restUri, { queryId: queryId, schemaId: schemaId, userId: userId, languageType: languageType }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data && data.length) {
                        data.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            element.printintegration = JSON.parse(element.printintegration);
                            _this.printIntegrationInfoList[schemaId + queryId] = element;
                        }));
                        _this.printIntegrationInfoChange.next({ printIntegrationInfoList: _this.printIntegrationInfoList });
                        return _this.printIntegrationInfoList;
                    }
                    else {
                        _this.printIntegrationInfoChange.next({ printIntegrationInfoList: null });
                        return null;
                    }
                })));
            };
        /**
         * 保存打印设置信息
         * @param element 打印设置
         */
        /**
         * 保存打印设置信息
         * @param {?} element 打印设置
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        PrintIntegrationManagerService.prototype.savePrintIntegration = /**
         * 保存打印设置信息
         * @param {?} element 打印设置
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (element, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'saveprintintegration';
                /** @type {?} */
                var integration = element;
                /** @type {?} */
                var result$ = this.restService.post(restUri, integration, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @return {?}
                 */function () {
                    element.printintegration = JSON.parse(element.printintegration);
                    if (Object.keys(_this.printIntegrationInfoList).indexOf(element.schemaId + element.queryId)) {
                        _this.printIntegrationInfoList[element.schemaId + element.queryId] = element;
                    }
                })));
            };
        /**
         * 删除打印设置信息
         * @param schemaId 方案ID
         * @param queryId 查询编号
         */
        /**
         * 删除打印设置信息
         * @param {?} schemaId 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        PrintIntegrationManagerService.prototype.deletePrintIntegration = /**
         * 删除打印设置信息
         * @param {?} schemaId 方案ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (schemaId, queryId, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'deleteprintintegration';
                /** @type {?} */
                var result$ = this.restService.delete(restUri, { schemaId: schemaId, queryId: queryId }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === true) {
                        _this.printIntegrationInfoList[schemaId + queryId] = null;
                    }
                    else {
                        return false;
                    }
                })));
            };
        /**
         * @private
         * @return {?}
         */
        PrintIntegrationManagerService.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return RtfServices.createHeaderSessionId(this.sessionService);
            };
        PrintIntegrationManagerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        PrintIntegrationManagerService.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.SessionService },
                { type: String, decorators: [{ type: i0.Inject, args: [Server_Host,] }] }
            ];
        };
        return PrintIntegrationManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JointSearchManagerService = /** @class */ (function () {
        function JointSearchManagerService(restService, sessionService, host) {
            this.restService = restService;
            this.sessionService = sessionService;
            this.host = host;
            this.uri = '/api/runtime/bcc/v1.0/joinsearch/';
            this.localUri = '/api/runtime/sys/v1.0/loginInfo';
            this.lcpUri = '/api/runtime/bcc/v1.0/qdpsearch/';
            this.jointsearchInfoChange = new rxjs.Subject();
            this.jointsearchInfoList = {};
            // this.uri = this.host + this.uri;
        }
        /**
         * 获取查询参数映射信息
         * @param formid 表单ID
         * @param queryId 查询编号
         */
        /**
         * 获取查询参数映射信息
         * @param {?} formId
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        JointSearchManagerService.prototype.getjointsearch = /**
         * 获取查询参数映射信息
         * @param {?} formId
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (formId, queryId, queryRelativeUrl) {
                /** @type {?} */
                var result$ = this.getjointsearchList(formId, queryId, '', '', queryRelativeUrl);
                return result$.pipe(operators.map(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (value && value[formId + queryId]) {
                        return value[formId + queryId];
                    }
                    else {
                        return null;
                    }
                })));
            };
        /**
         * @param {?} visibleJointParam
         * @param {?} queryRelativeUrl
         * @param {?} searchList
         * @return {?}
         */
        JointSearchManagerService.prototype.getVisibleJoint = /**
         * @param {?} visibleJointParam
         * @param {?} queryRelativeUrl
         * @param {?} searchList
         * @return {?}
         */
            function (visibleJointParam, queryRelativeUrl, searchList) {
                /** @type {?} */
                var jointUri = this.host + (!queryRelativeUrl ? this.lcpUri : queryRelativeUrl) + 'visiblejoint';
                /** @type {?} */
                var result$ = this.restService.put(jointUri, { 'Param': visibleJointParam }, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    var e_1, _a, e_2, _b;
                    /** @type {?} */
                    var jointSearchList = [];
                    if (data) {
                        data = !queryRelativeUrl ? data : data.returnValue;
                        if (!queryRelativeUrl) {
                            try {
                                for (var searchList_1 = __values(searchList), searchList_1_1 = searchList_1.next(); !searchList_1_1.done; searchList_1_1 = searchList_1.next()) {
                                    var search = searchList_1_1.value;
                                    if (data[search.id] !== null && data[search.id] === true) {
                                        jointSearchList.push(search);
                                    }
                                }
                            }
                            catch (e_1_1) {
                                e_1 = { error: e_1_1 };
                            }
                            finally {
                                try {
                                    if (searchList_1_1 && !searchList_1_1.done && (_a = searchList_1.return))
                                        _a.call(searchList_1);
                                }
                                finally {
                                    if (e_1)
                                        throw e_1.error;
                                }
                            }
                        }
                        else {
                            var _loop_1 = function (search) {
                                /** @type {?} */
                                var item = data.find(( /**
                                 * @param {?} d
                                 * @return {?}
                                 */function (d) { return d.id === search.id; }));
                                if (item && item.visible === true) {
                                    jointSearchList.push(search);
                                }
                            };
                            try {
                                for (var searchList_2 = __values(searchList), searchList_2_1 = searchList_2.next(); !searchList_2_1.done; searchList_2_1 = searchList_2.next()) {
                                    var search = searchList_2_1.value;
                                    _loop_1(search);
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (searchList_2_1 && !searchList_2_1.done && (_b = searchList_2.return))
                                        _b.call(searchList_2);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                        }
                    }
                    return jointSearchList;
                })));
            };
        /**
         * 获取参数映射列表
         * @param queryId 查询编号
         * @param userId 用户ID
         * @param languageType 语言类型
         */
        /**
         * 获取参数映射列表
         * @param {?} formId
         * @param {?} queryId 查询编号
         * @param {?} userId 用户ID
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        JointSearchManagerService.prototype.getjointsearchList = /**
         * 获取参数映射列表
         * @param {?} formId
         * @param {?} queryId 查询编号
         * @param {?} userId 用户ID
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (formId, queryId, userId, languageType, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'getjoinsearch';
                /** @type {?} */
                var result$ = this.restService.get(restUri, { formId: formId, queryId: queryId, userId: userId, languageType: languageType }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    // this.jointsearchInfoList = {};
                    if (data && data.length) {
                        data.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            _this.jointsearchInfoList[element.formId + element.queryId] = element;
                        }));
                        _this.jointsearchInfoChange.next({ jointsearchInfoList: _this.jointsearchInfoList });
                        return _this.jointsearchInfoList;
                    }
                    else {
                        _this.jointsearchInfoChange.next({ jointsearchInfoList: null });
                        return null;
                    }
                })));
            };
        /**
         * 保存参数映射
         * @param jointsearch 参数映射实体
         */
        /**
         * 保存参数映射
         * @param {?} jointsearch 参数映射实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        JointSearchManagerService.prototype.savejointsearch = /**
         * 保存参数映射
         * @param {?} jointsearch 参数映射实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (jointsearch, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'addjointsearch';
                /** @type {?} */
                var result$ = this.restService.post(restUri, jointsearch, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === true) {
                        _this.jointsearchInfoList[jointsearch.FormId + jointsearch.queryId] = jointsearch;
                        return true;
                    }
                    else {
                        return false;
                    }
                })));
            };
        /**
         * 删除联查
         * @param queryId 查询编号
         */
        /**
         * 删除联查
         * @param {?} formId
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        JointSearchManagerService.prototype.deletejointsearch = /**
         * 删除联查
         * @param {?} formId
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (formId, queryId, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'deletejointsearch';
                /** @type {?} */
                var result$ = this.restService.delete(restUri, { formId: formId, queryId: queryId }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === true) {
                        _this.jointsearchInfoList[formId + queryId] = null;
                        return true;
                    }
                    else {
                        return false;
                    }
                })));
            };
        /**
         * @return {?}
         */
        JointSearchManagerService.prototype.getLanguageList = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var result$ = this.restService.get(this.localUri, { infoType: 'supportedLanguage' });
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    return data;
                })));
            };
        /**
         * @private
         * @return {?}
         */
        JointSearchManagerService.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return RtfServices.createHeaderSessionId(this.sessionService);
            };
        JointSearchManagerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        JointSearchManagerService.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.SessionService },
                { type: String, decorators: [{ type: i0.Inject, args: [Server_Host,] }] }
            ];
        };
        return JointSearchManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var DataRenderExtendService = /** @class */ (function () {
        function DataRenderExtendService() {
        }
        DataRenderExtendService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ DataRenderExtendService.ngInjectableDef = i0.defineInjectable({ factory: function DataRenderExtendService_Factory() { return new DataRenderExtendService(); }, token: DataRenderExtendService, providedIn: "root" });
        return DataRenderExtendService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var JointSearchExtendService = /** @class */ (function () {
        function JointSearchExtendService() {
        }
        JointSearchExtendService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ JointSearchExtendService.ngInjectableDef = i0.defineInjectable({ factory: function JointSearchExtendService_Factory() { return new JointSearchExtendService(); }, token: JointSearchExtendService, providedIn: "root" });
        return JointSearchExtendService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterManagerService = /** @class */ (function () {
        function FilterManagerService(restService, sessionService, host) {
            this.restService = restService;
            this.sessionService = sessionService;
            this.host = host;
            this.uri = '/api/runtime/bcc/v1.0/qdpfilter/';
            this.filterInfoChange = new rxjs.Subject();
            this.isFilterQDP = new rxjs.Subject(); // 是否刷新
            // 是否刷新
            this.filterInfoList = {};
            // this.uri = this.host + this.uri;
        }
        /**
         * 获取查询参数映射信息
         * @param id 数据源ID
         * @param queryId 查询编号
         */
        /**
         * 获取查询参数映射信息
         * @param {?} id 数据源ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?} queryType
         * @param {?=} groupType
         * @return {?}
         */
        FilterManagerService.prototype.getFilter = /**
         * 获取查询参数映射信息
         * @param {?} id 数据源ID
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?} queryType
         * @param {?=} groupType
         * @return {?}
         */
            function (id, queryId, queryRelativeUrl, queryType, groupType) {
                /** @type {?} */
                var result$ = this.getFilterList(queryId, id, groupType, '', queryRelativeUrl, queryType);
                return result$.pipe(operators.map(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (value && value[queryId]) {
                        return value[queryId];
                    }
                    else {
                        return null;
                    }
                })));
            };
        /**
         * 获取参数映射列表
         * @param queryId 查询编号
         * @param userId 用户ID
         * @param languageType 语言类型
         */
        /**
         * 获取参数映射列表
         * @param {?} queryId 查询编号
         * @param {?} datasourceId
         * @param {?} groupType
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @param {?=} queryType
         * @return {?}
         */
        FilterManagerService.prototype.getFilterList = /**
         * 获取参数映射列表
         * @param {?} queryId 查询编号
         * @param {?} datasourceId
         * @param {?} groupType
         * @param {?} languageType 语言类型
         * @param {?} queryRelativeUrl
         * @param {?=} queryType
         * @return {?}
         */
            function (queryId, datasourceId, groupType, languageType, queryRelativeUrl, queryType) {
                var _this = this;
                if (queryType === void 0) {
                    queryType = 0;
                }
                /** @type {?} */
                var restUri = this.host + this.uri + 'getfilterlist';
                /** @type {?} */
                var result$ = this.restService.get(restUri, { queryId: queryId, datasourceId: datasourceId, groupType: groupType, languageType: languageType, queryType: queryType }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data && data.length) {
                        data.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            element.filter = JSON.parse(element.filter);
                            _this.filterInfoList[element.queryid] = element;
                        }));
                        _this.filterInfoChange.next({ parasInfoList: _this.filterInfoList });
                        return _this.filterInfoList;
                    }
                    else {
                        _this.filterInfoChange.next({ parasInfoList: null });
                        return null;
                    }
                })));
            };
        /**
         * 保存参数映射
         * @param filter 参数映射实体
         */
        /**
         * 保存参数映射
         * @param {?} filter 参数映射实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        FilterManagerService.prototype.saveFilter = /**
         * 保存参数映射
         * @param {?} filter 参数映射实体
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (filter, queryRelativeUrl) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'savefilter';
                /** @type {?} */
                var result$ = this.restService.post(restUri, filter, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @return {?}
                 */function () {
                    filter.filter = JSON.parse(filter.filter);
                    if (Object.keys(_this.filterInfoList).indexOf(filter.queryid)) {
                        _this.filterInfoList[filter.queryid] = filter;
                    }
                })));
            };
        /**
         * 删除方案
         * @param id 方案ID
         * @param queryId 查询编号
         */
        /**
         * 删除方案
         * @param {?} datasourceid
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?} queryType
         * @return {?}
         */
        FilterManagerService.prototype.deleteFilter = /**
         * 删除方案
         * @param {?} datasourceid
         * @param {?} queryId 查询编号
         * @param {?} queryRelativeUrl
         * @param {?} queryType
         * @return {?}
         */
            function (datasourceid, queryId, queryRelativeUrl, queryType) {
                var _this = this;
                /** @type {?} */
                var restUri = this.host + this.uri + 'deletefilter';
                /** @type {?} */
                var result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId: queryId, queryType: queryType }, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === true) {
                        _this.filterInfoList[queryId] = null;
                    }
                    else {
                        return false;
                    }
                })));
            };
        /**
         * @private
         * @return {?}
         */
        FilterManagerService.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return RtfServices.createHeaderSessionId(this.sessionService);
            };
        FilterManagerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FilterManagerService.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.SessionService },
                { type: String, decorators: [{ type: i0.Inject, args: [Server_Host,] }] }
            ];
        };
        return FilterManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EventBus = /** @class */ (function () {
        function EventBus() {
        }
        /**
         * @param {?} eventType
         * @param {?} handler
         * @param {?=} eventId
         * @return {?}
         */
        EventBus.register = /**
         * @param {?} eventType
         * @param {?} handler
         * @param {?=} eventId
         * @return {?}
         */
            function (eventType, handler, eventId) {
                var _this = this;
                if (!this.handlers[eventType]) {
                    this.handlers[eventType] = {};
                }
                /** @type {?} */
                var id = eventId;
                if (!id) {
                    id = this.guid();
                }
                this.handlers[eventType][id] = handler;
                /** @type {?} */
                var unsubscribe = ( /**
                 * @return {?}
                 */function () {
                    delete _this.handlers[eventType][id];
                    if (Object.keys(_this.handlers[eventType]).length === 0) {
                        delete _this.handlers[eventType];
                    }
                });
                return unsubscribe;
            };
        /**
         * @param {?} eventType
         * @param {?} args
         * @return {?}
         */
        EventBus.dispatch = /**
         * @param {?} eventType
         * @param {?} args
         * @return {?}
         */
            function (eventType, args) {
                var _this = this;
                if (this.handlers[eventType]) {
                    Object.keys(this.handlers[eventType]).forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) {
                        _this.handlers[eventType][key](args);
                    }));
                }
            };
        /**
         * @return {?}
         */
        EventBus.guid = /**
         * @return {?}
         */
            function () {
                /**
                 * @return {?}
                 */
                function S4() {
                    // tslint:disable-next-line:no-bitwise
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                }
                return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
            };
        EventBus.handlers = {};
        return EventBus;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JSONUtils = /** @class */ (function () {
        function JSONUtils() {
        }
        /**
         * @param {?} object
         * @return {?}
         */
        JSONUtils.isObj = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                return object && typeof (object) == 'object' && Object.prototype.toString.call(object).toLowerCase() == "[object object]";
            };
        /**
         * @param {?} object
         * @return {?}
         */
        JSONUtils.isArray = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                return object && typeof (object) == 'object' && object.constructor == Array;
            };
        /**
         * @param {?} object
         * @return {?}
         */
        JSONUtils.getLength = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                /** @type {?} */
                var count = 0;
                for (var i in object)
                    count++;
                return count;
            };
        /**
         * @param {?} objA
         * @param {?} objB
         * @return {?}
         */
        JSONUtils.Compare = /**
         * @param {?} objA
         * @param {?} objB
         * @return {?}
         */
            function (objA, objB) {
                if (!JSONUtils.isObj(objA) || !JSONUtils.isObj(objB))
                    return false; //判断类型是否正确
                if (JSONUtils.getLength(objA) != JSONUtils.getLength(objB))
                    return false; //判断长度是否一致
                return JSONUtils.CompareObj(objA, objB, true); //默认为true
            };
        /**
         * @private
         * @param {?} objA
         * @param {?} objB
         * @param {?} flag
         * @return {?}
         */
        JSONUtils.CompareObj = /**
         * @private
         * @param {?} objA
         * @param {?} objB
         * @param {?} flag
         * @return {?}
         */
            function (objA, objB, flag) {
                for (var key in objA) {
                    if (!flag) //跳出整个循环
                        break;
                    if (!objB.hasOwnProperty(key)) {
                        flag = false;
                        break;
                    }
                    if (!JSONUtils.isArray(objA[key])) { //子级不是数组时,比较属性值
                        if (objB[key] != objA[key]) {
                            flag = false;
                            break;
                        }
                    }
                    else {
                        if (!JSONUtils.isArray(objB[key])) {
                            flag = false;
                            break;
                        }
                        /** @type {?} */
                        var oA = objA[key];
                        /** @type {?} */
                        var oB = objB[key];
                        if (oA.length != oB.length) {
                            flag = false;
                            break;
                        }
                        for (var k in oA) {
                            if (!flag) //这里跳出循环是为了不让递归继续
                                break;
                            flag = JSONUtils.CompareObj(oA[k], oB[k], flag);
                        }
                    }
                }
                return flag;
            };
        return JSONUtils;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QDPCacheUtil = /** @class */ (function () {
        function QDPCacheUtil() {
        }
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        QDPCacheUtil.setCache = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                QDPCacheUtil.CacheMap.set(key, value);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        QDPCacheUtil.getCache = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return QDPCacheUtil.CacheMap.get(key);
            };
        QDPCacheUtil.CacheMap = new Map();
        return QDPCacheUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QdpCommonModule = /** @class */ (function () {
        function QdpCommonModule() {
        }
        /**
         * @return {?}
         */
        QdpCommonModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: QdpCommonModule,
                    providers: [
                        cafCommon.SessionService,
                        SchemaManagerService,
                        RestfulService,
                        LcpService,
                        ParasMappingManagerService,
                        JointSearchManagerService,
                        PrintIntegrationManagerService
                    ]
                };
            };
        QdpCommonModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [],
                        exports: []
                    },] }
        ];
        return QdpCommonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DndDraggableService = /** @class */ (function () {
        function DndDraggableService() {
            this._isDragging = false;
            this._itemType = '';
            this._removeOnDrop = false;
            this.dropEndSource = new rxjs.Subject();
        }
        /**
         * @param {?} state
         * @return {?}
         */
        DndDraggableService.prototype.setDraggingState = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                this._isDragging = state;
            };
        /**
         * @return {?}
         */
        DndDraggableService.prototype.getDraggingState = /**
         * @return {?}
         */
            function () {
                return this._isDragging;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DndDraggableService.prototype.setItemType = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._itemType = value.toLowerCase();
            };
        /**
         * @return {?}
         */
        DndDraggableService.prototype.getItemType = /**
         * @return {?}
         */
            function () {
                return this._itemType;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DndDraggableService.prototype.setDropCallback = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._dropCallback = value;
            };
        /**
         * @return {?}
         */
        DndDraggableService.prototype.getDropCallback = /**
         * @return {?}
         */
            function () {
                return this._dropCallback;
            };
        /**
         * @param {?} dropEffect
         * @return {?}
         */
        DndDraggableService.prototype.setDropEffect = /**
         * @param {?} dropEffect
         * @return {?}
         */
            function (dropEffect) {
                this._dropEffect = dropEffect;
            };
        /**
         * @return {?}
         */
        DndDraggableService.prototype.getDropEffect = /**
         * @return {?}
         */
            function () {
                return this._dropEffect;
            };
        /**
         * @param {?} effectAllowed
         * @return {?}
         */
        DndDraggableService.prototype.setEffectAllowed = /**
         * @param {?} effectAllowed
         * @return {?}
         */
            function (effectAllowed) {
                this._effectAllowed = effectAllowed;
            };
        /**
         * @return {?}
         */
        DndDraggableService.prototype.getEffectAllowed = /**
         * @return {?}
         */
            function () {
                return this._effectAllowed;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DndDraggableService.prototype.setRemoveOnDrop = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._removeOnDrop = value;
            };
        /**
         * @return {?}
         */
        DndDraggableService.prototype.getRemoveOnDrop = /**
         * @return {?}
         */
            function () {
                return this._removeOnDrop;
            };
        DndDraggableService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        DndDraggableService.ctorParameters = function () { return []; };
        return DndDraggableService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MIME_TYPE = 'application/x-dnd';
    /** @type {?} */
    var EDGE_MIME_TYPE = 'application/json';
    /** @type {?} */
    var MSIE_MIME_TYPE = 'Text';
    /** @type {?} */
    var ALL_EFFECTS = ['move', 'copy', 'link'];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DndDraggableDirective = /** @class */ (function () {
        function DndDraggableDirective(_dndService, _renderer, _hostElement) {
            this._dndService = _dndService;
            this._renderer = _renderer;
            this.dndType = '';
            this.dndDragstart = new i0.EventEmitter();
            this.dndDragend = new i0.EventEmitter();
            this.dndSelected = new i0.EventEmitter();
            this.dndMoved = new i0.EventEmitter();
            this.dndCopied = new i0.EventEmitter();
            this.dndLinked = new i0.EventEmitter();
            this.dndCanceled = new i0.EventEmitter();
            if (_hostElement) {
                this._nativeElement = _hostElement.nativeElement;
            }
        }
        Object.defineProperty(DndDraggableDirective.prototype, "draggable", {
            get: /**
             * @return {?}
             */ function () {
                return !this.dndDisable;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DndDraggableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} event
         * @return {?}
         */
        DndDraggableDirective.prototype.onDragStart = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                event = event.originalEvent || event;
                if (!this.draggable) {
                    return true;
                }
                this._dndService.setDraggingState(true);
                this._dndService.setItemType(this.dndType);
                /** @type {?} */
                var mimeType = MIME_TYPE + (this._dndService.getItemType() ? ('-' + this._dndService.getItemType()) : '');
                // Set the allowed drop effects. See below for special IE handling.
                this._dndService.setDropEffect('none');
                this._dndService.setEffectAllowed(this.dndEffectAllowed || ALL_EFFECTS[0]);
                event.dataTransfer.effectAllowed = this._dndService.getEffectAllowed(); // TODO: set allowed effects
                try {
                    event.dataTransfer.setData(mimeType, JSON.stringify(this.dndDraggable));
                }
                catch (e) {
                    /** @type {?} */
                    var data = {
                        item: this.dndDraggable,
                        type: this._dndService.getItemType()
                    };
                    try {
                        // Setting a custom MIME type did not work, we are probably in IE or Edge.
                        event.dataTransfer.setData(EDGE_MIME_TYPE, JSON.stringify(data));
                    }
                    catch (e) {
                        // We are in Internet Explorer and can only use the Text MIME type. Also note that IE
                        // does not allow changing the cursor in the dragover event, therefore we have to choose
                        // the one we want to display now by setting effectAllowed.
                        event.dataTransfer.effectAllowed = 'move';
                        event.dataTransfer.setData(MSIE_MIME_TYPE, JSON.stringify(data));
                    }
                }
                this._renderer.addClass(this._nativeElement, 'dndDragging');
                setTimeout(( /**
                 * @return {?}
                 */function () { return _this._renderer.addClass(_this._nativeElement, 'dndDraggingSource'); }), 0);
                // Try setting a proper drag image if triggered on a dnd-handle (won't work in IE).
                if (event._dndHandle && event.dataTransfer.setDragImage) {
                    event.dataTransfer.setDragImage(this._nativeElement, 0, 0);
                }
                // Emit dragstart event and prepare extra callback for dropzone.
                this.dndDragstart.emit(event);
                if (this.dndCallback) {
                    /** @type {?} */
                    var callback_1 = this.dndCallback;
                    this._dndService.setDropCallback(( /**
                     * @param {?} params
                     * @return {?}
                     */function (params) {
                        return callback_1(params);
                    }));
                }
                event.stopPropagation();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DndDraggableDirective.prototype.onDragEnd = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                /** @type {?} */
                var dropEffect = this._dndService.getDropEffect();
                /** @type {?} */
                var cb = { copy: 'dndCopied', link: 'dndLinked', move: 'dndMoved', none: 'dndCanceled' };
                this[cb[dropEffect]].emit(event);
                this.dndDragend.emit({
                    event: event,
                    dropEffect: dropEffect
                });
                // Clean up
                this._dndService.setDraggingState(false);
                this._dndService.setDropCallback(undefined);
                this._dndService.setRemoveOnDrop(false);
                this._renderer.removeClass(this._nativeElement, 'dndDragging');
                this._renderer.removeClass(this._nativeElement, 'dndDraggingSource');
                event.stopPropagation();
                // In IE9 it is possible that the timeout from dragstart triggers after the dragend handler.
                setTimeout(( /**
                 * @return {?}
                 */function () { return _this._renderer.removeClass(_this._nativeElement, 'dndDraggingSource'); }), 0);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DndDraggableDirective.prototype.click = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.dndSelected.emit(event);
                // Prevent triggering dndSelected in parent elements.
                event.stopPropagation();
            };
        DndDraggableDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[dndDraggable]',
                    },] }
        ];
        /** @nocollapse */
        DndDraggableDirective.ctorParameters = function () {
            return [
                { type: DndDraggableService },
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        DndDraggableDirective.propDecorators = {
            dndDraggable: [{ type: i0.Input }],
            dndDisable: [{ type: i0.Input }],
            dndType: [{ type: i0.Input }],
            dndCallback: [{ type: i0.Input }],
            dndEffectAllowed: [{ type: i0.Input }],
            dndDragstart: [{ type: i0.Output }],
            dndDragend: [{ type: i0.Output }],
            dndSelected: [{ type: i0.Output }],
            dndMoved: [{ type: i0.Output }],
            dndCopied: [{ type: i0.Output }],
            dndLinked: [{ type: i0.Output }],
            dndCanceled: [{ type: i0.Output }],
            draggable: [{ type: i0.HostBinding, args: ['draggable',] }],
            onDragStart: [{ type: i0.HostListener, args: ['dragstart', ['$event'],] }],
            onDragEnd: [{ type: i0.HostListener, args: ['dragend', ['$event'],] }],
            click: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
        };
        return DndDraggableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DndListDirective = /** @class */ (function () {
        function DndListDirective(_el, _renderer, _dndService) {
            this._el = _el;
            this._renderer = _renderer;
            this._dndService = _dndService;
            this.dndDisable = false;
            this.dndListChange = new i0.EventEmitter();
            this.dndDragover = new i0.EventEmitter();
            this.dndDrop = new i0.EventEmitter();
            this.dndInserted = new i0.EventEmitter();
            this._listSettings = {};
            this._dragOverStopped = false;
            this._counter = 0;
            this._nativeElement = this._el.nativeElement;
        }
        /**
         * @return {?}
         */
        DndListDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var placeholder = this._getPlaceholderElement();
                placeholder.remove();
                this._placeholderNode = placeholder;
                this._listNode = this._nativeElement;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DndListDirective.prototype.onDragEnter = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this._counter++;
                this._dragOverStopped = false;
                event = event.originalEvent || event;
                this._listSettings = {
                    allowedTypes: Array.isArray(this.dndAllowedTypes) && this.dndAllowedTypes.join('|').toLowerCase().split('|'),
                    disabled: this.dndDisable,
                    externalSources: this.dndExternalSources,
                    horizontal: this.dndHorizontalList
                };
                /** @type {?} */
                var mimeType = this._getMimeType(event.dataTransfer.types);
                if (!mimeType || !this._isDropAllowed(this._getItemType(mimeType))) {
                    return true;
                }
                event.preventDefault();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DndListDirective.prototype.onDragOver = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event = event.originalEvent || event;
                // Check whether the drop is allowed and determine mime type.
                /** @type {?} */
                var mimeType = this._getMimeType(event.dataTransfer.types);
                /** @type {?} */
                var itemType = this._getItemType(mimeType);
                if (!mimeType || !this._isDropAllowed(itemType)) {
                    return true;
                }
                // Make sure the placeholder is shown, which is especially important if the list is empty.
                if (this._placeholderNode.parentNode !== this._listNode) {
                    this._renderer.appendChild(this._nativeElement, this._placeholderNode);
                }
                if (event.target !== this._listNode) {
                    // Try to find the node direct directly below the list node.
                    /** @type {?} */
                    var listItemNode = event.target;
                    while (listItemNode.parentNode !== this._listNode && listItemNode.parentNode) {
                        listItemNode = listItemNode.parentNode;
                    }
                    if (listItemNode.parentNode === this._listNode && listItemNode !== this._placeholderNode) {
                        // If the mouse pointer is in the upper half of the list item element,
                        // we position the placeholder before the list item, otherwise after it.
                        /** @type {?} */
                        var rect = listItemNode.getBoundingClientRect();
                        /** @type {?} */
                        var isFirstHalf = void 0;
                        if (this._listSettings.horizontal) {
                            isFirstHalf = event.clientX < rect.left + rect.width / 2;
                        }
                        else {
                            isFirstHalf = event.clientY < rect.top + rect.height / 2;
                        }
                        this._listNode.insertBefore(this._placeholderNode, isFirstHalf ? listItemNode : listItemNode.nextSibling);
                    }
                }
                // In IE we set a fake effectAllowed in dragstart to get the correct cursor, we therefore
                // ignore the effectAllowed passed in dataTransfer. We must also not access dataTransfer for
                // drops from external sources, as that throws an exception.
                /** @type {?} */
                var ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;
                /** @type {?} */
                var dropEffect = this._getDropEffect(event, ignoreDataTransfer);
                if (dropEffect === 'none') {
                    return this._stopDragover();
                }
                // At this point we invoke the callback, which still can disallow the drop.
                // We can't do this earlier because we want to pass the index of the placeholder.
                this.dndDragover.emit(this._getEventResponse(event, dropEffect, itemType));
                if (this._dragOverStopped) {
                    return this._stopDragover();
                }
                // Set dropEffect to modify the cursor shown by the browser, unless we're in IE, where this
                // is not supported. This must be done after preventDefault in Firefox.
                event.preventDefault();
                if (!ignoreDataTransfer) {
                    event.dataTransfer.dropEffect = dropEffect;
                }
                this._renderer.addClass(this._nativeElement, 'dndDragover');
                event.stopPropagation();
                return false;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DndListDirective.prototype.onDrop = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this._counter = 0;
                event = event.originalEvent || event;
                // Check whether the drop is allowed and determine mime type.
                /** @type {?} */
                var mimeType = this._getMimeType(event.dataTransfer.types);
                /** @type {?} */
                var itemType = this._getItemType(mimeType);
                if (!mimeType || !this._isDropAllowed(itemType)) {
                    return true;
                }
                // The default behavior in Firefox is to interpret the dropped element as URL and
                // forward to it. We want to prevent that even if our drop is aborted.
                event.preventDefault();
                // Unserialize the data that was serialized in dragstart.
                /** @type {?} */
                var data;
                try {
                    data = JSON.parse(event.dataTransfer.getData(mimeType));
                }
                catch (e) {
                    return this._stopDragover();
                }
                // Drops with invalid types from external sources might not have been filtered out yet.
                if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {
                    itemType = data.type || undefined;
                    data = data.item;
                    if (!this._isDropAllowed(itemType)) {
                        return this._stopDragover();
                    }
                }
                // Special handling for internal IE drops, see dragover handler.
                /** @type {?} */
                var ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;
                /** @type {?} */
                var dropEffect = this._getDropEffect(event, ignoreDataTransfer);
                if (dropEffect === 'none') {
                    return this._stopDragover();
                }
                // Invoke the callback, which can transform the transferredObject and even abort the drop.
                /** @type {?} */
                var index = this._getPlaceholderIndex();
                this.dndDrop.emit(this._getEventResponse(event, dropEffect, itemType, index, data));
                if (this._dragOverStopped) {
                    return this._stopDragover();
                }
                // The drop is definitely going to happen now, store the dropEffect.
                this._dndService.setDropEffect(dropEffect);
                if (!ignoreDataTransfer) {
                    event.dataTransfer.dropEffect = dropEffect;
                }
                if (this.dndList) {
                    // Creates a new array adding the object into the array position without mutate the original.
                    /** @type {?} */
                    var newList = __spread(this.dndList.slice(0, index), [data], this.dndList.slice(index));
                    this.dndListChange.emit(newList);
                }
                this._dndService.setRemoveOnDrop(true);
                // this._dndService.dropEndSource()
                this.dndInserted.emit(this._getEventResponse(event, dropEffect, itemType, index, data));
                // Clean up
                this._stopDragover();
                event.stopPropagation();
                return false;
            };
        /**
       * We have to remove the placeholder when the element is no longer dragged over our list. The
       * problem is that the dragleave event is not only fired when the element leaves our list,
       * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
       * is still pointing to an element inside the list or not.
       */
        /**
         * We have to remove the placeholder when the element is no longer dragged over our list. The
         * problem is that the dragleave event is not only fired when the element leaves our list,
         * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
         * is still pointing to an element inside the list or not.
         * @param {?} event
         * @return {?}
         */
        DndListDirective.prototype.onDragLeave = /**
         * We have to remove the placeholder when the element is no longer dragged over our list. The
         * problem is that the dragleave event is not only fired when the element leaves our list,
         * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
         * is still pointing to an element inside the list or not.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this._counter--;
                event = event.originalEvent || event;
                if (this._counter !== 0) {
                    // Signalize to potential parent lists that a placeholder is already shown.
                    event._dndPhShown = true;
                }
                else {
                    this._stopDragover();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DndListDirective.prototype.onmouseout = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this._dndService.getDraggingState()) {
                    this._stopDragover();
                }
            };
        /**
         * @private
         * @return {?}
         */
        DndListDirective.prototype._stopDrag = /**
         * @private
         * @return {?}
         */
            function () {
                this._dragOverStopped = true;
            };
        /**
         * @private
         * @return {?}
         */
        DndListDirective.prototype._stopDragover = /**
         * @private
         * @return {?}
         */
            function () {
                this._placeholderNode.remove();
                this._renderer.removeClass(this._nativeElement, 'dndDragover');
                return true;
            };
        /**
       * Create a DndListEvent instance for events response.
       */
        /**
         * Create a DndListEvent instance for events response.
         * @private
         * @param {?} event
         * @param {?} dropEffect
         * @param {?} itemType
         * @param {?=} index
         * @param {?=} item
         * @return {?}
         */
        DndListDirective.prototype._getEventResponse = /**
         * Create a DndListEvent instance for events response.
         * @private
         * @param {?} event
         * @param {?} dropEffect
         * @param {?} itemType
         * @param {?=} index
         * @param {?=} item
         * @return {?}
         */
            function (event, dropEffect, itemType, index, item) {
                return {
                    callback: this._dndService.getDropCallback(),
                    dropEffect: dropEffect,
                    event: event,
                    external: !this._dndService.getDraggingState(),
                    index: index !== undefined ? index : this._getPlaceholderIndex(),
                    item: item || undefined,
                    stopDragover: this._stopDrag.bind(this),
                    type: itemType
                };
            };
        /**
         * @private
         * @return {?}
         */
        DndListDirective.prototype._getPlaceholderIndex = /**
         * @private
         * @return {?}
         */
            function () {
                return Array.prototype.indexOf.call(this._nativeElement.children, this._placeholderNode);
            };
        /**
         * @private
         * @return {?}
         */
        DndListDirective.prototype._getPlaceholderElement = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var placeholder = [].slice.call(this._nativeElement.children).filter(( /**
                 * @param {?} childNode
                 * @return {?}
                 */function (childNode) {
                    return childNode.className.indexOf('dndPlaceholder') > -1;
                }));
                if (placeholder.length) {
                    return placeholder;
                }
                placeholder = this._renderer.createElement('li');
                this._renderer.addClass(placeholder, 'dndPlaceholder');
                return placeholder;
            };
        /**
         * @private
         * @param {?} types
         * @return {?}
         */
        DndListDirective.prototype._getMimeType = /**
         * @private
         * @param {?} types
         * @return {?}
         */
            function (types) {
                if (!types) {
                    return MSIE_MIME_TYPE; // IE 9 workaround.
                }
                for (var i = 0; i < types.length; i++) {
                    if (types[i] === MSIE_MIME_TYPE || types[i] === EDGE_MIME_TYPE ||
                        types[i].substr(0, MIME_TYPE.length) === MIME_TYPE) {
                        return types[i];
                    }
                }
                return null;
            };
        /**
       * Determines the type of the item from the dndService, or from the mime type for items from
       * external sources. Returns undefined if no item type was set and null if the item type could
       * not be determined.
       */
        /**
         * Determines the type of the item from the dndService, or from the mime type for items from
         * external sources. Returns undefined if no item type was set and null if the item type could
         * not be determined.
         * @private
         * @param {?} mimeType
         * @return {?}
         */
        DndListDirective.prototype._getItemType = /**
         * Determines the type of the item from the dndService, or from the mime type for items from
         * external sources. Returns undefined if no item type was set and null if the item type could
         * not be determined.
         * @private
         * @param {?} mimeType
         * @return {?}
         */
            function (mimeType) {
                if (this._dndService.getDraggingState()) {
                    return this._dndService.getItemType() || undefined;
                }
                if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {
                    return null;
                }
                return (mimeType && mimeType.substr(MIME_TYPE.length + 1)) || undefined;
            };
        /**
         * @private
         * @param {?} itemType
         * @return {?}
         */
        DndListDirective.prototype._isDropAllowed = /**
         * @private
         * @param {?} itemType
         * @return {?}
         */
            function (itemType) {
                if (this._listSettings.disabled) {
                    return false;
                }
                if (!this._listSettings.externalSources && !this._dndService.getDraggingState()) {
                    return false;
                }
                if (!this._listSettings.allowedTypes || itemType === null) {
                    return true;
                }
                return itemType && this._listSettings.allowedTypes.indexOf(itemType) !== -1;
            };
        /**
       * Determines which drop effect to use for the given event. In Internet Explorer we have to
       * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
       * In those cases we rely on dndState to filter effects. Read the design doc for more details:
       * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
       */
        /**
         * Determines which drop effect to use for the given event. In Internet Explorer we have to
         * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
         * In those cases we rely on dndState to filter effects. Read the design doc for more details:
         * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
         * @private
         * @param {?} event
         * @param {?} ignoreDataTransfer
         * @return {?}
         */
        DndListDirective.prototype._getDropEffect = /**
         * Determines which drop effect to use for the given event. In Internet Explorer we have to
         * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
         * In those cases we rely on dndState to filter effects. Read the design doc for more details:
         * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
         * @private
         * @param {?} event
         * @param {?} ignoreDataTransfer
         * @return {?}
         */
            function (event, ignoreDataTransfer) {
                /** @type {?} */
                var effects = ALL_EFFECTS;
                if (!ignoreDataTransfer) {
                    effects = this._filterEffects(effects, event.dataTransfer.effectAllowed);
                }
                if (this._dndService.getDraggingState()) {
                    effects = this._filterEffects(effects, this._dndService.getEffectAllowed());
                }
                if (this.dndEffectAllowed) {
                    effects = this._filterEffects(effects, this.dndEffectAllowed);
                }
                // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
                // therefore the following modifier keys will only affect other operating systems.
                if (!effects.length) {
                    return 'none';
                }
                else if (event.ctrlKey && effects.indexOf('copy') !== -1) {
                    return 'copy';
                }
                else if (event.altKey && effects.indexOf('link') !== -1) {
                    return 'link';
                }
                else {
                    return effects[0];
                }
            };
        /**
       * Filters an array of drop effects using a HTML5 effectAllowed string.
       */
        /**
         * Filters an array of drop effects using a HTML5 effectAllowed string.
         * @private
         * @param {?} effects
         * @param {?} effectAllowed
         * @return {?}
         */
        DndListDirective.prototype._filterEffects = /**
         * Filters an array of drop effects using a HTML5 effectAllowed string.
         * @private
         * @param {?} effects
         * @param {?} effectAllowed
         * @return {?}
         */
            function (effects, effectAllowed) {
                if (effectAllowed === 'all') {
                    return effects;
                }
                return effects.filter(( /**
                 * @param {?} effect
                 * @return {?}
                 */function (effect) {
                    return effectAllowed.toLowerCase().indexOf(effect) !== -1;
                }));
            };
        DndListDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[dndList]',
                    },] }
        ];
        /** @nocollapse */
        DndListDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: DndDraggableService }
            ];
        };
        DndListDirective.propDecorators = {
            dndDisable: [{ type: i0.Input }],
            dndAllowedTypes: [{ type: i0.Input }],
            dndExternalSources: [{ type: i0.Input }],
            dndHorizontalList: [{ type: i0.Input }],
            dndEffectAllowed: [{ type: i0.Input }],
            pureComponent: [{ type: i0.Input }],
            dndList: [{ type: i0.Input }],
            dndListChange: [{ type: i0.Output }],
            dndDragover: [{ type: i0.Output }],
            dndDrop: [{ type: i0.Output }],
            dndInserted: [{ type: i0.Output }],
            onDragEnter: [{ type: i0.HostListener, args: ['dragenter', ['$event'],] }],
            onDragOver: [{ type: i0.HostListener, args: ['dragover', ['$event'],] }],
            onDrop: [{ type: i0.HostListener, args: ['drop', ['$event'],] }],
            onDragLeave: [{ type: i0.HostListener, args: ['dragleave', ['$event'],] }],
            onmouseout: [{ type: i0.HostListener, args: ['mouseleave', ['$event'],] }]
        };
        return DndListDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DndNodragDirective = /** @class */ (function () {
        function DndNodragDirective() {
        }
        /**
         * @return {?}
         */
        DndNodragDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        Object.defineProperty(DndNodragDirective.prototype, "draggable", {
            get: /**
             * @return {?}
             */ function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        DndNodragDirective.prototype.onDragStart = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event = event.originalEvent || event;
                if (!event._dndHandle) {
                    // If a child element already reacted to dragstart and set a dataTransfer object, we will
                    // allow that. For example, this is the case for user selections inside of input elements.
                    if (!(event.dataTransfer.types && event.dataTransfer.types.length)) {
                        event.preventDefault();
                    }
                    event.stopPropagation();
                }
            };
        /**
         * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
         * would be removed.
         */
        /**
         * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
         * would be removed.
         * @param {?} event
         * @return {?}
         */
        DndNodragDirective.prototype.onDragEnd = /**
         * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
         * would be removed.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event = event.originalEvent || event;
                if (!event._dndHandle) {
                    event.stopPropagation();
                }
            };
        DndNodragDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[dndNodrag]',
                    },] }
        ];
        /** @nocollapse */
        DndNodragDirective.ctorParameters = function () { return []; };
        DndNodragDirective.propDecorators = {
            draggable: [{ type: i0.HostBinding, args: ['draggable',] }],
            onDragStart: [{ type: i0.HostListener, args: ['dragstart', ['$event'],] }],
            onDragEnd: [{ type: i0.HostListener, args: ['dragend', ['$event'],] }]
        };
        return DndNodragDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DndHandleDirective = /** @class */ (function () {
        function DndHandleDirective() {
        }
        /**
         * @return {?}
         */
        DndHandleDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        Object.defineProperty(DndHandleDirective.prototype, "draggable", {
            get: /**
             * @return {?}
             */ function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        DndHandleDirective.prototype.onDragStart = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event = event.originalEvent || event;
                event._dndHandle = true;
            };
        DndHandleDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[dndHandle]',
                    },] }
        ];
        /** @nocollapse */
        DndHandleDirective.ctorParameters = function () { return []; };
        DndHandleDirective.propDecorators = {
            draggable: [{ type: i0.HostBinding, args: ['draggable',] }],
            onDragStart: [{ type: i0.HostListener, args: ['dragstart dragend', ['$event'],] }]
        };
        return DndHandleDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var declarations = [
        DndDraggableDirective,
        DndListDirective,
        DndNodragDirective,
        DndHandleDirective
    ];
    var DndListModule = /** @class */ (function () {
        function DndListModule() {
        }
        DndListModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: declarations,
                        providers: [
                            DndDraggableService
                        ],
                        exports: declarations
                    },] }
        ];
        return DndListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.RestfulService = RestfulService;
    exports.SchemaManagerService = SchemaManagerService;
    exports.LcpService = LcpService;
    exports.IntegrationPrintService = IntegrationPrintService;
    exports.ParasMappingManagerService = ParasMappingManagerService;
    exports.PrintIntegrationManagerService = PrintIntegrationManagerService;
    exports.JointSearchManagerService = JointSearchManagerService;
    exports.DataRenderExtendService = DataRenderExtendService;
    exports.JointSearchExtendService = JointSearchExtendService;
    exports.SchemaRenderExtendService = SchemaRenderExtendService;
    exports.FilterManagerService = FilterManagerService;
    exports.EventBus = EventBus;
    exports.JSONUtils = JSONUtils;
    exports.QDPCacheUtil = QDPCacheUtil;
    exports.RtfServices = RtfServices;
    exports.Server_Host = Server_Host;
    exports.Load_Data_Uri = Load_Data_Uri;
    exports.Load_Data_Col = Load_Data_Col;
    exports.QdpCommonModule = QdpCommonModule;
    exports.DndListModule = DndListModule;
    exports.DndDraggableDirective = DndDraggableDirective;
    exports.DndHandleDirective = DndHandleDirective;
    exports.DndListDirective = DndListDirective;
    exports.DndNodragDirective = DndNodragDirective;
    exports.ɵa = DndDraggableDirective;
    exports.ɵe = DndHandleDirective;
    exports.ɵc = DndListDirective;
    exports.ɵd = DndNodragDirective;
    exports.ɵb = DndDraggableService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=qdp-common.umd.js.map