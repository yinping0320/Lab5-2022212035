/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject, Optional } from '@angular/core';
import { Subject, of } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { filter } from 'lodash-es';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { SchemaRenderExtendService } from '../extend-service/schema-renderextend.service';
import { RtfServices } from '../rtfservices/rtfservices';
export class SchemaManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     * @param {?} schemaRenderExtendService
     */
    constructor(restService, sessionService, host, schemaRenderExtendService) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.schemaRenderExtendService = schemaRenderExtendService;
        this.uri = '/api/runtime/bcc/v1.0/qdpschemamanager/';
        this.schemaInfoChange = new Subject();
        this.colList = new Subject();
        this.controlType = new Subject();
        this.schemaInfo = {};
        this.schemaid = {} = new Subject();
        this.operationChange = new Subject();
        this.dynamicCols = {};
        this.customSchema = {};
        this.dynamicColIndex = 0;
        this.preSchema = {
            id: 'prefab',
            schemaName: '系统预制',
            isPrefab: 1,
            isDefault: 0,
            isProtected: '0',
            schemaValue: {
                titleOption: {
                    title: '',
                    subTitles: []
                },
                columnOption: {
                    maxLevel: 0,
                    colList: []
                },
                styleOption: {
                    Title: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    SubTitle: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    Header: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    DataArea: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    Footer: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    }
                },
                otherOption: {
                    showFilterRow: true,
                    dataCahce: true,
                    level: '',
                    isDetails: '',
                    loadDataType: 1,
                    pageSize: 20,
                    treeInfoType: 2,
                    pathField: '',
                    pathStep: 0,
                    idField: '',
                    parentField: '',
                    firstLoad: true,
                    showZero: true,
                    expand: true,
                    showHeaderSort: true
                }
            }
        };
        this.isDefaultSchema = [];
        this.operations = {};
        /** @type {?} */
        const self = this;
        this.getOperation().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value) {
                self.operations['QdpQueryExport'] = value['05202284-dfc4-149c-853e-cfd35b4a02bb'];
                self.operations['QdpQueryPrint'] = value['653fe24b-d77f-d8b0-71c5-5e3d561e33ca'];
                self.operations['QdpModifyPublicSchema'] = value['d6832d96-e6f3-114e-1d53-f9e636548eb9'];
                self.operations['QdpPubQuery'] = value['cd6c2057-5ad6-90dd-54ac-771c192563e8'];
                self.operationChange.next(self.operations);
            }
            // console.log(value);
        }));
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    getSpreadTemplate(id, queryId, dynamicCols, queryRelativeUrl, scheme, frozenCols, groupType) {
        if (dynamicCols && dynamicCols.length) {
            this.dynamicCols[groupType ? groupType : queryId] = dynamicCols;
            this.dynamicCols[id] = dynamicCols;
        }
        /** @type {?} */
        let schema;
        if (this.schemaList && this.schemaList[id]) {
            schema = this.schemaList[id];
        }
        /** @type {?} */
        let colInfo = [];
        // 新版本列信息通过frozenCols获取
        if (this.dynamicCols[groupType ? groupType : queryId]) {
            colInfo = Object.assign(frozenCols, this.dynamicCols[groupType ? groupType : queryId]);
        }
        else {
            colInfo = frozenCols;
        }
        this.colList.next(colInfo);
        return this.analysis((schema && schema.id ? schema.id : '1'), queryId, dynamicCols, queryRelativeUrl, scheme);
    }
    /**
     * 获取指定方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @param {?=} fromCache
     * @return {?}
     */
    getSchema(id, queryId, queryRelativeUrl, groupType, organizationId, fromCache) {
        /** @type {?} */
        const self = this;
        if (this.schemaList && this.schemaList[id] && fromCache && fromCache === true) {
            return of(this.schemaList[id]);
        }
        else {
            /** @type {?} */
            const result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
            return result$.pipe(map((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (id === '1' || id === 'prefab') {
                    return Object.assign({}, self.preSchema, { id: '1' });
                }
                else if (value && value['schemaList'] && value['schemaList'][queryId]) {
                    if (value['schemaList'][queryId][id]) {
                        return value['schemaList'][queryId][id];
                    }
                    else {
                        /** @type {?} */
                        let defaultSchemaId = '';
                        if (value.isDefaultSchema && value.isDefaultSchema.id && value['schemaList'][queryId][value.isDefaultSchema.id]) {
                            defaultSchemaId = value.isDefaultSchema.id;
                            return value['schemaList'][queryId][defaultSchemaId];
                        }
                        else {
                            return null;
                        }
                    }
                }
                else {
                    return null;
                }
            })));
        }
    }
    /**
     * 获取默认方案
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    getDefaultSchema(queryId, queryRelativeUrl, groupType, organizationId) {
        /** @type {?} */
        const result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            if (this.isDefaultSchema[queryId] && this.isDefaultSchema[queryId].id) {
                return this.isDefaultSchema[queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSchemaList(queryId, userId, organizationId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getschemalist';
        return this.getSchemas(restUri, queryRelativeUrl, { queryId, userId, organizationId });
    }
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} groupType
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSchemaListByGroupType(queryId, userId, organizationId, groupType, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getschemalistbygroup';
        return this.getSchemas(restUri, queryRelativeUrl, { queryId, userId, organizationId, groupType });
    }
    /**
     * @private
     * @param {?} uri
     * @param {?} queryRelativeUrl
     * @param {?} params
     * @return {?}
     */
    getSchemas(uri, queryRelativeUrl, params) {
        // queryId: string, userId: string, organizationId: string, groupType: any, queryRelativeUrl: any, params: any
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const result$ = self.restService.get(uri, params, self.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            self.schemaList = {};
            if (data && data.length) {
                self.isDefaultSchema[params.queryId] = null;
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.schemaValue = JSON.parse(element.schemaValue);
                    if (element.isDefault === 1) {
                        self.isDefaultSchema[params.queryId] = element;
                    }
                    self.schemaList[element.id] = element;
                    self.operateDynamicColsForSchema.call(self, element, params.groupType ? params.groupType : params.queryId);
                }));
                /** @type {?} */
                let schemaExtendId = '';
                if (self.schemaRenderExtendService && self.schemaRenderExtendService.schemaInfoRenderBefore) {
                    /** @type {?} */
                    const $event = { queryId: params.queryId };
                    $event['defaultSchemaId'] = '';
                    $event['schemalList'] = self.schemaList;
                    self.schemaRenderExtendService.schemaInfoRenderBefore($event);
                    if ($event['defaultSchemaId']) {
                        schemaExtendId = $event['defaultSchemaId'];
                    }
                }
                /** @type {?} */
                const filterCondition = { schemaType: 0 };
                if (schemaExtendId) {
                    filterCondition.id = schemaExtendId;
                }
                if (schemaExtendId || !self.isDefaultSchema || !self.isDefaultSchema[params.queryId]) {
                    if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                        self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                    }
                    else {
                        filterCondition.schemaType = 1;
                        if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                            self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                        }
                        else {
                            filterCondition.schemaType = 2;
                            if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                                self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                            }
                        }
                    }
                }
                self.schemaInfo[params.queryId] = self.schemaList;
                /** @type {?} */
                const preSchema = JSON.parse(JSON.stringify(self.preSchema));
                self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema });
                return { schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema };
            }
            else {
                delete self.schemaInfo[params.queryId];
                /** @type {?} */
                const preSchema = JSON.parse(JSON.stringify(self.preSchema));
                self.isDefaultSchema[params.queryId] = null;
                self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                self.schemaInfoChange.next({ schemaList: null, isDefaultSchema: null, preSchema: preSchema });
                return { schemaList: null, isDefaultSchema: null, preSchema: preSchema };
            }
        })));
    }
    /**
     * @param {?} groupType
     * @param {?=} queryId
     * @return {?}
     */
    mergeCustomSchema(groupType, queryId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let preSchema = JSON.parse(JSON.stringify(self.preSchema));
        preSchema = self.operateCustomSchema(preSchema, groupType);
        self.operateDynamicColsForSchema.call(self, preSchema, groupType, 1);
        self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema && self.isDefaultSchema[queryId] ? self.isDefaultSchema[queryId] : null, preSchema: preSchema });
        return preSchema;
    }
    /**
     * @private
     * @param {?} preSchema
     * @param {?} groupType
     * @return {?}
     */
    operateCustomSchema(preSchema, groupType) {
        try {
            if (this.customSchema && this.customSchema[groupType]) {
                /** @type {?} */
                const schema = JSON.parse(this.customSchema[groupType]);
                preSchema.schemaValue.titleOption = Object.assign(preSchema.schemaValue.titleOption, schema.titleOption);
                preSchema.schemaValue.columnOption = Object.assign(preSchema.schemaValue.columnOption, schema.columnOption);
                preSchema.schemaValue.styleOption = Object.assign(preSchema.schemaValue.styleOption, schema.styleOption);
                preSchema.schemaValue.otherOption = Object.assign(preSchema.schemaValue.otherOption, schema.otherOption);
                return preSchema;
            }
        }
        catch (e) {
            console.log(e);
        }
    }
    /**
     * 保存方案
     * @param {?} schema 方案实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveSchema(schema, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'saveschema';
        /** @type {?} */
        const schemaObj = JSON.parse(schema.schema);
        /** @type {?} */
        const result$ = this.restService.post(restUri, schema, {}, this.createHeaderSessionId());
        return result$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            if (schema.groupType) {
                return this.getSchemaListByGroupType(schemaObj.queryId, '', schemaObj.orgId, schema.groupType, queryRelativeUrl);
            }
            else {
                return this.getSchemaList(schemaObj.queryId, '', schemaObj.orgId, queryRelativeUrl);
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    deleteSchema(id, queryId, queryRelativeUrl, groupType, organizationId) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deleteschema';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { id }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.isDefaultSchema[queryId] = null;
                /** @type {?} */
                const result$1 = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
                return result$1.pipe(map((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    return true;
                })));
            }
            else {
                return of(false);
            }
        })));
    }
    /**
     * 获取spread模版
     * @param {?} id 方案ID
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @return {?}
     */
    analysis(id, queryId, dynamicCols, queryRelativeUrl, scheme) {
        /** @type {?} */
        const restUri = this.host + this.uri;
        /** @type {?} */
        let param = {};
        if (id !== '1') {
            if (dynamicCols && dynamicCols.length) {
                param = { id, dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
                return this.restService.post(restUri + 'getspreadtemplatewithdynamiccolumn', param, {}, this.createHeaderSessionId());
            }
            else {
                if (scheme) {
                    return this.restService.post(restUri + 'getspreadtemplatebyid', { id: id, schema: !scheme ? '' : scheme }, {}, this.createHeaderSessionId());
                }
                else {
                    return this.restService.get(restUri + 'getspreadtemplate', { id }, this.createHeaderSessionId());
                }
            }
        }
        else {
            dynamicCols = dynamicCols && dynamicCols.length ? dynamicCols : [];
            param = { dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
            return this.restService.post(restUri + 'getinitspreadtemplate', param, {}, this.createHeaderSessionId());
        }
    }
    /**
     * @param {?=} operators
     * @return {?}
     */
    getOperation(operators) {
        /** @type {?} */
        const restUri = this.host + this.uri;
        /** @type {?} */
        let param = {};
        if (!operators || !operators.length) {
            param = {
                operators: ['05202284-dfc4-149c-853e-cfd35b4a02bb', '653fe24b-d77f-d8b0-71c5-5e3d561e33ca', 'd6832d96-e6f3-114e-1d53-f9e636548eb9', 'cd6c2057-5ad6-90dd-54ac-771c192563e8']
            };
        }
        else {
            param = {
                operators: operators
            };
        }
        return this.restService.post(restUri + 'isprincipalhasop', param, {}, this.createHeaderSessionId());
    }
    /**
     * @param {?} type
     * @return {?}
     */
    validateOperation(type) {
        return this.operations['QdpModifyPublicSchema'] === true && (type === 0 || type === '0');
    }
    // 设置列信息
    /**
     * @param {?} dynamicCols
     * @return {?}
     */
    setColInfo(dynamicCols) {
        /** @type {?} */
        let colInfo = [];
        if (dynamicCols && dynamicCols.length) {
            colInfo = dynamicCols;
        }
        this.colList.next(colInfo);
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
    /**
     * 二开人员预制的格式方案可以显示动态列信息
     * @param {?} element
     * @param {?} groupType
     * @param {?=} schemaId
     * @return {?}
     */
    operateDynamicColsForSchema(element, groupType, schemaId) {
        if (this.dynamicCols && this.dynamicCols[groupType]) {
            if (element && element.id && (element.isProtected === 1 || element.isProtected === '1' || schemaId === 1)) {
                /** @type {?} */
                const dynamicColumns = schemaId === 1 ? this.dynamicCols[groupType] : this.dynamicCols[element.id];
                /** @type {?} */
                const dyCols = this.createColumns(dynamicColumns, element.schemaValue.columnOption.colList);
                element.schemaValue.columnOption.colList = dyCols;
            }
        }
    }
    /**
     * 合并动态列
     * @private
     * @param {?} colList
     * @param {?} columns
     * @return {?}
     */
    createColumns(colList, columns) {
        /** @type {?} */
        const columnList = [];
        if (columns && columns.length) {
            columnList.push(...JSON.parse(JSON.stringify(columns)));
            if (colList && colList.length > 0) {
                /** @type {?} */
                let index = 0;
                // tslint:disable-next-line:prefer-for-of
                for (let col = 0; col < colList.length; col++) {
                    /** @type {?} */
                    let c = this.getColumn(columnList, colList[col]);
                    if (c) {
                        if (this.recursiveCompareColumn(c['childList'], colList[col]['childList']) === false) {
                            c = colList[col];
                        }
                    }
                    else {
                        if (index >= columnList.length) {
                            columnList.push(colList[col]);
                        }
                        else {
                            columnList.splice(index, 0, colList[col]);
                        }
                    }
                    if (c && index === 0) {
                        index = this.dynamicColIndex + 1;
                    }
                    else {
                        index += 1;
                    }
                }
            }
        }
        else {
            if (colList && colList.length > 0) {
                columnList.push(...colList);
            }
        }
        return columnList;
    }
    /**
     * @private
     * @param {?} columns
     * @param {?} col
     * @return {?}
     */
    getColumn(columns, col) {
        /** @type {?} */
        let result = null;
        this.dynamicColIndex = 0;
        // tslint:disable-next-line:prefer-for-of
        for (let item = 0; item < columns.length; item++) {
            result = this.recursiveGetColumn(col, columns[item], null);
            if (result != null) {
                return result;
            }
        }
        return result;
    }
    /**
     * @private
     * @param {?} col
     * @param {?} parentColumn
     * @param {?} childList
     * @return {?}
     */
    recursiveGetColumn(col, parentColumn, childList) {
        if (parentColumn) {
            if (parentColumn['bindField'] === col['bindField']) {
                return parentColumn;
            }
            if (parentColumn['childList'] && parentColumn['childList'].length > 0) {
                return this.recursiveGetColumn(col, null, parentColumn['childList']);
            }
            else {
                this.dynamicColIndex += 1;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let item = 0; item < childList.length; item++) {
                if (childList[item]['bindField'] === col['bindField']) {
                    return childList[item];
                }
                if (childList[item]['childList'] && childList[item]['childList'].length > 0) {
                    return this.recursiveGetColumn(col, null, childList[item]['childList']);
                }
                else {
                    this.dynamicColIndex += 1;
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} firstChildList
     * @param {?} secondChildList
     * @return {?}
     */
    recursiveCompareColumn(firstChildList, secondChildList) {
        if (!firstChildList && !secondChildList) {
            return true;
        }
        else if (!firstChildList && secondChildList) {
            return false;
        }
        else if (firstChildList && !secondChildList) {
            return false;
        }
        else if (firstChildList && secondChildList) {
            if (firstChildList.length !== secondChildList.length) {
                return false;
            }
            else {
                if (firstChildList.length === 0 && secondChildList.length === 0) {
                    return true;
                }
                else if (firstChildList.length === 0) {
                    return false;
                }
                else {
                    for (let i = 0; i < firstChildList.length; i++) {
                        if (firstChildList[i].bindField !== secondChildList[i].bindField) {
                            return false;
                        }
                        return this.recursiveCompareColumn(firstChildList[i].childList, secondChildList[i].childList);
                    }
                    return false;
                }
            }
        }
        return false;
    }
}
SchemaManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SchemaManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] },
    { type: SchemaRenderExtendService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.uri;
    /** @type {?} */
    SchemaManagerService.prototype.schemaInfoChange;
    /** @type {?} */
    SchemaManagerService.prototype.colList;
    /** @type {?} */
    SchemaManagerService.prototype.controlType;
    /** @type {?} */
    SchemaManagerService.prototype.schemaInfo;
    /** @type {?} */
    SchemaManagerService.prototype.schemaid;
    /** @type {?} */
    SchemaManagerService.prototype.operationChange;
    /** @type {?} */
    SchemaManagerService.prototype.dynamicCols;
    /** @type {?} */
    SchemaManagerService.prototype.customSchema;
    /** @type {?} */
    SchemaManagerService.prototype.dynamicColIndex;
    /** @type {?} */
    SchemaManagerService.prototype.preSchema;
    /** @type {?} */
    SchemaManagerService.prototype.isDefaultSchema;
    /** @type {?} */
    SchemaManagerService.prototype.schemaList;
    /** @type {?} */
    SchemaManagerService.prototype.operations;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.host;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.schemaRenderExtendService;
}
//# sourceMappingURL=data:application/json;base64,