/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class EventBus {
    /**
     * @param {?} eventType
     * @param {?} handler
     * @param {?=} eventId
     * @return {?}
     */
    static register(eventType, handler, eventId) {
        if (!this.handlers[eventType]) {
            this.handlers[eventType] = {};
        }
        /** @type {?} */
        let id = eventId;
        if (!id) {
            id = this.guid();
        }
        this.handlers[eventType][id] = handler;
        /** @type {?} */
        const unsubscribe = (/**
         * @return {?}
         */
        () => {
            delete this.handlers[eventType][id];
            if (Object.keys(this.handlers[eventType]).length === 0) {
                delete this.handlers[eventType];
            }
        });
        return unsubscribe;
    }
    /**
     * @param {?} eventType
     * @param {?} args
     * @return {?}
     */
    static dispatch(eventType, args) {
        if (this.handlers[eventType]) {
            Object.keys(this.handlers[eventType]).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                this.handlers[eventType][key](args);
            }));
        }
    }
    /**
     * @return {?}
     */
    static guid() {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
}
EventBus.handlers = {};
if (false) {
    /** @type {?} */
    EventBus.handlers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRidXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2V2ZW50YnVzL2V2ZW50YnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxNQUFNLE9BQU8sUUFBUTs7Ozs7OztJQUduQixNQUFNLENBQUMsUUFBUSxDQUFDLFNBQWlCLEVBQUUsT0FBYSxFQUFFLE9BQWdCO1FBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQy9COztZQUVHLEVBQUUsR0FBRyxPQUFPO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7O2NBRWpDLFdBQVc7OztRQUFHLEdBQUcsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN0RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDakM7UUFDSCxDQUFDLENBQUE7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQWlCLEVBQUUsSUFBUztRQUMxQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTzs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7O0lBRUQsTUFBTSxDQUFDLElBQUk7Ozs7UUFDVCxTQUFTLEVBQUU7WUFDVCxzQ0FBc0M7WUFDdEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBQ0QsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7O0FBckNhLGlCQUFRLEdBQVEsRUFBRSxDQUFDOzs7SUFBakMsa0JBQWlDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBGdW5jID0gKGFyZ3M6IGFueSkgPT4gYW55O1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzIHtcclxuICBwdWJsaWMgc3RhdGljIGhhbmRsZXJzOiBhbnkgPSB7fTtcclxuXHJcbiAgc3RhdGljIHJlZ2lzdGVyKGV2ZW50VHlwZTogc3RyaW5nLCBoYW5kbGVyOiBGdW5jLCBldmVudElkPzogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXRoaXMuaGFuZGxlcnNbZXZlbnRUeXBlXSkge1xyXG4gICAgICB0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV0gPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaWQgPSBldmVudElkO1xyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICBpZCA9IHRoaXMuZ3VpZCgpO1xyXG4gICAgfSBcclxuICAgIHRoaXMuaGFuZGxlcnNbZXZlbnRUeXBlXVtpZF0gPSBoYW5kbGVyO1xyXG5cclxuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xyXG4gICAgICBkZWxldGUgdGhpcy5oYW5kbGVyc1tldmVudFR5cGVdW2lkXTtcclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuaGFuZGxlcnNbZXZlbnRUeXBlXSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnNbZXZlbnRUeXBlXTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGlzcGF0Y2goZXZlbnRUeXBlOiBzdHJpbmcsIGFyZ3M6IGFueSkge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbZXZlbnRUeXBlXSkge1xyXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV0pLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICB0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV1ba2V5XShhcmdzKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ3VpZCgpIHtcclxuICAgIGZ1bmN0aW9uIFM0KCkge1xyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxyXG4gICAgICByZXR1cm4gKCgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChTNCgpICsgUzQoKSArICctJyArIFM0KCkgKyAnLScgKyBTNCgpICsgJy0nICsgUzQoKSArICctJyArIFM0KCkgKyBTNCgpICsgUzQoKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==