/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { RtfServices } from '../rtfservices/rtfservices';
export class FilterManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/qdpfilter/';
        this.filterInfoChange = new Subject();
        this.isFilterQDP = new Subject(); // 是否刷新
        // 是否刷新
        this.filterInfoList = {};
        // this.uri = this.host + this.uri;
    }
    /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @param {?=} groupType
     * @return {?}
     */
    getFilter(id, queryId, queryRelativeUrl, queryType, groupType) {
        /** @type {?} */
        const result$ = this.getFilterList(queryId, id, groupType, '', queryRelativeUrl, queryType);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[queryId]) {
                return value[queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} groupType
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    getFilterList(queryId, datasourceId, groupType, languageType, queryRelativeUrl, queryType = 0) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getfilterlist';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { queryId, datasourceId, groupType, languageType, queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.filter = JSON.parse(element.filter);
                    this.filterInfoList[element.queryid] = element;
                }));
                this.filterInfoChange.next({ parasInfoList: this.filterInfoList });
                return this.filterInfoList;
            }
            else {
                this.filterInfoChange.next({ parasInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存参数映射
     * @param {?} filter 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveFilter(filter, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'savefilter';
        /** @type {?} */
        const result$ = this.restService.post(restUri, filter, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            filter.filter = JSON.parse(filter.filter);
            if (Object.keys(this.filterInfoList).indexOf(filter.queryid)) {
                this.filterInfoList[filter.queryid] = filter;
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @return {?}
     */
    deleteFilter(datasourceid, queryId, queryRelativeUrl, queryType) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deletefilter';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId, queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.filterInfoList[queryId] = null;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
FilterManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.uri;
    /** @type {?} */
    FilterManagerService.prototype.filterInfoChange;
    /** @type {?} */
    FilterManagerService.prototype.isFilterQDP;
    /** @type {?} */
    FilterManagerService.prototype.filterInfoList;
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,