/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { RtfServices } from '../rtfservices/rtfservices';
export class PrintIntegrationManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/printintegration/';
        this.printIntegrationInfoChange = new Subject();
        this.printIntegrationInfoList = {};
    }
    /**
     * 获取查询参数映射信息
     * @param {?} schemaId 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getPrintIntegration(schemaId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const result$ = this.getPrintIntegrationList(queryId, schemaId, '', '', queryRelativeUrl);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[schemaId + queryId]) {
                return value[schemaId + queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取打印设置信息列表
     * @param {?} queryId 查询编号
     * @param {?} schemaId 方案ID
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getPrintIntegrationList(queryId, schemaId, userId, languageType, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getprintintegrationlist';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { queryId, schemaId, userId, languageType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.printintegration = JSON.parse(element.printintegration);
                    this.printIntegrationInfoList[schemaId + queryId] = element;
                }));
                this.printIntegrationInfoChange.next({ printIntegrationInfoList: this.printIntegrationInfoList });
                return this.printIntegrationInfoList;
            }
            else {
                this.printIntegrationInfoChange.next({ printIntegrationInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存打印设置信息
     * @param {?} element 打印设置
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    savePrintIntegration(element, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'saveprintintegration';
        /** @type {?} */
        const integration = element;
        /** @type {?} */
        const result$ = this.restService.post(restUri, integration, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            element.printintegration = JSON.parse(element.printintegration);
            if (Object.keys(this.printIntegrationInfoList).indexOf(element.schemaId + element.queryId)) {
                this.printIntegrationInfoList[element.schemaId + element.queryId] = element;
            }
        })));
    }
    /**
     * 删除打印设置信息
     * @param {?} schemaId 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deletePrintIntegration(schemaId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deleteprintintegration';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { schemaId, queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.printIntegrationInfoList[schemaId + queryId] = null;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
PrintIntegrationManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintIntegrationManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PrintIntegrationManagerService.prototype.uri;
    /** @type {?} */
    PrintIntegrationManagerService.prototype.printIntegrationInfoChange;
    /** @type {?} */
    PrintIntegrationManagerService.prototype.printIntegrationInfoList;
    /**
     * @type {?}
     * @private
     */
    PrintIntegrationManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    PrintIntegrationManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    PrintIntegrationManagerService.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,