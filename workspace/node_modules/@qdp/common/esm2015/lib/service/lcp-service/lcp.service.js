/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { Server_Host, Load_Data_Uri, Load_Data_Col } from '../../entitties/server.host';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { RtfServices } from '../rtfservices/rtfservices';
import { FileType, OutputType, PrintType } from '@gsp-svc/cloudprint';
export class LcpService {
    /**
     * @param {?} restfulService
     * @param {?} sessionService
     * @param {?} serverHost
     * @param {?} loadDataUri
     * @param {?} loadDataCol
     */
    constructor(restfulService, sessionService, serverHost, loadDataUri, loadDataCol) {
        this.restfulService = restfulService;
        this.sessionService = sessionService;
        this.serverHost = serverHost;
        this.loadDataUri = loadDataUri;
        this.loadDataCol = loadDataCol;
        this.pageInfoChange = new Subject();
        this.variablesChange = new Subject();
        this.inSuiteDropDownInfoChange = new Subject();
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    exportData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        /** @type {?} */
        const fileName = params.excelExportName + '.xlsx';
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            const byteString = atob(data);
            // base64 解码
            /** @type {?} */
            const arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            const intArray = new Uint8Array(arrayBuffer);
            for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            const blob = new Blob([intArray], { type: 'application/vnd.ms-excel' });
            if ('download' in document.createElement('a')) { // 非IE下载
                // 非IE下载
                /** @type {?} */
                const elink = document.createElement('a');
                elink.download = fileName;
                elink.style.display = 'none';
                elink.href = URL.createObjectURL(blob);
                document.body.appendChild(elink);
                elink.click();
                URL.revokeObjectURL(elink.href); // 释放URL 对象
                document.body.removeChild(elink);
            }
            else { // IE10+下载
                navigator.msSaveBlob(blob, fileName);
            }
            self.loading.close();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    aysnExportData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params.async = 1;
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            if (data) {
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    pdfExportEvent(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            const byteString = atob(data);
            // base64 解码
            /** @type {?} */
            const arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            const intArray = new Uint8Array(arrayBuffer);
            for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            const blob = new Blob([intArray], { type: 'application/pdf' });
            if ('download' in document.createElement('a')) { // 非IE下载
                // 非IE下载
                /** @type {?} */
                const elink = document.createElement('a');
                elink.download = fileName;
                elink.style.display = 'none';
                elink.href = URL.createObjectURL(blob);
                document.body.appendChild(elink);
                elink.click();
                URL.revokeObjectURL(elink.href); // 释放URL 对象
                document.body.removeChild(elink);
            }
            else { // IE10+下载
                navigator.msSaveBlob(blob, fileName);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    printPreView(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            const options = {
                OutputType: OutputType.PRINT,
                FileType: FileType.Pdf,
                Path: '',
                DeviceId: '',
                printType: PrintType.Query,
                printJob: false,
                printerName: '',
                printSetting: null
            };
            /** @type {?} */
            const byteString = atob(data);
            // base64 解码
            /** @type {?} */
            const arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            const intArray = new Uint8Array(arrayBuffer);
            for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            const blob = new Blob([intArray]);
            self.cloudprintService.openRendedViewer('tab', blob, options);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
                if (data && data.pageInfo) {
                    self.pageInfoChange.next(data.pageInfo);
                }
                if (data && data.variables) {
                    self.variablesChange.next(data.variables);
                }
                if (data && data.dropDownOption) {
                    self.inSuiteDropDownInfo = data.dropDownOption;
                    self.inSuiteDropDownInfoChange.next(data.dropDownOption);
                }
            }
            return data;
        })));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCol(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataCol) {
            uri += this.loadDataCol;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
            }
            return data;
        })));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCrosstabTemplate(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/getcrosstabtemplate' : (queryRelativeUrl + 'getcrosstabtemplate');
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                result = !queryRelativeUrl ? result : (result && result.returnValue) ? JSON.parse(result.returnValue) : undefined;
            }
            return result;
        })));
    }
    /**
     * @return {?}
     */
    getSpreadLicense() {
        /** @type {?} */
        const uri = '/api/runtime/bcc/v1.0/qdpschemamanager/getSpreadLicense';
        /** @type {?} */
        const result$ = this.restfulService.get(uri, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data.spreadjs;
        })));
    }
    /**
     * @param {?} params
     * @return {?}
     */
    clearCache(params) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const uri = this.serverHost + '/api/runtime/bcc/v1.0/qdpsearch/clearcache';
        /** @type {?} */
        const result$ = this.restfulService.post(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return result;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
LcpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LcpService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [Load_Data_Uri,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [Load_Data_Col,] }, { type: Optional }] }
];
if (false) {
    /** @type {?} */
    LcpService.prototype.pageInfoChange;
    /** @type {?} */
    LcpService.prototype.variablesChange;
    /** @type {?} */
    LcpService.prototype.inSuiteDropDownInfoChange;
    /** @type {?} */
    LcpService.prototype.inSuiteDropDownInfo;
    /** @type {?} */
    LcpService.prototype.cloudprintService;
    /** @type {?} */
    LcpService.prototype.formErrorService;
    /** @type {?} */
    LcpService.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.restfulService;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.serverHost;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.loadDataUri;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.loadDataCol;
}
//# sourceMappingURL=data:application/json;base64,