/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { RtfServices } from '../rtfservices/rtfservices';
export class JointSearchManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/joinsearch/';
        this.localUri = '/api/runtime/sys/v1.0/loginInfo';
        this.lcpUri = '/api/runtime/bcc/v1.0/qdpsearch/';
        this.jointsearchInfoChange = new Subject();
        this.jointsearchInfoList = {};
        // this.uri = this.host + this.uri;
    }
    /**
     * 获取查询参数映射信息
     * @param {?} formId
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getjointsearch(formId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const result$ = this.getjointsearchList(formId, queryId, '', '', queryRelativeUrl);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[formId + queryId]) {
                return value[formId + queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * @param {?} visibleJointParam
     * @param {?} queryRelativeUrl
     * @param {?} searchList
     * @return {?}
     */
    getVisibleJoint(visibleJointParam, queryRelativeUrl, searchList) {
        /** @type {?} */
        const jointUri = this.host + (!queryRelativeUrl ? this.lcpUri : queryRelativeUrl) + 'visiblejoint';
        /** @type {?} */
        const result$ = this.restService.put(jointUri, { 'Param': visibleJointParam }, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const jointSearchList = [];
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
                if (!queryRelativeUrl) {
                    for (const search of searchList) {
                        if (data[search.id] !== null && data[search.id] === true) {
                            jointSearchList.push(search);
                        }
                    }
                }
                else {
                    for (const search of searchList) {
                        /** @type {?} */
                        const item = data.find((/**
                         * @param {?} d
                         * @return {?}
                         */
                        d => d.id === search.id));
                        if (item && item.visible === true) {
                            jointSearchList.push(search);
                        }
                    }
                }
            }
            return jointSearchList;
        })));
    }
    /**
     * 获取参数映射列表
     * @param {?} formId
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getjointsearchList(formId, queryId, userId, languageType, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getjoinsearch';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { formId, queryId, userId, languageType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            // this.jointsearchInfoList = {};
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    this.jointsearchInfoList[element.formId + element.queryId] = element;
                }));
                this.jointsearchInfoChange.next({ jointsearchInfoList: this.jointsearchInfoList });
                return this.jointsearchInfoList;
            }
            else {
                this.jointsearchInfoChange.next({ jointsearchInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存参数映射
     * @param {?} jointsearch 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    savejointsearch(jointsearch, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'addjointsearch';
        /** @type {?} */
        const result$ = this.restService.post(restUri, jointsearch, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.jointsearchInfoList[jointsearch.FormId + jointsearch.queryId] = jointsearch;
                return true;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * 删除联查
     * @param {?} formId
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deletejointsearch(formId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deletejointsearch';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { formId, queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.jointsearchInfoList[formId + queryId] = null;
                return true;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * @return {?}
     */
    getLanguageList() {
        /** @type {?} */
        const result$ = this.restService.get(this.localUri, { infoType: 'supportedLanguage' });
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
JointSearchManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
JointSearchManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    JointSearchManagerService.prototype.uri;
    /**
     * @type {?}
     * @private
     */
    JointSearchManagerService.prototype.localUri;
    /**
     * @type {?}
     * @private
     */
    JointSearchManagerService.prototype.lcpUri;
    /** @type {?} */
    JointSearchManagerService.prototype.jointsearchInfoChange;
    /** @type {?} */
    JointSearchManagerService.prototype.jointsearchInfoList;
    /**
     * @type {?}
     * @private
     */
    JointSearchManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    JointSearchManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    JointSearchManagerService.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,