/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { RtfServices } from '../rtfservices/rtfservices';
export class ParasMappingManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/qdpparasmapping/';
        this.parasmappingInfoChange = new Subject();
        this.parasmappingInfoList = {};
    }
    /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} type
     * @return {?}
     */
    getParasMapping(id, queryId, queryRelativeUrl, type = 0) {
        /** @type {?} */
        const result$ = this.getParasMappingList(queryId, id, '', '', queryRelativeUrl, type);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[id]) {
                return value[id];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    getParasMappingList(queryId, datasourceId, userId, languageType, queryRelativeUrl, queryType = 0) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getparasmappinglist';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { queryId, datasourceId, userId, languageType, queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.parasmapping = JSON.parse(element.parasmapping);
                    this.parasmappingInfoList[element.datasourceid] = element;
                }));
                this.parasmappingInfoChange.next({ parasInfoList: this.parasmappingInfoList });
                return this.parasmappingInfoList;
            }
            else {
                this.parasmappingInfoChange.next({ parasInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存参数映射
     * @param {?} parasmapping 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveParasMapping(parasmapping, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'saveparasmapping';
        /** @type {?} */
        const result$ = this.restService.post(restUri, parasmapping, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            parasmapping.parasmapping = JSON.parse(parasmapping.parasmapping);
            if (Object.keys(this.parasmappingInfoList).indexOf(parasmapping.datasourceid)) {
                this.parasmappingInfoList[parasmapping.datasourceid] = parasmapping;
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deleteParasMapping(datasourceid, queryId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deleteparasmapping';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.parasmappingInfoList[datasourceid] = null;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * 获取元数据信息
     * @param {?} Id metadataid
     * @return {?}
     */
    getMetaDataInfoById(Id) {
        /** @type {?} */
        const restUri = this.host + '/api/runtime/lcm/v1.0/rt-metadatas/' + Id;
        /** @type {?} */
        const result$ = this.restService.get(restUri, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                return data;
            }
            else {
                return null;
            }
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
ParasMappingManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParasMappingManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.uri;
    /** @type {?} */
    ParasMappingManagerService.prototype.parasmappingInfoChange;
    /** @type {?} */
    ParasMappingManagerService.prototype.parasmappingInfoList;
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,