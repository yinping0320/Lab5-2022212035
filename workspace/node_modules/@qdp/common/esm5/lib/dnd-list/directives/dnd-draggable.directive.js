/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input, HostListener, ElementRef, Renderer2, Output, EventEmitter } from '@angular/core';
import { DndDraggableService } from '../services/dnd-draggable.service';
import { MIME_TYPE, EDGE_MIME_TYPE, MSIE_MIME_TYPE, ALL_EFFECTS } from '../dnd-constants';
var DndDraggableDirective = /** @class */ (function () {
    function DndDraggableDirective(_dndService, _renderer, _hostElement) {
        this._dndService = _dndService;
        this._renderer = _renderer;
        this.dndType = '';
        this.dndDragstart = new EventEmitter();
        this.dndDragend = new EventEmitter();
        this.dndSelected = new EventEmitter();
        this.dndMoved = new EventEmitter();
        this.dndCopied = new EventEmitter();
        this.dndLinked = new EventEmitter();
        this.dndCanceled = new EventEmitter();
        if (_hostElement) {
            this._nativeElement = _hostElement.nativeElement;
        }
    }
    Object.defineProperty(DndDraggableDirective.prototype, "draggable", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.dndDisable;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DndDraggableDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDraggableDirective.prototype.onDragStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event = event.originalEvent || event;
        if (!this.draggable) {
            return true;
        }
        this._dndService.setDraggingState(true);
        this._dndService.setItemType(this.dndType);
        /** @type {?} */
        var mimeType = MIME_TYPE + (this._dndService.getItemType() ? ('-' + this._dndService.getItemType()) : '');
        // Set the allowed drop effects. See below for special IE handling.
        this._dndService.setDropEffect('none');
        this._dndService.setEffectAllowed(this.dndEffectAllowed || ALL_EFFECTS[0]);
        event.dataTransfer.effectAllowed = this._dndService.getEffectAllowed(); // TODO: set allowed effects
        try {
            event.dataTransfer.setData(mimeType, JSON.stringify(this.dndDraggable));
        }
        catch (e) {
            /** @type {?} */
            var data = {
                item: this.dndDraggable,
                type: this._dndService.getItemType()
            };
            try {
                // Setting a custom MIME type did not work, we are probably in IE or Edge.
                event.dataTransfer.setData(EDGE_MIME_TYPE, JSON.stringify(data));
            }
            catch (e) {
                // We are in Internet Explorer and can only use the Text MIME type. Also note that IE
                // does not allow changing the cursor in the dragover event, therefore we have to choose
                // the one we want to display now by setting effectAllowed.
                event.dataTransfer.effectAllowed = 'move';
                event.dataTransfer.setData(MSIE_MIME_TYPE, JSON.stringify(data));
            }
        }
        this._renderer.addClass(this._nativeElement, 'dndDragging');
        setTimeout((/**
         * @return {?}
         */
        function () { return _this._renderer.addClass(_this._nativeElement, 'dndDraggingSource'); }), 0);
        // Try setting a proper drag image if triggered on a dnd-handle (won't work in IE).
        if (event._dndHandle && event.dataTransfer.setDragImage) {
            event.dataTransfer.setDragImage(this._nativeElement, 0, 0);
        }
        // Emit dragstart event and prepare extra callback for dropzone.
        this.dndDragstart.emit(event);
        if (this.dndCallback) {
            /** @type {?} */
            var callback_1 = this.dndCallback;
            this._dndService.setDropCallback((/**
             * @param {?} params
             * @return {?}
             */
            function (params) {
                return callback_1(params);
            }));
        }
        event.stopPropagation();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDraggableDirective.prototype.onDragEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var dropEffect = this._dndService.getDropEffect();
        /** @type {?} */
        var cb = { copy: 'dndCopied', link: 'dndLinked', move: 'dndMoved', none: 'dndCanceled' };
        this[cb[dropEffect]].emit(event);
        this.dndDragend.emit({
            event: event,
            dropEffect: dropEffect
        });
        // Clean up
        this._dndService.setDraggingState(false);
        this._dndService.setDropCallback(undefined);
        this._dndService.setRemoveOnDrop(false);
        this._renderer.removeClass(this._nativeElement, 'dndDragging');
        this._renderer.removeClass(this._nativeElement, 'dndDraggingSource');
        event.stopPropagation();
        // In IE9 it is possible that the timeout from dragstart triggers after the dragend handler.
        setTimeout((/**
         * @return {?}
         */
        function () { return _this._renderer.removeClass(_this._nativeElement, 'dndDraggingSource'); }), 0);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDraggableDirective.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dndSelected.emit(event);
        // Prevent triggering dndSelected in parent elements.
        event.stopPropagation();
    };
    DndDraggableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dndDraggable]',
                },] }
    ];
    /** @nocollapse */
    DndDraggableDirective.ctorParameters = function () { return [
        { type: DndDraggableService },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    DndDraggableDirective.propDecorators = {
        dndDraggable: [{ type: Input }],
        dndDisable: [{ type: Input }],
        dndType: [{ type: Input }],
        dndCallback: [{ type: Input }],
        dndEffectAllowed: [{ type: Input }],
        dndDragstart: [{ type: Output }],
        dndDragend: [{ type: Output }],
        dndSelected: [{ type: Output }],
        dndMoved: [{ type: Output }],
        dndCopied: [{ type: Output }],
        dndLinked: [{ type: Output }],
        dndCanceled: [{ type: Output }],
        draggable: [{ type: HostBinding, args: ['draggable',] }],
        onDragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],
        onDragEnd: [{ type: HostListener, args: ['dragend', ['$event'],] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return DndDraggableDirective;
}());
export { DndDraggableDirective };
if (false) {
    /** @type {?} */
    DndDraggableDirective.prototype.dndDraggable;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDisable;
    /** @type {?} */
    DndDraggableDirective.prototype.dndType;
    /** @type {?} */
    DndDraggableDirective.prototype.dndCallback;
    /** @type {?} */
    DndDraggableDirective.prototype.dndEffectAllowed;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDragstart;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDragend;
    /** @type {?} */
    DndDraggableDirective.prototype.dndSelected;
    /** @type {?} */
    DndDraggableDirective.prototype.dndMoved;
    /** @type {?} */
    DndDraggableDirective.prototype.dndCopied;
    /** @type {?} */
    DndDraggableDirective.prototype.dndLinked;
    /** @type {?} */
    DndDraggableDirective.prototype.dndCanceled;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype._nativeElement;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype._dndService;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,