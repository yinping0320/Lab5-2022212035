/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, HostListener, ElementRef, Renderer2, Output, EventEmitter } from '@angular/core';
import { DndDraggableService } from '../services/dnd-draggable.service';
import { MSIE_MIME_TYPE, EDGE_MIME_TYPE, MIME_TYPE, ALL_EFFECTS } from '../dnd-constants';
var DndListDirective = /** @class */ (function () {
    function DndListDirective(_el, _renderer, _dndService) {
        this._el = _el;
        this._renderer = _renderer;
        this._dndService = _dndService;
        this.dndDisable = false;
        this.dndListChange = new EventEmitter();
        this.dndDragover = new EventEmitter();
        this.dndDrop = new EventEmitter();
        this.dndInserted = new EventEmitter();
        this._listSettings = {};
        this._dragOverStopped = false;
        this._counter = 0;
        this._nativeElement = this._el.nativeElement;
    }
    /**
     * @return {?}
     */
    DndListDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var placeholder = this._getPlaceholderElement();
        placeholder.remove();
        this._placeholderNode = placeholder;
        this._listNode = this._nativeElement;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndListDirective.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._counter++;
        this._dragOverStopped = false;
        event = event.originalEvent || event;
        this._listSettings = {
            allowedTypes: Array.isArray(this.dndAllowedTypes) && this.dndAllowedTypes.join('|').toLowerCase().split('|'),
            disabled: this.dndDisable,
            externalSources: this.dndExternalSources,
            horizontal: this.dndHorizontalList
        };
        /** @type {?} */
        var mimeType = this._getMimeType(event.dataTransfer.types);
        if (!mimeType || !this._isDropAllowed(this._getItemType(mimeType))) {
            return true;
        }
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndListDirective.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event = event.originalEvent || event;
        // Check whether the drop is allowed and determine mime type.
        /** @type {?} */
        var mimeType = this._getMimeType(event.dataTransfer.types);
        /** @type {?} */
        var itemType = this._getItemType(mimeType);
        if (!mimeType || !this._isDropAllowed(itemType)) {
            return true;
        }
        // Make sure the placeholder is shown, which is especially important if the list is empty.
        if (this._placeholderNode.parentNode !== this._listNode) {
            this._renderer.appendChild(this._nativeElement, this._placeholderNode);
        }
        if (event.target !== this._listNode) {
            // Try to find the node direct directly below the list node.
            /** @type {?} */
            var listItemNode = event.target;
            while (listItemNode.parentNode !== this._listNode && listItemNode.parentNode) {
                listItemNode = listItemNode.parentNode;
            }
            if (listItemNode.parentNode === this._listNode && listItemNode !== this._placeholderNode) {
                // If the mouse pointer is in the upper half of the list item element,
                // we position the placeholder before the list item, otherwise after it.
                /** @type {?} */
                var rect = listItemNode.getBoundingClientRect();
                /** @type {?} */
                var isFirstHalf = void 0;
                if (this._listSettings.horizontal) {
                    isFirstHalf = event.clientX < rect.left + rect.width / 2;
                }
                else {
                    isFirstHalf = event.clientY < rect.top + rect.height / 2;
                }
                this._listNode.insertBefore(this._placeholderNode, isFirstHalf ? listItemNode : listItemNode.nextSibling);
            }
        }
        // In IE we set a fake effectAllowed in dragstart to get the correct cursor, we therefore
        // ignore the effectAllowed passed in dataTransfer. We must also not access dataTransfer for
        // drops from external sources, as that throws an exception.
        /** @type {?} */
        var ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;
        /** @type {?} */
        var dropEffect = this._getDropEffect(event, ignoreDataTransfer);
        if (dropEffect === 'none') {
            return this._stopDragover();
        }
        // At this point we invoke the callback, which still can disallow the drop.
        // We can't do this earlier because we want to pass the index of the placeholder.
        this.dndDragover.emit(this._getEventResponse(event, dropEffect, itemType));
        if (this._dragOverStopped) {
            return this._stopDragover();
        }
        // Set dropEffect to modify the cursor shown by the browser, unless we're in IE, where this
        // is not supported. This must be done after preventDefault in Firefox.
        event.preventDefault();
        if (!ignoreDataTransfer) {
            event.dataTransfer.dropEffect = dropEffect;
        }
        this._renderer.addClass(this._nativeElement, 'dndDragover');
        event.stopPropagation();
        return false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndListDirective.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._counter = 0;
        event = event.originalEvent || event;
        // Check whether the drop is allowed and determine mime type.
        /** @type {?} */
        var mimeType = this._getMimeType(event.dataTransfer.types);
        /** @type {?} */
        var itemType = this._getItemType(mimeType);
        if (!mimeType || !this._isDropAllowed(itemType)) {
            return true;
        }
        // The default behavior in Firefox is to interpret the dropped element as URL and
        // forward to it. We want to prevent that even if our drop is aborted.
        event.preventDefault();
        // Unserialize the data that was serialized in dragstart.
        /** @type {?} */
        var data;
        try {
            data = JSON.parse(event.dataTransfer.getData(mimeType));
        }
        catch (e) {
            return this._stopDragover();
        }
        // Drops with invalid types from external sources might not have been filtered out yet.
        if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {
            itemType = data.type || undefined;
            data = data.item;
            if (!this._isDropAllowed(itemType)) {
                return this._stopDragover();
            }
        }
        // Special handling for internal IE drops, see dragover handler.
        /** @type {?} */
        var ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;
        /** @type {?} */
        var dropEffect = this._getDropEffect(event, ignoreDataTransfer);
        if (dropEffect === 'none') {
            return this._stopDragover();
        }
        // Invoke the callback, which can transform the transferredObject and even abort the drop.
        /** @type {?} */
        var index = this._getPlaceholderIndex();
        this.dndDrop.emit(this._getEventResponse(event, dropEffect, itemType, index, data));
        if (this._dragOverStopped) {
            return this._stopDragover();
        }
        // The drop is definitely going to happen now, store the dropEffect.
        this._dndService.setDropEffect(dropEffect);
        if (!ignoreDataTransfer) {
            event.dataTransfer.dropEffect = dropEffect;
        }
        if (this.dndList) {
            // Creates a new array adding the object into the array position without mutate the original.
            /** @type {?} */
            var newList = tslib_1.__spread(this.dndList.slice(0, index), [data], this.dndList.slice(index));
            this.dndListChange.emit(newList);
        }
        this._dndService.setRemoveOnDrop(true);
        // this._dndService.dropEndSource()
        this.dndInserted.emit(this._getEventResponse(event, dropEffect, itemType, index, data));
        // Clean up
        this._stopDragover();
        event.stopPropagation();
        return false;
    };
    /**
   * We have to remove the placeholder when the element is no longer dragged over our list. The
   * problem is that the dragleave event is not only fired when the element leaves our list,
   * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
   * is still pointing to an element inside the list or not.
   */
    /**
     * We have to remove the placeholder when the element is no longer dragged over our list. The
     * problem is that the dragleave event is not only fired when the element leaves our list,
     * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
     * is still pointing to an element inside the list or not.
     * @param {?} event
     * @return {?}
     */
    DndListDirective.prototype.onDragLeave = /**
     * We have to remove the placeholder when the element is no longer dragged over our list. The
     * problem is that the dragleave event is not only fired when the element leaves our list,
     * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
     * is still pointing to an element inside the list or not.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._counter--;
        event = event.originalEvent || event;
        if (this._counter !== 0) {
            // Signalize to potential parent lists that a placeholder is already shown.
            event._dndPhShown = true;
        }
        else {
            this._stopDragover();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndListDirective.prototype.onmouseout = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._dndService.getDraggingState()) {
            this._stopDragover();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DndListDirective.prototype._stopDrag = /**
     * @private
     * @return {?}
     */
    function () {
        this._dragOverStopped = true;
    };
    /**
     * @private
     * @return {?}
     */
    DndListDirective.prototype._stopDragover = /**
     * @private
     * @return {?}
     */
    function () {
        this._placeholderNode.remove();
        this._renderer.removeClass(this._nativeElement, 'dndDragover');
        return true;
    };
    /**
   * Create a DndListEvent instance for events response.
   */
    /**
     * Create a DndListEvent instance for events response.
     * @private
     * @param {?} event
     * @param {?} dropEffect
     * @param {?} itemType
     * @param {?=} index
     * @param {?=} item
     * @return {?}
     */
    DndListDirective.prototype._getEventResponse = /**
     * Create a DndListEvent instance for events response.
     * @private
     * @param {?} event
     * @param {?} dropEffect
     * @param {?} itemType
     * @param {?=} index
     * @param {?=} item
     * @return {?}
     */
    function (event, dropEffect, itemType, index, item) {
        return {
            callback: this._dndService.getDropCallback(),
            dropEffect: dropEffect,
            event: event,
            external: !this._dndService.getDraggingState(),
            index: index !== undefined ? index : this._getPlaceholderIndex(),
            item: item || undefined,
            stopDragover: this._stopDrag.bind(this),
            type: itemType
        };
    };
    /**
     * @private
     * @return {?}
     */
    DndListDirective.prototype._getPlaceholderIndex = /**
     * @private
     * @return {?}
     */
    function () {
        return Array.prototype.indexOf.call(this._nativeElement.children, this._placeholderNode);
    };
    /**
     * @private
     * @return {?}
     */
    DndListDirective.prototype._getPlaceholderElement = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var placeholder = [].slice.call(this._nativeElement.children).filter((/**
         * @param {?} childNode
         * @return {?}
         */
        function (childNode) {
            return childNode.className.indexOf('dndPlaceholder') > -1;
        }));
        if (placeholder.length) {
            return placeholder;
        }
        placeholder = this._renderer.createElement('li');
        this._renderer.addClass(placeholder, 'dndPlaceholder');
        return placeholder;
    };
    /**
     * @private
     * @param {?} types
     * @return {?}
     */
    DndListDirective.prototype._getMimeType = /**
     * @private
     * @param {?} types
     * @return {?}
     */
    function (types) {
        if (!types) {
            return MSIE_MIME_TYPE; // IE 9 workaround.
        }
        for (var i = 0; i < types.length; i++) {
            if (types[i] === MSIE_MIME_TYPE || types[i] === EDGE_MIME_TYPE ||
                types[i].substr(0, MIME_TYPE.length) === MIME_TYPE) {
                return types[i];
            }
        }
        return null;
    };
    /**
   * Determines the type of the item from the dndService, or from the mime type for items from
   * external sources. Returns undefined if no item type was set and null if the item type could
   * not be determined.
   */
    /**
     * Determines the type of the item from the dndService, or from the mime type for items from
     * external sources. Returns undefined if no item type was set and null if the item type could
     * not be determined.
     * @private
     * @param {?} mimeType
     * @return {?}
     */
    DndListDirective.prototype._getItemType = /**
     * Determines the type of the item from the dndService, or from the mime type for items from
     * external sources. Returns undefined if no item type was set and null if the item type could
     * not be determined.
     * @private
     * @param {?} mimeType
     * @return {?}
     */
    function (mimeType) {
        if (this._dndService.getDraggingState()) {
            return this._dndService.getItemType() || undefined;
        }
        if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {
            return null;
        }
        return (mimeType && mimeType.substr(MIME_TYPE.length + 1)) || undefined;
    };
    /**
     * @private
     * @param {?} itemType
     * @return {?}
     */
    DndListDirective.prototype._isDropAllowed = /**
     * @private
     * @param {?} itemType
     * @return {?}
     */
    function (itemType) {
        if (this._listSettings.disabled) {
            return false;
        }
        if (!this._listSettings.externalSources && !this._dndService.getDraggingState()) {
            return false;
        }
        if (!this._listSettings.allowedTypes || itemType === null) {
            return true;
        }
        return itemType && this._listSettings.allowedTypes.indexOf(itemType) !== -1;
    };
    /**
   * Determines which drop effect to use for the given event. In Internet Explorer we have to
   * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
   * In those cases we rely on dndState to filter effects. Read the design doc for more details:
   * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
   */
    /**
     * Determines which drop effect to use for the given event. In Internet Explorer we have to
     * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
     * In those cases we rely on dndState to filter effects. Read the design doc for more details:
     * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
     * @private
     * @param {?} event
     * @param {?} ignoreDataTransfer
     * @return {?}
     */
    DndListDirective.prototype._getDropEffect = /**
     * Determines which drop effect to use for the given event. In Internet Explorer we have to
     * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
     * In those cases we rely on dndState to filter effects. Read the design doc for more details:
     * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
     * @private
     * @param {?} event
     * @param {?} ignoreDataTransfer
     * @return {?}
     */
    function (event, ignoreDataTransfer) {
        /** @type {?} */
        var effects = ALL_EFFECTS;
        if (!ignoreDataTransfer) {
            effects = this._filterEffects(effects, event.dataTransfer.effectAllowed);
        }
        if (this._dndService.getDraggingState()) {
            effects = this._filterEffects(effects, this._dndService.getEffectAllowed());
        }
        if (this.dndEffectAllowed) {
            effects = this._filterEffects(effects, this.dndEffectAllowed);
        }
        // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
        // therefore the following modifier keys will only affect other operating systems.
        if (!effects.length) {
            return 'none';
        }
        else if (event.ctrlKey && effects.indexOf('copy') !== -1) {
            return 'copy';
        }
        else if (event.altKey && effects.indexOf('link') !== -1) {
            return 'link';
        }
        else {
            return effects[0];
        }
    };
    /**
   * Filters an array of drop effects using a HTML5 effectAllowed string.
   */
    /**
     * Filters an array of drop effects using a HTML5 effectAllowed string.
     * @private
     * @param {?} effects
     * @param {?} effectAllowed
     * @return {?}
     */
    DndListDirective.prototype._filterEffects = /**
     * Filters an array of drop effects using a HTML5 effectAllowed string.
     * @private
     * @param {?} effects
     * @param {?} effectAllowed
     * @return {?}
     */
    function (effects, effectAllowed) {
        if (effectAllowed === 'all') {
            return effects;
        }
        return effects.filter((/**
         * @param {?} effect
         * @return {?}
         */
        function (effect) {
            return effectAllowed.toLowerCase().indexOf(effect) !== -1;
        }));
    };
    DndListDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dndList]',
                },] }
    ];
    /** @nocollapse */
    DndListDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: DndDraggableService }
    ]; };
    DndListDirective.propDecorators = {
        dndDisable: [{ type: Input }],
        dndAllowedTypes: [{ type: Input }],
        dndExternalSources: [{ type: Input }],
        dndHorizontalList: [{ type: Input }],
        dndEffectAllowed: [{ type: Input }],
        pureComponent: [{ type: Input }],
        dndList: [{ type: Input }],
        dndListChange: [{ type: Output }],
        dndDragover: [{ type: Output }],
        dndDrop: [{ type: Output }],
        dndInserted: [{ type: Output }],
        onDragEnter: [{ type: HostListener, args: ['dragenter', ['$event'],] }],
        onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],
        onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
        onmouseout: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return DndListDirective;
}());
export { DndListDirective };
if (false) {
    /** @type {?} */
    DndListDirective.prototype.dndDisable;
    /** @type {?} */
    DndListDirective.prototype.dndAllowedTypes;
    /** @type {?} */
    DndListDirective.prototype.dndExternalSources;
    /** @type {?} */
    DndListDirective.prototype.dndHorizontalList;
    /** @type {?} */
    DndListDirective.prototype.dndEffectAllowed;
    /** @type {?} */
    DndListDirective.prototype.pureComponent;
    /** @type {?} */
    DndListDirective.prototype.dndList;
    /** @type {?} */
    DndListDirective.prototype.dndListChange;
    /** @type {?} */
    DndListDirective.prototype.dndDragover;
    /** @type {?} */
    DndListDirective.prototype.dndDrop;
    /** @type {?} */
    DndListDirective.prototype.dndInserted;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._nativeElement;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._placeholderNode;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._listSettings;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._listNode;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._dragOverStopped;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._counter;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._el;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    DndListDirective.prototype._dndService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLWxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9jb21tb24vIiwic291cmNlcyI6WyJsaWIvZG5kLWxpc3QvZGlyZWN0aXZlcy9kbmQtbGlzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0osU0FBUyxFQUdULEtBQUssRUFDTCxZQUFZLEVBQ1osVUFBVSxFQUNWLFNBQVMsRUFFVCxNQUFNLEVBQ04sWUFBWSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcxRjtJQTJCRywwQkFBb0IsR0FBZSxFQUFVLFNBQW9CLEVBQVUsV0FBZ0M7UUFBdkYsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBcUI7UUF2QmxHLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFRbEIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXhDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFDL0MsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO1FBQzNDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFLakQsa0JBQWEsR0FBUSxFQUFFLENBQUM7UUFFeEIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBRXpCLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFHbEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsbUNBQVE7OztJQUFSOztZQUNTLFdBQVcsR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7UUFDakQsV0FB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QWtDOzs7OztJQUVsQyx5Q0FBZ0M7Ozs7O0lBQ2hDLHFDQUF1Qjs7Ozs7SUFDdkIsNENBQWlDOzs7OztJQUVqQyxvQ0FBcUI7Ozs7O0lBRVQsK0JBQXVCOzs7OztJQUFFLHFDQUE0Qjs7Ozs7SUFBRSx1Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICBEaXJlY3RpdmUsXHJcbiAgIEhvc3RCaW5kaW5nLFxyXG4gICBPbkNoYW5nZXMsXHJcbiAgIElucHV0LFxyXG4gICBIb3N0TGlzdGVuZXIsXHJcbiAgIEVsZW1lbnRSZWYsXHJcbiAgIFJlbmRlcmVyMixcclxuICAgT25Jbml0LFxyXG4gICBPdXRwdXQsXHJcbiAgIEV2ZW50RW1pdHRlclxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEbmREcmFnZ2FibGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZG5kLWRyYWdnYWJsZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTVNJRV9NSU1FX1RZUEUsIEVER0VfTUlNRV9UWVBFLCBNSU1FX1RZUEUsIEFMTF9FRkZFQ1RTIH0gZnJvbSAnLi4vZG5kLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IERuZExpc3RFdmVudCB9IGZyb20gJy4uL21vZGVscy9ldmVudHMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgIHNlbGVjdG9yOiAnW2RuZExpc3RdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIERuZExpc3REaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICBASW5wdXQoKSBkbmREaXNhYmxlID0gZmFsc2U7XHJcbiAgIEBJbnB1dCgpIGRuZEFsbG93ZWRUeXBlczogU3RyaW5nW107XHJcbiAgIEBJbnB1dCgpIGRuZEV4dGVybmFsU291cmNlczogYW55O1xyXG4gICBASW5wdXQoKSBkbmRIb3Jpem9udGFsTGlzdDogYW55O1xyXG4gICBASW5wdXQoKSBkbmRFZmZlY3RBbGxvd2VkOiBzdHJpbmc7XHJcbiAgIEBJbnB1dCgpIHB1cmVDb21wb25lbnQ6IGJvb2xlYW47XHJcbiAgIEBJbnB1dCgpIGRuZExpc3Q6IGFueTtcclxuXHJcbiAgIEBPdXRwdXQoKSBkbmRMaXN0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gICBAT3V0cHV0KCkgZG5kRHJhZ292ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPERuZExpc3RFdmVudD4oKTtcclxuICAgQE91dHB1dCgpIGRuZERyb3AgPSBuZXcgRXZlbnRFbWl0dGVyPERuZExpc3RFdmVudD4oKTtcclxuICAgQE91dHB1dCgpIGRuZEluc2VydGVkID0gbmV3IEV2ZW50RW1pdHRlcjxEbmRMaXN0RXZlbnQ+KCk7XHJcblxyXG4gICBwcml2YXRlIF9uYXRpdmVFbGVtZW50OiBFbGVtZW50O1xyXG4gICBwcml2YXRlIF9wbGFjZWhvbGRlck5vZGU6IEVsZW1lbnQ7XHJcblxyXG4gICBwcml2YXRlIF9saXN0U2V0dGluZ3M6IGFueSA9IHt9O1xyXG4gICBwcml2YXRlIF9saXN0Tm9kZTogYW55O1xyXG4gICBwcml2YXRlIF9kcmFnT3ZlclN0b3BwZWQgPSBmYWxzZTtcclxuXHJcbiAgIHByaXZhdGUgX2NvdW50ZXIgPSAwO1xyXG5cclxuICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2RuZFNlcnZpY2U6IERuZERyYWdnYWJsZVNlcnZpY2UpIHtcclxuICAgICAgdGhpcy5fbmF0aXZlRWxlbWVudCA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgIH1cclxuXHJcbiAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMuX2dldFBsYWNlaG9sZGVyRWxlbWVudCgpO1xyXG4gICAgICBwbGFjZWhvbGRlci5yZW1vdmUoKTtcclxuICAgICAgdGhpcy5fcGxhY2Vob2xkZXJOb2RlID0gcGxhY2Vob2xkZXI7XHJcbiAgICAgIHRoaXMuX2xpc3ROb2RlID0gdGhpcy5fbmF0aXZlRWxlbWVudDtcclxuICAgfVxyXG5cclxuICAgQEhvc3RMaXN0ZW5lcignZHJhZ2VudGVyJywgWyckZXZlbnQnXSlcclxuICAgb25EcmFnRW50ZXIoZXZlbnQpIHtcclxuICAgICAgdGhpcy5fY291bnRlcisrO1xyXG4gICAgICB0aGlzLl9kcmFnT3ZlclN0b3BwZWQgPSBmYWxzZTtcclxuICAgICAgZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xyXG4gICAgICB0aGlzLl9saXN0U2V0dGluZ3MgPSB7XHJcbiAgICAgICAgIGFsbG93ZWRUeXBlczogQXJyYXkuaXNBcnJheSh0aGlzLmRuZEFsbG93ZWRUeXBlcykgJiYgdGhpcy5kbmRBbGxvd2VkVHlwZXMuam9pbignfCcpLnRvTG93ZXJDYXNlKCkuc3BsaXQoJ3wnKSxcclxuICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuZG5kRGlzYWJsZSxcclxuICAgICAgICAgZXh0ZXJuYWxTb3VyY2VzOiB0aGlzLmRuZEV4dGVybmFsU291cmNlcyxcclxuICAgICAgICAgaG9yaXpvbnRhbDogdGhpcy5kbmRIb3Jpem9udGFsTGlzdFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBtaW1lVHlwZSA9IHRoaXMuX2dldE1pbWVUeXBlKGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlcyk7XHJcbiAgICAgIGlmICghbWltZVR5cGUgfHwgIXRoaXMuX2lzRHJvcEFsbG93ZWQodGhpcy5fZ2V0SXRlbVR5cGUobWltZVR5cGUpKSkge1xyXG4gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICB9XHJcblxyXG4gICBASG9zdExpc3RlbmVyKCdkcmFnb3ZlcicsIFsnJGV2ZW50J10pXHJcbiAgIG9uRHJhZ092ZXIoZXZlbnQpIHtcclxuICAgICAgZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xyXG4gICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBkcm9wIGlzIGFsbG93ZWQgYW5kIGRldGVybWluZSBtaW1lIHR5cGUuXHJcbiAgICAgIGNvbnN0IG1pbWVUeXBlID0gdGhpcy5fZ2V0TWltZVR5cGUoZXZlbnQuZGF0YVRyYW5zZmVyLnR5cGVzKTtcclxuICAgICAgY29uc3QgaXRlbVR5cGUgPSB0aGlzLl9nZXRJdGVtVHlwZShtaW1lVHlwZSk7XHJcbiAgICAgIGlmICghbWltZVR5cGUgfHwgIXRoaXMuX2lzRHJvcEFsbG93ZWQoaXRlbVR5cGUpKSB7XHJcbiAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcGxhY2Vob2xkZXIgaXMgc2hvd24sIHdoaWNoIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGlmIHRoZSBsaXN0IGlzIGVtcHR5LlxyXG4gICAgICBpZiAodGhpcy5fcGxhY2Vob2xkZXJOb2RlLnBhcmVudE5vZGUgIT09IHRoaXMuX2xpc3ROb2RlKSB7XHJcbiAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuX25hdGl2ZUVsZW1lbnQsIHRoaXMuX3BsYWNlaG9sZGVyTm9kZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IHRoaXMuX2xpc3ROb2RlKSB7XHJcbiAgICAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBub2RlIGRpcmVjdCBkaXJlY3RseSBiZWxvdyB0aGUgbGlzdCBub2RlLlxyXG4gICAgICAgICBsZXQgbGlzdEl0ZW1Ob2RlID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICB3aGlsZSAobGlzdEl0ZW1Ob2RlLnBhcmVudE5vZGUgIT09IHRoaXMuX2xpc3ROb2RlICYmIGxpc3RJdGVtTm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGxpc3RJdGVtTm9kZSA9IGxpc3RJdGVtTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBpZiAobGlzdEl0ZW1Ob2RlLnBhcmVudE5vZGUgPT09IHRoaXMuX2xpc3ROb2RlICYmIGxpc3RJdGVtTm9kZSAhPT0gdGhpcy5fcGxhY2Vob2xkZXJOb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBtb3VzZSBwb2ludGVyIGlzIGluIHRoZSB1cHBlciBoYWxmIG9mIHRoZSBsaXN0IGl0ZW0gZWxlbWVudCxcclxuICAgICAgICAgICAgLy8gd2UgcG9zaXRpb24gdGhlIHBsYWNlaG9sZGVyIGJlZm9yZSB0aGUgbGlzdCBpdGVtLCBvdGhlcndpc2UgYWZ0ZXIgaXQuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBsaXN0SXRlbU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGxldCBpc0ZpcnN0SGFsZjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3RTZXR0aW5ncy5ob3Jpem9udGFsKSB7XHJcbiAgICAgICAgICAgICAgIGlzRmlyc3RIYWxmID0gZXZlbnQuY2xpZW50WCA8IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICBpc0ZpcnN0SGFsZiA9IGV2ZW50LmNsaWVudFkgPCByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9saXN0Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5fcGxhY2Vob2xkZXJOb2RlLFxyXG4gICAgICAgICAgICAgICBpc0ZpcnN0SGFsZiA/IGxpc3RJdGVtTm9kZSA6IGxpc3RJdGVtTm9kZS5uZXh0U2libGluZyk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSW4gSUUgd2Ugc2V0IGEgZmFrZSBlZmZlY3RBbGxvd2VkIGluIGRyYWdzdGFydCB0byBnZXQgdGhlIGNvcnJlY3QgY3Vyc29yLCB3ZSB0aGVyZWZvcmVcclxuICAgICAgLy8gaWdub3JlIHRoZSBlZmZlY3RBbGxvd2VkIHBhc3NlZCBpbiBkYXRhVHJhbnNmZXIuIFdlIG11c3QgYWxzbyBub3QgYWNjZXNzIGRhdGFUcmFuc2ZlciBmb3JcclxuICAgICAgLy8gZHJvcHMgZnJvbSBleHRlcm5hbCBzb3VyY2VzLCBhcyB0aGF0IHRocm93cyBhbiBleGNlcHRpb24uXHJcbiAgICAgIGNvbnN0IGlnbm9yZURhdGFUcmFuc2ZlciA9IG1pbWVUeXBlID09PSBNU0lFX01JTUVfVFlQRTtcclxuICAgICAgY29uc3QgZHJvcEVmZmVjdCA9IHRoaXMuX2dldERyb3BFZmZlY3QoZXZlbnQsIGlnbm9yZURhdGFUcmFuc2Zlcik7XHJcblxyXG4gICAgICBpZiAoZHJvcEVmZmVjdCA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wRHJhZ292ZXIoKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGludm9rZSB0aGUgY2FsbGJhY2ssIHdoaWNoIHN0aWxsIGNhbiBkaXNhbGxvdyB0aGUgZHJvcC5cclxuICAgICAgLy8gV2UgY2FuJ3QgZG8gdGhpcyBlYXJsaWVyIGJlY2F1c2Ugd2Ugd2FudCB0byBwYXNzIHRoZSBpbmRleCBvZiB0aGUgcGxhY2Vob2xkZXIuXHJcblxyXG4gICAgICB0aGlzLmRuZERyYWdvdmVyLmVtaXQodGhpcy5fZ2V0RXZlbnRSZXNwb25zZShldmVudCwgZHJvcEVmZmVjdCwgaXRlbVR5cGUpKTtcclxuICAgICAgaWYgKHRoaXMuX2RyYWdPdmVyU3RvcHBlZCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5fc3RvcERyYWdvdmVyKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFNldCBkcm9wRWZmZWN0IHRvIG1vZGlmeSB0aGUgY3Vyc29yIHNob3duIGJ5IHRoZSBicm93c2VyLCB1bmxlc3Mgd2UncmUgaW4gSUUsIHdoZXJlIHRoaXNcclxuICAgICAgLy8gaXMgbm90IHN1cHBvcnRlZC4gVGhpcyBtdXN0IGJlIGRvbmUgYWZ0ZXIgcHJldmVudERlZmF1bHQgaW4gRmlyZWZveC5cclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgaWYgKCFpZ25vcmVEYXRhVHJhbnNmZXIpIHtcclxuICAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSBkcm9wRWZmZWN0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9uYXRpdmVFbGVtZW50LCAnZG5kRHJhZ292ZXInKTtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgfVxyXG5cclxuICAgQEhvc3RMaXN0ZW5lcignZHJvcCcsIFsnJGV2ZW50J10pXHJcbiAgIG9uRHJvcChldmVudCkge1xyXG4gICAgICB0aGlzLl9jb3VudGVyID0gMDtcclxuICAgICAgZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xyXG4gICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBkcm9wIGlzIGFsbG93ZWQgYW5kIGRldGVybWluZSBtaW1lIHR5cGUuXHJcbiAgICAgIGNvbnN0IG1pbWVUeXBlID0gdGhpcy5fZ2V0TWltZVR5cGUoZXZlbnQuZGF0YVRyYW5zZmVyLnR5cGVzKTtcclxuICAgICAgbGV0IGl0ZW1UeXBlID0gdGhpcy5fZ2V0SXRlbVR5cGUobWltZVR5cGUpO1xyXG4gICAgICBpZiAoIW1pbWVUeXBlIHx8ICF0aGlzLl9pc0Ryb3BBbGxvd2VkKGl0ZW1UeXBlKSkge1xyXG4gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICAvLyBUaGUgZGVmYXVsdCBiZWhhdmlvciBpbiBGaXJlZm94IGlzIHRvIGludGVycHJldCB0aGUgZHJvcHBlZCBlbGVtZW50IGFzIFVSTCBhbmRcclxuICAgICAgLy8gZm9yd2FyZCB0byBpdC4gV2Ugd2FudCB0byBwcmV2ZW50IHRoYXQgZXZlbiBpZiBvdXIgZHJvcCBpcyBhYm9ydGVkLlxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgLy8gVW5zZXJpYWxpemUgdGhlIGRhdGEgdGhhdCB3YXMgc2VyaWFsaXplZCBpbiBkcmFnc3RhcnQuXHJcbiAgICAgIGxldCBkYXRhO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShtaW1lVHlwZSkpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wRHJhZ292ZXIoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRHJvcHMgd2l0aCBpbnZhbGlkIHR5cGVzIGZyb20gZXh0ZXJuYWwgc291cmNlcyBtaWdodCBub3QgaGF2ZSBiZWVuIGZpbHRlcmVkIG91dCB5ZXQuXHJcbiAgICAgIGlmIChtaW1lVHlwZSA9PT0gTVNJRV9NSU1FX1RZUEUgfHwgbWltZVR5cGUgPT09IEVER0VfTUlNRV9UWVBFKSB7XHJcbiAgICAgICAgIGl0ZW1UeXBlID0gZGF0YS50eXBlIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgZGF0YSA9IGRhdGEuaXRlbTtcclxuICAgICAgICAgaWYgKCF0aGlzLl9pc0Ryb3BBbGxvd2VkKGl0ZW1UeXBlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvcERyYWdvdmVyKCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgaW50ZXJuYWwgSUUgZHJvcHMsIHNlZSBkcmFnb3ZlciBoYW5kbGVyLlxyXG4gICAgICBjb25zdCBpZ25vcmVEYXRhVHJhbnNmZXIgPSBtaW1lVHlwZSA9PT0gTVNJRV9NSU1FX1RZUEU7XHJcbiAgICAgIGNvbnN0IGRyb3BFZmZlY3QgPSB0aGlzLl9nZXREcm9wRWZmZWN0KGV2ZW50LCBpZ25vcmVEYXRhVHJhbnNmZXIpO1xyXG4gICAgICBpZiAoZHJvcEVmZmVjdCA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wRHJhZ292ZXIoKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrLCB3aGljaCBjYW4gdHJhbnNmb3JtIHRoZSB0cmFuc2ZlcnJlZE9iamVjdCBhbmQgZXZlbiBhYm9ydCB0aGUgZHJvcC5cclxuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9nZXRQbGFjZWhvbGRlckluZGV4KCk7XHJcbiAgICAgIHRoaXMuZG5kRHJvcC5lbWl0KHRoaXMuX2dldEV2ZW50UmVzcG9uc2UoZXZlbnQsIGRyb3BFZmZlY3QsIGl0ZW1UeXBlLCBpbmRleCwgZGF0YSkpO1xyXG4gICAgICBpZiAodGhpcy5fZHJhZ092ZXJTdG9wcGVkKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wRHJhZ292ZXIoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGhlIGRyb3AgaXMgZGVmaW5pdGVseSBnb2luZyB0byBoYXBwZW4gbm93LCBzdG9yZSB0aGUgZHJvcEVmZmVjdC5cclxuICAgICAgdGhpcy5fZG5kU2VydmljZS5zZXREcm9wRWZmZWN0KGRyb3BFZmZlY3QpO1xyXG4gICAgICBpZiAoIWlnbm9yZURhdGFUcmFuc2Zlcikge1xyXG4gICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IGRyb3BFZmZlY3Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLmRuZExpc3QpIHtcclxuICAgICAgICAgLy8gQ3JlYXRlcyBhIG5ldyBhcnJheSBhZGRpbmcgdGhlIG9iamVjdCBpbnRvIHRoZSBhcnJheSBwb3NpdGlvbiB3aXRob3V0IG11dGF0ZSB0aGUgb3JpZ2luYWwuXHJcbiAgICAgICAgIGNvbnN0IG5ld0xpc3QgPSBbLi4udGhpcy5kbmRMaXN0LnNsaWNlKDAsIGluZGV4KSwgZGF0YSwgLi4udGhpcy5kbmRMaXN0LnNsaWNlKGluZGV4KV07XHJcbiAgICAgICAgIHRoaXMuZG5kTGlzdENoYW5nZS5lbWl0KG5ld0xpc3QpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9kbmRTZXJ2aWNlLnNldFJlbW92ZU9uRHJvcCh0cnVlKTtcclxuICAgICAgLy8gdGhpcy5fZG5kU2VydmljZS5kcm9wRW5kU291cmNlKClcclxuXHJcbiAgICAgIHRoaXMuZG5kSW5zZXJ0ZWQuZW1pdCh0aGlzLl9nZXRFdmVudFJlc3BvbnNlKGV2ZW50LCBkcm9wRWZmZWN0LCBpdGVtVHlwZSwgaW5kZXgsIGRhdGEpKTtcclxuXHJcbiAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgIHRoaXMuX3N0b3BEcmFnb3ZlcigpO1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAqIFdlIGhhdmUgdG8gcmVtb3ZlIHRoZSBwbGFjZWhvbGRlciB3aGVuIHRoZSBlbGVtZW50IGlzIG5vIGxvbmdlciBkcmFnZ2VkIG92ZXIgb3VyIGxpc3QuIFRoZVxyXG4gICogcHJvYmxlbSBpcyB0aGF0IHRoZSBkcmFnbGVhdmUgZXZlbnQgaXMgbm90IG9ubHkgZmlyZWQgd2hlbiB0aGUgZWxlbWVudCBsZWF2ZXMgb3VyIGxpc3QsXHJcbiAgKiBidXQgYWxzbyB3aGVuIGl0IGxlYXZlcyBhIGNoaWxkIGVsZW1lbnQuIFRoZXJlZm9yZSwgd2UgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG1vdXNlIGN1cnNvclxyXG4gICogaXMgc3RpbGwgcG9pbnRpbmcgdG8gYW4gZWxlbWVudCBpbnNpZGUgdGhlIGxpc3Qgb3Igbm90LlxyXG4gICovXHJcbiAgIEBIb3N0TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIFsnJGV2ZW50J10pXHJcbiAgIG9uRHJhZ0xlYXZlKGV2ZW50KSB7XHJcbiAgICAgIHRoaXMuX2NvdW50ZXItLTtcclxuICAgICAgZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xyXG4gICAgICBpZiAodGhpcy5fY291bnRlciAhPT0gMCkge1xyXG4gICAgICAgICAvLyBTaWduYWxpemUgdG8gcG90ZW50aWFsIHBhcmVudCBsaXN0cyB0aGF0IGEgcGxhY2Vob2xkZXIgaXMgYWxyZWFkeSBzaG93bi5cclxuICAgICAgICAgZXZlbnQuX2RuZFBoU2hvd24gPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICB0aGlzLl9zdG9wRHJhZ292ZXIoKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJywgWyckZXZlbnQnXSlcclxuICAgb25tb3VzZW91dChldmVudCkge1xyXG4gICAgICBpZiAodGhpcy5fZG5kU2VydmljZS5nZXREcmFnZ2luZ1N0YXRlKCkpIHtcclxuICAgICAgICAgdGhpcy5fc3RvcERyYWdvdmVyKCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBfc3RvcERyYWcoKSB7XHJcbiAgICAgIHRoaXMuX2RyYWdPdmVyU3RvcHBlZCA9IHRydWU7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgX3N0b3BEcmFnb3ZlcigpIHtcclxuICAgICAgdGhpcy5fcGxhY2Vob2xkZXJOb2RlLnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLl9uYXRpdmVFbGVtZW50LCAnZG5kRHJhZ292ZXInKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgIH1cclxuXHJcblxyXG4gICAvKipcclxuICAqIENyZWF0ZSBhIERuZExpc3RFdmVudCBpbnN0YW5jZSBmb3IgZXZlbnRzIHJlc3BvbnNlLlxyXG4gICovXHJcbiAgIHByaXZhdGUgX2dldEV2ZW50UmVzcG9uc2UoZXZlbnQ6IERyYWdFdmVudCwgZHJvcEVmZmVjdDogc3RyaW5nLCBpdGVtVHlwZTogc3RyaW5nLCBpbmRleD86IG51bWJlciwgaXRlbT8pOiBEbmRMaXN0RXZlbnQge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICBjYWxsYmFjazogdGhpcy5fZG5kU2VydmljZS5nZXREcm9wQ2FsbGJhY2soKSxcclxuICAgICAgICAgZHJvcEVmZmVjdDogZHJvcEVmZmVjdCxcclxuICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICBleHRlcm5hbDogIXRoaXMuX2RuZFNlcnZpY2UuZ2V0RHJhZ2dpbmdTdGF0ZSgpLFxyXG4gICAgICAgICBpbmRleDogaW5kZXggIT09IHVuZGVmaW5lZCA/IGluZGV4IDogdGhpcy5fZ2V0UGxhY2Vob2xkZXJJbmRleCgpLFxyXG4gICAgICAgICBpdGVtOiBpdGVtIHx8IHVuZGVmaW5lZCxcclxuICAgICAgICAgc3RvcERyYWdvdmVyOiB0aGlzLl9zdG9wRHJhZy5iaW5kKHRoaXMpLFxyXG4gICAgICAgICB0eXBlOiBpdGVtVHlwZVxyXG4gICAgICB9O1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIF9nZXRQbGFjZWhvbGRlckluZGV4KCkge1xyXG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbCh0aGlzLl9uYXRpdmVFbGVtZW50LmNoaWxkcmVuLCB0aGlzLl9wbGFjZWhvbGRlck5vZGUpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIF9nZXRQbGFjZWhvbGRlckVsZW1lbnQoKTogRWxlbWVudCB7XHJcbiAgICAgIGxldCBwbGFjZWhvbGRlciA9IFtdLnNsaWNlLmNhbGwodGhpcy5fbmF0aXZlRWxlbWVudC5jaGlsZHJlbikuZmlsdGVyKChjaGlsZE5vZGUpID0+IHtcclxuICAgICAgICAgcmV0dXJuIGNoaWxkTm9kZS5jbGFzc05hbWUuaW5kZXhPZignZG5kUGxhY2Vob2xkZXInKSA+IC0xO1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHBsYWNlaG9sZGVyLmxlbmd0aCkge1xyXG4gICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XHJcbiAgICAgIH1cclxuICAgICAgcGxhY2Vob2xkZXIgPSB0aGlzLl9yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyhwbGFjZWhvbGRlciwgJ2RuZFBsYWNlaG9sZGVyJyk7XHJcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBfZ2V0TWltZVR5cGUodHlwZXMpIHtcclxuICAgICAgaWYgKCF0eXBlcykge1xyXG4gICAgICAgICByZXR1cm4gTVNJRV9NSU1FX1RZUEU7IC8vIElFIDkgd29ya2Fyb3VuZC5cclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIGlmICh0eXBlc1tpXSA9PT0gTVNJRV9NSU1FX1RZUEUgfHwgdHlwZXNbaV0gPT09IEVER0VfTUlNRV9UWVBFIHx8XHJcbiAgICAgICAgICAgIHR5cGVzW2ldLnN1YnN0cigwLCBNSU1FX1RZUEUubGVuZ3RoKSA9PT0gTUlNRV9UWVBFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlc1tpXTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAqIERldGVybWluZXMgdGhlIHR5cGUgb2YgdGhlIGl0ZW0gZnJvbSB0aGUgZG5kU2VydmljZSwgb3IgZnJvbSB0aGUgbWltZSB0eXBlIGZvciBpdGVtcyBmcm9tXHJcbiAgKiBleHRlcm5hbCBzb3VyY2VzLiBSZXR1cm5zIHVuZGVmaW5lZCBpZiBubyBpdGVtIHR5cGUgd2FzIHNldCBhbmQgbnVsbCBpZiB0aGUgaXRlbSB0eXBlIGNvdWxkXHJcbiAgKiBub3QgYmUgZGV0ZXJtaW5lZC5cclxuICAqL1xyXG4gICBwcml2YXRlIF9nZXRJdGVtVHlwZShtaW1lVHlwZSkge1xyXG4gICAgICBpZiAodGhpcy5fZG5kU2VydmljZS5nZXREcmFnZ2luZ1N0YXRlKCkpIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuX2RuZFNlcnZpY2UuZ2V0SXRlbVR5cGUoKSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1pbWVUeXBlID09PSBNU0lFX01JTUVfVFlQRSB8fCBtaW1lVHlwZSA9PT0gRURHRV9NSU1FX1RZUEUpIHtcclxuICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIChtaW1lVHlwZSAmJiBtaW1lVHlwZS5zdWJzdHIoTUlNRV9UWVBFLmxlbmd0aCArIDEpKSB8fCB1bmRlZmluZWQ7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgX2lzRHJvcEFsbG93ZWQoaXRlbVR5cGUpIHtcclxuICAgICAgaWYgKHRoaXMuX2xpc3RTZXR0aW5ncy5kaXNhYmxlZCkge1xyXG4gICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0aGlzLl9saXN0U2V0dGluZ3MuZXh0ZXJuYWxTb3VyY2VzICYmICF0aGlzLl9kbmRTZXJ2aWNlLmdldERyYWdnaW5nU3RhdGUoKSkge1xyXG4gICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0aGlzLl9saXN0U2V0dGluZ3MuYWxsb3dlZFR5cGVzIHx8IGl0ZW1UeXBlID09PSBudWxsKSB7XHJcbiAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBpdGVtVHlwZSAmJiB0aGlzLl9saXN0U2V0dGluZ3MuYWxsb3dlZFR5cGVzLmluZGV4T2YoaXRlbVR5cGUpICE9PSAtMTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgKiBEZXRlcm1pbmVzIHdoaWNoIGRyb3AgZWZmZWN0IHRvIHVzZSBmb3IgdGhlIGdpdmVuIGV2ZW50LiBJbiBJbnRlcm5ldCBFeHBsb3JlciB3ZSBoYXZlIHRvXHJcbiAgKiBpZ25vcmUgdGhlIGVmZmVjdEFsbG93ZWQgZmllbGQgb24gZGF0YVRyYW5zZmVyLCBzaW5jZSB3ZSBzZXQgYSBmYWtlIHZhbHVlIGluIGRyYWdzdGFydC5cclxuICAqIEluIHRob3NlIGNhc2VzIHdlIHJlbHkgb24gZG5kU3RhdGUgdG8gZmlsdGVyIGVmZmVjdHMuIFJlYWQgdGhlIGRlc2lnbiBkb2MgZm9yIG1vcmUgZGV0YWlsczpcclxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJjZWxqdWVuZW1hbm4vYW5ndWxhci1kcmFnLWFuZC1kcm9wLWxpc3RzL3dpa2kvRGF0YS1UcmFuc2Zlci1EZXNpZ25cclxuICAqL1xyXG4gICBwcml2YXRlIF9nZXREcm9wRWZmZWN0KGV2ZW50LCBpZ25vcmVEYXRhVHJhbnNmZXIpIHtcclxuICAgICAgbGV0IGVmZmVjdHMgPSBBTExfRUZGRUNUUztcclxuICAgICAgaWYgKCFpZ25vcmVEYXRhVHJhbnNmZXIpIHtcclxuICAgICAgICAgZWZmZWN0cyA9IHRoaXMuX2ZpbHRlckVmZmVjdHMoZWZmZWN0cywgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLl9kbmRTZXJ2aWNlLmdldERyYWdnaW5nU3RhdGUoKSkge1xyXG4gICAgICAgICBlZmZlY3RzID0gdGhpcy5fZmlsdGVyRWZmZWN0cyhlZmZlY3RzLCB0aGlzLl9kbmRTZXJ2aWNlLmdldEVmZmVjdEFsbG93ZWQoKSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuZG5kRWZmZWN0QWxsb3dlZCkge1xyXG4gICAgICAgICBlZmZlY3RzID0gdGhpcy5fZmlsdGVyRWZmZWN0cyhlZmZlY3RzLCB0aGlzLmRuZEVmZmVjdEFsbG93ZWQpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIE1hY09TIGF1dG9tYXRpY2FsbHkgZmlsdGVycyBkYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCBkZXBlbmRpbmcgb24gdGhlIG1vZGlmaWVyIGtleXMsXHJcbiAgICAgIC8vIHRoZXJlZm9yZSB0aGUgZm9sbG93aW5nIG1vZGlmaWVyIGtleXMgd2lsbCBvbmx5IGFmZmVjdCBvdGhlciBvcGVyYXRpbmcgc3lzdGVtcy5cclxuICAgICAgaWYgKCFlZmZlY3RzLmxlbmd0aCkge1xyXG4gICAgICAgICByZXR1cm4gJ25vbmUnO1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmN0cmxLZXkgJiYgZWZmZWN0cy5pbmRleE9mKCdjb3B5JykgIT09IC0xKSB7XHJcbiAgICAgICAgIHJldHVybiAnY29weSc7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQuYWx0S2V5ICYmIGVmZmVjdHMuaW5kZXhPZignbGluaycpICE9PSAtMSkge1xyXG4gICAgICAgICByZXR1cm4gJ2xpbmsnO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICByZXR1cm4gZWZmZWN0c1swXTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAqIEZpbHRlcnMgYW4gYXJyYXkgb2YgZHJvcCBlZmZlY3RzIHVzaW5nIGEgSFRNTDUgZWZmZWN0QWxsb3dlZCBzdHJpbmcuXHJcbiAgKi9cclxuICAgcHJpdmF0ZSBfZmlsdGVyRWZmZWN0cyhlZmZlY3RzLCBlZmZlY3RBbGxvd2VkKSB7XHJcbiAgICAgIGlmIChlZmZlY3RBbGxvd2VkID09PSAnYWxsJykge1xyXG4gICAgICAgICByZXR1cm4gZWZmZWN0cztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZWZmZWN0cy5maWx0ZXIoZnVuY3Rpb24gKGVmZmVjdCkge1xyXG4gICAgICAgICByZXR1cm4gZWZmZWN0QWxsb3dlZC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZWZmZWN0KSAhPT0gLTE7XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn1cclxuIl19