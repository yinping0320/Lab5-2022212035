/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener } from '@angular/core';
var DndNodragDirective = /** @class */ (function () {
    function DndNodragDirective() {
    }
    /**
     * @return {?}
     */
    DndNodragDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    Object.defineProperty(DndNodragDirective.prototype, "draggable", {
        get: /**
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    DndNodragDirective.prototype.onDragStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event = event.originalEvent || event;
        if (!event._dndHandle) {
            // If a child element already reacted to dragstart and set a dataTransfer object, we will
            // allow that. For example, this is the case for user selections inside of input elements.
            if (!(event.dataTransfer.types && event.dataTransfer.types.length)) {
                event.preventDefault();
            }
            event.stopPropagation();
        }
    };
    /**
     * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
     * would be removed.
     */
    /**
     * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
     * would be removed.
     * @param {?} event
     * @return {?}
     */
    DndNodragDirective.prototype.onDragEnd = /**
     * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
     * would be removed.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event = event.originalEvent || event;
        if (!event._dndHandle) {
            event.stopPropagation();
        }
    };
    DndNodragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dndNodrag]',
                },] }
    ];
    /** @nocollapse */
    DndNodragDirective.ctorParameters = function () { return []; };
    DndNodragDirective.propDecorators = {
        draggable: [{ type: HostBinding, args: ['draggable',] }],
        onDragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],
        onDragEnd: [{ type: HostListener, args: ['dragend', ['$event'],] }]
    };
    return DndNodragDirective;
}());
export { DndNodragDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLW5vZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9kbmQtbGlzdC9kaXJlY3RpdmVzL2RuZC1ub2RyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFN0U7SUFJRTtJQUFlLENBQUM7Ozs7SUFFaEIscUNBQVE7OztJQUFSLGNBQVksQ0FBQztJQUViLHNCQUNJLHlDQUFTOzs7O1FBRGI7WUFFRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7OztPQUFBOzs7OztJQUdELHdDQUFXOzs7O0lBRFgsVUFDWSxLQUFLO1FBQ2YsS0FBSyxHQUFHLEtBQUssQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ3JCLHlGQUF5RjtZQUN6RiwwRkFBMEY7WUFDMUYsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xFLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN4QjtZQUNELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7SUFFSCxzQ0FBUzs7Ozs7O0lBRFQsVUFDVSxLQUFLO1FBQ2IsS0FBSyxHQUFHLEtBQUssQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ3JCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7O2dCQXBDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCOzs7Ozs0QkFNRSxXQUFXLFNBQUMsV0FBVzs4QkFLdkIsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQzs0QkFpQnBDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBT3JDLHlCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FsQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2RuZE5vZHJhZ10nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRG5kTm9kcmFnRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge31cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdkcmFnZ2FibGUnKVxyXG4gIGdldCBkcmFnZ2FibGUoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2RyYWdzdGFydCcsIFsnJGV2ZW50J10pXHJcbiAgb25EcmFnU3RhcnQoZXZlbnQpIHtcclxuICAgIGV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudDtcclxuICAgIGlmICghZXZlbnQuX2RuZEhhbmRsZSkge1xyXG4gICAgICAvLyBJZiBhIGNoaWxkIGVsZW1lbnQgYWxyZWFkeSByZWFjdGVkIHRvIGRyYWdzdGFydCBhbmQgc2V0IGEgZGF0YVRyYW5zZmVyIG9iamVjdCwgd2Ugd2lsbFxyXG4gICAgICAvLyBhbGxvdyB0aGF0LiBGb3IgZXhhbXBsZSwgdGhpcyBpcyB0aGUgY2FzZSBmb3IgdXNlciBzZWxlY3Rpb25zIGluc2lkZSBvZiBpbnB1dCBlbGVtZW50cy5cclxuICAgICAgaWYgKCEoZXZlbnQuZGF0YVRyYW5zZmVyLnR5cGVzICYmIGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlcy5sZW5ndGgpKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3AgcHJvcGFnYXRpb24gb2YgZHJhZ2VuZCBldmVudHMsIG90aGVyd2lzZSBkbmQtbW92ZWQgbWlnaHQgYmUgdHJpZ2dlcmVkIGFuZCB0aGUgZWxlbWVudFxyXG4gICAqIHdvdWxkIGJlIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgQEhvc3RMaXN0ZW5lcignZHJhZ2VuZCcsIFsnJGV2ZW50J10pXHJcbiAgb25EcmFnRW5kKGV2ZW50KSB7XHJcbiAgICBldmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQ7XHJcbiAgICBpZiAoIWV2ZW50Ll9kbmRIYW5kbGUpIHtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==