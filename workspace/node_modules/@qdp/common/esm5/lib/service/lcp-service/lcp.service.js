/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { Server_Host, Load_Data_Uri, Load_Data_Col } from '../../entitties/server.host';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { RtfServices } from '../rtfservices/rtfservices';
import { FileType, OutputType, PrintType } from '@gsp-svc/cloudprint';
var LcpService = /** @class */ (function () {
    function LcpService(restfulService, sessionService, serverHost, loadDataUri, loadDataCol) {
        this.restfulService = restfulService;
        this.sessionService = sessionService;
        this.serverHost = serverHost;
        this.loadDataUri = loadDataUri;
        this.loadDataCol = loadDataCol;
        this.pageInfoChange = new Subject();
        this.variablesChange = new Subject();
        this.inSuiteDropDownInfoChange = new Subject();
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.exportData = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
        }
        /** @type {?} */
        var config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        /** @type {?} */
        var fileName = params.excelExportName + '.xlsx';
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            var byteString = atob(data);
            // base64 解码
            /** @type {?} */
            var arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            var intArray = new Uint8Array(arrayBuffer);
            for (var i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            var blob = new Blob([intArray], { type: 'application/vnd.ms-excel' });
            if ('download' in document.createElement('a')) { // 非IE下载
                // 非IE下载
                /** @type {?} */
                var elink = document.createElement('a');
                elink.download = fileName;
                elink.style.display = 'none';
                elink.href = URL.createObjectURL(blob);
                document.body.appendChild(elink);
                elink.click();
                URL.revokeObjectURL(elink.href); // 释放URL 对象
                document.body.removeChild(elink);
            }
            else { // IE10+下载
                navigator.msSaveBlob(blob, fileName);
            }
            self.loading.close();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            self.formErrorService.exception(error.Message, error);
        }));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.aysnExportData = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
        }
        /** @type {?} */
        var config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params.async = 1;
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            if (data) {
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            self.formErrorService.exception(error.Message, error);
        }));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.pdfExportEvent = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
        }
        /** @type {?} */
        var config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            var byteString = atob(data);
            // base64 解码
            /** @type {?} */
            var arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            var intArray = new Uint8Array(arrayBuffer);
            for (var i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            var blob = new Blob([intArray], { type: 'application/pdf' });
            if ('download' in document.createElement('a')) { // 非IE下载
                // 非IE下载
                /** @type {?} */
                var elink = document.createElement('a');
                elink.download = fileName;
                elink.style.display = 'none';
                elink.href = URL.createObjectURL(blob);
                document.body.appendChild(elink);
                elink.click();
                URL.revokeObjectURL(elink.href); // 释放URL 对象
                document.body.removeChild(elink);
            }
            else { // IE10+下载
                navigator.msSaveBlob(blob, fileName);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            self.formErrorService.exception(error.Message, error);
        }));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.printPreView = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
        }
        /** @type {?} */
        var config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            var options = {
                OutputType: OutputType.PRINT,
                FileType: FileType.Pdf,
                Path: '',
                DeviceId: '',
                printType: PrintType.Query,
                printJob: false,
                printerName: '',
                printSetting: null
            };
            /** @type {?} */
            var byteString = atob(data);
            // base64 解码
            /** @type {?} */
            var arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            var intArray = new Uint8Array(arrayBuffer);
            for (var i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            var blob = new Blob([intArray]);
            self.cloudprintService.openRendedViewer('tab', blob, options);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            self.formErrorService.exception(error.Message, error);
        }));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.getData = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
                if (data && data.pageInfo) {
                    self.pageInfoChange.next(data.pageInfo);
                }
                if (data && data.variables) {
                    self.variablesChange.next(data.variables);
                }
                if (data && data.dropDownOption) {
                    self.inSuiteDropDownInfo = data.dropDownOption;
                    self.inSuiteDropDownInfoChange.next(data.dropDownOption);
                }
            }
            return data;
        })));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.getCol = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataCol) {
            uri += this.loadDataCol;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
            }
            return data;
        })));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpService.prototype.getCrosstabTemplate = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/getcrosstabtemplate' : (queryRelativeUrl + 'getcrosstabtemplate');
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (result) {
                result = !queryRelativeUrl ? result : (result && result.returnValue) ? JSON.parse(result.returnValue) : undefined;
            }
            return result;
        })));
    };
    /**
     * @return {?}
     */
    LcpService.prototype.getSpreadLicense = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var uri = '/api/runtime/bcc/v1.0/qdpschemamanager/getSpreadLicense';
        /** @type {?} */
        var result$ = this.restfulService.get(uri, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data.spreadjs;
        })));
    };
    /**
     * @param {?} params
     * @return {?}
     */
    LcpService.prototype.clearCache = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost + '/api/runtime/bcc/v1.0/qdpsearch/clearcache';
        /** @type {?} */
        var result$ = this.restfulService.post(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return result;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    LcpService.prototype.createHeaderSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        return RtfServices.createHeaderSessionId(this.sessionService);
    };
    LcpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LcpService.ctorParameters = function () { return [
        { type: RestfulService },
        { type: SessionService },
        { type: String, decorators: [{ type: Inject, args: [Server_Host,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [Load_Data_Uri,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [Load_Data_Col,] }, { type: Optional }] }
    ]; };
    return LcpService;
}());
export { LcpService };
if (false) {
    /** @type {?} */
    LcpService.prototype.pageInfoChange;
    /** @type {?} */
    LcpService.prototype.variablesChange;
    /** @type {?} */
    LcpService.prototype.inSuiteDropDownInfoChange;
    /** @type {?} */
    LcpService.prototype.inSuiteDropDownInfo;
    /** @type {?} */
    LcpService.prototype.cloudprintService;
    /** @type {?} */
    LcpService.prototype.formErrorService;
    /** @type {?} */
    LcpService.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.restfulService;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.serverHost;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.loadDataUri;
    /**
     * @type {?}
     * @private
     */
    LcpService.prototype.loadDataCol;
}
//# sourceMappingURL=data:application/json;base64,