/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// import 'rxjs/add/operator/map';
import { Injectable, Inject, Optional } from '@angular/core';
import { Subject, of } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { filter } from 'lodash-es';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { SchemaRenderExtendService } from '../extend-service/schema-renderextend.service';
import { RtfServices } from '../rtfservices/rtfservices';
var SchemaManagerService = /** @class */ (function () {
    function SchemaManagerService(restService, sessionService, host, schemaRenderExtendService) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.schemaRenderExtendService = schemaRenderExtendService;
        this.uri = '/api/runtime/bcc/v1.0/qdpschemamanager/';
        this.schemaInfoChange = new Subject();
        this.colList = new Subject();
        this.controlType = new Subject();
        this.schemaInfo = {};
        this.schemaid = new Subject();
        this.operationChange = new Subject();
        this.dynamicCols = {};
        this.customSchema = {};
        this.dynamicColIndex = 0;
        this.preSchema = {
            id: 'prefab',
            schemaName: '系统预制',
            isPrefab: 1,
            isDefault: 0,
            isProtected: '0',
            schemaValue: {
                titleOption: {
                    title: '',
                    subTitles: []
                },
                columnOption: {
                    maxLevel: 0,
                    colList: []
                },
                styleOption: {
                    Title: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    SubTitle: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    Header: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    DataArea: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    Footer: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    }
                },
                otherOption: {
                    showFilterRow: true,
                    dataCahce: true,
                    level: '',
                    isDetails: '',
                    loadDataType: 1,
                    pageSize: 20,
                    treeInfoType: 2,
                    pathField: '',
                    pathStep: 0,
                    idField: '',
                    parentField: '',
                    firstLoad: true,
                    showZero: true,
                    expand: true,
                    showHeaderSort: true
                }
            }
        };
        this.isDefaultSchema = [];
        this.operations = {};
        /** @type {?} */
        var self = this;
        this.getOperation().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                self.operations['QdpQueryExport'] = value['05202284-dfc4-149c-853e-cfd35b4a02bb'];
                self.operations['QdpQueryPrint'] = value['653fe24b-d77f-d8b0-71c5-5e3d561e33ca'];
                self.operations['QdpModifyPublicSchema'] = value['d6832d96-e6f3-114e-1d53-f9e636548eb9'];
                self.operations['QdpPubQuery'] = value['cd6c2057-5ad6-90dd-54ac-771c192563e8'];
                self.operationChange.next(self.operations);
            }
            // console.log(value);
        }));
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    SchemaManagerService.prototype.getSpreadTemplate = /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    function (id, queryId, dynamicCols, queryRelativeUrl, scheme, frozenCols, groupType) {
        if (dynamicCols && dynamicCols.length) {
            this.dynamicCols[groupType ? groupType : queryId] = dynamicCols;
            this.dynamicCols[id] = dynamicCols;
        }
        /** @type {?} */
        var schema;
        if (this.schemaList && this.schemaList[id]) {
            schema = this.schemaList[id];
        }
        /** @type {?} */
        var colInfo = [];
        // 新版本列信息通过frozenCols获取
        if (this.dynamicCols[groupType ? groupType : queryId]) {
            colInfo = Object.assign(frozenCols, this.dynamicCols[groupType ? groupType : queryId]);
        }
        else {
            colInfo = frozenCols;
        }
        this.colList.next(colInfo);
        return this.analysis((schema && schema.id ? schema.id : '1'), queryId, dynamicCols, queryRelativeUrl, scheme);
    };
    /**
     * 获取指定方案
     * @param id 方案ID
     * @param queryId 查询编号
     */
    /**
     * 获取指定方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @param {?=} fromCache
     * @return {?}
     */
    SchemaManagerService.prototype.getSchema = /**
     * 获取指定方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @param {?=} fromCache
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl, groupType, organizationId, fromCache) {
        /** @type {?} */
        var self = this;
        if (this.schemaList && this.schemaList[id] && fromCache && fromCache === true) {
            return of(this.schemaList[id]);
        }
        else {
            /** @type {?} */
            var result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
            return result$.pipe(map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (id === '1' || id === 'prefab') {
                    return Object.assign({}, self.preSchema, { id: '1' });
                }
                else if (value && value['schemaList'] && value['schemaList'][queryId]) {
                    if (value['schemaList'][queryId][id]) {
                        return value['schemaList'][queryId][id];
                    }
                    else {
                        /** @type {?} */
                        var defaultSchemaId = '';
                        if (value.isDefaultSchema && value.isDefaultSchema.id && value['schemaList'][queryId][value.isDefaultSchema.id]) {
                            defaultSchemaId = value.isDefaultSchema.id;
                            return value['schemaList'][queryId][defaultSchemaId];
                        }
                        else {
                            return null;
                        }
                    }
                }
                else {
                    return null;
                }
            })));
        }
    };
    /**
     * 获取默认方案
     */
    /**
     * 获取默认方案
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    SchemaManagerService.prototype.getDefaultSchema = /**
     * 获取默认方案
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    function (queryId, queryRelativeUrl, groupType, organizationId) {
        var _this = this;
        /** @type {?} */
        var result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
        return result$.pipe(map((/**
         * @return {?}
         */
        function () {
            if (_this.isDefaultSchema[queryId] && _this.isDefaultSchema[queryId].id) {
                return _this.isDefaultSchema[queryId];
            }
            else {
                return null;
            }
        })));
    };
    /**
     * 获取方案列表
     * @param queryId 查询编号
     * @param userId 用户ID
     * @param organizationId 组织id
     */
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    SchemaManagerService.prototype.getSchemaList = /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (queryId, userId, organizationId, queryRelativeUrl) {
        /** @type {?} */
        var restUri = this.host + this.uri + 'getschemalist';
        return this.getSchemas(restUri, queryRelativeUrl, { queryId: queryId, userId: userId, organizationId: organizationId });
    };
    /**
     * 获取方案列表
     * @param queryId 查询编号
     * @param userId 用户ID
     * @param organizationId 组织id
     */
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} groupType
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    SchemaManagerService.prototype.getSchemaListByGroupType = /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} groupType
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (queryId, userId, organizationId, groupType, queryRelativeUrl) {
        /** @type {?} */
        var restUri = this.host + this.uri + 'getschemalistbygroup';
        return this.getSchemas(restUri, queryRelativeUrl, { queryId: queryId, userId: userId, organizationId: organizationId, groupType: groupType });
    };
    /**
     * @private
     * @param {?} uri
     * @param {?} queryRelativeUrl
     * @param {?} params
     * @return {?}
     */
    SchemaManagerService.prototype.getSchemas = /**
     * @private
     * @param {?} uri
     * @param {?} queryRelativeUrl
     * @param {?} params
     * @return {?}
     */
    function (uri, queryRelativeUrl, params) {
        // queryId: string, userId: string, organizationId: string, groupType: any, queryRelativeUrl: any, params: any
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var result$ = self.restService.get(uri, params, self.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            self.schemaList = {};
            if (data && data.length) {
                self.isDefaultSchema[params.queryId] = null;
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    element.schemaValue = JSON.parse(element.schemaValue);
                    if (element.isDefault === 1) {
                        self.isDefaultSchema[params.queryId] = element;
                    }
                    self.schemaList[element.id] = element;
                    self.operateDynamicColsForSchema.call(self, element, params.groupType ? params.groupType : params.queryId);
                }));
                /** @type {?} */
                var schemaExtendId = '';
                if (self.schemaRenderExtendService && self.schemaRenderExtendService.schemaInfoRenderBefore) {
                    /** @type {?} */
                    var $event = { queryId: params.queryId };
                    $event['defaultSchemaId'] = '';
                    $event['schemalList'] = self.schemaList;
                    self.schemaRenderExtendService.schemaInfoRenderBefore($event);
                    if ($event['defaultSchemaId']) {
                        schemaExtendId = $event['defaultSchemaId'];
                    }
                }
                /** @type {?} */
                var filterCondition = { schemaType: 0 };
                if (schemaExtendId) {
                    filterCondition.id = schemaExtendId;
                }
                if (schemaExtendId || !self.isDefaultSchema || !self.isDefaultSchema[params.queryId]) {
                    if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                        self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                    }
                    else {
                        filterCondition.schemaType = 1;
                        if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                            self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                        }
                        else {
                            filterCondition.schemaType = 2;
                            if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                                self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                            }
                        }
                    }
                }
                self.schemaInfo[params.queryId] = self.schemaList;
                /** @type {?} */
                var preSchema = JSON.parse(JSON.stringify(self.preSchema));
                self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema });
                return { schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema };
            }
            else {
                delete self.schemaInfo[params.queryId];
                /** @type {?} */
                var preSchema = JSON.parse(JSON.stringify(self.preSchema));
                self.isDefaultSchema[params.queryId] = null;
                self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                self.schemaInfoChange.next({ schemaList: null, isDefaultSchema: null, preSchema: preSchema });
                return { schemaList: null, isDefaultSchema: null, preSchema: preSchema };
            }
        })));
    };
    /**
     * @param {?} groupType
     * @param {?=} queryId
     * @return {?}
     */
    SchemaManagerService.prototype.mergeCustomSchema = /**
     * @param {?} groupType
     * @param {?=} queryId
     * @return {?}
     */
    function (groupType, queryId) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var preSchema = JSON.parse(JSON.stringify(self.preSchema));
        preSchema = self.operateCustomSchema(preSchema, groupType);
        self.operateDynamicColsForSchema.call(self, preSchema, groupType, 1);
        self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema && self.isDefaultSchema[queryId] ? self.isDefaultSchema[queryId] : null, preSchema: preSchema });
        return preSchema;
    };
    /**
     * @private
     * @param {?} preSchema
     * @param {?} groupType
     * @return {?}
     */
    SchemaManagerService.prototype.operateCustomSchema = /**
     * @private
     * @param {?} preSchema
     * @param {?} groupType
     * @return {?}
     */
    function (preSchema, groupType) {
        try {
            if (this.customSchema && this.customSchema[groupType]) {
                /** @type {?} */
                var schema = JSON.parse(this.customSchema[groupType]);
                preSchema.schemaValue.titleOption = Object.assign(preSchema.schemaValue.titleOption, schema.titleOption);
                preSchema.schemaValue.columnOption = Object.assign(preSchema.schemaValue.columnOption, schema.columnOption);
                preSchema.schemaValue.styleOption = Object.assign(preSchema.schemaValue.styleOption, schema.styleOption);
                preSchema.schemaValue.otherOption = Object.assign(preSchema.schemaValue.otherOption, schema.otherOption);
                return preSchema;
            }
        }
        catch (e) {
            console.log(e);
        }
    };
    /**
     * 保存方案
     * @param schema 方案实体
     */
    /**
     * 保存方案
     * @param {?} schema 方案实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    SchemaManagerService.prototype.saveSchema = /**
     * 保存方案
     * @param {?} schema 方案实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (schema, queryRelativeUrl) {
        var _this = this;
        /** @type {?} */
        var restUri = this.host + this.uri + 'saveschema';
        /** @type {?} */
        var schemaObj = JSON.parse(schema.schema);
        /** @type {?} */
        var result$ = this.restService.post(restUri, schema, {}, this.createHeaderSessionId());
        return result$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            if (schema.groupType) {
                return _this.getSchemaListByGroupType(schemaObj.queryId, '', schemaObj.orgId, schema.groupType, queryRelativeUrl);
            }
            else {
                return _this.getSchemaList(schemaObj.queryId, '', schemaObj.orgId, queryRelativeUrl);
            }
        })));
    };
    /**
     * 删除方案
     * @param id 方案ID
     * @param queryId 查询编号
     */
    /**
     * 删除方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    SchemaManagerService.prototype.deleteSchema = /**
     * 删除方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl, groupType, organizationId) {
        var _this = this;
        /** @type {?} */
        var restUri = this.host + this.uri + 'deleteschema';
        /** @type {?} */
        var result$ = this.restService.delete(restUri, { id: id }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === true) {
                _this.isDefaultSchema[queryId] = null;
                /** @type {?} */
                var result$1 = groupType ? _this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : _this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
                return result$1.pipe(map((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    return true;
                })));
            }
            else {
                return of(false);
            }
        })));
    };
    /**
     * 获取spread模版
     * @param id 方案ID
     */
    /**
     * 获取spread模版
     * @param {?} id 方案ID
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @return {?}
     */
    SchemaManagerService.prototype.analysis = /**
     * 获取spread模版
     * @param {?} id 方案ID
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @return {?}
     */
    function (id, queryId, dynamicCols, queryRelativeUrl, scheme) {
        /** @type {?} */
        var restUri = this.host + this.uri;
        /** @type {?} */
        var param = {};
        if (id !== '1') {
            if (dynamicCols && dynamicCols.length) {
                param = { id: id, dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
                return this.restService.post(restUri + 'getspreadtemplatewithdynamiccolumn', param, {}, this.createHeaderSessionId());
            }
            else {
                if (scheme) {
                    return this.restService.post(restUri + 'getspreadtemplatebyid', { id: id, schema: !scheme ? '' : scheme }, {}, this.createHeaderSessionId());
                }
                else {
                    return this.restService.get(restUri + 'getspreadtemplate', { id: id }, this.createHeaderSessionId());
                }
            }
        }
        else {
            dynamicCols = dynamicCols && dynamicCols.length ? dynamicCols : [];
            param = { dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
            return this.restService.post(restUri + 'getinitspreadtemplate', param, {}, this.createHeaderSessionId());
        }
    };
    /**
     * @param {?=} operators
     * @return {?}
     */
    SchemaManagerService.prototype.getOperation = /**
     * @param {?=} operators
     * @return {?}
     */
    function (operators) {
        /** @type {?} */
        var restUri = this.host + this.uri;
        /** @type {?} */
        var param = {};
        if (!operators || !operators.length) {
            param = {
                operators: ['05202284-dfc4-149c-853e-cfd35b4a02bb', '653fe24b-d77f-d8b0-71c5-5e3d561e33ca', 'd6832d96-e6f3-114e-1d53-f9e636548eb9', 'cd6c2057-5ad6-90dd-54ac-771c192563e8']
            };
        }
        else {
            param = {
                operators: operators
            };
        }
        return this.restService.post(restUri + 'isprincipalhasop', param, {}, this.createHeaderSessionId());
    };
    /**
     * @param {?} type
     * @return {?}
     */
    SchemaManagerService.prototype.validateOperation = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return this.operations['QdpModifyPublicSchema'] === true && (type === 0 || type === '0');
    };
    // 设置列信息
    // 设置列信息
    /**
     * @param {?} dynamicCols
     * @return {?}
     */
    SchemaManagerService.prototype.setColInfo = 
    // 设置列信息
    /**
     * @param {?} dynamicCols
     * @return {?}
     */
    function (dynamicCols) {
        /** @type {?} */
        var colInfo = [];
        if (dynamicCols && dynamicCols.length) {
            colInfo = dynamicCols;
        }
        this.colList.next(colInfo);
    };
    /**
     * @private
     * @return {?}
     */
    SchemaManagerService.prototype.createHeaderSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        return RtfServices.createHeaderSessionId(this.sessionService);
    };
    /**
     * 二开人员预制的格式方案可以显示动态列信息
     */
    /**
     * 二开人员预制的格式方案可以显示动态列信息
     * @param {?} element
     * @param {?} groupType
     * @param {?=} schemaId
     * @return {?}
     */
    SchemaManagerService.prototype.operateDynamicColsForSchema = /**
     * 二开人员预制的格式方案可以显示动态列信息
     * @param {?} element
     * @param {?} groupType
     * @param {?=} schemaId
     * @return {?}
     */
    function (element, groupType, schemaId) {
        if (this.dynamicCols && this.dynamicCols[groupType]) {
            if (element && element.id && (element.isProtected === 1 || element.isProtected === '1' || schemaId === 1)) {
                /** @type {?} */
                var dynamicColumns = schemaId === 1 ? this.dynamicCols[groupType] : this.dynamicCols[element.id];
                /** @type {?} */
                var dyCols = this.createColumns(dynamicColumns, element.schemaValue.columnOption.colList);
                element.schemaValue.columnOption.colList = dyCols;
            }
        }
    };
    /**
     * 合并动态列
     */
    /**
     * 合并动态列
     * @private
     * @param {?} colList
     * @param {?} columns
     * @return {?}
     */
    SchemaManagerService.prototype.createColumns = /**
     * 合并动态列
     * @private
     * @param {?} colList
     * @param {?} columns
     * @return {?}
     */
    function (colList, columns) {
        /** @type {?} */
        var columnList = [];
        if (columns && columns.length) {
            columnList.push.apply(columnList, tslib_1.__spread(JSON.parse(JSON.stringify(columns))));
            if (colList && colList.length > 0) {
                /** @type {?} */
                var index = 0;
                // tslint:disable-next-line:prefer-for-of
                for (var col = 0; col < colList.length; col++) {
                    /** @type {?} */
                    var c = this.getColumn(columnList, colList[col]);
                    if (c) {
                        if (this.recursiveCompareColumn(c['childList'], colList[col]['childList']) === false) {
                            c = colList[col];
                        }
                    }
                    else {
                        if (index >= columnList.length) {
                            columnList.push(colList[col]);
                        }
                        else {
                            columnList.splice(index, 0, colList[col]);
                        }
                    }
                    if (c && index === 0) {
                        index = this.dynamicColIndex + 1;
                    }
                    else {
                        index += 1;
                    }
                }
            }
        }
        else {
            if (colList && colList.length > 0) {
                columnList.push.apply(columnList, tslib_1.__spread(colList));
            }
        }
        return columnList;
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} col
     * @return {?}
     */
    SchemaManagerService.prototype.getColumn = /**
     * @private
     * @param {?} columns
     * @param {?} col
     * @return {?}
     */
    function (columns, col) {
        /** @type {?} */
        var result = null;
        this.dynamicColIndex = 0;
        // tslint:disable-next-line:prefer-for-of
        for (var item = 0; item < columns.length; item++) {
            result = this.recursiveGetColumn(col, columns[item], null);
            if (result != null) {
                return result;
            }
        }
        return result;
    };
    /**
     * @private
     * @param {?} col
     * @param {?} parentColumn
     * @param {?} childList
     * @return {?}
     */
    SchemaManagerService.prototype.recursiveGetColumn = /**
     * @private
     * @param {?} col
     * @param {?} parentColumn
     * @param {?} childList
     * @return {?}
     */
    function (col, parentColumn, childList) {
        if (parentColumn) {
            if (parentColumn['bindField'] === col['bindField']) {
                return parentColumn;
            }
            if (parentColumn['childList'] && parentColumn['childList'].length > 0) {
                return this.recursiveGetColumn(col, null, parentColumn['childList']);
            }
            else {
                this.dynamicColIndex += 1;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (var item = 0; item < childList.length; item++) {
                if (childList[item]['bindField'] === col['bindField']) {
                    return childList[item];
                }
                if (childList[item]['childList'] && childList[item]['childList'].length > 0) {
                    return this.recursiveGetColumn(col, null, childList[item]['childList']);
                }
                else {
                    this.dynamicColIndex += 1;
                }
            }
        }
        return null;
    };
    /**
     * @private
     * @param {?} firstChildList
     * @param {?} secondChildList
     * @return {?}
     */
    SchemaManagerService.prototype.recursiveCompareColumn = /**
     * @private
     * @param {?} firstChildList
     * @param {?} secondChildList
     * @return {?}
     */
    function (firstChildList, secondChildList) {
        if (!firstChildList && !secondChildList) {
            return true;
        }
        else if (!firstChildList && secondChildList) {
            return false;
        }
        else if (firstChildList && !secondChildList) {
            return false;
        }
        else if (firstChildList && secondChildList) {
            if (firstChildList.length !== secondChildList.length) {
                return false;
            }
            else {
                if (firstChildList.length === 0 && secondChildList.length === 0) {
                    return true;
                }
                else if (firstChildList.length === 0) {
                    return false;
                }
                else {
                    for (var i = 0; i < firstChildList.length; i++) {
                        if (firstChildList[i].bindField !== secondChildList[i].bindField) {
                            return false;
                        }
                        return this.recursiveCompareColumn(firstChildList[i].childList, secondChildList[i].childList);
                    }
                    return false;
                }
            }
        }
        return false;
    };
    SchemaManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SchemaManagerService.ctorParameters = function () { return [
        { type: RestfulService },
        { type: SessionService },
        { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] },
        { type: SchemaRenderExtendService, decorators: [{ type: Optional }] }
    ]; };
    return SchemaManagerService;
}());
export { SchemaManagerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.uri;
    /** @type {?} */
    SchemaManagerService.prototype.schemaInfoChange;
    /** @type {?} */
    SchemaManagerService.prototype.colList;
    /** @type {?} */
    SchemaManagerService.prototype.controlType;
    /** @type {?} */
    SchemaManagerService.prototype.schemaInfo;
    /** @type {?} */
    SchemaManagerService.prototype.schemaid;
    /** @type {?} */
    SchemaManagerService.prototype.operationChange;
    /** @type {?} */
    SchemaManagerService.prototype.dynamicCols;
    /** @type {?} */
    SchemaManagerService.prototype.customSchema;
    /** @type {?} */
    SchemaManagerService.prototype.dynamicColIndex;
    /** @type {?} */
    SchemaManagerService.prototype.preSchema;
    /** @type {?} */
    SchemaManagerService.prototype.isDefaultSchema;
    /** @type {?} */
    SchemaManagerService.prototype.schemaList;
    /** @type {?} */
    SchemaManagerService.prototype.operations;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.host;
    /**
     * @type {?}
     * @private
     */
    SchemaManagerService.prototype.schemaRenderExtendService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLW1hbmFnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BxZHAvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2Uvc2NoZW1hLW1hbmFnZXIvc2NoZW1hLW1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFjLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUV6RDtJQXFHRSw4QkFBb0IsV0FBMkIsRUFBVSxjQUE4QixFQUErQixJQUFZLEVBQXNCLHlCQUFvRDtRQUF4TCxnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFBK0IsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFzQiw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBbkdwTSxRQUFHLEdBQUcseUNBQXlDLENBQUM7UUFDeEQscUJBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUN0QyxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUM3QixnQkFBVyxHQUFHLElBQUksT0FB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QUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQXhmRixVQUFVOzs7O2dCQUxGLGNBQWM7Z0JBRGQsY0FBYzs2Q0EyR3FFLE1BQU0sU0FBQyxXQUFXO2dCQXhHckcseUJBQXlCLHVCQXdHcUcsUUFBUTs7SUFvWi9JLDJCQUFDO0NBQUEsQUF6ZkQsSUF5ZkM7U0F4Zlksb0JBQW9COzs7Ozs7SUFDL0IsbUNBQXdEOztJQUN4RCxnREFBc0M7O0lBQ3RDLHVDQUE2Qjs7SUFDN0IsMkNBQW9DOztJQUNwQywwQ0FBcUI7O0lBQ3JCLHdDQUF3Qzs7SUFDeEMsK0NBQXFDOztJQUNyQywyQ0FBc0I7O0lBQ3RCLDRDQUF1Qjs7SUFDdkIsK0NBQW9COztJQUVwQix5Q0FnRkU7O0lBRUYsK0NBQTBCOztJQUUxQiwwQ0FBZ0I7O0lBRWhCLDBDQUFnQjs7Ozs7SUFFSiwyQ0FBbUM7Ozs7O0lBQUUsOENBQXNDOzs7OztJQUFFLG9DQUF5Qzs7Ozs7SUFBRSx5REFBd0UiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IFJlc3RmdWxTZXJ2aWNlIH0gZnJvbSAnLi4vcmVzdGZ1bC1zZXJ2aWNlL3Jlc3RmdWwuc2VydmljZSc7XHJcbmltcG9ydCB7IFNlcnZlcl9Ib3N0IH0gZnJvbSAnLi4vLi4vZW50aXR0aWVzL3NlcnZlci5ob3N0JztcclxuaW1wb3J0IHsgU2NoZW1hUmVuZGVyRXh0ZW5kU2VydmljZSB9IGZyb20gJy4uL2V4dGVuZC1zZXJ2aWNlL3NjaGVtYS1yZW5kZXJleHRlbmQuc2VydmljZSc7XHJcbmltcG9ydCB7IFJ0ZlNlcnZpY2VzIH0gZnJvbSAnLi4vcnRmc2VydmljZXMvcnRmc2VydmljZXMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2NoZW1hTWFuYWdlclNlcnZpY2Uge1xyXG4gIHByaXZhdGUgdXJpID0gJy9hcGkvcnVudGltZS9iY2MvdjEuMC9xZHBzY2hlbWFtYW5hZ2VyLyc7XHJcbiAgc2NoZW1hSW5mb0NoYW5nZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBjb2xMaXN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIGNvbnRyb2xUeXBlID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xyXG4gIHNjaGVtYUluZm86IGFueSA9IHt9O1xyXG4gIHNjaGVtYWlkOiBhbnkgPSB7fSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBvcGVyYXRpb25DaGFuZ2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgZHluYW1pY0NvbHM6IGFueSA9IHt9O1xyXG4gIGN1c3RvbVNjaGVtYTogYW55ID0ge307XHJcbiAgZHluYW1pY0NvbEluZGV4ID0gMDtcclxuXHJcbiAgcHJlU2NoZW1hID0ge1xyXG4gICAgaWQ6ICdwcmVmYWInLFxyXG4gICAgc2NoZW1hTmFtZTogJ+ezu+e7n+mihOWIticsXHJcbiAgICBpc1ByZWZhYjogMSxcclxuICAgIGlzRGVmYXVsdDogMCxcclxuICAgIGlzUHJvdGVjdGVkOiAnMCcsXHJcbiAgICBzY2hlbWFWYWx1ZToge1xyXG4gICAgICB0aXRsZU9wdGlvbjoge1xyXG4gICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICBzdWJUaXRsZXM6IFtdXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbHVtbk9wdGlvbjoge1xyXG4gICAgICAgIG1heExldmVsOiAwLFxyXG4gICAgICAgIGNvbExpc3Q6IFtdXHJcbiAgICAgIH0sXHJcbiAgICAgIHN0eWxlT3B0aW9uOiB7XHJcbiAgICAgICAgVGl0bGU6IHtcclxuICAgICAgICAgIGZvbnRGYW1pbHk6IDksXHJcbiAgICAgICAgICBzaXplOiAxNCxcclxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDAsXHJcbiAgICAgICAgICBmb250U3R5bGU6IDAsXHJcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogMCxcclxuICAgICAgICAgIGZvbnRDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICAgIHJvd0hlaWdodDogMzVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFN1YlRpdGxlOiB7XHJcbiAgICAgICAgICBmb250RmFtaWx5OiA5LFxyXG4gICAgICAgICAgc2l6ZTogMTQsXHJcbiAgICAgICAgICBmb250V2VpZ2h0OiAwLFxyXG4gICAgICAgICAgZm9udFN0eWxlOiAwLFxyXG4gICAgICAgICAgdGV4dERlY29yYXRpb246IDAsXHJcbiAgICAgICAgICBmb250Q29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgICByb3dIZWlnaHQ6IDM1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBIZWFkZXI6IHtcclxuICAgICAgICAgIGZvbnRGYW1pbHk6IDksXHJcbiAgICAgICAgICBzaXplOiAxNCxcclxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDAsXHJcbiAgICAgICAgICBmb250U3R5bGU6IDAsXHJcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogMCxcclxuICAgICAgICAgIGZvbnRDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICAgIHJvd0hlaWdodDogMzVcclxuICAgICAgICB9LFxyXG4gICAgICAgIERhdGFBcmVhOiB7XHJcbiAgICAgICAgICBmb250RmFtaWx5OiA5LFxyXG4gICAgICAgICAgc2l6ZTogMTQsXHJcbiAgICAgICAgICBmb250V2VpZ2h0OiAwLFxyXG4gICAgICAgICAgZm9udFN0eWxlOiAwLFxyXG4gICAgICAgICAgdGV4dERlY29yYXRpb246IDAsXHJcbiAgICAgICAgICBmb250Q29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgICByb3dIZWlnaHQ6IDM1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBGb290ZXI6IHtcclxuICAgICAgICAgIGZvbnRGYW1pbHk6IDksXHJcbiAgICAgICAgICBzaXplOiAxNCxcclxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDAsXHJcbiAgICAgICAgICBmb250U3R5bGU6IDAsXHJcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogMCxcclxuICAgICAgICAgIGZvbnRDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICAgIHJvd0hlaWdodDogMzVcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIG90aGVyT3B0aW9uOiB7XHJcbiAgICAgICAgc2hvd0ZpbHRlclJvdzogdHJ1ZSxcclxuICAgICAgICBkYXRhQ2FoY2U6IHRydWUsXHJcbiAgICAgICAgbGV2ZWw6ICcnLFxyXG4gICAgICAgIGlzRGV0YWlsczogJycsXHJcbiAgICAgICAgbG9hZERhdGFUeXBlOiAxLFxyXG4gICAgICAgIHBhZ2VTaXplOiAyMCxcclxuICAgICAgICB0cmVlSW5mb1R5cGU6IDIsXHJcbiAgICAgICAgcGF0aEZpZWxkOiAnJyxcclxuICAgICAgICBwYXRoU3RlcDogMCxcclxuICAgICAgICBpZEZpZWxkOiAnJyxcclxuICAgICAgICBwYXJlbnRGaWVsZDogJycsXHJcbiAgICAgICAgZmlyc3RMb2FkOiB0cnVlLFxyXG4gICAgICAgIHNob3daZXJvOiB0cnVlLFxyXG4gICAgICAgIGV4cGFuZDogdHJ1ZSxcclxuICAgICAgICBzaG93SGVhZGVyU29ydDogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaXNEZWZhdWx0U2NoZW1hOiBhbnkgPSBbXTtcclxuXHJcbiAgc2NoZW1hTGlzdDogYW55O1xyXG5cclxuICBvcGVyYXRpb25zID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzdFNlcnZpY2U6IFJlc3RmdWxTZXJ2aWNlLCBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSwgQEluamVjdChTZXJ2ZXJfSG9zdCkgcHJpdmF0ZSBob3N0OiBzdHJpbmcsIEBPcHRpb25hbCgpIHByaXZhdGUgc2NoZW1hUmVuZGVyRXh0ZW5kU2VydmljZTogU2NoZW1hUmVuZGVyRXh0ZW5kU2VydmljZSkge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICB0aGlzLmdldE9wZXJhdGlvbigpLnN1YnNjcmliZSgodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICBzZWxmLm9wZXJhdGlvbnNbJ1FkcFF1ZXJ5RXhwb3J0J10gPSB2YWx1ZVsnMDUyMDIyODQtZGZjNC0xNDljLTg1M2UtY2ZkMzViNGEwMmJiJ107XHJcbiAgICAgICAgc2VsZi5vcGVyYXRpb25zWydRZHBRdWVyeVByaW50J10gPSB2YWx1ZVsnNjUzZmUyNGItZDc3Zi1kOGIwLTcxYzUtNWUzZDU2MWUzM2NhJ107XHJcbiAgICAgICAgc2VsZi5vcGVyYXRpb25zWydRZHBNb2RpZnlQdWJsaWNTY2hlbWEnXSA9IHZhbHVlWydkNjgzMmQ5Ni1lNmYzLTExNGUtMWQ1My1mOWU2MzY1NDhlYjknXTtcclxuICAgICAgICBzZWxmLm9wZXJhdGlvbnNbJ1FkcFB1YlF1ZXJ5J10gPSB2YWx1ZVsnY2Q2YzIwNTctNWFkNi05MGRkLTU0YWMtNzcxYzE5MjU2M2U4J107XHJcbiAgICAgICAgc2VsZi5vcGVyYXRpb25DaGFuZ2UubmV4dChzZWxmLm9wZXJhdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3ByZWFkVGVtcGxhdGUoaWQ6IHN0cmluZywgcXVlcnlJZDogc3RyaW5nLCBkeW5hbWljQ29sczogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnksIHNjaGVtZT86IGFueSwgZnJvemVuQ29scz86IGFueSwgZ3JvdXBUeXBlPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmIChkeW5hbWljQ29scyAmJiBkeW5hbWljQ29scy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5keW5hbWljQ29sc1tncm91cFR5cGUgPyBncm91cFR5cGUgOiBxdWVyeUlkXSA9IGR5bmFtaWNDb2xzO1xyXG4gICAgICB0aGlzLmR5bmFtaWNDb2xzW2lkXSA9IGR5bmFtaWNDb2xzO1xyXG4gICAgfVxyXG4gICAgbGV0IHNjaGVtYTtcclxuICAgIGlmICh0aGlzLnNjaGVtYUxpc3QgJiYgdGhpcy5zY2hlbWFMaXN0W2lkXSkge1xyXG4gICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYUxpc3RbaWRdO1xyXG4gICAgfVxyXG4gICAgbGV0IGNvbEluZm86IGFueSA9IFtdO1xyXG4gICAgLy8g5paw54mI5pys5YiX5L+h5oGv6YCa6L+HZnJvemVuQ29sc+iOt+WPllxyXG4gICAgaWYgKHRoaXMuZHluYW1pY0NvbHNbZ3JvdXBUeXBlID8gZ3JvdXBUeXBlIDogcXVlcnlJZF0pIHtcclxuICAgICAgY29sSW5mbyA9IE9iamVjdC5hc3NpZ24oZnJvemVuQ29scywgdGhpcy5keW5hbWljQ29sc1tncm91cFR5cGUgPyBncm91cFR5cGUgOiBxdWVyeUlkXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb2xJbmZvID0gZnJvemVuQ29scztcclxuICAgIH1cclxuICAgIHRoaXMuY29sTGlzdC5uZXh0KGNvbEluZm8pO1xyXG4gICAgcmV0dXJuIHRoaXMuYW5hbHlzaXMoKHNjaGVtYSAmJiBzY2hlbWEuaWQgPyBzY2hlbWEuaWQgOiAnMScpLCBxdWVyeUlkLCBkeW5hbWljQ29scywgcXVlcnlSZWxhdGl2ZVVybCwgc2NoZW1lKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5oyH5a6a5pa55qGIXHJcbiAgICogQHBhcmFtIGlkIOaWueahiElEXHJcbiAgICogQHBhcmFtIHF1ZXJ5SWQg5p+l6K+i57yW5Y+3XHJcbiAgICovXHJcbiAgZ2V0U2NoZW1hKGlkOiBzdHJpbmcsIHF1ZXJ5SWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55LCBncm91cFR5cGU/OiBhbnksIG9yZ2FuaXphdGlvbklkPzogYW55LCBmcm9tQ2FjaGU/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICBpZiAodGhpcy5zY2hlbWFMaXN0ICYmIHRoaXMuc2NoZW1hTGlzdFtpZF0gJiYgZnJvbUNhY2hlICYmIGZyb21DYWNoZSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gb2YodGhpcy5zY2hlbWFMaXN0W2lkXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCByZXN1bHQkID0gZ3JvdXBUeXBlID8gdGhpcy5nZXRTY2hlbWFMaXN0QnlHcm91cFR5cGUocXVlcnlJZCwgJycsIG9yZ2FuaXphdGlvbklkLCBncm91cFR5cGUsIHF1ZXJ5UmVsYXRpdmVVcmwpIDogdGhpcy5nZXRTY2hlbWFMaXN0KHF1ZXJ5SWQsICcnLCBvcmdhbml6YXRpb25JZCwgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgICAgIHJldHVybiByZXN1bHQkLnBpcGUoXHJcbiAgICAgICAgbWFwKHZhbHVlID0+IHtcclxuICAgICAgICAgIGlmIChpZCA9PT0gJzEnIHx8IGlkID09PSAncHJlZmFiJykge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc2VsZi5wcmVTY2hlbWEsIHsgaWQ6ICcxJyB9KTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgdmFsdWVbJ3NjaGVtYUxpc3QnXSAmJiB2YWx1ZVsnc2NoZW1hTGlzdCddW3F1ZXJ5SWRdKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZVsnc2NoZW1hTGlzdCddW3F1ZXJ5SWRdW2lkXSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZVsnc2NoZW1hTGlzdCddW3F1ZXJ5SWRdW2lkXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBsZXQgZGVmYXVsdFNjaGVtYUlkID0gJyc7XHJcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmlzRGVmYXVsdFNjaGVtYSAmJiB2YWx1ZS5pc0RlZmF1bHRTY2hlbWEuaWQgJiYgdmFsdWVbJ3NjaGVtYUxpc3QnXVtxdWVyeUlkXVt2YWx1ZS5pc0RlZmF1bHRTY2hlbWEuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2NoZW1hSWQgPSB2YWx1ZS5pc0RlZmF1bHRTY2hlbWEuaWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbJ3NjaGVtYUxpc3QnXVtxdWVyeUlkXVtkZWZhdWx0U2NoZW1hSWRdO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlum7mOiupOaWueahiFxyXG4gICAqL1xyXG4gIGdldERlZmF1bHRTY2hlbWEocXVlcnlJZDogc3RyaW5nLCBxdWVyeVJlbGF0aXZlVXJsOiBhbnksIGdyb3VwVHlwZT86IGFueSwgb3JnYW5pemF0aW9uSWQ/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IGdyb3VwVHlwZSA/IHRoaXMuZ2V0U2NoZW1hTGlzdEJ5R3JvdXBUeXBlKHF1ZXJ5SWQsICcnLCBvcmdhbml6YXRpb25JZCwgZ3JvdXBUeXBlLCBxdWVyeVJlbGF0aXZlVXJsKSA6IHRoaXMuZ2V0U2NoZW1hTGlzdChxdWVyeUlkLCAnJywgb3JnYW5pemF0aW9uSWQsIHF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gICAgcmV0dXJuIHJlc3VsdCQucGlwZShcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlZmF1bHRTY2hlbWFbcXVlcnlJZF0gJiYgdGhpcy5pc0RlZmF1bHRTY2hlbWFbcXVlcnlJZF0uaWQpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmlzRGVmYXVsdFNjaGVtYVtxdWVyeUlkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5pa55qGI5YiX6KGoXHJcbiAgICogQHBhcmFtIHF1ZXJ5SWQg5p+l6K+i57yW5Y+3XHJcbiAgICogQHBhcmFtIHVzZXJJZCDnlKjmiLdJRFxyXG4gICAqIEBwYXJhbSBvcmdhbml6YXRpb25JZCDnu4Tnu4dpZFxyXG4gICAqL1xyXG4gIGdldFNjaGVtYUxpc3QocXVlcnlJZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZywgb3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJlc3RVcmkgPSB0aGlzLmhvc3QgKyB0aGlzLnVyaSArICdnZXRzY2hlbWFsaXN0JztcclxuICAgIHJldHVybiB0aGlzLmdldFNjaGVtYXMocmVzdFVyaSwgcXVlcnlSZWxhdGl2ZVVybCwgeyBxdWVyeUlkLCB1c2VySWQsIG9yZ2FuaXphdGlvbklkIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5pa55qGI5YiX6KGoXHJcbiAgICogQHBhcmFtIHF1ZXJ5SWQg5p+l6K+i57yW5Y+3XHJcbiAgICogQHBhcmFtIHVzZXJJZCDnlKjmiLdJRFxyXG4gICAqIEBwYXJhbSBvcmdhbml6YXRpb25JZCDnu4Tnu4dpZFxyXG4gICAqL1xyXG4gIGdldFNjaGVtYUxpc3RCeUdyb3VwVHlwZShxdWVyeUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCBvcmdhbml6YXRpb25JZDogc3RyaW5nLCBncm91cFR5cGU6IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJlc3RVcmkgPSB0aGlzLmhvc3QgKyB0aGlzLnVyaSArICdnZXRzY2hlbWFsaXN0Ynlncm91cCc7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRTY2hlbWFzKHJlc3RVcmksIHF1ZXJ5UmVsYXRpdmVVcmwsIHsgcXVlcnlJZCwgdXNlcklkLCBvcmdhbml6YXRpb25JZCwgZ3JvdXBUeXBlIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRTY2hlbWFzKHVyaTogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnksIHBhcmFtczogYW55KSB7IC8vIHF1ZXJ5SWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcsIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGdyb3VwVHlwZTogYW55LCBxdWVyeVJlbGF0aXZlVXJsOiBhbnksIHBhcmFtczogYW55XHJcbiAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZWxmLnJlc3RTZXJ2aWNlLmdldCh1cmksIHBhcmFtcywgc2VsZi5jcmVhdGVIZWFkZXJTZXNzaW9uSWQoKSk7XHJcbiAgICByZXR1cm4gcmVzdWx0JC5waXBlKFxyXG4gICAgICBtYXAoKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgIHNlbGYuc2NoZW1hTGlzdCA9IHt9O1xyXG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICBzZWxmLmlzRGVmYXVsdFNjaGVtYVtwYXJhbXMucXVlcnlJZF0gPSBudWxsO1xyXG4gICAgICAgICAgZGF0YS5mb3JFYWNoKChlbGVtZW50OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5zY2hlbWFWYWx1ZSA9IEpTT04ucGFyc2UoZWxlbWVudC5zY2hlbWFWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmlzRGVmYXVsdCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIHNlbGYuaXNEZWZhdWx0U2NoZW1hW3BhcmFtcy5xdWVyeUlkXSA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5zY2hlbWFMaXN0W2VsZW1lbnQuaWRdID0gZWxlbWVudDtcclxuICAgICAgICAgICAgc2VsZi5vcGVyYXRlRHluYW1pY0NvbHNGb3JTY2hlbWEuY2FsbChzZWxmLCBlbGVtZW50LCBwYXJhbXMuZ3JvdXBUeXBlID8gcGFyYW1zLmdyb3VwVHlwZSA6IHBhcmFtcy5xdWVyeUlkKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgbGV0IHNjaGVtYUV4dGVuZElkID0gJyc7XHJcbiAgICAgICAgICBpZiAoc2VsZi5zY2hlbWFSZW5kZXJFeHRlbmRTZXJ2aWNlICYmIHNlbGYuc2NoZW1hUmVuZGVyRXh0ZW5kU2VydmljZS5zY2hlbWFJbmZvUmVuZGVyQmVmb3JlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0ICRldmVudDogYW55ID0geyBxdWVyeUlkOiBwYXJhbXMucXVlcnlJZCB9O1xyXG4gICAgICAgICAgICAkZXZlbnRbJ2RlZmF1bHRTY2hlbWFJZCddID0gJyc7XHJcbiAgICAgICAgICAgICRldmVudFsnc2NoZW1hbExpc3QnXSA9IHNlbGYuc2NoZW1hTGlzdDtcclxuICAgICAgICAgICAgc2VsZi5zY2hlbWFSZW5kZXJFeHRlbmRTZXJ2aWNlLnNjaGVtYUluZm9SZW5kZXJCZWZvcmUoJGV2ZW50KTtcclxuICAgICAgICAgICAgaWYgKCRldmVudFsnZGVmYXVsdFNjaGVtYUlkJ10pIHtcclxuICAgICAgICAgICAgICBzY2hlbWFFeHRlbmRJZCA9ICRldmVudFsnZGVmYXVsdFNjaGVtYUlkJ107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGZpbHRlckNvbmRpdGlvbjogYW55ID0geyBzY2hlbWFUeXBlOiAwIH07XHJcbiAgICAgICAgICBpZiAoc2NoZW1hRXh0ZW5kSWQpIHtcclxuICAgICAgICAgICAgZmlsdGVyQ29uZGl0aW9uLmlkID0gc2NoZW1hRXh0ZW5kSWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc2NoZW1hRXh0ZW5kSWQgfHwgIXNlbGYuaXNEZWZhdWx0U2NoZW1hIHx8ICFzZWxmLmlzRGVmYXVsdFNjaGVtYVtwYXJhbXMucXVlcnlJZF0pIHtcclxuICAgICAgICAgICAgaWYgKGZpbHRlcihkYXRhLCBmaWx0ZXJDb25kaXRpb24pICYmIGZpbHRlcihkYXRhLCBmaWx0ZXJDb25kaXRpb24pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgIHNlbGYuaXNEZWZhdWx0U2NoZW1hW3BhcmFtcy5xdWVyeUlkXSA9IGZpbHRlcihkYXRhLCBmaWx0ZXJDb25kaXRpb24pWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGZpbHRlckNvbmRpdGlvbi5zY2hlbWFUeXBlID0gMTtcclxuICAgICAgICAgICAgICBpZiAoZmlsdGVyKGRhdGEsIGZpbHRlckNvbmRpdGlvbikgJiYgZmlsdGVyKGRhdGEsIGZpbHRlckNvbmRpdGlvbikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzRGVmYXVsdFNjaGVtYVtwYXJhbXMucXVlcnlJZF0gPSBmaWx0ZXIoZGF0YSwgZmlsdGVyQ29uZGl0aW9uKVswXTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyQ29uZGl0aW9uLnNjaGVtYVR5cGUgPSAyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcihkYXRhLCBmaWx0ZXJDb25kaXRpb24pICYmIGZpbHRlcihkYXRhLCBmaWx0ZXJDb25kaXRpb24pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICBzZWxmLmlzRGVmYXVsdFNjaGVtYVtwYXJhbXMucXVlcnlJZF0gPSBmaWx0ZXIoZGF0YSwgZmlsdGVyQ29uZGl0aW9uKVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHNlbGYuc2NoZW1hSW5mb1twYXJhbXMucXVlcnlJZF0gPSBzZWxmLnNjaGVtYUxpc3Q7XHJcbiAgICAgICAgICBjb25zdCBwcmVTY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlbGYucHJlU2NoZW1hKSk7XHJcbiAgICAgICAgICBzZWxmLm9wZXJhdGVDdXN0b21TY2hlbWEocHJlU2NoZW1hLCBwYXJhbXMuZ3JvdXBUeXBlID8gcGFyYW1zLmdyb3VwVHlwZSA6IHBhcmFtcy5xdWVyeUlkKTtcclxuICAgICAgICAgIHNlbGYub3BlcmF0ZUR5bmFtaWNDb2xzRm9yU2NoZW1hLmNhbGwoc2VsZiwgcHJlU2NoZW1hLCBwYXJhbXMuZ3JvdXBUeXBlID8gcGFyYW1zLmdyb3VwVHlwZSA6IHBhcmFtcy5xdWVyeUlkLCAxKTtcclxuICAgICAgICAgIHNlbGYuc2NoZW1hSW5mb0NoYW5nZS5uZXh0KHsgc2NoZW1hTGlzdDogc2VsZi5zY2hlbWFJbmZvLCBpc0RlZmF1bHRTY2hlbWE6IHNlbGYuaXNEZWZhdWx0U2NoZW1hW3BhcmFtcy5xdWVyeUlkXSwgcHJlU2NoZW1hOiBwcmVTY2hlbWEgfSk7XHJcbiAgICAgICAgICByZXR1cm4geyBzY2hlbWFMaXN0OiBzZWxmLnNjaGVtYUluZm8sIGlzRGVmYXVsdFNjaGVtYTogc2VsZi5pc0RlZmF1bHRTY2hlbWFbcGFyYW1zLnF1ZXJ5SWRdLCBwcmVTY2hlbWE6IHByZVNjaGVtYSB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBkZWxldGUgc2VsZi5zY2hlbWFJbmZvW3BhcmFtcy5xdWVyeUlkXTtcclxuICAgICAgICAgIGNvbnN0IHByZVNjaGVtYSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VsZi5wcmVTY2hlbWEpKTtcclxuICAgICAgICAgIHNlbGYuaXNEZWZhdWx0U2NoZW1hW3BhcmFtcy5xdWVyeUlkXSA9IG51bGw7XHJcbiAgICAgICAgICBzZWxmLm9wZXJhdGVDdXN0b21TY2hlbWEocHJlU2NoZW1hLCBwYXJhbXMuZ3JvdXBUeXBlID8gcGFyYW1zLmdyb3VwVHlwZSA6IHBhcmFtcy5xdWVyeUlkKTtcclxuICAgICAgICAgIHNlbGYub3BlcmF0ZUR5bmFtaWNDb2xzRm9yU2NoZW1hLmNhbGwoc2VsZiwgcHJlU2NoZW1hLCBwYXJhbXMuZ3JvdXBUeXBlID8gcGFyYW1zLmdyb3VwVHlwZSA6IHBhcmFtcy5xdWVyeUlkLCAxKTtcclxuICAgICAgICAgIHNlbGYuc2NoZW1hSW5mb0NoYW5nZS5uZXh0KHsgc2NoZW1hTGlzdDogbnVsbCwgaXNEZWZhdWx0U2NoZW1hOiBudWxsLCBwcmVTY2hlbWE6IHByZVNjaGVtYSB9KTtcclxuICAgICAgICAgIHJldHVybiB7IHNjaGVtYUxpc3Q6IG51bGwsIGlzRGVmYXVsdFNjaGVtYTogbnVsbCwgcHJlU2NoZW1hOiBwcmVTY2hlbWEgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG1lcmdlQ3VzdG9tU2NoZW1hKGdyb3VwVHlwZTogYW55LCBxdWVyeUlkPzogYW55KSB7XHJcbiAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgIGxldCBwcmVTY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlbGYucHJlU2NoZW1hKSk7XHJcbiAgICBwcmVTY2hlbWEgPSBzZWxmLm9wZXJhdGVDdXN0b21TY2hlbWEocHJlU2NoZW1hLCBncm91cFR5cGUpO1xyXG4gICAgc2VsZi5vcGVyYXRlRHluYW1pY0NvbHNGb3JTY2hlbWEuY2FsbChzZWxmLCBwcmVTY2hlbWEsIGdyb3VwVHlwZSwgMSk7XHJcbiAgICBzZWxmLnNjaGVtYUluZm9DaGFuZ2UubmV4dCh7IHNjaGVtYUxpc3Q6IHNlbGYuc2NoZW1hSW5mbywgaXNEZWZhdWx0U2NoZW1hOiBzZWxmLmlzRGVmYXVsdFNjaGVtYSAmJiBzZWxmLmlzRGVmYXVsdFNjaGVtYVtxdWVyeUlkXSA/IHNlbGYuaXNEZWZhdWx0U2NoZW1hW3F1ZXJ5SWRdIDogbnVsbCwgcHJlU2NoZW1hOiBwcmVTY2hlbWEgfSk7XHJcbiAgICByZXR1cm4gcHJlU2NoZW1hO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvcGVyYXRlQ3VzdG9tU2NoZW1hKHByZVNjaGVtYTogYW55LCBncm91cFR5cGU6IGFueSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHRoaXMuY3VzdG9tU2NoZW1hICYmIHRoaXMuY3VzdG9tU2NoZW1hW2dyb3VwVHlwZV0pIHtcclxuICAgICAgICBjb25zdCBzY2hlbWEgPSBKU09OLnBhcnNlKHRoaXMuY3VzdG9tU2NoZW1hW2dyb3VwVHlwZV0pO1xyXG4gICAgICAgIHByZVNjaGVtYS5zY2hlbWFWYWx1ZS50aXRsZU9wdGlvbiA9IE9iamVjdC5hc3NpZ24ocHJlU2NoZW1hLnNjaGVtYVZhbHVlLnRpdGxlT3B0aW9uLCBzY2hlbWEudGl0bGVPcHRpb24pO1xyXG4gICAgICAgIHByZVNjaGVtYS5zY2hlbWFWYWx1ZS5jb2x1bW5PcHRpb24gPSBPYmplY3QuYXNzaWduKHByZVNjaGVtYS5zY2hlbWFWYWx1ZS5jb2x1bW5PcHRpb24sIHNjaGVtYS5jb2x1bW5PcHRpb24pO1xyXG4gICAgICAgIHByZVNjaGVtYS5zY2hlbWFWYWx1ZS5zdHlsZU9wdGlvbiA9IE9iamVjdC5hc3NpZ24ocHJlU2NoZW1hLnNjaGVtYVZhbHVlLnN0eWxlT3B0aW9uLCBzY2hlbWEuc3R5bGVPcHRpb24pO1xyXG4gICAgICAgIHByZVNjaGVtYS5zY2hlbWFWYWx1ZS5vdGhlck9wdGlvbiA9IE9iamVjdC5hc3NpZ24ocHJlU2NoZW1hLnNjaGVtYVZhbHVlLm90aGVyT3B0aW9uLCBzY2hlbWEub3RoZXJPcHRpb24pO1xyXG4gICAgICAgIHJldHVybiBwcmVTY2hlbWE7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS/neWtmOaWueahiFxyXG4gICAqIEBwYXJhbSBzY2hlbWEg5pa55qGI5a6e5L2TXHJcbiAgICovXHJcbiAgc2F2ZVNjaGVtYShzY2hlbWE6IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJlc3RVcmkgPSB0aGlzLmhvc3QgKyB0aGlzLnVyaSArICdzYXZlc2NoZW1hJztcclxuICAgIGNvbnN0IHNjaGVtYU9iaiA9IEpTT04ucGFyc2Uoc2NoZW1hLnNjaGVtYSk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gdGhpcy5yZXN0U2VydmljZS5wb3N0KHJlc3RVcmksIHNjaGVtYSwge30sIHRoaXMuY3JlYXRlSGVhZGVyU2Vzc2lvbklkKCkpO1xyXG4gICAgcmV0dXJuIHJlc3VsdCQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICBpZiAoc2NoZW1hLmdyb3VwVHlwZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NoZW1hTGlzdEJ5R3JvdXBUeXBlKHNjaGVtYU9iai5xdWVyeUlkLCAnJywgc2NoZW1hT2JqLm9yZ0lkLCBzY2hlbWEuZ3JvdXBUeXBlLCBxdWVyeVJlbGF0aXZlVXJsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NoZW1hTGlzdChzY2hlbWFPYmoucXVlcnlJZCwgJycsIHNjaGVtYU9iai5vcmdJZCwgcXVlcnlSZWxhdGl2ZVVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Yig6Zmk5pa55qGIXHJcbiAgICogQHBhcmFtIGlkIOaWueahiElEXHJcbiAgICogQHBhcmFtIHF1ZXJ5SWQg5p+l6K+i57yW5Y+3XHJcbiAgICovXHJcbiAgZGVsZXRlU2NoZW1hKGlkOiBzdHJpbmcsIHF1ZXJ5SWQ6IHN0cmluZywgcXVlcnlSZWxhdGl2ZVVybDogYW55LCBncm91cFR5cGU/OiBhbnksIG9yZ2FuaXphdGlvbklkPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJlc3RVcmkgPSB0aGlzLmhvc3QgKyB0aGlzLnVyaSArICdkZWxldGVzY2hlbWEnO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHRoaXMucmVzdFNlcnZpY2UuZGVsZXRlKHJlc3RVcmksIHsgaWQgfSwgdGhpcy5jcmVhdGVIZWFkZXJTZXNzaW9uSWQoKSk7XHJcbiAgICByZXR1cm4gcmVzdWx0JC5waXBlKFxyXG4gICAgICBtYXAoKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSB7XHJcbiAgICAgICAgICB0aGlzLmlzRGVmYXVsdFNjaGVtYVtxdWVyeUlkXSA9IG51bGw7XHJcbiAgICAgICAgICBjb25zdCByZXN1bHQkMSA9IGdyb3VwVHlwZSA/IHRoaXMuZ2V0U2NoZW1hTGlzdEJ5R3JvdXBUeXBlKHF1ZXJ5SWQsICcnLCBvcmdhbml6YXRpb25JZCwgZ3JvdXBUeXBlLCBxdWVyeVJlbGF0aXZlVXJsKSA6IHRoaXMuZ2V0U2NoZW1hTGlzdChxdWVyeUlkLCAnJywgb3JnYW5pemF0aW9uSWQsIHF1ZXJ5UmVsYXRpdmVVcmwpO1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCQxLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlnNwcmVhZOaooeeJiFxyXG4gICAqIEBwYXJhbSBpZCDmlrnmoYhJRFxyXG4gICAqL1xyXG4gIGFuYWx5c2lzKGlkOiBzdHJpbmcsIHF1ZXJ5SWQ6IHN0cmluZywgZHluYW1pY0NvbHM6IGFueSwgcXVlcnlSZWxhdGl2ZVVybDogYW55LCBzY2hlbWU/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgcmVzdFVyaSA9IHRoaXMuaG9zdCArIHRoaXMudXJpO1xyXG4gICAgbGV0IHBhcmFtID0ge307XHJcbiAgICBpZiAoaWQgIT09ICcxJykge1xyXG4gICAgICBpZiAoZHluYW1pY0NvbHMgJiYgZHluYW1pY0NvbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcGFyYW0gPSB7IGlkLCBkeW5hbWljQ29sczogSlNPTi5zdHJpbmdpZnkoZHluYW1pY0NvbHMpLCBzY2hlbWE6ICFzY2hlbWUgPyAnJyA6IHNjaGVtZSB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLnBvc3QocmVzdFVyaSArICdnZXRzcHJlYWR0ZW1wbGF0ZXdpdGhkeW5hbWljY29sdW1uJywgcGFyYW0sIHt9LCB0aGlzLmNyZWF0ZUhlYWRlclNlc3Npb25JZCgpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoc2NoZW1lKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXN0U2VydmljZS5wb3N0KHJlc3RVcmkgKyAnZ2V0c3ByZWFkdGVtcGxhdGVieWlkJywgeyBpZDogaWQsIHNjaGVtYTogIXNjaGVtZSA/ICcnIDogc2NoZW1lIH0sIHt9LCB0aGlzLmNyZWF0ZUhlYWRlclNlc3Npb25JZCgpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuZ2V0KHJlc3RVcmkgKyAnZ2V0c3ByZWFkdGVtcGxhdGUnLCB7IGlkIH0sIHRoaXMuY3JlYXRlSGVhZGVyU2Vzc2lvbklkKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZHluYW1pY0NvbHMgPSBkeW5hbWljQ29scyAmJiBkeW5hbWljQ29scy5sZW5ndGggPyBkeW5hbWljQ29scyA6IFtdO1xyXG4gICAgICBwYXJhbSA9IHsgZHluYW1pY0NvbHM6IEpTT04uc3RyaW5naWZ5KGR5bmFtaWNDb2xzKSwgc2NoZW1hOiAhc2NoZW1lID8gJycgOiBzY2hlbWUgfTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UucG9zdChyZXN0VXJpICsgJ2dldGluaXRzcHJlYWR0ZW1wbGF0ZScsIHBhcmFtLCB7fSwgdGhpcy5jcmVhdGVIZWFkZXJTZXNzaW9uSWQoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRPcGVyYXRpb24ob3BlcmF0b3JzPzogYW55KSB7XHJcbiAgICBjb25zdCByZXN0VXJpID0gdGhpcy5ob3N0ICsgdGhpcy51cmk7XHJcbiAgICBsZXQgcGFyYW0gPSB7fTtcclxuICAgIGlmICghb3BlcmF0b3JzIHx8ICFvcGVyYXRvcnMubGVuZ3RoKSB7XHJcbiAgICAgIHBhcmFtID0ge1xyXG4gICAgICAgIG9wZXJhdG9yczogWycwNTIwMjI4NC1kZmM0LTE0OWMtODUzZS1jZmQzNWI0YTAyYmInLCAnNjUzZmUyNGItZDc3Zi1kOGIwLTcxYzUtNWUzZDU2MWUzM2NhJywgJ2Q2ODMyZDk2LWU2ZjMtMTE0ZS0xZDUzLWY5ZTYzNjU0OGViOScsICdjZDZjMjA1Ny01YWQ2LTkwZGQtNTRhYy03NzFjMTkyNTYzZTgnXVxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcGFyYW0gPSB7XHJcbiAgICAgICAgb3BlcmF0b3JzOiBvcGVyYXRvcnNcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLnBvc3QocmVzdFVyaSArICdpc3ByaW5jaXBhbGhhc29wJywgcGFyYW0sIHt9LCB0aGlzLmNyZWF0ZUhlYWRlclNlc3Npb25JZCgpKTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlT3BlcmF0aW9uKHR5cGU6IGFueSkge1xyXG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uc1snUWRwTW9kaWZ5UHVibGljU2NoZW1hJ10gPT09IHRydWUgJiYgKHR5cGUgPT09IDAgfHwgdHlwZSA9PT0gJzAnKTtcclxuICB9XHJcblxyXG4gIC8vIOiuvue9ruWIl+S/oeaBr1xyXG4gIHNldENvbEluZm8oZHluYW1pY0NvbHMpIHtcclxuICAgIGxldCBjb2xJbmZvID0gW107XHJcbiAgICBpZiAoZHluYW1pY0NvbHMgJiYgZHluYW1pY0NvbHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbEluZm8gPSBkeW5hbWljQ29scztcclxuICAgIH1cclxuICAgIHRoaXMuY29sTGlzdC5uZXh0KGNvbEluZm8pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVIZWFkZXJTZXNzaW9uSWQoKSB7XHJcbiAgICByZXR1cm4gUnRmU2VydmljZXMuY3JlYXRlSGVhZGVyU2Vzc2lvbklkKHRoaXMuc2Vzc2lvblNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LqM5byA5Lq65ZGY6aKE5Yi255qE5qC85byP5pa55qGI5Y+v5Lul5pi+56S65Yqo5oCB5YiX5L+h5oGvXHJcbiAgICovXHJcbiAgb3BlcmF0ZUR5bmFtaWNDb2xzRm9yU2NoZW1hKGVsZW1lbnQ6IGFueSwgZ3JvdXBUeXBlOiBhbnksIHNjaGVtYUlkPzogYW55KSB7XHJcbiAgICBpZiAodGhpcy5keW5hbWljQ29scyAmJiB0aGlzLmR5bmFtaWNDb2xzW2dyb3VwVHlwZV0pIHtcclxuICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5pZCAmJiAoZWxlbWVudC5pc1Byb3RlY3RlZCA9PT0gMSB8fCBlbGVtZW50LmlzUHJvdGVjdGVkID09PSAnMScgfHwgc2NoZW1hSWQgPT09IDEpKSB7XHJcbiAgICAgICAgY29uc3QgZHluYW1pY0NvbHVtbnMgPSBzY2hlbWFJZCA9PT0gMSA/IHRoaXMuZHluYW1pY0NvbHNbZ3JvdXBUeXBlXSA6IHRoaXMuZHluYW1pY0NvbHNbZWxlbWVudC5pZF07XHJcbiAgICAgICAgY29uc3QgZHlDb2xzID0gdGhpcy5jcmVhdGVDb2x1bW5zKGR5bmFtaWNDb2x1bW5zLCBlbGVtZW50LnNjaGVtYVZhbHVlLmNvbHVtbk9wdGlvbi5jb2xMaXN0KTtcclxuICAgICAgICBlbGVtZW50LnNjaGVtYVZhbHVlLmNvbHVtbk9wdGlvbi5jb2xMaXN0ID0gZHlDb2xzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWQiOW5tuWKqOaAgeWIl1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlQ29sdW1ucyhjb2xMaXN0OiBhbnksIGNvbHVtbnM6IGFueSkge1xyXG4gICAgY29uc3QgY29sdW1uTGlzdCA9IFtdO1xyXG4gICAgaWYgKGNvbHVtbnMgJiYgY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgY29sdW1uTGlzdC5wdXNoKC4uLkpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29sdW1ucykpKTtcclxuICAgICAgaWYgKGNvbExpc3QgJiYgY29sTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZvci1vZlxyXG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGNvbExpc3QubGVuZ3RoOyBjb2wrKykge1xyXG4gICAgICAgICAgbGV0IGMgPSB0aGlzLmdldENvbHVtbihjb2x1bW5MaXN0LCBjb2xMaXN0W2NvbF0pO1xyXG4gICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVjdXJzaXZlQ29tcGFyZUNvbHVtbihjWydjaGlsZExpc3QnXSwgY29sTGlzdFtjb2xdWydjaGlsZExpc3QnXSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgYyA9IGNvbExpc3RbY29sXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IGNvbHVtbkxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgY29sdW1uTGlzdC5wdXNoKGNvbExpc3RbY29sXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY29sdW1uTGlzdC5zcGxpY2UoaW5kZXgsIDAsIGNvbExpc3RbY29sXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChjICYmIGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5keW5hbWljQ29sSW5kZXggKyAxO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5kZXggKz0gMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChjb2xMaXN0ICYmIGNvbExpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbHVtbkxpc3QucHVzaCguLi5jb2xMaXN0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbHVtbkxpc3Q7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0Q29sdW1uKGNvbHVtbnM6IGFueSwgY29sOiBhbnkpIHtcclxuICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG4gICAgdGhpcy5keW5hbWljQ29sSW5kZXggPSAwO1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1mb3Itb2ZcclxuICAgIGZvciAobGV0IGl0ZW0gPSAwOyBpdGVtIDwgY29sdW1ucy5sZW5ndGg7IGl0ZW0rKykge1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnJlY3Vyc2l2ZUdldENvbHVtbihjb2wsIGNvbHVtbnNbaXRlbV0sIG51bGwpO1xyXG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBwcml2YXRlIHJlY3Vyc2l2ZUdldENvbHVtbihjb2w6IGFueSwgcGFyZW50Q29sdW1uOiBhbnksIGNoaWxkTGlzdDogYW55KSB7XHJcbiAgICBpZiAocGFyZW50Q29sdW1uKSB7XHJcbiAgICAgIGlmIChwYXJlbnRDb2x1bW5bJ2JpbmRGaWVsZCddID09PSBjb2xbJ2JpbmRGaWVsZCddKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcmVudENvbHVtbjtcclxuICAgICAgfVxyXG4gICAgICBpZiAocGFyZW50Q29sdW1uWydjaGlsZExpc3QnXSAmJiBwYXJlbnRDb2x1bW5bJ2NoaWxkTGlzdCddLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWN1cnNpdmVHZXRDb2x1bW4oY29sLCBudWxsLCBwYXJlbnRDb2x1bW5bJ2NoaWxkTGlzdCddKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmR5bmFtaWNDb2xJbmRleCArPSAxO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZvci1vZlxyXG4gICAgICBmb3IgKGxldCBpdGVtID0gMDsgaXRlbSA8IGNoaWxkTGlzdC5sZW5ndGg7IGl0ZW0rKykge1xyXG4gICAgICAgIGlmIChjaGlsZExpc3RbaXRlbV1bJ2JpbmRGaWVsZCddID09PSBjb2xbJ2JpbmRGaWVsZCddKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2hpbGRMaXN0W2l0ZW1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hpbGRMaXN0W2l0ZW1dWydjaGlsZExpc3QnXSAmJiBjaGlsZExpc3RbaXRlbV1bJ2NoaWxkTGlzdCddLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnJlY3Vyc2l2ZUdldENvbHVtbihjb2wsIG51bGwsIGNoaWxkTGlzdFtpdGVtXVsnY2hpbGRMaXN0J10pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmR5bmFtaWNDb2xJbmRleCArPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIHByaXZhdGUgcmVjdXJzaXZlQ29tcGFyZUNvbHVtbihmaXJzdENoaWxkTGlzdDogYW55LCBzZWNvbmRDaGlsZExpc3Q6IGFueSkge1xyXG4gICAgaWYgKCFmaXJzdENoaWxkTGlzdCAmJiAhc2Vjb25kQ2hpbGRMaXN0KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIGlmICghZmlyc3RDaGlsZExpc3QgJiYgc2Vjb25kQ2hpbGRMaXN0KSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAoZmlyc3RDaGlsZExpc3QgJiYgIXNlY29uZENoaWxkTGlzdCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKGZpcnN0Q2hpbGRMaXN0ICYmIHNlY29uZENoaWxkTGlzdCkge1xyXG4gICAgICBpZiAoZmlyc3RDaGlsZExpc3QubGVuZ3RoICE9PSBzZWNvbmRDaGlsZExpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChmaXJzdENoaWxkTGlzdC5sZW5ndGggPT09IDAgJiYgc2Vjb25kQ2hpbGRMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmaXJzdENoaWxkTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdENoaWxkTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZmlyc3RDaGlsZExpc3RbaV0uYmluZEZpZWxkICE9PSBzZWNvbmRDaGlsZExpc3RbaV0uYmluZEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlY3Vyc2l2ZUNvbXBhcmVDb2x1bW4oZmlyc3RDaGlsZExpc3RbaV0uY2hpbGRMaXN0LCBzZWNvbmRDaGlsZExpc3RbaV0uY2hpbGRMaXN0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuIl19