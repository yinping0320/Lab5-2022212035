/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { RtfServices } from '../rtfservices/rtfservices';
var ParasMappingManagerService = /** @class */ (function () {
    function ParasMappingManagerService(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/qdpparasmapping/';
        this.parasmappingInfoChange = new Subject();
        this.parasmappingInfoList = {};
    }
    /**
     * 获取查询参数映射信息
     * @param id 数据源ID
     * @param queryId 查询编号
     */
    /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} type
     * @return {?}
     */
    ParasMappingManagerService.prototype.getParasMapping = /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} type
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl, type) {
        if (type === void 0) { type = 0; }
        /** @type {?} */
        var result$ = this.getParasMappingList(queryId, id, '', '', queryRelativeUrl, type);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value[id]) {
                return value[id];
            }
            else {
                return null;
            }
        })));
    };
    /**
     * 获取参数映射列表
     * @param queryId 查询编号
     * @param userId 用户ID
     * @param languageType 语言类型
     */
    /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    ParasMappingManagerService.prototype.getParasMappingList = /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    function (queryId, datasourceId, userId, languageType, queryRelativeUrl, queryType) {
        var _this = this;
        if (queryType === void 0) { queryType = 0; }
        /** @type {?} */
        var restUri = this.host + this.uri + 'getparasmappinglist';
        /** @type {?} */
        var result$ = this.restService.get(restUri, { queryId: queryId, datasourceId: datasourceId, userId: userId, languageType: languageType, queryType: queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    element.parasmapping = JSON.parse(element.parasmapping);
                    _this.parasmappingInfoList[element.datasourceid] = element;
                }));
                _this.parasmappingInfoChange.next({ parasInfoList: _this.parasmappingInfoList });
                return _this.parasmappingInfoList;
            }
            else {
                _this.parasmappingInfoChange.next({ parasInfoList: null });
                return null;
            }
        })));
    };
    /**
     * 保存参数映射
     * @param parasmapping 参数映射实体
     */
    /**
     * 保存参数映射
     * @param {?} parasmapping 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    ParasMappingManagerService.prototype.saveParasMapping = /**
     * 保存参数映射
     * @param {?} parasmapping 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (parasmapping, queryRelativeUrl) {
        var _this = this;
        /** @type {?} */
        var restUri = this.host + this.uri + 'saveparasmapping';
        /** @type {?} */
        var result$ = this.restService.post(restUri, parasmapping, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        function () {
            parasmapping.parasmapping = JSON.parse(parasmapping.parasmapping);
            if (Object.keys(_this.parasmappingInfoList).indexOf(parasmapping.datasourceid)) {
                _this.parasmappingInfoList[parasmapping.datasourceid] = parasmapping;
            }
        })));
    };
    /**
     * 删除方案
     * @param id 方案ID
     * @param queryId 查询编号
     */
    /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    ParasMappingManagerService.prototype.deleteParasMapping = /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (datasourceid, queryId, queryRelativeUrl) {
        var _this = this;
        /** @type {?} */
        var restUri = this.host + this.uri + 'deleteparasmapping';
        /** @type {?} */
        var result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId: queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === true) {
                _this.parasmappingInfoList[datasourceid] = null;
            }
            else {
                return false;
            }
        })));
    };
    /**
     * 获取元数据信息
     * @param Id metadataid
     */
    /**
     * 获取元数据信息
     * @param {?} Id metadataid
     * @return {?}
     */
    ParasMappingManagerService.prototype.getMetaDataInfoById = /**
     * 获取元数据信息
     * @param {?} Id metadataid
     * @return {?}
     */
    function (Id) {
        /** @type {?} */
        var restUri = this.host + '/api/runtime/lcm/v1.0/rt-metadatas/' + Id;
        /** @type {?} */
        var result$ = this.restService.get(restUri, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                return data;
            }
            else {
                return null;
            }
        })));
    };
    /**
     * @private
     * @return {?}
     */
    ParasMappingManagerService.prototype.createHeaderSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        return RtfServices.createHeaderSessionId(this.sessionService);
    };
    ParasMappingManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ParasMappingManagerService.ctorParameters = function () { return [
        { type: RestfulService },
        { type: SessionService },
        { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
    ]; };
    return ParasMappingManagerService;
}());
export { ParasMappingManagerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.uri;
    /** @type {?} */
    ParasMappingManagerService.prototype.parasmappingInfoChange;
    /** @type {?} */
    ParasMappingManagerService.prototype.parasmappingInfoList;
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ParasMappingManagerService.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,