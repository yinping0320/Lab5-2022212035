/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EventBus = /** @class */ (function () {
    function EventBus() {
    }
    /**
     * @param {?} eventType
     * @param {?} handler
     * @param {?=} eventId
     * @return {?}
     */
    EventBus.register = /**
     * @param {?} eventType
     * @param {?} handler
     * @param {?=} eventId
     * @return {?}
     */
    function (eventType, handler, eventId) {
        var _this = this;
        if (!this.handlers[eventType]) {
            this.handlers[eventType] = {};
        }
        /** @type {?} */
        var id = eventId;
        if (!id) {
            id = this.guid();
        }
        this.handlers[eventType][id] = handler;
        /** @type {?} */
        var unsubscribe = (/**
         * @return {?}
         */
        function () {
            delete _this.handlers[eventType][id];
            if (Object.keys(_this.handlers[eventType]).length === 0) {
                delete _this.handlers[eventType];
            }
        });
        return unsubscribe;
    };
    /**
     * @param {?} eventType
     * @param {?} args
     * @return {?}
     */
    EventBus.dispatch = /**
     * @param {?} eventType
     * @param {?} args
     * @return {?}
     */
    function (eventType, args) {
        var _this = this;
        if (this.handlers[eventType]) {
            Object.keys(this.handlers[eventType]).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.handlers[eventType][key](args);
            }));
        }
    };
    /**
     * @return {?}
     */
    EventBus.guid = /**
     * @return {?}
     */
    function () {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    };
    EventBus.handlers = {};
    return EventBus;
}());
export { EventBus };
if (false) {
    /** @type {?} */
    EventBus.handlers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRidXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2V2ZW50YnVzL2V2ZW50YnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQTtJQUFBO0lBdUNBLENBQUM7Ozs7Ozs7SUFwQ1EsaUJBQVE7Ozs7OztJQUFmLFVBQWdCLFNBQWlCLEVBQUUsT0FBYSxFQUFFLE9BQWdCO1FBQWxFLGlCQW1CQztRQWxCQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMvQjs7WUFFRyxFQUFFLEdBQUcsT0FBTztRQUNoQixJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDOztZQUVqQyxXQUFXOzs7UUFBRztZQUNsQixPQUFPLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN0RCxPQUFPLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDakM7UUFDSCxDQUFDLENBQUE7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOzs7Ozs7SUFFTSxpQkFBUTs7Ozs7SUFBZixVQUFnQixTQUFpQixFQUFFLElBQVM7UUFBNUMsaUJBTUM7UUFMQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsR0FBRztnQkFDL0MsS0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0QyxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQUVNLGFBQUk7OztJQUFYOzs7O1FBQ0UsU0FBUyxFQUFFO1lBQ1Qsc0NBQXNDO1lBQ3RDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQztRQUNELE9BQU8sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBckNhLGlCQUFRLEdBQVEsRUFBRSxDQUFDO0lBc0NuQyxlQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0F2Q1ksUUFBUTs7O0lBQ25CLGtCQUFpQyIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgRnVuYyA9IChhcmdzOiBhbnkpID0+IGFueTtcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudEJ1cyB7XHJcbiAgcHVibGljIHN0YXRpYyBoYW5kbGVyczogYW55ID0ge307XHJcblxyXG4gIHN0YXRpYyByZWdpc3RlcihldmVudFR5cGU6IHN0cmluZywgaGFuZGxlcjogRnVuYywgZXZlbnRJZD86IHN0cmluZykge1xyXG4gICAgaWYgKCF0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV0pIHtcclxuICAgICAgdGhpcy5oYW5kbGVyc1tldmVudFR5cGVdID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkID0gZXZlbnRJZDtcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgaWQgPSB0aGlzLmd1aWQoKTtcclxuICAgIH0gXHJcbiAgICB0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV1baWRdID0gaGFuZGxlcjtcclxuXHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcclxuICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnNbZXZlbnRUeXBlXVtpZF07XHJcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV07XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpc3BhdGNoKGV2ZW50VHlwZTogc3RyaW5nLCBhcmdzOiBhbnkpIHtcclxuICAgIGlmICh0aGlzLmhhbmRsZXJzW2V2ZW50VHlwZV0pIHtcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5oYW5kbGVyc1tldmVudFR5cGVdKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyc1tldmVudFR5cGVdW2tleV0oYXJncyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGd1aWQoKSB7XHJcbiAgICBmdW5jdGlvbiBTNCgpIHtcclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcclxuICAgICAgcmV0dXJuICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoUzQoKSArIFM0KCkgKyAnLScgKyBTNCgpICsgJy0nICsgUzQoKSArICctJyArIFM0KCkgKyAnLScgKyBTNCgpICsgUzQoKSArIFM0KCkpO1xyXG4gIH1cclxufVxyXG4iXX0=