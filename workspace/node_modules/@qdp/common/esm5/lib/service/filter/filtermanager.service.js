/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { SessionService } from '@ecp-caf/caf-common';
import { RestfulService } from '../restful-service/restful.service';
import { Server_Host } from '../../entitties/server.host';
import { RtfServices } from '../rtfservices/rtfservices';
var FilterManagerService = /** @class */ (function () {
    function FilterManagerService(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/qdpfilter/';
        this.filterInfoChange = new Subject();
        this.isFilterQDP = new Subject(); // 是否刷新
        // 是否刷新
        this.filterInfoList = {};
        // this.uri = this.host + this.uri;
    }
    /**
     * 获取查询参数映射信息
     * @param id 数据源ID
     * @param queryId 查询编号
     */
    /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @param {?=} groupType
     * @return {?}
     */
    FilterManagerService.prototype.getFilter = /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @param {?=} groupType
     * @return {?}
     */
    function (id, queryId, queryRelativeUrl, queryType, groupType) {
        /** @type {?} */
        var result$ = this.getFilterList(queryId, id, groupType, '', queryRelativeUrl, queryType);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value[queryId]) {
                return value[queryId];
            }
            else {
                return null;
            }
        })));
    };
    /**
     * 获取参数映射列表
     * @param queryId 查询编号
     * @param userId 用户ID
     * @param languageType 语言类型
     */
    /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} groupType
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    FilterManagerService.prototype.getFilterList = /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} groupType
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    function (queryId, datasourceId, groupType, languageType, queryRelativeUrl, queryType) {
        var _this = this;
        if (queryType === void 0) { queryType = 0; }
        /** @type {?} */
        var restUri = this.host + this.uri + 'getfilterlist';
        /** @type {?} */
        var result$ = this.restService.get(restUri, { queryId: queryId, datasourceId: datasourceId, groupType: groupType, languageType: languageType, queryType: queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    element.filter = JSON.parse(element.filter);
                    _this.filterInfoList[element.queryid] = element;
                }));
                _this.filterInfoChange.next({ parasInfoList: _this.filterInfoList });
                return _this.filterInfoList;
            }
            else {
                _this.filterInfoChange.next({ parasInfoList: null });
                return null;
            }
        })));
    };
    /**
     * 保存参数映射
     * @param filter 参数映射实体
     */
    /**
     * 保存参数映射
     * @param {?} filter 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    FilterManagerService.prototype.saveFilter = /**
     * 保存参数映射
     * @param {?} filter 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (filter, queryRelativeUrl) {
        var _this = this;
        /** @type {?} */
        var restUri = this.host + this.uri + 'savefilter';
        /** @type {?} */
        var result$ = this.restService.post(restUri, filter, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        function () {
            filter.filter = JSON.parse(filter.filter);
            if (Object.keys(_this.filterInfoList).indexOf(filter.queryid)) {
                _this.filterInfoList[filter.queryid] = filter;
            }
        })));
    };
    /**
     * 删除方案
     * @param id 方案ID
     * @param queryId 查询编号
     */
    /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @return {?}
     */
    FilterManagerService.prototype.deleteFilter = /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @return {?}
     */
    function (datasourceid, queryId, queryRelativeUrl, queryType) {
        var _this = this;
        /** @type {?} */
        var restUri = this.host + this.uri + 'deletefilter';
        /** @type {?} */
        var result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId: queryId, queryType: queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === true) {
                _this.filterInfoList[queryId] = null;
            }
            else {
                return false;
            }
        })));
    };
    /**
     * @private
     * @return {?}
     */
    FilterManagerService.prototype.createHeaderSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        return RtfServices.createHeaderSessionId(this.sessionService);
    };
    FilterManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FilterManagerService.ctorParameters = function () { return [
        { type: RestfulService },
        { type: SessionService },
        { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
    ]; };
    return FilterManagerService;
}());
export { FilterManagerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.uri;
    /** @type {?} */
    FilterManagerService.prototype.filterInfoChange;
    /** @type {?} */
    FilterManagerService.prototype.isFilterQDP;
    /** @type {?} */
    FilterManagerService.prototype.filterInfoList;
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    FilterManagerService.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,