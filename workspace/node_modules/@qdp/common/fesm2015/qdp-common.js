import { HttpClient } from '@angular/common/http';
import { filter } from 'lodash-es';
import { FileType, OutputType, PrintType } from '@gsp-svc/cloudprint';
import { switchMap, map } from 'rxjs/operators';
import { SessionService } from '@ecp-caf/caf-common';
import { CommonModule } from '@angular/common';
import { Subject, of } from 'rxjs';
import { Injectable, Directive, HostBinding, Input, HostListener, ElementRef, Renderer2, Output, EventEmitter, NgModule, Inject, Optional, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RestfulService {
    /**
     * 构造函数
     * @param {?} httpClient http客户端
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * 发送GET请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    get(uri, params, options) {
        return this.request(uri, 'GET', params, options);
    }
    /**
     * 发送POST请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    put(uri, body, params, options) {
        /** @type {?} */
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'PUT', params, optionsWithBody);
    }
    /**
     * 发送PUT请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    post(uri, body, params, options) {
        /** @type {?} */
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'POST', params, optionsWithBody);
    }
    /**
     * 发送DELETE请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    delete(uri, params, options) {
        return this.request(uri, 'DELETE', params, options);
    }
    /**
     * 发送请求
     * @private
     * @param {?} uri 请求地址
     * @param {?} method
     * @param {?} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    request(uri, method, params, options = {}) {
        options = options || {};
        if (params) {
            /** @type {?} */
            const httpParams = this.buildParams(params);
            options.params = httpParams;
        }
        /** @type {?} */
        const methodName = (/** @type {?} */ (method));
        /** @type {?} */
        const result = this.httpClient.request(methodName, uri, options);
        return result;
    }
    /**
     * 构造Http请求参数
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        /** @type {?} */
        const parameters = {};
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key]) {
                /** @type {?} */
                const value = params[key].toString();
                parameters[key] = value;
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} options
     * @param {?} body
     * @return {?}
     */
    addBody(options, body) {
        options = options || {};
        /** @type {?} */
        const mergedOptions = Object.assign(options, { body });
        return mergedOptions;
    }
}
RestfulService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RestfulService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const Server_Host = 'serverHost';
/** @type {?} */
const Load_Data_Uri = 'loadDataUri';
/** @type {?} */
const Load_Data_Col = 'loadDataCol';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class SchemaRenderExtendService {
}
SchemaRenderExtendService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ SchemaRenderExtendService.ngInjectableDef = defineInjectable({ factory: function SchemaRenderExtendService_Factory() { return new SchemaRenderExtendService(); }, token: SchemaRenderExtendService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtfServices {
    /**
     * @param {?=} sessionService
     * @return {?}
     */
    static createHeaderSessionId(sessionService) {
        /** @type {?} */
        const options = {
            headers: {
                'Content-Type': 'application/json'
            }
        };
        try {
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session && gspframeworkService.rtf.session.getFormToken()) {
                options.headers['X-CAF-Runtime-CommonVariable'] = gspframeworkService.rtf.session.getFormToken();
            }
            else if (sessionService && sessionService.getCurrentSeesionId()) {
                options.headers['X-CAF-Runtime-CommonVariable'] = sessionService.getCurrentSeesionId();
            }
            else if (sessionService && sessionService.getUserSessionId()) {
                options.headers['SessionId'] = sessionService.getUserSessionId();
            }
            else if (localStorage.getItem('sessionId')) {
                options.headers['SessionId'] = localStorage.getItem('sessionId');
            }
        }
        catch (e) { }
        return options;
    }
    /**
     * @param {?=} sessionService
     * @return {?}
     */
    static getSessionId(sessionService) {
        /** @type {?} */
        let sessionId;
        try {
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session && gspframeworkService.rtf.session.getFormToken()) {
                sessionId = gspframeworkService.rtf.session.getFormToken();
            }
            else if (sessionService && sessionService.getCurrentSeesionId()) {
                sessionId = sessionService.getCurrentSeesionId();
            }
            else if (sessionService && sessionService.getUserSessionId()) {
                sessionId = sessionService.getUserSessionId();
            }
            else if (localStorage.getItem('sessionId')) {
                sessionId = localStorage.getItem('sessionId');
            }
        }
        catch (e) { }
        return sessionId;
    }
    /**
     * @param {?=} queryId
     * @return {?}
     */
    static getTabId(queryId) {
        try {
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session) {
                /** @type {?} */
                const tab = gspframeworkService.rtf.session.getCommonVariable();
                if (gspframeworkService.rtf.extendMethod && gspframeworkService.rtf.extendMethod.getExtObj && gspframeworkService.rtf.extendMethod.getExtObj() && gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID) {
                    /** @type {?} */
                    const uuid = gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() ? gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() : '';
                    return tab.tabId + uuid;
                }
                else {
                    return tab.tabId;
                }
            }
        }
        catch (e) {
            return queryId;
        }
    }
    /**
     * @return {?}
     */
    static getInSuiteFrmUUID() {
        try {
            if (gspframeworkService.rtf.extendMethod && gspframeworkService.rtf.extendMethod.getExtObj && gspframeworkService.rtf.extendMethod.getExtObj() && gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID) {
                /** @type {?} */
                const uuid = gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() ? gspframeworkService.rtf.extendMethod.getExtObj().iGIXFrmUUID() : '';
                return uuid;
            }
            else {
                return "";
            }
        }
        catch (e) {
            return "";
        }
    }
    /**
     * @return {?}
     */
    static getCommonVariable() {
        try {
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.session) {
                /** @type {?} */
                const tab = gspframeworkService.rtf.session.getCommonVariable();
                return tab;
            }
        }
        catch (e) {
            return null;
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static getMenuParameter(key) {
        try {
            /** @type {?} */
            const funcId = RtfServices.getCommonVariable().funcId;
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.func) {
                /** @type {?} */
                let param = null;
                /** @type {?} */
                const callback = (/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    // 回到函数得到res 即参数
                    param = res;
                });
                gspframeworkService.rtf.func.getMenuParams(funcId, callback);
                if (param) {
                    return param.get(key);
                }
            }
            return null;
        }
        catch (e) {
            return null;
        }
    }
    /**
     * @param {?} tabId
     * @return {?}
     */
    static getMenuSwitchControlParameter(tabId) {
        return {
            menuSwitchControl: {
                key: tabId,
                value: new Subject(),
                changeEnable: false
            }
        };
    }
    /**
     * @return {?}
     */
    static getMenuSwitchControlEvent() {
        try {
            /** @type {?} */
            const tabId = RtfServices.getTabId();
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.frmEvent) {
                /** @type {?} */
                let param = null;
                /** @type {?} */
                const option = RtfServices.getCommonVariable();
                /** @type {?} */
                const callback = (/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    // 回到函数得到res 即参数
                    param = res;
                });
                gspframeworkService.rtf.frmEvent.eventListener(tabId, callback, option);
                if (param && param.hasOwnProperty('menuSwitchControl') && param['menuSwitchControl'].key === tabId) {
                    return param['menuSwitchControl'].value;
                }
                return null;
            }
        }
        catch (e) {
            return null;
        }
    }
    /**
     * 获取功能ID
     * @param {?} option `{appId：'应用ID', appEntrance: '应用入口', appType: '类型：app, menu', funcId: '功能ID', tabId: '标签页ID'}`
     * @return {?}
     */
    static getFuncId(option) {
        return RtfServices.getNewPageIdFunc(option);
    }
    /**
     * @return {?}
     */
    static getFuncName() {
        try {
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.tabs) {
                /** @type {?} */
                const func = gspframeworkService.rtf.tabs.getAll().find((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.id == gspframeworkService.rtf.tabs.getActiveTab().funcId));
                return func.FuncName;
            }
            else {
                return '';
            }
        }
        catch (e) {
            return '';
        }
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    static getFuncIdOlde(option) {
        /** @type {?} */
        let funcId;
        if (option.appType.toLowerCase() === 'app') {
            funcId = RtfServices.newPageIdApp(option.appId, option.appEntrance, option.tabId);
        }
        else {
            funcId = RtfServices.newPageIdFunc(option.funcId, option.tabId);
        }
        return funcId;
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    static getNewPageIdFunc(option) {
        try {
            if (gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.func) {
                return gspframeworkService.rtf.func.newPageId(option);
            }
            else {
                return RtfServices.getFuncIdOlde(option);
            }
        }
        catch (e) {
            return RtfServices.getFuncIdOlde(option);
        }
    }
    /**
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    static newPageIdFunc(funcId, tabId) {
        return tabId ? `${funcId}_${tabId}` : funcId;
    }
    /**
     * @private
     * @param {?} appId
     * @param {?} appEntrance
     * @return {?}
     */
    static mergeAppId(appId, appEntrance) {
        return `${appId}_${appEntrance}`;
    }
    /**
     * @private
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} tabId
     * @return {?}
     */
    static newPageIdApp(appId, appEntrance, tabId) {
        return tabId ? `${RtfServices.mergeAppId(appId, appEntrance)}_${tabId}` : RtfServices.mergeAppId(appId, appEntrance);
    }
}
RtfServices.uuid = "";
RtfServices.isInSuite = false;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SchemaManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     * @param {?} schemaRenderExtendService
     */
    constructor(restService, sessionService, host, schemaRenderExtendService) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.schemaRenderExtendService = schemaRenderExtendService;
        this.uri = '/api/runtime/bcc/v1.0/qdpschemamanager/';
        this.schemaInfoChange = new Subject();
        this.colList = new Subject();
        this.controlType = new Subject();
        this.schemaInfo = {};
        this.schemaid = {} = new Subject();
        this.operationChange = new Subject();
        this.dynamicCols = {};
        this.customSchema = {};
        this.dynamicColIndex = 0;
        this.preSchema = {
            id: 'prefab',
            schemaName: '系统预制',
            isPrefab: 1,
            isDefault: 0,
            isProtected: '0',
            schemaValue: {
                titleOption: {
                    title: '',
                    subTitles: []
                },
                columnOption: {
                    maxLevel: 0,
                    colList: []
                },
                styleOption: {
                    Title: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    SubTitle: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    Header: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    DataArea: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    },
                    Footer: {
                        fontFamily: 9,
                        size: 14,
                        fontWeight: 0,
                        fontStyle: 0,
                        textDecoration: 0,
                        fontColor: 'black',
                        rowHeight: 35
                    }
                },
                otherOption: {
                    showFilterRow: true,
                    dataCahce: true,
                    level: '',
                    isDetails: '',
                    loadDataType: 1,
                    pageSize: 20,
                    treeInfoType: 2,
                    pathField: '',
                    pathStep: 0,
                    idField: '',
                    parentField: '',
                    firstLoad: true,
                    showZero: true,
                    expand: true,
                    showHeaderSort: true
                }
            }
        };
        this.isDefaultSchema = [];
        this.operations = {};
        /** @type {?} */
        const self = this;
        this.getOperation().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value) {
                self.operations['QdpQueryExport'] = value['05202284-dfc4-149c-853e-cfd35b4a02bb'];
                self.operations['QdpQueryPrint'] = value['653fe24b-d77f-d8b0-71c5-5e3d561e33ca'];
                self.operations['QdpModifyPublicSchema'] = value['d6832d96-e6f3-114e-1d53-f9e636548eb9'];
                self.operations['QdpPubQuery'] = value['cd6c2057-5ad6-90dd-54ac-771c192563e8'];
                self.operationChange.next(self.operations);
            }
            // console.log(value);
        }));
    }
    /**
     * @param {?} id
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @param {?=} frozenCols
     * @param {?=} groupType
     * @return {?}
     */
    getSpreadTemplate(id, queryId, dynamicCols, queryRelativeUrl, scheme, frozenCols, groupType) {
        if (dynamicCols && dynamicCols.length) {
            this.dynamicCols[groupType ? groupType : queryId] = dynamicCols;
            this.dynamicCols[id] = dynamicCols;
        }
        /** @type {?} */
        let schema;
        if (this.schemaList && this.schemaList[id]) {
            schema = this.schemaList[id];
        }
        /** @type {?} */
        let colInfo = [];
        // 新版本列信息通过frozenCols获取
        if (this.dynamicCols[groupType ? groupType : queryId]) {
            colInfo = Object.assign(frozenCols, this.dynamicCols[groupType ? groupType : queryId]);
        }
        else {
            colInfo = frozenCols;
        }
        this.colList.next(colInfo);
        return this.analysis((schema && schema.id ? schema.id : '1'), queryId, dynamicCols, queryRelativeUrl, scheme);
    }
    /**
     * 获取指定方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @param {?=} fromCache
     * @return {?}
     */
    getSchema(id, queryId, queryRelativeUrl, groupType, organizationId, fromCache) {
        /** @type {?} */
        const self = this;
        if (this.schemaList && this.schemaList[id] && fromCache && fromCache === true) {
            return of(this.schemaList[id]);
        }
        else {
            /** @type {?} */
            const result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
            return result$.pipe(map((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (id === '1' || id === 'prefab') {
                    return Object.assign({}, self.preSchema, { id: '1' });
                }
                else if (value && value['schemaList'] && value['schemaList'][queryId]) {
                    if (value['schemaList'][queryId][id]) {
                        return value['schemaList'][queryId][id];
                    }
                    else {
                        /** @type {?} */
                        let defaultSchemaId = '';
                        if (value.isDefaultSchema && value.isDefaultSchema.id && value['schemaList'][queryId][value.isDefaultSchema.id]) {
                            defaultSchemaId = value.isDefaultSchema.id;
                            return value['schemaList'][queryId][defaultSchemaId];
                        }
                        else {
                            return null;
                        }
                    }
                }
                else {
                    return null;
                }
            })));
        }
    }
    /**
     * 获取默认方案
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    getDefaultSchema(queryId, queryRelativeUrl, groupType, organizationId) {
        /** @type {?} */
        const result$ = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            if (this.isDefaultSchema[queryId] && this.isDefaultSchema[queryId].id) {
                return this.isDefaultSchema[queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSchemaList(queryId, userId, organizationId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getschemalist';
        return this.getSchemas(restUri, queryRelativeUrl, { queryId, userId, organizationId });
    }
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 组织id
     * @param {?} groupType
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSchemaListByGroupType(queryId, userId, organizationId, groupType, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getschemalistbygroup';
        return this.getSchemas(restUri, queryRelativeUrl, { queryId, userId, organizationId, groupType });
    }
    /**
     * @private
     * @param {?} uri
     * @param {?} queryRelativeUrl
     * @param {?} params
     * @return {?}
     */
    getSchemas(uri, queryRelativeUrl, params) {
        // queryId: string, userId: string, organizationId: string, groupType: any, queryRelativeUrl: any, params: any
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const result$ = self.restService.get(uri, params, self.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            self.schemaList = {};
            if (data && data.length) {
                self.isDefaultSchema[params.queryId] = null;
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.schemaValue = JSON.parse(element.schemaValue);
                    if (element.isDefault === 1) {
                        self.isDefaultSchema[params.queryId] = element;
                    }
                    self.schemaList[element.id] = element;
                    self.operateDynamicColsForSchema.call(self, element, params.groupType ? params.groupType : params.queryId);
                }));
                /** @type {?} */
                let schemaExtendId = '';
                if (self.schemaRenderExtendService && self.schemaRenderExtendService.schemaInfoRenderBefore) {
                    /** @type {?} */
                    const $event = { queryId: params.queryId };
                    $event['defaultSchemaId'] = '';
                    $event['schemalList'] = self.schemaList;
                    self.schemaRenderExtendService.schemaInfoRenderBefore($event);
                    if ($event['defaultSchemaId']) {
                        schemaExtendId = $event['defaultSchemaId'];
                    }
                }
                /** @type {?} */
                const filterCondition = { schemaType: 0 };
                if (schemaExtendId) {
                    filterCondition.id = schemaExtendId;
                }
                if (schemaExtendId || !self.isDefaultSchema || !self.isDefaultSchema[params.queryId]) {
                    if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                        self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                    }
                    else {
                        filterCondition.schemaType = 1;
                        if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                            self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                        }
                        else {
                            filterCondition.schemaType = 2;
                            if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                                self.isDefaultSchema[params.queryId] = filter(data, filterCondition)[0];
                            }
                        }
                    }
                }
                self.schemaInfo[params.queryId] = self.schemaList;
                /** @type {?} */
                const preSchema = JSON.parse(JSON.stringify(self.preSchema));
                self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema });
                return { schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema[params.queryId], preSchema: preSchema };
            }
            else {
                delete self.schemaInfo[params.queryId];
                /** @type {?} */
                const preSchema = JSON.parse(JSON.stringify(self.preSchema));
                self.isDefaultSchema[params.queryId] = null;
                self.operateCustomSchema(preSchema, params.groupType ? params.groupType : params.queryId);
                self.operateDynamicColsForSchema.call(self, preSchema, params.groupType ? params.groupType : params.queryId, 1);
                self.schemaInfoChange.next({ schemaList: null, isDefaultSchema: null, preSchema: preSchema });
                return { schemaList: null, isDefaultSchema: null, preSchema: preSchema };
            }
        })));
    }
    /**
     * @param {?} groupType
     * @param {?=} queryId
     * @return {?}
     */
    mergeCustomSchema(groupType, queryId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let preSchema = JSON.parse(JSON.stringify(self.preSchema));
        preSchema = self.operateCustomSchema(preSchema, groupType);
        self.operateDynamicColsForSchema.call(self, preSchema, groupType, 1);
        self.schemaInfoChange.next({ schemaList: self.schemaInfo, isDefaultSchema: self.isDefaultSchema && self.isDefaultSchema[queryId] ? self.isDefaultSchema[queryId] : null, preSchema: preSchema });
        return preSchema;
    }
    /**
     * @private
     * @param {?} preSchema
     * @param {?} groupType
     * @return {?}
     */
    operateCustomSchema(preSchema, groupType) {
        try {
            if (this.customSchema && this.customSchema[groupType]) {
                /** @type {?} */
                const schema = JSON.parse(this.customSchema[groupType]);
                preSchema.schemaValue.titleOption = Object.assign(preSchema.schemaValue.titleOption, schema.titleOption);
                preSchema.schemaValue.columnOption = Object.assign(preSchema.schemaValue.columnOption, schema.columnOption);
                preSchema.schemaValue.styleOption = Object.assign(preSchema.schemaValue.styleOption, schema.styleOption);
                preSchema.schemaValue.otherOption = Object.assign(preSchema.schemaValue.otherOption, schema.otherOption);
                return preSchema;
            }
        }
        catch (e) {
            console.log(e);
        }
    }
    /**
     * 保存方案
     * @param {?} schema 方案实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveSchema(schema, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'saveschema';
        /** @type {?} */
        const schemaObj = JSON.parse(schema.schema);
        /** @type {?} */
        const result$ = this.restService.post(restUri, schema, {}, this.createHeaderSessionId());
        return result$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            if (schema.groupType) {
                return this.getSchemaListByGroupType(schemaObj.queryId, '', schemaObj.orgId, schema.groupType, queryRelativeUrl);
            }
            else {
                return this.getSchemaList(schemaObj.queryId, '', schemaObj.orgId, queryRelativeUrl);
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} groupType
     * @param {?=} organizationId
     * @return {?}
     */
    deleteSchema(id, queryId, queryRelativeUrl, groupType, organizationId) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deleteschema';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { id }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.isDefaultSchema[queryId] = null;
                /** @type {?} */
                const result$1 = groupType ? this.getSchemaListByGroupType(queryId, '', organizationId, groupType, queryRelativeUrl) : this.getSchemaList(queryId, '', organizationId, queryRelativeUrl);
                return result$1.pipe(map((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    return true;
                })));
            }
            else {
                return of(false);
            }
        })));
    }
    /**
     * 获取spread模版
     * @param {?} id 方案ID
     * @param {?} queryId
     * @param {?} dynamicCols
     * @param {?} queryRelativeUrl
     * @param {?=} scheme
     * @return {?}
     */
    analysis(id, queryId, dynamicCols, queryRelativeUrl, scheme) {
        /** @type {?} */
        const restUri = this.host + this.uri;
        /** @type {?} */
        let param = {};
        if (id !== '1') {
            if (dynamicCols && dynamicCols.length) {
                param = { id, dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
                return this.restService.post(restUri + 'getspreadtemplatewithdynamiccolumn', param, {}, this.createHeaderSessionId());
            }
            else {
                if (scheme) {
                    return this.restService.post(restUri + 'getspreadtemplatebyid', { id: id, schema: !scheme ? '' : scheme }, {}, this.createHeaderSessionId());
                }
                else {
                    return this.restService.get(restUri + 'getspreadtemplate', { id }, this.createHeaderSessionId());
                }
            }
        }
        else {
            dynamicCols = dynamicCols && dynamicCols.length ? dynamicCols : [];
            param = { dynamicCols: JSON.stringify(dynamicCols), schema: !scheme ? '' : scheme };
            return this.restService.post(restUri + 'getinitspreadtemplate', param, {}, this.createHeaderSessionId());
        }
    }
    /**
     * @param {?=} operators
     * @return {?}
     */
    getOperation(operators) {
        /** @type {?} */
        const restUri = this.host + this.uri;
        /** @type {?} */
        let param = {};
        if (!operators || !operators.length) {
            param = {
                operators: ['05202284-dfc4-149c-853e-cfd35b4a02bb', '653fe24b-d77f-d8b0-71c5-5e3d561e33ca', 'd6832d96-e6f3-114e-1d53-f9e636548eb9', 'cd6c2057-5ad6-90dd-54ac-771c192563e8']
            };
        }
        else {
            param = {
                operators: operators
            };
        }
        return this.restService.post(restUri + 'isprincipalhasop', param, {}, this.createHeaderSessionId());
    }
    /**
     * @param {?} type
     * @return {?}
     */
    validateOperation(type) {
        return this.operations['QdpModifyPublicSchema'] === true && (type === 0 || type === '0');
    }
    // 设置列信息
    /**
     * @param {?} dynamicCols
     * @return {?}
     */
    setColInfo(dynamicCols) {
        /** @type {?} */
        let colInfo = [];
        if (dynamicCols && dynamicCols.length) {
            colInfo = dynamicCols;
        }
        this.colList.next(colInfo);
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
    /**
     * 二开人员预制的格式方案可以显示动态列信息
     * @param {?} element
     * @param {?} groupType
     * @param {?=} schemaId
     * @return {?}
     */
    operateDynamicColsForSchema(element, groupType, schemaId) {
        if (this.dynamicCols && this.dynamicCols[groupType]) {
            if (element && element.id && (element.isProtected === 1 || element.isProtected === '1' || schemaId === 1)) {
                /** @type {?} */
                const dynamicColumns = schemaId === 1 ? this.dynamicCols[groupType] : this.dynamicCols[element.id];
                /** @type {?} */
                const dyCols = this.createColumns(dynamicColumns, element.schemaValue.columnOption.colList);
                element.schemaValue.columnOption.colList = dyCols;
            }
        }
    }
    /**
     * 合并动态列
     * @private
     * @param {?} colList
     * @param {?} columns
     * @return {?}
     */
    createColumns(colList, columns) {
        /** @type {?} */
        const columnList = [];
        if (columns && columns.length) {
            columnList.push(...JSON.parse(JSON.stringify(columns)));
            if (colList && colList.length > 0) {
                /** @type {?} */
                let index = 0;
                // tslint:disable-next-line:prefer-for-of
                for (let col = 0; col < colList.length; col++) {
                    /** @type {?} */
                    let c = this.getColumn(columnList, colList[col]);
                    if (c) {
                        if (this.recursiveCompareColumn(c['childList'], colList[col]['childList']) === false) {
                            c = colList[col];
                        }
                    }
                    else {
                        if (index >= columnList.length) {
                            columnList.push(colList[col]);
                        }
                        else {
                            columnList.splice(index, 0, colList[col]);
                        }
                    }
                    if (c && index === 0) {
                        index = this.dynamicColIndex + 1;
                    }
                    else {
                        index += 1;
                    }
                }
            }
        }
        else {
            if (colList && colList.length > 0) {
                columnList.push(...colList);
            }
        }
        return columnList;
    }
    /**
     * @private
     * @param {?} columns
     * @param {?} col
     * @return {?}
     */
    getColumn(columns, col) {
        /** @type {?} */
        let result = null;
        this.dynamicColIndex = 0;
        // tslint:disable-next-line:prefer-for-of
        for (let item = 0; item < columns.length; item++) {
            result = this.recursiveGetColumn(col, columns[item], null);
            if (result != null) {
                return result;
            }
        }
        return result;
    }
    /**
     * @private
     * @param {?} col
     * @param {?} parentColumn
     * @param {?} childList
     * @return {?}
     */
    recursiveGetColumn(col, parentColumn, childList) {
        if (parentColumn) {
            if (parentColumn['bindField'] === col['bindField']) {
                return parentColumn;
            }
            if (parentColumn['childList'] && parentColumn['childList'].length > 0) {
                return this.recursiveGetColumn(col, null, parentColumn['childList']);
            }
            else {
                this.dynamicColIndex += 1;
            }
        }
        else {
            // tslint:disable-next-line:prefer-for-of
            for (let item = 0; item < childList.length; item++) {
                if (childList[item]['bindField'] === col['bindField']) {
                    return childList[item];
                }
                if (childList[item]['childList'] && childList[item]['childList'].length > 0) {
                    return this.recursiveGetColumn(col, null, childList[item]['childList']);
                }
                else {
                    this.dynamicColIndex += 1;
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} firstChildList
     * @param {?} secondChildList
     * @return {?}
     */
    recursiveCompareColumn(firstChildList, secondChildList) {
        if (!firstChildList && !secondChildList) {
            return true;
        }
        else if (!firstChildList && secondChildList) {
            return false;
        }
        else if (firstChildList && !secondChildList) {
            return false;
        }
        else if (firstChildList && secondChildList) {
            if (firstChildList.length !== secondChildList.length) {
                return false;
            }
            else {
                if (firstChildList.length === 0 && secondChildList.length === 0) {
                    return true;
                }
                else if (firstChildList.length === 0) {
                    return false;
                }
                else {
                    for (let i = 0; i < firstChildList.length; i++) {
                        if (firstChildList[i].bindField !== secondChildList[i].bindField) {
                            return false;
                        }
                        return this.recursiveCompareColumn(firstChildList[i].childList, secondChildList[i].childList);
                    }
                    return false;
                }
            }
        }
        return false;
    }
}
SchemaManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SchemaManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] },
    { type: SchemaRenderExtendService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LcpService {
    /**
     * @param {?} restfulService
     * @param {?} sessionService
     * @param {?} serverHost
     * @param {?} loadDataUri
     * @param {?} loadDataCol
     */
    constructor(restfulService, sessionService, serverHost, loadDataUri, loadDataCol) {
        this.restfulService = restfulService;
        this.sessionService = sessionService;
        this.serverHost = serverHost;
        this.loadDataUri = loadDataUri;
        this.loadDataCol = loadDataCol;
        this.pageInfoChange = new Subject();
        this.variablesChange = new Subject();
        this.inSuiteDropDownInfoChange = new Subject();
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    exportData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        /** @type {?} */
        const fileName = params.excelExportName + '.xlsx';
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            const byteString = atob(data);
            // base64 解码
            /** @type {?} */
            const arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            const intArray = new Uint8Array(arrayBuffer);
            for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            const blob = new Blob([intArray], { type: 'application/vnd.ms-excel' });
            if ('download' in document.createElement('a')) { // 非IE下载
                // 非IE下载
                /** @type {?} */
                const elink = document.createElement('a');
                elink.download = fileName;
                elink.style.display = 'none';
                elink.href = URL.createObjectURL(blob);
                document.body.appendChild(elink);
                elink.click();
                URL.revokeObjectURL(elink.href); // 释放URL 对象
                document.body.removeChild(elink);
            }
            else { // IE10+下载
                navigator.msSaveBlob(blob, fileName);
            }
            self.loading.close();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    aysnExportData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'export';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params.async = 1;
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    pdfExportEvent(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            const byteString = atob(data);
            // base64 解码
            /** @type {?} */
            const arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            const intArray = new Uint8Array(arrayBuffer);
            for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            const blob = new Blob([intArray], { type: 'application/pdf' });
            if ('download' in document.createElement('a')) { // 非IE下载
                // 非IE下载
                /** @type {?} */
                const elink = document.createElement('a');
                elink.download = fileName;
                elink.style.display = 'none';
                elink.href = URL.createObjectURL(blob);
                document.body.appendChild(elink);
                elink.click();
                URL.revokeObjectURL(elink.href); // 释放URL 对象
                document.body.removeChild(elink);
            }
            else { // IE10+下载
                navigator.msSaveBlob(blob, fileName);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    printPreView(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'print';
        }
        /** @type {?} */
        const config = {
            responseType: 'application/json' // 表明返回服务器返回的数据类型
        };
        Object.assign(config, this.createHeaderSessionId());
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const fileName = params.Param && params.Param.excelExportName ? params.Param.excelExportName + '' : params.excelExportName + '';
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, config)
            : this.restfulService.put(uri, params, {}, config);
        result$.toPromise().then((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data = !queryRelativeUrl ? data : JSON.parse(data).returnValue;
            /** @type {?} */
            const options = {
                OutputType: OutputType.PRINT,
                FileType: FileType.Pdf,
                Path: '',
                DeviceId: '',
                printType: PrintType.Query,
                printJob: false,
                printerName: '',
                printSetting: null
            };
            /** @type {?} */
            const byteString = atob(data);
            // base64 解码
            /** @type {?} */
            const arrayBuffer = new ArrayBuffer(byteString.length);
            // 创建缓冲数组
            /** @type {?} */
            const intArray = new Uint8Array(arrayBuffer);
            for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
            }
            /** @type {?} */
            const blob = new Blob([intArray]);
            self.cloudprintService.openRendedViewer('tab', blob, options);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            self.formErrorService.exception(error.Message, error);
        }));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
                if (data && data.pageInfo) {
                    self.pageInfoChange.next(data.pageInfo);
                }
                if (data && data.variables) {
                    self.variablesChange.next(data.variables);
                }
                if (data && data.dropDownOption) {
                    self.inSuiteDropDownInfo = data.dropDownOption;
                    self.inSuiteDropDownInfoChange.next(data.dropDownOption);
                }
            }
            return data;
        })));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCol(params, queryRelativeUrl) {
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataCol) {
            uri += this.loadDataCol;
        }
        else {
            uri += (!queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
            }
            return data;
        })));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCrosstabTemplate(params, queryRelativeUrl) {
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += !queryRelativeUrl ? '/api/runtime/bcc/v1.0/qdpsearch/getcrosstabtemplate' : (queryRelativeUrl + 'getcrosstabtemplate');
        }
        params = !queryRelativeUrl ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                result = !queryRelativeUrl ? result : (result && result.returnValue) ? JSON.parse(result.returnValue) : undefined;
            }
            return result;
        })));
    }
    /**
     * @return {?}
     */
    getSpreadLicense() {
        /** @type {?} */
        const uri = '/api/runtime/bcc/v1.0/qdpschemamanager/getSpreadLicense';
        /** @type {?} */
        const result$ = this.restfulService.get(uri, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data.spreadjs;
        })));
    }
    /**
     * @param {?} params
     * @return {?}
     */
    clearCache(params) {
        /** @type {?} */
        const uri = this.serverHost + '/api/runtime/bcc/v1.0/qdpsearch/clearcache';
        /** @type {?} */
        const result$ = this.restfulService.post(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return result;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
LcpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LcpService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [Load_Data_Uri,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [Load_Data_Col,] }, { type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 打印服务
 * \@Scope FrameComponent
 */
class IntegrationPrintService {
    /**
     * 构造函数
     * @param {?} _printService
     */
    constructor(_printService) {
        this.printService = _printService;
    }
    /**
     * 打印单据
     * @param {?} beMetaId BE元数据标识
     * @param {?} bizBillId 业务单据标识
     * @return {?}
     */
    printSingle(beMetaId, bizBillId) {
        return this.printArray(beMetaId, [bizBillId]);
    }
    /**
     * 打印单据（通过id或ids）
     * @param {?} beMetaId be元数据Id
     * @param {?} ids 单据id或ids
     * @return {?}
     */
    printByIds(beMetaId, ids) {
        /** @type {?} */
        const dataIds = ids.split(',').filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item));
        return this.printArray(beMetaId, dataIds);
    }
    /**
     * 打印单据（带维度）
     * @param {?} beMetaId be元数据Id
     * @param {?} ids 单据id或ids
     * @param {?=} dim1 维度1值
     * @param {?=} dim2 维度2值
     * @param {?=} billCategoryId 单据类型Id
     * @return {?}
     */
    printByIdsWithDimension(beMetaId, ids, dim1, dim2, billCategoryId) {
        /** @type {?} */
        const dataIds = ids.split(',').filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item));
        return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);
    }
    /**
     * 打印单据（带维度）
     * @param {?} beMetaId be元数据Id
     * @param {?} ids 单据id或ids
     * @param {?} dim1 维度1值
     * @param {?} dim2 维度2值
     * @param {?} queryType
     * @param {?} queryServiceId
     * @param {?} queryParam
     * @return {?}
     */
    printWithDimensionCustomDataSource(beMetaId, ids, dim1, dim2, queryType, queryServiceId, queryParam) {
        /** @type {?} */
        const dataIds = ids.split(',').filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item));
        return this.printArray(beMetaId, dataIds, dim1, dim2, undefined, queryType, queryServiceId, queryParam);
    }
    /**
     * 打印多个单据
     * @param {?} beMetaId BE元数据标识
     * @param {?} dataIds 业务单据标识数组
     * @param {?=} dim1 维度1
     * @param {?=} dim2 维度2
     * @param {?=} billCategoryId 业务单据类型Id
     * @param {?=} queryType
     * @param {?=} queryServiceId
     * @param {?=} queryParam
     * @return {?}
     */
    printArray(beMetaId, dataIds, dim1, dim2, billCategoryId, queryType, queryServiceId, queryParam) {
        /** @type {?} */
        const sourceOptions = this.buildSourceOptions({
            dataIds: dataIds,
            sourceId: beMetaId
        });
        /** @type {?} */
        const outputOptions = this.buildOutputOptions();
        if (dim1) {
            sourceOptions.FirstDimensionVal = dim1;
        }
        if (dim2) {
            sourceOptions.SecondDimensionVal = dim2;
        }
        if (typeof billCategoryId !== 'undefined') {
            sourceOptions.billCategoryId = billCategoryId;
        }
        if (queryType) {
            sourceOptions.queryType = queryType;
        }
        if (queryServiceId) {
            sourceOptions.queryServiceId = queryServiceId;
        }
        if (queryParam) {
            sourceOptions.queryParam = queryParam;
        }
        return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');
    }
    /**
     * 构造SourceOptions
     * @private
     * @param {?} options options
     * @return {?}
     */
    buildSourceOptions(options) {
        /** @type {?} */
        const so = {
            DataIds: options && options.dataIds || undefined,
            SourceId: options && options.sourceId || undefined,
            FirstDimensionVal: options && options.dim1 || undefined,
            SecondDimensionVal: options && options.dim2 || undefined,
            RetrieveParam: options && options.retrieveParam || undefined,
            FormatId: options && options.formatId || undefined,
            billCategoryId: options && options.billCategoryId || undefined,
            ServiceUnit: options && options.serviceUnit || undefined,
            currentPage: options && options.currentPage || undefined,
            pageRowCount: options && options.pageRowCount || undefined,
            queryType: options && options.queryType || undefined,
            queryServiceId: options && options.queryServiceId || undefined,
            bizTypeId: options && options.bizTypeId || undefined,
            queryParam: options && options.queryParam || undefined
        };
        return so;
    }
    /**
     * 构造OutputOptions
     * @private
     * @param {?=} options options
     * @return {?}
     */
    buildOutputOptions(options) {
        /** @type {?} */
        const oo = {
            OutputType: options && options.outputType || OutputType.PRINT,
            FileType: options && options.fileType || FileType.Html5,
            Path: options && options.path || undefined,
            DeviceId: options && options.deviceId || undefined,
            printJob: options && options.printJob || undefined,
            printerName: options && options.printerName || undefined,
            printSetting: options && options.printSetting || undefined,
            printType: options && options.printType || PrintType.Form
        };
        return oo;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParasMappingManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/qdpparasmapping/';
        this.parasmappingInfoChange = new Subject();
        this.parasmappingInfoList = {};
    }
    /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?=} type
     * @return {?}
     */
    getParasMapping(id, queryId, queryRelativeUrl, type = 0) {
        /** @type {?} */
        const result$ = this.getParasMappingList(queryId, id, '', '', queryRelativeUrl, type);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[id]) {
                return value[id];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    getParasMappingList(queryId, datasourceId, userId, languageType, queryRelativeUrl, queryType = 0) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getparasmappinglist';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { queryId, datasourceId, userId, languageType, queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.parasmapping = JSON.parse(element.parasmapping);
                    this.parasmappingInfoList[element.datasourceid] = element;
                }));
                this.parasmappingInfoChange.next({ parasInfoList: this.parasmappingInfoList });
                return this.parasmappingInfoList;
            }
            else {
                this.parasmappingInfoChange.next({ parasInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存参数映射
     * @param {?} parasmapping 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveParasMapping(parasmapping, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'saveparasmapping';
        /** @type {?} */
        const result$ = this.restService.post(restUri, parasmapping, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            parasmapping.parasmapping = JSON.parse(parasmapping.parasmapping);
            if (Object.keys(this.parasmappingInfoList).indexOf(parasmapping.datasourceid)) {
                this.parasmappingInfoList[parasmapping.datasourceid] = parasmapping;
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deleteParasMapping(datasourceid, queryId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deleteparasmapping';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.parasmappingInfoList[datasourceid] = null;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * 获取元数据信息
     * @param {?} Id metadataid
     * @return {?}
     */
    getMetaDataInfoById(Id) {
        /** @type {?} */
        const restUri = this.host + '/api/runtime/lcm/v1.0/rt-metadatas/' + Id;
        /** @type {?} */
        const result$ = this.restService.get(restUri, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                return data;
            }
            else {
                return null;
            }
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
ParasMappingManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParasMappingManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PrintIntegrationManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/printintegration/';
        this.printIntegrationInfoChange = new Subject();
        this.printIntegrationInfoList = {};
    }
    /**
     * 获取查询参数映射信息
     * @param {?} schemaId 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getPrintIntegration(schemaId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const result$ = this.getPrintIntegrationList(queryId, schemaId, '', '', queryRelativeUrl);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[schemaId + queryId]) {
                return value[schemaId + queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取打印设置信息列表
     * @param {?} queryId 查询编号
     * @param {?} schemaId 方案ID
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getPrintIntegrationList(queryId, schemaId, userId, languageType, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getprintintegrationlist';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { queryId, schemaId, userId, languageType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.printintegration = JSON.parse(element.printintegration);
                    this.printIntegrationInfoList[schemaId + queryId] = element;
                }));
                this.printIntegrationInfoChange.next({ printIntegrationInfoList: this.printIntegrationInfoList });
                return this.printIntegrationInfoList;
            }
            else {
                this.printIntegrationInfoChange.next({ printIntegrationInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存打印设置信息
     * @param {?} element 打印设置
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    savePrintIntegration(element, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'saveprintintegration';
        /** @type {?} */
        const integration = element;
        /** @type {?} */
        const result$ = this.restService.post(restUri, integration, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            element.printintegration = JSON.parse(element.printintegration);
            if (Object.keys(this.printIntegrationInfoList).indexOf(element.schemaId + element.queryId)) {
                this.printIntegrationInfoList[element.schemaId + element.queryId] = element;
            }
        })));
    }
    /**
     * 删除打印设置信息
     * @param {?} schemaId 方案ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deletePrintIntegration(schemaId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deleteprintintegration';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { schemaId, queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.printIntegrationInfoList[schemaId + queryId] = null;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
PrintIntegrationManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintIntegrationManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JointSearchManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/joinsearch/';
        this.localUri = '/api/runtime/sys/v1.0/loginInfo';
        this.lcpUri = '/api/runtime/bcc/v1.0/qdpsearch/';
        this.jointsearchInfoChange = new Subject();
        this.jointsearchInfoList = {};
        // this.uri = this.host + this.uri;
    }
    /**
     * 获取查询参数映射信息
     * @param {?} formId
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getjointsearch(formId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const result$ = this.getjointsearchList(formId, queryId, '', '', queryRelativeUrl);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[formId + queryId]) {
                return value[formId + queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * @param {?} visibleJointParam
     * @param {?} queryRelativeUrl
     * @param {?} searchList
     * @return {?}
     */
    getVisibleJoint(visibleJointParam, queryRelativeUrl, searchList) {
        /** @type {?} */
        const jointUri = this.host + (!queryRelativeUrl ? this.lcpUri : queryRelativeUrl) + 'visiblejoint';
        /** @type {?} */
        const result$ = this.restService.put(jointUri, { 'Param': visibleJointParam }, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const jointSearchList = [];
            if (data) {
                data = !queryRelativeUrl ? data : data.returnValue;
                if (!queryRelativeUrl) {
                    for (const search of searchList) {
                        if (data[search.id] !== null && data[search.id] === true) {
                            jointSearchList.push(search);
                        }
                    }
                }
                else {
                    for (const search of searchList) {
                        /** @type {?} */
                        const item = data.find((/**
                         * @param {?} d
                         * @return {?}
                         */
                        d => d.id === search.id));
                        if (item && item.visible === true) {
                            jointSearchList.push(search);
                        }
                    }
                }
            }
            return jointSearchList;
        })));
    }
    /**
     * 获取参数映射列表
     * @param {?} formId
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getjointsearchList(formId, queryId, userId, languageType, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getjoinsearch';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { formId, queryId, userId, languageType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            // this.jointsearchInfoList = {};
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    this.jointsearchInfoList[element.formId + element.queryId] = element;
                }));
                this.jointsearchInfoChange.next({ jointsearchInfoList: this.jointsearchInfoList });
                return this.jointsearchInfoList;
            }
            else {
                this.jointsearchInfoChange.next({ jointsearchInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存参数映射
     * @param {?} jointsearch 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    savejointsearch(jointsearch, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'addjointsearch';
        /** @type {?} */
        const result$ = this.restService.post(restUri, jointsearch, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.jointsearchInfoList[jointsearch.FormId + jointsearch.queryId] = jointsearch;
                return true;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * 删除联查
     * @param {?} formId
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    deletejointsearch(formId, queryId, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deletejointsearch';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { formId, queryId }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.jointsearchInfoList[formId + queryId] = null;
                return true;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * @return {?}
     */
    getLanguageList() {
        /** @type {?} */
        const result$ = this.restService.get(this.localUri, { infoType: 'supportedLanguage' });
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
JointSearchManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
JointSearchManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class DataRenderExtendService {
}
DataRenderExtendService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ DataRenderExtendService.ngInjectableDef = defineInjectable({ factory: function DataRenderExtendService_Factory() { return new DataRenderExtendService(); }, token: DataRenderExtendService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class JointSearchExtendService {
}
JointSearchExtendService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ JointSearchExtendService.ngInjectableDef = defineInjectable({ factory: function JointSearchExtendService_Factory() { return new JointSearchExtendService(); }, token: JointSearchExtendService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterManagerService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     */
    constructor(restService, sessionService, host) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.uri = '/api/runtime/bcc/v1.0/qdpfilter/';
        this.filterInfoChange = new Subject();
        this.isFilterQDP = new Subject(); // 是否刷新
        // 是否刷新
        this.filterInfoList = {};
        // this.uri = this.host + this.uri;
    }
    /**
     * 获取查询参数映射信息
     * @param {?} id 数据源ID
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @param {?=} groupType
     * @return {?}
     */
    getFilter(id, queryId, queryRelativeUrl, queryType, groupType) {
        /** @type {?} */
        const result$ = this.getFilterList(queryId, id, groupType, '', queryRelativeUrl, queryType);
        return result$.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value && value[queryId]) {
                return value[queryId];
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 获取参数映射列表
     * @param {?} queryId 查询编号
     * @param {?} datasourceId
     * @param {?} groupType
     * @param {?} languageType 语言类型
     * @param {?} queryRelativeUrl
     * @param {?=} queryType
     * @return {?}
     */
    getFilterList(queryId, datasourceId, groupType, languageType, queryRelativeUrl, queryType = 0) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'getfilterlist';
        /** @type {?} */
        const result$ = this.restService.get(restUri, { queryId, datasourceId, groupType, languageType, queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    element.filter = JSON.parse(element.filter);
                    this.filterInfoList[element.queryid] = element;
                }));
                this.filterInfoChange.next({ parasInfoList: this.filterInfoList });
                return this.filterInfoList;
            }
            else {
                this.filterInfoChange.next({ parasInfoList: null });
                return null;
            }
        })));
    }
    /**
     * 保存参数映射
     * @param {?} filter 参数映射实体
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    saveFilter(filter$$1, queryRelativeUrl) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'savefilter';
        /** @type {?} */
        const result$ = this.restService.post(restUri, filter$$1, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @return {?}
         */
        () => {
            filter$$1.filter = JSON.parse(filter$$1.filter);
            if (Object.keys(this.filterInfoList).indexOf(filter$$1.queryid)) {
                this.filterInfoList[filter$$1.queryid] = filter$$1;
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} datasourceid
     * @param {?} queryId 查询编号
     * @param {?} queryRelativeUrl
     * @param {?} queryType
     * @return {?}
     */
    deleteFilter(datasourceid, queryId, queryRelativeUrl, queryType) {
        /** @type {?} */
        const restUri = this.host + this.uri + 'deletefilter';
        /** @type {?} */
        const result$ = this.restService.delete(restUri, { datasourceId: datasourceid, queryId, queryType }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                this.filterInfoList[queryId] = null;
            }
            else {
                return false;
            }
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
FilterManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterManagerService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EventBus {
    /**
     * @param {?} eventType
     * @param {?} handler
     * @param {?=} eventId
     * @return {?}
     */
    static register(eventType, handler, eventId) {
        if (!this.handlers[eventType]) {
            this.handlers[eventType] = {};
        }
        /** @type {?} */
        let id = eventId;
        if (!id) {
            id = this.guid();
        }
        this.handlers[eventType][id] = handler;
        /** @type {?} */
        const unsubscribe = (/**
         * @return {?}
         */
        () => {
            delete this.handlers[eventType][id];
            if (Object.keys(this.handlers[eventType]).length === 0) {
                delete this.handlers[eventType];
            }
        });
        return unsubscribe;
    }
    /**
     * @param {?} eventType
     * @param {?} args
     * @return {?}
     */
    static dispatch(eventType, args) {
        if (this.handlers[eventType]) {
            Object.keys(this.handlers[eventType]).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                this.handlers[eventType][key](args);
            }));
        }
    }
    /**
     * @return {?}
     */
    static guid() {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
}
EventBus.handlers = {};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JSONUtils {
    /**
     * @param {?} object
     * @return {?}
     */
    static isObj(object) {
        return object && typeof (object) == 'object' && Object.prototype.toString.call(object).toLowerCase() == "[object object]";
    }
    /**
     * @param {?} object
     * @return {?}
     */
    static isArray(object) {
        return object && typeof (object) == 'object' && object.constructor == Array;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    static getLength(object) {
        /** @type {?} */
        var count = 0;
        for (var i in object)
            count++;
        return count;
    }
    /**
     * @param {?} objA
     * @param {?} objB
     * @return {?}
     */
    static Compare(objA, objB) {
        if (!JSONUtils.isObj(objA) || !JSONUtils.isObj(objB))
            return false; //判断类型是否正确
        if (JSONUtils.getLength(objA) != JSONUtils.getLength(objB))
            return false; //判断长度是否一致
        return JSONUtils.CompareObj(objA, objB, true); //默认为true
    }
    /**
     * @private
     * @param {?} objA
     * @param {?} objB
     * @param {?} flag
     * @return {?}
     */
    static CompareObj(objA, objB, flag) {
        for (var key in objA) {
            if (!flag) //跳出整个循环
                break;
            if (!objB.hasOwnProperty(key)) {
                flag = false;
                break;
            }
            if (!JSONUtils.isArray(objA[key])) { //子级不是数组时,比较属性值
                if (objB[key] != objA[key]) {
                    flag = false;
                    break;
                }
            }
            else {
                if (!JSONUtils.isArray(objB[key])) {
                    flag = false;
                    break;
                }
                /** @type {?} */
                var oA = objA[key];
                /** @type {?} */
                var oB = objB[key];
                if (oA.length != oB.length) {
                    flag = false;
                    break;
                }
                for (var k in oA) {
                    if (!flag) //这里跳出循环是为了不让递归继续
                        break;
                    flag = JSONUtils.CompareObj(oA[k], oB[k], flag);
                }
            }
        }
        return flag;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QDPCacheUtil {
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    static setCache(key, value) {
        QDPCacheUtil.CacheMap.set(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static getCache(key) {
        return QDPCacheUtil.CacheMap.get(key);
    }
}
QDPCacheUtil.CacheMap = new Map();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QdpCommonModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: QdpCommonModule,
            providers: [
                SessionService,
                SchemaManagerService,
                RestfulService,
                LcpService,
                ParasMappingManagerService,
                JointSearchManagerService,
                PrintIntegrationManagerService
            ]
        };
    }
}
QdpCommonModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [],
                exports: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DndDraggableService {
    constructor() {
        this._isDragging = false;
        this._itemType = '';
        this._removeOnDrop = false;
        this.dropEndSource = new Subject();
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setDraggingState(state) {
        this._isDragging = state;
    }
    /**
     * @return {?}
     */
    getDraggingState() {
        return this._isDragging;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setItemType(value) {
        this._itemType = value.toLowerCase();
    }
    /**
     * @return {?}
     */
    getItemType() {
        return this._itemType;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setDropCallback(value) {
        this._dropCallback = value;
    }
    /**
     * @return {?}
     */
    getDropCallback() {
        return this._dropCallback;
    }
    /**
     * @param {?} dropEffect
     * @return {?}
     */
    setDropEffect(dropEffect) {
        this._dropEffect = dropEffect;
    }
    /**
     * @return {?}
     */
    getDropEffect() {
        return this._dropEffect;
    }
    /**
     * @param {?} effectAllowed
     * @return {?}
     */
    setEffectAllowed(effectAllowed) {
        this._effectAllowed = effectAllowed;
    }
    /**
     * @return {?}
     */
    getEffectAllowed() {
        return this._effectAllowed;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setRemoveOnDrop(value) {
        this._removeOnDrop = value;
    }
    /**
     * @return {?}
     */
    getRemoveOnDrop() {
        return this._removeOnDrop;
    }
}
DndDraggableService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DndDraggableService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MIME_TYPE = 'application/x-dnd';
/** @type {?} */
const EDGE_MIME_TYPE = 'application/json';
/** @type {?} */
const MSIE_MIME_TYPE = 'Text';
/** @type {?} */
const ALL_EFFECTS = ['move', 'copy', 'link'];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DndDraggableDirective {
    /**
     * @param {?} _dndService
     * @param {?} _renderer
     * @param {?} _hostElement
     */
    constructor(_dndService, _renderer, _hostElement) {
        this._dndService = _dndService;
        this._renderer = _renderer;
        this.dndType = '';
        this.dndDragstart = new EventEmitter();
        this.dndDragend = new EventEmitter();
        this.dndSelected = new EventEmitter();
        this.dndMoved = new EventEmitter();
        this.dndCopied = new EventEmitter();
        this.dndLinked = new EventEmitter();
        this.dndCanceled = new EventEmitter();
        if (_hostElement) {
            this._nativeElement = _hostElement.nativeElement;
        }
    }
    /**
     * @return {?}
     */
    get draggable() {
        return !this.dndDisable;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragStart(event) {
        event = event.originalEvent || event;
        if (!this.draggable) {
            return true;
        }
        this._dndService.setDraggingState(true);
        this._dndService.setItemType(this.dndType);
        /** @type {?} */
        const mimeType = MIME_TYPE + (this._dndService.getItemType() ? ('-' + this._dndService.getItemType()) : '');
        // Set the allowed drop effects. See below for special IE handling.
        this._dndService.setDropEffect('none');
        this._dndService.setEffectAllowed(this.dndEffectAllowed || ALL_EFFECTS[0]);
        event.dataTransfer.effectAllowed = this._dndService.getEffectAllowed(); // TODO: set allowed effects
        try {
            event.dataTransfer.setData(mimeType, JSON.stringify(this.dndDraggable));
        }
        catch (e) {
            /** @type {?} */
            const data = {
                item: this.dndDraggable,
                type: this._dndService.getItemType()
            };
            try {
                // Setting a custom MIME type did not work, we are probably in IE or Edge.
                event.dataTransfer.setData(EDGE_MIME_TYPE, JSON.stringify(data));
            }
            catch (e) {
                // We are in Internet Explorer and can only use the Text MIME type. Also note that IE
                // does not allow changing the cursor in the dragover event, therefore we have to choose
                // the one we want to display now by setting effectAllowed.
                event.dataTransfer.effectAllowed = 'move';
                event.dataTransfer.setData(MSIE_MIME_TYPE, JSON.stringify(data));
            }
        }
        this._renderer.addClass(this._nativeElement, 'dndDragging');
        setTimeout((/**
         * @return {?}
         */
        () => this._renderer.addClass(this._nativeElement, 'dndDraggingSource')), 0);
        // Try setting a proper drag image if triggered on a dnd-handle (won't work in IE).
        if (event._dndHandle && event.dataTransfer.setDragImage) {
            event.dataTransfer.setDragImage(this._nativeElement, 0, 0);
        }
        // Emit dragstart event and prepare extra callback for dropzone.
        this.dndDragstart.emit(event);
        if (this.dndCallback) {
            /** @type {?} */
            const callback = this.dndCallback;
            this._dndService.setDropCallback((/**
             * @param {?} params
             * @return {?}
             */
            function (params) {
                return callback(params);
            }));
        }
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnd(event) {
        /** @type {?} */
        const dropEffect = this._dndService.getDropEffect();
        /** @type {?} */
        const cb = { copy: 'dndCopied', link: 'dndLinked', move: 'dndMoved', none: 'dndCanceled' };
        this[cb[dropEffect]].emit(event);
        this.dndDragend.emit({
            event: event,
            dropEffect: dropEffect
        });
        // Clean up
        this._dndService.setDraggingState(false);
        this._dndService.setDropCallback(undefined);
        this._dndService.setRemoveOnDrop(false);
        this._renderer.removeClass(this._nativeElement, 'dndDragging');
        this._renderer.removeClass(this._nativeElement, 'dndDraggingSource');
        event.stopPropagation();
        // In IE9 it is possible that the timeout from dragstart triggers after the dragend handler.
        setTimeout((/**
         * @return {?}
         */
        () => this._renderer.removeClass(this._nativeElement, 'dndDraggingSource')), 0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        this.dndSelected.emit(event);
        // Prevent triggering dndSelected in parent elements.
        event.stopPropagation();
    }
}
DndDraggableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dndDraggable]',
            },] }
];
/** @nocollapse */
DndDraggableDirective.ctorParameters = () => [
    { type: DndDraggableService },
    { type: Renderer2 },
    { type: ElementRef }
];
DndDraggableDirective.propDecorators = {
    dndDraggable: [{ type: Input }],
    dndDisable: [{ type: Input }],
    dndType: [{ type: Input }],
    dndCallback: [{ type: Input }],
    dndEffectAllowed: [{ type: Input }],
    dndDragstart: [{ type: Output }],
    dndDragend: [{ type: Output }],
    dndSelected: [{ type: Output }],
    dndMoved: [{ type: Output }],
    dndCopied: [{ type: Output }],
    dndLinked: [{ type: Output }],
    dndCanceled: [{ type: Output }],
    draggable: [{ type: HostBinding, args: ['draggable',] }],
    onDragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],
    onDragEnd: [{ type: HostListener, args: ['dragend', ['$event'],] }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DndListDirective {
    /**
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} _dndService
     */
    constructor(_el, _renderer, _dndService) {
        this._el = _el;
        this._renderer = _renderer;
        this._dndService = _dndService;
        this.dndDisable = false;
        this.dndListChange = new EventEmitter();
        this.dndDragover = new EventEmitter();
        this.dndDrop = new EventEmitter();
        this.dndInserted = new EventEmitter();
        this._listSettings = {};
        this._dragOverStopped = false;
        this._counter = 0;
        this._nativeElement = this._el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const placeholder = this._getPlaceholderElement();
        placeholder.remove();
        this._placeholderNode = placeholder;
        this._listNode = this._nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnter(event) {
        this._counter++;
        this._dragOverStopped = false;
        event = event.originalEvent || event;
        this._listSettings = {
            allowedTypes: Array.isArray(this.dndAllowedTypes) && this.dndAllowedTypes.join('|').toLowerCase().split('|'),
            disabled: this.dndDisable,
            externalSources: this.dndExternalSources,
            horizontal: this.dndHorizontalList
        };
        /** @type {?} */
        const mimeType = this._getMimeType(event.dataTransfer.types);
        if (!mimeType || !this._isDropAllowed(this._getItemType(mimeType))) {
            return true;
        }
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        event = event.originalEvent || event;
        // Check whether the drop is allowed and determine mime type.
        /** @type {?} */
        const mimeType = this._getMimeType(event.dataTransfer.types);
        /** @type {?} */
        const itemType = this._getItemType(mimeType);
        if (!mimeType || !this._isDropAllowed(itemType)) {
            return true;
        }
        // Make sure the placeholder is shown, which is especially important if the list is empty.
        if (this._placeholderNode.parentNode !== this._listNode) {
            this._renderer.appendChild(this._nativeElement, this._placeholderNode);
        }
        if (event.target !== this._listNode) {
            // Try to find the node direct directly below the list node.
            /** @type {?} */
            let listItemNode = event.target;
            while (listItemNode.parentNode !== this._listNode && listItemNode.parentNode) {
                listItemNode = listItemNode.parentNode;
            }
            if (listItemNode.parentNode === this._listNode && listItemNode !== this._placeholderNode) {
                // If the mouse pointer is in the upper half of the list item element,
                // we position the placeholder before the list item, otherwise after it.
                /** @type {?} */
                const rect = listItemNode.getBoundingClientRect();
                /** @type {?} */
                let isFirstHalf;
                if (this._listSettings.horizontal) {
                    isFirstHalf = event.clientX < rect.left + rect.width / 2;
                }
                else {
                    isFirstHalf = event.clientY < rect.top + rect.height / 2;
                }
                this._listNode.insertBefore(this._placeholderNode, isFirstHalf ? listItemNode : listItemNode.nextSibling);
            }
        }
        // In IE we set a fake effectAllowed in dragstart to get the correct cursor, we therefore
        // ignore the effectAllowed passed in dataTransfer. We must also not access dataTransfer for
        // drops from external sources, as that throws an exception.
        /** @type {?} */
        const ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;
        /** @type {?} */
        const dropEffect = this._getDropEffect(event, ignoreDataTransfer);
        if (dropEffect === 'none') {
            return this._stopDragover();
        }
        // At this point we invoke the callback, which still can disallow the drop.
        // We can't do this earlier because we want to pass the index of the placeholder.
        this.dndDragover.emit(this._getEventResponse(event, dropEffect, itemType));
        if (this._dragOverStopped) {
            return this._stopDragover();
        }
        // Set dropEffect to modify the cursor shown by the browser, unless we're in IE, where this
        // is not supported. This must be done after preventDefault in Firefox.
        event.preventDefault();
        if (!ignoreDataTransfer) {
            event.dataTransfer.dropEffect = dropEffect;
        }
        this._renderer.addClass(this._nativeElement, 'dndDragover');
        event.stopPropagation();
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        this._counter = 0;
        event = event.originalEvent || event;
        // Check whether the drop is allowed and determine mime type.
        /** @type {?} */
        const mimeType = this._getMimeType(event.dataTransfer.types);
        /** @type {?} */
        let itemType = this._getItemType(mimeType);
        if (!mimeType || !this._isDropAllowed(itemType)) {
            return true;
        }
        // The default behavior in Firefox is to interpret the dropped element as URL and
        // forward to it. We want to prevent that even if our drop is aborted.
        event.preventDefault();
        // Unserialize the data that was serialized in dragstart.
        /** @type {?} */
        let data;
        try {
            data = JSON.parse(event.dataTransfer.getData(mimeType));
        }
        catch (e) {
            return this._stopDragover();
        }
        // Drops with invalid types from external sources might not have been filtered out yet.
        if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {
            itemType = data.type || undefined;
            data = data.item;
            if (!this._isDropAllowed(itemType)) {
                return this._stopDragover();
            }
        }
        // Special handling for internal IE drops, see dragover handler.
        /** @type {?} */
        const ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;
        /** @type {?} */
        const dropEffect = this._getDropEffect(event, ignoreDataTransfer);
        if (dropEffect === 'none') {
            return this._stopDragover();
        }
        // Invoke the callback, which can transform the transferredObject and even abort the drop.
        /** @type {?} */
        const index = this._getPlaceholderIndex();
        this.dndDrop.emit(this._getEventResponse(event, dropEffect, itemType, index, data));
        if (this._dragOverStopped) {
            return this._stopDragover();
        }
        // The drop is definitely going to happen now, store the dropEffect.
        this._dndService.setDropEffect(dropEffect);
        if (!ignoreDataTransfer) {
            event.dataTransfer.dropEffect = dropEffect;
        }
        if (this.dndList) {
            // Creates a new array adding the object into the array position without mutate the original.
            /** @type {?} */
            const newList = [...this.dndList.slice(0, index), data, ...this.dndList.slice(index)];
            this.dndListChange.emit(newList);
        }
        this._dndService.setRemoveOnDrop(true);
        // this._dndService.dropEndSource()
        this.dndInserted.emit(this._getEventResponse(event, dropEffect, itemType, index, data));
        // Clean up
        this._stopDragover();
        event.stopPropagation();
        return false;
    }
    /**
     * We have to remove the placeholder when the element is no longer dragged over our list. The
     * problem is that the dragleave event is not only fired when the element leaves our list,
     * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
     * is still pointing to an element inside the list or not.
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        this._counter--;
        event = event.originalEvent || event;
        if (this._counter !== 0) {
            // Signalize to potential parent lists that a placeholder is already shown.
            event._dndPhShown = true;
        }
        else {
            this._stopDragover();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onmouseout(event) {
        if (this._dndService.getDraggingState()) {
            this._stopDragover();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _stopDrag() {
        this._dragOverStopped = true;
    }
    /**
     * @private
     * @return {?}
     */
    _stopDragover() {
        this._placeholderNode.remove();
        this._renderer.removeClass(this._nativeElement, 'dndDragover');
        return true;
    }
    /**
     * Create a DndListEvent instance for events response.
     * @private
     * @param {?} event
     * @param {?} dropEffect
     * @param {?} itemType
     * @param {?=} index
     * @param {?=} item
     * @return {?}
     */
    _getEventResponse(event, dropEffect, itemType, index, item) {
        return {
            callback: this._dndService.getDropCallback(),
            dropEffect: dropEffect,
            event: event,
            external: !this._dndService.getDraggingState(),
            index: index !== undefined ? index : this._getPlaceholderIndex(),
            item: item || undefined,
            stopDragover: this._stopDrag.bind(this),
            type: itemType
        };
    }
    /**
     * @private
     * @return {?}
     */
    _getPlaceholderIndex() {
        return Array.prototype.indexOf.call(this._nativeElement.children, this._placeholderNode);
    }
    /**
     * @private
     * @return {?}
     */
    _getPlaceholderElement() {
        /** @type {?} */
        let placeholder = [].slice.call(this._nativeElement.children).filter((/**
         * @param {?} childNode
         * @return {?}
         */
        (childNode) => {
            return childNode.className.indexOf('dndPlaceholder') > -1;
        }));
        if (placeholder.length) {
            return placeholder;
        }
        placeholder = this._renderer.createElement('li');
        this._renderer.addClass(placeholder, 'dndPlaceholder');
        return placeholder;
    }
    /**
     * @private
     * @param {?} types
     * @return {?}
     */
    _getMimeType(types) {
        if (!types) {
            return MSIE_MIME_TYPE; // IE 9 workaround.
        }
        for (let i = 0; i < types.length; i++) {
            if (types[i] === MSIE_MIME_TYPE || types[i] === EDGE_MIME_TYPE ||
                types[i].substr(0, MIME_TYPE.length) === MIME_TYPE) {
                return types[i];
            }
        }
        return null;
    }
    /**
     * Determines the type of the item from the dndService, or from the mime type for items from
     * external sources. Returns undefined if no item type was set and null if the item type could
     * not be determined.
     * @private
     * @param {?} mimeType
     * @return {?}
     */
    _getItemType(mimeType) {
        if (this._dndService.getDraggingState()) {
            return this._dndService.getItemType() || undefined;
        }
        if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {
            return null;
        }
        return (mimeType && mimeType.substr(MIME_TYPE.length + 1)) || undefined;
    }
    /**
     * @private
     * @param {?} itemType
     * @return {?}
     */
    _isDropAllowed(itemType) {
        if (this._listSettings.disabled) {
            return false;
        }
        if (!this._listSettings.externalSources && !this._dndService.getDraggingState()) {
            return false;
        }
        if (!this._listSettings.allowedTypes || itemType === null) {
            return true;
        }
        return itemType && this._listSettings.allowedTypes.indexOf(itemType) !== -1;
    }
    /**
     * Determines which drop effect to use for the given event. In Internet Explorer we have to
     * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
     * In those cases we rely on dndState to filter effects. Read the design doc for more details:
     * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
     * @private
     * @param {?} event
     * @param {?} ignoreDataTransfer
     * @return {?}
     */
    _getDropEffect(event, ignoreDataTransfer) {
        /** @type {?} */
        let effects = ALL_EFFECTS;
        if (!ignoreDataTransfer) {
            effects = this._filterEffects(effects, event.dataTransfer.effectAllowed);
        }
        if (this._dndService.getDraggingState()) {
            effects = this._filterEffects(effects, this._dndService.getEffectAllowed());
        }
        if (this.dndEffectAllowed) {
            effects = this._filterEffects(effects, this.dndEffectAllowed);
        }
        // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
        // therefore the following modifier keys will only affect other operating systems.
        if (!effects.length) {
            return 'none';
        }
        else if (event.ctrlKey && effects.indexOf('copy') !== -1) {
            return 'copy';
        }
        else if (event.altKey && effects.indexOf('link') !== -1) {
            return 'link';
        }
        else {
            return effects[0];
        }
    }
    /**
     * Filters an array of drop effects using a HTML5 effectAllowed string.
     * @private
     * @param {?} effects
     * @param {?} effectAllowed
     * @return {?}
     */
    _filterEffects(effects, effectAllowed) {
        if (effectAllowed === 'all') {
            return effects;
        }
        return effects.filter((/**
         * @param {?} effect
         * @return {?}
         */
        function (effect) {
            return effectAllowed.toLowerCase().indexOf(effect) !== -1;
        }));
    }
}
DndListDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dndList]',
            },] }
];
/** @nocollapse */
DndListDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: DndDraggableService }
];
DndListDirective.propDecorators = {
    dndDisable: [{ type: Input }],
    dndAllowedTypes: [{ type: Input }],
    dndExternalSources: [{ type: Input }],
    dndHorizontalList: [{ type: Input }],
    dndEffectAllowed: [{ type: Input }],
    pureComponent: [{ type: Input }],
    dndList: [{ type: Input }],
    dndListChange: [{ type: Output }],
    dndDragover: [{ type: Output }],
    dndDrop: [{ type: Output }],
    dndInserted: [{ type: Output }],
    onDragEnter: [{ type: HostListener, args: ['dragenter', ['$event'],] }],
    onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],
    onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
    onmouseout: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DndNodragDirective {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    get draggable() {
        return true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragStart(event) {
        event = event.originalEvent || event;
        if (!event._dndHandle) {
            // If a child element already reacted to dragstart and set a dataTransfer object, we will
            // allow that. For example, this is the case for user selections inside of input elements.
            if (!(event.dataTransfer.types && event.dataTransfer.types.length)) {
                event.preventDefault();
            }
            event.stopPropagation();
        }
    }
    /**
     * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
     * would be removed.
     * @param {?} event
     * @return {?}
     */
    onDragEnd(event) {
        event = event.originalEvent || event;
        if (!event._dndHandle) {
            event.stopPropagation();
        }
    }
}
DndNodragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dndNodrag]',
            },] }
];
/** @nocollapse */
DndNodragDirective.ctorParameters = () => [];
DndNodragDirective.propDecorators = {
    draggable: [{ type: HostBinding, args: ['draggable',] }],
    onDragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],
    onDragEnd: [{ type: HostListener, args: ['dragend', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DndHandleDirective {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    get draggable() {
        return true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragStart(event) {
        event = event.originalEvent || event;
        event._dndHandle = true;
    }
}
DndHandleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dndHandle]',
            },] }
];
/** @nocollapse */
DndHandleDirective.ctorParameters = () => [];
DndHandleDirective.propDecorators = {
    draggable: [{ type: HostBinding, args: ['draggable',] }],
    onDragStart: [{ type: HostListener, args: ['dragstart dragend', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const declarations = [
    DndDraggableDirective,
    DndListDirective,
    DndNodragDirective,
    DndHandleDirective
];
class DndListModule {
}
DndListModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations,
                providers: [
                    DndDraggableService
                ],
                exports: declarations
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { RestfulService, SchemaManagerService, LcpService, IntegrationPrintService, ParasMappingManagerService, PrintIntegrationManagerService, JointSearchManagerService, DataRenderExtendService, JointSearchExtendService, SchemaRenderExtendService, FilterManagerService, EventBus, JSONUtils, QDPCacheUtil, RtfServices, Server_Host, Load_Data_Uri, Load_Data_Col, QdpCommonModule, DndListModule, DndDraggableDirective, DndHandleDirective, DndListDirective, DndNodragDirective, DndDraggableDirective as ɵa, DndHandleDirective as ɵe, DndListDirective as ɵc, DndNodragDirective as ɵd, DndDraggableService as ɵb };

//# sourceMappingURL=qdp-common.js.map