(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/devkit'), require('@qdp/common'), require('@ecp-caf/caf-common'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@qdp/echarts', ['exports', '@farris/devkit', '@qdp/common', '@ecp-caf/caf-common', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/common'], factory) :
    (factory((global.qdp = global.qdp || {}, global.qdp.echarts = {}),global['@farris/devkit'],global['@qdp/common'],global['@ecp-caf/caf-common'],global.rxjs,global.rxjs.operators,global.ng.core,global.ng.common));
}(this, (function (exports,devkit,common,cafCommon,rxjs,operators,core,common$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChangeFilter = /** @class */ (function () {
        function ChangeFilter(_changes) {
            this._changes = _changes;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ChangeFilter.of = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return new ChangeFilter(changes);
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notEmpty = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key]) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    if (value !== undefined && value !== null) {
                        return rxjs.of(value);
                    }
                }
                return rxjs.EMPTY;
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.has = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key]) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    return rxjs.of(value);
                }
                return rxjs.EMPTY;
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notFirst = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key] && !this._changes[key].isFirstChange()) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    return rxjs.of(value);
                }
                return rxjs.EMPTY;
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notFirstAndEmpty = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this._changes[key] && !this._changes[key].isFirstChange()) {
                    /** @type {?} */
                    var value = this._changes[key].currentValue;
                    if (value !== undefined && value !== null) {
                        return rxjs.of(value);
                    }
                }
                return rxjs.EMPTY;
            };
        return ChangeFilter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxEchartsDirective = /** @class */ (function () {
        function NgxEchartsDirective(el, ngZone) {
            this.el = el;
            this.ngZone = ngZone;
            this.autoResize = true;
            this.loadingType = 'default';
            this.detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version
            // deprecated, left for compatibility reasons to avoid triggering major version
            // ngx-echarts events
            this.chartInit = new core.EventEmitter();
            // echarts mouse events
            this.chartClick = this.createLazyEvent('click');
            this.chartDblClick = this.createLazyEvent('dblclick');
            this.chartMouseDown = this.createLazyEvent('mousedown');
            this.chartMouseMove = this.createLazyEvent('mousemove');
            this.chartMouseUp = this.createLazyEvent('mouseup');
            this.chartMouseOver = this.createLazyEvent('mouseover');
            this.chartMouseOut = this.createLazyEvent('mouseout');
            this.chartGlobalOut = this.createLazyEvent('globalout');
            this.chartContextMenu = this.createLazyEvent('contextmenu');
            // echarts mouse events
            this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');
            this.chartLegendSelected = this.createLazyEvent('legendselected');
            this.chartLegendUnselected = this.createLazyEvent('legendunselected');
            this.chartLegendScroll = this.createLazyEvent('legendscroll');
            this.chartDataZoom = this.createLazyEvent('datazoom');
            this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');
            this.chartTimelineChanged = this.createLazyEvent('timelinechanged');
            this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');
            this.chartRestore = this.createLazyEvent('restore');
            this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');
            this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');
            this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');
            this.chartPieSelected = this.createLazyEvent('pieselected');
            this.chartPieUnselected = this.createLazyEvent('pieunselected');
            this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');
            this.chartMapSelected = this.createLazyEvent('mapselected');
            this.chartMapUnselected = this.createLazyEvent('mapunselected');
            this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');
            this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');
            this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');
            this.chartBrush = this.createLazyEvent('brush');
            this.chartBrushSelected = this.createLazyEvent('brushselected');
            this.chartRendered = this.createLazyEvent('rendered');
            this.chartFinished = this.createLazyEvent('finished');
            this.currentOffsetWidth = 0;
            this.currentOffsetHeight = 0;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                /** @type {?} */
                var filter = ChangeFilter.of(changes);
                filter.notFirstAndEmpty('options').subscribe(( /**
                 * @param {?} opt
                 * @return {?}
                 */function (opt) { return _this.onOptionsChange(opt); }));
                filter.notFirstAndEmpty('merge').subscribe(( /**
                 * @param {?} opt
                 * @return {?}
                 */function (opt) { return _this.setOption(opt); }));
                filter.has('loading').subscribe(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) { return _this.toggleLoading(!!v); }));
                filter.notFirst('theme').subscribe(( /**
                 * @return {?}
                 */function () { return _this.refreshChart(); }));
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.resizeSub = rxjs.fromEvent(window, 'resize').pipe(operators.debounceTime(50)).subscribe(( /**
                 * @return {?}
                 */function () {
                    if (_this.autoResize && window.innerWidth !== _this.currentWindowWidth) {
                        _this.currentWindowWidth = window.innerWidth;
                        _this.currentOffsetWidth = _this.el.nativeElement.offsetWidth;
                        _this.currentOffsetHeight = _this.el.nativeElement.offsetHeight;
                        _this.resize();
                    }
                }));
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                // tslint:disable-next-line:no-unused-expression
                this.resizeSub && this.resizeSub.unsubscribe();
                this.dispose();
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                // No heavy work in DoCheck!
                if (this.chart && this.autoResize) {
                    /** @type {?} */
                    var offsetWidth = this.el.nativeElement.offsetWidth;
                    /** @type {?} */
                    var offsetHeight = this.el.nativeElement.offsetHeight;
                    if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {
                        this.currentOffsetWidth = offsetWidth;
                        this.currentOffsetHeight = offsetHeight;
                        this.resize();
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () { return _this.initChart(); }));
            };
        /**
         * @private
         * @return {?}
         */
        NgxEchartsDirective.prototype.dispose = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.chart) {
                    this.chart.dispose();
                    this.chart = null;
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxEchartsDirective.prototype.resize = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.chart) {
                    this.chart.resize();
                }
            };
        /**
         * @private
         * @param {?} loading
         * @return {?}
         */
        NgxEchartsDirective.prototype.toggleLoading = /**
         * @private
         * @param {?} loading
         * @return {?}
         */
            function (loading) {
                if (this.chart) {
                    loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();
                }
            };
        // 保存visualMap
        // 保存visualMap
        /**
         * @param {?} option
         * @param {?=} opts
         * @return {?}
         */
        NgxEchartsDirective.prototype.setOption =
            // 保存visualMap
            /**
             * @param {?} option
             * @param {?=} opts
             * @return {?}
             */
            function (option, opts) {
                this.chart.setOption(option, opts);
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.clearOption = /**
         * @return {?}
         */
            function () {
                if (this.chart) {
                    this.chart.clear();
                }
            };
        /**
         * @return {?}
         */
        NgxEchartsDirective.prototype.getOption = /**
         * @return {?}
         */
            function () {
                return this.chart.getOption();
            };
        /**
         * @private
         * @return {?}
         */
        NgxEchartsDirective.prototype.refreshChart = /**
         * @private
         * @return {?}
         */
            function () {
                this.dispose();
                this.initChart();
            };
        /**
         * @private
         * @return {?}
         */
        NgxEchartsDirective.prototype.createChart = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.currentWindowWidth = window.innerWidth;
                this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
                this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
                /** @type {?} */
                var dom = this.el.nativeElement;
                if (window && window.getComputedStyle) {
                    /** @type {?} */
                    var prop = window.getComputedStyle(dom, null).getPropertyValue('height');
                    if ((!prop || prop === '0px') &&
                        (!dom.style.height || dom.style.height === '0px')) {
                        dom.style.height = '400px';
                    }
                }
                return this.ngZone.runOutsideAngular(( /**
                 * @return {?}
                 */function () { return echarts.init(dom, _this.theme, _this.initOpts); }));
            };
        /**
         * @private
         * @return {?}
         */
        NgxEchartsDirective.prototype.initChart = /**
         * @private
         * @return {?}
         */
            function () {
                this.onOptionsChange(this.options);
                if (this.merge && this.chart) {
                    this.setOption(this.merge);
                }
            };
        /**
         * @private
         * @param {?} opt
         * @return {?}
         */
        NgxEchartsDirective.prototype.onOptionsChange = /**
         * @private
         * @param {?} opt
         * @return {?}
         */
            function (opt) {
                if (opt) {
                    if (!this.chart) {
                        this.chart = this.createChart();
                        this.chartInit.emit(this.chart);
                    }
                    this.chart.setOption(this.options, true);
                }
                else {
                    if (!this.chart) {
                        this.chart = this.createChart();
                        this.chartInit.emit(this.chart);
                    }
                }
            };
        // allows to lazily bind to only those events that are requested through the `@Output` by parent components
        // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
        // allows to lazily bind to only those events that are requested through the `@Output` by parent components
        // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
        /**
         * @private
         * @template T
         * @param {?} eventName
         * @return {?}
         */
        NgxEchartsDirective.prototype.createLazyEvent =
            // allows to lazily bind to only those events that are requested through the `@Output` by parent components
            // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
            /**
             * @private
             * @template T
             * @param {?} eventName
             * @return {?}
             */
            function (eventName) {
                var _this = this;
                return ( /** @type {?} */(this.chartInit.pipe(operators.switchMap(( /**
                 * @param {?} chart
                 * @return {?}
                 */function (chart) {
                    return new rxjs.Observable(( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        chart.on(eventName, ( /**
                         * @param {?} data
                         * @return {?}
                         */function (data) {
                            return _this.ngZone.run(( /**
                             * @return {?}
                             */function () { return observer.next(data); }));
                        }));
                        return null; // no need to react on unsubscribe as long as the `dispose()` is called in ngOnDestroy
                    }));
                })))));
            };
        /**
         * @param {?} data1
         * @param {?} num
         * @return {?}
         */
        NgxEchartsDirective.prototype.setNumber = /**
         * @param {?} data1
         * @param {?} num
         * @return {?}
         */
            function (data1, num) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var l = data1.length;
                for (var i = 0; i < l; i++) {
                    arr[i] = data1[i][num];
                }
                return arr;
            };
        /**
         * @param {?} data
         * @param {?=} option
         * @return {?}
         */
        NgxEchartsDirective.prototype.setData = /**
         * @param {?} data
         * @param {?=} option
         * @return {?}
         */
            function (data, option) {
                var _this = this;
                if (this.chart) {
                    this.chart.clear();
                }
                data.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (item.dynamicPropSet) {
                        /** @type {?} */
                        var dy = item.dynamicPropSet;
                        delete item.dynamicPropSet;
                        Object.assign(item, dy);
                    }
                }));
                if (data && data.length) {
                    this.chartsData = {
                        dataset: {
                            dimensions: [],
                            source: []
                        }
                    };
                    Object.keys(data[0]).forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) {
                        _this.chartsData.dataset.dimensions.push(key);
                    }));
                    data.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        /** @type {?} */
                        var row = [];
                        Object.keys(item).forEach(( /**
                         * @param {?} key
                         * @return {?}
                         */function (key) {
                            row.push(item[key]);
                        }));
                        _this.chartsData.dataset.source.push(row);
                    }));
                    if (option) {
                        if (option.series && option.series.type && option.series.type === 'pie') {
                            /** @type {?} */
                            var resultOption = {
                                title: option.title,
                                dataset: this.chartsData.dataset,
                                tooltip: {
                                    formatter: '{d}%',
                                },
                                series: [{
                                        type: option.series.type,
                                        encode: {
                                            value: option.series.encode.y[0],
                                            itemName: option.series.encode.x[0],
                                        },
                                    }]
                            };
                            resultOption.dataset.source.splice(0, 0, resultOption.dataset.dimensions);
                            this.chart.setOption(resultOption);
                        }
                        else if (option.series && (option.series.type === 'line' || option.series.type === 'scatter')) {
                            option.dataset = this.chartsData.dataset;
                            this.setZoom(option);
                            /** @type {?} */
                            var row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0]);
                            option.visualMap[0].dimension = row1;
                            option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                            option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                            option.dataset.source.splice(0, 0, option.dataset.dimensions);
                            this.chart.setOption(option);
                        }
                        else if (option.series && option.series.type && option.series.type === 'effectScatter') {
                            option.dataset = this.chartsData.dataset;
                            if (option.series.encode.value2.length === 0) {
                                /** @type {?} */
                                var row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                                option.visualMap[0].dimension = row1;
                                option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                                option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                                /** @type {?} */
                                var row2 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                                option.visualMap[1].dimension = row2;
                                option.visualMap[1].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                                option.visualMap[1].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                            }
                            else {
                                /** @type {?} */
                                var row = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                                option.visualMap[0].dimension = row;
                                option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row));
                                option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row));
                                /** @type {?} */
                                var row2 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value2[0]);
                                option.visualMap[1].dimension = row2;
                                option.visualMap[1].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                                option.visualMap[1].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                            }
                            option.dataset.source.splice(0, 0, option.dataset.dimensions);
                            this.chart.setOption(option);
                        }
                        else if (option.series && option.series.type === 'bar') {
                            if (option.series.encode.y && option.series.encode.y.length < 2) {
                                /** @type {?} */
                                var arrayTemp1 = [];
                                /** @type {?} */
                                var arrayTemp2 = [];
                                // tslint:disable-next-line:prefer-for-of
                                for (var i = 0; i < this.chartsData.dataset.source.length; i++) {
                                    arrayTemp1.push(this.chartsData.dataset.source[i][this.chartsData.dataset.dimensions.indexOf(option.series.encode.x[0])]);
                                    arrayTemp2.push(this.chartsData.dataset.source[i][this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0])]);
                                }
                                /** @type {?} */
                                var isRepeat = Array.from(new Set(arrayTemp1)).length - arrayTemp1.length;
                                if (isRepeat === 0) {
                                    option.dataset = this.chartsData.dataset;
                                    this.setZoom(option);
                                    /** @type {?} */
                                    var row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0]);
                                    option.legend = {};
                                    option.visualMap[0].dimension = row1;
                                    option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                                    option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                                    option.dataset.source.splice(0, 0, option.dataset.dimensions);
                                    this.chart.setOption(option);
                                }
                                // 分组，重新设置数据格式和处理逻辑
                                if (isRepeat < 0) {
                                    option.visualMap = [];
                                    option.dataset = this.chartsData.dataset;
                                    this.setZoom(option);
                                    /** @type {?} */
                                    var ob = [];
                                    for (var i_1 = 0; i_1 < arrayTemp1.length; i_1++) {
                                        ob.push({
                                            name: arrayTemp1[i_1],
                                            value: arrayTemp2[i_1]
                                        });
                                    }
                                    /** @type {?} */
                                    var hash_1 = {};
                                    /** @type {?} */
                                    var i_2 = 0;
                                    /** @type {?} */
                                    var res_1 = [];
                                    ob.forEach(( /**
                                     * @param {?} item
                                     * @return {?}
                                     */function (item) {
                                        /** @type {?} */
                                        var name = item.name;
                                        hash_1[name] ? res_1[hash_1[name] - 1].value.push(item.value) : hash_1[name] = ++i_2 && res_1.push({
                                            name: name,
                                            value: [item.value],
                                        });
                                    }));
                                    // 拿到对象数组进行转置
                                    /** @type {?} */
                                    var xdata_1 = [];
                                    /** @type {?} */
                                    var max_1 = 0;
                                    res_1.forEach(( /**
                                     * @param {?} item
                                     * @return {?}
                                     */function (item) {
                                        xdata_1.push(item.name);
                                        if (item.value.length + 1 > max_1) {
                                            max_1 = item.value.length + 1;
                                        }
                                    }));
                                    /** @type {?} */
                                    var series_1 = [];
                                    /** @type {?} */
                                    var legendData = [];
                                    for (var i_3 = 1; i_3 < max_1; i_3++) {
                                        legendData.push(i_3 + '次');
                                        series_1.push({
                                            name: i_3 + '次',
                                            type: 'bar',
                                            stack: '总量',
                                            data: [],
                                        });
                                    }
                                    res_1.forEach(( /**
                                     * @param {?} item
                                     * @return {?}
                                     */function (item) {
                                        for (var i_4 = 0; i_4 < max_1 - 1; i_4++) {
                                            if (item.value[i_4]) {
                                                series_1[i_4].data.push(item.value[i_4]);
                                            }
                                            else {
                                                series_1[i_4].data.push(0);
                                            }
                                        }
                                    }));
                                    option.xAxis = [{ data: xdata_1 }];
                                    option.series = series_1;
                                    option.legend = { data: legendData };
                                    this.chart.setOption(option);
                                    return;
                                }
                            }
                            else if (option.series.encode.y && option.series.encode.y.length > 1) {
                                option.dataset = this.chartsData.dataset;
                                this.setZoom(option);
                                option.visualMap = [];
                                /** @type {?} */
                                var seriesChange = [];
                                // legend data
                                /** @type {?} */
                                var yList = option.series.encode.y;
                                for (var i = 0; i < yList.length; i++) {
                                    /** @type {?} */
                                    var temp = {
                                        type: option.series.type,
                                        name: option.legend.data[i],
                                        encode: {
                                            x: option.series.encode.x,
                                            y: [yList[i]],
                                        },
                                        label: {
                                            normal: {
                                                show: true,
                                                position: 'insideTop'
                                            }
                                        },
                                    };
                                    if (option.title.id && option.title.id === 'pile') {
                                        temp.stack = '总量';
                                        delete temp.label;
                                    }
                                    seriesChange.push(temp);
                                }
                                option.series = seriesChange;
                                option.dataset.source.splice(0, 0, option.dataset.dimensions);
                                this.chart.setOption(option);
                            }
                        }
                    }
                }
            };
        /**
         * @param {?} op
         * @return {?}
         */
        NgxEchartsDirective.prototype.setZoom = /**
         * @param {?} op
         * @return {?}
         */
            function (op) {
                /** @type {?} */
                var dataZoom = [];
                if (op.dataset.source.length > 9) {
                    dataZoom = [{
                            id: 'dataZoomX',
                            type: 'slider',
                            xAxisIndex: [0],
                            filterMode: 'filter'
                        }];
                    op.dataZoom = dataZoom;
                }
            };
        NgxEchartsDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'qdp-charts, [qdp-charts]',
                    },] }
        ];
        /** @nocollapse */
        NgxEchartsDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.NgZone }
            ];
        };
        NgxEchartsDirective.propDecorators = {
            queryId: [{ type: core.Input }],
            options: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            loading: [{ type: core.Input }],
            queryRelativeUrl: [{ type: core.Input }],
            initOpts: [{ type: core.Input }],
            merge: [{ type: core.Input }],
            autoResize: [{ type: core.Input }],
            loadingType: [{ type: core.Input }],
            loadingOpts: [{ type: core.Input }],
            detectEventChanges: [{ type: core.Input }],
            chartInit: [{ type: core.Output }],
            chartClick: [{ type: core.Output }],
            chartDblClick: [{ type: core.Output }],
            chartMouseDown: [{ type: core.Output }],
            chartMouseMove: [{ type: core.Output }],
            chartMouseUp: [{ type: core.Output }],
            chartMouseOver: [{ type: core.Output }],
            chartMouseOut: [{ type: core.Output }],
            chartGlobalOut: [{ type: core.Output }],
            chartContextMenu: [{ type: core.Output }],
            chartLegendSelectChanged: [{ type: core.Output }],
            chartLegendSelected: [{ type: core.Output }],
            chartLegendUnselected: [{ type: core.Output }],
            chartLegendScroll: [{ type: core.Output }],
            chartDataZoom: [{ type: core.Output }],
            chartDataRangeSelected: [{ type: core.Output }],
            chartTimelineChanged: [{ type: core.Output }],
            chartTimelinePlayChanged: [{ type: core.Output }],
            chartRestore: [{ type: core.Output }],
            chartDataViewChanged: [{ type: core.Output }],
            chartMagicTypeChanged: [{ type: core.Output }],
            chartPieSelectChanged: [{ type: core.Output }],
            chartPieSelected: [{ type: core.Output }],
            chartPieUnselected: [{ type: core.Output }],
            chartMapSelectChanged: [{ type: core.Output }],
            chartMapSelected: [{ type: core.Output }],
            chartMapUnselected: [{ type: core.Output }],
            chartAxisAreaSelected: [{ type: core.Output }],
            chartFocusNodeAdjacency: [{ type: core.Output }],
            chartUnfocusNodeAdjacency: [{ type: core.Output }],
            chartBrush: [{ type: core.Output }],
            chartBrushSelected: [{ type: core.Output }],
            chartRendered: [{ type: core.Output }],
            chartFinished: [{ type: core.Output }]
        };
        return NgxEchartsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormBindingDataDirective = /** @class */ (function () {
        function FormBindingDataDirective(charts, bindingData, viewModel, schemaManager, injector) {
            this.charts = charts;
            this.bindingData = bindingData;
            this.viewModel = viewModel;
            this.schemaManager = schemaManager;
            this.injector = injector;
            this.delay = 0;
            this.interval = 0;
            if (this.injector) {
                this.cache = this.injector.get(cafCommon.CacheService);
            }
        }
        /**
         * @return {?}
         */
        FormBindingDataDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                common.QDPCacheUtil.setCache(common.RtfServices.getTabId(this.queryId) + this.queryId + 'form-charts', this);
            };
        /**
         * @return {?}
         */
        FormBindingDataDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.delayLoad();
            };
        /**
         * @return {?}
         */
        FormBindingDataDirective.prototype.delayLoad = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.delay) {
                    this.delay = 0;
                }
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.bindingListChange();
                    _this.intervalLoad();
                }), this.delay);
            };
        /**
         * @return {?}
         */
        FormBindingDataDirective.prototype.intervalLoad = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.interval) {
                    this.myVar = setInterval(( /**
                     * @return {?}
                     */function () {
                        _this.bindingListChange();
                    }), this.interval);
                }
            };
        /**
         * @return {?}
         */
        FormBindingDataDirective.prototype.clearIntervalLoad = /**
         * @return {?}
         */
            function () {
                if (this.myVar) {
                    clearInterval(this.myVar);
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormBindingDataDirective.prototype.bindingListChange = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.bindingData) {
                    this.bindData();
                    this.bindingData.changes.subscribe(( /**
                     * @param {?} change
                     * @return {?}
                     */function (change) {
                        _this.bindData();
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormBindingDataDirective.prototype.bindData = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var self = this;
                if (this.bindingList) {
                    /** @type {?} */
                    var op_1;
                    /** @type {?} */
                    var organizationId = this.cache.get(common.RtfServices.getTabId(self.queryId) + 'organizationId') || '';
                    this.schemaManager.getDefaultSchema(this.charts.queryId, this.charts.queryRelativeUrl, '', organizationId).subscribe(( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        if (value) {
                            if (value.schemaValue.chartsType.series.type && value.schemaValue.chartsType.series.type !== -1) {
                                op_1 = Object.assign({}, value.schemaValue.chartsData, value.schemaValue.chartsStyle);
                                value.schemaValue.chartsType.series.type = value.schemaValue.chartsType.series.type.replace('1', '');
                                op_1.series.type = value.schemaValue.chartsType.series.type;
                                if (op_1.series.type !== 'line1') {
                                    delete op_1.series.areaStyle;
                                }
                                else {
                                    op_1.series.areaStyle = {};
                                }
                            }
                        }
                        /** @type {?} */
                        var dynamiccols = [];
                        _this.bindingList.properties.forEach(( /**
                         * @param {?} col
                         * @return {?}
                         */function (col) {
                            /** @type {?} */
                            var dynamiccol = {};
                            dynamiccol.name = col.name;
                            dynamiccol.bindField = col.name;
                            dynamiccol.colWidth = 150;
                            dynamiccol.align = 0;
                            dynamiccol.visible = true;
                            dynamiccol.isFixed = false;
                            dynamiccol.formatType = 0;
                            dynamiccol.formattor = '';
                            dynamiccol.sort = 0;
                            dynamiccol.pageAggreText = null;
                            dynamiccol.pageAggre = 0;
                            dynamiccol.isGroup = false;
                            dynamiccol.groupAggreText = '';
                            dynamiccol.groupAggre = 0;
                            dynamiccol.totalAggreText = '';
                            dynamiccol.totalAggre = 0;
                            dynamiccol.level = 1;
                            dynamiccol.childList = [];
                            dynamiccol.dimension = 0;
                            dynamiccol.rowColor = null;
                            dynamiccols.push(dynamiccol);
                        }));
                        _this.schemaManager.setColInfo(dynamiccols);
                        if (op_1 && op_1.series && op_1.series.type) {
                            op_1.series.type = op_1.series.type.replace('1', '');
                        }
                        _this.charts.setData(_this.bindingList.toJSON(), op_1);
                    }));
                }
            };
        Object.defineProperty(FormBindingDataDirective.prototype, "bindingList", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                if (!this.bindingData || !this.viewModel) {
                    return undefined;
                }
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.bindingData.list;
                }
                // 子实体
                /** @type {?} */
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                /** @type {?} */
                var paths = bindingPath.split('/');
                /** @type {?} */
                var filteredPaths = paths.filter(( /**
                 * @param {?} part
                 * @return {?}
                 */function (part) {
                    return part !== '';
                }));
                return this.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        FormBindingDataDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'formBindingData, [formBindingData]',
                    },] }
        ];
        /** @nocollapse */
        FormBindingDataDirective.ctorParameters = function () {
            return [
                { type: NgxEchartsDirective, decorators: [{ type: core.Optional }] },
                { type: devkit.BindingData, decorators: [{ type: core.Optional }] },
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: common.SchemaManagerService },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        FormBindingDataDirective.propDecorators = {
            delay: [{ type: core.Input }],
            interval: [{ type: core.Input }],
            queryId: [{ type: core.Input }],
            controlType: [{ type: core.Input }]
        };
        return FormBindingDataDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LcpBindingDataDirective = /** @class */ (function () {
        function LcpBindingDataDirective(serverHost, restfulService, sessionService, cache, schemaManager, charts, dataRenderExtendService, filterService, loadDataUri, loadDataCol, injector) {
            this.serverHost = serverHost;
            this.restfulService = restfulService;
            this.sessionService = sessionService;
            this.cache = cache;
            this.schemaManager = schemaManager;
            this.charts = charts;
            this.dataRenderExtendService = dataRenderExtendService;
            this.filterService = filterService;
            this.loadDataUri = loadDataUri;
            this.loadDataCol = loadDataCol;
            this.injector = injector;
            this.delay = 0;
            this.interval = 0;
            this.funcIds = [];
            this.pageInfoChange = new rxjs.Subject();
        }
        /**
         * @private
         * @return {?}
         */
        LcpBindingDataDirective.prototype.bindCloseTabEvent = /**
         * @private
         * @return {?}
         */
            function () {
                try {
                    /** @type {?} */
                    var tab = gspframeworkService.rtf.session.getCommonVariable();
                    gspframeworkService.rtf.frmEvent.eventListener('beforeFuncCloseEvent', this.clearParametersCache.bind(this), tab);
                    this.funcIds.push(tab.tabId);
                    return tab.tabId + common.RtfServices.getInSuiteFrmUUID();
                }
                catch (e) {
                }
            };
        /**
         * @private
         * @return {?}
         */
        LcpBindingDataDirective.prototype.clearParametersCache = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tabId = arguments[0].tabId;
                this.cache.set(this.queryId, '');
                this.cache.set(arguments[0].tabId, '');
                this.cache.set(arguments[0].tabId + 'renderMode', '');
                /** @type {?} */
                var index = this.funcIds.findIndex(( /**
                 * @param {?} el
                 * @return {?}
                 */function (el) { return el === tabId; }));
                if (index >= 0) {
                    this.funcIds.splice(index, 1);
                    gspframeworkService.rtf.func.close(arguments[0]);
                }
            };
        /**
         * @return {?}
         */
        LcpBindingDataDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.tabId = common.RtfServices.getTabId(this.queryId);
                common.QDPCacheUtil.setCache(this.tabId + this.queryId + 'lcp-charts', this);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        LcpBindingDataDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var changeName in changes) {
                    /** @type {?} */
                    var newValue = changes[changeName].currentValue;
                    if (newValue !== null && newValue !== void 0) {
                        /** @type {?} */
                        var eventId = common.RtfServices.getTabId(this.queryId);
                        switch (changeName) {
                            case 'queryId':
                                this.queryId = newValue;
                                common.QDPCacheUtil.setCache(eventId + this.queryId + 'lcp-charts', this);
                                break;
                            case 'eventType':
                                if (newValue) {
                                    common.EventBus.register(newValue, this.handleLinkage, eventId);
                                }
                                break;
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        LcpBindingDataDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // if (this.qoId) { // 查询结果集过滤条件
                this.filterService.getFilter(this.qoManagerCode, this.queryId, this.queryRelativeUrl, 1).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data) {
                        /** @type {?} */
                        var conditionExpression = JSON.stringify(data.filter);
                        _this.render('', '', '', conditionExpression);
                    }
                    else {
                        _this.render('');
                    }
                }));
                // } else {
                //   this.render('');
                // }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        LcpBindingDataDirective.prototype.handleLinkage = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                try {
                    /** @type {?} */
                    var params = JSON.stringify($event);
                    this.delayLoad('', {}, params, this.queryRelativeUrl);
                }
                catch (e) {
                }
            };
        /**
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} queryRelativeUrl
         * @param {?=} conditionExpression
         * @return {?}
         */
        LcpBindingDataDirective.prototype.delayLoad = /**
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} queryRelativeUrl
         * @param {?=} conditionExpression
         * @return {?}
         */
            function (schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
                var _this = this;
                if (!this.delay) {
                    this.delay = 0;
                }
                if (this.delay === 0) {
                    this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                    this.intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                }
                else {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                        _this.intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                    }), this.delay);
                }
            };
        /**
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} queryRelativeUrl
         * @param {?=} conditionExpression
         * @return {?}
         */
        LcpBindingDataDirective.prototype.intervalLoad = /**
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} queryRelativeUrl
         * @param {?=} conditionExpression
         * @return {?}
         */
            function (schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
                var _this = this;
                if (this.interval) {
                    this.myVar = setInterval(( /**
                     * @return {?}
                     */function () {
                        _this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                    }), this.interval);
                }
            };
        /**
         * @return {?}
         */
        LcpBindingDataDirective.prototype.clearIntervalLoad = /**
         * @return {?}
         */
            function () {
                if (this.myVar) {
                    clearInterval(this.myVar);
                }
            };
        /**
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} conditionExpression
         * @return {?}
         */
        LcpBindingDataDirective.prototype.render = /**
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} conditionExpression
         * @return {?}
         */
            function (schemaId, option, linkageParams, conditionExpression) {
                this.delayLoad(schemaId, option, linkageParams, this.queryRelativeUrl, conditionExpression);
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpBindingDataDirective.prototype.getData = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataUri) {
                    uri += this.loadDataUri;
                }
                else {
                    uri += (!queryRelativeUrl || queryRelativeUrl === '') ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
                }
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, queryRelativeUrl ? { 'Param': params } : params, {}, this.createHeaderSessionId())
                    : this.restfulService.put(uri, queryRelativeUrl ? { 'Param': params } : params, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data) {
                        data = (!queryRelativeUrl || queryRelativeUrl === '') ? data : data.returnValue;
                        if (data && data.pageInfo) {
                            self.pageInfoChange.next(data.pageInfo);
                        }
                    }
                    return data;
                })));
            };
        /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
        LcpBindingDataDirective.prototype.getCol = /**
         * @param {?} params
         * @param {?} queryRelativeUrl
         * @return {?}
         */
            function (params, queryRelativeUrl) {
                /** @type {?} */
                var uri = this.serverHost;
                if (this.loadDataCol) {
                    uri += this.loadDataCol;
                }
                else {
                    uri += ((!queryRelativeUrl || queryRelativeUrl === '') ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
                }
                params = (!queryRelativeUrl || queryRelativeUrl === '') ? params : { 'Param': params };
                /** @type {?} */
                var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
                    : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
                return result$.pipe(operators.map(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data) {
                        data = (!queryRelativeUrl || queryRelativeUrl === '') ? data : data.returnValue;
                    }
                    return data;
                })));
            };
        /**
         * @private
         * @param {?} queryId
         * @param {?} controlType
         * @param {?} schemaId
         * @param {?} qoManagerCode
         * @param {?} extendCond
         * @param {?} pageIndex
         * @param {?} pageSize
         * @param {?=} printIntegration
         * @param {?=} excelExportName
         * @param {?=} voId
         * @return {?}
         */
        LcpBindingDataDirective.prototype.createParameters = /**
         * @private
         * @param {?} queryId
         * @param {?} controlType
         * @param {?} schemaId
         * @param {?} qoManagerCode
         * @param {?} extendCond
         * @param {?} pageIndex
         * @param {?} pageSize
         * @param {?=} printIntegration
         * @param {?=} excelExportName
         * @param {?=} voId
         * @return {?}
         */
            function (queryId, controlType, schemaId, qoManagerCode, extendCond, pageIndex, pageSize, printIntegration, excelExportName, voId) {
                /** @type {?} */
                var entityData;
                /** @type {?} */
                var tabId = this.bindCloseTabEvent();
                if (this.cache.get(tabId)) {
                    entityData = JSON.stringify(this.cache.get(tabId));
                }
                else if (this.cache.get(queryId)) {
                    entityData = JSON.stringify(this.cache.get(queryId));
                }
                else {
                    entityData = JSON.stringify({ 'id': 'undefined_null' });
                }
                /** @type {?} */
                var params = {
                    entityData: entityData,
                    extendCond: extendCond,
                    pageIndex: pageIndex,
                    pageSize: pageSize,
                    schemaId: schemaId && schemaId !== 'prefab' ? schemaId : '1',
                    filterCond: this.cache.get(tabId + 'filtercondition') ? this.cache.get(tabId + 'filtercondition') : '',
                    qoManagerCode: qoManagerCode ? qoManagerCode : '',
                    voCode: voId ? voId : ''
                };
                try {
                    /** @type {?} */
                    var parameterEntityData = JSON.parse(entityData);
                    if (parameterEntityData.hasOwnProperty('@filterExpressionString@')) {
                        /** @type {?} */
                        var filterExpression = params && params.filterCond ? JSON.parse(params.filterCond) : null;
                        if (!filterExpression) {
                            params.filterCond = parameterEntityData['@filterExpressionString@'];
                        }
                        else {
                            /** @type {?} */
                            var advanceFilterExpression = JSON.parse(parameterEntityData['@filterExpressionString@']);
                            advanceFilterExpression.expressItems = advanceFilterExpression.expressItems.concat(filterExpression.expressItems);
                            params.filterCond = JSON.stringify(advanceFilterExpression);
                        }
                    }
                }
                catch (e) {
                }
                if (controlType) {
                    params['controlType'] = controlType;
                }
                if (excelExportName) {
                    params['excelExportName'] = excelExportName;
                }
                if (printIntegration) {
                    params['printIntegration'] = printIntegration ? JSON.stringify(printIntegration) : '';
                }
                return params;
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        LcpBindingDataDirective.prototype.getSchemaInfo = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var self = this;
                obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
                if (!obj.schemaId) {
                    return self.getDefaultSchemaInfo(obj);
                }
                else {
                    /** @type {?} */
                    var organizationId = this.cache.get(common.RtfServices.getTabId(obj.queryId) + 'organizationId') || '';
                    /** @type {?} */
                    var result$ = this.schemaManager.getSchema(obj.schemaId, obj.queryId, obj.queryRelativeUrl, obj.groupType, organizationId);
                    return result$.pipe(operators.switchMap(( /**
                     * @param {?} schemaValue
                     * @return {?}
                     */function (schemaValue) {
                        if (schemaValue && schemaValue['id']) {
                            return rxjs.of(schemaValue);
                        }
                        //  else {
                        //   return self.getDefaultSchemaInfo(obj);
                        // }
                    })));
                }
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        LcpBindingDataDirective.prototype.getDefaultSchemaInfo = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var organizationId = this.cache.get(common.RtfServices.getTabId(obj.queryId) + 'organizationId') || '';
                return this.schemaManager.getDefaultSchema(obj.queryId, obj.queryRelativeUrl, obj.groupType, organizationId);
            };
        /**
         * @private
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} queryRelativeUrl
         * @param {?=} conditionExpression
         * @return {?}
         */
        LcpBindingDataDirective.prototype.bindData = /**
         * @private
         * @param {?} schemaId
         * @param {?=} option
         * @param {?=} linkageParams
         * @param {?=} queryRelativeUrl
         * @param {?=} conditionExpression
         * @return {?}
         */
            function (schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
                var _this = this;
                /** @type {?} */
                var op = option;
                this.getSchemaInfo({ schemaId: schemaId, queryId: this.charts.queryId, queryRelativeUrl: queryRelativeUrl }).subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    /** @type {?} */
                    var _schemaId = '';
                    if (schemaId) {
                        _schemaId = schemaId;
                    }
                    if (value && !_schemaId) {
                        _schemaId = value.id;
                        if (value.schemaValue.chartsType.series.type && value.schemaValue.chartsType.series.type !== -1) {
                            op = Object.assign({}, value.schemaValue.chartsData, value.schemaValue.chartsStyle);
                            value.schemaValue.chartsType.series.type = value.schemaValue.chartsType.series.type.replace('1', '');
                            op.series.type = value.schemaValue.chartsType.series.type;
                            if (op.series.type !== 'line1') {
                                delete op.series.areaStyle;
                            }
                            else {
                                op.series.areaStyle = {};
                            }
                        }
                    }
                    if (value && value.schemaValue && value.schemaValue.customOption) {
                        try {
                            op = Object.assign({}, op, JSON.parse(value.schemaValue.customOption));
                        }
                        catch (e) {
                            op = Object.assign({}, op, value.schemaValue.customOption);
                        }
                    }
                    /** @type {?} */
                    var entityData = '';
                    if (_this.cache.get(_this.charts.queryId)) {
                        entityData = JSON.stringify(_this.cache.get(_this.charts.queryId));
                    }
                    if (linkageParams) {
                        entityData = linkageParams;
                    }
                    // TODO: mork
                    /** @type {?} */
                    var params = _this.createParameters(_this.queryId, 'charts', _schemaId, _this.qoManagerCode, '', 0, 0, undefined, undefined, _this.voId);
                    params['queryId'] = _this.queryId ? _this.queryId : '';
                    if (_this.qoManagerCode) {
                        params['qoManagerCode'] = _this.qoManagerCode;
                    }
                    if (_schemaId && _schemaId !== 'prefab') {
                        params['schemaId'] = _schemaId;
                    }
                    else {
                        params['schemaId'] = '1';
                    }
                    // 查询数据前事件
                    if (_this.dataRenderExtendService && _this.dataRenderExtendService.beforeQueryData) {
                        _this.dataRenderExtendService.beforeQueryData(_this.createEventParams('beforeQueryData', '查询数据前', params, _this.charts));
                        try {
                            _this.cache.set(_this.tabId, JSON.parse(params['entityData']));
                        }
                        catch (e) { }
                    }
                    // 添加列
                    /** @type {?} */
                    var self = _this;
                    self.getData(params, queryRelativeUrl).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        self.getCol(params, queryRelativeUrl).subscribe(( /**
                         * @param {?} resultData
                         * @return {?}
                         */function (resultData) {
                            if (!data.dynamicCols || data.dynamicCols.length === 0) {
                                data.dynamicCols = resultData.dynamicCols || [];
                            }
                            else {
                                resultData.dynamicCols.forEach(( /**
                                 * @param {?} col
                                 * @return {?}
                                 */function (col) {
                                    data.dynamicCols.push(col);
                                }));
                            }
                            if (data && data.dynamicCols && data.dynamicCols.length) {
                                /** @type {?} */
                                var joinParam = {};
                                joinParam['controlType'] = 'charts';
                                joinParam['colList'] = data.dynamicCols;
                                self.cache.set(self.tabId + 'joinSearch', joinParam);
                                self.schemaManager.colList.next(data.dynamicCols);
                            }
                            // 数据加载前事件
                            if (op && op.series && op.series.type) {
                                op.series.type = op.series.type.replace('1', '');
                            }
                            if (data && data.data && data.data.length) {
                                self.charts.setData(data.data, op);
                            }
                            else {
                                self.charts.setData([], op);
                            }
                            // 页面渲染后事件
                            if (self.dataRenderExtendService && self.dataRenderExtendService.afterLoadData) {
                                self.dataRenderExtendService.beforeLoadData(self.createEventParams('afterLoadData', '渲染后事件', data, self.charts));
                            }
                            self.cache.set(self.charts.queryId + 'echartsconfig', op);
                        }));
                    }));
                }));
            };
        /**
         * @private
         * @return {?}
         */
        LcpBindingDataDirective.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                return common.RtfServices.createHeaderSessionId(this.sessionService);
            };
        /**
         * @private
         * @param {?} eventCode
         * @param {?} eventName
         * @param {?} data
         * @param {?} control
         * @return {?}
         */
        LcpBindingDataDirective.prototype.createEventParams = /**
         * @private
         * @param {?} eventCode
         * @param {?} eventName
         * @param {?} data
         * @param {?} control
         * @return {?}
         */
            function (eventCode, eventName, data, control) {
                return {
                    eventCode: eventCode,
                    eventName: eventName,
                    data: data,
                    control: control
                };
            };
        LcpBindingDataDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'lcpBindingData, [lcpBindingData]',
                    },] }
        ];
        /** @nocollapse */
        LcpBindingDataDirective.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Inject, args: [common.Server_Host,] }, { type: core.Optional }] },
                { type: common.RestfulService },
                { type: cafCommon.SessionService },
                { type: cafCommon.CacheService },
                { type: common.SchemaManagerService },
                { type: NgxEchartsDirective, decorators: [{ type: core.Optional }] },
                { type: common.DataRenderExtendService, decorators: [{ type: core.Optional }] },
                { type: common.FilterManagerService },
                { type: String, decorators: [{ type: core.Inject, args: [common.Load_Data_Uri,] }, { type: core.Optional }] },
                { type: String, decorators: [{ type: core.Inject, args: [common.Load_Data_Col,] }, { type: core.Optional }] },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        LcpBindingDataDirective.propDecorators = {
            qoManagerCode: [{ type: core.Input }],
            delay: [{ type: core.Input }],
            interval: [{ type: core.Input }],
            eventType: [{ type: core.Input }],
            queryRelativeUrl: [{ type: core.Input }],
            queryId: [{ type: core.Input }],
            controlType: [{ type: core.Input }],
            qoId: [{ type: core.Input }],
            voId: [{ type: core.Input }]
        };
        return LcpBindingDataDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EchartsModule = /** @class */ (function () {
        function EchartsModule() {
        }
        EchartsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common$1.CommonModule
                        ],
                        declarations: [
                            NgxEchartsDirective,
                            FormBindingDataDirective,
                            LcpBindingDataDirective
                        ],
                        exports: [
                            NgxEchartsDirective,
                            FormBindingDataDirective,
                            LcpBindingDataDirective
                        ]
                    },] }
        ];
        return EchartsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxEchartsDirective = NgxEchartsDirective;
    exports.FormBindingDataDirective = FormBindingDataDirective;
    exports.LcpBindingDataDirective = LcpBindingDataDirective;
    exports.EchartsModule = EchartsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=qdp-echarts.umd.js.map