/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
// import { init } from 'echarts';
import { fromEvent, Observable } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { ChangeFilter } from './change.filter';
export class NgxEchartsDirective {
    /**
     * @param {?} el
     * @param {?} ngZone
     */
    constructor(el, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        this.autoResize = true;
        this.loadingType = 'default';
        this.detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version
        // deprecated, left for compatibility reasons to avoid triggering major version
        // ngx-echarts events
        this.chartInit = new EventEmitter();
        // echarts mouse events
        this.chartClick = this.createLazyEvent('click');
        this.chartDblClick = this.createLazyEvent('dblclick');
        this.chartMouseDown = this.createLazyEvent('mousedown');
        this.chartMouseMove = this.createLazyEvent('mousemove');
        this.chartMouseUp = this.createLazyEvent('mouseup');
        this.chartMouseOver = this.createLazyEvent('mouseover');
        this.chartMouseOut = this.createLazyEvent('mouseout');
        this.chartGlobalOut = this.createLazyEvent('globalout');
        this.chartContextMenu = this.createLazyEvent('contextmenu');
        // echarts mouse events
        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');
        this.chartLegendSelected = this.createLazyEvent('legendselected');
        this.chartLegendUnselected = this.createLazyEvent('legendunselected');
        this.chartLegendScroll = this.createLazyEvent('legendscroll');
        this.chartDataZoom = this.createLazyEvent('datazoom');
        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');
        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');
        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');
        this.chartRestore = this.createLazyEvent('restore');
        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');
        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');
        this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');
        this.chartPieSelected = this.createLazyEvent('pieselected');
        this.chartPieUnselected = this.createLazyEvent('pieunselected');
        this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');
        this.chartMapSelected = this.createLazyEvent('mapselected');
        this.chartMapUnselected = this.createLazyEvent('mapunselected');
        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');
        this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');
        this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');
        this.chartBrush = this.createLazyEvent('brush');
        this.chartBrushSelected = this.createLazyEvent('brushselected');
        this.chartRendered = this.createLazyEvent('rendered');
        this.chartFinished = this.createLazyEvent('finished');
        this.currentOffsetWidth = 0;
        this.currentOffsetHeight = 0;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        filter.notFirstAndEmpty('options').subscribe((/**
         * @param {?} opt
         * @return {?}
         */
        opt => this.onOptionsChange(opt)));
        filter.notFirstAndEmpty('merge').subscribe((/**
         * @param {?} opt
         * @return {?}
         */
        opt => this.setOption(opt)));
        filter.has('loading').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => this.toggleLoading(!!v)));
        filter.notFirst('theme').subscribe((/**
         * @return {?}
         */
        () => this.refreshChart()));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.autoResize && window.innerWidth !== this.currentWindowWidth) {
                this.currentWindowWidth = window.innerWidth;
                this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
                this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
                this.resize();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // tslint:disable-next-line:no-unused-expression
        this.resizeSub && this.resizeSub.unsubscribe();
        this.dispose();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        // No heavy work in DoCheck!
        if (this.chart && this.autoResize) {
            /** @type {?} */
            const offsetWidth = this.el.nativeElement.offsetWidth;
            /** @type {?} */
            const offsetHeight = this.el.nativeElement.offsetHeight;
            if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {
                this.currentOffsetWidth = offsetWidth;
                this.currentOffsetHeight = offsetHeight;
                this.resize();
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => this.initChart()));
    }
    /**
     * @private
     * @return {?}
     */
    dispose() {
        if (this.chart) {
            this.chart.dispose();
            this.chart = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    resize() {
        if (this.chart) {
            this.chart.resize();
        }
    }
    /**
     * @private
     * @param {?} loading
     * @return {?}
     */
    toggleLoading(loading) {
        if (this.chart) {
            loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();
        }
    }
    // 保存visualMap
    /**
     * @param {?} option
     * @param {?=} opts
     * @return {?}
     */
    setOption(option, opts) {
        this.chart.setOption(option, opts);
    }
    /**
     * @return {?}
     */
    clearOption() {
        if (this.chart) {
            this.chart.clear();
        }
    }
    /**
     * @return {?}
     */
    getOption() {
        return this.chart.getOption();
    }
    /**
     * @private
     * @return {?}
     */
    refreshChart() {
        this.dispose();
        this.initChart();
    }
    /**
     * @private
     * @return {?}
     */
    createChart() {
        this.currentWindowWidth = window.innerWidth;
        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
        /** @type {?} */
        const dom = this.el.nativeElement;
        if (window && window.getComputedStyle) {
            /** @type {?} */
            const prop = window.getComputedStyle(dom, null).getPropertyValue('height');
            if ((!prop || prop === '0px') &&
                (!dom.style.height || dom.style.height === '0px')) {
                dom.style.height = '400px';
            }
        }
        return this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => echarts.init(dom, this.theme, this.initOpts)));
    }
    /**
     * @private
     * @return {?}
     */
    initChart() {
        this.onOptionsChange(this.options);
        if (this.merge && this.chart) {
            this.setOption(this.merge);
        }
    }
    /**
     * @private
     * @param {?} opt
     * @return {?}
     */
    onOptionsChange(opt) {
        if (opt) {
            if (!this.chart) {
                this.chart = this.createChart();
                this.chartInit.emit(this.chart);
            }
            this.chart.setOption(this.options, true);
        }
        else {
            if (!this.chart) {
                this.chart = this.createChart();
                this.chartInit.emit(this.chart);
            }
        }
    }
    // allows to lazily bind to only those events that are requested through the `@Output` by parent components
    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
    /**
     * @private
     * @template T
     * @param {?} eventName
     * @return {?}
     */
    createLazyEvent(eventName) {
        return (/** @type {?} */ (this.chartInit.pipe(switchMap((/**
         * @param {?} chart
         * @return {?}
         */
        (chart) => new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            chart.on(eventName, (/**
             * @param {?} data
             * @return {?}
             */
            (data) => this.ngZone.run((/**
             * @return {?}
             */
            () => observer.next(data)))));
            return null; // no need to react on unsubscribe as long as the `dispose()` is called in ngOnDestroy
        })))))));
    }
    /**
     * @param {?} data1
     * @param {?} num
     * @return {?}
     */
    setNumber(data1, num) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const l = data1.length;
        for (let i = 0; i < l; i++) {
            arr[i] = data1[i][num];
        }
        return arr;
    }
    /**
     * @param {?} data
     * @param {?=} option
     * @return {?}
     */
    setData(data, option) {
        if (this.chart) {
            this.chart.clear();
        }
        data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (item.dynamicPropSet) {
                /** @type {?} */
                const dy = item.dynamicPropSet;
                delete item.dynamicPropSet;
                Object.assign(item, dy);
            }
        }));
        if (data && data.length) {
            this.chartsData = {
                dataset: {
                    dimensions: [],
                    source: []
                }
            };
            Object.keys(data[0]).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                this.chartsData.dataset.dimensions.push(key);
            }));
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                const row = [];
                Object.keys(item).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                key => {
                    row.push(item[key]);
                }));
                this.chartsData.dataset.source.push(row);
            }));
            if (option) {
                if (option.series && option.series.type && option.series.type === 'pie') {
                    /** @type {?} */
                    const resultOption = {
                        title: option.title,
                        dataset: this.chartsData.dataset,
                        tooltip: {
                            formatter: '{d}%',
                        },
                        series: [{
                                type: option.series.type,
                                encode: {
                                    value: option.series.encode.y[0],
                                    itemName: option.series.encode.x[0],
                                },
                            }]
                    };
                    resultOption.dataset.source.splice(0, 0, resultOption.dataset.dimensions);
                    this.chart.setOption(resultOption);
                }
                else if (option.series && (option.series.type === 'line' || option.series.type === 'scatter')) {
                    option.dataset = this.chartsData.dataset;
                    this.setZoom(option);
                    /** @type {?} */
                    const row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0]);
                    option.visualMap[0].dimension = row1;
                    option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                    option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                    option.dataset.source.splice(0, 0, option.dataset.dimensions);
                    this.chart.setOption(option);
                }
                else if (option.series && option.series.type && option.series.type === 'effectScatter') {
                    option.dataset = this.chartsData.dataset;
                    if (option.series.encode.value2.length === 0) {
                        /** @type {?} */
                        const row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                        option.visualMap[0].dimension = row1;
                        option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                        option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                        /** @type {?} */
                        const row2 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                        option.visualMap[1].dimension = row2;
                        option.visualMap[1].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                        option.visualMap[1].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                    }
                    else {
                        /** @type {?} */
                        const row = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                        option.visualMap[0].dimension = row;
                        option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row));
                        option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row));
                        /** @type {?} */
                        const row2 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value2[0]);
                        option.visualMap[1].dimension = row2;
                        option.visualMap[1].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                        option.visualMap[1].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                    }
                    option.dataset.source.splice(0, 0, option.dataset.dimensions);
                    this.chart.setOption(option);
                }
                else if (option.series && option.series.type === 'bar') {
                    if (option.series.encode.y && option.series.encode.y.length < 2) {
                        /** @type {?} */
                        const arrayTemp1 = [];
                        /** @type {?} */
                        const arrayTemp2 = [];
                        // tslint:disable-next-line:prefer-for-of
                        for (let i = 0; i < this.chartsData.dataset.source.length; i++) {
                            arrayTemp1.push(this.chartsData.dataset.source[i][this.chartsData.dataset.dimensions.indexOf(option.series.encode.x[0])]);
                            arrayTemp2.push(this.chartsData.dataset.source[i][this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0])]);
                        }
                        /** @type {?} */
                        const isRepeat = Array.from(new Set(arrayTemp1)).length - arrayTemp1.length;
                        if (isRepeat === 0) {
                            option.dataset = this.chartsData.dataset;
                            this.setZoom(option);
                            /** @type {?} */
                            const row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0]);
                            option.legend = {};
                            option.visualMap[0].dimension = row1;
                            option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                            option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                            option.dataset.source.splice(0, 0, option.dataset.dimensions);
                            this.chart.setOption(option);
                        }
                        // 分组，重新设置数据格式和处理逻辑
                        if (isRepeat < 0) {
                            option.visualMap = [];
                            option.dataset = this.chartsData.dataset;
                            this.setZoom(option);
                            /** @type {?} */
                            const ob = [];
                            for (let i = 0; i < arrayTemp1.length; i++) {
                                ob.push({
                                    name: arrayTemp1[i],
                                    value: arrayTemp2[i]
                                });
                            }
                            /** @type {?} */
                            const hash = {};
                            /** @type {?} */
                            let i = 0;
                            /** @type {?} */
                            const res = [];
                            ob.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                /** @type {?} */
                                const name = item.name;
                                hash[name] ? res[hash[name] - 1].value.push(item.value) : hash[name] = ++i && res.push({
                                    name: name,
                                    value: [item.value],
                                });
                            }));
                            // 拿到对象数组进行转置
                            /** @type {?} */
                            const xdata = [];
                            /** @type {?} */
                            let max = 0;
                            res.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                xdata.push(item.name);
                                if (item.value.length + 1 > max) {
                                    max = item.value.length + 1;
                                }
                            }));
                            /** @type {?} */
                            const series = [];
                            /** @type {?} */
                            const legendData = [];
                            for (let i = 1; i < max; i++) {
                                legendData.push(i + '次');
                                series.push({
                                    name: i + '次',
                                    type: 'bar',
                                    stack: '总量',
                                    data: [],
                                });
                            }
                            res.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                for (let i = 0; i < max - 1; i++) {
                                    if (item.value[i]) {
                                        series[i].data.push(item.value[i]);
                                    }
                                    else {
                                        series[i].data.push(0);
                                    }
                                }
                            }));
                            option.xAxis = [{ data: xdata }];
                            option.series = series;
                            option.legend = { data: legendData };
                            this.chart.setOption(option);
                            return;
                        }
                    }
                    else if (option.series.encode.y && option.series.encode.y.length > 1) {
                        option.dataset = this.chartsData.dataset;
                        this.setZoom(option);
                        option.visualMap = [];
                        /** @type {?} */
                        const seriesChange = [];
                        // legend data
                        /** @type {?} */
                        const yList = option.series.encode.y;
                        for (let i = 0; i < yList.length; i++) {
                            /** @type {?} */
                            const temp = {
                                type: option.series.type,
                                name: option.legend.data[i],
                                encode: {
                                    x: option.series.encode.x,
                                    y: [yList[i]],
                                },
                                label: {
                                    normal: {
                                        show: true,
                                        position: 'insideTop'
                                    }
                                },
                            };
                            if (option.title.id && option.title.id === 'pile') {
                                temp.stack = '总量';
                                delete temp.label;
                            }
                            seriesChange.push(temp);
                        }
                        option.series = seriesChange;
                        option.dataset.source.splice(0, 0, option.dataset.dimensions);
                        this.chart.setOption(option);
                    }
                }
            }
        }
    }
    /**
     * @param {?} op
     * @return {?}
     */
    setZoom(op) {
        /** @type {?} */
        let dataZoom = [];
        if (op.dataset.source.length > 9) {
            dataZoom = [{
                    id: 'dataZoomX',
                    type: 'slider',
                    xAxisIndex: [0],
                    filterMode: 'filter'
                }];
            op.dataZoom = dataZoom;
        }
    }
}
NgxEchartsDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'qdp-charts, [qdp-charts]',
            },] }
];
/** @nocollapse */
NgxEchartsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
NgxEchartsDirective.propDecorators = {
    queryId: [{ type: Input }],
    options: [{ type: Input }],
    theme: [{ type: Input }],
    loading: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    initOpts: [{ type: Input }],
    merge: [{ type: Input }],
    autoResize: [{ type: Input }],
    loadingType: [{ type: Input }],
    loadingOpts: [{ type: Input }],
    detectEventChanges: [{ type: Input }],
    chartInit: [{ type: Output }],
    chartClick: [{ type: Output }],
    chartDblClick: [{ type: Output }],
    chartMouseDown: [{ type: Output }],
    chartMouseMove: [{ type: Output }],
    chartMouseUp: [{ type: Output }],
    chartMouseOver: [{ type: Output }],
    chartMouseOut: [{ type: Output }],
    chartGlobalOut: [{ type: Output }],
    chartContextMenu: [{ type: Output }],
    chartLegendSelectChanged: [{ type: Output }],
    chartLegendSelected: [{ type: Output }],
    chartLegendUnselected: [{ type: Output }],
    chartLegendScroll: [{ type: Output }],
    chartDataZoom: [{ type: Output }],
    chartDataRangeSelected: [{ type: Output }],
    chartTimelineChanged: [{ type: Output }],
    chartTimelinePlayChanged: [{ type: Output }],
    chartRestore: [{ type: Output }],
    chartDataViewChanged: [{ type: Output }],
    chartMagicTypeChanged: [{ type: Output }],
    chartPieSelectChanged: [{ type: Output }],
    chartPieSelected: [{ type: Output }],
    chartPieUnselected: [{ type: Output }],
    chartMapSelectChanged: [{ type: Output }],
    chartMapSelected: [{ type: Output }],
    chartMapUnselected: [{ type: Output }],
    chartAxisAreaSelected: [{ type: Output }],
    chartFocusNodeAdjacency: [{ type: Output }],
    chartUnfocusNodeAdjacency: [{ type: Output }],
    chartBrush: [{ type: Output }],
    chartBrushSelected: [{ type: Output }],
    chartRendered: [{ type: Output }],
    chartFinished: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxEchartsDirective.prototype.queryId;
    /** @type {?} */
    NgxEchartsDirective.prototype.options;
    /** @type {?} */
    NgxEchartsDirective.prototype.theme;
    /** @type {?} */
    NgxEchartsDirective.prototype.loading;
    /** @type {?} */
    NgxEchartsDirective.prototype.queryRelativeUrl;
    /** @type {?} */
    NgxEchartsDirective.prototype.initOpts;
    /** @type {?} */
    NgxEchartsDirective.prototype.merge;
    /** @type {?} */
    NgxEchartsDirective.prototype.autoResize;
    /** @type {?} */
    NgxEchartsDirective.prototype.loadingType;
    /** @type {?} */
    NgxEchartsDirective.prototype.loadingOpts;
    /** @type {?} */
    NgxEchartsDirective.prototype.detectEventChanges;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartInit;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartClick;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDblClick;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseDown;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseMove;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseUp;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseOver;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseOut;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartGlobalOut;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartContextMenu;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendSelectChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendUnselected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendScroll;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDataZoom;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDataRangeSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartTimelineChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartTimelinePlayChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartRestore;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDataViewChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMagicTypeChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartPieSelectChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartPieSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartPieUnselected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMapSelectChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMapSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMapUnselected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartAxisAreaSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartFocusNodeAdjacency;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartUnfocusNodeAdjacency;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartBrush;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartBrushSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartRendered;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartFinished;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.currentOffsetWidth;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.currentOffsetHeight;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.currentWindowWidth;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.resizeSub;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.visualMapTemp;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.chartsData;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,