/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Injector } from '@angular/core';
import { BindingData, ViewModel } from '@farris/devkit';
import { NgxEchartsDirective } from '../qdp-charts/qdp.charts.directive';
import { QDPCacheUtil, RtfServices, SchemaManagerService } from '@qdp/common';
import { CacheService } from '@ecp-caf/caf-common';
export class FormBindingDataDirective {
    /**
     * @param {?} charts
     * @param {?} bindingData
     * @param {?} viewModel
     * @param {?} schemaManager
     * @param {?} injector
     */
    constructor(charts, bindingData, viewModel, schemaManager, injector) {
        this.charts = charts;
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.schemaManager = schemaManager;
        this.injector = injector;
        this.delay = 0;
        this.interval = 0;
        if (this.injector) {
            this.cache = this.injector.get(CacheService);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        QDPCacheUtil.setCache(RtfServices.getTabId(this.queryId) + this.queryId + 'form-charts', this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.delayLoad();
    }
    /**
     * @return {?}
     */
    delayLoad() {
        if (!this.delay) {
            this.delay = 0;
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.bindingListChange();
            this.intervalLoad();
        }), this.delay);
    }
    /**
     * @return {?}
     */
    intervalLoad() {
        if (this.interval) {
            this.myVar = setInterval((/**
             * @return {?}
             */
            () => {
                this.bindingListChange();
            }), this.interval);
        }
    }
    /**
     * @return {?}
     */
    clearIntervalLoad() {
        if (this.myVar) {
            clearInterval(this.myVar);
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindingListChange() {
        if (this.bindingData) {
            this.bindData();
            this.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                this.bindData();
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindData() {
        /** @type {?} */
        const self = this;
        if (this.bindingList) {
            /** @type {?} */
            let op;
            /** @type {?} */
            const organizationId = this.cache.get(RtfServices.getTabId(self.queryId) + 'organizationId') || '';
            this.schemaManager.getDefaultSchema(this.charts.queryId, this.charts.queryRelativeUrl, '', organizationId).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value) {
                    if (value.schemaValue.chartsType.series.type && value.schemaValue.chartsType.series.type !== -1) {
                        op = Object.assign({}, value.schemaValue.chartsData, value.schemaValue.chartsStyle);
                        value.schemaValue.chartsType.series.type = value.schemaValue.chartsType.series.type.replace('1', '');
                        op.series.type = value.schemaValue.chartsType.series.type;
                        if (op.series.type !== 'line1') {
                            delete op.series.areaStyle;
                        }
                        else {
                            op.series.areaStyle = {};
                        }
                    }
                }
                /** @type {?} */
                const dynamiccols = [];
                this.bindingList.properties.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => {
                    /** @type {?} */
                    const dynamiccol = {};
                    dynamiccol.name = col.name;
                    dynamiccol.bindField = col.name;
                    dynamiccol.colWidth = 150;
                    dynamiccol.align = 0;
                    dynamiccol.visible = true;
                    dynamiccol.isFixed = false;
                    dynamiccol.formatType = 0;
                    dynamiccol.formattor = '';
                    dynamiccol.sort = 0;
                    dynamiccol.pageAggreText = null;
                    dynamiccol.pageAggre = 0;
                    dynamiccol.isGroup = false;
                    dynamiccol.groupAggreText = '';
                    dynamiccol.groupAggre = 0;
                    dynamiccol.totalAggreText = '';
                    dynamiccol.totalAggre = 0;
                    dynamiccol.level = 1;
                    dynamiccol.childList = [];
                    dynamiccol.dimension = 0;
                    dynamiccol.rowColor = null;
                    dynamiccols.push(dynamiccol);
                }));
                this.schemaManager.setColInfo(dynamiccols);
                if (op && op.series && op.series.type) {
                    op.series.type = op.series.type.replace('1', '');
                }
                this.charts.setData(this.bindingList.toJSON(), op);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    get bindingList() {
        if (!this.bindingData || !this.viewModel) {
            return undefined;
        }
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.bindingData.list;
        }
        // 子实体
        /** @type {?} */
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        /** @type {?} */
        const paths = bindingPath.split('/');
        /** @type {?} */
        const filteredPaths = paths.filter((/**
         * @param {?} part
         * @return {?}
         */
        (part) => {
            return part !== '';
        }));
        return this.bindingData.getValue(filteredPaths);
    }
}
FormBindingDataDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'formBindingData, [formBindingData]',
            },] }
];
/** @nocollapse */
FormBindingDataDirective.ctorParameters = () => [
    { type: NgxEchartsDirective, decorators: [{ type: Optional }] },
    { type: BindingData, decorators: [{ type: Optional }] },
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: SchemaManagerService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FormBindingDataDirective.propDecorators = {
    delay: [{ type: Input }],
    interval: [{ type: Input }],
    queryId: [{ type: Input }],
    controlType: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FormBindingDataDirective.prototype.delay;
    /** @type {?} */
    FormBindingDataDirective.prototype.interval;
    /** @type {?} */
    FormBindingDataDirective.prototype.queryId;
    /** @type {?} */
    FormBindingDataDirective.prototype.controlType;
    /**
     * @type {?}
     * @private
     */
    FormBindingDataDirective.prototype.myVar;
    /** @type {?} */
    FormBindingDataDirective.prototype.cache;
    /** @type {?} */
    FormBindingDataDirective.prototype.charts;
    /** @type {?} */
    FormBindingDataDirective.prototype.bindingData;
    /** @type {?} */
    FormBindingDataDirective.prototype.viewModel;
    /**
     * @type {?}
     * @private
     */
    FormBindingDataDirective.prototype.schemaManager;
    /**
     * @type {?}
     * @private
     */
    FormBindingDataDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5iaW5kaW5nZGF0YS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2VjaGFydHMvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlL2JpbmRpbmdkYXRhL2Zvcm0uYmluZGluZ2RhdGEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxRQUFRLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUUsV0FBVyxFQUFlLFNBQVMsRUFBVSxNQUFNLGdCQUFnQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU1uRCxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7OztJQVFuQyxZQUNxQixNQUEyQixFQUMzQixXQUF3QixFQUN4QixTQUFvQixFQUMvQixhQUFtQyxFQUN2QixRQUFrQjtRQUpuQixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUMzQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQy9CLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUN2QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWi9CLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBYXBCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzlDO0lBQ0gsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcs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Qzs7Y0FDcEYsS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztjQUU5QixhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ2xELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLEVBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xELENBQUM7OztZQXpJRixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSxvQ0FBb0M7YUFDL0M7Ozs7WUFQUSxtQkFBbUIsdUJBaUJ2QixRQUFRO1lBbEJKLFdBQVcsdUJBbUJmLFFBQVE7WUFuQnNCLFNBQVMsdUJBb0J2QyxRQUFRO1lBbEJ1QixvQkFBb0I7WUFISSxRQUFRLHVCQXVCL0QsUUFBUTs7O29CQVpWLEtBQUs7dUJBQ0wsS0FBSztzQkFDTCxLQUFLOzBCQUNMLEtBQUs7Ozs7SUFITix5Q0FBbUI7O0lBQ25CLDRDQUFzQjs7SUFDdEIsMkNBQXlCOztJQUN6QiwrQ0FBMEI7Ozs7O0lBQzFCLHlDQUFtQjs7SUFDbkIseUNBQW9COztJQUdsQiwwQ0FBOEM7O0lBQzlDLCtDQUEyQzs7SUFDM0MsNkNBQXVDOzs7OztJQUN2QyxpREFBMkM7Ozs7O0lBQzNDLDRDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgT3B0aW9uYWwsIEFmdGVyVmlld0luaXQsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhLCBCaW5kaW5nTGlzdCwgVmlld01vZGVsLCBDaGFuZ2UgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IE5neEVjaGFydHNEaXJlY3RpdmUgfSBmcm9tICcuLi9xZHAtY2hhcnRzL3FkcC5jaGFydHMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgUURQQ2FjaGVVdGlsLCBSdGZTZXJ2aWNlcywgU2NoZW1hTWFuYWdlclNlcnZpY2UgfSBmcm9tICdAcWRwL2NvbW1vbic7XHJcbmltcG9ydCB7IENhY2hlU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnZm9ybUJpbmRpbmdEYXRhLCBbZm9ybUJpbmRpbmdEYXRhXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtQmluZGluZ0RhdGFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIGRlbGF5ID0gMDtcclxuICBASW5wdXQoKSBpbnRlcnZhbCA9IDA7XHJcbiAgQElucHV0KCkgcXVlcnlJZDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNvbnRyb2xUeXBlOiBhbnk7XHJcbiAgcHJpdmF0ZSBteVZhcjogYW55O1xyXG4gIGNhY2hlOiBDYWNoZVNlcnZpY2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIGNoYXJ0czogTmd4RWNoYXJ0c0RpcmVjdGl2ZSxcclxuICAgIEBPcHRpb25hbCgpIHB1YmxpYyBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEsXHJcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgdmlld01vZGVsOiBWaWV3TW9kZWwsXHJcbiAgICBwcml2YXRlIHNjaGVtYU1hbmFnZXI6IFNjaGVtYU1hbmFnZXJTZXJ2aWNlLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcclxuICApIHsgXHJcbiAgICBpZiAodGhpcy5pbmplY3Rvcikge1xyXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5pbmplY3Rvci5nZXQoQ2FjaGVTZXJ2aWNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgUURQQ2FjaGVVdGlsLnNldENhY2hlKFJ0ZlNlcnZpY2VzLmdldFRhYklkKHRoaXMucXVlcnlJZCkgKyB0aGlzLnF1ZXJ5SWQgKyAnZm9ybS1jaGFydHMnLCB0aGlzKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuZGVsYXlMb2FkKCk7XHJcbiAgfVxyXG5cclxuICBkZWxheUxvYWQoKSB7XHJcbiAgICBpZiAoIXRoaXMuZGVsYXkpIHtcclxuICAgICAgdGhpcy5kZWxheSA9IDA7XHJcbiAgICB9XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5iaW5kaW5nTGlzdENoYW5nZSgpO1xyXG4gICAgICB0aGlzLmludGVydmFsTG9hZCgpO1xyXG4gICAgfSwgdGhpcy5kZWxheSk7XHJcbiAgfVxyXG5cclxuICBpbnRlcnZhbExvYWQoKSB7XHJcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xyXG4gICAgICB0aGlzLm15VmFyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0xpc3RDaGFuZ2UoKTtcclxuICAgICAgfSwgdGhpcy5pbnRlcnZhbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGVhckludGVydmFsTG9hZCgpIHtcclxuICAgIGlmICh0aGlzLm15VmFyKSB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5teVZhcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJpbmRpbmdMaXN0Q2hhbmdlKCkge1xyXG4gICAgaWYgKHRoaXMuYmluZGluZ0RhdGEpIHtcclxuICAgICAgdGhpcy5iaW5kRGF0YSgpO1xyXG4gICAgICB0aGlzLmJpbmRpbmdEYXRhLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IENoYW5nZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuYmluZERhdGEoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJpbmREYXRhKCkge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICBpZiAodGhpcy5iaW5kaW5nTGlzdCkge1xyXG4gICAgICBsZXQgb3A7XHJcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID0gdGhpcy5jYWNoZS5nZXQoUnRmU2VydmljZXMuZ2V0VGFiSWQoc2VsZi5xdWVyeUlkKSArICdvcmdhbml6YXRpb25JZCcpIHx8ICcnO1xyXG4gICAgICB0aGlzLnNjaGVtYU1hbmFnZXIuZ2V0RGVmYXVsdFNjaGVtYSh0aGlzLmNoYXJ0cy5xdWVyeUlkLCB0aGlzLmNoYXJ0cy5xdWVyeVJlbGF0aXZlVXJsLCAnJywgb3JnYW5pemF0aW9uSWQpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICBpZiAodmFsdWUuc2NoZW1hVmFsdWUuY2hhcnRzVHlwZS5zZXJpZXMudHlwZSAmJiB2YWx1ZS5zY2hlbWFWYWx1ZS5jaGFydHNUeXBlLnNlcmllcy50eXBlICE9PSAtMSkge1xyXG4gICAgICAgICAgICBvcCA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlLnNjaGVtYVZhbHVlLmNoYXJ0c0RhdGEsIHZhbHVlLnNjaGVtYVZhbHVlLmNoYXJ0c1N0eWxlKTtcclxuICAgICAgICAgICAgdmFsdWUuc2NoZW1hVmFsdWUuY2hhcnRzVHlwZS5zZXJpZXMudHlwZSA9IHZhbHVlLnNjaGVtYVZhbHVlLmNoYXJ0c1R5cGUuc2VyaWVzLnR5cGUucmVwbGFjZSgnMScsICcnKTtcclxuICAgICAgICAgICAgb3Auc2VyaWVzLnR5cGUgPSB2YWx1ZS5zY2hlbWFWYWx1ZS5jaGFydHNUeXBlLnNlcmllcy50eXBlO1xyXG4gICAgICAgICAgICBpZiAob3Auc2VyaWVzLnR5cGUgIT09ICdsaW5lMScpIHtcclxuICAgICAgICAgICAgICBkZWxldGUgb3Auc2VyaWVzLmFyZWFTdHlsZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBvcC5zZXJpZXMuYXJlYVN0eWxlID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZHluYW1pY2NvbHM6IGFueSA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0xpc3QucHJvcGVydGllcy5mb3JFYWNoKGNvbCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNjb2w6IGFueSA9IHt9O1xyXG4gICAgICAgICAgICBkeW5hbWljY29sLm5hbWUgPSBjb2wubmFtZTtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5iaW5kRmllbGQgPSBjb2wubmFtZTtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5jb2xXaWR0aCA9IDE1MDtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5hbGlnbiA9ICAwO1xyXG4gICAgICAgICAgICBkeW5hbWljY29sLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBkeW5hbWljY29sLmlzRml4ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5mb3JtYXRUeXBlID0gMDtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5mb3JtYXR0b3IgPSAnJztcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5zb3J0ID0gIDA7XHJcbiAgICAgICAgICAgIGR5bmFtaWNjb2wucGFnZUFnZ3JlVGV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgIGR5bmFtaWNjb2wucGFnZUFnZ3JlID0gMDtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5pc0dyb3VwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGR5bmFtaWNjb2wuZ3JvdXBBZ2dyZVRleHQgPSAnJztcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5ncm91cEFnZ3JlID0gMDtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC50b3RhbEFnZ3JlVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICBkeW5hbWljY29sLnRvdGFsQWdncmUgPSAwO1xyXG4gICAgICAgICAgICBkeW5hbWljY29sLmxldmVsID0gMTtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5jaGlsZExpc3QgPSBbXTtcclxuICAgICAgICAgICAgZHluYW1pY2NvbC5kaW1lbnNpb24gPSAwO1xyXG4gICAgICAgICAgICBkeW5hbWljY29sLnJvd0NvbG9yID0gbnVsbDtcclxuICAgICAgICAgICAgZHluYW1pY2NvbHMucHVzaChkeW5hbWljY29sKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2NoZW1hTWFuYWdlci5zZXRDb2xJbmZvKGR5bmFtaWNjb2xzKTtcclxuICAgICAgICBpZiAob3AgJiYgb3Auc2VyaWVzICYmIG9wLnNlcmllcy50eXBlKSB7XHJcbiAgICAgICAgICBvcC5zZXJpZXMudHlwZSA9IG9wLnNlcmllcy50eXBlLnJlcGxhY2UoJzEnLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhcnRzLnNldERhdGEodGhpcy5iaW5kaW5nTGlzdC50b0pTT04oKSwgb3ApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBwcml2YXRlIGdldCBiaW5kaW5nTGlzdCgpOiBCaW5kaW5nTGlzdCB7XHJcbiAgICBpZiAoIXRoaXMuYmluZGluZ0RhdGEgfHwgIXRoaXMudmlld01vZGVsKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5qC55a6e5L2TXHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGggPT09ICcvJyB8fCAhdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ0RhdGEubGlzdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlrZDlrp7kvZNcclxuICAgIGxldCBiaW5kaW5nUGF0aCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoLnN1YnN0cigxKTtcclxuICAgIGJpbmRpbmdQYXRoID0gYmluZGluZ1BhdGhbMF0udG9Mb3dlckNhc2UoKSArIGJpbmRpbmdQYXRoLnN1YnN0cmluZygxLCBiaW5kaW5nUGF0aC5sZW5ndGgpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpO1xyXG5cclxuICAgIGNvbnN0IGZpbHRlcmVkUGF0aHMgPSBwYXRocy5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLmJpbmRpbmdEYXRhLmdldFZhbHVlKGZpbHRlcmVkUGF0aHMpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19