/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Directive, Input, Optional, Injector } from '@angular/core';
import { NgxEchartsDirective } from '../qdp-charts/qdp.charts.directive';
import { RestfulService, SchemaManagerService, DataRenderExtendService, Server_Host, EventBus, QDPCacheUtil } from '@qdp/common';
import { CacheService } from '@ecp-caf/caf-common';
import { of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { SessionService } from '@ecp-caf/caf-common';
import { FilterManagerService, Load_Data_Uri, Load_Data_Col } from '@qdp/common';
import { RtfServices } from '@qdp/common';
import { map } from 'rxjs/operators';
export class LcpBindingDataDirective {
    /**
     * @param {?} serverHost
     * @param {?} restfulService
     * @param {?} sessionService
     * @param {?} cache
     * @param {?} schemaManager
     * @param {?} charts
     * @param {?} dataRenderExtendService
     * @param {?} filterService
     * @param {?} loadDataUri
     * @param {?} loadDataCol
     * @param {?} injector
     */
    constructor(serverHost, restfulService, sessionService, cache, schemaManager, charts, dataRenderExtendService, filterService, loadDataUri, loadDataCol, injector) {
        this.serverHost = serverHost;
        this.restfulService = restfulService;
        this.sessionService = sessionService;
        this.cache = cache;
        this.schemaManager = schemaManager;
        this.charts = charts;
        this.dataRenderExtendService = dataRenderExtendService;
        this.filterService = filterService;
        this.loadDataUri = loadDataUri;
        this.loadDataCol = loadDataCol;
        this.injector = injector;
        this.delay = 0;
        this.interval = 0;
        this.funcIds = [];
        this.pageInfoChange = new Subject();
    }
    /**
     * @private
     * @return {?}
     */
    bindCloseTabEvent() {
        try {
            /** @type {?} */
            const tab = gspframeworkService.rtf.session.getCommonVariable();
            gspframeworkService.rtf.frmEvent.eventListener('beforeFuncCloseEvent', this.clearParametersCache.bind(this), tab);
            this.funcIds.push(tab.tabId);
            return tab.tabId + RtfServices.getInSuiteFrmUUID();
        }
        catch (e) {
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearParametersCache() {
        /** @type {?} */
        const tabId = arguments[0].tabId;
        this.cache.set(this.queryId, '');
        this.cache.set(arguments[0].tabId, '');
        this.cache.set(arguments[0].tabId + 'renderMode', '');
        /** @type {?} */
        const index = this.funcIds.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        el => el === tabId));
        if (index >= 0) {
            this.funcIds.splice(index, 1);
            gspframeworkService.rtf.func.close(arguments[0]);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.tabId = RtfServices.getTabId(this.queryId);
        QDPCacheUtil.setCache(this.tabId + this.queryId + 'lcp-charts', this);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const changeName in changes) {
            /** @type {?} */
            const newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                /** @type {?} */
                const eventId = RtfServices.getTabId(this.queryId);
                switch (changeName) {
                    case 'queryId':
                        this.queryId = newValue;
                        QDPCacheUtil.setCache(eventId + this.queryId + 'lcp-charts', this);
                        break;
                    case 'eventType':
                        if (newValue) {
                            EventBus.register(newValue, this.handleLinkage, eventId);
                        }
                        break;
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // if (this.qoId) { // 查询结果集过滤条件
        this.filterService.getFilter(this.qoManagerCode, this.queryId, this.queryRelativeUrl, 1).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                /** @type {?} */
                const conditionExpression = JSON.stringify(data.filter);
                this.render('', '', '', conditionExpression);
            }
            else {
                this.render('');
            }
        }));
        // } else {
        //   this.render('');
        // }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleLinkage($event) {
        try {
            /** @type {?} */
            const params = JSON.stringify($event);
            this.delayLoad('', {}, params, this.queryRelativeUrl);
        }
        catch (e) {
        }
    }
    /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    delayLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
        if (!this.delay) {
            this.delay = 0;
        }
        if (this.delay === 0) {
            this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
            this.intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                this.intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
            }), this.delay);
        }
    }
    /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
        if (this.interval) {
            this.myVar = setInterval((/**
             * @return {?}
             */
            () => {
                this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
            }), this.interval);
        }
    }
    /**
     * @return {?}
     */
    clearIntervalLoad() {
        if (this.myVar) {
            clearInterval(this.myVar);
        }
    }
    /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} conditionExpression
     * @return {?}
     */
    render(schemaId, option, linkageParams, conditionExpression) {
        this.delayLoad(schemaId, option, linkageParams, this.queryRelativeUrl, conditionExpression);
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getData(params, queryRelativeUrl) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl || queryRelativeUrl === '') ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
        }
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, queryRelativeUrl ? { 'Param': params } : params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, queryRelativeUrl ? { 'Param': params } : params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                data = (!queryRelativeUrl || queryRelativeUrl === '') ? data : data.returnValue;
                if (data && data.pageInfo) {
                    self.pageInfoChange.next(data.pageInfo);
                }
            }
            return data;
        })));
    }
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getCol(params, queryRelativeUrl) {
        /** @type {?} */
        let uri = this.serverHost;
        if (this.loadDataCol) {
            uri += this.loadDataCol;
        }
        else {
            uri += ((!queryRelativeUrl || queryRelativeUrl === '') ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
        }
        params = (!queryRelativeUrl || queryRelativeUrl === '') ? params : { 'Param': params };
        /** @type {?} */
        const result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                data = (!queryRelativeUrl || queryRelativeUrl === '') ? data : data.returnValue;
            }
            return data;
        })));
    }
    /**
     * @private
     * @param {?} queryId
     * @param {?} controlType
     * @param {?} schemaId
     * @param {?} qoManagerCode
     * @param {?} extendCond
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?=} printIntegration
     * @param {?=} excelExportName
     * @param {?=} voId
     * @return {?}
     */
    createParameters(queryId, controlType, schemaId, qoManagerCode, extendCond, pageIndex, pageSize, printIntegration, excelExportName, voId) {
        /** @type {?} */
        let entityData;
        /** @type {?} */
        const tabId = this.bindCloseTabEvent();
        if (this.cache.get(tabId)) {
            entityData = JSON.stringify(this.cache.get(tabId));
        }
        else if (this.cache.get(queryId)) {
            entityData = JSON.stringify(this.cache.get(queryId));
        }
        else {
            entityData = JSON.stringify({ 'id': 'undefined_null' });
        }
        /** @type {?} */
        const params = {
            entityData: entityData,
            extendCond: extendCond,
            pageIndex: pageIndex,
            pageSize: pageSize,
            schemaId: schemaId && schemaId !== 'prefab' ? schemaId : '1',
            filterCond: this.cache.get(tabId + 'filtercondition') ? this.cache.get(tabId + 'filtercondition') : '',
            qoManagerCode: qoManagerCode ? qoManagerCode : '',
            voCode: voId ? voId : ''
        };
        try {
            /** @type {?} */
            const parameterEntityData = JSON.parse(entityData);
            if (parameterEntityData.hasOwnProperty('@filterExpressionString@')) {
                /** @type {?} */
                const filterExpression = params && params.filterCond ? JSON.parse(params.filterCond) : null;
                if (!filterExpression) {
                    params.filterCond = parameterEntityData['@filterExpressionString@'];
                }
                else {
                    /** @type {?} */
                    const advanceFilterExpression = JSON.parse(parameterEntityData['@filterExpressionString@']);
                    advanceFilterExpression.expressItems = advanceFilterExpression.expressItems.concat(filterExpression.expressItems);
                    params.filterCond = JSON.stringify(advanceFilterExpression);
                }
            }
        }
        catch (e) {
        }
        if (controlType) {
            params['controlType'] = controlType;
        }
        if (excelExportName) {
            params['excelExportName'] = excelExportName;
        }
        if (printIntegration) {
            params['printIntegration'] = printIntegration ? JSON.stringify(printIntegration) : '';
        }
        return params;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    getSchemaInfo(obj) {
        /** @type {?} */
        const self = this;
        obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
        if (!obj.schemaId) {
            return self.getDefaultSchemaInfo(obj);
        }
        else {
            /** @type {?} */
            const organizationId = this.cache.get(RtfServices.getTabId(obj.queryId) + 'organizationId') || '';
            /** @type {?} */
            const result$ = this.schemaManager.getSchema(obj.schemaId, obj.queryId, obj.queryRelativeUrl, obj.groupType, organizationId);
            return result$.pipe(switchMap((/**
             * @param {?} schemaValue
             * @return {?}
             */
            (schemaValue) => {
                if (schemaValue && schemaValue['id']) {
                    return of(schemaValue);
                }
                //  else {
                //   return self.getDefaultSchemaInfo(obj);
                // }
            })));
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    getDefaultSchemaInfo(obj) {
        /** @type {?} */
        const organizationId = this.cache.get(RtfServices.getTabId(obj.queryId) + 'organizationId') || '';
        return this.schemaManager.getDefaultSchema(obj.queryId, obj.queryRelativeUrl, obj.groupType, organizationId);
    }
    /**
     * @private
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
        /** @type {?} */
        let op = option;
        this.getSchemaInfo({ schemaId: schemaId, queryId: this.charts.queryId, queryRelativeUrl }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            let _schemaId = '';
            if (schemaId) {
                _schemaId = schemaId;
            }
            if (value && !_schemaId) {
                _schemaId = value.id;
                if (value.schemaValue.chartsType.series.type && value.schemaValue.chartsType.series.type !== -1) {
                    op = Object.assign({}, value.schemaValue.chartsData, value.schemaValue.chartsStyle);
                    value.schemaValue.chartsType.series.type = value.schemaValue.chartsType.series.type.replace('1', '');
                    op.series.type = value.schemaValue.chartsType.series.type;
                    if (op.series.type !== 'line1') {
                        delete op.series.areaStyle;
                    }
                    else {
                        op.series.areaStyle = {};
                    }
                }
            }
            if (value && value.schemaValue && value.schemaValue.customOption) {
                try {
                    op = Object.assign({}, op, JSON.parse(value.schemaValue.customOption));
                }
                catch (e) {
                    op = Object.assign({}, op, value.schemaValue.customOption);
                }
            }
            /** @type {?} */
            let entityData = '';
            if (this.cache.get(this.charts.queryId)) {
                entityData = JSON.stringify(this.cache.get(this.charts.queryId));
            }
            if (linkageParams) {
                entityData = linkageParams;
            }
            // TODO: mork
            /** @type {?} */
            const params = this.createParameters(this.queryId, 'charts', _schemaId, this.qoManagerCode, '', 0, 0, undefined, undefined, this.voId);
            params['queryId'] = this.queryId ? this.queryId : '';
            if (this.qoManagerCode) {
                params['qoManagerCode'] = this.qoManagerCode;
            }
            if (_schemaId && _schemaId !== 'prefab') {
                params['schemaId'] = _schemaId;
            }
            else {
                params['schemaId'] = '1';
            }
            // 查询数据前事件
            if (this.dataRenderExtendService && this.dataRenderExtendService.beforeQueryData) {
                this.dataRenderExtendService.beforeQueryData(this.createEventParams('beforeQueryData', '查询数据前', params, this.charts));
                try {
                    this.cache.set(this.tabId, JSON.parse(params['entityData']));
                }
                catch (e) { }
            }
            // 添加列
            /** @type {?} */
            const self = this;
            self.getData(params, queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                self.getCol(params, queryRelativeUrl).subscribe((/**
                 * @param {?} resultData
                 * @return {?}
                 */
                resultData => {
                    if (!data.dynamicCols || data.dynamicCols.length === 0) {
                        data.dynamicCols = resultData.dynamicCols || [];
                    }
                    else {
                        resultData.dynamicCols.forEach((/**
                         * @param {?} col
                         * @return {?}
                         */
                        col => {
                            data.dynamicCols.push(col);
                        }));
                    }
                    if (data && data.dynamicCols && data.dynamicCols.length) {
                        /** @type {?} */
                        const joinParam = {};
                        joinParam['controlType'] = 'charts';
                        joinParam['colList'] = data.dynamicCols;
                        self.cache.set(self.tabId + 'joinSearch', joinParam);
                        self.schemaManager.colList.next(data.dynamicCols);
                    }
                    // 数据加载前事件
                    if (op && op.series && op.series.type) {
                        op.series.type = op.series.type.replace('1', '');
                    }
                    if (data && data.data && data.data.length) {
                        self.charts.setData(data.data, op);
                    }
                    else {
                        self.charts.setData([], op);
                    }
                    // 页面渲染后事件
                    if (self.dataRenderExtendService && self.dataRenderExtendService.afterLoadData) {
                        self.dataRenderExtendService.beforeLoadData(self.createEventParams('afterLoadData', '渲染后事件', data, self.charts));
                    }
                    self.cache.set(self.charts.queryId + 'echartsconfig', op);
                }));
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
    /**
     * @private
     * @param {?} eventCode
     * @param {?} eventName
     * @param {?} data
     * @param {?} control
     * @return {?}
     */
    createEventParams(eventCode, eventName, data, control) {
        return {
            eventCode,
            eventName,
            data,
            control
        };
    }
}
LcpBindingDataDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'lcpBindingData, [lcpBindingData]',
            },] }
];
/** @nocollapse */
LcpBindingDataDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }, { type: Optional }] },
    { type: RestfulService },
    { type: SessionService },
    { type: CacheService },
    { type: SchemaManagerService },
    { type: NgxEchartsDirective, decorators: [{ type: Optional }] },
    { type: DataRenderExtendService, decorators: [{ type: Optional }] },
    { type: FilterManagerService },
    { type: String, decorators: [{ type: Inject, args: [Load_Data_Uri,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [Load_Data_Col,] }, { type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
LcpBindingDataDirective.propDecorators = {
    qoManagerCode: [{ type: Input }],
    delay: [{ type: Input }],
    interval: [{ type: Input }],
    eventType: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    queryId: [{ type: Input }],
    controlType: [{ type: Input }],
    qoId: [{ type: Input }],
    voId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LcpBindingDataDirective.prototype.qoManagerCode;
    /** @type {?} */
    LcpBindingDataDirective.prototype.delay;
    /** @type {?} */
    LcpBindingDataDirective.prototype.interval;
    /** @type {?} */
    LcpBindingDataDirective.prototype.eventType;
    /** @type {?} */
    LcpBindingDataDirective.prototype.queryRelativeUrl;
    /** @type {?} */
    LcpBindingDataDirective.prototype.queryId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.controlType;
    /** @type {?} */
    LcpBindingDataDirective.prototype.qoId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.voId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.funcIds;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.myVar;
    /** @type {?} */
    LcpBindingDataDirective.prototype.tabId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.pageInfoChange;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.serverHost;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.restfulService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.schemaManager;
    /** @type {?} */
    LcpBindingDataDirective.prototype.charts;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.dataRenderExtendService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.loadDataUri;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.loadDataCol;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,