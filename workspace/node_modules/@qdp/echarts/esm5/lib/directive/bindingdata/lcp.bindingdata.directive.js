/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Directive, Input, Optional, Injector } from '@angular/core';
import { NgxEchartsDirective } from '../qdp-charts/qdp.charts.directive';
import { RestfulService, SchemaManagerService, DataRenderExtendService, Server_Host, EventBus, QDPCacheUtil } from '@qdp/common';
import { CacheService } from '@ecp-caf/caf-common';
import { of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { SessionService } from '@ecp-caf/caf-common';
import { FilterManagerService, Load_Data_Uri, Load_Data_Col } from '@qdp/common';
import { RtfServices } from '@qdp/common';
import { map } from 'rxjs/operators';
var LcpBindingDataDirective = /** @class */ (function () {
    function LcpBindingDataDirective(serverHost, restfulService, sessionService, cache, schemaManager, charts, dataRenderExtendService, filterService, loadDataUri, loadDataCol, injector) {
        this.serverHost = serverHost;
        this.restfulService = restfulService;
        this.sessionService = sessionService;
        this.cache = cache;
        this.schemaManager = schemaManager;
        this.charts = charts;
        this.dataRenderExtendService = dataRenderExtendService;
        this.filterService = filterService;
        this.loadDataUri = loadDataUri;
        this.loadDataCol = loadDataCol;
        this.injector = injector;
        this.delay = 0;
        this.interval = 0;
        this.funcIds = [];
        this.pageInfoChange = new Subject();
    }
    /**
     * @private
     * @return {?}
     */
    LcpBindingDataDirective.prototype.bindCloseTabEvent = /**
     * @private
     * @return {?}
     */
    function () {
        try {
            /** @type {?} */
            var tab = gspframeworkService.rtf.session.getCommonVariable();
            gspframeworkService.rtf.frmEvent.eventListener('beforeFuncCloseEvent', this.clearParametersCache.bind(this), tab);
            this.funcIds.push(tab.tabId);
            return tab.tabId + RtfServices.getInSuiteFrmUUID();
        }
        catch (e) {
        }
    };
    /**
     * @private
     * @return {?}
     */
    LcpBindingDataDirective.prototype.clearParametersCache = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tabId = arguments[0].tabId;
        this.cache.set(this.queryId, '');
        this.cache.set(arguments[0].tabId, '');
        this.cache.set(arguments[0].tabId + 'renderMode', '');
        /** @type {?} */
        var index = this.funcIds.findIndex((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return el === tabId; }));
        if (index >= 0) {
            this.funcIds.splice(index, 1);
            gspframeworkService.rtf.func.close(arguments[0]);
        }
    };
    /**
     * @return {?}
     */
    LcpBindingDataDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.tabId = RtfServices.getTabId(this.queryId);
        QDPCacheUtil.setCache(this.tabId + this.queryId + 'lcp-charts', this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LcpBindingDataDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var changeName in changes) {
            /** @type {?} */
            var newValue = changes[changeName].currentValue;
            if (newValue !== null && newValue !== void 0) {
                /** @type {?} */
                var eventId = RtfServices.getTabId(this.queryId);
                switch (changeName) {
                    case 'queryId':
                        this.queryId = newValue;
                        QDPCacheUtil.setCache(eventId + this.queryId + 'lcp-charts', this);
                        break;
                    case 'eventType':
                        if (newValue) {
                            EventBus.register(newValue, this.handleLinkage, eventId);
                        }
                        break;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    LcpBindingDataDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // if (this.qoId) { // 查询结果集过滤条件
        this.filterService.getFilter(this.qoManagerCode, this.queryId, this.queryRelativeUrl, 1).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                /** @type {?} */
                var conditionExpression = JSON.stringify(data.filter);
                _this.render('', '', '', conditionExpression);
            }
            else {
                _this.render('');
            }
        }));
        // } else {
        //   this.render('');
        // }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LcpBindingDataDirective.prototype.handleLinkage = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        try {
            /** @type {?} */
            var params = JSON.stringify($event);
            this.delayLoad('', {}, params, this.queryRelativeUrl);
        }
        catch (e) {
        }
    };
    /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    LcpBindingDataDirective.prototype.delayLoad = /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    function (schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
        var _this = this;
        if (!this.delay) {
            this.delay = 0;
        }
        if (this.delay === 0) {
            this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
            this.intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
                _this.intervalLoad(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
            }), this.delay);
        }
    };
    /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    LcpBindingDataDirective.prototype.intervalLoad = /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    function (schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
        var _this = this;
        if (this.interval) {
            this.myVar = setInterval((/**
             * @return {?}
             */
            function () {
                _this.bindData(schemaId, option, linkageParams, queryRelativeUrl, conditionExpression);
            }), this.interval);
        }
    };
    /**
     * @return {?}
     */
    LcpBindingDataDirective.prototype.clearIntervalLoad = /**
     * @return {?}
     */
    function () {
        if (this.myVar) {
            clearInterval(this.myVar);
        }
    };
    /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} conditionExpression
     * @return {?}
     */
    LcpBindingDataDirective.prototype.render = /**
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} conditionExpression
     * @return {?}
     */
    function (schemaId, option, linkageParams, conditionExpression) {
        this.delayLoad(schemaId, option, linkageParams, this.queryRelativeUrl, conditionExpression);
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpBindingDataDirective.prototype.getData = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataUri) {
            uri += this.loadDataUri;
        }
        else {
            uri += (!queryRelativeUrl || queryRelativeUrl === '') ? '/api/runtime/bcc/v1.0/qdpsearch/query' : (queryRelativeUrl + 'querydata');
        }
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, queryRelativeUrl ? { 'Param': params } : params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, queryRelativeUrl ? { 'Param': params } : params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                data = (!queryRelativeUrl || queryRelativeUrl === '') ? data : data.returnValue;
                if (data && data.pageInfo) {
                    self.pageInfoChange.next(data.pageInfo);
                }
            }
            return data;
        })));
    };
    /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    LcpBindingDataDirective.prototype.getCol = /**
     * @param {?} params
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    function (params, queryRelativeUrl) {
        /** @type {?} */
        var uri = this.serverHost;
        if (this.loadDataCol) {
            uri += this.loadDataCol;
        }
        else {
            uri += ((!queryRelativeUrl || queryRelativeUrl === '') ? '/api/runtime/bcc/v1.0/qdpsearch/' : queryRelativeUrl) + 'querycol';
        }
        params = (!queryRelativeUrl || queryRelativeUrl === '') ? params : { 'Param': params };
        /** @type {?} */
        var result$ = !queryRelativeUrl ? this.restfulService.post(uri, params, {}, this.createHeaderSessionId())
            : this.restfulService.put(uri, params, {}, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                data = (!queryRelativeUrl || queryRelativeUrl === '') ? data : data.returnValue;
            }
            return data;
        })));
    };
    /**
     * @private
     * @param {?} queryId
     * @param {?} controlType
     * @param {?} schemaId
     * @param {?} qoManagerCode
     * @param {?} extendCond
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?=} printIntegration
     * @param {?=} excelExportName
     * @param {?=} voId
     * @return {?}
     */
    LcpBindingDataDirective.prototype.createParameters = /**
     * @private
     * @param {?} queryId
     * @param {?} controlType
     * @param {?} schemaId
     * @param {?} qoManagerCode
     * @param {?} extendCond
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?=} printIntegration
     * @param {?=} excelExportName
     * @param {?=} voId
     * @return {?}
     */
    function (queryId, controlType, schemaId, qoManagerCode, extendCond, pageIndex, pageSize, printIntegration, excelExportName, voId) {
        /** @type {?} */
        var entityData;
        /** @type {?} */
        var tabId = this.bindCloseTabEvent();
        if (this.cache.get(tabId)) {
            entityData = JSON.stringify(this.cache.get(tabId));
        }
        else if (this.cache.get(queryId)) {
            entityData = JSON.stringify(this.cache.get(queryId));
        }
        else {
            entityData = JSON.stringify({ 'id': 'undefined_null' });
        }
        /** @type {?} */
        var params = {
            entityData: entityData,
            extendCond: extendCond,
            pageIndex: pageIndex,
            pageSize: pageSize,
            schemaId: schemaId && schemaId !== 'prefab' ? schemaId : '1',
            filterCond: this.cache.get(tabId + 'filtercondition') ? this.cache.get(tabId + 'filtercondition') : '',
            qoManagerCode: qoManagerCode ? qoManagerCode : '',
            voCode: voId ? voId : ''
        };
        try {
            /** @type {?} */
            var parameterEntityData = JSON.parse(entityData);
            if (parameterEntityData.hasOwnProperty('@filterExpressionString@')) {
                /** @type {?} */
                var filterExpression = params && params.filterCond ? JSON.parse(params.filterCond) : null;
                if (!filterExpression) {
                    params.filterCond = parameterEntityData['@filterExpressionString@'];
                }
                else {
                    /** @type {?} */
                    var advanceFilterExpression = JSON.parse(parameterEntityData['@filterExpressionString@']);
                    advanceFilterExpression.expressItems = advanceFilterExpression.expressItems.concat(filterExpression.expressItems);
                    params.filterCond = JSON.stringify(advanceFilterExpression);
                }
            }
        }
        catch (e) {
        }
        if (controlType) {
            params['controlType'] = controlType;
        }
        if (excelExportName) {
            params['excelExportName'] = excelExportName;
        }
        if (printIntegration) {
            params['printIntegration'] = printIntegration ? JSON.stringify(printIntegration) : '';
        }
        return params;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    LcpBindingDataDirective.prototype.getSchemaInfo = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var self = this;
        obj.schemaId = obj.schemaId === 'prefab' ? '1' : obj.schemaId;
        if (!obj.schemaId) {
            return self.getDefaultSchemaInfo(obj);
        }
        else {
            /** @type {?} */
            var organizationId = this.cache.get(RtfServices.getTabId(obj.queryId) + 'organizationId') || '';
            /** @type {?} */
            var result$ = this.schemaManager.getSchema(obj.schemaId, obj.queryId, obj.queryRelativeUrl, obj.groupType, organizationId);
            return result$.pipe(switchMap((/**
             * @param {?} schemaValue
             * @return {?}
             */
            function (schemaValue) {
                if (schemaValue && schemaValue['id']) {
                    return of(schemaValue);
                }
                //  else {
                //   return self.getDefaultSchemaInfo(obj);
                // }
            })));
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    LcpBindingDataDirective.prototype.getDefaultSchemaInfo = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var organizationId = this.cache.get(RtfServices.getTabId(obj.queryId) + 'organizationId') || '';
        return this.schemaManager.getDefaultSchema(obj.queryId, obj.queryRelativeUrl, obj.groupType, organizationId);
    };
    /**
     * @private
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    LcpBindingDataDirective.prototype.bindData = /**
     * @private
     * @param {?} schemaId
     * @param {?=} option
     * @param {?=} linkageParams
     * @param {?=} queryRelativeUrl
     * @param {?=} conditionExpression
     * @return {?}
     */
    function (schemaId, option, linkageParams, queryRelativeUrl, conditionExpression) {
        var _this = this;
        /** @type {?} */
        var op = option;
        this.getSchemaInfo({ schemaId: schemaId, queryId: this.charts.queryId, queryRelativeUrl: queryRelativeUrl }).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var _schemaId = '';
            if (schemaId) {
                _schemaId = schemaId;
            }
            if (value && !_schemaId) {
                _schemaId = value.id;
                if (value.schemaValue.chartsType.series.type && value.schemaValue.chartsType.series.type !== -1) {
                    op = Object.assign({}, value.schemaValue.chartsData, value.schemaValue.chartsStyle);
                    value.schemaValue.chartsType.series.type = value.schemaValue.chartsType.series.type.replace('1', '');
                    op.series.type = value.schemaValue.chartsType.series.type;
                    if (op.series.type !== 'line1') {
                        delete op.series.areaStyle;
                    }
                    else {
                        op.series.areaStyle = {};
                    }
                }
            }
            if (value && value.schemaValue && value.schemaValue.customOption) {
                try {
                    op = Object.assign({}, op, JSON.parse(value.schemaValue.customOption));
                }
                catch (e) {
                    op = Object.assign({}, op, value.schemaValue.customOption);
                }
            }
            /** @type {?} */
            var entityData = '';
            if (_this.cache.get(_this.charts.queryId)) {
                entityData = JSON.stringify(_this.cache.get(_this.charts.queryId));
            }
            if (linkageParams) {
                entityData = linkageParams;
            }
            // TODO: mork
            /** @type {?} */
            var params = _this.createParameters(_this.queryId, 'charts', _schemaId, _this.qoManagerCode, '', 0, 0, undefined, undefined, _this.voId);
            params['queryId'] = _this.queryId ? _this.queryId : '';
            if (_this.qoManagerCode) {
                params['qoManagerCode'] = _this.qoManagerCode;
            }
            if (_schemaId && _schemaId !== 'prefab') {
                params['schemaId'] = _schemaId;
            }
            else {
                params['schemaId'] = '1';
            }
            // 查询数据前事件
            if (_this.dataRenderExtendService && _this.dataRenderExtendService.beforeQueryData) {
                _this.dataRenderExtendService.beforeQueryData(_this.createEventParams('beforeQueryData', '查询数据前', params, _this.charts));
                try {
                    _this.cache.set(_this.tabId, JSON.parse(params['entityData']));
                }
                catch (e) { }
            }
            // 添加列
            /** @type {?} */
            var self = _this;
            self.getData(params, queryRelativeUrl).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                self.getCol(params, queryRelativeUrl).subscribe((/**
                 * @param {?} resultData
                 * @return {?}
                 */
                function (resultData) {
                    if (!data.dynamicCols || data.dynamicCols.length === 0) {
                        data.dynamicCols = resultData.dynamicCols || [];
                    }
                    else {
                        resultData.dynamicCols.forEach((/**
                         * @param {?} col
                         * @return {?}
                         */
                        function (col) {
                            data.dynamicCols.push(col);
                        }));
                    }
                    if (data && data.dynamicCols && data.dynamicCols.length) {
                        /** @type {?} */
                        var joinParam = {};
                        joinParam['controlType'] = 'charts';
                        joinParam['colList'] = data.dynamicCols;
                        self.cache.set(self.tabId + 'joinSearch', joinParam);
                        self.schemaManager.colList.next(data.dynamicCols);
                    }
                    // 数据加载前事件
                    if (op && op.series && op.series.type) {
                        op.series.type = op.series.type.replace('1', '');
                    }
                    if (data && data.data && data.data.length) {
                        self.charts.setData(data.data, op);
                    }
                    else {
                        self.charts.setData([], op);
                    }
                    // 页面渲染后事件
                    if (self.dataRenderExtendService && self.dataRenderExtendService.afterLoadData) {
                        self.dataRenderExtendService.beforeLoadData(self.createEventParams('afterLoadData', '渲染后事件', data, self.charts));
                    }
                    self.cache.set(self.charts.queryId + 'echartsconfig', op);
                }));
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    LcpBindingDataDirective.prototype.createHeaderSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        return RtfServices.createHeaderSessionId(this.sessionService);
    };
    /**
     * @private
     * @param {?} eventCode
     * @param {?} eventName
     * @param {?} data
     * @param {?} control
     * @return {?}
     */
    LcpBindingDataDirective.prototype.createEventParams = /**
     * @private
     * @param {?} eventCode
     * @param {?} eventName
     * @param {?} data
     * @param {?} control
     * @return {?}
     */
    function (eventCode, eventName, data, control) {
        return {
            eventCode: eventCode,
            eventName: eventName,
            data: data,
            control: control
        };
    };
    LcpBindingDataDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'lcpBindingData, [lcpBindingData]',
                },] }
    ];
    /** @nocollapse */
    LcpBindingDataDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [Server_Host,] }, { type: Optional }] },
        { type: RestfulService },
        { type: SessionService },
        { type: CacheService },
        { type: SchemaManagerService },
        { type: NgxEchartsDirective, decorators: [{ type: Optional }] },
        { type: DataRenderExtendService, decorators: [{ type: Optional }] },
        { type: FilterManagerService },
        { type: String, decorators: [{ type: Inject, args: [Load_Data_Uri,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [Load_Data_Col,] }, { type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    LcpBindingDataDirective.propDecorators = {
        qoManagerCode: [{ type: Input }],
        delay: [{ type: Input }],
        interval: [{ type: Input }],
        eventType: [{ type: Input }],
        queryRelativeUrl: [{ type: Input }],
        queryId: [{ type: Input }],
        controlType: [{ type: Input }],
        qoId: [{ type: Input }],
        voId: [{ type: Input }]
    };
    return LcpBindingDataDirective;
}());
export { LcpBindingDataDirective };
if (false) {
    /** @type {?} */
    LcpBindingDataDirective.prototype.qoManagerCode;
    /** @type {?} */
    LcpBindingDataDirective.prototype.delay;
    /** @type {?} */
    LcpBindingDataDirective.prototype.interval;
    /** @type {?} */
    LcpBindingDataDirective.prototype.eventType;
    /** @type {?} */
    LcpBindingDataDirective.prototype.queryRelativeUrl;
    /** @type {?} */
    LcpBindingDataDirective.prototype.queryId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.controlType;
    /** @type {?} */
    LcpBindingDataDirective.prototype.qoId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.voId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.funcIds;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.myVar;
    /** @type {?} */
    LcpBindingDataDirective.prototype.tabId;
    /** @type {?} */
    LcpBindingDataDirective.prototype.pageInfoChange;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.serverHost;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.restfulService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.schemaManager;
    /** @type {?} */
    LcpBindingDataDirective.prototype.charts;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.dataRenderExtendService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.loadDataUri;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.loadDataCol;
    /**
     * @type {?}
     * @private
     */
    LcpBindingDataDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,