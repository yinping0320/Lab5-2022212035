/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
// import { init } from 'echarts';
import { fromEvent, Observable } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { ChangeFilter } from './change.filter';
var NgxEchartsDirective = /** @class */ (function () {
    function NgxEchartsDirective(el, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        this.autoResize = true;
        this.loadingType = 'default';
        this.detectEventChanges = true; // deprecated, left for compatibility reasons to avoid triggering major version
        // deprecated, left for compatibility reasons to avoid triggering major version
        // ngx-echarts events
        this.chartInit = new EventEmitter();
        // echarts mouse events
        this.chartClick = this.createLazyEvent('click');
        this.chartDblClick = this.createLazyEvent('dblclick');
        this.chartMouseDown = this.createLazyEvent('mousedown');
        this.chartMouseMove = this.createLazyEvent('mousemove');
        this.chartMouseUp = this.createLazyEvent('mouseup');
        this.chartMouseOver = this.createLazyEvent('mouseover');
        this.chartMouseOut = this.createLazyEvent('mouseout');
        this.chartGlobalOut = this.createLazyEvent('globalout');
        this.chartContextMenu = this.createLazyEvent('contextmenu');
        // echarts mouse events
        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');
        this.chartLegendSelected = this.createLazyEvent('legendselected');
        this.chartLegendUnselected = this.createLazyEvent('legendunselected');
        this.chartLegendScroll = this.createLazyEvent('legendscroll');
        this.chartDataZoom = this.createLazyEvent('datazoom');
        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');
        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');
        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');
        this.chartRestore = this.createLazyEvent('restore');
        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');
        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');
        this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');
        this.chartPieSelected = this.createLazyEvent('pieselected');
        this.chartPieUnselected = this.createLazyEvent('pieunselected');
        this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');
        this.chartMapSelected = this.createLazyEvent('mapselected');
        this.chartMapUnselected = this.createLazyEvent('mapunselected');
        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');
        this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');
        this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');
        this.chartBrush = this.createLazyEvent('brush');
        this.chartBrushSelected = this.createLazyEvent('brushselected');
        this.chartRendered = this.createLazyEvent('rendered');
        this.chartFinished = this.createLazyEvent('finished');
        this.currentOffsetWidth = 0;
        this.currentOffsetHeight = 0;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        filter.notFirstAndEmpty('options').subscribe((/**
         * @param {?} opt
         * @return {?}
         */
        function (opt) { return _this.onOptionsChange(opt); }));
        filter.notFirstAndEmpty('merge').subscribe((/**
         * @param {?} opt
         * @return {?}
         */
        function (opt) { return _this.setOption(opt); }));
        filter.has('loading').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return _this.toggleLoading(!!v); }));
        filter.notFirst('theme').subscribe((/**
         * @return {?}
         */
        function () { return _this.refreshChart(); }));
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeSub = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.autoResize && window.innerWidth !== _this.currentWindowWidth) {
                _this.currentWindowWidth = window.innerWidth;
                _this.currentOffsetWidth = _this.el.nativeElement.offsetWidth;
                _this.currentOffsetHeight = _this.el.nativeElement.offsetHeight;
                _this.resize();
            }
        }));
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:no-unused-expression
        this.resizeSub && this.resizeSub.unsubscribe();
        this.dispose();
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // No heavy work in DoCheck!
        if (this.chart && this.autoResize) {
            /** @type {?} */
            var offsetWidth = this.el.nativeElement.offsetWidth;
            /** @type {?} */
            var offsetHeight = this.el.nativeElement.offsetHeight;
            if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {
                this.currentOffsetWidth = offsetWidth;
                this.currentOffsetHeight = offsetHeight;
                this.resize();
            }
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.initChart(); }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxEchartsDirective.prototype.dispose = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.dispose();
            this.chart = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxEchartsDirective.prototype.resize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.resize();
        }
    };
    /**
     * @private
     * @param {?} loading
     * @return {?}
     */
    NgxEchartsDirective.prototype.toggleLoading = /**
     * @private
     * @param {?} loading
     * @return {?}
     */
    function (loading) {
        if (this.chart) {
            loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();
        }
    };
    // 保存visualMap
    // 保存visualMap
    /**
     * @param {?} option
     * @param {?=} opts
     * @return {?}
     */
    NgxEchartsDirective.prototype.setOption = 
    // 保存visualMap
    /**
     * @param {?} option
     * @param {?=} opts
     * @return {?}
     */
    function (option, opts) {
        this.chart.setOption(option, opts);
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.clearOption = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.clear();
        }
    };
    /**
     * @return {?}
     */
    NgxEchartsDirective.prototype.getOption = /**
     * @return {?}
     */
    function () {
        return this.chart.getOption();
    };
    /**
     * @private
     * @return {?}
     */
    NgxEchartsDirective.prototype.refreshChart = /**
     * @private
     * @return {?}
     */
    function () {
        this.dispose();
        this.initChart();
    };
    /**
     * @private
     * @return {?}
     */
    NgxEchartsDirective.prototype.createChart = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.currentWindowWidth = window.innerWidth;
        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;
        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;
        /** @type {?} */
        var dom = this.el.nativeElement;
        if (window && window.getComputedStyle) {
            /** @type {?} */
            var prop = window.getComputedStyle(dom, null).getPropertyValue('height');
            if ((!prop || prop === '0px') &&
                (!dom.style.height || dom.style.height === '0px')) {
                dom.style.height = '400px';
            }
        }
        return this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return echarts.init(dom, _this.theme, _this.initOpts); }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxEchartsDirective.prototype.initChart = /**
     * @private
     * @return {?}
     */
    function () {
        this.onOptionsChange(this.options);
        if (this.merge && this.chart) {
            this.setOption(this.merge);
        }
    };
    /**
     * @private
     * @param {?} opt
     * @return {?}
     */
    NgxEchartsDirective.prototype.onOptionsChange = /**
     * @private
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        if (opt) {
            if (!this.chart) {
                this.chart = this.createChart();
                this.chartInit.emit(this.chart);
            }
            this.chart.setOption(this.options, true);
        }
        else {
            if (!this.chart) {
                this.chart = this.createChart();
                this.chartInit.emit(this.chart);
            }
        }
    };
    // allows to lazily bind to only those events that are requested through the `@Output` by parent components
    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
    // allows to lazily bind to only those events that are requested through the `@Output` by parent components
    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
    /**
     * @private
     * @template T
     * @param {?} eventName
     * @return {?}
     */
    NgxEchartsDirective.prototype.createLazyEvent = 
    // allows to lazily bind to only those events that are requested through the `@Output` by parent components
    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
    /**
     * @private
     * @template T
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        var _this = this;
        return (/** @type {?} */ (this.chartInit.pipe(switchMap((/**
         * @param {?} chart
         * @return {?}
         */
        function (chart) { return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            chart.on(eventName, (/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.ngZone.run((/**
             * @return {?}
             */
            function () { return observer.next(data); })); }));
            return null; // no need to react on unsubscribe as long as the `dispose()` is called in ngOnDestroy
        })); })))));
    };
    /**
     * @param {?} data1
     * @param {?} num
     * @return {?}
     */
    NgxEchartsDirective.prototype.setNumber = /**
     * @param {?} data1
     * @param {?} num
     * @return {?}
     */
    function (data1, num) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var l = data1.length;
        for (var i = 0; i < l; i++) {
            arr[i] = data1[i][num];
        }
        return arr;
    };
    /**
     * @param {?} data
     * @param {?=} option
     * @return {?}
     */
    NgxEchartsDirective.prototype.setData = /**
     * @param {?} data
     * @param {?=} option
     * @return {?}
     */
    function (data, option) {
        var _this = this;
        if (this.chart) {
            this.chart.clear();
        }
        data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.dynamicPropSet) {
                /** @type {?} */
                var dy = item.dynamicPropSet;
                delete item.dynamicPropSet;
                Object.assign(item, dy);
            }
        }));
        if (data && data.length) {
            this.chartsData = {
                dataset: {
                    dimensions: [],
                    source: []
                }
            };
            Object.keys(data[0]).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.chartsData.dataset.dimensions.push(key);
            }));
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var row = [];
                Object.keys(item).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    row.push(item[key]);
                }));
                _this.chartsData.dataset.source.push(row);
            }));
            if (option) {
                if (option.series && option.series.type && option.series.type === 'pie') {
                    /** @type {?} */
                    var resultOption = {
                        title: option.title,
                        dataset: this.chartsData.dataset,
                        tooltip: {
                            formatter: '{d}%',
                        },
                        series: [{
                                type: option.series.type,
                                encode: {
                                    value: option.series.encode.y[0],
                                    itemName: option.series.encode.x[0],
                                },
                            }]
                    };
                    resultOption.dataset.source.splice(0, 0, resultOption.dataset.dimensions);
                    this.chart.setOption(resultOption);
                }
                else if (option.series && (option.series.type === 'line' || option.series.type === 'scatter')) {
                    option.dataset = this.chartsData.dataset;
                    this.setZoom(option);
                    /** @type {?} */
                    var row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0]);
                    option.visualMap[0].dimension = row1;
                    option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                    option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                    option.dataset.source.splice(0, 0, option.dataset.dimensions);
                    this.chart.setOption(option);
                }
                else if (option.series && option.series.type && option.series.type === 'effectScatter') {
                    option.dataset = this.chartsData.dataset;
                    if (option.series.encode.value2.length === 0) {
                        /** @type {?} */
                        var row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                        option.visualMap[0].dimension = row1;
                        option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                        option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                        /** @type {?} */
                        var row2 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                        option.visualMap[1].dimension = row2;
                        option.visualMap[1].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                        option.visualMap[1].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                    }
                    else {
                        /** @type {?} */
                        var row = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value1[0]);
                        option.visualMap[0].dimension = row;
                        option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row));
                        option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row));
                        /** @type {?} */
                        var row2 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.value2[0]);
                        option.visualMap[1].dimension = row2;
                        option.visualMap[1].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                        option.visualMap[1].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row2));
                    }
                    option.dataset.source.splice(0, 0, option.dataset.dimensions);
                    this.chart.setOption(option);
                }
                else if (option.series && option.series.type === 'bar') {
                    if (option.series.encode.y && option.series.encode.y.length < 2) {
                        /** @type {?} */
                        var arrayTemp1 = [];
                        /** @type {?} */
                        var arrayTemp2 = [];
                        // tslint:disable-next-line:prefer-for-of
                        for (var i = 0; i < this.chartsData.dataset.source.length; i++) {
                            arrayTemp1.push(this.chartsData.dataset.source[i][this.chartsData.dataset.dimensions.indexOf(option.series.encode.x[0])]);
                            arrayTemp2.push(this.chartsData.dataset.source[i][this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0])]);
                        }
                        /** @type {?} */
                        var isRepeat = Array.from(new Set(arrayTemp1)).length - arrayTemp1.length;
                        if (isRepeat === 0) {
                            option.dataset = this.chartsData.dataset;
                            this.setZoom(option);
                            /** @type {?} */
                            var row1 = this.chartsData.dataset.dimensions.indexOf(option.series.encode.y[0]);
                            option.legend = {};
                            option.visualMap[0].dimension = row1;
                            option.visualMap[0].min = Math.min.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                            option.visualMap[0].max = Math.max.apply(null, this.setNumber(this.chartsData.dataset.source, row1));
                            option.dataset.source.splice(0, 0, option.dataset.dimensions);
                            this.chart.setOption(option);
                        }
                        // 分组，重新设置数据格式和处理逻辑
                        if (isRepeat < 0) {
                            option.visualMap = [];
                            option.dataset = this.chartsData.dataset;
                            this.setZoom(option);
                            /** @type {?} */
                            var ob = [];
                            for (var i_1 = 0; i_1 < arrayTemp1.length; i_1++) {
                                ob.push({
                                    name: arrayTemp1[i_1],
                                    value: arrayTemp2[i_1]
                                });
                            }
                            /** @type {?} */
                            var hash_1 = {};
                            /** @type {?} */
                            var i_2 = 0;
                            /** @type {?} */
                            var res_1 = [];
                            ob.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                /** @type {?} */
                                var name = item.name;
                                hash_1[name] ? res_1[hash_1[name] - 1].value.push(item.value) : hash_1[name] = ++i_2 && res_1.push({
                                    name: name,
                                    value: [item.value],
                                });
                            }));
                            // 拿到对象数组进行转置
                            /** @type {?} */
                            var xdata_1 = [];
                            /** @type {?} */
                            var max_1 = 0;
                            res_1.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                xdata_1.push(item.name);
                                if (item.value.length + 1 > max_1) {
                                    max_1 = item.value.length + 1;
                                }
                            }));
                            /** @type {?} */
                            var series_1 = [];
                            /** @type {?} */
                            var legendData = [];
                            for (var i_3 = 1; i_3 < max_1; i_3++) {
                                legendData.push(i_3 + '次');
                                series_1.push({
                                    name: i_3 + '次',
                                    type: 'bar',
                                    stack: '总量',
                                    data: [],
                                });
                            }
                            res_1.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                for (var i_4 = 0; i_4 < max_1 - 1; i_4++) {
                                    if (item.value[i_4]) {
                                        series_1[i_4].data.push(item.value[i_4]);
                                    }
                                    else {
                                        series_1[i_4].data.push(0);
                                    }
                                }
                            }));
                            option.xAxis = [{ data: xdata_1 }];
                            option.series = series_1;
                            option.legend = { data: legendData };
                            this.chart.setOption(option);
                            return;
                        }
                    }
                    else if (option.series.encode.y && option.series.encode.y.length > 1) {
                        option.dataset = this.chartsData.dataset;
                        this.setZoom(option);
                        option.visualMap = [];
                        /** @type {?} */
                        var seriesChange = [];
                        // legend data
                        /** @type {?} */
                        var yList = option.series.encode.y;
                        for (var i = 0; i < yList.length; i++) {
                            /** @type {?} */
                            var temp = {
                                type: option.series.type,
                                name: option.legend.data[i],
                                encode: {
                                    x: option.series.encode.x,
                                    y: [yList[i]],
                                },
                                label: {
                                    normal: {
                                        show: true,
                                        position: 'insideTop'
                                    }
                                },
                            };
                            if (option.title.id && option.title.id === 'pile') {
                                temp.stack = '总量';
                                delete temp.label;
                            }
                            seriesChange.push(temp);
                        }
                        option.series = seriesChange;
                        option.dataset.source.splice(0, 0, option.dataset.dimensions);
                        this.chart.setOption(option);
                    }
                }
            }
        }
    };
    /**
     * @param {?} op
     * @return {?}
     */
    NgxEchartsDirective.prototype.setZoom = /**
     * @param {?} op
     * @return {?}
     */
    function (op) {
        /** @type {?} */
        var dataZoom = [];
        if (op.dataset.source.length > 9) {
            dataZoom = [{
                    id: 'dataZoomX',
                    type: 'slider',
                    xAxisIndex: [0],
                    filterMode: 'filter'
                }];
            op.dataZoom = dataZoom;
        }
    };
    NgxEchartsDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'qdp-charts, [qdp-charts]',
                },] }
    ];
    /** @nocollapse */
    NgxEchartsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    NgxEchartsDirective.propDecorators = {
        queryId: [{ type: Input }],
        options: [{ type: Input }],
        theme: [{ type: Input }],
        loading: [{ type: Input }],
        queryRelativeUrl: [{ type: Input }],
        initOpts: [{ type: Input }],
        merge: [{ type: Input }],
        autoResize: [{ type: Input }],
        loadingType: [{ type: Input }],
        loadingOpts: [{ type: Input }],
        detectEventChanges: [{ type: Input }],
        chartInit: [{ type: Output }],
        chartClick: [{ type: Output }],
        chartDblClick: [{ type: Output }],
        chartMouseDown: [{ type: Output }],
        chartMouseMove: [{ type: Output }],
        chartMouseUp: [{ type: Output }],
        chartMouseOver: [{ type: Output }],
        chartMouseOut: [{ type: Output }],
        chartGlobalOut: [{ type: Output }],
        chartContextMenu: [{ type: Output }],
        chartLegendSelectChanged: [{ type: Output }],
        chartLegendSelected: [{ type: Output }],
        chartLegendUnselected: [{ type: Output }],
        chartLegendScroll: [{ type: Output }],
        chartDataZoom: [{ type: Output }],
        chartDataRangeSelected: [{ type: Output }],
        chartTimelineChanged: [{ type: Output }],
        chartTimelinePlayChanged: [{ type: Output }],
        chartRestore: [{ type: Output }],
        chartDataViewChanged: [{ type: Output }],
        chartMagicTypeChanged: [{ type: Output }],
        chartPieSelectChanged: [{ type: Output }],
        chartPieSelected: [{ type: Output }],
        chartPieUnselected: [{ type: Output }],
        chartMapSelectChanged: [{ type: Output }],
        chartMapSelected: [{ type: Output }],
        chartMapUnselected: [{ type: Output }],
        chartAxisAreaSelected: [{ type: Output }],
        chartFocusNodeAdjacency: [{ type: Output }],
        chartUnfocusNodeAdjacency: [{ type: Output }],
        chartBrush: [{ type: Output }],
        chartBrushSelected: [{ type: Output }],
        chartRendered: [{ type: Output }],
        chartFinished: [{ type: Output }]
    };
    return NgxEchartsDirective;
}());
export { NgxEchartsDirective };
if (false) {
    /** @type {?} */
    NgxEchartsDirective.prototype.queryId;
    /** @type {?} */
    NgxEchartsDirective.prototype.options;
    /** @type {?} */
    NgxEchartsDirective.prototype.theme;
    /** @type {?} */
    NgxEchartsDirective.prototype.loading;
    /** @type {?} */
    NgxEchartsDirective.prototype.queryRelativeUrl;
    /** @type {?} */
    NgxEchartsDirective.prototype.initOpts;
    /** @type {?} */
    NgxEchartsDirective.prototype.merge;
    /** @type {?} */
    NgxEchartsDirective.prototype.autoResize;
    /** @type {?} */
    NgxEchartsDirective.prototype.loadingType;
    /** @type {?} */
    NgxEchartsDirective.prototype.loadingOpts;
    /** @type {?} */
    NgxEchartsDirective.prototype.detectEventChanges;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartInit;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartClick;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDblClick;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseDown;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseMove;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseUp;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseOver;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMouseOut;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartGlobalOut;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartContextMenu;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendSelectChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendUnselected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartLegendScroll;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDataZoom;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDataRangeSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartTimelineChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartTimelinePlayChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartRestore;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartDataViewChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMagicTypeChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartPieSelectChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartPieSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartPieUnselected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMapSelectChanged;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMapSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartMapUnselected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartAxisAreaSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartFocusNodeAdjacency;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartUnfocusNodeAdjacency;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartBrush;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartBrushSelected;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartRendered;
    /** @type {?} */
    NgxEchartsDirective.prototype.chartFinished;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.currentOffsetWidth;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.currentOffsetHeight;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.currentWindowWidth;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.resizeSub;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.visualMapTemp;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.chartsData;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxEchartsDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,