/**
 * @fileoverview added by tsickle
 * Generated from: lib/directive/help-before-event.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { LookupGridComponent } from '@farris/ui-lookup';
import { RestfulService } from '../service/restful.service';
import { of } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
var HelpBeforeEventDirective = /** @class */ (function () {
    function HelpBeforeEventDirective(lookup, restfulService) {
        var _this = this;
        this.lookup = lookup;
        this.restfulService = restfulService;
        this.helpData = {};
        this.localHost = {};
        this.dynamicInput = [];
        this.dictPicking = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var options = {
                headers: {
                    'Content-Type': 'application/json'
                },
                responseType: 'text'
            };
            /** @type {?} */
            var paramvalues = {};
            _this.dynamicInput.forEach((/**
             * @param {?} currentInput
             * @return {?}
             */
            function (currentInput) {
                paramvalues[currentInput.paramcode] = currentInput.paramvalue;
            }));
            /** @type {?} */
            var params = {
                helpId: _this.helpData.fieldConfig.helpId,
                filterInfo: _this.helpData.fieldConfig.filterInfo,
                parameters: JSON.stringify(paramvalues)
            };
            /** @type {?} */
            var getHelpDataUrl = _this.localHost + '/api/runtime/bcc/v1.0/qdpsearch/getHelpData';
            /** @type {?} */
            var r$ = of({
                showDialog: true
            });
            return _this.restfulService.post(getHelpDataUrl, params, {}, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.lookup.items = JSON.parse(data);
            })), switchMap((/**
             * @return {?}
             */
            function () { return r$; })));
        });
    }
    /**
     * @return {?}
     */
    HelpBeforeEventDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        console.log(this.helpData, this.lookup);
        this.lookup.dictPicking = this.dictPicking;
        this.lookup.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            _this.helpData.paramvalue = rowData[_this.helpData.fieldConfig.valueField] + '|' + rowData[_this.helpData.fieldConfig.textField];
            /** @type {?} */
            var r$ = of({
                closeDialog: true
            });
            return r$;
        });
    };
    HelpBeforeEventDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[libHelpBeforeEvent]'
                },] }
    ];
    /** @nocollapse */
    HelpBeforeEventDirective.ctorParameters = function () { return [
        { type: LookupGridComponent },
        { type: RestfulService }
    ]; };
    HelpBeforeEventDirective.propDecorators = {
        helpData: [{ type: Input, args: ["libHelpBeforeEvent",] }],
        localHost: [{ type: Input }],
        dynamicInput: [{ type: Input }]
    };
    return HelpBeforeEventDirective;
}());
export { HelpBeforeEventDirective };
if (false) {
    /** @type {?} */
    HelpBeforeEventDirective.prototype.helpData;
    /** @type {?} */
    HelpBeforeEventDirective.prototype.localHost;
    /** @type {?} */
    HelpBeforeEventDirective.prototype.dynamicInput;
    /** @type {?} */
    HelpBeforeEventDirective.prototype.dictPicking;
    /**
     * @type {?}
     * @private
     */
    HelpBeforeEventDirective.prototype.lookup;
    /**
     * @type {?}
     * @private
     */
    HelpBeforeEventDirective.prototype.restfulService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC1iZWZvcmUtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9mb3JtdWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmUvaGVscC1iZWZvcmUtZXZlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFtQixtQkFBbUIsRUFBK0IsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLEVBQUUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhEO0lBUUUsa0NBQW9CLE1BQTJCLEVBQ3JDLGNBQThCO1FBRHhDLGlCQUM2QztRQUR6QixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUNyQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFKWCxhQUFRLEdBQVEsRUFBRSxDQUFDO1FBQ3ZDLGNBQVMsR0FBUSxFQUFFLENBQUM7UUFDcEIsaUJBQVksR0FBUSxFQUFFLENBQUM7UUFpQmhDLGdCQUFXOzs7UUFBRzs7Z0JBQ04sT0FBTyxHQUFRO2dCQUNuQixPQUFPLEVBQUU7b0JBQ1AsY0FBYyxFQUFFLGtCQUFrQjtpQkFDbkM7Z0JBQ0QsWUFBWSxFQUFFLE1BQU07YUFDckI7O2dCQUNLLFdBQVcsR0FBRyxFQUFFO1lBQ3RCLEtBQUksQ0FBQyxZQUFZLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsWUFBWTtnQkFDcEMsV0FBVyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDO1lBQ2hFLENBQUMsRUFBQyxDQUFDOztnQkFDRyxNQUFNLEdBQUc7Z0JBQ2IsTUFBTSxFQUFFLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQ3hDLFVBQVUsRUFBRSxLQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVO2dCQUNoRCxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7YUFDeEM7O2dCQUNLLGNBQWMsR0FBRyxLQUFJLENBQUMsU0FBUyxHQUFHLDZDQUE2Qzs7Z0JBRS9FLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ1osVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztZQUdGLE9BQU8sS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN2RSxHQUFHOzs7O1lBQUMsVUFBQyxJQUFJO2dCQUNQLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFDLEVBQ0YsU0FBUzs7O1lBQUMsY0FBTSxPQUFBLEVBQUUsRUFBRixDQUFFLEVBQUMsQ0FDcEIsQ0FBQztRQUNKLENBQUMsRUFBQTtJQTVDMkMsQ0FBQzs7OztJQUU3QywyQ0FBUTs7O0lBQVI7UUFBQSxpQkFXQztRQVZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVU7Ozs7UUFBRyxVQUFDLE9BQVk7WUFDcEMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7O2dCQUN4SCxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNaLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUM7WUFDRixPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQSxDQUFDO0lBRUosQ0FBQzs7Z0JBdEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2lCQUNqQzs7OztnQkFQeUIsbUJBQW1CO2dCQUNwQyxjQUFjOzs7MkJBU3BCLEtBQUssU0FBQyxvQkFBb0I7NEJBQzFCLEtBQUs7K0JBQ0wsS0FBSzs7SUErQ1IsK0JBQUM7Q0FBQSxBQXRERCxJQXNEQztTQW5EWSx3QkFBd0I7OztJQUVuQyw0Q0FBZ0Q7O0lBQ2hELDZDQUE2Qjs7SUFDN0IsZ0RBQWdDOztJQWlCaEMsK0NBNkJDOzs7OztJQTdDVywwQ0FBbUM7Ozs7O0lBQzdDLGtEQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb29rdXBDb21wb25lbnQsIExvb2t1cEdyaWRDb21wb25lbnQsIFBpY2tpbmdSZXN1bHQsIFBpY2tlZFJlc3VsdCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgUmVzdGZ1bFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3Jlc3RmdWwuc2VydmljZSc7XHJcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbGliSGVscEJlZm9yZUV2ZW50XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhlbHBCZWZvcmVFdmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dChcImxpYkhlbHBCZWZvcmVFdmVudFwiKSBoZWxwRGF0YTogYW55ID0ge307XHJcbiAgQElucHV0KCkgbG9jYWxIb3N0OiBhbnkgPSB7fTtcclxuICBASW5wdXQoKSBkeW5hbWljSW5wdXQ6IGFueSA9IFtdO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9va3VwOiBMb29rdXBHcmlkQ29tcG9uZW50LFxyXG4gICAgcHJpdmF0ZSByZXN0ZnVsU2VydmljZTogUmVzdGZ1bFNlcnZpY2UpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMuaGVscERhdGEsIHRoaXMubG9va3VwKTtcclxuICAgIHRoaXMubG9va3VwLmRpY3RQaWNraW5nID0gdGhpcy5kaWN0UGlja2luZztcclxuICAgIHRoaXMubG9va3VwLmRpY3RQaWNrZWQgPSAocm93RGF0YTogYW55KTogT2JzZXJ2YWJsZTxQaWNrZWRSZXN1bHQ+ID0+IHtcclxuICAgICAgdGhpcy5oZWxwRGF0YS5wYXJhbXZhbHVlID0gcm93RGF0YVt0aGlzLmhlbHBEYXRhLmZpZWxkQ29uZmlnLnZhbHVlRmllbGRdICsgJ3wnICsgcm93RGF0YVt0aGlzLmhlbHBEYXRhLmZpZWxkQ29uZmlnLnRleHRGaWVsZF07XHJcbiAgICAgIGNvbnN0IHIkID0gb2Yoe1xyXG4gICAgICAgIGNsb3NlRGlhbG9nOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gciQ7XHJcbiAgICB9O1xyXG5cclxuICB9XHJcblxyXG4gIGRpY3RQaWNraW5nID0gKCk6IE9ic2VydmFibGU8UGlja2luZ1Jlc3VsdD4gPT4ge1xyXG4gICAgY29uc3Qgb3B0aW9uczogYW55ID0ge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9LFxyXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0J1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhcmFtdmFsdWVzID0ge307XHJcbiAgICB0aGlzLmR5bmFtaWNJbnB1dC5mb3JFYWNoKGN1cnJlbnRJbnB1dCA9PiB7XHJcbiAgICAgIHBhcmFtdmFsdWVzW2N1cnJlbnRJbnB1dC5wYXJhbWNvZGVdID0gY3VycmVudElucHV0LnBhcmFtdmFsdWU7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgaGVscElkOiB0aGlzLmhlbHBEYXRhLmZpZWxkQ29uZmlnLmhlbHBJZCxcclxuICAgICAgZmlsdGVySW5mbzogdGhpcy5oZWxwRGF0YS5maWVsZENvbmZpZy5maWx0ZXJJbmZvLFxyXG4gICAgICBwYXJhbWV0ZXJzOiBKU09OLnN0cmluZ2lmeShwYXJhbXZhbHVlcylcclxuICAgIH1cclxuICAgIGNvbnN0IGdldEhlbHBEYXRhVXJsID0gdGhpcy5sb2NhbEhvc3QgKyAnL2FwaS9ydW50aW1lL2JjYy92MS4wL3FkcHNlYXJjaC9nZXRIZWxwRGF0YSc7XHJcblxyXG4gICAgY29uc3QgciQgPSBvZih7XHJcbiAgICAgIHNob3dEaWFsb2c6IHRydWVcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZXN0ZnVsU2VydmljZS5wb3N0KGdldEhlbHBEYXRhVXJsLCBwYXJhbXMsIHt9LCBvcHRpb25zKS5waXBlKFxyXG4gICAgICB0YXAoKGRhdGEpID0+IHtcclxuICAgICAgICB0aGlzLmxvb2t1cC5pdGVtcyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gciQpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=