/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/restful.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
var RestfulService = /** @class */ (function () {
    /**
     * 构造函数
     * @param httpClient http客户端
     */
    function RestfulService(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * 发送GET请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    /**
     * 发送GET请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    RestfulService.prototype.get = /**
     * 发送GET请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    function (uri, params, options) {
        return this.request(uri, 'GET', params, options);
    };
    /**
     * 发送POST请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    /**
     * 发送POST请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    RestfulService.prototype.put = /**
     * 发送POST请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    function (uri, body, params, options) {
        /** @type {?} */
        var optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'PUT', params, optionsWithBody);
    };
    /**
     * 发送PUT请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    /**
     * 发送PUT请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    RestfulService.prototype.post = /**
     * 发送PUT请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    function (uri, body, params, options) {
        /** @type {?} */
        var optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'POST', params, optionsWithBody);
    };
    /**
     * 发送DELETE请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    /**
     * 发送DELETE请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    RestfulService.prototype.delete = /**
     * 发送DELETE请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    function (uri, params, options) {
        return this.request(uri, 'DELETE', params, options);
    };
    /**
     * 发送请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    /**
     * 发送请求
     * @private
     * @param {?} uri 请求地址
     * @param {?} method
     * @param {?} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    RestfulService.prototype.request = /**
     * 发送请求
     * @private
     * @param {?} uri 请求地址
     * @param {?} method
     * @param {?} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    function (uri, method, params, options) {
        if (options === void 0) { options = {}; }
        options = options || {};
        if (params) {
            /** @type {?} */
            var httpParams = this.buildParams(params);
            options.params = httpParams;
        }
        /** @type {?} */
        var methodName = (/** @type {?} */ (method));
        /** @type {?} */
        var result = this.httpClient.request(methodName, uri, options);
        // if (result && result.returnValue) {result = result.returnValue};
        return result;
    };
    /**
     * 构造Http请求参数
     * @param params 请求参数
     */
    /**
     * 构造Http请求参数
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    RestfulService.prototype.buildParams = /**
     * 构造Http请求参数
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var parameters = {};
        for (var key in params) {
            if (params.hasOwnProperty(key) && params[key]) {
                /** @type {?} */
                var value = params[key].toString();
                parameters[key] = value;
            }
        }
        return parameters;
    };
    /**
     * @private
     * @param {?} options
     * @param {?} body
     * @return {?}
     */
    RestfulService.prototype.addBody = /**
     * @private
     * @param {?} options
     * @param {?} body
     * @return {?}
     */
    function (options, body) {
        options = options || {};
        /** @type {?} */
        var mergedOptions = Object.assign(options, { body: body });
        return mergedOptions;
    };
    RestfulService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RestfulService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return RestfulService;
}());
export { RestfulService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RestfulService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdGZ1bC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9mb3JtdWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3Jlc3RmdWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBSzlEO0lBRUU7OztPQUdHO0lBQ0gsd0JBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBSSxDQUFDO0lBQy9DOzs7O09BSUc7Ozs7Ozs7O0lBQ0gsNEJBQUc7Ozs7Ozs7SUFBSCxVQUFJLEdBQVcsRUFBRSxNQUFlLEVBQUUsT0FBYTtRQUM1QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7OztJQUNILDRCQUFHOzs7Ozs7OztJQUFILFVBQUksR0FBVyxFQUFFLElBQVMsRUFBRSxNQUFlLEVBQUUsT0FBYTs7WUFDbEQsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7OztJQUNILDZCQUFJOzs7Ozs7OztJQUFKLFVBQUssR0FBVyxFQUFFLElBQVMsRUFBRSxNQUFlLEVBQUUsT0FBYTs7WUFDakQsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7O0lBQ0gsK0JBQU07Ozs7Ozs7SUFBTixVQUFPLEdBQVcsRUFBRSxNQUFlLEVBQUUsT0FBYTtRQUNoRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7Ozs7SUFDSyxnQ0FBTzs7Ozs7Ozs7O0lBQWYsVUFBZ0IsR0FBVyxFQUFFLE1BQVcsRUFBRSxNQUFjLEVBQUUsT0FBaUI7UUFBakIsd0JBQUEsRUFBQSxZQUFpQjtRQUN6RSxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFJLE1BQU0sRUFBRTs7Z0JBQ0osVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDO1NBQzdCOztZQUNLLFVBQVUsR0FBRyxtQkFBQSxNQUFNLEVBQVU7O1lBQzdCLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQztRQUNoRSxtRUFBbUU7UUFDbkUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7OztJQUNLLG9DQUFXOzs7Ozs7SUFBbkIsVUFBb0IsTUFBYzs7WUFDMUIsVUFBVSxHQUFRLEVBQUU7UUFDMUIsS0FBSyxJQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTs7b0JBQ3ZDLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFO2dCQUNwQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ3pCO1NBQ0Y7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOzs7Ozs7O0lBRU8sZ0NBQU87Ozs7OztJQUFmLFVBQWdCLE9BQVksRUFBRSxJQUFTO1FBQ3JDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDOztZQUNsQixhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDO1FBQ3RELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7O2dCQWpGRixVQUFVOzs7O2dCQUxGLFVBQVU7O0lBdUZuQixxQkFBQztDQUFBLEFBbEZELElBa0ZDO1NBakZZLGNBQWM7Ozs7OztJQUtiLG9DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IHR5cGUgUmVzdGZ1bE1ldGhvZCA9ICdHRVQnIHwgJ1BVVCcgfCAnUE9TVCcgfCAnREVMRVRFJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlc3RmdWxTZXJ2aWNlIHtcclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gaHR0cENsaWVudCBodHRw5a6i5oi356uvXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7IH1cclxuICAvKipcclxuICAgKiDlj5HpgIFHRVTor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgZ2V0KHVyaTogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueVtdPiB7XHJcbiAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmksICdHRVQnLCBwYXJhbXMsIG9wdGlvbnMpOyBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgVBPU1Tor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgcHV0KHVyaTogc3RyaW5nLCBib2R5OiBhbnksIHBhcmFtcz86IG9iamVjdCwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBvcHRpb25zV2l0aEJvZHkgPSB0aGlzLmFkZEJvZHkob3B0aW9ucywgYm9keSk7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVyaSwgJ1BVVCcsIHBhcmFtcywgb3B0aW9uc1dpdGhCb2R5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgVBVVOivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBwb3N0KHVyaTogc3RyaW5nLCBib2R5OiBhbnksIHBhcmFtcz86IG9iamVjdCwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgIGNvbnN0IG9wdGlvbnNXaXRoQm9keSA9IHRoaXMuYWRkQm9keShvcHRpb25zLCBib2R5KTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmksICdQT1NUJywgcGFyYW1zLCBvcHRpb25zV2l0aEJvZHkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBREVMRVRF6K+35rGCXHJcbiAgICogQHBhcmFtIHVyaSDor7fmsYLlnLDlnYBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIGRlbGV0ZSh1cmk6IHN0cmluZywgcGFyYW1zPzogb2JqZWN0LCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJpLCAnREVMRVRFJywgcGFyYW1zLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgeivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBwcml2YXRlIHJlcXVlc3QodXJpOiBzdHJpbmcsIG1ldGhvZDogYW55LCBwYXJhbXM6IG9iamVjdCwgb3B0aW9uczogYW55ID0ge30pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBpZiAocGFyYW1zKSB7XHJcbiAgICAgIGNvbnN0IGh0dHBQYXJhbXMgPSB0aGlzLmJ1aWxkUGFyYW1zKHBhcmFtcyk7XHJcbiAgICAgIG9wdGlvbnMucGFyYW1zID0gaHR0cFBhcmFtcztcclxuICAgIH1cclxuICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2QgYXMgc3RyaW5nO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3QobWV0aG9kTmFtZSwgdXJpLCBvcHRpb25zKTtcclxuICAgIC8vIGlmIChyZXN1bHQgJiYgcmVzdWx0LnJldHVyblZhbHVlKSB7cmVzdWx0ID0gcmVzdWx0LnJldHVyblZhbHVlfTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKBIdHRw6K+35rGC5Y+C5pWwXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkUGFyYW1zKHBhcmFtczogb2JqZWN0KTogSHR0cFBhcmFtcyB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzOiBhbnkgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xyXG4gICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkgJiYgcGFyYW1zW2tleV0pIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgcGFyYW1ldGVyc1trZXldID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbWV0ZXJzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRCb2R5KG9wdGlvbnM6IGFueSwgYm9keTogYW55KSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHsgYm9keSB9KTtcclxuICAgIHJldHVybiBtZXJnZWRPcHRpb25zO1xyXG4gIH1cclxufVxyXG4iXX0=