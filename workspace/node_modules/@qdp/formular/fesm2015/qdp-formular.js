import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { FlexLayoutModule } from '@farris/ui-flex-layout';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { NotifyModule } from '@farris/ui-notify';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { TreeTableModule } from '@farris/ui-treetable';
import { ColorPickerModule } from 'ngx-color-picker';
import { RtfAppHelpModule } from '@gsp-sys/rtf-ui';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { GridModule } from '@progress/kendo-angular-grid';
import { PopupModule } from '@progress/kendo-angular-popup';
import { NumericTextBoxModule, InputsModule } from '@progress/kendo-angular-inputs';
import { DropDownsModule, DropDownListModule } from '@progress/kendo-angular-dropdowns';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { CacheService } from '@ecp-caf/caf-common';
import { find, findIndex, merge } from 'lodash-es';
import { DatagridModule } from '@farris/ui-datagrid';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisButtonModule } from '@farris/ui-button';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { BE_SERVER_URI_TOKEN } from '@farris/bef';
import { FarrisPanelModule } from '@farris/ui-panel';
import { FarrisFormsModule } from '@farris/ui-forms';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { LocalizeService, LocalizeModule } from '@qdp/localize';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { Injectable, Component, ViewChild, Output, EventEmitter, ViewContainerRef, ComponentFactoryResolver, Input, Injector, Inject, Directive, NgModule } from '@angular/core';
import { LookupGridComponent, LookupModule } from '@farris/ui-lookup';
import { of, Subject } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/restful.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RestfulService {
    /**
     * 构造函数
     * @param {?} httpClient http客户端
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * 发送GET请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    get(uri, params, options) {
        return this.request(uri, 'GET', params, options);
    }
    /**
     * 发送POST请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    put(uri, body, params, options) {
        /** @type {?} */
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'PUT', params, optionsWithBody);
    }
    /**
     * 发送PUT请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    post(uri, body, params, options) {
        /** @type {?} */
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'POST', params, optionsWithBody);
    }
    /**
     * 发送DELETE请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    delete(uri, params, options) {
        return this.request(uri, 'DELETE', params, options);
    }
    /**
     * 发送请求
     * @private
     * @param {?} uri 请求地址
     * @param {?} method
     * @param {?} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    request(uri, method, params, options = {}) {
        options = options || {};
        if (params) {
            /** @type {?} */
            const httpParams = this.buildParams(params);
            options.params = httpParams;
        }
        /** @type {?} */
        const methodName = (/** @type {?} */ (method));
        /** @type {?} */
        const result = this.httpClient.request(methodName, uri, options);
        // if (result && result.returnValue) {result = result.returnValue};
        return result;
    }
    /**
     * 构造Http请求参数
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        /** @type {?} */
        const parameters = {};
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key]) {
                /** @type {?} */
                const value = params[key].toString();
                parameters[key] = value;
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} options
     * @param {?} body
     * @return {?}
     */
    addBody(options, body) {
        options = options || {};
        /** @type {?} */
        const mergedOptions = Object.assign(options, { body });
        return mergedOptions;
    }
}
RestfulService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RestfulService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/entitydata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityDataService {
    constructor() {
        this.isFinish = false;
        this.formularInfo = {};
    }
    /**
     * @param {?} stepTye
     * @return {?}
     */
    setStepType(stepTye) {
        this.stepType = stepTye;
    }
    /**
     * @return {?}
     */
    getStepType() {
        return this.stepType;
    }
    /**
     * @param {?} isFinish
     * @param {?} formularInfo
     * @return {?}
     */
    setFormularState(isFinish, formularInfo) {
        this.isFinish = isFinish;
        this.formularInfo = formularInfo;
    }
    /**
     * @return {?}
     */
    getFormularState() {
        return { isFinish: this.isFinish, formularInfo: this.formularInfo };
    }
}
EntityDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EntityDataService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/formular-define/formular-define.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormularDefineComponent {
    /**
     * @param {?} restfulService
     * @param {?} msgService
     * @param {?} cacheService
     * @param {?} loadService
     * @param {?} entityDataService
     * @param {?} localizeService
     */
    constructor(restfulService, msgService, cacheService, loadService, entityDataService, localizeService) {
        this.restfulService = restfulService;
        this.msgService = msgService;
        this.cacheService = cacheService;
        this.loadService = loadService;
        this.entityDataService = entityDataService;
        this.localizeService = localizeService;
        this.data = [];
        this.funcData = [];
        // 当前站点host
        this.size = {};
        this.inputTemplate = '';
        this.dynamicInput = [];
        this.columns = [];
        this.formularText = ''; // 公式信息
        // 公式信息
        this.binding = 'selectFormular';
        this.name = ''; // 公式名称
        // 公式名称
        this.isGroup = false; // 是否分组
        // 是否分组
        this.resultDatas = [];
        this.resultColumns = [];
        this.formularWizard = '0';
        this.formularType = 0; // 0普通公式 1组合公式
        // 0普通公式 1组合公式
        this.loading = this.loadService.show({ container: 'body' });
        /**
         * 国际化
         */
        this.labelSaveFormular = '保存公式';
        this.resultSortColumns = [
            {
                id: '0',
                label: '无'
            },
            {
                id: '1',
                label: '升序'
            },
            {
                id: '2',
                label: '降序'
            }
        ];
        this.resultColVisibleColumns = [
            {
                id: '0',
                label: '否'
            },
            {
                id: '1',
                label: '是'
            }
        ];
        /**
         * 帮助配置字段
         */
        this.helpData = [];
        this.helpColumns = [];
        this.handlebeforeClose = (/**
         * @return {?}
         */
        () => {
            return of(true);
        });
        this.clickLastStep = (/**
         * @return {?}
         */
        () => {
            this.cacheService.set('formularParam', this.data);
            return true;
        });
        this.beforeFinish = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const flag$ = new Subject();
            if (this.formularType === 1) { // 组合公式保存
                if (!this.name) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.nameVerify'));
                }
                if (!this.formularText) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.combineVerify'));
                }
                else if (this.formularText && !this.formularCheck(this.formularText)) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.formularIntegrityVerify'));
                }
                /** @type {?} */
                const formularInfo = {
                    id: this.currentFormularId,
                    isgroup: this.isGroup ? 1 : 0,
                    name: this.name,
                    queryfunc: '',
                    str1: '',
                    str2: '',
                    str3: '',
                    str4: '',
                    cursu: this.data.currentSU,
                    str5: this.data.formularRegion ? this.data.formularRegion : 'publish',
                    str6: this.formularText,
                    num1: 1,
                };
                /** @type {?} */
                const options = {
                    headers: {
                        'SessionId': this.data.sessionId,
                        'Content-Type': 'application/json'
                    }
                };
                if (formularInfo) {
                    /** @type {?} */
                    const retrieveUri = this.data.serverHost + '/api/gsp/bcc/v1.0/querygetdatadetail_frm/service/saveqdpformular';
                    this.restfulService.put(retrieveUri, { formularInfo: JSON.stringify(formularInfo) }, {}, options).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        /** @type {?} */
                        const formularData = data.returnValue;
                        if (formularData) {
                            this.currentFormularId = formularData;
                            this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: this.name });
                            //this.cacheService.set('formularResult', { id: this.currentFormularId, name: '公式' });
                            flag$.next(true);
                        }
                        else {
                            this.entityDataService.setFormularState(false, {});
                            this.msgService.error(this.localizeService.getValue('formular.define.messageAlert.saveFormularFailure'));
                        }
                    }));
                }
            }
            else if (!this.currentFormularId) {
                this.entityDataService.setFormularState(false, {});
                this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.formularSaveVerify'));
                return false;
            }
            else {
                this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: this.name });
                //this.cacheService.set('formularResult', { id: this.currentFormularId, name: this.name ? this.name : '公式' });
                return true;
            }
            return flag$;
        });
        this.labelSaveFormular = this.localizeService.getValue('formular.define.labelSaveFormular');
        this.labelGeneraterFormular = this.localizeService.getValue('formular.define.labelGeneraterFormular');
        this.labelQueryFunc = this.localizeService.getValue('formular.define.labelQueryFunc');
        this.labelBasicInfo = this.localizeService.getValue('formular.define.labelBasicInfo');
        this.labelFormularName = this.localizeService.getValue('formular.define.labelFormularName');
        this.labelIsGroup = this.localizeService.getValue('formular.define.labelIsGroup');
        this.labelParamInfo = this.localizeService.getValue('formular.define.labelParamInfo');
        this.labelResultColInfo = this.localizeService.getValue('formular.define.labelResultColInfo');
        this.resultSortColumns = this.localizeService.getValue('formular.define.resultSortColumns');
        this.resultColVisibleColumns = this.localizeService.getValue('formular.define.resultColVisibleColumns');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.data = this.cacheService.get('formularParam');
        this.formularWizard = this.data.formularWizard;
        this.formularType = this.data.formularWizard === '2' ? 1 : 0;
        this.currentFormularId = this.data.currentFormularId;
        this.columns = [
            // { field: 'id', width: 100, title: 'ID' },
            { field: 'resultcolvisible', width: 60, title: this.localizeService.getValue('formular.define.columntitles.resultcolvisible'), template: this.resultColVisibleColumnTemp },
            { field: 'resultcode', width: 60, title: this.localizeService.getValue('formular.define.columntitles.resultcode') },
            { field: 'resultdescription', width: 60, title: this.getResultDescription() },
            { field: 'resultsort', width: 60, title: this.localizeService.getValue('formular.define.columntitles.resultsort'), template: this.resultSortColumnTemp }
        ];
        if (this.data.sessionId) {
            this.getFuncInfo();
        }
        else {
            this.createHeaderSessionId().subscribe((/**
             * @param {?} sessionId
             * @return {?}
             */
            sessionId => {
                console.log(sessionId);
                if (sessionId) {
                    this.getFuncInfo();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    guid() {
        return ((/** @type {?} */ ([1e7])) + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (/**
         * @param {?} c
         * @return {?}
         */
        c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)));
    }
    /**
     * @return {?}
     */
    getResultDescription() {
        return this.getLanguage() === 'zh-chs' ? '列描述' : 'description';
    }
    /**
     * @return {?}
     */
    getLanguage() {
        switch (this.localizeService.localeId) {
            case 'zh-chs':
            case 'zh-cn':
            case 'zh':
                return 'zh-chs';
            case 'en-us':
            case 'en':
                return 'en-us';
        }
        return 'zh-chs';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.loading.close();
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        /** @type {?} */
        const sessionId = new Subject();
        /** @type {?} */
        const options = {
            headers: {
                'Content-Type': 'application/json'
            },
            responseType: 'text'
        };
        /** @type {?} */
        const createSessionUrl = this.data.serverHost + '/api/gsp/bcc/v1.0/queryfuncdetail_frm/service/createsession';
        this.restfulService.post(createSessionUrl, {}, {}, options).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.data.sessionId = data;
            sessionId.next(data);
        }));
        return sessionId;
    }
    /**
     * @private
     * @return {?}
     */
    getFuncInfo() {
        /** @type {?} */
        let uri = this.data.serverHost;
        /** @type {?} */
        const options = {
            headers: {
                'SessionId': this.data.sessionId,
                'Content-Type': 'application/json'
            }
        };
        /** @type {?} */
        const entityFilter = {
            FilterConditions: [{ 'FilterField': 'SrcSU', 'Value': this.data.currentSU, 'Lbracket': null, 'Rbracket': null, 'Relation': 0, 'Expresstype': 0, 'Compare': 6 }],
            SortConditions: [],
            IsUsePagination: false,
            Pagination: {
                PageIndex: 0,
                PageSize: 0,
                PageCount: 0,
                TotalCount: 0
            }
        };
        uri += '/api/gsp/bcc/v1.0/queryfuncdetail_frm/extension/query?entityFilter=' + JSON.stringify(entityFilter);
        this.restfulService.put(uri, {}, {}, options).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            const funcDatas = data.returnValue.result;
            if (funcDatas && funcDatas.length > 0) {
                funcDatas.forEach((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => {
                    this.funcData.push({ name: x.name, value: x.id });
                }));
            }
            this.currentFuncDatas = funcDatas;
            // 如果选择的是选择公式，根据公示信息初始默认的数据
            if (this.currentFormularId && this.data.formularData && this.data.formularData.num1 === 1) {
                this.name = this.data.formularData.name;
                this.formularText = this.data.formularData.str6;
                this.formularType = 1;
            }
            else {
                this.getFormularInfo();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getFormularInfo() {
        // 清空历史数据
        this.dynamicInput = [];
        this.resultColumns = [];
        this.resultDatas = [];
        this.formularText = '';
        this.name = '';
        this.isGroup = 0;
        if (this.currentFormularId) {
            /** @type {?} */
            const options = {
                headers: {
                    'SessionId': this.data.sessionId,
                    'Content-Type': 'application/json'
                }
            };
            /** @type {?} */
            const retrieveUri = this.data.serverHost + '/api/gsp/bcc/v1.0/querygetdatadetail_frm/extension/retrieve/' + this.currentFormularId;
            this.restfulService.put(retrieveUri, {}, {}, options).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                /** @type {?} */
                const formularData = data.returnValue;
                if (formularData) {
                    // 初始基础数据
                    this.name = formularData.name;
                    this.data.currentFormularName = formularData.name;
                    this.isGroup = formularData.isGroup;
                    /** @type {?} */
                    const queryFuncId = formularData.queryFunc;
                    this.type = formularData.str1;
                    this.metadataobjectid = formularData.str2;
                    this.funcSelectValue = this.funcData.find((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.value === queryFuncId));
                    this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: this.name });
                    if (queryFuncId) {
                        this.getDropDownInfo(queryFuncId, this.type, this.metadataobjectid, true, formularData.queryGetDataParamInfos);
                    }
                    // const currentQueryGetDataParams = formularData.queryGetDataParamInfos;
                    /** @type {?} */
                    const queryFuncResults = formularData.queryGetDataResultInfos;
                    // if (currentQueryGetDataParams && currentQueryGetDataParams.length > 0) {
                    //   currentQueryGetDataParams.forEach(queryGetDataParam => {
                    //     const fieldConfig = JSON.parse(queryGetDataParam.fieldConfig);
                    //     if (fieldConfig.controltype === 'dropdown') {
                    //       fieldConfig.enumValues = JSON.parse(fieldConfig.enumValues);
                    //     }
                    //     this.dynamicInput.push({ paramcode: queryGetDataParam.paramCode, paramname: queryGetDataParam.paramName, paramvalue: queryGetDataParam.paramValue, fieldConfig: JSON.parse(queryGetDataParam.fieldConfig) });
                    //   });
                    // }
                    if (queryFuncResults && queryFuncResults.length > 0) {
                        /** @type {?} */
                        const resultColumns = [];
                        /** @type {?} */
                        const data = [];
                        queryFuncResults.forEach((/**
                         * @param {?} queryFuncResult
                         * @return {?}
                         */
                        queryFuncResult => {
                            resultColumns.push({ id: queryFuncResult.resultCode, label: queryFuncResult.resultName });
                            data.push({
                                id: queryFuncResult.id,
                                resultcode: queryFuncResult.resultCode,
                                resultsort: queryFuncResult.resultSort,
                                resultname: queryFuncResult.resultName,
                                resultcolvisible: queryFuncResult.resultColVisible === true ? '1' : '0',
                                resultdescription: ''
                            });
                        }));
                        this.resultColumns = [...resultColumns];
                        this.resultDatas = [...data];
                    }
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    generateFormular() {
        if (!this.name) {
            this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.nameVerify'));
            return;
        }
        if (!this.funcSelectValue) {
            this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.funcVerify'));
            return;
        }
        /** @type {?} */
        const formularInfo = {
            id: this.currentFormularId,
            cursu: this.data.currentSU,
            isgroup: this.isGroup ? 1 : 0,
            name: this.name,
            queryfunc: this.funcSelectValue.value,
            str1: this.type,
            str2: this.metadataobjectid,
            str3: this.qomanagercode ? this.qomanagercode : '',
            str4: this.funcSelectValue.name,
            str5: '',
            str6: '',
            formularParamInfos: this.dynamicInput,
            formularResultInfos: this.resultDatas
        };
        /** @type {?} */
        const options = {
            headers: {
                'SessionId': this.data.sessionId,
                'Content-Type': 'application/json'
            }
        };
        if (formularInfo) {
            /** @type {?} */
            const retrieveUri = this.data.serverHost + '/api/gsp/bcc/v1.0/querygetdatadetail_frm/service/saveqdpformular';
            this.restfulService.put(retrieveUri, { formularInfo: JSON.stringify(formularInfo) }, {}, options).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                /** @type {?} */
                const formularData = data.returnValue;
                if (formularData) {
                    this.currentFormularId = formularData;
                    this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: this.name });
                    // this.entityDataService.isFinish = true;
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.saveFormular'));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    generateFormularInfo() {
        if (!this.currentFunctionId) {
            this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.pleaseSelectQueryFunc'));
            return;
        }
        if (this.resultDatas && this.resultDatas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.resultcolvisible === '1')).length !== 1) {
            this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.resultVerify'));
            return;
        }
        /** @type {?} */
        const paramInfo = [];
        this.dynamicInput.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            paramInfo.push({ key: x.paramcode, value: x.paramvalue ? x.paramvalue : '' });
        }));
        /** @type {?} */
        const formularcompile = {
            funcId: this.currentFunctionId,
            paramInfos: paramInfo,
            resultColName: this.resultDatas[0].resultcode,
            qomanagercode: this.qomanagercode,
            isgroup: this.isGroup ? 1 : 0
        };
        this.formularText = this.formularText + 'QDPFormular.execute(' + JSON.stringify(formularcompile) + ') ';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    operator($event) {
        this.formularText = this.formularText + $event;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        this.size.height = event.newHeight;
        this.size.width = event.newWidth;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectionChange($event) {
        // 清空历史数据
        this.dynamicInput = [];
        this.resultColumns = [];
        this.resultDatas = [];
        this.name = this.formularType === 1 ? this.name : '';
        this.isGroup = 0;
        if ($event && $event.value) {
            this.currentFunctionId = $event.value;
            /** @type {?} */
            const funcData = this.currentFuncDatas.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id === this.currentFunctionId));
            this.name = this.name === '' ? funcData.name : this.name;
            // 保存公式类型及元数据id
            this.type = funcData.srcType;
            this.metadataobjectid = funcData.metadataObject;
            if (this.currentFunctionId) {
                this.getDropDownInfo(this.currentFunctionId, this.type, this.metadataobjectid, true, '');
            }
        }
    }
    // 初始下拉信息
    /**
     * @param {?} funcid
     * @param {?} type
     * @param {?} metadataobjectid
     * @param {?} generateData
     * @param {?} queryFormularParam
     * @return {?}
     */
    getDropDownInfo(funcid, type, metadataobjectid, generateData, queryFormularParam) {
        /** @type {?} */
        const self = this;
        // 访问数据服务
        /** @type {?} */
        const options = {
            headers: {
                'SessionId': self.data.sessionId,
                'Content-Type': 'application/json'
            }
        };
        /** @type {?} */
        const url = self.data.serverHost + '/api/gsp/bcc/v1.0/queryfuncdetail_frm/extension/retrieve/' + funcid;
        self.restfulService.put(url, {}, {}, options).toPromise().then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                value = value.returnValue;
                // 查询参数
                if (generateData) {
                    /** @type {?} */
                    let queryFuncParams = value.queryFuncParams;
                    if (queryFuncParams.length > 0) {
                        // if (currentQueryGetDataParams && currentQueryGetDataParams.length > 0) {
                        //   currentQueryGetDataParams.forEach(queryGetDataParam => {
                        //     const fieldConfig = JSON.parse(queryGetDataParam.fieldConfig);
                        //     if (fieldConfig.controltype === 'dropdown') {
                        //       fieldConfig.enumValues = JSON.parse(fieldConfig.enumValues);
                        //     }
                        //     this.dynamicInput.push({ paramcode: queryGetDataParam.paramCode, paramname: queryGetDataParam.paramName, paramvalue: queryGetDataParam.paramValue, fieldConfig: JSON.parse(queryGetDataParam.fieldConfig) });
                        //   });
                        // }
                        queryFuncParams = queryFuncParams.sort(self.sortData);
                        queryFuncParams.forEach((/**
                         * @param {?} funcParam
                         * @return {?}
                         */
                        funcParam => {
                            if (funcParam) {
                                /** @type {?} */
                                const fieldConfig = JSON.parse(funcParam.fieldConfig);
                                if (fieldConfig.controltype === 'dropdown') {
                                    fieldConfig.enumValues = fieldConfig.enumValues;
                                }
                                /** @type {?} */
                                let findParamInfo;
                                if (queryFormularParam && queryFormularParam.length > 0) {
                                    findParamInfo = queryFormularParam.find((/**
                                     * @param {?} x
                                     * @return {?}
                                     */
                                    x => x.paramCode === funcParam.code));
                                }
                                /** @type {?} */
                                let paramvalue = (findParamInfo && findParamInfo.paramValue) ? findParamInfo.paramValue : '';
                                fieldConfig.paramvaluename = '';
                                if (fieldConfig.controltype === 'help' && findParamInfo) {
                                    /** @type {?} */
                                    const paramvaluearray = paramvalue.split('|');
                                    paramvalue = paramvaluearray[0];
                                    fieldConfig.paramvaluename = paramvaluearray[1];
                                }
                                self.dynamicInput.push({ id: findParamInfo ? findParamInfo.id : '', paramcode: funcParam.code, paramname: funcParam.name, paramvalue: paramvalue, fieldConfig: fieldConfig });
                            }
                        }));
                    }
                }
                if (generateData) { // 新建或者组合公式调用此逻辑
                    self.resultColumns = [];
                    if (type === 'BE') {
                        /** @type {?} */
                        const queryFuncResults = value.queryFuncResults;
                        if (queryFuncResults.length > 0) {
                            /** @type {?} */
                            const funcResultDatas = [];
                            queryFuncResults.forEach((/**
                             * @param {?} funcResult
                             * @return {?}
                             */
                            funcResult => {
                                if (funcResult) {
                                    // self.resultColumns.push({ id: funcResult.srcCol, label: funcResult.colName });
                                    funcResultDatas.push({ id: self.guid(), resultcode: funcResult.srcCol, resultsort: '0', resultname: funcResult.colName,
                                        resultcolvisible: '1', resultdescription: funcResult.description });
                                }
                            }));
                            if (funcResultDatas.length > 0) {
                                if (self.resultDatas && self.resultDatas.length > 0) {
                                    /** @type {?} */
                                    let newResultDatas = [];
                                    for (let funcResultData of funcResultDatas) {
                                        /** @type {?} */
                                        const resultData = self.resultDatas.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        x => x.resultcode === funcResultData.resultcode));
                                        if (resultData) {
                                            newResultDatas.push(Object.assign({}, resultData, { resultdescription: funcResultData.resultdescription }));
                                        }
                                        else {
                                            newResultDatas.push(funcResultData);
                                        }
                                    }
                                    /** @type {?} */
                                    let resultColumns1 = [];
                                    newResultDatas.forEach((/**
                                     * @param {?} m
                                     * @return {?}
                                     */
                                    m => {
                                        resultColumns1.push({ id: m.resultcode, label: m.resultname });
                                    }));
                                    self.resultColumns = [...resultColumns1];
                                    self.resultDatas = [...newResultDatas];
                                }
                                else {
                                    /** @type {?} */
                                    let resultColumns1 = [];
                                    funcResultDatas.forEach((/**
                                     * @param {?} m
                                     * @return {?}
                                     */
                                    m => {
                                        resultColumns1.push({ id: m.resultcode, label: m.resultname });
                                    }));
                                    self.resultColumns = [...resultColumns1];
                                    self.resultDatas = [...funcResultDatas];
                                }
                                // self.resultDatas = [...funcResultDatas];
                            }
                        }
                    }
                    else {
                        /** @type {?} */
                        const options = {
                            headers: {
                                'SessionId': self.data.sessionId,
                                'Content-Type': 'application/json'
                            }
                        };
                        // 根据id获取元数据信息
                        self.restfulService.get(self.data.serverHost + '/api/runtime/sys/v1.0/rt-metadatas/' + metadataobjectid, {}, options).subscribe((/**
                         * @param {?} metadataContent
                         * @return {?}
                         */
                        metadataContent => {
                            if (metadataContent) {
                                /** @type {?} */
                                const currentMetadataContent = JSON.parse(metadataContent['content']);
                                /** @type {?} */
                                let mainObject = currentMetadataContent.QueryNode;
                                if (!mainObject) {
                                    mainObject = currentMetadataContent.DataSources['0'].QueryNode;
                                }
                                /** @type {?} */
                                const datas = [];
                                mainObject.ContainElements.forEach((/**
                                 * @param {?} containElement
                                 * @return {?}
                                 */
                                containElement => {
                                    self.resultColumns.push({ id: containElement.Code, label: containElement.Name });
                                    datas.push({ id: self.guid(), resultcode: containElement.Code, resultsort: '0', resultname: containElement.Name, resultcolvisible: '1', resultdescription: '' });
                                }));
                                if (datas.length > 0) {
                                    self.resultDatas = [...datas];
                                }
                                self.qomanagercode = 'com.' + (currentMetadataContent.NamespacePrefix + '.' + currentMetadataContent.Code).toLowerCase(); // qo编号
                            }
                        }));
                    }
                }
            }
        }));
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    sortData(a, b) {
        return a.orderNumber - b.orderNumber;
    }
    /**
     * @param {?} string
     * @return {?}
     */
    formularCheck(string) {
        // 剔除空白符
        string = string.replace(/\s/g, '');
        // 错误情况，空字符串
        if ('' === string) {
            return false;
        }
        // 错误情况，运算符连续
        if (/[\+\-\*\/]{2,}/.test(string)) {
            return false;
        }
        // 空括号
        if (/\(\)/.test(string)) {
            return false;
        }
        // 错误情况，括号不配对
        /** @type {?} */
        var stack = [];
        for (var i = 0, item; i < string.length; i++) {
            item = string.charAt(i);
            if ('(' === item) {
                stack.push('(');
            }
            else if (')' === item) {
                if (stack.length > 0) {
                    stack.pop();
                }
                else {
                    return false;
                }
            }
        }
        if (0 !== stack.length) {
            return false;
        }
        // 错误情况，(后面是运算符 
        if (/\([\+\-\*\/]/.test(string)) {
            return false;
        }
        // 错误情况，)前面是运算符
        if (/[\+\-\*\/]\)/.test(string)) {
            return false;
        }
        // // 错误情况，(前面不是运算符
        // if (/[^\+\-\*\/]\(/.test(string)) {
        //   return false;
        // }
        // // 错误情况，)后面不是运算符
        // if (/\)[^\+\-\*\/]/.test(string)) {
        //   return false;
        // }
        return true;
    }
}
FormularDefineComponent.decorators = [
    { type: Component, args: [{
                selector: 'formular-define',
                template: "<div class=\"farris-main-area flex-column\">\r\n  <div class=\"farris-header\">\r\n    <div class=\"farris-form form-inline farris-form-inline\">\r\n      <div class=\"f-utils-flex-row-wrap\">\r\n        <div class=\"col-2\" *ngIf=\"formularType===0\">\r\n          <farris-button (click)=\"generateFormular()\">\r\n            <span>{{labelSaveFormular}}</span>\r\n          </farris-button>\r\n        </div>\r\n        <div class=\"col-10\" *ngIf=\"formularType===1\">\r\n          <farris-button (click)=\"generateFormularInfo()\">\r\n            <span>{{labelGeneraterFormular}}</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('+')\">\r\n            <span>+</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('-')\">\r\n            <span>-</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('*')\">\r\n            <span>*</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('/')\">\r\n            <span>-</span>\r\n          </farris-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"navbar p-0\" *ngIf=\"formularType===1\">\r\n      <textarea class=\"form-control\" rows=\"10\" maxlength=\"2000\" id=\"formularText\" [(ngModel)]=\"formularText\"></textarea>\r\n    </div>\r\n  </div>\r\n  <div class=\"d-flex flex-row flex-fill farris-overflow-hidden\">\r\n    <div class=\"col-3 p-0 m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n      <div class=\"col-12 col-md-12 col-lg-12\">\r\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"colFunction\" style=\"width: 6rem; min-width: 6rem;\">\r\n              <span class=\"farris-label-text\">{{labelQueryFunc}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <kendo-combobox id=\"colAlign\" [(ngModel)]=\"funcSelectValue\" [data]=\"funcData\" [textField]=\"'name'\"\r\n                [valueField]=\"'value'\" class=\"form-control\" (selectionChange)=\"selectionChange($event)\">\r\n              </kendo-combobox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"flex-fill f-utils-overflow-xhya \">\r\n      <farris-panel [foldable]=\"true\" [defaultExpand]=\"true\">\r\n        <farris-panel-item [title]=\"labelBasicInfo\">\r\n          <ng-template #contentTempl>\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"f-utils-flex-row-wrap\">\r\n                <div class=\"col-6\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-info text-danger\">*</span>\r\n                        <span class=\"farris-label-text\">{{labelFormularName}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <input class=\"form-control\" type=\"text\" id=\"name\" [(ngModel)]=\"name\" maxlength=\"36\">\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-6\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\" for=\"class-input-checkbox01\">\r\n                        <span class=\"farris-label-text\">{{labelIsGroup}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" id=\"isGroup\" [(ngModel)]=\"isGroup\" type=\"checkbox\">\r\n                          <label class=\"custom-control-label\" for=\"isGroup\"></label>\r\n                        </div>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n        <farris-panel-item [title]=\"labelParamInfo\">\r\n          <ng-template #contentTempl>\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"f-utils-flex-row-wrap\">\r\n                <div class=\"col-6\" *ngFor=\"let i of dynamicInput\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{i.paramname}}:</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'text'\">\r\n                          <input class=\"form-control\" type=\"text\" id=\"name\" [(ngModel)]=\"i.paramvalue\" maxlength=\"36\">\r\n                          <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'help'\">\r\n                          <farris-lookup-grid input-end-edit data-mapping [useTip]=\" false\" [nosearch]=\"false\" [ngModel]=\"i.fieldConfig.paramvaluename\"\r\n                            [editable]=\"false\" [displayType]=\"'List'\" [items]=\"helpData\"\r\n                            [idField]=\"i.fieldConfig.idField\"  [singleSelect]=\"true\"\r\n                            [pageSize]=\"20\" [pageIndex]=\"1\" [pagination]=\"true\" [textField]=\"i.fieldConfig.textField\"\r\n                            [valueField]=\"i.fieldConfig.valueField\" [title]=\"'\u901A\u7528\u5E2E\u52A9'\" [showCloseButton]=\"true\"\r\n                            [resizable]=\"true\" [context]='i.fieldConfig' [enableToSelect]=\"true\"\r\n                            [columns]=\"i.fieldConfig.showColumns\" [libHelpBeforeEvent]=\"i\"\r\n                            [localHost]=\"data.serverHost\" [dynamicInput] = \"dynamicInput\"></farris-lookup-grid>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'dropdown'\">\r\n                          <farris-combo-list [(ngModel)]=\"i.paramvalue\" [idField]=\"'value'\" [textField]=\"'name'\"\r\n                            [editable]=\"false\" [data]=\"i.fieldConfig.enumValues\"\r\n                            [multiSelect]=\"i.fieldConfig.multiSelect\"></farris-combo-list>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'single-date'\">\r\n                          <farris-datepicker [(ngModel)]=\"i.paramvalue\" [returnFormat]=\"'yyyy-MM-dd'\"\r\n                            [dateFormat]=\"i.fieldConfig.format\">\r\n                          </farris-datepicker>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'single-number'\">\r\n                          <farris-number-spinner [(ngModel)]=\"i.paramvalue\"></farris-number-spinner>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'single-year'\">\r\n                          <farris-datepicker [(ngModel)]=\"i.paramvalue\"  [returnFormat]=\"'yyyy'\"\r\n                            [dateFormat]=\"'yyyy'\" [showType]=\"3\"></farris-datepicker>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n        <farris-panel-item [title]=\"labelResultColInfo\">\r\n          <ng-template #contentTempl>\r\n            <!-- <div class=\"row\" style=\"margin: 0; padding: 15px; background-color: #fff\">\r\n            <button class=\"btn btn-primary\" (click)=\"newAdd()\">\u65B0\u589E</button>\r\n            <button class=\"btn btn-default ml-1 mr-1\" (click)=\"removeRow()\">\u5220\u9664</button>\r\n          </div> -->\r\n            <farris-datagrid [data]=\"resultDatas\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\" [showCheckbox]=\"false\"\r\n              [fitColumns]=\"true\" [showLineNumber]=\"false\" [striped]=\"true\" [virtualized]=\"false\" [height]=\"250\"\r\n              [pagination]=\"false\">\r\n            </farris-datagrid>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n      </farris-panel>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #resultColumnTemp let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData['resultcode']\" [idField]=\"'id'\" [textField]=\"'label'\" [readonly]=\"true\"\r\n      [disabled]=\"true\" [data]=\"resultColumns\"></farris-combo-list>\r\n  </div>\r\n</ng-template>\r\n<ng-template #resultSortColumnTemp let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData['resultsort']\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n      [data]=\"resultSortColumns\"></farris-combo-list>\r\n  </div>\r\n</ng-template>\r\n<ng-template #resultColVisibleColumnTemp let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData['resultcolvisible']\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n      [data]=\"resultColVisibleColumns\"></farris-combo-list>\r\n  </div>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
FormularDefineComponent.ctorParameters = () => [
    { type: RestfulService },
    { type: MessagerService },
    { type: CacheService },
    { type: LoadingService },
    { type: EntityDataService },
    { type: LocalizeService }
];
FormularDefineComponent.propDecorators = {
    resultColumnTemp: [{ type: ViewChild, args: ['resultColumnTemp',] }],
    resultSortColumnTemp: [{ type: ViewChild, args: ['resultSortColumnTemp',] }],
    resultColVisibleColumnTemp: [{ type: ViewChild, args: ['resultColVisibleColumnTemp',] }],
    dg: [{ type: ViewChild, args: ['dg',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/formular-select/formular-select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormularSelectComponent {
    /**
     * @param {?} restfulService
     * @param {?} cacheService
     * @param {?} msgService
     * @param {?} entityDataService
     * @param {?} localizeService
     */
    constructor(restfulService, cacheService, msgService, entityDataService, localizeService) {
        this.restfulService = restfulService;
        this.cacheService = cacheService;
        this.msgService = msgService;
        this.entityDataService = entityDataService;
        this.localizeService = localizeService;
        this.data = [];
        this.changeStep = new EventEmitter();
        this.formularWizard = '0'; // 公式向导类型 0公式选择 1公式新增
        // 公式向导类型 0公式选择 1公式新增
        this.ddlFormularData = []; // 下拉公示信息
        // 下拉公示信息
        this.formularDatas = []; // 所有的公式信息
        // 所有的公式信息
        this.currentFormularId = ''; // 当前选中的公式Id
        // 当前选中的公式Id
        this.currentFormularName = ''; // 当前选中的公式名称
        /**
         * 点击下一步前汇总数据
         */
        this.clickNextStep = (/**
         * @return {?}
         */
        () => {
            if (this.formularWizard === '0' && this.currentFormularId) {
                /** @type {?} */
                const formularData = this.formularDatas.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.id === this.currentFormularId));
                if (formularData) {
                    this.data.formularData = formularData;
                    this.data.currentFormularName = formularData.name;
                }
                this.data.ddlFormularData = this.ddlFormularData;
                this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: this.data.currentFormularName ? this.data.currentFormularName : '公式' });
            }
            else if (this.formularWizard === '0' && !this.currentFormularId) {
                this.entityDataService.setFormularState(false, {});
                this.msgService.info(this.localizeService.getValue('formular.formularSelect.messageAlert.formularSelectVerify'));
                return false;
            }
            else {
                this.entityDataService.setFormularState(false, {});
                this.data.ddlFormularData = '';
                // this.data.formularSelectData = [];
            }
            this.data.currentFormularId = this.currentFormularId ? this.currentFormularId : this.data.currentFormularId;
            this.data.formularWizard = this.formularWizard;
            this.cacheService.set('formularParam', this.data);
            return true;
        });
        this.beforeFinish = (/**
         * @return {?}
         */
        () => {
            if (this.formularWizard === '0' && this.currentFormularId) {
                /** @type {?} */
                const name = this.ddlFormularData.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.id === this.currentFormularId)).label;
                this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: name });
                // this.cacheService.set('formularResult', {id: this.currentFormularId, name: name});
                return true;
            }
            else if (this.formularWizard === '0' && !this.currentFormularId) {
                this.entityDataService.setFormularState(false, {});
                this.msgService.info(this.localizeService.getValue('formular.formularSelect.messageAlert.formularSelectVerify'));
                return false;
            }
            else {
                this.entityDataService.setFormularState(false, {});
                this.msgService.info(this.localizeService.getValue('formular.formularSelect.messageAlert.formularDefineVerify'));
                return false;
            }
        });
        this.selectionFormular = JSON.parse(this.localizeService.getValue('formular.formularSelect.selectionFormular'));
        this.lableQdpFormular = this.localizeService.getValue('formular.formularSelect.lableQdpFormular');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        self.data = self.cacheService.get('formularParam');
        this.getFormularInfo(self);
        // if (self.data && self.data.ddlFormularData && self.data.ddlFormularData.length >0) {
        //   self.ddlFormularData = self.data.ddlFormularData;
        // } 
        if (self.data) {
            self.currentFormularId = self.data.currentFormularId ? self.data.currentFormularId : '';
            self.currentFormularName = self.data.currentFormularName ? self.data.currentFormularName : '';
            self.formularWizard = self.data.formularWizard ? self.data.formularWizard : '0';
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @private
     * @param {?} self
     * @return {?}
     */
    getFormularInfo(self) {
        this.createHeaderSessionId().then((/**
         * @param {?} value
         * @return {?}
         */
        function success(value) {
            /** @type {?} */
            let uri = self.data.serverHost;
            // tslint:disable-next-line: align
            /** @type {?} */
            const options = {
                headers: {
                    'SessionId': value,
                    'Content-Type': 'application/json'
                }
            };
            self.data.sessionId = value;
            /** @type {?} */
            const entityFilter = {
                FilterConditions: [{ 'FilterField': 'CurSU', 'Value': self.data.currentSU, 'Lbracket': null, 'Rbracket': null, 'Relation': 0, 'Expresstype': 0, 'Compare': 6 }],
                SortConditions: [],
                IsUsePagination: false,
                Pagination: {
                    PageIndex: 0,
                    PageSize: 0,
                    PageCount: 0,
                    TotalCount: 0
                }
            };
            uri += '/api/gsp/bcc/v1.0/querygetdatadefine_frm/extension/query?entityFilter=' + JSON.stringify(entityFilter);
            /** @type {?} */
            const ddlFormularData = [];
            self.restfulService.put(uri, {}, {}, options).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                /** @type {?} */
                const funcDatas = data.returnValue.result;
                if (funcDatas && funcDatas.length > 0) {
                    funcDatas.forEach((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => {
                        ddlFormularData.push({ label: x.name, id: x.id });
                    }));
                    self.ddlFormularData = [...ddlFormularData];
                }
                self.formularDatas = funcDatas;
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        /** @type {?} */
        const options = {
            headers: {
                'Content-Type': 'application/json'
            },
            responseType: 'text'
        };
        /** @type {?} */
        const createSessionUrl = this.data.serverHost + '/api/gsp/bcc/v1.0/queryfuncdetail_frm/service/createsession';
        return this.restfulService.post(createSessionUrl, {}, {}, options).toPromise();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        this.entityDataService.setStepType($event);
        if ($event !== '0') {
            this.data.currentFormularId = '';
            this.currentFormularId = '';
            this.data.formularData = '';
            this.entityDataService.setFormularState(false, {});
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectChange($event) {
        if ($event) {
            this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: $event.data.label });
        }
        else {
            this.entityDataService.setFormularState(false, {});
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clear($event) {
        this.entityDataService.setFormularState(false, {});
    }
}
FormularSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-formular-select',
                template: "<div>\r\n  <farris-radiogroup #FarrisRadioGroupComponent [(ngModel)]=\"formularWizard\" [horizontal]=\"true\"\r\n    (changeValue)=\"changeValue($event)\" [data]=\"selectionFormular\">\r\n\r\n  </farris-radiogroup>\r\n</div>\r\n<div *ngIf=\"formularWizard === '0'\">\r\n  <label class=\"col-form-label\" for=\"colFunction\" style=\"width: 6rem; min-width: 6rem;\">\r\n    <span class=\"farris-label-text\">{{lableQdpFormular}}:</span>\r\n  </label>\r\n  <div class=\"farris-input-wrap\">\r\n    <!-- <farris-combo-lookup [(ngModel)]=\"currentFormularId\" [idField]=\"'id'\" [textField]=\"'name'\"\r\n      [displayType]=\"'LOOKUPLIST'\" [multiSelect]=\"false\" [data]=\"ddlFormularData\"></farris-combo-lookup> -->\r\n    <farris-combo-list [(ngModel)]=\"currentFormularId\" (selectChange)=\"selectChange($event)\" (clear)=\"clear($event)\"\r\n      [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"ddlFormularData\"></farris-combo-list>\r\n  </div>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
FormularSelectComponent.ctorParameters = () => [
    { type: RestfulService },
    { type: CacheService },
    { type: MessagerService },
    { type: EntityDataService },
    { type: LocalizeService }
];
FormularSelectComponent.propDecorators = {
    changeStep: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/step-component/step-component.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StepComponentComponent {
    /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     * @param {?} localizeService
     */
    constructor(viewContainerRef, componentFactoryResolver, localizeService) {
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.localizeService = localizeService;
        this.clickCancelBtn = new EventEmitter();
        this.clickFinishBtn = new EventEmitter();
        this.title = '';
        this.steps = [];
        this._copySteps = [];
        this.curStepIndex = 0;
        this.labelPre = '上一步';
        this.labelNext = '下一步';
        this.labelFinish = '完成';
        this.labelDelete = '删除';
        this.labelPre = this.localizeService.getValue('formular.step.labelPre');
        this.labelNext = this.localizeService.getValue('formular.step.labelNext');
        this.labelFinish = this.localizeService.getValue('formular.step.labelFinish');
        this.labelDelete = this.localizeService.getValue('formular.step.labelDelete');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.steps && this.steps.length > 0) {
            this.curStep = this.steps[this.curStepIndex];
            this.createStepComponent(this.steps[this.curStepIndex]);
            // this.createStepComponent(this.steps[4]);
        }
        this._copySteps = this.steps;
    }
    /**
     * @param {?} step
     * @return {?}
     */
    createStepComponent(step) {
        this.stepContainer.clear();
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(step.component);
        this.curComponentRef = this.stepContainer.createComponent(componentFactory);
        this.curComponentRef.instance.data = step.data;
        // 新增步骤
        if (this.curComponentRef.instance.addStep) {
            this.curComponentRef.instance.addStep.subscribe((/**
             * @param {?} stepList
             * @return {?}
             */
            (stepList) => {
                /** @type {?} */
                const curIndex = findIndex(this.steps, this.curStep);
                this.steps.splice(curIndex + 1, 0, ...stepList);
                this.curStep.nextStep = stepList[0].stepId;
                this.curStep.showFinishBtn = false;
                this.curStep.showNextStepBtn = true;
            }));
        }
        // 删除步骤
        if (this.curComponentRef.instance.removeStep) {
            this.curComponentRef.instance.removeStep.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                merge(this.curStep, data.curStep);
                data.removeSteps.forEach((/**
                 * @param {?} removeStep
                 * @return {?}
                 */
                removeStep => {
                    /** @type {?} */
                    const index = findIndex(this.steps, removeStep);
                    if (index >= 0) {
                        this.steps.splice(index, 1);
                    }
                }));
            }));
        }
        // 变更步骤
        if (this.curComponentRef.instance.changeStep) {
            this.curComponentRef.instance.changeStep.subscribe((/**
             * @param {?} stepList
             * @return {?}
             */
            (stepList) => {
                stepList.forEach((/**
                 * @param {?} changeStep
                 * @return {?}
                 */
                changeStep => {
                    /** @type {?} */
                    const oldStep = find(this._copySteps, (/**
                     * @param {?} s
                     * @return {?}
                     */
                    function (s) { return s.stepId === changeStep.stepId; }));
                    merge(oldStep, changeStep);
                }));
                this.steps = this._copySteps.filter((/**
                 * @param {?} step
                 * @return {?}
                 */
                step => step.show !== false));
            }));
        }
    }
    /**
     * @param {?} nextStep
     * @return {?}
     */
    jumpStep(nextStep) {
        // 判断跳转方向
        if (nextStep === this.curStep) {
            return;
        }
        /** @type {?} */
        const nextIndex = findIndex(this.steps, (/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.stepId === nextStep.stepId; }));
        if (nextIndex === this.curStepIndex) {
            return;
        }
        if (nextIndex < this.curStepIndex) { // 向前跳
            this.curStep = nextStep;
            this.curStepIndex = nextIndex;
            this.createStepComponent(nextStep);
            return;
        }
        if (nextStep.stepId === this.curStep.nextStep) { // 下一步
            this.nextStep();
            return;
        }
        //  else if (this.finishedSteps.indexOf(nextStep.stepId) > -1) { // 已完成的后续步骤
        //   this.curStep = nextStep;
        //   this.curStepIndex = nextIndex;
        //   this.createStepComponent(nextStep);
        // }
    }
    /**
     * 点击上一步
     * @return {?}
     */
    lastStep() {
        /** @type {?} */
        const self = this;
        this.curStepIndex = findIndex(this.steps, (/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.nextStep === self.curStep.stepId; }));
        this.curStep = this.steps[this.curStepIndex];
        // 执行各Component定义的nextStepClick事件
        /** @type {?} */
        const clickLastStep = this.curComponentRef.instance.clickLastStep;
        if (clickLastStep && typeof (clickLastStep) === 'function') {
            /** @type {?} */
            const result = clickLastStep();
            if (typeof (result) === 'boolean' && result) {
                this.createStepComponent(this.curStep);
            }
        }
    }
    /**
     * 点击下一步
     * @return {?}
     */
    nextStep() {
        // 校验
        /** @type {?} */
        const validationFunc = this.curComponentRef.instance.validation;
        if (validationFunc && typeof (validationFunc) === 'function') {
            /** @type {?} */
            const result = validationFunc();
            if (!result) {
                return;
            }
        }
        // 执行各Component定义的nextStepClick事件
        /** @type {?} */
        const clickNextStep = this.curComponentRef.instance.clickNextStep;
        if (clickNextStep && typeof (clickNextStep) === 'function') {
            /** @type {?} */
            const result = clickNextStep();
            if (typeof (result) === 'boolean' && result) {
                this.moveToNextStep(result);
            }
            else {
                if (result) {
                    result.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        this.moveToNextStep(data);
                    }));
                }
            }
        }
        else {
            this.moveToNextStep(true);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    moveToNextStep(data) {
        if (!data) {
            return;
        }
        /** @type {?} */
        const curStep = this.curStep;
        if (curStep.nextStep === '') {
            return;
        }
        // this.finishedSteps.push(curStep.stepId);
        this.curStepIndex = findIndex(this.steps, (/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.stepId === curStep.nextStep; }));
        if (this.curStepIndex > -1) {
            this.curStep = this.steps[this.curStepIndex];
            this.createStepComponent(this.curStep);
        }
    }
    /**
     * 取消
     * @return {?}
     */
    clickCancel() {
        this.clickCancelBtn.emit();
    }
    /**
     * 完成
     * @return {?}
     */
    finishWizard() {
        /** @type {?} */
        const validationFunc = this.curComponentRef.instance.validation;
        if (validationFunc && typeof (validationFunc) === 'function') {
            /** @type {?} */
            const result = validationFunc();
            if (!result) {
                return;
            }
        }
        /** @type {?} */
        let beforeFinish = this.curComponentRef.instance.beforeFinish;
        if (this.curComponentRef.instance.qdpResult && !beforeFinish) {
            beforeFinish = this.curComponentRef.instance.qdpResult.beforeFinish;
        }
        if (beforeFinish && typeof (beforeFinish) === 'function') {
            /** @type {?} */
            const result = beforeFinish();
            if (typeof (result) === 'boolean' && result) {
                this.clickFinishBtn.emit();
            }
            else if (typeof (result) !== 'boolean') {
                if (result) {
                    result.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data) {
                            this.clickFinishBtn.emit(data);
                        }
                    }));
                }
            }
        }
    }
}
StepComponentComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-step-component',
                template: "<div class=\"stepWizard\">\r\n  <div class=\"createNav d-flex flex-wrap\" *ngIf=\"steps.length>1\">\r\n    <div *ngFor=\"let step of steps;let i = index\" class=\"d-flex step\" [class.active]=\"curStepIndex>=i\">\r\n      <div class=\"d-flex\" *ngIf=\"step.show\" (click)=\"jumpStep(step)\">\r\n        <div class=\"pointer d-flex\">\r\n          <div class=\"stepIndex\"><span>{{i+1}}</span></div>\r\n          <div class=\"stepTitle\">{{step.title}}</div>\r\n        </div>\r\n        <div class=\"triangle_border_right\" *ngIf=\"step.nextStep\">\r\n          <span>\u00B7\u00B7\u00B7\u00B7\u00B7></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <perfect-scrollbar [config]=\"{suppressScrollX: true}\">\r\n      <ng-container #stepContainer></ng-container>\r\n    </perfect-scrollbar>\r\n  </div>\r\n\r\n\r\n\r\n  <div class=\"footBtns\">\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" *ngIf=\"curStep.showLastStepBtn\" (click)=\"lastStep()\"\r\n      type=\"submit\">{{labelPre}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showNextStepBtn\" (click)=\"nextStep()\"\r\n      type=\"submit\">{{labelNext}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showFinishBtn\" (click)=\"finishWizard()\">{{labelFinish}}</button>\r\n  </div>\r\n</div>\r\n",
                styles: [":host{position:absolute;top:0;bottom:0;left:0;right:0}.stepWizard{height:100%;display:flex;flex-direction:column;background:#f8f8fa}.stepWizard .createNav{background:#fff;box-shadow:0 2px 2px 0 rgba(0,0,0,.04);height:50px;overflow:hidden;padding:0 27px}.stepWizard .createNav div{margin:auto 0}.stepWizard .createNav .pointer{cursor:pointer}.stepWizard .createNav .stepIndex{height:24px;width:24px;background-color:#d9d9d9;color:#fff;border-radius:100%;text-align:center}.stepWizard .createNav .step.active .stepIndex{background-color:#59a1ff}.stepWizard .createNav .stepIndex span{line-height:24px}.stepWizard .createNav .step.active .stepIndex span{background-color:#59a1ff}.stepWizard .createNav .stepTitle{color:#8c8c8c;padding-left:11px;font-size:14px}.stepWizard .createNav .step.active .stepTitle{color:rgba(0,0,0,.85)}.stepWizard .createNav .stepTitle.disable{color:#cdcdcf}.stepWizard .createNav .step .triangle_border_right{position:relative}.stepWizard .createNav .step .triangle_border_right span{padding:0 9px;color:#d9d9d9}.stepWizard .createNav .step.active .triangle_border_right span{color:#59a1ff}.stepWizard .content{flex:1;overflow:auto;font-size:.875rem}.stepWizard .content .ps-content{width:inherit;height:inherit}.stepWizard .footBtns{width:100%;display:flex;align-items:center;justify-content:flex-end;padding:10px 1rem;background:#f4f4f4;border-top:1px solid #ddd}"]
            }] }
];
/** @nocollapse */
StepComponentComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: LocalizeService }
];
StepComponentComponent.propDecorators = {
    clickCancelBtn: [{ type: Output }],
    clickFinishBtn: [{ type: Output }],
    title: [{ type: Input }],
    steps: [{ type: Input }],
    stepContainer: [{ type: ViewChild, args: ['stepContainer', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/formular-define-wizard/formular-define-wizard.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormularDefineWizardComponent {
    /**
     * @param {?} cacheService
     * @param {?} entityDataService
     * @param {?} localizeService
     */
    constructor(cacheService, entityDataService, localizeService) {
        this.cacheService = cacheService;
        this.entityDataService = entityDataService;
        this.localizeService = localizeService;
        this.steps = [
            {
                stepId: 'selectTemplate',
                title: this.localizeService.getValue('formular.defineWizard.labelSelectTemplate'),
                component: FormularSelectComponent,
                data: '',
                show: true,
                nextStep: 'formularDefine',
                showFinishBtn: true,
                showCancelBtn: true,
                showLastStepBtn: false,
                showNextStepBtn: true
            },
            {
                stepId: 'formularDefine',
                title: this.localizeService.getValue('formular.defineWizard.labelFormularDefine'),
                component: FormularDefineComponent,
                data: '',
                show: true,
                nextStep: '',
                showFinishBtn: true,
                showCancelBtn: true,
                showLastStepBtn: true,
                showNextStepBtn: false
            }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cacheService.set('formularParam', { currentSU: this.currentSU, currentFormularId: this.currentFormularId, serverHost: this.serverHost });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.entityDataService.setFormularState(false, {});
        if (this.currentFormularId) {
            /** @type {?} */
            const formularEdit = {
                stepId: 'formularDefine',
                title: this.localizeService.getValue('formular.defineWizard.labelFormularDefine'),
                component: FormularDefineComponent,
                data: '',
                show: true,
                nextStep: '',
                showFinishBtn: true,
                showCancelBtn: true,
                showLastStepBtn: true,
                showNextStepBtn: false
            };
            this.qdpsteps.jumpStep(formularEdit);
        }
    }
    /**
     * 点击完成
     * @return {?}
     */
    clickFinishBtn() {
        if (this.parentDialog) {
            // this.selectFormularInfo = this.cacheService.get('formularResult');
            this.parentDialog.close();
        }
    }
}
FormularDefineWizardComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-formular-define-wizard',
                template: "<lib-step-component #qdpsteps [steps]=\"steps\" (clickFinishBtn)=\"clickFinishBtn()\">\r\n</lib-step-component>",
                styles: [""]
            }] }
];
/** @nocollapse */
FormularDefineWizardComponent.ctorParameters = () => [
    { type: CacheService },
    { type: EntityDataService },
    { type: LocalizeService }
];
FormularDefineWizardComponent.propDecorators = {
    qdpsteps: [{ type: ViewChild, args: ['qdpsteps',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/formular.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormularService {
    /**
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} msgService
     * @param {?} entityDataService
     * @param {?} url
     * @param {?} localizeService
     */
    constructor(modalService, injector, cfr, msgService, entityDataService, url, localizeService) {
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.msgService = msgService;
        this.entityDataService = entityDataService;
        this.url = url;
        this.localizeService = localizeService;
        this.isFinish = true;
    }
    /**
     * @param {?} currentSU
     * @param {?} currentFormularId
     * @param {?=} formularType
     * @return {?}
     */
    showFormularDefine(currentSU, currentFormularId, formularType) {
        /** @type {?} */
        const formularResult = new Subject();
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(FormularDefineWizardComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.injector);
        cmpR.instance.currentSU = currentSU;
        cmpR.instance.currentFormularId = currentFormularId;
        cmpR.instance.serverHost = this.url ? this.url : 'http://localhost:5100';
        cmpR.instance.formularType = formularType;
        this.dlg = this.modalService.show(cmpR, {
            title: this.localizeService.getValue('formular.service.labelFormulaWizard'),
            width: 1000, height: 800,
            showButtons: false,
            beforeClose: (/**
             * @param {?} ref
             * @return {?}
             */
            (ref) => {
                /** @type {?} */
                const formularState = this.entityDataService.getFormularState();
                if (formularState.isFinish) {
                    formularResult.next(formularState.formularInfo);
                    return of(true);
                }
                else {
                    /** @type {?} */
                    const canClose = new Subject();
                    this.msgService.question(this.localizeService.getValue('formular.service.messageAlert.formulaVerify'), (/**
                     * @return {?}
                     */
                    () => {
                        formularResult.next({ id: '', name: '' });
                        canClose.next(true);
                    }), (/**
                     * @return {?}
                     */
                    () => {
                        canClose.next(false);
                    }));
                    return canClose.asObservable();
                }
            })
        });
        cmpR.instance.parentDialog = this.dlg;
        return formularResult;
    }
}
FormularService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormularService.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: MessagerService },
    { type: EntityDataService },
    { type: undefined, decorators: [{ type: Inject, args: [BE_SERVER_URI_TOKEN,] }] },
    { type: LocalizeService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directive/help-before-event.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpBeforeEventDirective {
    /**
     * @param {?} lookup
     * @param {?} restfulService
     */
    constructor(lookup, restfulService) {
        this.lookup = lookup;
        this.restfulService = restfulService;
        this.helpData = {};
        this.localHost = {};
        this.dynamicInput = [];
        this.dictPicking = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const options = {
                headers: {
                    'Content-Type': 'application/json'
                },
                responseType: 'text'
            };
            /** @type {?} */
            const paramvalues = {};
            this.dynamicInput.forEach((/**
             * @param {?} currentInput
             * @return {?}
             */
            currentInput => {
                paramvalues[currentInput.paramcode] = currentInput.paramvalue;
            }));
            /** @type {?} */
            const params = {
                helpId: this.helpData.fieldConfig.helpId,
                filterInfo: this.helpData.fieldConfig.filterInfo,
                parameters: JSON.stringify(paramvalues)
            };
            /** @type {?} */
            const getHelpDataUrl = this.localHost + '/api/runtime/bcc/v1.0/qdpsearch/getHelpData';
            /** @type {?} */
            const r$ = of({
                showDialog: true
            });
            return this.restfulService.post(getHelpDataUrl, params, {}, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this.lookup.items = JSON.parse(data);
            })), switchMap((/**
             * @return {?}
             */
            () => r$)));
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log(this.helpData, this.lookup);
        this.lookup.dictPicking = this.dictPicking;
        this.lookup.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.helpData.paramvalue = rowData[this.helpData.fieldConfig.valueField] + '|' + rowData[this.helpData.fieldConfig.textField];
            /** @type {?} */
            const r$ = of({
                closeDialog: true
            });
            return r$;
        });
    }
}
HelpBeforeEventDirective.decorators = [
    { type: Directive, args: [{
                selector: '[libHelpBeforeEvent]'
            },] }
];
/** @nocollapse */
HelpBeforeEventDirective.ctorParameters = () => [
    { type: LookupGridComponent },
    { type: RestfulService }
];
HelpBeforeEventDirective.propDecorators = {
    helpData: [{ type: Input, args: ["libHelpBeforeEvent",] }],
    localHost: [{ type: Input }],
    dynamicInput: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/formular.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormularModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FormularModule,
            providers: [RestfulService, EntityDataService, FormularService]
        };
    }
}
FormularModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    GridModule,
                    PopupModule,
                    NumericTextBoxModule,
                    InputsModule,
                    DropDownsModule,
                    DropDownListModule,
                    LayoutModule,
                    ButtonsModule,
                    TreeViewModule,
                    FarrisDialogModule,
                    NotifyModule,
                    FDropdownDirectiveTypeModule,
                    FlexLayoutModule,
                    TreeTableModule,
                    PerfectScrollbarModule,
                    RtfAppHelpModule,
                    ColorPickerModule,
                    DatagridModule.forRoot(),
                    ComboListModule,
                    FarrisButtonModule,
                    FarrisPanelModule,
                    FarrisFormsModule,
                    LoadingModule.forRoot(),
                    LocalizeModule,
                    LookupModule,
                    FarrisDatePickerModule,
                    NumberSpinnerModule
                ],
                declarations: [
                    FormularDefineComponent,
                    FormularSelectComponent,
                    FormularDefineWizardComponent,
                    StepComponentComponent,
                    HelpBeforeEventDirective
                ],
                exports: [
                    FormularDefineComponent,
                    FormularSelectComponent,
                    FormularDefineWizardComponent,
                    StepComponentComponent
                ],
                entryComponents: [
                    FormularDefineComponent,
                    FormularSelectComponent,
                    FormularDefineWizardComponent,
                    StepComponentComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: qdp-formular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormularModule, FormularDefineComponent, FormularDefineWizardComponent, FormularSelectComponent, StepComponentComponent, RestfulService, FormularService, HelpBeforeEventDirective as ɵb, EntityDataService as ɵa };

//# sourceMappingURL=qdp-formular.js.map