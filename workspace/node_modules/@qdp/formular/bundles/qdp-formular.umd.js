(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@angular/common/http'), require('@farris/ui-flex-layout'), require('@farris/ui-dropdown'), require('@farris/ui-dialog'), require('@farris/ui-notify'), require('@farris/ui-perfect-scrollbar'), require('@farris/ui-treetable'), require('ngx-color-picker'), require('@gsp-sys/rtf-ui'), require('@progress/kendo-angular-treeview'), require('@progress/kendo-angular-grid'), require('@progress/kendo-angular-popup'), require('@progress/kendo-angular-inputs'), require('@progress/kendo-angular-dropdowns'), require('@progress/kendo-angular-layout'), require('@progress/kendo-angular-buttons'), require('@ecp-caf/caf-common'), require('lodash-es'), require('@farris/ui-datagrid'), require('@farris/ui-combo-list'), require('@farris/ui-button'), require('@farris/ui-messager'), require('@farris/ui-modal'), require('@farris/bef'), require('@farris/ui-panel'), require('@farris/ui-forms'), require('@farris/ui-loading'), require('@qdp/localize'), require('@farris/ui-datepicker'), require('@farris/ui-number-spinner'), require('@angular/core'), require('@farris/ui-lookup'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@qdp/formular', ['exports', '@angular/common', '@angular/forms', '@angular/common/http', '@farris/ui-flex-layout', '@farris/ui-dropdown', '@farris/ui-dialog', '@farris/ui-notify', '@farris/ui-perfect-scrollbar', '@farris/ui-treetable', 'ngx-color-picker', '@gsp-sys/rtf-ui', '@progress/kendo-angular-treeview', '@progress/kendo-angular-grid', '@progress/kendo-angular-popup', '@progress/kendo-angular-inputs', '@progress/kendo-angular-dropdowns', '@progress/kendo-angular-layout', '@progress/kendo-angular-buttons', '@ecp-caf/caf-common', 'lodash-es', '@farris/ui-datagrid', '@farris/ui-combo-list', '@farris/ui-button', '@farris/ui-messager', '@farris/ui-modal', '@farris/bef', '@farris/ui-panel', '@farris/ui-forms', '@farris/ui-loading', '@qdp/localize', '@farris/ui-datepicker', '@farris/ui-number-spinner', '@angular/core', '@farris/ui-lookup', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.qdp = global.qdp || {}, global.qdp.formular = {}),global.ng.common,global.ng.forms,global.ng.common.http,global.uiFlexLayout,global.uiDropdown,global.uiDialog,global.uiNotify,global.uiPerfectScrollbar,global.uiTreetable,global.ngxColorPicker,global.rtfUi,global.kendoAngularTreeview,global.kendoAngularGrid,global.kendoAngularPopup,global.kendoAngularInputs,global.kendoAngularDropdowns,global.kendoAngularLayout,global.kendoAngularButtons,global.cafCommon,global.lodashEs,global.uiDatagrid,global.uiComboList,global.uiButton,global.uiMessager,global.uiModal,global.bef,global.uiPanel,global.uiForms,global.uiLoading,global.localize,global.uiDatepicker,global.uiNumberSpinner,global.ng.core,global.uiLookup,global.rxjs,global.rxjs.operators));
}(this, (function (exports,common,forms,http,uiFlexLayout,uiDropdown,uiDialog,uiNotify,uiPerfectScrollbar,uiTreetable,ngxColorPicker,rtfUi,kendoAngularTreeview,kendoAngularGrid,kendoAngularPopup,kendoAngularInputs,kendoAngularDropdowns,kendoAngularLayout,kendoAngularButtons,cafCommon,lodashEs,uiDatagrid,uiComboList,uiButton,uiMessager,uiModal,bef,uiPanel,uiForms,uiLoading,localize,uiDatepicker,uiNumberSpinner,core,uiLookup,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/restful.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RestfulService = /** @class */ (function () {
        /**
         * 构造函数
         * @param httpClient http客户端
         */
        function RestfulService(httpClient) {
            this.httpClient = httpClient;
        }
        /**
         * 发送GET请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送GET请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.get = /**
         * 发送GET请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, params, options) {
                return this.request(uri, 'GET', params, options);
            };
        /**
         * 发送POST请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送POST请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.put = /**
         * 发送POST请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, body, params, options) {
                /** @type {?} */
                var optionsWithBody = this.addBody(options, body);
                return this.request(uri, 'PUT', params, optionsWithBody);
            };
        /**
         * 发送PUT请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送PUT请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.post = /**
         * 发送PUT请求
         * @param {?} uri 请求地址
         * @param {?} body
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, body, params, options) {
                /** @type {?} */
                var optionsWithBody = this.addBody(options, body);
                return this.request(uri, 'POST', params, optionsWithBody);
            };
        /**
         * 发送DELETE请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送DELETE请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.delete = /**
         * 发送DELETE请求
         * @param {?} uri 请求地址
         * @param {?=} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, params, options) {
                return this.request(uri, 'DELETE', params, options);
            };
        /**
         * 发送请求
         * @param uri 请求地址
         * @param params 请求参数
         */
        /**
         * 发送请求
         * @private
         * @param {?} uri 请求地址
         * @param {?} method
         * @param {?} params 请求参数
         * @param {?=} options
         * @return {?}
         */
        RestfulService.prototype.request = /**
         * 发送请求
         * @private
         * @param {?} uri 请求地址
         * @param {?} method
         * @param {?} params 请求参数
         * @param {?=} options
         * @return {?}
         */
            function (uri, method, params, options) {
                if (options === void 0) {
                    options = {};
                }
                options = options || {};
                if (params) {
                    /** @type {?} */
                    var httpParams = this.buildParams(params);
                    options.params = httpParams;
                }
                /** @type {?} */
                var methodName = ( /** @type {?} */(method));
                /** @type {?} */
                var result = this.httpClient.request(methodName, uri, options);
                // if (result && result.returnValue) {result = result.returnValue};
                return result;
            };
        /**
         * 构造Http请求参数
         * @param params 请求参数
         */
        /**
         * 构造Http请求参数
         * @private
         * @param {?} params 请求参数
         * @return {?}
         */
        RestfulService.prototype.buildParams = /**
         * 构造Http请求参数
         * @private
         * @param {?} params 请求参数
         * @return {?}
         */
            function (params) {
                /** @type {?} */
                var parameters = {};
                for (var key in params) {
                    if (params.hasOwnProperty(key) && params[key]) {
                        /** @type {?} */
                        var value = params[key].toString();
                        parameters[key] = value;
                    }
                }
                return parameters;
            };
        /**
         * @private
         * @param {?} options
         * @param {?} body
         * @return {?}
         */
        RestfulService.prototype.addBody = /**
         * @private
         * @param {?} options
         * @param {?} body
         * @return {?}
         */
            function (options, body) {
                options = options || {};
                /** @type {?} */
                var mergedOptions = Object.assign(options, { body: body });
                return mergedOptions;
            };
        RestfulService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RestfulService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return RestfulService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/entitydata.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityDataService = /** @class */ (function () {
        function EntityDataService() {
            this.isFinish = false;
            this.formularInfo = {};
        }
        /**
         * @param {?} stepTye
         * @return {?}
         */
        EntityDataService.prototype.setStepType = /**
         * @param {?} stepTye
         * @return {?}
         */
            function (stepTye) {
                this.stepType = stepTye;
            };
        /**
         * @return {?}
         */
        EntityDataService.prototype.getStepType = /**
         * @return {?}
         */
            function () {
                return this.stepType;
            };
        /**
         * @param {?} isFinish
         * @param {?} formularInfo
         * @return {?}
         */
        EntityDataService.prototype.setFormularState = /**
         * @param {?} isFinish
         * @param {?} formularInfo
         * @return {?}
         */
            function (isFinish, formularInfo) {
                this.isFinish = isFinish;
                this.formularInfo = formularInfo;
            };
        /**
         * @return {?}
         */
        EntityDataService.prototype.getFormularState = /**
         * @return {?}
         */
            function () {
                return { isFinish: this.isFinish, formularInfo: this.formularInfo };
            };
        EntityDataService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EntityDataService.ctorParameters = function () { return []; };
        return EntityDataService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/formular-define/formular-define.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormularDefineComponent = /** @class */ (function () {
        function FormularDefineComponent(restfulService, msgService, cacheService, loadService, entityDataService, localizeService) {
            var _this = this;
            this.restfulService = restfulService;
            this.msgService = msgService;
            this.cacheService = cacheService;
            this.loadService = loadService;
            this.entityDataService = entityDataService;
            this.localizeService = localizeService;
            this.data = [];
            this.funcData = [];
            // 当前站点host
            this.size = {};
            this.inputTemplate = '';
            this.dynamicInput = [];
            this.columns = [];
            this.formularText = ''; // 公式信息
            // 公式信息
            this.binding = 'selectFormular';
            this.name = ''; // 公式名称
            // 公式名称
            this.isGroup = false; // 是否分组
            // 是否分组
            this.resultDatas = [];
            this.resultColumns = [];
            this.formularWizard = '0';
            this.formularType = 0; // 0普通公式 1组合公式
            // 0普通公式 1组合公式
            this.loading = this.loadService.show({ container: 'body' });
            /**
             * 国际化
             */
            this.labelSaveFormular = '保存公式';
            this.resultSortColumns = [
                {
                    id: '0',
                    label: '无'
                },
                {
                    id: '1',
                    label: '升序'
                },
                {
                    id: '2',
                    label: '降序'
                }
            ];
            this.resultColVisibleColumns = [
                {
                    id: '0',
                    label: '否'
                },
                {
                    id: '1',
                    label: '是'
                }
            ];
            /**
             * 帮助配置字段
             */
            this.helpData = [];
            this.helpColumns = [];
            this.handlebeforeClose = ( /**
             * @return {?}
             */function () {
                return rxjs.of(true);
            });
            this.clickLastStep = ( /**
             * @return {?}
             */function () {
                _this.cacheService.set('formularParam', _this.data);
                return true;
            });
            this.beforeFinish = ( /**
             * @return {?}
             */function () {
                /** @type {?} */
                var flag$ = new rxjs.Subject();
                if (_this.formularType === 1) { // 组合公式保存
                    if (!_this.name) {
                        _this.msgService.info(_this.localizeService.getValue('formular.define.messageAlert.nameVerify'));
                    }
                    if (!_this.formularText) {
                        _this.msgService.info(_this.localizeService.getValue('formular.define.messageAlert.combineVerify'));
                    }
                    else if (_this.formularText && !_this.formularCheck(_this.formularText)) {
                        _this.msgService.info(_this.localizeService.getValue('formular.define.messageAlert.formularIntegrityVerify'));
                    }
                    /** @type {?} */
                    var formularInfo = {
                        id: _this.currentFormularId,
                        isgroup: _this.isGroup ? 1 : 0,
                        name: _this.name,
                        queryfunc: '',
                        str1: '',
                        str2: '',
                        str3: '',
                        str4: '',
                        cursu: _this.data.currentSU,
                        str5: _this.data.formularRegion ? _this.data.formularRegion : 'publish',
                        str6: _this.formularText,
                        num1: 1,
                    };
                    /** @type {?} */
                    var options = {
                        headers: {
                            'SessionId': _this.data.sessionId,
                            'Content-Type': 'application/json'
                        }
                    };
                    if (formularInfo) {
                        /** @type {?} */
                        var retrieveUri = _this.data.serverHost + '/api/gsp/bcc/v1.0/querygetdatadetail_frm/service/saveqdpformular';
                        _this.restfulService.put(retrieveUri, { formularInfo: JSON.stringify(formularInfo) }, {}, options).subscribe(( /**
                         * @param {?} data
                         * @return {?}
                         */function (data) {
                            /** @type {?} */
                            var formularData = data.returnValue;
                            if (formularData) {
                                _this.currentFormularId = formularData;
                                _this.entityDataService.setFormularState(true, { id: _this.currentFormularId, name: _this.name });
                                //this.cacheService.set('formularResult', { id: this.currentFormularId, name: '公式' });
                                flag$.next(true);
                            }
                            else {
                                _this.entityDataService.setFormularState(false, {});
                                _this.msgService.error(_this.localizeService.getValue('formular.define.messageAlert.saveFormularFailure'));
                            }
                        }));
                    }
                }
                else if (!_this.currentFormularId) {
                    _this.entityDataService.setFormularState(false, {});
                    _this.msgService.info(_this.localizeService.getValue('formular.define.messageAlert.formularSaveVerify'));
                    return false;
                }
                else {
                    _this.entityDataService.setFormularState(true, { id: _this.currentFormularId, name: _this.name });
                    //this.cacheService.set('formularResult', { id: this.currentFormularId, name: this.name ? this.name : '公式' });
                    return true;
                }
                return flag$;
            });
            this.labelSaveFormular = this.localizeService.getValue('formular.define.labelSaveFormular');
            this.labelGeneraterFormular = this.localizeService.getValue('formular.define.labelGeneraterFormular');
            this.labelQueryFunc = this.localizeService.getValue('formular.define.labelQueryFunc');
            this.labelBasicInfo = this.localizeService.getValue('formular.define.labelBasicInfo');
            this.labelFormularName = this.localizeService.getValue('formular.define.labelFormularName');
            this.labelIsGroup = this.localizeService.getValue('formular.define.labelIsGroup');
            this.labelParamInfo = this.localizeService.getValue('formular.define.labelParamInfo');
            this.labelResultColInfo = this.localizeService.getValue('formular.define.labelResultColInfo');
            this.resultSortColumns = this.localizeService.getValue('formular.define.resultSortColumns');
            this.resultColVisibleColumns = this.localizeService.getValue('formular.define.resultColVisibleColumns');
        }
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.data = this.cacheService.get('formularParam');
                this.formularWizard = this.data.formularWizard;
                this.formularType = this.data.formularWizard === '2' ? 1 : 0;
                this.currentFormularId = this.data.currentFormularId;
                this.columns = [
                    // { field: 'id', width: 100, title: 'ID' },
                    { field: 'resultcolvisible', width: 60, title: this.localizeService.getValue('formular.define.columntitles.resultcolvisible'), template: this.resultColVisibleColumnTemp },
                    { field: 'resultcode', width: 60, title: this.localizeService.getValue('formular.define.columntitles.resultcode') },
                    { field: 'resultdescription', width: 60, title: this.getResultDescription() },
                    { field: 'resultsort', width: 60, title: this.localizeService.getValue('formular.define.columntitles.resultsort'), template: this.resultSortColumnTemp }
                ];
                if (this.data.sessionId) {
                    this.getFuncInfo();
                }
                else {
                    this.createHeaderSessionId().subscribe(( /**
                     * @param {?} sessionId
                     * @return {?}
                     */function (sessionId) {
                        console.log(sessionId);
                        if (sessionId) {
                            _this.getFuncInfo();
                        }
                    }));
                }
            };
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.guid = /**
         * @return {?}
         */
            function () {
                return (( /** @type {?} */([1e7])) + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, ( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) {
                    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
                }));
            };
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.getResultDescription = /**
         * @return {?}
         */
            function () {
                return this.getLanguage() === 'zh-chs' ? '列描述' : 'description';
            };
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.getLanguage = /**
         * @return {?}
         */
            function () {
                switch (this.localizeService.localeId) {
                    case 'zh-chs':
                    case 'zh-cn':
                    case 'zh':
                        return 'zh-chs';
                    case 'en-us':
                    case 'en':
                        return 'en-us';
                }
                return 'zh-chs';
            };
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.loading.close();
            };
        /**
         * @private
         * @return {?}
         */
        FormularDefineComponent.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var sessionId = new rxjs.Subject();
                /** @type {?} */
                var options = {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    responseType: 'text'
                };
                /** @type {?} */
                var createSessionUrl = this.data.serverHost + '/api/gsp/bcc/v1.0/queryfuncdetail_frm/service/createsession';
                this.restfulService.post(createSessionUrl, {}, {}, options).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.data.sessionId = data;
                    sessionId.next(data);
                }));
                return sessionId;
            };
        /**
         * @private
         * @return {?}
         */
        FormularDefineComponent.prototype.getFuncInfo = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var uri = this.data.serverHost;
                /** @type {?} */
                var options = {
                    headers: {
                        'SessionId': this.data.sessionId,
                        'Content-Type': 'application/json'
                    }
                };
                /** @type {?} */
                var entityFilter = {
                    FilterConditions: [{ 'FilterField': 'SrcSU', 'Value': this.data.currentSU, 'Lbracket': null, 'Rbracket': null, 'Relation': 0, 'Expresstype': 0, 'Compare': 6 }],
                    SortConditions: [],
                    IsUsePagination: false,
                    Pagination: {
                        PageIndex: 0,
                        PageSize: 0,
                        PageCount: 0,
                        TotalCount: 0
                    }
                };
                uri += '/api/gsp/bcc/v1.0/queryfuncdetail_frm/extension/query?entityFilter=' + JSON.stringify(entityFilter);
                this.restfulService.put(uri, {}, {}, options).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var funcDatas = data.returnValue.result;
                    if (funcDatas && funcDatas.length > 0) {
                        funcDatas.forEach(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) {
                            _this.funcData.push({ name: x.name, value: x.id });
                        }));
                    }
                    _this.currentFuncDatas = funcDatas;
                    // 如果选择的是选择公式，根据公示信息初始默认的数据
                    if (_this.currentFormularId && _this.data.formularData && _this.data.formularData.num1 === 1) {
                        _this.name = _this.data.formularData.name;
                        _this.formularText = _this.data.formularData.str6;
                        _this.formularType = 1;
                    }
                    else {
                        _this.getFormularInfo();
                    }
                }));
            };
        /**
         * @private
         * @return {?}
         */
        FormularDefineComponent.prototype.getFormularInfo = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                // 清空历史数据
                this.dynamicInput = [];
                this.resultColumns = [];
                this.resultDatas = [];
                this.formularText = '';
                this.name = '';
                this.isGroup = 0;
                if (this.currentFormularId) {
                    /** @type {?} */
                    var options = {
                        headers: {
                            'SessionId': this.data.sessionId,
                            'Content-Type': 'application/json'
                        }
                    };
                    /** @type {?} */
                    var retrieveUri = this.data.serverHost + '/api/gsp/bcc/v1.0/querygetdatadetail_frm/extension/retrieve/' + this.currentFormularId;
                    this.restfulService.put(retrieveUri, {}, {}, options).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        /** @type {?} */
                        var formularData = data.returnValue;
                        if (formularData) {
                            // 初始基础数据
                            _this.name = formularData.name;
                            _this.data.currentFormularName = formularData.name;
                            _this.isGroup = formularData.isGroup;
                            /** @type {?} */
                            var queryFuncId_1 = formularData.queryFunc;
                            _this.type = formularData.str1;
                            _this.metadataobjectid = formularData.str2;
                            _this.funcSelectValue = _this.funcData.find(( /**
                             * @param {?} x
                             * @return {?}
                             */function (x) { return x.value === queryFuncId_1; }));
                            _this.entityDataService.setFormularState(true, { id: _this.currentFormularId, name: _this.name });
                            if (queryFuncId_1) {
                                _this.getDropDownInfo(queryFuncId_1, _this.type, _this.metadataobjectid, true, formularData.queryGetDataParamInfos);
                            }
                            // const currentQueryGetDataParams = formularData.queryGetDataParamInfos;
                            /** @type {?} */
                            var queryFuncResults = formularData.queryGetDataResultInfos;
                            // if (currentQueryGetDataParams && currentQueryGetDataParams.length > 0) {
                            //   currentQueryGetDataParams.forEach(queryGetDataParam => {
                            //     const fieldConfig = JSON.parse(queryGetDataParam.fieldConfig);
                            //     if (fieldConfig.controltype === 'dropdown') {
                            //       fieldConfig.enumValues = JSON.parse(fieldConfig.enumValues);
                            //     }
                            //     this.dynamicInput.push({ paramcode: queryGetDataParam.paramCode, paramname: queryGetDataParam.paramName, paramvalue: queryGetDataParam.paramValue, fieldConfig: JSON.parse(queryGetDataParam.fieldConfig) });
                            //   });
                            // }
                            if (queryFuncResults && queryFuncResults.length > 0) {
                                /** @type {?} */
                                var resultColumns_1 = [];
                                /** @type {?} */
                                var data_1 = [];
                                queryFuncResults.forEach(( /**
                                 * @param {?} queryFuncResult
                                 * @return {?}
                                 */function (queryFuncResult) {
                                    resultColumns_1.push({ id: queryFuncResult.resultCode, label: queryFuncResult.resultName });
                                    data_1.push({
                                        id: queryFuncResult.id,
                                        resultcode: queryFuncResult.resultCode,
                                        resultsort: queryFuncResult.resultSort,
                                        resultname: queryFuncResult.resultName,
                                        resultcolvisible: queryFuncResult.resultColVisible === true ? '1' : '0',
                                        resultdescription: ''
                                    });
                                }));
                                _this.resultColumns = __spread(resultColumns_1);
                                _this.resultDatas = __spread(data_1);
                            }
                        }
                    }));
                }
            };
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.generateFormular = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.name) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.nameVerify'));
                    return;
                }
                if (!this.funcSelectValue) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.funcVerify'));
                    return;
                }
                /** @type {?} */
                var formularInfo = {
                    id: this.currentFormularId,
                    cursu: this.data.currentSU,
                    isgroup: this.isGroup ? 1 : 0,
                    name: this.name,
                    queryfunc: this.funcSelectValue.value,
                    str1: this.type,
                    str2: this.metadataobjectid,
                    str3: this.qomanagercode ? this.qomanagercode : '',
                    str4: this.funcSelectValue.name,
                    str5: '',
                    str6: '',
                    formularParamInfos: this.dynamicInput,
                    formularResultInfos: this.resultDatas
                };
                /** @type {?} */
                var options = {
                    headers: {
                        'SessionId': this.data.sessionId,
                        'Content-Type': 'application/json'
                    }
                };
                if (formularInfo) {
                    /** @type {?} */
                    var retrieveUri = this.data.serverHost + '/api/gsp/bcc/v1.0/querygetdatadetail_frm/service/saveqdpformular';
                    this.restfulService.put(retrieveUri, { formularInfo: JSON.stringify(formularInfo) }, {}, options).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        /** @type {?} */
                        var formularData = data.returnValue;
                        if (formularData) {
                            _this.currentFormularId = formularData;
                            _this.entityDataService.setFormularState(true, { id: _this.currentFormularId, name: _this.name });
                            // this.entityDataService.isFinish = true;
                            _this.msgService.info(_this.localizeService.getValue('formular.define.messageAlert.saveFormular'));
                        }
                    }));
                }
            };
        /**
         * @return {?}
         */
        FormularDefineComponent.prototype.generateFormularInfo = /**
         * @return {?}
         */
            function () {
                if (!this.currentFunctionId) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.pleaseSelectQueryFunc'));
                    return;
                }
                if (this.resultDatas && this.resultDatas.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.resultcolvisible === '1'; })).length !== 1) {
                    this.msgService.info(this.localizeService.getValue('formular.define.messageAlert.resultVerify'));
                    return;
                }
                /** @type {?} */
                var paramInfo = [];
                this.dynamicInput.forEach(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    paramInfo.push({ key: x.paramcode, value: x.paramvalue ? x.paramvalue : '' });
                }));
                /** @type {?} */
                var formularcompile = {
                    funcId: this.currentFunctionId,
                    paramInfos: paramInfo,
                    resultColName: this.resultDatas[0].resultcode,
                    qomanagercode: this.qomanagercode,
                    isgroup: this.isGroup ? 1 : 0
                };
                this.formularText = this.formularText + 'QDPFormular.execute(' + JSON.stringify(formularcompile) + ') ';
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormularDefineComponent.prototype.operator = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.formularText = this.formularText + $event;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FormularDefineComponent.prototype.onResized = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.size.height = event.newHeight;
                this.size.width = event.newWidth;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormularDefineComponent.prototype.selectionChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                // 清空历史数据
                this.dynamicInput = [];
                this.resultColumns = [];
                this.resultDatas = [];
                this.name = this.formularType === 1 ? this.name : '';
                this.isGroup = 0;
                if ($event && $event.value) {
                    this.currentFunctionId = $event.value;
                    /** @type {?} */
                    var funcData = this.currentFuncDatas.find(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.id === _this.currentFunctionId; }));
                    this.name = this.name === '' ? funcData.name : this.name;
                    // 保存公式类型及元数据id
                    this.type = funcData.srcType;
                    this.metadataobjectid = funcData.metadataObject;
                    if (this.currentFunctionId) {
                        this.getDropDownInfo(this.currentFunctionId, this.type, this.metadataobjectid, true, '');
                    }
                }
            };
        // 初始下拉信息
        // 初始下拉信息
        /**
         * @param {?} funcid
         * @param {?} type
         * @param {?} metadataobjectid
         * @param {?} generateData
         * @param {?} queryFormularParam
         * @return {?}
         */
        FormularDefineComponent.prototype.getDropDownInfo =
            // 初始下拉信息
            /**
             * @param {?} funcid
             * @param {?} type
             * @param {?} metadataobjectid
             * @param {?} generateData
             * @param {?} queryFormularParam
             * @return {?}
             */
            function (funcid, type, metadataobjectid, generateData, queryFormularParam) {
                /** @type {?} */
                var self = this;
                // 访问数据服务
                /** @type {?} */
                var options = {
                    headers: {
                        'SessionId': self.data.sessionId,
                        'Content-Type': 'application/json'
                    }
                };
                /** @type {?} */
                var url = self.data.serverHost + '/api/gsp/bcc/v1.0/queryfuncdetail_frm/extension/retrieve/' + funcid;
                self.restfulService.put(url, {}, {}, options).toPromise().then(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    var e_1, _a;
                    if (value) {
                        value = value.returnValue;
                        // 查询参数
                        if (generateData) {
                            /** @type {?} */
                            var queryFuncParams = value.queryFuncParams;
                            if (queryFuncParams.length > 0) {
                                // if (currentQueryGetDataParams && currentQueryGetDataParams.length > 0) {
                                //   currentQueryGetDataParams.forEach(queryGetDataParam => {
                                //     const fieldConfig = JSON.parse(queryGetDataParam.fieldConfig);
                                //     if (fieldConfig.controltype === 'dropdown') {
                                //       fieldConfig.enumValues = JSON.parse(fieldConfig.enumValues);
                                //     }
                                //     this.dynamicInput.push({ paramcode: queryGetDataParam.paramCode, paramname: queryGetDataParam.paramName, paramvalue: queryGetDataParam.paramValue, fieldConfig: JSON.parse(queryGetDataParam.fieldConfig) });
                                //   });
                                // }
                                queryFuncParams = queryFuncParams.sort(self.sortData);
                                queryFuncParams.forEach(( /**
                                 * @param {?} funcParam
                                 * @return {?}
                                 */function (funcParam) {
                                    if (funcParam) {
                                        /** @type {?} */
                                        var fieldConfig = JSON.parse(funcParam.fieldConfig);
                                        if (fieldConfig.controltype === 'dropdown') {
                                            fieldConfig.enumValues = fieldConfig.enumValues;
                                        }
                                        /** @type {?} */
                                        var findParamInfo = void 0;
                                        if (queryFormularParam && queryFormularParam.length > 0) {
                                            findParamInfo = queryFormularParam.find(( /**
                                             * @param {?} x
                                             * @return {?}
                                             */function (x) { return x.paramCode === funcParam.code; }));
                                        }
                                        /** @type {?} */
                                        var paramvalue = (findParamInfo && findParamInfo.paramValue) ? findParamInfo.paramValue : '';
                                        fieldConfig.paramvaluename = '';
                                        if (fieldConfig.controltype === 'help' && findParamInfo) {
                                            /** @type {?} */
                                            var paramvaluearray = paramvalue.split('|');
                                            paramvalue = paramvaluearray[0];
                                            fieldConfig.paramvaluename = paramvaluearray[1];
                                        }
                                        self.dynamicInput.push({ id: findParamInfo ? findParamInfo.id : '', paramcode: funcParam.code, paramname: funcParam.name, paramvalue: paramvalue, fieldConfig: fieldConfig });
                                    }
                                }));
                            }
                        }
                        if (generateData) { // 新建或者组合公式调用此逻辑
                            self.resultColumns = [];
                            if (type === 'BE') {
                                /** @type {?} */
                                var queryFuncResults = value.queryFuncResults;
                                if (queryFuncResults.length > 0) {
                                    /** @type {?} */
                                    var funcResultDatas_2 = [];
                                    queryFuncResults.forEach(( /**
                                     * @param {?} funcResult
                                     * @return {?}
                                     */function (funcResult) {
                                        if (funcResult) {
                                            // self.resultColumns.push({ id: funcResult.srcCol, label: funcResult.colName });
                                            funcResultDatas_2.push({ id: self.guid(), resultcode: funcResult.srcCol, resultsort: '0', resultname: funcResult.colName,
                                                resultcolvisible: '1', resultdescription: funcResult.description });
                                        }
                                    }));
                                    if (funcResultDatas_2.length > 0) {
                                        if (self.resultDatas && self.resultDatas.length > 0) {
                                            /** @type {?} */
                                            var newResultDatas = [];
                                            var _loop_1 = function (funcResultData) {
                                                /** @type {?} */
                                                var resultData = self.resultDatas.find(( /**
                                                 * @param {?} x
                                                 * @return {?}
                                                 */function (x) { return x.resultcode === funcResultData.resultcode; }));
                                                if (resultData) {
                                                    newResultDatas.push(__assign({}, resultData, { resultdescription: funcResultData.resultdescription }));
                                                }
                                                else {
                                                    newResultDatas.push(funcResultData);
                                                }
                                            };
                                            try {
                                                for (var funcResultDatas_1 = __values(funcResultDatas_2), funcResultDatas_1_1 = funcResultDatas_1.next(); !funcResultDatas_1_1.done; funcResultDatas_1_1 = funcResultDatas_1.next()) {
                                                    var funcResultData = funcResultDatas_1_1.value;
                                                    _loop_1(funcResultData);
                                                }
                                            }
                                            catch (e_1_1) {
                                                e_1 = { error: e_1_1 };
                                            }
                                            finally {
                                                try {
                                                    if (funcResultDatas_1_1 && !funcResultDatas_1_1.done && (_a = funcResultDatas_1.return))
                                                        _a.call(funcResultDatas_1);
                                                }
                                                finally {
                                                    if (e_1)
                                                        throw e_1.error;
                                                }
                                            }
                                            /** @type {?} */
                                            var resultColumns1_1 = [];
                                            newResultDatas.forEach(( /**
                                             * @param {?} m
                                             * @return {?}
                                             */function (m) {
                                                resultColumns1_1.push({ id: m.resultcode, label: m.resultname });
                                            }));
                                            self.resultColumns = __spread(resultColumns1_1);
                                            self.resultDatas = __spread(newResultDatas);
                                        }
                                        else {
                                            /** @type {?} */
                                            var resultColumns1_2 = [];
                                            funcResultDatas_2.forEach(( /**
                                             * @param {?} m
                                             * @return {?}
                                             */function (m) {
                                                resultColumns1_2.push({ id: m.resultcode, label: m.resultname });
                                            }));
                                            self.resultColumns = __spread(resultColumns1_2);
                                            self.resultDatas = __spread(funcResultDatas_2);
                                        }
                                        // self.resultDatas = [...funcResultDatas];
                                    }
                                }
                            }
                            else {
                                /** @type {?} */
                                var options_1 = {
                                    headers: {
                                        'SessionId': self.data.sessionId,
                                        'Content-Type': 'application/json'
                                    }
                                };
                                // 根据id获取元数据信息
                                self.restfulService.get(self.data.serverHost + '/api/runtime/sys/v1.0/rt-metadatas/' + metadataobjectid, {}, options_1).subscribe(( /**
                                 * @param {?} metadataContent
                                 * @return {?}
                                 */function (metadataContent) {
                                    if (metadataContent) {
                                        /** @type {?} */
                                        var currentMetadataContent = JSON.parse(metadataContent['content']);
                                        /** @type {?} */
                                        var mainObject = currentMetadataContent.QueryNode;
                                        if (!mainObject) {
                                            mainObject = currentMetadataContent.DataSources['0'].QueryNode;
                                        }
                                        /** @type {?} */
                                        var datas_1 = [];
                                        mainObject.ContainElements.forEach(( /**
                                         * @param {?} containElement
                                         * @return {?}
                                         */function (containElement) {
                                            self.resultColumns.push({ id: containElement.Code, label: containElement.Name });
                                            datas_1.push({ id: self.guid(), resultcode: containElement.Code, resultsort: '0', resultname: containElement.Name, resultcolvisible: '1', resultdescription: '' });
                                        }));
                                        if (datas_1.length > 0) {
                                            self.resultDatas = __spread(datas_1);
                                        }
                                        self.qomanagercode = 'com.' + (currentMetadataContent.NamespacePrefix + '.' + currentMetadataContent.Code).toLowerCase(); // qo编号
                                    }
                                }));
                            }
                        }
                    }
                }));
            };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        FormularDefineComponent.prototype.sortData = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                return a.orderNumber - b.orderNumber;
            };
        /**
         * @param {?} string
         * @return {?}
         */
        FormularDefineComponent.prototype.formularCheck = /**
         * @param {?} string
         * @return {?}
         */
            function (string) {
                // 剔除空白符
                string = string.replace(/\s/g, '');
                // 错误情况，空字符串
                if ('' === string) {
                    return false;
                }
                // 错误情况，运算符连续
                if (/[\+\-\*\/]{2,}/.test(string)) {
                    return false;
                }
                // 空括号
                if (/\(\)/.test(string)) {
                    return false;
                }
                // 错误情况，括号不配对
                /** @type {?} */
                var stack = [];
                for (var i = 0, item; i < string.length; i++) {
                    item = string.charAt(i);
                    if ('(' === item) {
                        stack.push('(');
                    }
                    else if (')' === item) {
                        if (stack.length > 0) {
                            stack.pop();
                        }
                        else {
                            return false;
                        }
                    }
                }
                if (0 !== stack.length) {
                    return false;
                }
                // 错误情况，(后面是运算符 
                if (/\([\+\-\*\/]/.test(string)) {
                    return false;
                }
                // 错误情况，)前面是运算符
                if (/[\+\-\*\/]\)/.test(string)) {
                    return false;
                }
                // // 错误情况，(前面不是运算符
                // if (/[^\+\-\*\/]\(/.test(string)) {
                //   return false;
                // }
                // // 错误情况，)后面不是运算符
                // if (/\)[^\+\-\*\/]/.test(string)) {
                //   return false;
                // }
                return true;
            };
        FormularDefineComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'formular-define',
                        template: "<div class=\"farris-main-area flex-column\">\r\n  <div class=\"farris-header\">\r\n    <div class=\"farris-form form-inline farris-form-inline\">\r\n      <div class=\"f-utils-flex-row-wrap\">\r\n        <div class=\"col-2\" *ngIf=\"formularType===0\">\r\n          <farris-button (click)=\"generateFormular()\">\r\n            <span>{{labelSaveFormular}}</span>\r\n          </farris-button>\r\n        </div>\r\n        <div class=\"col-10\" *ngIf=\"formularType===1\">\r\n          <farris-button (click)=\"generateFormularInfo()\">\r\n            <span>{{labelGeneraterFormular}}</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('+')\">\r\n            <span>+</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('-')\">\r\n            <span>-</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('*')\">\r\n            <span>*</span>\r\n          </farris-button>\r\n          <farris-button class=\"mx-2\" [size]=\"'small'\" (click)=\"operator('/')\">\r\n            <span>-</span>\r\n          </farris-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"navbar p-0\" *ngIf=\"formularType===1\">\r\n      <textarea class=\"form-control\" rows=\"10\" maxlength=\"2000\" id=\"formularText\" [(ngModel)]=\"formularText\"></textarea>\r\n    </div>\r\n  </div>\r\n  <div class=\"d-flex flex-row flex-fill farris-overflow-hidden\">\r\n    <div class=\"col-3 p-0 m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n      <div class=\"col-12 col-md-12 col-lg-12\">\r\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" for=\"colFunction\" style=\"width: 6rem; min-width: 6rem;\">\r\n              <span class=\"farris-label-text\">{{labelQueryFunc}}:</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <kendo-combobox id=\"colAlign\" [(ngModel)]=\"funcSelectValue\" [data]=\"funcData\" [textField]=\"'name'\"\r\n                [valueField]=\"'value'\" class=\"form-control\" (selectionChange)=\"selectionChange($event)\">\r\n              </kendo-combobox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"flex-fill f-utils-overflow-xhya \">\r\n      <farris-panel [foldable]=\"true\" [defaultExpand]=\"true\">\r\n        <farris-panel-item [title]=\"labelBasicInfo\">\r\n          <ng-template #contentTempl>\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"f-utils-flex-row-wrap\">\r\n                <div class=\"col-6\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-info text-danger\">*</span>\r\n                        <span class=\"farris-label-text\">{{labelFormularName}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <input class=\"form-control\" type=\"text\" id=\"name\" [(ngModel)]=\"name\" maxlength=\"36\">\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-6\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\" for=\"class-input-checkbox01\">\r\n                        <span class=\"farris-label-text\">{{labelIsGroup}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" id=\"isGroup\" [(ngModel)]=\"isGroup\" type=\"checkbox\">\r\n                          <label class=\"custom-control-label\" for=\"isGroup\"></label>\r\n                        </div>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n        <farris-panel-item [title]=\"labelParamInfo\">\r\n          <ng-template #contentTempl>\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"f-utils-flex-row-wrap\">\r\n                <div class=\"col-6\" *ngFor=\"let i of dynamicInput\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{i.paramname}}:</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'text'\">\r\n                          <input class=\"form-control\" type=\"text\" id=\"name\" [(ngModel)]=\"i.paramvalue\" maxlength=\"36\">\r\n                          <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'help'\">\r\n                          <farris-lookup-grid input-end-edit data-mapping [useTip]=\" false\" [nosearch]=\"false\" [ngModel]=\"i.fieldConfig.paramvaluename\"\r\n                            [editable]=\"false\" [displayType]=\"'List'\" [items]=\"helpData\"\r\n                            [idField]=\"i.fieldConfig.idField\"  [singleSelect]=\"true\"\r\n                            [pageSize]=\"20\" [pageIndex]=\"1\" [pagination]=\"true\" [textField]=\"i.fieldConfig.textField\"\r\n                            [valueField]=\"i.fieldConfig.valueField\" [title]=\"'\u901A\u7528\u5E2E\u52A9'\" [showCloseButton]=\"true\"\r\n                            [resizable]=\"true\" [context]='i.fieldConfig' [enableToSelect]=\"true\"\r\n                            [columns]=\"i.fieldConfig.showColumns\" [libHelpBeforeEvent]=\"i\"\r\n                            [localHost]=\"data.serverHost\" [dynamicInput] = \"dynamicInput\"></farris-lookup-grid>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'dropdown'\">\r\n                          <farris-combo-list [(ngModel)]=\"i.paramvalue\" [idField]=\"'value'\" [textField]=\"'name'\"\r\n                            [editable]=\"false\" [data]=\"i.fieldConfig.enumValues\"\r\n                            [multiSelect]=\"i.fieldConfig.multiSelect\"></farris-combo-list>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'single-date'\">\r\n                          <farris-datepicker [(ngModel)]=\"i.paramvalue\" [returnFormat]=\"'yyyy-MM-dd'\"\r\n                            [dateFormat]=\"i.fieldConfig.format\">\r\n                          </farris-datepicker>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'single-number'\">\r\n                          <farris-number-spinner [(ngModel)]=\"i.paramvalue\"></farris-number-spinner>\r\n                          <div class=\"farris-feedback\"></div>\r\n                        </div>\r\n                        <div *ngIf=\"i.fieldConfig.controltype === 'single-year'\">\r\n                          <farris-datepicker [(ngModel)]=\"i.paramvalue\"  [returnFormat]=\"'yyyy'\"\r\n                            [dateFormat]=\"'yyyy'\" [showType]=\"3\"></farris-datepicker>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n        <farris-panel-item [title]=\"labelResultColInfo\">\r\n          <ng-template #contentTempl>\r\n            <!-- <div class=\"row\" style=\"margin: 0; padding: 15px; background-color: #fff\">\r\n            <button class=\"btn btn-primary\" (click)=\"newAdd()\">\u65B0\u589E</button>\r\n            <button class=\"btn btn-default ml-1 mr-1\" (click)=\"removeRow()\">\u5220\u9664</button>\r\n          </div> -->\r\n            <farris-datagrid [data]=\"resultDatas\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\" [showCheckbox]=\"false\"\r\n              [fitColumns]=\"true\" [showLineNumber]=\"false\" [striped]=\"true\" [virtualized]=\"false\" [height]=\"250\"\r\n              [pagination]=\"false\">\r\n            </farris-datagrid>\r\n          </ng-template>\r\n        </farris-panel-item>\r\n      </farris-panel>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #resultColumnTemp let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData['resultcode']\" [idField]=\"'id'\" [textField]=\"'label'\" [readonly]=\"true\"\r\n      [disabled]=\"true\" [data]=\"resultColumns\"></farris-combo-list>\r\n  </div>\r\n</ng-template>\r\n<ng-template #resultSortColumnTemp let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData['resultsort']\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n      [data]=\"resultSortColumns\"></farris-combo-list>\r\n  </div>\r\n</ng-template>\r\n<ng-template #resultColVisibleColumnTemp let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-combo-list [(ngModel)]=\"ctx.rowData['resultcolvisible']\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n      [data]=\"resultColVisibleColumns\"></farris-combo-list>\r\n  </div>\r\n</ng-template>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        FormularDefineComponent.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: uiMessager.MessagerService },
                { type: cafCommon.CacheService },
                { type: uiLoading.LoadingService },
                { type: EntityDataService },
                { type: localize.LocalizeService }
            ];
        };
        FormularDefineComponent.propDecorators = {
            resultColumnTemp: [{ type: core.ViewChild, args: ['resultColumnTemp',] }],
            resultSortColumnTemp: [{ type: core.ViewChild, args: ['resultSortColumnTemp',] }],
            resultColVisibleColumnTemp: [{ type: core.ViewChild, args: ['resultColVisibleColumnTemp',] }],
            dg: [{ type: core.ViewChild, args: ['dg',] }]
        };
        return FormularDefineComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/formular-select/formular-select.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormularSelectComponent = /** @class */ (function () {
        function FormularSelectComponent(restfulService, cacheService, msgService, entityDataService, localizeService) {
            var _this = this;
            this.restfulService = restfulService;
            this.cacheService = cacheService;
            this.msgService = msgService;
            this.entityDataService = entityDataService;
            this.localizeService = localizeService;
            this.data = [];
            this.changeStep = new core.EventEmitter();
            this.formularWizard = '0'; // 公式向导类型 0公式选择 1公式新增
            // 公式向导类型 0公式选择 1公式新增
            this.ddlFormularData = []; // 下拉公示信息
            // 下拉公示信息
            this.formularDatas = []; // 所有的公式信息
            // 所有的公式信息
            this.currentFormularId = ''; // 当前选中的公式Id
            // 当前选中的公式Id
            this.currentFormularName = ''; // 当前选中的公式名称
            /**
             * 点击下一步前汇总数据
             */
            this.clickNextStep = ( /**
             * @return {?}
             */function () {
                if (_this.formularWizard === '0' && _this.currentFormularId) {
                    /** @type {?} */
                    var formularData = _this.formularDatas.find(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.id === _this.currentFormularId; }));
                    if (formularData) {
                        _this.data.formularData = formularData;
                        _this.data.currentFormularName = formularData.name;
                    }
                    _this.data.ddlFormularData = _this.ddlFormularData;
                    _this.entityDataService.setFormularState(true, { id: _this.currentFormularId, name: _this.data.currentFormularName ? _this.data.currentFormularName : '公式' });
                }
                else if (_this.formularWizard === '0' && !_this.currentFormularId) {
                    _this.entityDataService.setFormularState(false, {});
                    _this.msgService.info(_this.localizeService.getValue('formular.formularSelect.messageAlert.formularSelectVerify'));
                    return false;
                }
                else {
                    _this.entityDataService.setFormularState(false, {});
                    _this.data.ddlFormularData = '';
                    // this.data.formularSelectData = [];
                }
                _this.data.currentFormularId = _this.currentFormularId ? _this.currentFormularId : _this.data.currentFormularId;
                _this.data.formularWizard = _this.formularWizard;
                _this.cacheService.set('formularParam', _this.data);
                return true;
            });
            this.beforeFinish = ( /**
             * @return {?}
             */function () {
                if (_this.formularWizard === '0' && _this.currentFormularId) {
                    /** @type {?} */
                    var name_1 = _this.ddlFormularData.find(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.id === _this.currentFormularId; })).label;
                    _this.entityDataService.setFormularState(true, { id: _this.currentFormularId, name: name_1 });
                    // this.cacheService.set('formularResult', {id: this.currentFormularId, name: name});
                    return true;
                }
                else if (_this.formularWizard === '0' && !_this.currentFormularId) {
                    _this.entityDataService.setFormularState(false, {});
                    _this.msgService.info(_this.localizeService.getValue('formular.formularSelect.messageAlert.formularSelectVerify'));
                    return false;
                }
                else {
                    _this.entityDataService.setFormularState(false, {});
                    _this.msgService.info(_this.localizeService.getValue('formular.formularSelect.messageAlert.formularDefineVerify'));
                    return false;
                }
            });
            this.selectionFormular = JSON.parse(this.localizeService.getValue('formular.formularSelect.selectionFormular'));
            this.lableQdpFormular = this.localizeService.getValue('formular.formularSelect.lableQdpFormular');
        }
        /**
         * @return {?}
         */
        FormularSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var self = this;
                self.data = self.cacheService.get('formularParam');
                this.getFormularInfo(self);
                // if (self.data && self.data.ddlFormularData && self.data.ddlFormularData.length >0) {
                //   self.ddlFormularData = self.data.ddlFormularData;
                // } 
                if (self.data) {
                    self.currentFormularId = self.data.currentFormularId ? self.data.currentFormularId : '';
                    self.currentFormularName = self.data.currentFormularName ? self.data.currentFormularName : '';
                    self.formularWizard = self.data.formularWizard ? self.data.formularWizard : '0';
                }
            };
        /**
         * @return {?}
         */
        FormularSelectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @private
         * @param {?} self
         * @return {?}
         */
        FormularSelectComponent.prototype.getFormularInfo = /**
         * @private
         * @param {?} self
         * @return {?}
         */
            function (self) {
                this.createHeaderSessionId().then(( /**
                 * @param {?} value
                 * @return {?}
                 */function success(value) {
                    /** @type {?} */
                    var uri = self.data.serverHost;
                    // tslint:disable-next-line: align
                    /** @type {?} */
                    var options = {
                        headers: {
                            'SessionId': value,
                            'Content-Type': 'application/json'
                        }
                    };
                    self.data.sessionId = value;
                    /** @type {?} */
                    var entityFilter = {
                        FilterConditions: [{ 'FilterField': 'CurSU', 'Value': self.data.currentSU, 'Lbracket': null, 'Rbracket': null, 'Relation': 0, 'Expresstype': 0, 'Compare': 6 }],
                        SortConditions: [],
                        IsUsePagination: false,
                        Pagination: {
                            PageIndex: 0,
                            PageSize: 0,
                            PageCount: 0,
                            TotalCount: 0
                        }
                    };
                    uri += '/api/gsp/bcc/v1.0/querygetdatadefine_frm/extension/query?entityFilter=' + JSON.stringify(entityFilter);
                    /** @type {?} */
                    var ddlFormularData = [];
                    self.restfulService.put(uri, {}, {}, options).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        /** @type {?} */
                        var funcDatas = data.returnValue.result;
                        if (funcDatas && funcDatas.length > 0) {
                            funcDatas.forEach(( /**
                             * @param {?} x
                             * @return {?}
                             */function (x) {
                                ddlFormularData.push({ label: x.name, id: x.id });
                            }));
                            self.ddlFormularData = __spread(ddlFormularData);
                        }
                        self.formularDatas = funcDatas;
                    }));
                }));
            };
        /**
         * @private
         * @return {?}
         */
        FormularSelectComponent.prototype.createHeaderSessionId = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var options = {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    responseType: 'text'
                };
                /** @type {?} */
                var createSessionUrl = this.data.serverHost + '/api/gsp/bcc/v1.0/queryfuncdetail_frm/service/createsession';
                return this.restfulService.post(createSessionUrl, {}, {}, options).toPromise();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormularSelectComponent.prototype.changeValue = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.entityDataService.setStepType($event);
                if ($event !== '0') {
                    this.data.currentFormularId = '';
                    this.currentFormularId = '';
                    this.data.formularData = '';
                    this.entityDataService.setFormularState(false, {});
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormularSelectComponent.prototype.selectChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if ($event) {
                    this.entityDataService.setFormularState(true, { id: this.currentFormularId, name: $event.data.label });
                }
                else {
                    this.entityDataService.setFormularState(false, {});
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormularSelectComponent.prototype.clear = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.entityDataService.setFormularState(false, {});
            };
        FormularSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-formular-select',
                        template: "<div>\r\n  <farris-radiogroup #FarrisRadioGroupComponent [(ngModel)]=\"formularWizard\" [horizontal]=\"true\"\r\n    (changeValue)=\"changeValue($event)\" [data]=\"selectionFormular\">\r\n\r\n  </farris-radiogroup>\r\n</div>\r\n<div *ngIf=\"formularWizard === '0'\">\r\n  <label class=\"col-form-label\" for=\"colFunction\" style=\"width: 6rem; min-width: 6rem;\">\r\n    <span class=\"farris-label-text\">{{lableQdpFormular}}:</span>\r\n  </label>\r\n  <div class=\"farris-input-wrap\">\r\n    <!-- <farris-combo-lookup [(ngModel)]=\"currentFormularId\" [idField]=\"'id'\" [textField]=\"'name'\"\r\n      [displayType]=\"'LOOKUPLIST'\" [multiSelect]=\"false\" [data]=\"ddlFormularData\"></farris-combo-lookup> -->\r\n    <farris-combo-list [(ngModel)]=\"currentFormularId\" (selectChange)=\"selectChange($event)\" (clear)=\"clear($event)\"\r\n      [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"ddlFormularData\"></farris-combo-list>\r\n  </div>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        FormularSelectComponent.ctorParameters = function () {
            return [
                { type: RestfulService },
                { type: cafCommon.CacheService },
                { type: uiMessager.MessagerService },
                { type: EntityDataService },
                { type: localize.LocalizeService }
            ];
        };
        FormularSelectComponent.propDecorators = {
            changeStep: [{ type: core.Output }]
        };
        return FormularSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/formular-define-wizard/formular-define-wizard.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormularDefineWizardComponent = /** @class */ (function () {
        function FormularDefineWizardComponent(cacheService, entityDataService, localizeService) {
            this.cacheService = cacheService;
            this.entityDataService = entityDataService;
            this.localizeService = localizeService;
            this.steps = [
                {
                    stepId: 'selectTemplate',
                    title: this.localizeService.getValue('formular.defineWizard.labelSelectTemplate'),
                    component: FormularSelectComponent,
                    data: '',
                    show: true,
                    nextStep: 'formularDefine',
                    showFinishBtn: true,
                    showCancelBtn: true,
                    showLastStepBtn: false,
                    showNextStepBtn: true
                },
                {
                    stepId: 'formularDefine',
                    title: this.localizeService.getValue('formular.defineWizard.labelFormularDefine'),
                    component: FormularDefineComponent,
                    data: '',
                    show: true,
                    nextStep: '',
                    showFinishBtn: true,
                    showCancelBtn: true,
                    showLastStepBtn: true,
                    showNextStepBtn: false
                }
            ];
        }
        /**
         * @return {?}
         */
        FormularDefineWizardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.cacheService.set('formularParam', { currentSU: this.currentSU, currentFormularId: this.currentFormularId, serverHost: this.serverHost });
            };
        /**
         * @return {?}
         */
        FormularDefineWizardComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.entityDataService.setFormularState(false, {});
                if (this.currentFormularId) {
                    /** @type {?} */
                    var formularEdit = {
                        stepId: 'formularDefine',
                        title: this.localizeService.getValue('formular.defineWizard.labelFormularDefine'),
                        component: FormularDefineComponent,
                        data: '',
                        show: true,
                        nextStep: '',
                        showFinishBtn: true,
                        showCancelBtn: true,
                        showLastStepBtn: true,
                        showNextStepBtn: false
                    };
                    this.qdpsteps.jumpStep(formularEdit);
                }
            };
        /**
         * 点击完成
         */
        /**
         * 点击完成
         * @return {?}
         */
        FormularDefineWizardComponent.prototype.clickFinishBtn = /**
         * 点击完成
         * @return {?}
         */
            function () {
                if (this.parentDialog) {
                    // this.selectFormularInfo = this.cacheService.get('formularResult');
                    this.parentDialog.close();
                }
            };
        FormularDefineWizardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-formular-define-wizard',
                        template: "<lib-step-component #qdpsteps [steps]=\"steps\" (clickFinishBtn)=\"clickFinishBtn()\">\r\n</lib-step-component>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        FormularDefineWizardComponent.ctorParameters = function () {
            return [
                { type: cafCommon.CacheService },
                { type: EntityDataService },
                { type: localize.LocalizeService }
            ];
        };
        FormularDefineWizardComponent.propDecorators = {
            qdpsteps: [{ type: core.ViewChild, args: ['qdpsteps',] }]
        };
        return FormularDefineWizardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/step-component/step-component.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StepComponentComponent = /** @class */ (function () {
        function StepComponentComponent(viewContainerRef, componentFactoryResolver, localizeService) {
            this.viewContainerRef = viewContainerRef;
            this.componentFactoryResolver = componentFactoryResolver;
            this.localizeService = localizeService;
            this.clickCancelBtn = new core.EventEmitter();
            this.clickFinishBtn = new core.EventEmitter();
            this.title = '';
            this.steps = [];
            this._copySteps = [];
            this.curStepIndex = 0;
            this.labelPre = '上一步';
            this.labelNext = '下一步';
            this.labelFinish = '完成';
            this.labelDelete = '删除';
            this.labelPre = this.localizeService.getValue('formular.step.labelPre');
            this.labelNext = this.localizeService.getValue('formular.step.labelNext');
            this.labelFinish = this.localizeService.getValue('formular.step.labelFinish');
            this.labelDelete = this.localizeService.getValue('formular.step.labelDelete');
        }
        /**
         * @return {?}
         */
        StepComponentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.steps && this.steps.length > 0) {
                    this.curStep = this.steps[this.curStepIndex];
                    this.createStepComponent(this.steps[this.curStepIndex]);
                    // this.createStepComponent(this.steps[4]);
                }
                this._copySteps = this.steps;
            };
        /**
         * @param {?} step
         * @return {?}
         */
        StepComponentComponent.prototype.createStepComponent = /**
         * @param {?} step
         * @return {?}
         */
            function (step) {
                var _this = this;
                this.stepContainer.clear();
                /** @type {?} */
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(step.component);
                this.curComponentRef = this.stepContainer.createComponent(componentFactory);
                this.curComponentRef.instance.data = step.data;
                // 新增步骤
                if (this.curComponentRef.instance.addStep) {
                    this.curComponentRef.instance.addStep.subscribe(( /**
                     * @param {?} stepList
                     * @return {?}
                     */function (stepList) {
                        var _a;
                        /** @type {?} */
                        var curIndex = lodashEs.findIndex(_this.steps, _this.curStep);
                        (_a = _this.steps).splice.apply(_a, __spread([curIndex + 1, 0], stepList));
                        _this.curStep.nextStep = stepList[0].stepId;
                        _this.curStep.showFinishBtn = false;
                        _this.curStep.showNextStepBtn = true;
                    }));
                }
                // 删除步骤
                if (this.curComponentRef.instance.removeStep) {
                    this.curComponentRef.instance.removeStep.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        lodashEs.merge(_this.curStep, data.curStep);
                        data.removeSteps.forEach(( /**
                         * @param {?} removeStep
                         * @return {?}
                         */function (removeStep) {
                            /** @type {?} */
                            var index = lodashEs.findIndex(_this.steps, removeStep);
                            if (index >= 0) {
                                _this.steps.splice(index, 1);
                            }
                        }));
                    }));
                }
                // 变更步骤
                if (this.curComponentRef.instance.changeStep) {
                    this.curComponentRef.instance.changeStep.subscribe(( /**
                     * @param {?} stepList
                     * @return {?}
                     */function (stepList) {
                        stepList.forEach(( /**
                         * @param {?} changeStep
                         * @return {?}
                         */function (changeStep) {
                            /** @type {?} */
                            var oldStep = lodashEs.find(_this._copySteps, ( /**
                             * @param {?} s
                             * @return {?}
                             */function (s) { return s.stepId === changeStep.stepId; }));
                            lodashEs.merge(oldStep, changeStep);
                        }));
                        _this.steps = _this._copySteps.filter(( /**
                         * @param {?} step
                         * @return {?}
                         */function (step) { return step.show !== false; }));
                    }));
                }
            };
        /**
         * @param {?} nextStep
         * @return {?}
         */
        StepComponentComponent.prototype.jumpStep = /**
         * @param {?} nextStep
         * @return {?}
         */
            function (nextStep) {
                // 判断跳转方向
                if (nextStep === this.curStep) {
                    return;
                }
                /** @type {?} */
                var nextIndex = lodashEs.findIndex(this.steps, ( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) { return s.stepId === nextStep.stepId; }));
                if (nextIndex === this.curStepIndex) {
                    return;
                }
                if (nextIndex < this.curStepIndex) { // 向前跳
                    this.curStep = nextStep;
                    this.curStepIndex = nextIndex;
                    this.createStepComponent(nextStep);
                    return;
                }
                if (nextStep.stepId === this.curStep.nextStep) { // 下一步
                    this.nextStep();
                    return;
                }
                //  else if (this.finishedSteps.indexOf(nextStep.stepId) > -1) { // 已完成的后续步骤
                //   this.curStep = nextStep;
                //   this.curStepIndex = nextIndex;
                //   this.createStepComponent(nextStep);
                // }
            };
        /**
          * 点击上一步
          */
        /**
         * 点击上一步
         * @return {?}
         */
        StepComponentComponent.prototype.lastStep = /**
         * 点击上一步
         * @return {?}
         */
            function () {
                /** @type {?} */
                var self = this;
                this.curStepIndex = lodashEs.findIndex(this.steps, ( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) { return s.nextStep === self.curStep.stepId; }));
                this.curStep = this.steps[this.curStepIndex];
                // 执行各Component定义的nextStepClick事件
                /** @type {?} */
                var clickLastStep = this.curComponentRef.instance.clickLastStep;
                if (clickLastStep && typeof (clickLastStep) === 'function') {
                    /** @type {?} */
                    var result = clickLastStep();
                    if (typeof (result) === 'boolean' && result) {
                        this.createStepComponent(this.curStep);
                    }
                }
            };
        /**
         * 点击下一步
         */
        /**
         * 点击下一步
         * @return {?}
         */
        StepComponentComponent.prototype.nextStep = /**
         * 点击下一步
         * @return {?}
         */
            function () {
                var _this = this;
                // 校验
                /** @type {?} */
                var validationFunc = this.curComponentRef.instance.validation;
                if (validationFunc && typeof (validationFunc) === 'function') {
                    /** @type {?} */
                    var result = validationFunc();
                    if (!result) {
                        return;
                    }
                }
                // 执行各Component定义的nextStepClick事件
                /** @type {?} */
                var clickNextStep = this.curComponentRef.instance.clickNextStep;
                if (clickNextStep && typeof (clickNextStep) === 'function') {
                    /** @type {?} */
                    var result = clickNextStep();
                    if (typeof (result) === 'boolean' && result) {
                        this.moveToNextStep(result);
                    }
                    else {
                        if (result) {
                            result.subscribe(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                _this.moveToNextStep(data);
                            }));
                        }
                    }
                }
                else {
                    this.moveToNextStep(true);
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        StepComponentComponent.prototype.moveToNextStep = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (!data) {
                    return;
                }
                /** @type {?} */
                var curStep = this.curStep;
                if (curStep.nextStep === '') {
                    return;
                }
                // this.finishedSteps.push(curStep.stepId);
                this.curStepIndex = lodashEs.findIndex(this.steps, ( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) { return s.stepId === curStep.nextStep; }));
                if (this.curStepIndex > -1) {
                    this.curStep = this.steps[this.curStepIndex];
                    this.createStepComponent(this.curStep);
                }
            };
        /**
         * 取消
         */
        /**
         * 取消
         * @return {?}
         */
        StepComponentComponent.prototype.clickCancel = /**
         * 取消
         * @return {?}
         */
            function () {
                this.clickCancelBtn.emit();
            };
        /**
         * 完成
         */
        /**
         * 完成
         * @return {?}
         */
        StepComponentComponent.prototype.finishWizard = /**
         * 完成
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var validationFunc = this.curComponentRef.instance.validation;
                if (validationFunc && typeof (validationFunc) === 'function') {
                    /** @type {?} */
                    var result = validationFunc();
                    if (!result) {
                        return;
                    }
                }
                /** @type {?} */
                var beforeFinish = this.curComponentRef.instance.beforeFinish;
                if (this.curComponentRef.instance.qdpResult && !beforeFinish) {
                    beforeFinish = this.curComponentRef.instance.qdpResult.beforeFinish;
                }
                if (beforeFinish && typeof (beforeFinish) === 'function') {
                    /** @type {?} */
                    var result = beforeFinish();
                    if (typeof (result) === 'boolean' && result) {
                        this.clickFinishBtn.emit();
                    }
                    else if (typeof (result) !== 'boolean') {
                        if (result) {
                            result.subscribe(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                if (data) {
                                    _this.clickFinishBtn.emit(data);
                                }
                            }));
                        }
                    }
                }
            };
        StepComponentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-step-component',
                        template: "<div class=\"stepWizard\">\r\n  <div class=\"createNav d-flex flex-wrap\" *ngIf=\"steps.length>1\">\r\n    <div *ngFor=\"let step of steps;let i = index\" class=\"d-flex step\" [class.active]=\"curStepIndex>=i\">\r\n      <div class=\"d-flex\" *ngIf=\"step.show\" (click)=\"jumpStep(step)\">\r\n        <div class=\"pointer d-flex\">\r\n          <div class=\"stepIndex\"><span>{{i+1}}</span></div>\r\n          <div class=\"stepTitle\">{{step.title}}</div>\r\n        </div>\r\n        <div class=\"triangle_border_right\" *ngIf=\"step.nextStep\">\r\n          <span>\u00B7\u00B7\u00B7\u00B7\u00B7></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <perfect-scrollbar [config]=\"{suppressScrollX: true}\">\r\n      <ng-container #stepContainer></ng-container>\r\n    </perfect-scrollbar>\r\n  </div>\r\n\r\n\r\n\r\n  <div class=\"footBtns\">\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" *ngIf=\"curStep.showLastStepBtn\" (click)=\"lastStep()\"\r\n      type=\"submit\">{{labelPre}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showNextStepBtn\" (click)=\"nextStep()\"\r\n      type=\"submit\">{{labelNext}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showFinishBtn\" (click)=\"finishWizard()\">{{labelFinish}}</button>\r\n  </div>\r\n</div>\r\n",
                        styles: [":host{position:absolute;top:0;bottom:0;left:0;right:0}.stepWizard{height:100%;display:flex;flex-direction:column;background:#f8f8fa}.stepWizard .createNav{background:#fff;box-shadow:0 2px 2px 0 rgba(0,0,0,.04);height:50px;overflow:hidden;padding:0 27px}.stepWizard .createNav div{margin:auto 0}.stepWizard .createNav .pointer{cursor:pointer}.stepWizard .createNav .stepIndex{height:24px;width:24px;background-color:#d9d9d9;color:#fff;border-radius:100%;text-align:center}.stepWizard .createNav .step.active .stepIndex{background-color:#59a1ff}.stepWizard .createNav .stepIndex span{line-height:24px}.stepWizard .createNav .step.active .stepIndex span{background-color:#59a1ff}.stepWizard .createNav .stepTitle{color:#8c8c8c;padding-left:11px;font-size:14px}.stepWizard .createNav .step.active .stepTitle{color:rgba(0,0,0,.85)}.stepWizard .createNav .stepTitle.disable{color:#cdcdcf}.stepWizard .createNav .step .triangle_border_right{position:relative}.stepWizard .createNav .step .triangle_border_right span{padding:0 9px;color:#d9d9d9}.stepWizard .createNav .step.active .triangle_border_right span{color:#59a1ff}.stepWizard .content{flex:1;overflow:auto;font-size:.875rem}.stepWizard .content .ps-content{width:inherit;height:inherit}.stepWizard .footBtns{width:100%;display:flex;align-items:center;justify-content:flex-end;padding:10px 1rem;background:#f4f4f4;border-top:1px solid #ddd}"]
                    }] }
        ];
        /** @nocollapse */
        StepComponentComponent.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef },
                { type: core.ComponentFactoryResolver },
                { type: localize.LocalizeService }
            ];
        };
        StepComponentComponent.propDecorators = {
            clickCancelBtn: [{ type: core.Output }],
            clickFinishBtn: [{ type: core.Output }],
            title: [{ type: core.Input }],
            steps: [{ type: core.Input }],
            stepContainer: [{ type: core.ViewChild, args: ['stepContainer', { read: core.ViewContainerRef },] }]
        };
        return StepComponentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/formular.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormularService = /** @class */ (function () {
        function FormularService(modalService, injector, cfr, msgService, entityDataService, url, localizeService) {
            this.modalService = modalService;
            this.injector = injector;
            this.cfr = cfr;
            this.msgService = msgService;
            this.entityDataService = entityDataService;
            this.url = url;
            this.localizeService = localizeService;
            this.isFinish = true;
        }
        /**
         * @param {?} currentSU
         * @param {?} currentFormularId
         * @param {?=} formularType
         * @return {?}
         */
        FormularService.prototype.showFormularDefine = /**
         * @param {?} currentSU
         * @param {?} currentFormularId
         * @param {?=} formularType
         * @return {?}
         */
            function (currentSU, currentFormularId, formularType) {
                var _this = this;
                /** @type {?} */
                var formularResult = new rxjs.Subject();
                /** @type {?} */
                var cmpF = this.cfr.resolveComponentFactory(FormularDefineWizardComponent);
                /** @type {?} */
                var cmpR = cmpF.create(this.injector);
                cmpR.instance.currentSU = currentSU;
                cmpR.instance.currentFormularId = currentFormularId;
                cmpR.instance.serverHost = this.url ? this.url : 'http://localhost:5100';
                cmpR.instance.formularType = formularType;
                this.dlg = this.modalService.show(cmpR, {
                    title: this.localizeService.getValue('formular.service.labelFormulaWizard'),
                    width: 1000, height: 800,
                    showButtons: false,
                    beforeClose: ( /**
                     * @param {?} ref
                     * @return {?}
                     */function (ref) {
                        /** @type {?} */
                        var formularState = _this.entityDataService.getFormularState();
                        if (formularState.isFinish) {
                            formularResult.next(formularState.formularInfo);
                            return rxjs.of(true);
                        }
                        else {
                            /** @type {?} */
                            var canClose_1 = new rxjs.Subject();
                            _this.msgService.question(_this.localizeService.getValue('formular.service.messageAlert.formulaVerify'), ( /**
                             * @return {?}
                             */function () {
                                formularResult.next({ id: '', name: '' });
                                canClose_1.next(true);
                            }), ( /**
                             * @return {?}
                             */function () {
                                canClose_1.next(false);
                            }));
                            return canClose_1.asObservable();
                        }
                    })
                });
                cmpR.instance.parentDialog = this.dlg;
                return formularResult;
            };
        FormularService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormularService.ctorParameters = function () {
            return [
                { type: uiModal.BsModalService },
                { type: core.Injector },
                { type: core.ComponentFactoryResolver },
                { type: uiMessager.MessagerService },
                { type: EntityDataService },
                { type: undefined, decorators: [{ type: core.Inject, args: [bef.BE_SERVER_URI_TOKEN,] }] },
                { type: localize.LocalizeService }
            ];
        };
        return FormularService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directive/help-before-event.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HelpBeforeEventDirective = /** @class */ (function () {
        function HelpBeforeEventDirective(lookup, restfulService) {
            var _this = this;
            this.lookup = lookup;
            this.restfulService = restfulService;
            this.helpData = {};
            this.localHost = {};
            this.dynamicInput = [];
            this.dictPicking = ( /**
             * @return {?}
             */function () {
                /** @type {?} */
                var options = {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    responseType: 'text'
                };
                /** @type {?} */
                var paramvalues = {};
                _this.dynamicInput.forEach(( /**
                 * @param {?} currentInput
                 * @return {?}
                 */function (currentInput) {
                    paramvalues[currentInput.paramcode] = currentInput.paramvalue;
                }));
                /** @type {?} */
                var params = {
                    helpId: _this.helpData.fieldConfig.helpId,
                    filterInfo: _this.helpData.fieldConfig.filterInfo,
                    parameters: JSON.stringify(paramvalues)
                };
                /** @type {?} */
                var getHelpDataUrl = _this.localHost + '/api/runtime/bcc/v1.0/qdpsearch/getHelpData';
                /** @type {?} */
                var r$ = rxjs.of({
                    showDialog: true
                });
                return _this.restfulService.post(getHelpDataUrl, params, {}, options).pipe(operators.tap(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.lookup.items = JSON.parse(data);
                })), operators.switchMap(( /**
                 * @return {?}
                 */function () { return r$; })));
            });
        }
        /**
         * @return {?}
         */
        HelpBeforeEventDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                console.log(this.helpData, this.lookup);
                this.lookup.dictPicking = this.dictPicking;
                this.lookup.dictPicked = ( /**
                 * @param {?} rowData
                 * @return {?}
                 */function (rowData) {
                    _this.helpData.paramvalue = rowData[_this.helpData.fieldConfig.valueField] + '|' + rowData[_this.helpData.fieldConfig.textField];
                    /** @type {?} */
                    var r$ = rxjs.of({
                        closeDialog: true
                    });
                    return r$;
                });
            };
        HelpBeforeEventDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[libHelpBeforeEvent]'
                    },] }
        ];
        /** @nocollapse */
        HelpBeforeEventDirective.ctorParameters = function () {
            return [
                { type: uiLookup.LookupGridComponent },
                { type: RestfulService }
            ];
        };
        HelpBeforeEventDirective.propDecorators = {
            helpData: [{ type: core.Input, args: ["libHelpBeforeEvent",] }],
            localHost: [{ type: core.Input }],
            dynamicInput: [{ type: core.Input }]
        };
        return HelpBeforeEventDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/formular.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormularModule = /** @class */ (function () {
        function FormularModule() {
        }
        /**
         * @return {?}
         */
        FormularModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: FormularModule,
                    providers: [RestfulService, EntityDataService, FormularService]
                };
            };
        FormularModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            kendoAngularGrid.GridModule,
                            kendoAngularPopup.PopupModule,
                            kendoAngularInputs.NumericTextBoxModule,
                            kendoAngularInputs.InputsModule,
                            kendoAngularDropdowns.DropDownsModule,
                            kendoAngularDropdowns.DropDownListModule,
                            kendoAngularLayout.LayoutModule,
                            kendoAngularButtons.ButtonsModule,
                            kendoAngularTreeview.TreeViewModule,
                            uiDialog.FarrisDialogModule,
                            uiNotify.NotifyModule,
                            uiDropdown.FDropdownDirectiveTypeModule,
                            uiFlexLayout.FlexLayoutModule,
                            uiTreetable.TreeTableModule,
                            uiPerfectScrollbar.PerfectScrollbarModule,
                            rtfUi.RtfAppHelpModule,
                            ngxColorPicker.ColorPickerModule,
                            uiDatagrid.DatagridModule.forRoot(),
                            uiComboList.ComboListModule,
                            uiButton.FarrisButtonModule,
                            uiPanel.FarrisPanelModule,
                            uiForms.FarrisFormsModule,
                            uiLoading.LoadingModule.forRoot(),
                            localize.LocalizeModule,
                            uiLookup.LookupModule,
                            uiDatepicker.FarrisDatePickerModule,
                            uiNumberSpinner.NumberSpinnerModule
                        ],
                        declarations: [
                            FormularDefineComponent,
                            FormularSelectComponent,
                            FormularDefineWizardComponent,
                            StepComponentComponent,
                            HelpBeforeEventDirective
                        ],
                        exports: [
                            FormularDefineComponent,
                            FormularSelectComponent,
                            FormularDefineWizardComponent,
                            StepComponentComponent
                        ],
                        entryComponents: [
                            FormularDefineComponent,
                            FormularSelectComponent,
                            FormularDefineWizardComponent,
                            StepComponentComponent
                        ]
                    },] }
        ];
        return FormularModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: qdp-formular.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormularModule = FormularModule;
    exports.FormularDefineComponent = FormularDefineComponent;
    exports.FormularDefineWizardComponent = FormularDefineWizardComponent;
    exports.FormularSelectComponent = FormularSelectComponent;
    exports.StepComponentComponent = StepComponentComponent;
    exports.RestfulService = RestfulService;
    exports.FormularService = FormularService;
    exports.ɵb = HelpBeforeEventDirective;
    exports.ɵa = EntityDataService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=qdp-formular.umd.js.map