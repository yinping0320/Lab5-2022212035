/**
 * @fileoverview added by tsickle
 * Generated from: lib/directive/help-before-event.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { LookupGridComponent } from '@farris/ui-lookup';
import { RestfulService } from '../service/restful.service';
import { of } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
export class HelpBeforeEventDirective {
    /**
     * @param {?} lookup
     * @param {?} restfulService
     */
    constructor(lookup, restfulService) {
        this.lookup = lookup;
        this.restfulService = restfulService;
        this.helpData = {};
        this.localHost = {};
        this.dynamicInput = [];
        this.dictPicking = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const options = {
                headers: {
                    'Content-Type': 'application/json'
                },
                responseType: 'text'
            };
            /** @type {?} */
            const paramvalues = {};
            this.dynamicInput.forEach((/**
             * @param {?} currentInput
             * @return {?}
             */
            currentInput => {
                paramvalues[currentInput.paramcode] = currentInput.paramvalue;
            }));
            /** @type {?} */
            const params = {
                helpId: this.helpData.fieldConfig.helpId,
                filterInfo: this.helpData.fieldConfig.filterInfo,
                parameters: JSON.stringify(paramvalues)
            };
            /** @type {?} */
            const getHelpDataUrl = this.localHost + '/api/runtime/bcc/v1.0/qdpsearch/getHelpData';
            /** @type {?} */
            const r$ = of({
                showDialog: true
            });
            return this.restfulService.post(getHelpDataUrl, params, {}, options).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this.lookup.items = JSON.parse(data);
            })), switchMap((/**
             * @return {?}
             */
            () => r$)));
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log(this.helpData, this.lookup);
        this.lookup.dictPicking = this.dictPicking;
        this.lookup.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.helpData.paramvalue = rowData[this.helpData.fieldConfig.valueField] + '|' + rowData[this.helpData.fieldConfig.textField];
            /** @type {?} */
            const r$ = of({
                closeDialog: true
            });
            return r$;
        });
    }
}
HelpBeforeEventDirective.decorators = [
    { type: Directive, args: [{
                selector: '[libHelpBeforeEvent]'
            },] }
];
/** @nocollapse */
HelpBeforeEventDirective.ctorParameters = () => [
    { type: LookupGridComponent },
    { type: RestfulService }
];
HelpBeforeEventDirective.propDecorators = {
    helpData: [{ type: Input, args: ["libHelpBeforeEvent",] }],
    localHost: [{ type: Input }],
    dynamicInput: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HelpBeforeEventDirective.prototype.helpData;
    /** @type {?} */
    HelpBeforeEventDirective.prototype.localHost;
    /** @type {?} */
    HelpBeforeEventDirective.prototype.dynamicInput;
    /** @type {?} */
    HelpBeforeEventDirective.prototype.dictPicking;
    /**
     * @type {?}
     * @private
     */
    HelpBeforeEventDirective.prototype.lookup;
    /**
     * @type {?}
     * @private
     */
    HelpBeforeEventDirective.prototype.restfulService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC1iZWZvcmUtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9mb3JtdWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmUvaGVscC1iZWZvcmUtZXZlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFtQixtQkFBbUIsRUFBK0IsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLEVBQUUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS2hELE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBS25DLFlBQW9CLE1BQTJCLEVBQ3JDLGNBQThCO1FBRHBCLFdBQU0sR0FBTixNQUFNLENBQXFCO1FBQ3JDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUpYLGFBQVEsR0FBUSxFQUFFLENBQUM7UUFDdkMsY0FBUyxHQUFRLEVBQUUsQ0FBQztRQUNwQixpQkFBWSxHQUFRLEVBQUUsQ0FBQztRQWlCaEMsZ0JBQVc7OztRQUFHLEdBQThCLEVBQUU7O2tCQUN0QyxPQUFPLEdBQVE7Z0JBQ25CLE9BQU8sRUFBRTtvQkFDUCxjQUFjLEVBQUUsa0JBQWtCO2lCQUNuQztnQkFDRCxZQUFZLEVBQUUsTUFBTTthQUNyQjs7a0JBQ0ssV0FBVyxHQUFHLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPOzs7O1lBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ3ZDLFdBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUNoRSxDQUFDLEVBQUMsQ0FBQzs7a0JBQ0csTUFBTSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUN4QyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsVUFBVTtnQkFDaEQsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO2FBQ3hDOztrQkFDSyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyw2Q0FBNkM7O2tCQUUvRSxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNaLFVBQVUsRUFBRSxJQUFJO2FBQ2pCLENBQUM7WUFHRixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdkUsR0FBRzs7OztZQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxDQUFDLEVBQUMsRUFDRixTQUFTOzs7WUFBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FDcEIsQ0FBQztRQUNKLENBQUMsRUFBQTtJQTVDMkMsQ0FBQzs7OztJQUU3QyxRQUFRO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVTs7OztRQUFHLENBQUMsT0FBWSxFQUE0QixFQUFFO1lBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztrQkFDeEgsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDWixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDO1lBQ0YsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDLENBQUEsQ0FBQztJQUVKLENBQUM7OztZQXRCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjthQUNqQzs7OztZQVB5QixtQkFBbUI7WUFDcEMsY0FBYzs7O3VCQVNwQixLQUFLLFNBQUMsb0JBQW9CO3dCQUMxQixLQUFLOzJCQUNMLEtBQUs7Ozs7SUFGTiw0Q0FBZ0Q7O0lBQ2hELDZDQUE2Qjs7SUFDN0IsZ0RBQWdDOztJQWlCaEMsK0NBNkJDOzs7OztJQTdDVywwQ0FBbUM7Ozs7O0lBQzdDLGtEQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb29rdXBDb21wb25lbnQsIExvb2t1cEdyaWRDb21wb25lbnQsIFBpY2tpbmdSZXN1bHQsIFBpY2tlZFJlc3VsdCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgUmVzdGZ1bFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3Jlc3RmdWwuc2VydmljZSc7XHJcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbGliSGVscEJlZm9yZUV2ZW50XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhlbHBCZWZvcmVFdmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dChcImxpYkhlbHBCZWZvcmVFdmVudFwiKSBoZWxwRGF0YTogYW55ID0ge307XHJcbiAgQElucHV0KCkgbG9jYWxIb3N0OiBhbnkgPSB7fTtcclxuICBASW5wdXQoKSBkeW5hbWljSW5wdXQ6IGFueSA9IFtdO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9va3VwOiBMb29rdXBHcmlkQ29tcG9uZW50LFxyXG4gICAgcHJpdmF0ZSByZXN0ZnVsU2VydmljZTogUmVzdGZ1bFNlcnZpY2UpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMuaGVscERhdGEsIHRoaXMubG9va3VwKTtcclxuICAgIHRoaXMubG9va3VwLmRpY3RQaWNraW5nID0gdGhpcy5kaWN0UGlja2luZztcclxuICAgIHRoaXMubG9va3VwLmRpY3RQaWNrZWQgPSAocm93RGF0YTogYW55KTogT2JzZXJ2YWJsZTxQaWNrZWRSZXN1bHQ+ID0+IHtcclxuICAgICAgdGhpcy5oZWxwRGF0YS5wYXJhbXZhbHVlID0gcm93RGF0YVt0aGlzLmhlbHBEYXRhLmZpZWxkQ29uZmlnLnZhbHVlRmllbGRdICsgJ3wnICsgcm93RGF0YVt0aGlzLmhlbHBEYXRhLmZpZWxkQ29uZmlnLnRleHRGaWVsZF07XHJcbiAgICAgIGNvbnN0IHIkID0gb2Yoe1xyXG4gICAgICAgIGNsb3NlRGlhbG9nOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gciQ7XHJcbiAgICB9O1xyXG5cclxuICB9XHJcblxyXG4gIGRpY3RQaWNraW5nID0gKCk6IE9ic2VydmFibGU8UGlja2luZ1Jlc3VsdD4gPT4ge1xyXG4gICAgY29uc3Qgb3B0aW9uczogYW55ID0ge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9LFxyXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0J1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhcmFtdmFsdWVzID0ge307XHJcbiAgICB0aGlzLmR5bmFtaWNJbnB1dC5mb3JFYWNoKGN1cnJlbnRJbnB1dCA9PiB7XHJcbiAgICAgIHBhcmFtdmFsdWVzW2N1cnJlbnRJbnB1dC5wYXJhbWNvZGVdID0gY3VycmVudElucHV0LnBhcmFtdmFsdWU7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgaGVscElkOiB0aGlzLmhlbHBEYXRhLmZpZWxkQ29uZmlnLmhlbHBJZCxcclxuICAgICAgZmlsdGVySW5mbzogdGhpcy5oZWxwRGF0YS5maWVsZENvbmZpZy5maWx0ZXJJbmZvLFxyXG4gICAgICBwYXJhbWV0ZXJzOiBKU09OLnN0cmluZ2lmeShwYXJhbXZhbHVlcylcclxuICAgIH1cclxuICAgIGNvbnN0IGdldEhlbHBEYXRhVXJsID0gdGhpcy5sb2NhbEhvc3QgKyAnL2FwaS9ydW50aW1lL2JjYy92MS4wL3FkcHNlYXJjaC9nZXRIZWxwRGF0YSc7XHJcblxyXG4gICAgY29uc3QgciQgPSBvZih7XHJcbiAgICAgIHNob3dEaWFsb2c6IHRydWVcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZXN0ZnVsU2VydmljZS5wb3N0KGdldEhlbHBEYXRhVXJsLCBwYXJhbXMsIHt9LCBvcHRpb25zKS5waXBlKFxyXG4gICAgICB0YXAoKGRhdGEpID0+IHtcclxuICAgICAgICB0aGlzLmxvb2t1cC5pdGVtcyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gciQpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=