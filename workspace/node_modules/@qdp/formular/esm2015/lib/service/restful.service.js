/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/restful.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
export class RestfulService {
    /**
     * 构造函数
     * @param {?} httpClient http客户端
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * 发送GET请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    get(uri, params, options) {
        return this.request(uri, 'GET', params, options);
    }
    /**
     * 发送POST请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    put(uri, body, params, options) {
        /** @type {?} */
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'PUT', params, optionsWithBody);
    }
    /**
     * 发送PUT请求
     * @param {?} uri 请求地址
     * @param {?} body
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    post(uri, body, params, options) {
        /** @type {?} */
        const optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'POST', params, optionsWithBody);
    }
    /**
     * 发送DELETE请求
     * @param {?} uri 请求地址
     * @param {?=} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    delete(uri, params, options) {
        return this.request(uri, 'DELETE', params, options);
    }
    /**
     * 发送请求
     * @private
     * @param {?} uri 请求地址
     * @param {?} method
     * @param {?} params 请求参数
     * @param {?=} options
     * @return {?}
     */
    request(uri, method, params, options = {}) {
        options = options || {};
        if (params) {
            /** @type {?} */
            const httpParams = this.buildParams(params);
            options.params = httpParams;
        }
        /** @type {?} */
        const methodName = (/** @type {?} */ (method));
        /** @type {?} */
        const result = this.httpClient.request(methodName, uri, options);
        // if (result && result.returnValue) {result = result.returnValue};
        return result;
    }
    /**
     * 构造Http请求参数
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        /** @type {?} */
        const parameters = {};
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key]) {
                /** @type {?} */
                const value = params[key].toString();
                parameters[key] = value;
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} options
     * @param {?} body
     * @return {?}
     */
    addBody(options, body) {
        options = options || {};
        /** @type {?} */
        const mergedOptions = Object.assign(options, { body });
        return mergedOptions;
    }
}
RestfulService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RestfulService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RestfulService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdGZ1bC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHFkcC9mb3JtdWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3Jlc3RmdWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBTTlELE1BQU0sT0FBTyxjQUFjOzs7OztJQUt6QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQUksQ0FBQzs7Ozs7Ozs7SUFNL0MsR0FBRyxDQUFDLEdBQVcsRUFBRSxNQUFlLEVBQUUsT0FBYTtRQUM1QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Ozs7Ozs7O0lBT0QsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsTUFBZSxFQUFFLE9BQWE7O2NBQ2xELGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7OztJQU9ELElBQUksQ0FBQyxHQUFXLEVBQUUsSUFBUyxFQUFFLE1BQWUsRUFBRSxPQUFhOztjQUNqRCxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7OztJQU9ELE1BQU0sQ0FBQyxHQUFXLEVBQUUsTUFBZSxFQUFFLE9BQWE7UUFDaEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7Ozs7Ozs7SUFPTyxPQUFPLENBQUMsR0FBVyxFQUFFLE1BQVcsRUFBRSxNQUFjLEVBQUUsVUFBZSxFQUFFO1FBQ3pFLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ3hCLElBQUksTUFBTSxFQUFFOztrQkFDSixVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDM0MsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7U0FDN0I7O2NBQ0ssVUFBVSxHQUFHLG1CQUFBLE1BQU0sRUFBVTs7Y0FDN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDO1FBQ2hFLG1FQUFtRTtRQUNuRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7Ozs7O0lBTU8sV0FBVyxDQUFDLE1BQWM7O2NBQzFCLFVBQVUsR0FBUSxFQUFFO1FBQzFCLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1lBQ3hCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7O3NCQUN2QyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRTtnQkFDcEMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUN6QjtTQUNGO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7Ozs7OztJQUVPLE9BQU8sQ0FBQyxPQUFZLEVBQUUsSUFBUztRQUNyQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQzs7Y0FDbEIsYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdEQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQzs7O1lBakZGLFVBQVU7Ozs7WUFMRixVQUFVOzs7Ozs7O0lBV0wsb0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgdHlwZSBSZXN0ZnVsTWV0aG9kID0gJ0dFVCcgfCAnUFVUJyB8ICdQT1NUJyB8ICdERUxFVEUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmVzdGZ1bFNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSBodHRwQ2xpZW50IGh0dHDlrqLmiLfnq69cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHsgfVxyXG4gIC8qKlxyXG4gICAqIOWPkemAgUdFVOivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBnZXQodXJpOiBzdHJpbmcsIHBhcmFtcz86IG9iamVjdCwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55W10+IHtcclxuICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVyaSwgJ0dFVCcsIHBhcmFtcywgb3B0aW9ucyk7IFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBUE9TVOivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBwdXQodXJpOiBzdHJpbmcsIGJvZHk6IGFueSwgcGFyYW1zPzogb2JqZWN0LCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IG9wdGlvbnNXaXRoQm9keSA9IHRoaXMuYWRkQm9keShvcHRpb25zLCBib2R5KTtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJpLCAnUFVUJywgcGFyYW1zLCBvcHRpb25zV2l0aEJvZHkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBUFVU6K+35rGCXHJcbiAgICogQHBhcmFtIHVyaSDor7fmsYLlnLDlnYBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIHBvc3QodXJpOiBzdHJpbmcsIGJvZHk6IGFueSwgcGFyYW1zPzogb2JqZWN0LCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgY29uc3Qgb3B0aW9uc1dpdGhCb2R5ID0gdGhpcy5hZGRCb2R5KG9wdGlvbnMsIGJvZHkpO1xyXG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVyaSwgJ1BPU1QnLCBwYXJhbXMsIG9wdGlvbnNXaXRoQm9keSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIFERUxFVEXor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgZGVsZXRlKHVyaTogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmksICdERUxFVEUnLCBwYXJhbXMsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCB6K+35rGCXHJcbiAgICogQHBhcmFtIHVyaSDor7fmsYLlnLDlnYBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVxdWVzdCh1cmk6IHN0cmluZywgbWV0aG9kOiBhbnksIHBhcmFtczogb2JqZWN0LCBvcHRpb25zOiBhbnkgPSB7fSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgY29uc3QgaHR0cFBhcmFtcyA9IHRoaXMuYnVpbGRQYXJhbXMocGFyYW1zKTtcclxuICAgICAgb3B0aW9ucy5wYXJhbXMgPSBodHRwUGFyYW1zO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZCBhcyBzdHJpbmc7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdChtZXRob2ROYW1lLCB1cmksIG9wdGlvbnMpO1xyXG4gICAgLy8gaWYgKHJlc3VsdCAmJiByZXN1bHQucmV0dXJuVmFsdWUpIHtyZXN1bHQgPSByZXN1bHQucmV0dXJuVmFsdWV9O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoEh0dHDor7fmsYLlj4LmlbBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRQYXJhbXMocGFyYW1zOiBvYmplY3QpOiBIdHRwUGFyYW1zIHtcclxuICAgIGNvbnN0IHBhcmFtZXRlcnM6IGFueSA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XHJcbiAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwYXJhbXNba2V5XSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV0udG9TdHJpbmcoKTtcclxuICAgICAgICBwYXJhbWV0ZXJzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcmFtZXRlcnM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZEJvZHkob3B0aW9uczogYW55LCBib2R5OiBhbnkpIHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ob3B0aW9ucywgeyBib2R5IH0pO1xyXG4gICAgcmV0dXJuIG1lcmdlZE9wdGlvbnM7XHJcbiAgfVxyXG59XHJcbiJdfQ==