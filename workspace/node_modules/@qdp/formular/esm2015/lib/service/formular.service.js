/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/formular.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, Inject } from '@angular/core';
import { Subject, of } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { FormularDefineWizardComponent } from '../component/formular-define-wizard/formular-define-wizard.component';
import { EntityDataService } from './entitydata.service';
import { BE_SERVER_URI_TOKEN } from '@farris/bef';
import { LocalizeService } from '@qdp/localize';
export class FormularService {
    /**
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} msgService
     * @param {?} entityDataService
     * @param {?} url
     * @param {?} localizeService
     */
    constructor(modalService, injector, cfr, msgService, entityDataService, url, localizeService) {
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.msgService = msgService;
        this.entityDataService = entityDataService;
        this.url = url;
        this.localizeService = localizeService;
        this.isFinish = true;
    }
    /**
     * @param {?} currentSU
     * @param {?} currentFormularId
     * @param {?=} formularType
     * @return {?}
     */
    showFormularDefine(currentSU, currentFormularId, formularType) {
        /** @type {?} */
        const formularResult = new Subject();
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(FormularDefineWizardComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.injector);
        cmpR.instance.currentSU = currentSU;
        cmpR.instance.currentFormularId = currentFormularId;
        cmpR.instance.serverHost = this.url ? this.url : 'http://localhost:5100';
        cmpR.instance.formularType = formularType;
        this.dlg = this.modalService.show(cmpR, {
            title: this.localizeService.getValue('formular.service.labelFormulaWizard'),
            width: 1000, height: 800,
            showButtons: false,
            beforeClose: (/**
             * @param {?} ref
             * @return {?}
             */
            (ref) => {
                /** @type {?} */
                const formularState = this.entityDataService.getFormularState();
                if (formularState.isFinish) {
                    formularResult.next(formularState.formularInfo);
                    return of(true);
                }
                else {
                    /** @type {?} */
                    const canClose = new Subject();
                    this.msgService.question(this.localizeService.getValue('formular.service.messageAlert.formulaVerify'), (/**
                     * @return {?}
                     */
                    () => {
                        formularResult.next({ id: '', name: '' });
                        canClose.next(true);
                    }), (/**
                     * @return {?}
                     */
                    () => {
                        canClose.next(false);
                    }));
                    return canClose.asObservable();
                }
            })
        });
        cmpR.instance.parentDialog = this.dlg;
        return formularResult;
    }
}
FormularService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormularService.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: MessagerService },
    { type: EntityDataService },
    { type: undefined, decorators: [{ type: Inject, args: [BE_SERVER_URI_TOKEN,] }] },
    { type: LocalizeService }
];
if (false) {
    /** @type {?} */
    FormularService.prototype.dlg;
    /** @type {?} */
    FormularService.prototype.isFinish;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.entityDataService;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.url;
    /**
     * @type {?}
     * @private
     */
    FormularService.prototype.localizeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXVsYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BxZHAvZm9ybXVsYXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9mb3JtdWxhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxPQUFPLEVBQXdCLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBYyxNQUFNLGtCQUFrQixDQUFDO0FBQzlELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHNFQUFzRSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2hELE1BQU0sT0FBTyxlQUFlOzs7Ozs7Ozs7O0lBSzFCLFlBQW9CLFlBQTRCLEVBQzVCLFFBQWtCLEVBQ2xCLEdBQTZCLEVBQzdCLFVBQTJCLEVBQzNCLGlCQUFvQyxFQUNQLEdBQUcsRUFDaEMsZUFBZ0M7UUFOaEMsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQzVCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNQLFFBQUcsR0FBSCxHQUFHLENBQUE7UUFDaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBUnBELGFBQVEsR0FBUSxJQUFJLENBQUM7SUFTckIsQ0FBQzs7Ozs7OztJQUVELGtCQUFrQixDQUFDLFNBQWlCLEVBQUUsaUJBQXNCLEVBQUUsWUFBdUI7O2NBQzdFLGNBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRTs7Y0FDOUIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsNkJBQTZCLENBQUM7O2NBQ3RFLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUM7UUFDekUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRTFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3RDLEtBQUssRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxxQ0FBcUMsQ0FBQztZQUMzRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHO1lBQ3hCLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFdBQVc7Ozs7WUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFOztzQkFDYixhQUFhLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFO2dCQUMvRCxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUU7b0JBQzFCLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNoRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDakI7cUJBQU07OzBCQUNDLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBVztvQkFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsNkNBQTZDLENBQUM7OztvQkFBRSxHQUFHLEVBQUU7d0JBQzFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO3dCQUMxQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN0QixDQUFDOzs7b0JBQUUsR0FBRyxFQUFFO3dCQUNOLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3ZCLENBQUMsRUFDQSxDQUFDO29CQUNGLE9BQU8sUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO2lCQUNoQztZQUNILENBQUMsQ0FBQTtTQUNGLENBQ0EsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFFdEMsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7O1lBbERGLFVBQVU7Ozs7WUFORixjQUFjO1lBSndCLFFBQVE7WUFBbEMsd0JBQXdCO1lBR3BDLGVBQWU7WUFHZixpQkFBaUI7NENBZVgsTUFBTSxTQUFDLG1CQUFtQjtZQWJoQyxlQUFlOzs7O0lBS3RCLDhCQUFnQjs7SUFDaEIsbUNBQXFCOzs7OztJQUVULHVDQUFvQzs7Ozs7SUFDcEMsbUNBQTBCOzs7OztJQUMxQiw4QkFBcUM7Ozs7O0lBQ3JDLHFDQUFtQzs7Ozs7SUFDbkMsNENBQTRDOzs7OztJQUM1Qyw4QkFBd0M7Ozs7O0lBQ3hDLDBDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZlciwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRm9ybXVsYXJEZWZpbmVDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQvZm9ybXVsYXItZGVmaW5lL2Zvcm11bGFyLWRlZmluZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UsIEJzTW9kYWxSZWYgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgRm9ybXVsYXJEZWZpbmVXaXphcmRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQvZm9ybXVsYXItZGVmaW5lLXdpemFyZC9mb3JtdWxhci1kZWZpbmUtd2l6YXJkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEVudGl0eURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9lbnRpdHlkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCRV9TRVJWRVJfVVJJX1RPS0VOIH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5pbXBvcnQgeyBMb2NhbGl6ZVNlcnZpY2UgfSBmcm9tICdAcWRwL2xvY2FsaXplJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcm11bGFyU2VydmljZSB7XHJcblxyXG4gIGRsZzogQnNNb2RhbFJlZjtcclxuICBpc0ZpbmlzaDogYW55ID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBlbnRpdHlEYXRhU2VydmljZTogRW50aXR5RGF0YVNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgQEluamVjdChCRV9TRVJWRVJfVVJJX1RPS0VOKSBwcml2YXRlIHVybCxcclxuICAgICAgICAgICAgICBwcml2YXRlIGxvY2FsaXplU2VydmljZTogTG9jYWxpemVTZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICBzaG93Rm9ybXVsYXJEZWZpbmUoY3VycmVudFNVOiBzdHJpbmcsIGN1cnJlbnRGb3JtdWxhcklkOiBhbnksIGZvcm11bGFyVHlwZT86ICdwdWJsaWMnKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGZvcm11bGFyUmVzdWx0ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIGNvbnN0IGNtcEYgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShGb3JtdWxhckRlZmluZVdpemFyZENvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjbXBSID0gY21wRi5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICBjbXBSLmluc3RhbmNlLmN1cnJlbnRTVSA9IGN1cnJlbnRTVTtcclxuICAgIGNtcFIuaW5zdGFuY2UuY3VycmVudEZvcm11bGFySWQgPSBjdXJyZW50Rm9ybXVsYXJJZDtcclxuICAgIGNtcFIuaW5zdGFuY2Uuc2VydmVySG9zdCA9IHRoaXMudXJsID8gdGhpcy51cmwgOiAnaHR0cDovL2xvY2FsaG9zdDo1MTAwJztcclxuICAgIGNtcFIuaW5zdGFuY2UuZm9ybXVsYXJUeXBlID0gZm9ybXVsYXJUeXBlO1xyXG5cclxuICAgIHRoaXMuZGxnID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSLCB7XHJcbiAgICAgIHRpdGxlOiB0aGlzLmxvY2FsaXplU2VydmljZS5nZXRWYWx1ZSgnZm9ybXVsYXIuc2VydmljZS5sYWJlbEZvcm11bGFXaXphcmQnKSxcclxuICAgICAgd2lkdGg6IDEwMDAsIGhlaWdodDogODAwLFxyXG4gICAgICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgICAgIGJlZm9yZUNsb3NlOiAocmVmKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZm9ybXVsYXJTdGF0ZSA9IHRoaXMuZW50aXR5RGF0YVNlcnZpY2UuZ2V0Rm9ybXVsYXJTdGF0ZSgpO1xyXG4gICAgICAgIGlmIChmb3JtdWxhclN0YXRlLmlzRmluaXNoKSB7XHJcbiAgICAgICAgICBmb3JtdWxhclJlc3VsdC5uZXh0KGZvcm11bGFyU3RhdGUuZm9ybXVsYXJJbmZvKTtcclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgY2FuQ2xvc2UgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xyXG4gICAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLnF1ZXN0aW9uKHRoaXMubG9jYWxpemVTZXJ2aWNlLmdldFZhbHVlKCdmb3JtdWxhci5zZXJ2aWNlLm1lc3NhZ2VBbGVydC5mb3JtdWxhVmVyaWZ5JyksICgpID0+IHtcclxuICAgICAgICAgICAgZm9ybXVsYXJSZXN1bHQubmV4dCh7IGlkOiAnJywgbmFtZTogJycgfSk7XHJcbiAgICAgICAgICAgIGNhbkNsb3NlLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbkNsb3NlLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybiBjYW5DbG9zZS5hc09ic2VydmFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICk7XHJcbiAgICBjbXBSLmluc3RhbmNlLnBhcmVudERpYWxvZyA9IHRoaXMuZGxnO1xyXG5cclxuICAgIHJldHVybiBmb3JtdWxhclJlc3VsdDtcclxuICB9XHJcbn1cclxuIl19