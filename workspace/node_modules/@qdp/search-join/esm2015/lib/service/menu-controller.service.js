/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, RendererFactory2 } from '@angular/core';
import { CacheService } from '@ecp-caf/caf-common';
import { SearchListService } from './search-list.service';
import { map } from 'rxjs/operators';
import { Subject, of } from 'rxjs';
import { LoadingService } from '@farris/ui-loading';
import { RtfServices } from '@qdp/common';
export class MenuControllerService {
    /**
     * @param {?} rendererFactory
     * @param {?} cacheService
     * @param {?} searchListService
     * @param {?} cache
     * @param {?} loadingService
     */
    constructor(rendererFactory, cacheService, searchListService, cache, loadingService) {
        this.rendererFactory = rendererFactory;
        this.cacheService = cacheService;
        this.searchListService = searchListService;
        this.cache = cache;
        this.loadingService = loadingService;
        this.jointsearchInfoChange = new Subject();
        this.render = rendererFactory.createRenderer(null, null);
    }
    /**
     * @param {?} $event
     * @param {?} elementRef
     * @param {?} qdpView
     * @param {?} qdpViewElementRef
     * @return {?}
     */
    handleContextmenu($event, elementRef, qdpView, qdpViewElementRef) {
        this.qdpView = qdpView;
        // const loading = this.loadingService.show({ container: qdpViewElementRef });
        /** @type {?} */
        const joinParam = this.cache.get(RtfServices.getTabId(this._queryId) + 'joinSearch');
        if (!this.checkDataArea(qdpView, qdpViewElementRef, joinParam, $event) || !this._searchList) {
            return false;
        }
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let top = 0;
        if (joinParam && joinParam.controlType !== 'charts') {
            left = $event.clientX;
            top = $event.clientY;
        }
        else {
            left = $event.event.event.clientX;
            top = $event.event.event.clientY;
        }
        this.render.setStyle(elementRef.nativeElement, 'left', left + 'px');
        this.render.setStyle(elementRef.nativeElement, 'top', top + 'px');
        this.render.setStyle(elementRef.nativeElement, 'display', 'block');
        this.cacheService.set(this._queryId + 'currentSelectItem', this.currentSelectItem); // 将当前参数设置到缓存中
        // 将当前参数设置到缓存中
        // 联查可见表达式
        /** @type {?} */
        const searchList = this.cacheService.get(this._queryId + 'beforeJointSearchMenuShow');
        /** @type {?} */
        const formulas = {};
        /** @type {?} */
        let containVisibleFormula = false;
        for (const search of searchList) {
            formulas[search.id] = search.visibleformula;
            if (containVisibleFormula === false && search.visibleformula != void 0 && search.visibleformula !== '') {
                containVisibleFormula = true;
            }
        }
        if (containVisibleFormula === true) {
            /** @type {?} */
            const param = { qoManagerCode: qdpView.qoManagerCode, visibleFormulas: formulas, userId: '', queryId: this._queryId, rowData: this.currentSelectItem };
            this.searchListService.getVisibleJoint(param, qdpView.queryRelativeUrl, searchList).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value) {
                    this.jointsearchInfoChange.next(value);
                }
            }));
        }
        else {
            this.jointsearchInfoChange.next(searchList);
        }
        return false;
    }
    /**
     * 单击之后隐藏菜单
     * @param {?} elementRef 菜单组件
     * @return {?}
     */
    handleClick(elementRef) {
        if (elementRef) {
            this.render.setStyle(elementRef.nativeElement, 'display', 'none');
        }
    }
    /**
     * get searchList
     * @param {?} formId
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSearchList(formId, queryId, queryRelativeUrl) {
        this._queryId = queryId;
        if (this._searchList && this._searchList.queryId === this._queryId) {
            return of(this._searchList);
        }
        /** @type {?} */
        const result = this.searchListService.getSearchList(formId, queryId, queryRelativeUrl);
        return result.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this._searchList = value; // ? JSON.parse(value.joinSearch) : [];
            return this._searchList;
        })));
    }
    /**
     * 返回当前右键坐标，是否为数据区域
     * @private
     * @param {?} qdpView qdp-view 组件
     * @param {?} qdpViewElementRef qdp-view ElementRef
     * @param {?} joinParam
     * @param {?} $event 触发事件，主要用来传递坐标
     * @return {?}
     */
    checkDataArea(qdpView, qdpViewElementRef, joinParam, $event) {
        /** @type {?} */
        let x = 0;
        /** @type {?} */
        let y = 0;
        /** @type {?} */
        let qdpviewNative = qdpViewElementRef.nativeElement;
        while (qdpviewNative) {
            x += qdpviewNative.offsetLeft;
            y += qdpviewNative.offsetTop;
            qdpviewNative = qdpviewNative.offsetParent;
        }
        if (joinParam.controlType !== 'charts') {
            /** @type {?} */
            const activeSheet = qdpView.spread.getActiveSheet();
            /** @type {?} */
            const target = activeSheet.hitTest($event.clientX - x, $event.clientY - y);
            if (target.hitTestType !== GC.Spread.Sheets.SheetArea.viewport || target.col === undefined || target.row === undefined) {
                return false;
            }
            activeSheet.setActiveCell(target.row, target.col);
            // 将当前行，写入cache
            /** @type {?} */
            let dataItem = {};
            if (joinParam.controlType === 'crosstab') { // 交叉表
                // 获取行标题的数据
                for (let i = joinParam.rowHeaderColInfo.start; i < joinParam.rowHeaderColInfo.end; i++) {
                    /** @type {?} */
                    const value = activeSheet.getValue(target.row, i, GC.Spread.Sheets.SheetArea.viewport);
                    /** @type {?} */
                    const name = activeSheet.getValue(joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    const colInfo = joinParam.colInfos.find((/**
                     * @param {?} x
                     * @return {?}
                     */
                    (x) => x.dimension === 1 && x.name === name)).bindField;
                    dataItem[colInfo] = value;
                }
                // 获取列标题的数据
                for (let i = joinParam.colHeaderRowInfo.start; i < joinParam.colHeaderRowInfo.end; i++) {
                    /** @type {?} */
                    const value = activeSheet.getValue(i, target.col, GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    const colInfo = joinParam.colInfos.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    (x) => x.dimension === 2))[i - joinParam.colHeaderRowInfo.start].bindField;
                    dataItem[colInfo] = value;
                }
                // 获取值标题的数据
                /** @type {?} */
                const value = activeSheet.getValue(target.row, target.col, GC.Spread.Sheets.SheetArea.viewport);
                /** @type {?} */
                const name = activeSheet.getValue(joinParam.colHeaderRowInfo.end, target.col, GC.Spread.Sheets.SheetArea.colHeader);
                /** @type {?} */
                let colInfo = joinParam.colInfos.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                (x) => x.dimension === 3 && x.name === name));
                if (colInfo) {
                    colInfo = colInfo.bindField;
                    dataItem[colInfo] = value;
                }
            }
            else {
                dataItem = activeSheet.getDataItem(target.row);
            }
            // 保存参数到searchList
            this.currentSelectItem = dataItem;
            return true;
        }
        else {
            if (joinParam.colList && joinParam.colList.length) {
                /** @type {?} */
                const cacheCols = [];
                joinParam.colList.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    this.getColumn(col, null, cacheCols);
                }));
                /** @type {?} */
                const dataItem = {};
                for (let i = 0; i < cacheCols.length; i++) {
                    if (i < $event.value.length) {
                        dataItem[cacheCols[i].bindField] = $event.value[i];
                    }
                }
                this.currentSelectItem = dataItem;
            }
            $event.event.event.returnValue = false;
            return true;
        }
    }
    /**
     * 保存参数到cache
     * @protected
     * @param {?} dataItem 参数
     * @return {?}
     */
    writeParamToCache(dataItem) {
        this._searchList[0]['joinSearch'].forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const currentParam = this.cacheService.get(this._queryId);
            dataItem['currentItem'] = currentParam;
            this.cacheService.set(value.queryId, dataItem);
        }));
    }
    /**
     * @private
     * @param {?} col
     * @param {?} childCols
     * @param {?} colcache
     * @return {?}
     */
    getColumn(col, childCols, colcache) {
        if (col) {
            /** @type {?} */
            const str = JSON.stringify(col);
            colcache.push(JSON.parse(str));
            if (col.childList && col.childList.length) {
                this.getColumn(null, col.childList, colcache);
            }
        }
        else {
            childCols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                /** @type {?} */
                const str = JSON.stringify(col);
                colcache.push(JSON.parse(str));
                if (col.childList && col.childList.length) {
                    this.getColumn(null, col.childList, colcache);
                }
            }));
        }
    }
}
MenuControllerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MenuControllerService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: CacheService },
    { type: SearchListService },
    { type: CacheService },
    { type: LoadingService }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    MenuControllerService.prototype._searchList;
    /**
     * @type {?}
     * @protected
     */
    MenuControllerService.prototype._queryId;
    /** @type {?} */
    MenuControllerService.prototype.currentSelectItem;
    /** @type {?} */
    MenuControllerService.prototype.queryRelativeUrl;
    /** @type {?} */
    MenuControllerService.prototype.jointsearchInfoChange;
    /** @type {?} */
    MenuControllerService.prototype.qdpView;
    /**
     * @type {?}
     * @protected
     */
    MenuControllerService.prototype.render;
    /**
     * @type {?}
     * @protected
     */
    MenuControllerService.prototype.rendererFactory;
    /**
     * @type {?}
     * @protected
     */
    MenuControllerService.prototype.cacheService;
    /**
     * @type {?}
     * @protected
     */
    MenuControllerService.prototype.searchListService;
    /**
     * @type {?}
     * @private
     */
    MenuControllerService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    MenuControllerService.prototype.loadingService;
}
//# sourceMappingURL=data:application/json;base64,