/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostListener, ElementRef, RendererFactory2, Input, Optional, Injector } from '@angular/core';
import { MenuControllerService } from '../../service/menu-controller.service';
import { FrameworkService, AppService } from '@gsp-sys/rtf-common';
import { CacheService } from '@ecp-caf/caf-common';
import { JointSearchExtendService } from '@qdp/common';
import { EventBus, RtfServices } from '@qdp/common';
export class SearchJoinMenuComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderFactory
     * @param {?} menuControllerService
     * @param {?} frameWorkService
     * @param {?} cacheService
     * @param {?} jointSearchExtendService
     * @param {?} injector
     */
    constructor(elementRef, renderFactory, menuControllerService, frameWorkService, cacheService, jointSearchExtendService, injector) {
        this.elementRef = elementRef;
        this.renderFactory = renderFactory;
        this.menuControllerService = menuControllerService;
        this.frameWorkService = frameWorkService;
        this.cacheService = cacheService;
        this.jointSearchExtendService = jointSearchExtendService;
        this.injector = injector;
        if (this.injector) {
            this.appService = this.injector.get(AppService);
        }
        this.formId = 'form' + 'ff3ea474-cc65-23b0-cdb1-73c9146cea3b';
        this.renderer = this.renderFactory.createRenderer(null, null);
        menuControllerService.jointsearchInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value) {
                this.searchList = value;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        this.menuControllerService.getSearchList(this.formId, this.queryId, this.queryRelativeUrl).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value) {
                /** @type {?} */
                const _searchList = JSON.parse(value['joinSearch']);
                _searchList.forEach((/**
                 * @param {?} searchL
                 * @return {?}
                 */
                searchL => {
                    if (!searchL.searchtype) {
                        searchL.searchtype = 'func';
                        searchL.appEntrance = '';
                    }
                    searchL.functionname = self.getFunctionName(searchL.functionname);
                }));
                this.searchPara = JSON.parse(value['jointparam']);
                this.cacheService.set(this.queryId + 'beforeJointSearchMenuShow', _searchList);
            }
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * 当点击某一个路由之后，隐藏菜单组件
     * @return {?}
     */
    handleClick() {
        this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
    }
    /**
     * 路由到结果页
     * param id 联查功能主键id
     * param functionid 功能菜单id
     * @param {?} id
     * @param {?} functionid
     * @param {?} queryId
     * @return {?}
     */
    routeTo(id, functionid, queryId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let chooseList = {};
        this.searchList.forEach((/**
         * @param {?} searchL
         * @return {?}
         */
        searchL => {
            if (searchL.id === id) {
                chooseList = searchL;
            }
        }));
        /** @type {?} */
        let entityParam = { 'id': 'null' };
        /** @type {?} */
        const paramMap = new Map();
        /** @type {?} */
        const searchparas = this.searchPara.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.functionid === id));
        // 查找对应的参数列表
        /** @type {?} */
        const currentSelectedItem = this.cacheService.get(this.queryId + 'currentSelectItem');
        if (searchparas.length > 0) {
            searchparas.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value.paravaluetype) { // 表达式
                    if (value.paravalue.indexOf('getParameter(') >= 0) {
                        /** @type {?} */
                        const parameterKey = value.paravalue.replace(/'/g, '').replace(/"/g, '').replace(/getParameter\(/g, '').replace(/\)/g, '');
                        self.getQueryParameters(entityParam, paramMap, parameterKey, value.para);
                    }
                    else {
                        entityParam[value.para] = currentSelectedItem[value.paravalue];
                        paramMap.set(value.para, currentSelectedItem[value.paravalue]);
                    }
                }
                else {
                    entityParam[value.para] = value.paravalue;
                    paramMap.set(value.para, value.paravalue);
                }
            }));
        }
        else {
            entityParam = currentSelectedItem;
        }
        /** @type {?} */
        let options = {
            ParentSessionId: this.cacheService.get('session'),
            EntityParam: entityParam
        };
        /** @type {?} */
        const $event = {};
        if (this.jointSearchExtendService && this.jointSearchExtendService.beforeJointSearch) {
            $event['eventCode'] = 'beforeJointSearch';
            $event['eventName'] = 'drill before';
            $event['data'] = {
                'functionid': functionid,
                'options': options,
                'queryId': queryId,
                'orginQueryId': this.queryId,
                'qdpView': this.menuControllerService.qdpView
            };
            this.jointSearchExtendService.beforeJointSearch($event);
            if ($event && $event['data'] && $event['data'].options) {
                options = Object.assign(options, $event['data'].options);
            }
            if (chooseList.searchtype === 'url' || chooseList.searchtype === 'additional') {
                return;
            }
        }
        // this.cacheService.set(queryId, options.EntityParam);
        /** @type {?} */
        let tabId = '';
        if (chooseList.searchtype === 'func') {
            // 联查前
            /** @type {?} */
            const openMenuoptions = {
                'appType': 'menu',
                'funcId': functionid,
                'tabId': EventBus.guid(),
                'appId': '',
                'appEntrance': '',
                'entityParams': $event['entityParams'] || entityParam,
                'queryStringParams': paramMap,
                'isNewTab': true
            };
            tabId = RtfServices.getFuncId(openMenuoptions);
            /** @type {?} */
            const menuSwitchControl = Object.assign({}, openMenuoptions['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
            openMenuoptions['entityParams'] = menuSwitchControl;
            this.cacheService.set(tabId ? tabId : queryId, options.EntityParam);
            // 卡片塞进去params
            this.frameWorkService.openMenu(openMenuoptions);
        }
        else if (chooseList.searchtype === 'app') {
            /** @type {?} */
            const appOption = {
                appType: 'app',
                appId: functionid,
                appEntrance: chooseList.appEntrance,
                funcId: '',
                isReload: true,
                tabId: EventBus.guid(),
                entityParams: $event['entityParams'] || entityParam,
                queryStringParams: paramMap
            };
            tabId = RtfServices.getFuncId(appOption);
            this.cacheService.set(tabId ? tabId : queryId, options.EntityParam);
            /** @type {?} */
            const menuSwitchControl = Object.assign({}, appOption['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
            appOption['entityParams'] = menuSwitchControl;
            this.frameWorkService.openMenu(appOption);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getFunctionName(data) {
        /** @type {?} */
        let local = 'zh-chs';
        if (gspframeworkService) {
            local = gspframeworkService.rtf.language.getLanguageCode().toLowerCase();
        }
        if (!local) {
            local = 'zh-chs';
        }
        return data[local] ? data[local] : data;
    }
    /**
     * @private
     * @param {?} entityParam
     * @param {?} paramMap
     * @param {?} parameterKey
     * @param {?} key
     * @return {?}
     */
    getQueryParameters(entityParam, paramMap, parameterKey, key) {
        try {
            /** @type {?} */
            const tab = gspframeworkService.rtf.session.getCommonVariable();
            if (tab && tab.tabId) {
                /** @type {?} */
                const tid = tab.tabId + RtfServices.getInSuiteFrmUUID();
                if (this.cacheService.get(tid) && this.cacheService.get(tid)[parameterKey]) {
                    entityParam[key] = this.cacheService.get(tid)[parameterKey];
                    paramMap.set(key, this.cacheService.get(tid)[parameterKey]);
                }
            }
        }
        catch (e) {
        }
    }
}
SearchJoinMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'qdp-search-join-menu',
                template: "<div *ngIf=\"searchList && searchList.length && searchList.length > 0\">\r\n  <div class=\"dropdown-menu\" style=\"display:block\">\r\n    <div *ngFor=\"let item of searchList\">\r\n      <button class=\"dropdown-item\" (click)=\"routeTo(item.id,item.functioncode,item.destinationqueryId)\">{{item.functionname}}</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [":host{position:fixed;display:none;top:0;left:0}"]
            }] }
];
/** @nocollapse */
SearchJoinMenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: RendererFactory2 },
    { type: MenuControllerService },
    { type: FrameworkService },
    { type: CacheService },
    { type: JointSearchExtendService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
SearchJoinMenuComponent.propDecorators = {
    queryId: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    searchList: [{ type: Input }],
    handleClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    SearchJoinMenuComponent.prototype.queryId;
    /** @type {?} */
    SearchJoinMenuComponent.prototype.queryRelativeUrl;
    /** @type {?} */
    SearchJoinMenuComponent.prototype.qoManagerCode;
    /** @type {?} */
    SearchJoinMenuComponent.prototype.formId;
    /** @type {?} */
    SearchJoinMenuComponent.prototype.searchList;
    /** @type {?} */
    SearchJoinMenuComponent.prototype.searchPara;
    /** @type {?} */
    SearchJoinMenuComponent.prototype.currentSelectedItem;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.renderFactory;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.menuControllerService;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.frameWorkService;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.cacheService;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.jointSearchExtendService;
    /**
     * @type {?}
     * @private
     */
    SearchJoinMenuComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,