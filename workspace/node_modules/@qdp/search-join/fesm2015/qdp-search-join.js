import { CommonModule } from '@angular/common';
import { Injectable, RendererFactory2, Component, HostListener, ElementRef, Input, Optional, Injector, NgModule } from '@angular/core';
import { map } from 'rxjs/operators';
import { Subject, of } from 'rxjs';
import { FrameworkService, AppService } from '@gsp-sys/rtf-common';
import { CacheService } from '@ecp-caf/caf-common';
import { JointSearchManagerService, RtfServices, JointSearchExtendService, EventBus } from '@qdp/common';
import { LoadingService, LoadingModule } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchListService {
    /**
     * @param {?} jointSearchManagerService
     */
    constructor(jointSearchManagerService) {
        this.jointSearchManagerService = jointSearchManagerService;
    }
    /**
     * 根据查询ID，获取联查信息
     * @param {?} formId
     * @param {?} queryid 查询id
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSearchList(formId, queryid, queryRelativeUrl) {
        return this.jointSearchManagerService.getjointsearch(formId, queryid, queryRelativeUrl);
    }
    /**
     * @param {?} visibleJointParam
     * @param {?} queryRelativeUrl
     * @param {?} searchList
     * @return {?}
     */
    getVisibleJoint(visibleJointParam, queryRelativeUrl, searchList) {
        return this.jointSearchManagerService.getVisibleJoint(visibleJointParam, queryRelativeUrl, searchList);
    }
}
SearchListService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SearchListService.ctorParameters = () => [
    { type: JointSearchManagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MenuControllerService {
    /**
     * @param {?} rendererFactory
     * @param {?} cacheService
     * @param {?} searchListService
     * @param {?} cache
     * @param {?} loadingService
     */
    constructor(rendererFactory, cacheService, searchListService, cache, loadingService) {
        this.rendererFactory = rendererFactory;
        this.cacheService = cacheService;
        this.searchListService = searchListService;
        this.cache = cache;
        this.loadingService = loadingService;
        this.jointsearchInfoChange = new Subject();
        this.render = rendererFactory.createRenderer(null, null);
    }
    /**
     * @param {?} $event
     * @param {?} elementRef
     * @param {?} qdpView
     * @param {?} qdpViewElementRef
     * @return {?}
     */
    handleContextmenu($event, elementRef, qdpView, qdpViewElementRef) {
        this.qdpView = qdpView;
        // const loading = this.loadingService.show({ container: qdpViewElementRef });
        /** @type {?} */
        const joinParam = this.cache.get(RtfServices.getTabId(this._queryId) + 'joinSearch');
        if (!this.checkDataArea(qdpView, qdpViewElementRef, joinParam, $event) || !this._searchList) {
            return false;
        }
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let top = 0;
        if (joinParam && joinParam.controlType !== 'charts') {
            left = $event.clientX;
            top = $event.clientY;
        }
        else {
            left = $event.event.event.clientX;
            top = $event.event.event.clientY;
        }
        this.render.setStyle(elementRef.nativeElement, 'left', left + 'px');
        this.render.setStyle(elementRef.nativeElement, 'top', top + 'px');
        this.render.setStyle(elementRef.nativeElement, 'display', 'block');
        this.cacheService.set(this._queryId + 'currentSelectItem', this.currentSelectItem); // 将当前参数设置到缓存中
        // 将当前参数设置到缓存中
        // 联查可见表达式
        /** @type {?} */
        const searchList = this.cacheService.get(this._queryId + 'beforeJointSearchMenuShow');
        /** @type {?} */
        const formulas = {};
        /** @type {?} */
        let containVisibleFormula = false;
        for (const search of searchList) {
            formulas[search.id] = search.visibleformula;
            if (containVisibleFormula === false && search.visibleformula != void 0 && search.visibleformula !== '') {
                containVisibleFormula = true;
            }
        }
        if (containVisibleFormula === true) {
            /** @type {?} */
            const param = { qoManagerCode: qdpView.qoManagerCode, visibleFormulas: formulas, userId: '', queryId: this._queryId, rowData: this.currentSelectItem };
            this.searchListService.getVisibleJoint(param, qdpView.queryRelativeUrl, searchList).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value) {
                    this.jointsearchInfoChange.next(value);
                }
            }));
        }
        else {
            this.jointsearchInfoChange.next(searchList);
        }
        return false;
    }
    /**
     * 单击之后隐藏菜单
     * @param {?} elementRef 菜单组件
     * @return {?}
     */
    handleClick(elementRef) {
        if (elementRef) {
            this.render.setStyle(elementRef.nativeElement, 'display', 'none');
        }
    }
    /**
     * get searchList
     * @param {?} formId
     * @param {?} queryId
     * @param {?} queryRelativeUrl
     * @return {?}
     */
    getSearchList(formId, queryId, queryRelativeUrl) {
        this._queryId = queryId;
        if (this._searchList && this._searchList.queryId === this._queryId) {
            return of(this._searchList);
        }
        /** @type {?} */
        const result = this.searchListService.getSearchList(formId, queryId, queryRelativeUrl);
        return result.pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this._searchList = value; // ? JSON.parse(value.joinSearch) : [];
            return this._searchList;
        })));
    }
    /**
     * 返回当前右键坐标，是否为数据区域
     * @private
     * @param {?} qdpView qdp-view 组件
     * @param {?} qdpViewElementRef qdp-view ElementRef
     * @param {?} joinParam
     * @param {?} $event 触发事件，主要用来传递坐标
     * @return {?}
     */
    checkDataArea(qdpView, qdpViewElementRef, joinParam, $event) {
        /** @type {?} */
        let x = 0;
        /** @type {?} */
        let y = 0;
        /** @type {?} */
        let qdpviewNative = qdpViewElementRef.nativeElement;
        while (qdpviewNative) {
            x += qdpviewNative.offsetLeft;
            y += qdpviewNative.offsetTop;
            qdpviewNative = qdpviewNative.offsetParent;
        }
        if (joinParam.controlType !== 'charts') {
            /** @type {?} */
            const activeSheet = qdpView.spread.getActiveSheet();
            /** @type {?} */
            const target = activeSheet.hitTest($event.clientX - x, $event.clientY - y);
            if (target.hitTestType !== GC.Spread.Sheets.SheetArea.viewport || target.col === undefined || target.row === undefined) {
                return false;
            }
            activeSheet.setActiveCell(target.row, target.col);
            // 将当前行，写入cache
            /** @type {?} */
            let dataItem = {};
            if (joinParam.controlType === 'crosstab') { // 交叉表
                // 获取行标题的数据
                for (let i = joinParam.rowHeaderColInfo.start; i < joinParam.rowHeaderColInfo.end; i++) {
                    /** @type {?} */
                    const value = activeSheet.getValue(target.row, i, GC.Spread.Sheets.SheetArea.viewport);
                    /** @type {?} */
                    const name = activeSheet.getValue(joinParam.colHeaderRowInfo.start, i, GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    const colInfo = joinParam.colInfos.find((/**
                     * @param {?} x
                     * @return {?}
                     */
                    (x) => x.dimension === 1 && x.name === name)).bindField;
                    dataItem[colInfo] = value;
                }
                // 获取列标题的数据
                for (let i = joinParam.colHeaderRowInfo.start; i < joinParam.colHeaderRowInfo.end; i++) {
                    /** @type {?} */
                    const value = activeSheet.getValue(i, target.col, GC.Spread.Sheets.SheetArea.colHeader);
                    /** @type {?} */
                    const colInfo = joinParam.colInfos.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    (x) => x.dimension === 2))[i - joinParam.colHeaderRowInfo.start].bindField;
                    dataItem[colInfo] = value;
                }
                // 获取值标题的数据
                /** @type {?} */
                const value = activeSheet.getValue(target.row, target.col, GC.Spread.Sheets.SheetArea.viewport);
                /** @type {?} */
                const name = activeSheet.getValue(joinParam.colHeaderRowInfo.end, target.col, GC.Spread.Sheets.SheetArea.colHeader);
                /** @type {?} */
                let colInfo = joinParam.colInfos.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                (x) => x.dimension === 3 && x.name === name));
                if (colInfo) {
                    colInfo = colInfo.bindField;
                    dataItem[colInfo] = value;
                }
            }
            else {
                dataItem = activeSheet.getDataItem(target.row);
            }
            // 保存参数到searchList
            this.currentSelectItem = dataItem;
            return true;
        }
        else {
            if (joinParam.colList && joinParam.colList.length) {
                /** @type {?} */
                const cacheCols = [];
                joinParam.colList.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    this.getColumn(col, null, cacheCols);
                }));
                /** @type {?} */
                const dataItem = {};
                for (let i = 0; i < cacheCols.length; i++) {
                    if (i < $event.value.length) {
                        dataItem[cacheCols[i].bindField] = $event.value[i];
                    }
                }
                this.currentSelectItem = dataItem;
            }
            $event.event.event.returnValue = false;
            return true;
        }
    }
    /**
     * 保存参数到cache
     * @protected
     * @param {?} dataItem 参数
     * @return {?}
     */
    writeParamToCache(dataItem) {
        this._searchList[0]['joinSearch'].forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const currentParam = this.cacheService.get(this._queryId);
            dataItem['currentItem'] = currentParam;
            this.cacheService.set(value.queryId, dataItem);
        }));
    }
    /**
     * @private
     * @param {?} col
     * @param {?} childCols
     * @param {?} colcache
     * @return {?}
     */
    getColumn(col, childCols, colcache) {
        if (col) {
            /** @type {?} */
            const str = JSON.stringify(col);
            colcache.push(JSON.parse(str));
            if (col.childList && col.childList.length) {
                this.getColumn(null, col.childList, colcache);
            }
        }
        else {
            childCols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => {
                /** @type {?} */
                const str = JSON.stringify(col);
                colcache.push(JSON.parse(str));
                if (col.childList && col.childList.length) {
                    this.getColumn(null, col.childList, colcache);
                }
            }));
        }
    }
}
MenuControllerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MenuControllerService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: CacheService },
    { type: SearchListService },
    { type: CacheService },
    { type: LoadingService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchJoinMenuComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderFactory
     * @param {?} menuControllerService
     * @param {?} frameWorkService
     * @param {?} cacheService
     * @param {?} jointSearchExtendService
     * @param {?} injector
     */
    constructor(elementRef, renderFactory, menuControllerService, frameWorkService, cacheService, jointSearchExtendService, injector) {
        this.elementRef = elementRef;
        this.renderFactory = renderFactory;
        this.menuControllerService = menuControllerService;
        this.frameWorkService = frameWorkService;
        this.cacheService = cacheService;
        this.jointSearchExtendService = jointSearchExtendService;
        this.injector = injector;
        if (this.injector) {
            this.appService = this.injector.get(AppService);
        }
        this.formId = 'form' + 'ff3ea474-cc65-23b0-cdb1-73c9146cea3b';
        this.renderer = this.renderFactory.createRenderer(null, null);
        menuControllerService.jointsearchInfoChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value) {
                this.searchList = value;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        this.menuControllerService.getSearchList(this.formId, this.queryId, this.queryRelativeUrl).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value) {
                /** @type {?} */
                const _searchList = JSON.parse(value['joinSearch']);
                _searchList.forEach((/**
                 * @param {?} searchL
                 * @return {?}
                 */
                searchL => {
                    if (!searchL.searchtype) {
                        searchL.searchtype = 'func';
                        searchL.appEntrance = '';
                    }
                    searchL.functionname = self.getFunctionName(searchL.functionname);
                }));
                this.searchPara = JSON.parse(value['jointparam']);
                this.cacheService.set(this.queryId + 'beforeJointSearchMenuShow', _searchList);
            }
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * 当点击某一个路由之后，隐藏菜单组件
     * @return {?}
     */
    handleClick() {
        this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
    }
    /**
     * 路由到结果页
     * param id 联查功能主键id
     * param functionid 功能菜单id
     * @param {?} id
     * @param {?} functionid
     * @param {?} queryId
     * @return {?}
     */
    routeTo(id, functionid, queryId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let chooseList = {};
        this.searchList.forEach((/**
         * @param {?} searchL
         * @return {?}
         */
        searchL => {
            if (searchL.id === id) {
                chooseList = searchL;
            }
        }));
        /** @type {?} */
        let entityParam = { 'id': 'null' };
        /** @type {?} */
        const paramMap = new Map();
        /** @type {?} */
        const searchparas = this.searchPara.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.functionid === id));
        // 查找对应的参数列表
        /** @type {?} */
        const currentSelectedItem = this.cacheService.get(this.queryId + 'currentSelectItem');
        if (searchparas.length > 0) {
            searchparas.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value.paravaluetype) { // 表达式
                    if (value.paravalue.indexOf('getParameter(') >= 0) {
                        /** @type {?} */
                        const parameterKey = value.paravalue.replace(/'/g, '').replace(/"/g, '').replace(/getParameter\(/g, '').replace(/\)/g, '');
                        self.getQueryParameters(entityParam, paramMap, parameterKey, value.para);
                    }
                    else {
                        entityParam[value.para] = currentSelectedItem[value.paravalue];
                        paramMap.set(value.para, currentSelectedItem[value.paravalue]);
                    }
                }
                else {
                    entityParam[value.para] = value.paravalue;
                    paramMap.set(value.para, value.paravalue);
                }
            }));
        }
        else {
            entityParam = currentSelectedItem;
        }
        /** @type {?} */
        let options = {
            ParentSessionId: this.cacheService.get('session'),
            EntityParam: entityParam
        };
        /** @type {?} */
        const $event = {};
        if (this.jointSearchExtendService && this.jointSearchExtendService.beforeJointSearch) {
            $event['eventCode'] = 'beforeJointSearch';
            $event['eventName'] = 'drill before';
            $event['data'] = {
                'functionid': functionid,
                'options': options,
                'queryId': queryId,
                'orginQueryId': this.queryId,
                'qdpView': this.menuControllerService.qdpView
            };
            this.jointSearchExtendService.beforeJointSearch($event);
            if ($event && $event['data'] && $event['data'].options) {
                options = Object.assign(options, $event['data'].options);
            }
            if (chooseList.searchtype === 'url' || chooseList.searchtype === 'additional') {
                return;
            }
        }
        // this.cacheService.set(queryId, options.EntityParam);
        /** @type {?} */
        let tabId = '';
        if (chooseList.searchtype === 'func') {
            // 联查前
            /** @type {?} */
            const openMenuoptions = {
                'appType': 'menu',
                'funcId': functionid,
                'tabId': EventBus.guid(),
                'appId': '',
                'appEntrance': '',
                'entityParams': $event['entityParams'] || entityParam,
                'queryStringParams': paramMap,
                'isNewTab': true
            };
            tabId = RtfServices.getFuncId(openMenuoptions);
            /** @type {?} */
            const menuSwitchControl = Object.assign({}, openMenuoptions['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
            openMenuoptions['entityParams'] = menuSwitchControl;
            this.cacheService.set(tabId ? tabId : queryId, options.EntityParam);
            // 卡片塞进去params
            this.frameWorkService.openMenu(openMenuoptions);
        }
        else if (chooseList.searchtype === 'app') {
            /** @type {?} */
            const appOption = {
                appType: 'app',
                appId: functionid,
                appEntrance: chooseList.appEntrance,
                funcId: '',
                isReload: true,
                tabId: EventBus.guid(),
                entityParams: $event['entityParams'] || entityParam,
                queryStringParams: paramMap
            };
            tabId = RtfServices.getFuncId(appOption);
            this.cacheService.set(tabId ? tabId : queryId, options.EntityParam);
            /** @type {?} */
            const menuSwitchControl = Object.assign({}, appOption['entityParams'], RtfServices.getMenuSwitchControlParameter(tabId));
            appOption['entityParams'] = menuSwitchControl;
            this.frameWorkService.openMenu(appOption);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getFunctionName(data) {
        /** @type {?} */
        let local = 'zh-chs';
        if (gspframeworkService) {
            local = gspframeworkService.rtf.language.getLanguageCode().toLowerCase();
        }
        if (!local) {
            local = 'zh-chs';
        }
        return data[local] ? data[local] : data;
    }
    /**
     * @private
     * @param {?} entityParam
     * @param {?} paramMap
     * @param {?} parameterKey
     * @param {?} key
     * @return {?}
     */
    getQueryParameters(entityParam, paramMap, parameterKey, key) {
        try {
            /** @type {?} */
            const tab = gspframeworkService.rtf.session.getCommonVariable();
            if (tab && tab.tabId) {
                /** @type {?} */
                const tid = tab.tabId + RtfServices.getInSuiteFrmUUID();
                if (this.cacheService.get(tid) && this.cacheService.get(tid)[parameterKey]) {
                    entityParam[key] = this.cacheService.get(tid)[parameterKey];
                    paramMap.set(key, this.cacheService.get(tid)[parameterKey]);
                }
            }
        }
        catch (e) {
        }
    }
}
SearchJoinMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'qdp-search-join-menu',
                template: "<div *ngIf=\"searchList && searchList.length && searchList.length > 0\">\r\n  <div class=\"dropdown-menu\" style=\"display:block\">\r\n    <div *ngFor=\"let item of searchList\">\r\n      <button class=\"dropdown-item\" (click)=\"routeTo(item.id,item.functioncode,item.destinationqueryId)\">{{item.functionname}}</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [":host{position:fixed;display:none;top:0;left:0}"]
            }] }
];
/** @nocollapse */
SearchJoinMenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: RendererFactory2 },
    { type: MenuControllerService },
    { type: FrameworkService },
    { type: CacheService },
    { type: JointSearchExtendService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
SearchJoinMenuComponent.propDecorators = {
    queryId: [{ type: Input }],
    queryRelativeUrl: [{ type: Input }],
    qoManagerCode: [{ type: Input }],
    searchList: [{ type: Input }],
    handleClick: [{ type: HostListener, args: ['click',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchJoinModule {
}
SearchJoinModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    LoadingModule,
                ],
                providers: [
                    SearchListService,
                    LoadingService
                ],
                declarations: [
                    SearchJoinMenuComponent
                ],
                exports: [
                    SearchJoinMenuComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SearchJoinModule, MenuControllerService, SearchListService, SearchJoinMenuComponent };

//# sourceMappingURL=qdp-search-join.js.map