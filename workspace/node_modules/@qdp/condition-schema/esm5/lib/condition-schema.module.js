/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { DatagridModule, ScrollbarModule } from '@farris/ui-datagrid';
import { ConditionSchemaManagerComponent } from './component/condition-schema-manager/condition-schema-manager.component';
import { ConditionSchemaService } from './service/condition-schema.service';
var ConditionSchemaModule = /** @class */ (function () {
    function ConditionSchemaModule() {
    }
    ConditionSchemaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ConditionSchemaManagerComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        FarrisDialogModule,
                        ScrollbarModule,
                        DatagridEditorsModule,
                        DatagridModule.forRoot(tslib_1.__spread(EditorProviders)),
                        FDropdownDirectiveTypeModule,
                    ],
                    exports: [
                        ConditionSchemaManagerComponent
                    ],
                    providers: [
                        ConditionSchemaService
                    ]
                },] }
    ];
    return ConditionSchemaModule;
}());
export { ConditionSchemaModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLXNjaGVtYS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2NvbmRpdGlvbi1zY2hlbWEvIiwic291cmNlcyI6WyJsaWIvY29uZGl0aW9uLXNjaGVtYS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0seUVBQXlFLENBQUM7QUFDMUgsT0FBTyxFQUFFLHNCQUFzQixFQUFHLE1BQU0sb0NBQW9DLENBQUM7QUFHN0U7SUFBQTtJQXdCcUMsQ0FBQzs7Z0JBeEJyQyxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFO3dCQUNaLCtCQUErQjtxQkFDaEM7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBQ1osV0FBVzt3QkFDWCxtQkFBbUI7d0JBQ25CLGtCQUFrQjt3QkFDbEIsZUFBZTt3QkFDZixxQkFBcUI7d0JBQ3JCLGNBQWMsQ0FBQyxPQUFPLGtCQUNmLGVBQWUsRUFDcEI7d0JBQ0YsNEJBQTRCO3FCQUU3QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsK0JBQStCO3FCQUNoQztvQkFDRCxTQUFTLEVBQUU7d0JBQ1Qsc0JBQXNCO3FCQUN2QjtpQkFDRjs7SUFDb0MsNEJBQUM7Q0FBQSxBQXhCdEMsSUF3QnNDO1NBQXpCLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IEZEcm9wZG93bkRpcmVjdGl2ZVR5cGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRyb3Bkb3duJztcclxuaW1wb3J0IHsgRGF0YWdyaWRFZGl0b3JzTW9kdWxlLCBFZGl0b3JQcm92aWRlcnMgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZE1vZHVsZSwgU2Nyb2xsYmFyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IENvbmRpdGlvblNjaGVtYU1hbmFnZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9jb25kaXRpb24tc2NoZW1hLW1hbmFnZXIvY29uZGl0aW9uLXNjaGVtYS1tYW5hZ2VyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbmRpdGlvblNjaGVtYVNlcnZpY2UgIH0gZnJvbSAnLi9zZXJ2aWNlL2NvbmRpdGlvbi1zY2hlbWEuc2VydmljZSc7XHJcbmltcG9ydCB7IExvY2FsaXplTW9kdWxlIH0gZnJvbSAnQHFkcC9sb2NhbGl6ZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgQ29uZGl0aW9uU2NoZW1hTWFuYWdlckNvbXBvbmVudFxyXG4gIF0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgRm9ybXNNb2R1bGUsXHJcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxyXG4gICAgRmFycmlzRGlhbG9nTW9kdWxlLFxyXG4gICAgU2Nyb2xsYmFyTW9kdWxlLFxyXG4gICAgRGF0YWdyaWRFZGl0b3JzTW9kdWxlLFxyXG4gICAgRGF0YWdyaWRNb2R1bGUuZm9yUm9vdChbXHJcbiAgICAgICAgLi4uRWRpdG9yUHJvdmlkZXJzXHJcbiAgICBdKSxcclxuICAgIEZEcm9wZG93bkRpcmVjdGl2ZVR5cGVNb2R1bGUsXHJcbiAgICAvLyBMb2NhbGl6ZU1vZHVsZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgQ29uZGl0aW9uU2NoZW1hTWFuYWdlckNvbXBvbmVudFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBDb25kaXRpb25TY2hlbWFTZXJ2aWNlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uU2NoZW1hTW9kdWxlIHsgfVxyXG4iXX0=