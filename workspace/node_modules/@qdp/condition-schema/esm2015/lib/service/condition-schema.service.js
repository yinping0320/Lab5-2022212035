/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import 'rxjs/add/operator/map';
import { Injectable, Inject, Optional, Injector } from '@angular/core';
import { map, switchMap } from 'rxjs/operators';
import { of, Subject } from 'rxjs';
import { CacheService, SessionService } from '@ecp-caf/caf-common';
import { RestfulService, Server_Host } from '@qdp/common';
import { RtfServices } from '@qdp/common';
import { filter } from 'lodash-es';
export class ConditionSchemaService {
    /**
     * @param {?} restService
     * @param {?} sessionService
     * @param {?} host
     * @param {?} injector
     */
    constructor(restService, sessionService, host, injector) {
        this.restService = restService;
        this.sessionService = sessionService;
        this.host = host;
        this.injector = injector;
        this.uri = '/api/runtime/bcc/v1.0/qdpcschemamanager/';
        this.schemaListChange = new Subject();
        this.uri = this.host + this.uri;
        if (this.injector) {
            this.cache = this.injector.get(CacheService);
        }
    }
    /**
     * 获取指定方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @param {?=} useCache
     * @return {?}
     */
    getSchema(id, queryId, useCache) {
        if (useCache && this.schemaList && this.schemaList[queryId] && this.schemaList[queryId][id]) {
            return of(this.schemaList[queryId][id]);
        }
        else {
            /** @type {?} */
            let organizationId = '';
            if (this.cache) {
                organizationId = this.cache.get(RtfServices.getTabId(queryId) + 'organizationId') || '';
            }
            /** @type {?} */
            const result$ = this.getSchemaList(queryId, '', organizationId);
            return result$.pipe(map((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value && value[queryId] && value[queryId][id]) {
                    return value[queryId][id];
                }
                else {
                    return null;
                }
            })));
        }
    }
    /**
     * 获取默认方案
     * @param {?} queryId
     * @param {?=} useCache
     * @return {?}
     */
    getDefaultSchema(queryId, useCache) {
        /** @type {?} */
        const self = this;
        if (useCache && this.isDefaultSchema && this.isDefaultSchema[queryId] && this.isDefaultSchema[queryId].id) {
            return of(this.isDefaultSchema[queryId]);
        }
        else {
            /** @type {?} */
            let organizationId = '';
            if (this.cache) {
                organizationId = this.cache.get(RtfServices.getTabId(queryId) + 'organizationId') || '';
            }
            /** @type {?} */
            const result$ = this.getSchemaList(queryId, '', organizationId);
            return result$.pipe(map((/**
             * @return {?}
             */
            () => {
                if (self.isDefaultSchema && self.isDefaultSchema[queryId] && self.isDefaultSchema[queryId].id) {
                    return self.isDefaultSchema[queryId];
                }
                else {
                    return null;
                }
            })));
        }
    }
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} userId 用户ID
     * @param {?} organizationId 语言类型
     * @return {?}
     */
    getSchemaList(queryId, userId, organizationId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const result$ = this.restService.get(this.uri + 'getschemalist', {
            queryId,
            userId,
            organizationId
        }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (!self.schemaList) {
                self.schemaList = {};
            }
            if (!self.isDefaultSchema) {
                self.isDefaultSchema = {};
            }
            self.schemaList[queryId] = {};
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    value.schemaValue = value.schemaValue ? JSON.parse(value.schemaValue) : null;
                    self.schemaList[queryId][value.id] = value;
                    if (value.isDefault === 1) {
                        self.isDefaultSchema[queryId] = value;
                    }
                }));
                /** @type {?} */
                const filterCondition = { schemaType: 0 };
                if (!self.isDefaultSchema[queryId] || !self.isDefaultSchema[queryId].id) {
                    if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                        self.isDefaultSchema[queryId] = filter(data, filterCondition)[0];
                    }
                }
                if (!self.isDefaultSchema[queryId] || !self.isDefaultSchema[queryId].id) {
                    filterCondition.schemaType = 1;
                    if (filter(data, filterCondition) && filter(data, filterCondition).length) {
                        self.isDefaultSchema[queryId] = filter(data, filterCondition)[0];
                    }
                }
                self.schemaListChange.next({ schemaInfo: self.schemaList, isDefaultSchema: self.isDefaultSchema });
                return self.schemaList;
            }
            else {
                self.schemaListChange.next({ schemaInfo: null, isDefaultSchema: null });
                return null;
            }
        })));
    }
    /**
     * 获取方案列表
     * @param {?} queryId 查询编号
     * @param {?} organizationId 组织ID
     * @return {?}
     */
    getSchemaListByOrgId(queryId, organizationId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const result$ = this.restService.get(this.uri + 'getschemalistbyorgid', {
            queryId,
            organizationId
        }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (!self.schemaList) {
                self.schemaList = {};
            }
            if (!self.isDefaultSchema) {
                self.isDefaultSchema = {};
            }
            self.schemaList[queryId] = {};
            if (data && data.length) {
                data.forEach((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    value.schemaValue = value.schemaValue ? JSON.parse(value.schemaValue) : null;
                    self.schemaList[queryId][value.id] = value;
                    if (value.isDefault === 1) {
                        self.isDefaultSchema[queryId] = value;
                    }
                }));
                return self.schemaList;
            }
            else {
                return null;
            }
        })));
    }
    /**
     * 保存方案
     * @param {?} schema 方案实体
     * @return {?}
     */
    saveSchema(schema) {
        /** @type {?} */
        let organizationId = '';
        if (this.cache) {
            organizationId = this.cache.get(RtfServices.getTabId(schema.queryId) + 'organizationId') || '';
        }
        if (organizationId) {
            schema.orgId = organizationId;
        }
        /** @type {?} */
        const result$ = this.restService.post(this.uri + 'saveschema', schema, {}, this.createHeaderSessionId());
        return result$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            return this.getSchemaList(schema.queryId, '', organizationId);
        })));
    }
    /**
     * 删除方案
     * @param {?} id 方案ID
     * @param {?} queryId 查询编号
     * @return {?}
     */
    deleteSchema(id, queryId) {
        /** @type {?} */
        let organizationId = '';
        if (this.cache) {
            organizationId = this.cache.get(RtfServices.getTabId(queryId) + 'organizationId') || '';
        }
        /** @type {?} */
        const result$ = this.restService.delete(this.uri + 'deleteschema', { id }, this.createHeaderSessionId());
        return result$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data === true) {
                /** @type {?} */
                const result$1 = this.getSchemaList(queryId, '', organizationId);
                return result$1.pipe(map((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    if (value) {
                        return true;
                    }
                    else {
                        return false;
                    }
                })));
            }
            else {
                return false;
            }
        })));
    }
    /**
     * 删除方案
     * @param {?} ids
     * @param {?} queryId 查询编号
     * @return {?}
     */
    deleteSchemaList(ids, queryId) {
        /** @type {?} */
        let organizationId = '';
        if (this.cache) {
            organizationId = this.cache.get(RtfServices.getTabId(queryId) + 'organizationId') || '';
        }
        /** @type {?} */
        const result$ = this.restService.delete(this.uri + 'deleteschemalist', { ids }, this.createHeaderSessionId());
        return result$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            return this.getSchemaList(queryId, '', organizationId);
        })));
    }
    /**
     * @private
     * @return {?}
     */
    createHeaderSessionId() {
        return RtfServices.createHeaderSessionId(this.sessionService);
    }
}
ConditionSchemaService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConditionSchemaService.ctorParameters = () => [
    { type: RestfulService },
    { type: SessionService },
    { type: String, decorators: [{ type: Inject, args: [Server_Host,] }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaService.prototype.uri;
    /** @type {?} */
    ConditionSchemaService.prototype.isDefaultSchema;
    /** @type {?} */
    ConditionSchemaService.prototype.schemaList;
    /** @type {?} */
    ConditionSchemaService.prototype.schemaListChange;
    /** @type {?} */
    ConditionSchemaService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaService.prototype.host;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,