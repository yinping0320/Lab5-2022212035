/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { DatagridModule, ScrollbarModule } from '@farris/ui-datagrid';
import { ConditionSchemaManagerComponent } from './component/condition-schema-manager/condition-schema-manager.component';
import { ConditionSchemaService } from './service/condition-schema.service';
export class ConditionSchemaModule {
}
ConditionSchemaModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ConditionSchemaManagerComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    FarrisDialogModule,
                    ScrollbarModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    FDropdownDirectiveTypeModule,
                ],
                exports: [
                    ConditionSchemaManagerComponent
                ],
                providers: [
                    ConditionSchemaService
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLXNjaGVtYS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcWRwL2NvbmRpdGlvbi1zY2hlbWEvIiwic291cmNlcyI6WyJsaWIvY29uZGl0aW9uLXNjaGVtYS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckYsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx5RUFBeUUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsc0JBQXNCLEVBQUcsTUFBTSxvQ0FBb0MsQ0FBQztBQTJCN0UsTUFBTSxPQUFPLHFCQUFxQjs7O1lBeEJqQyxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLCtCQUErQjtpQkFDaEM7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLGtCQUFrQjtvQkFDbEIsZUFBZTtvQkFDZixxQkFBcUI7b0JBQ3JCLGNBQWMsQ0FBQyxPQUFPLENBQUM7d0JBQ25CLEdBQUcsZUFBZTtxQkFDckIsQ0FBQztvQkFDRiw0QkFBNEI7aUJBRTdCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCwrQkFBK0I7aUJBQ2hDO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxzQkFBc0I7aUJBQ3ZCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRmFycmlzRGlhbG9nTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kaWFsb2cnO1xyXG5pbXBvcnQgeyBGRHJvcGRvd25EaXJlY3RpdmVUeXBlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kcm9wZG93bic7XHJcbmltcG9ydCB7IERhdGFncmlkRWRpdG9yc01vZHVsZSwgRWRpdG9yUHJvdmlkZXJzIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzJztcclxuaW1wb3J0IHsgRGF0YWdyaWRNb2R1bGUsIFNjcm9sbGJhck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQnO1xyXG5pbXBvcnQgeyBDb25kaXRpb25TY2hlbWFNYW5hZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvY29uZGl0aW9uLXNjaGVtYS1tYW5hZ2VyL2NvbmRpdGlvbi1zY2hlbWEtbWFuYWdlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb25kaXRpb25TY2hlbWFTZXJ2aWNlICB9IGZyb20gJy4vc2VydmljZS9jb25kaXRpb24tc2NoZW1hLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2NhbGl6ZU1vZHVsZSB9IGZyb20gJ0BxZHAvbG9jYWxpemUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIENvbmRpdGlvblNjaGVtYU1hbmFnZXJDb21wb25lbnRcclxuICBdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcclxuICAgIEZhcnJpc0RpYWxvZ01vZHVsZSxcclxuICAgIFNjcm9sbGJhck1vZHVsZSxcclxuICAgIERhdGFncmlkRWRpdG9yc01vZHVsZSxcclxuICAgIERhdGFncmlkTW9kdWxlLmZvclJvb3QoW1xyXG4gICAgICAgIC4uLkVkaXRvclByb3ZpZGVyc1xyXG4gICAgXSksXHJcbiAgICBGRHJvcGRvd25EaXJlY3RpdmVUeXBlTW9kdWxlLFxyXG4gICAgLy8gTG9jYWxpemVNb2R1bGVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIENvbmRpdGlvblNjaGVtYU1hbmFnZXJDb21wb25lbnRcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgQ29uZGl0aW9uU2NoZW1hU2VydmljZVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENvbmRpdGlvblNjaGVtYU1vZHVsZSB7IH1cclxuIl19