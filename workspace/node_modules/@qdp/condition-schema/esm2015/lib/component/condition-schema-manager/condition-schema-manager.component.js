/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Optional, Injector } from '@angular/core';
import { Repository } from '@farris/devkit';
import { DialogComponent } from '@farris/ui-dialog';
import { NotifyService } from '@farris/ui-notify';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ConditionSchemaService } from '../../service/condition-schema.service';
import { FinishLoadService } from '../../service/finish-load.service';
import { LocalizeService } from '@qdp/localize';
import { EventBus, SchemaManagerService } from '@qdp/common';
import { MessagerService } from '@farris/ui-messager';
export class ConditionSchemaManagerComponent {
    /**
     * @param {?} repository
     * @param {?} conditionSchemaService
     * @param {?} notifyService
     * @param {?} finishLoasService
     * @param {?} injector
     */
    constructor(repository, conditionSchemaService, notifyService, finishLoasService, injector) {
        this.repository = repository;
        this.conditionSchemaService = conditionSchemaService;
        this.notifyService = notifyService;
        this.finishLoasService = finishLoasService;
        this.injector = injector;
        this.bindingSchema = {
            // 用于绑定保存界面
            isDefault: false,
            schemaName: '',
            schemaType: false,
            // 0公共，1是个人
            schemavalue: {}
        };
        // 当前应用方案的名称
        this.columns = [];
        this.total = 0;
        this.editMode = 'row';
        this.pageSize = 200;
        this.pageIndex = 1;
        this.schemaTypeData = [
            { name: '公共', value: 0 },
            { name: '单位', value: 2 },
            { name: '个人', value: 1 }
        ];
        this.size = {};
        this.colDefault = 'colDefault' + EventBus.guid();
        this.colPublic = 'colPublic' + EventBus.guid();
        this.operations = {};
        this.subscriptions = [];
        if (this.injector) {
            this.localizeService = this.injector.get(LocalizeService);
            this.schemaService = this.injector.get(SchemaManagerService);
            this.msgService = this.injector.get(MessagerService);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        let defaultSchema;
        // 从服务端获取当前用户的所有条件方案
        this.conditionSchemaService.getSchemaList(this.queryId, '', '').subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.schemaData = value && value.length ? value : [];
            defaultSchema = this.schemaData.find((/**
             * @param {?} schema
             * @return {?}
             */
            schema => {
                return schema.isDefault === 1;
            }));
            this.schemaData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                item.isDefault = item.isDefault === 1;
            }));
            if (defaultSchema) { // 预制默认对象
                this.currentSchemaName = defaultSchema.schemaName;
                this.finishLoasService.finish.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    if (defaultSchema && defaultSchema.schemaValue && this.repository.entityCollection.getAllEntities() && this.repository.entityCollection.getAllEntities().length) {
                        defaultSchema.schemaValue.id = this.repository.entityCollection.getAllEntities()[0]['id'];
                    }
                    this.repository.entityCollection.getAllEntities()[0].load(defaultSchema.schemaValue);
                }));
            }
        }));
        this.gridInit();
        this.subscriptions.push(self.schemaService.operationChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value) {
                self.operations = value;
            }
            // console.log(value);
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions && this.subscriptions.length) {
            for (const subscription of this.subscriptions) {
                subscription.unsubscribe();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    gridInit() {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const enumOpts = { valueField: 'value', textField: 'name', data: this.schemaTypeData };
        this.columns = [
            {
                field: 'schemaName', width: 100, title: self.localizeService.getValue('ideCmp.conditionSchemaManager.schemeName')
            },
            {
                field: 'schemaType', width: 100, title: self.localizeService.getValue('ideCmp.conditionSchemaManager.schemeType'), formatter: { type: 'enum', options: enumOpts },
            },
            {
                field: 'isDefault', width: 100, title: self.localizeService.getValue('ideCmp.conditionSchemaManager.default'),
                editor: {
                    type: EditorTypes.CHECKBOX,
                    options: {},
                },
                formatter: { type: 'boolean', options: { trueText: self.localizeService.getValue('ideCmp.conditionSchemaManager.default'), falseText: self.localizeService.getValue('ideCmp.conditionSchemaManager.noDefault') } }
            }
        ];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        this.size.height = event.newHeight;
        this.size.width = event.newWidth;
    }
    /**
     * 处理保存格式方案
     * @return {?}
     */
    handleSaveClick() {
        if (!this.isSchemaNameValid(this.bindingSchema.schemaName)) {
            return;
        }
        /** @type {?} */
        const currentSchema = {};
        currentSchema['isDefault'] = this.bindingSchema.isDefault ? 1 : 0;
        currentSchema['queryId'] = this.queryId;
        currentSchema['schemaName'] = this.bindingSchema.schemaName;
        currentSchema['schemaType'] = this.bindingSchema.schemaType ? 0 : 1;
        /** @type {?} */
        const schemaValue = this.repository.entityCollection.toArray()[0].toJSON();
        delete schemaValue['id']; // 删除条件方案中的id字段(如果有)
        currentSchema['schemaValue'] = JSON.stringify(schemaValue);
        if (this.operations['QdpModifyPublicSchema'] === false && currentSchema['schemaType'] === 0) {
            this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
            return;
        }
        if (this.schemaData && currentSchema['isDefault']) { // 将当前默认条件方案设为0
            // 将当前默认条件方案设为0
            /** @type {?} */
            const currentDefaultSchema = this.schemaData.find((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                return value.isDefault === 1;
            }));
            if (currentDefaultSchema) {
                currentDefaultSchema.isDefault = 0;
            }
        }
        this.schemaData.push(currentSchema);
        // 数据库新增一条数据，并返回所有格式方案
        this.conditionSchemaService.saveSchema(currentSchema).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value) {
                this.schemaData = value;
                this.notifyService.success(this.localizeService.getValue('ideCmp.conditionSchemaManager.message.save.success'));
            }
            else {
                this.notifyService.error(this.localizeService.getValue('ideCmp.conditionSchemaManager.message.save.error'));
            }
        }));
        this.savingManagerDiglog.close();
    }
    /**
     * 处理方案管理页面点击事件，更改默认方案
     * @param {?} dataItem
     * @return {?}
     */
    handleDefault(dataItem) {
        /** @type {?} */
        const self = this;
        if (dataItem.isDefault === true) {
            /** @type {?} */
            const currentDefaultSchema = self.schemaData.find((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                return value.isDefault === true && value.id !== dataItem.id;
            }));
            if (currentDefaultSchema) {
                currentDefaultSchema.isDefault = false;
            }
            // this.schemaData = JSON.parse(JSON.stringify(this.schemaData));
            // this.dg.refresh();
        }
        /** @type {?} */
        const schema = JSON.parse(JSON.stringify(self.schemaData.find((/**
         * @param {?} value
         * @return {?}
         */
        value => value.id === dataItem.id))));
        if (this.operations['QdpModifyPublicSchema'] === false && schema.schemaType === 0) {
            this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
            return;
        }
        schema.isDefault = schema.isDefault === false ? 0 : 1;
        schema.schemaValue = JSON.stringify(schema.schemaValue);
        self.conditionSchemaService.saveSchema(schema).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value) {
                self.notifyService.success(self.localizeService.getValue('ideCmp.conditionSchemaManager.message.update.success'));
                self.conditionSchemaService.getSchemaList(self.queryId, '', '').subscribe((/**
                 * @param {?} schemaList
                 * @return {?}
                 */
                schemaList => {
                    self.schemaData = schemaList && schemaList.length ? schemaList : [];
                    /** @type {?} */
                    const defaultSchema = self.schemaData.find((/**
                     * @param {?} schema
                     * @return {?}
                     */
                    schema => {
                        return schema.isDefault === 1;
                    }));
                    self.schemaData.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => {
                        item.isDefault = item.isDefault === 1;
                    }));
                    if (defaultSchema) { // 预制默认对象
                        self.currentSchemaName = defaultSchema.schemaName;
                    }
                }));
            }
            else {
                self.notifyService.error(self.localizeService.getValue('ideCmp.conditionSchemaManager.message.update.error'));
            }
        })); // 将schemavalue转成string类型
    }
    /**
     * @return {?}
     */
    saveDefaultSchemaHandler() {
        this.dg.endRowEdit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    endEdit(data) {
        // console.log(data);
        this.handleDefault(data.rowData || undefined);
    }
    /**
     * 处理主页选中某个条件方案事件
     * @param {?} item 条件方案
     * @return {?}
     */
    handleDropDownItemClick(item) {
        this.currentSchemaName = item.schemaName;
        this.bindingSchema.schemaName = item.schemaName;
        if (item && item.schemaValue && this.repository.entityCollection.getAllEntities() && this.repository.entityCollection.getAllEntities().length) {
            item.schemaValue.id = this.repository.entityCollection.getAllEntities()[0]['id'];
        }
        this.repository.entityCollection.getAllEntities()[0].load(item.schemaValue);
    }
    /**
     * 删除解决方案
     * @return {?}
     */
    deleteSchemerHandler() {
        /** @type {?} */
        const self = this;
        if (self.dg.selectedRow) {
            /** @type {?} */
            const index = self.schemaData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.id === self.dg.selectedRow.id));
            self.dg.refresh();
            if (this.operations['QdpModifyPublicSchema'] === false && self.schemaData[index].schemaType === 0) {
                this.msgService.warning(this.localizeService.getValue('ideCmp.schemaManager.message.validate.qdpModifyPublicSchema'));
                return;
            }
            if (self.schemaData[index].isDefault === 1) { // 判断是否为默认方案
                self.notifyService.warning(self.localizeService.getValue('ideCmp.conditionSchemaManager.message.validate.delete'));
                return;
            }
            /** @type {?} */
            const schemaId = self.schemaData[index].id;
            self.schemaData.splice(index, 1);
            // TODO 调用服务端接口
            self.conditionSchemaService.deleteSchema(schemaId, self.queryId).subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value) {
                    self.notifyService.success(self.localizeService.getValue('ideCmp.conditionSchemaManager.message.delete.success'));
                }
                else {
                    self.notifyService.error(self.localizeService.getValue('ideCmp.conditionSchemaManager.message.delete.error'));
                }
            }));
        }
        else {
            self.notifyService.info(self.localizeService.getValue('ideCmp.conditionSchemaManager.message.validate.select'));
        }
    }
    /**
     * 判断条件方案名称是否重复
     * @private
     * @param {?} schemaName 条件方案名称
     * @return {?}
     */
    isSchemaNameValid(schemaName) {
        if ((schemaName.length) >= 100) {
            this.notifyService.warning(this.localizeService.getValue('ideCmp.conditionSchemaManager.message.validate.longLimit'));
            return false;
        }
        /** @type {?} */
        const repeatSchema = this.schemaData.find((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            return value.schemaName === schemaName;
        }));
        if (repeatSchema) {
            this.notifyService.warning(this.localizeService.getValue('ideCmp.conditionSchemaManager.message.validate.repeatName'));
            return false;
        }
        return true;
    }
}
ConditionSchemaManagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'condition-schema-manager',
                template: "<div class=\"btn-group mr-3\" fDropdown>\r\n  <button class=\"btn f-rt-btn f-btn-ml btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\"\r\n    fDropdownToggle>\r\n    <span class=\"f-icon f-icon-indent\" role=\"presentation\"></span>&nbsp;{{localizeService.getValue('ideCmp.conditionSchemaManager.conditionSchemeManagerName')}}\r\n  </button>\r\n  <div class=\"dropdown-menu\" fDropdownMenu>\r\n    <a class=\"dropdown-item\" href=\"javascript:void(0);\" (click)=\"savingManager.show()\">\r\n      <span class=\"k-icon\"></span>{{localizeService.getValue('ideCmp.conditionSchemaManager.schemeSave')}}</a>\r\n    <div class=\"dropdown-divider\"></div>\r\n\r\n    <a class=\"dropdown-item\" href=\"javascript:void(0);\" (click)=\"schemaManager.show()\">\r\n      <span class=\"k-icon\"></span>{{localizeService.getValue('ideCmp.conditionSchemaManager.schemeManagement')}}</a>\r\n    <div class=\"dropdown-divider\"></div>\r\n\r\n    <a *ngFor=\"let item of schemaData\" class=\"dropdown-item\" href=\"javascript:void(0);\"\r\n      (click)=\"handleDropDownItemClick(item)\">\r\n      <span [class.k-i-check]=\"currentSchemaName==item.schemaName\" class=\"k-icon\"></span>&nbsp;{{item.schemaName}}</a>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u65B9\u6848\u7BA1\u7406Diglog -->\r\n<farris-dialog #schemaManager [title]=\"localizeService.getValue('ideCmp.conditionSchemaManager.schemeManagement')\" [showButtons]=\"false\" [width]=\"700\" [height]=\"500\">\r\n  <div class=\"d-flex flex-column flex-fill position-relative h-100 m-0\">\r\n    <div class=\"flex-fill farris-split-section m-1 farris-overflow-hidden\" (resized)=\"onResized($event)\">\r\n      <div class=\"farris-form farris-card-content-bg\">\r\n        <fieldSet farrisFold [style.height.px]=\"size.height\">\r\n          <button class=\"btn btn-primary mr-1 mb-1\" id=\"button-edit\" (click)=\"saveDefaultSchemaHandler()\">{{localizeService.getValue('ideCmp.conditionSchemaManager.btnSave')}}</button>\r\n          <button class=\"btn btn-secondary mr-1 mb-1\" id=\"button-edit\" (click)=\"deleteSchemerHandler()\">{{localizeService.getValue('ideCmp.conditionSchemaManager.btnDelete')}}</button>\r\n          <farris-datagrid #dg [data]=\"schemaData\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\" [editable]=\"true\"\r\n            [editMode]=\"editMode\" [showCheckbox]=\"false\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [striped]=\"true\"\r\n            [total]=\"total\" [pageSize]=\"100\" [virtualized]=\"true\" [pagination]=\"false\" (endEdit)=\"endEdit($event)\">\r\n          </farris-datagrid>\r\n        </fieldSet>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<!-- \u4FDD\u5B58\u65B9\u6848Diglog -->\r\n<farris-dialog #savingManager [title]=\"localizeService.getValue('ideCmp.conditionSchemaManager.schemeManagement')\" [showButtons]=\"false\" [width]=\"350\" [height]=\"210\">\r\n  <div class=\"flex-fill farris-split-section m-1 farris-overflow-hidden\">\r\n    <div class=\"farris-form farris-card-content-bg\">\r\n      <div class=\"d-flex flex-wrap mb-2\">\r\n        <div class=\"col-12 col-md-12 col-lg-12\">\r\n          <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-form-label\" for=\"colName\" style=\"width: 5rem; min-width: 5rem;\">\r\n                <span class=\"farris-label-text\">{{localizeService.getValue('ideCmp.conditionSchemaManager.schemeName')}}:</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <input type=\"text\" [(ngModel)]=\"bindingSchema.schemaName\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12 col-md-12 col-lg-12\">\r\n          <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-form-label\" for=\"{{colDefault}}\" style=\"width: 5rem; min-width: 5rem;\">\r\n                <span class=\"farris-label-text\">{{localizeService.getValue('ideCmp.conditionSchemaManager.default')}}:</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n                <div class=\"custom-control custom-checkbox mb-0\">\r\n                  <input type=\"checkbox\" [(ngModel)]=\"bindingSchema.isDefault\" class=\"custom-control-input\"\r\n                    id=\"{{colDefault}}\" checked=\"\">\r\n                  <label class=\"custom-control-label\" for=\"{{colDefault}}\"></label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12 col-md-12 col-lg-12\">\r\n          <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-form-label\" for=\"{{colPublic}}\" style=\"width: 5rem; min-width: 5rem;\">\r\n                <span class=\"farris-label-text\">{{localizeService.getValue('ideCmp.conditionSchemaManager.public')}}:</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap farris-checkradio-hor\">\r\n                <div class=\"custom-control custom-checkbox mb-0\">\r\n                  <input type=\"checkbox\" [(ngModel)]=\"bindingSchema.schemaType\" class=\"custom-control-input\"\r\n                    id=\"{{colPublic}}\" checked=\"\">\r\n                  <label class=\"custom-control-label\" for=\"{{colPublic}}\"></label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div style=\"padding:0px 34px\">\r\n    <button class=\"btn btn-primary mr-1\" id=\"button-edit\" (click)=\"handleSaveClick()\">{{localizeService.getValue('ideCmp.conditionSchemaManager.btnSave')}}</button>\r\n  </div>\r\n</farris-dialog>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ConditionSchemaManagerComponent.ctorParameters = () => [
    { type: Repository },
    { type: ConditionSchemaService },
    { type: NotifyService },
    { type: FinishLoadService },
    { type: Injector, decorators: [{ type: Optional }] }
];
ConditionSchemaManagerComponent.propDecorators = {
    queryId: [{ type: Input }],
    savingManagerDiglog: [{ type: ViewChild, args: ['savingManager',] }],
    dg: [{ type: ViewChild, args: ['dg',] }]
};
if (false) {
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.queryId;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.savingManagerDiglog;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.schemaData;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.bindingSchema;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.currentSchemaName;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.columns;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.total;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.editMode;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.pageSize;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.pageIndex;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.schemaTypeData;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.size;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.dg;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.localizeService;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.colDefault;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.colPublic;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.schemaService;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.operations;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.subscriptions;
    /** @type {?} */
    ConditionSchemaManagerComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.conditionSchemaService;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.finishLoasService;
    /**
     * @type {?}
     * @private
     */
    ConditionSchemaManagerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,