import { Repository } from '@farris/devkit';
import { CacheService } from '@ecp-caf/caf-common';
import { Router } from '@angular/router';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { FilterManagerService, EventBus, RtfServices } from '@qdp/common';
import { Injectable } from '@angular/core';
import { FinishLoadService } from '@qdp/condition-schema';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryIndexService {
    /**
     * @param {?} repository
     * @param {?} cacheService
     * @param {?} router
     * @param {?} frameworkService
     * @param {?} filterManagerService
     */
    constructor(repository, cacheService, router, frameworkService, filterManagerService) {
        this.repository = repository;
        this.cacheService = cacheService;
        this.router = router;
        this.frameworkService = frameworkService;
        this.filterManagerService = filterManagerService;
        window['excuteQDPQuery'] = this.filterManagerService.isFilterQDP;
    }
    /**
     * @param {?} queryId
     * @param {?=} path
     * @return {?}
     */
    route(queryId, path) {
        /** @type {?} */
        const entitys = this.repository.entityCollection.getAllEntities();
        /** @type {?} */
        let params;
        if (entitys && entitys.length) {
            params = entitys[0].toJSON();
            // const queryIdArray = queryId.split(';'); // 支持一个查询索引跳转多个查询结果的情况
            // queryIdArray.forEach(queryIdInfo => {
            //   this.cacheService.set(queryIdInfo, params);
            // });
            this.cacheService.set(RtfServices.getTabId(queryId), params);
            /** @type {?} */
            let p = 'qdpview';
            if (path) {
                p = path;
            }
            // const url = this.router.createUrlTree([this.router.url, p]).toString();
            this.router.navigateByUrl(p);
        }
    }
    /**
     * @param {?} queryId
     * @param {?} appType
     * @param {?=} appId
     * @param {?=} appEntrance
     * @param {?=} funcId
     * @return {?}
     */
    routeEx(queryId, appType, appId, appEntrance, funcId) {
        /** @type {?} */
        const entitys = this.repository.entityCollection.getAllEntities();
        /** @type {?} */
        let params;
        if (entitys && entitys.length) {
            /** @type {?} */
            const tabId = EventBus.guid();
            params = entitys[0].toJSON();
            /** @type {?} */
            const options = { 'appType': appType, 'appId': appId, 'appEntrance': appEntrance, 'funcId': funcId, 'tabId': tabId };
            /** @type {?} */
            const cacheKey = RtfServices.getFuncId(options);
            this.cacheService.set(cacheKey + 'renderMode', 'queryIndex'); // 索引页的查询参数以功能ID为缓存key进行缓存，解决打开多个结果页查询覆盖问题
            this.cacheService.set(cacheKey, params);
            /** @type {?} */
            const menuSwitchControl = Object.assign({}, RtfServices.getMenuSwitchControlParameter(cacheKey));
            options['entityParams'] = menuSwitchControl;
            this.frameworkService.openMenu(options);
        }
    }
    /**
     * @return {?}
     */
    queryRefresh() {
        this.filterManagerService.isFilterQDP.next(true);
    }
    // 查询过滤
    /**
     * @param {?} queryId
     * @param {?} filterCondition
     * @return {?}
     */
    filterQDP(queryId, filterCondition) {
        /** @type {?} */
        const self = this;
        filterCondition = this['context']['eventParam'];
        /** @type {?} */
        const entityData = { 'id': 'undefined_null' };
        if (filterCondition) {
            filterCondition.forEach((/**
             * @param {?} condition
             * @return {?}
             */
            condition => {
                /** @type {?} */
                const tempDataField = condition.fieldCode;
                /** @type {?} */
                let tempData = condition.value;
                if (tempData && (tempData.dateValue || tempData.value || tempData.numValue || tempData.yearValue || tempData.startTime || tempData.endTime || tempData.startValue || tempData.endValue || tempData.monthValue || tempData.datetimeValue)) {
                    /** @type {?} */
                    const tempDataType = condition.control.getControlType();
                    switch (tempDataType) {
                        case 0: // Text
                        case 14: // Radio
                        case 15: // 只能输入框
                            if (typeof tempData.value + '' === 'string') {
                                tempData = tempData.value;
                            }
                            break;
                        case 1: // SingleDate
                            tempData = tempData.dateValue;
                            break;
                        case 2: // SmartHelp
                            if (tempData && tempData.value && tempData.value.length) {
                                /** @type {?} */
                                const helpValues = [];
                                tempData.value.forEach((/**
                                 * @param {?} el
                                 * @return {?}
                                 */
                                (el) => {
                                    if (tempData.isInputText) {
                                        helpValues.push(el);
                                    }
                                    else {
                                        helpValues.push(self.getValue(tempData.valueField, el));
                                    }
                                }));
                                tempData = helpValues.join(',');
                            }
                            else {
                                tempData = null;
                            }
                            break;
                        case 3: // DropDownList
                            if (tempData && tempData.value && tempData.value.length) {
                                /** @type {?} */
                                const dropDownValues = [];
                                tempData.value.forEach((/**
                                 * @param {?} el
                                 * @return {?}
                                 */
                                (el) => {
                                    dropDownValues.push(el.value);
                                }));
                                tempData = dropDownValues.join(',');
                            }
                            else {
                                tempData = null;
                            }
                            break;
                        case 4: // DateRange
                        case 11: // MonthRange
                            tempData = {
                                beginValue: tempData.startTime ? tempData.startTime : null,
                                endValue: tempData.endTime ? tempData.endTime : null
                            }; // tempData.value;
                            break;
                        case 5: // NumberRange
                            tempData = {
                                beginValue: tempData.startValue ? tempData.startValue : null,
                                endValue: tempData.endValue ? tempData.endValue : null
                            }; // tempData.value;
                            break;
                        case 6: // SingleNumber
                            tempData = tempData.numValue;
                            break;
                        case 7: // SingleYear
                            tempData = tempData.yearValue;
                            break;
                        case 8: // BoolCheck
                            tempData = tempData.value && tempData.value.length ? tempData.value[0] : null;
                            break;
                        case 9: // DateTimeRange
                            tempData = {
                                beginValue: tempData.startTime ? tempData.startTime : null,
                                endValue: tempData.endTime ? tempData.endTime : null
                            }; // tempData.value;
                            break;
                        case 10: // SingleMonth
                            tempData = tempData.monthValue;
                            break;
                        case 12: // SingleDateTime
                            tempData = tempData.datetimeValue;
                            break;
                        default:
                            break;
                    }
                    /** @type {?} */
                    const cacheObject = entityData;
                    if (tempDataField && tempDataField.indexOf(';') >= 0) {
                        /** @type {?} */
                        const fields1 = tempDataField.split(';')[0].split('.');
                        /** @type {?} */
                        const fields2 = tempDataField.split(';')[1].split('.');
                        if (tempData['beginValue'] != null && tempData['beginValue'] !== undefined) {
                            this.setEntityData(fields1, cacheObject, tempData['beginValue']);
                        }
                        if (tempData['endValue'] != null && tempData['endValue'] !== undefined) {
                            this.setEntityData(fields2, cacheObject, tempData['endValue']);
                        }
                    }
                    else {
                        /** @type {?} */
                        const fields = tempDataField.split('.');
                        if (tempData != null && tempData !== undefined) {
                            this.setEntityData(fields, cacheObject, tempData);
                        }
                    }
                }
            }));
        }
        // const queryIdArray = queryId.split(';'); // 支持一个查询索引跳转多个查询结果的情况
        // queryIdArray.forEach(queryIdInfo => {
        //   this.cacheService.set(queryIdInfo, entityData);
        // });
        this.cacheService.set(RtfServices.getTabId(queryId), entityData);
        this.filterManagerService.isFilterQDP.next(true);
    }
    /**
     * @private
     * @param {?} fields
     * @param {?} cacheObject
     * @param {?} tempData
     * @return {?}
     */
    setEntityData(fields, cacheObject, tempData) {
        if (fields.length && fields.length > 1) {
            for (let i = 0; i < fields.length; i++) {
                if (i === 0) {
                    cacheObject = this.getEntityData(fields[i], cacheObject);
                }
                else {
                    cacheObject = this.getEntityData(fields[i], cacheObject[fields[i - 1]]);
                }
                if ((i + 1) === fields.length) {
                    cacheObject[fields[i]] = tempData;
                }
            }
        }
        else {
            cacheObject[fields[0]] = tempData;
        }
    }
    /**
     * @private
     * @param {?} key
     * @param {?} entityData
     * @return {?}
     */
    getEntityData(key, entityData) {
        if (entityData.hasOwnProperty(key)) {
            return entityData;
        }
        else {
            entityData[key] = {};
            return entityData;
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    getValue(field, data, safe = false) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce(((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            })), data);
        }
        if (safe) {
            return this.formatterValue(resultVal);
        }
        else {
            return resultVal;
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    formatterValue(val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        if (typeof val === 'string') {
            return this.escapeHtml(val);
        }
        return val;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    escapeHtml(str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
    }
}
QueryIndexService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QueryIndexService.ctorParameters = () => [
    { type: Repository },
    { type: CacheService },
    { type: Router },
    { type: FrameworkService },
    { type: FilterManagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FinishEventService {
    /**
     * @param {?} finishLoadService
     */
    constructor(finishLoadService) {
        this.finishLoadService = finishLoadService;
    }
    /**
     * @return {?}
     */
    SendEvent() {
        this.finishLoadService.finish.next('finished');
    }
}
FinishEventService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FinishEventService.ctorParameters = () => [
    { type: FinishLoadService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const QDP_COMMAND_SERVICE_PROVIDERS = [
    QueryIndexService,
    FinishEventService
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { QueryIndexService, FinishEventService, QDP_COMMAND_SERVICE_PROVIDERS };

//# sourceMappingURL=qdp-command-services.js.map