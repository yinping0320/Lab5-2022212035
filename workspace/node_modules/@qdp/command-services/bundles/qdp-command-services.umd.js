(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/devkit'), require('@ecp-caf/caf-common'), require('@angular/router'), require('@gsp-sys/rtf-common'), require('@qdp/common'), require('@angular/core'), require('@qdp/condition-schema')) :
    typeof define === 'function' && define.amd ? define('@qdp/command-services', ['exports', '@farris/devkit', '@ecp-caf/caf-common', '@angular/router', '@gsp-sys/rtf-common', '@qdp/common', '@angular/core', '@qdp/condition-schema'], factory) :
    (factory((global.qdp = global.qdp || {}, global.qdp['command-services'] = {}),global.devkit,global.cafCommon,global.ng.router,global.rtfCommon,global.common,global.ng.core,global.conditionSchema));
}(this, (function (exports,devkit,cafCommon,router,rtfCommon,common,core,conditionSchema) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QueryIndexService = /** @class */ (function () {
        function QueryIndexService(repository, cacheService, router$$1, frameworkService, filterManagerService) {
            this.repository = repository;
            this.cacheService = cacheService;
            this.router = router$$1;
            this.frameworkService = frameworkService;
            this.filterManagerService = filterManagerService;
            window['excuteQDPQuery'] = this.filterManagerService.isFilterQDP;
        }
        /**
         * @param {?} queryId
         * @param {?=} path
         * @return {?}
         */
        QueryIndexService.prototype.route = /**
         * @param {?} queryId
         * @param {?=} path
         * @return {?}
         */
            function (queryId, path) {
                /** @type {?} */
                var entitys = this.repository.entityCollection.getAllEntities();
                /** @type {?} */
                var params;
                if (entitys && entitys.length) {
                    params = entitys[0].toJSON();
                    // const queryIdArray = queryId.split(';'); // 支持一个查询索引跳转多个查询结果的情况
                    // queryIdArray.forEach(queryIdInfo => {
                    //   this.cacheService.set(queryIdInfo, params);
                    // });
                    this.cacheService.set(common.RtfServices.getTabId(queryId), params);
                    /** @type {?} */
                    var p = 'qdpview';
                    if (path) {
                        p = path;
                    }
                    // const url = this.router.createUrlTree([this.router.url, p]).toString();
                    this.router.navigateByUrl(p);
                }
            };
        /**
         * @param {?} queryId
         * @param {?} appType
         * @param {?=} appId
         * @param {?=} appEntrance
         * @param {?=} funcId
         * @return {?}
         */
        QueryIndexService.prototype.routeEx = /**
         * @param {?} queryId
         * @param {?} appType
         * @param {?=} appId
         * @param {?=} appEntrance
         * @param {?=} funcId
         * @return {?}
         */
            function (queryId, appType, appId, appEntrance, funcId) {
                /** @type {?} */
                var entitys = this.repository.entityCollection.getAllEntities();
                /** @type {?} */
                var params;
                if (entitys && entitys.length) {
                    /** @type {?} */
                    var tabId = common.EventBus.guid();
                    params = entitys[0].toJSON();
                    /** @type {?} */
                    var options = { 'appType': appType, 'appId': appId, 'appEntrance': appEntrance, 'funcId': funcId, 'tabId': tabId };
                    /** @type {?} */
                    var cacheKey = common.RtfServices.getFuncId(options);
                    this.cacheService.set(cacheKey + 'renderMode', 'queryIndex'); // 索引页的查询参数以功能ID为缓存key进行缓存，解决打开多个结果页查询覆盖问题
                    this.cacheService.set(cacheKey, params);
                    /** @type {?} */
                    var menuSwitchControl = Object.assign({}, common.RtfServices.getMenuSwitchControlParameter(cacheKey));
                    options['entityParams'] = menuSwitchControl;
                    this.frameworkService.openMenu(options);
                }
            };
        /**
         * @return {?}
         */
        QueryIndexService.prototype.queryRefresh = /**
         * @return {?}
         */
            function () {
                this.filterManagerService.isFilterQDP.next(true);
            };
        // 查询过滤
        // 查询过滤
        /**
         * @param {?} queryId
         * @param {?} filterCondition
         * @return {?}
         */
        QueryIndexService.prototype.filterQDP =
            // 查询过滤
            /**
             * @param {?} queryId
             * @param {?} filterCondition
             * @return {?}
             */
            function (queryId, filterCondition) {
                var _this = this;
                /** @type {?} */
                var self = this;
                filterCondition = this['context']['eventParam'];
                /** @type {?} */
                var entityData = { 'id': 'undefined_null' };
                if (filterCondition) {
                    filterCondition.forEach(( /**
                     * @param {?} condition
                     * @return {?}
                     */function (condition) {
                        /** @type {?} */
                        var tempDataField = condition.fieldCode;
                        /** @type {?} */
                        var tempData = condition.value;
                        if (tempData && (tempData.dateValue || tempData.value || tempData.numValue || tempData.yearValue || tempData.startTime || tempData.endTime || tempData.startValue || tempData.endValue || tempData.monthValue || tempData.datetimeValue)) {
                            /** @type {?} */
                            var tempDataType = condition.control.getControlType();
                            switch (tempDataType) {
                                case 0: // Text
                                case 14: // Radio
                                case 15: // 只能输入框
                                    if (typeof tempData.value + '' === 'string') {
                                        tempData = tempData.value;
                                    }
                                    break;
                                case 1: // SingleDate
                                    tempData = tempData.dateValue;
                                    break;
                                case 2: // SmartHelp
                                    if (tempData && tempData.value && tempData.value.length) {
                                        /** @type {?} */
                                        var helpValues_1 = [];
                                        tempData.value.forEach(( /**
                                         * @param {?} el
                                         * @return {?}
                                         */function (el) {
                                            if (tempData.isInputText) {
                                                helpValues_1.push(el);
                                            }
                                            else {
                                                helpValues_1.push(self.getValue(tempData.valueField, el));
                                            }
                                        }));
                                        tempData = helpValues_1.join(',');
                                    }
                                    else {
                                        tempData = null;
                                    }
                                    break;
                                case 3: // DropDownList
                                    if (tempData && tempData.value && tempData.value.length) {
                                        /** @type {?} */
                                        var dropDownValues_1 = [];
                                        tempData.value.forEach(( /**
                                         * @param {?} el
                                         * @return {?}
                                         */function (el) {
                                            dropDownValues_1.push(el.value);
                                        }));
                                        tempData = dropDownValues_1.join(',');
                                    }
                                    else {
                                        tempData = null;
                                    }
                                    break;
                                case 4: // DateRange
                                case 11: // MonthRange
                                    tempData = {
                                        beginValue: tempData.startTime ? tempData.startTime : null,
                                        endValue: tempData.endTime ? tempData.endTime : null
                                    }; // tempData.value;
                                    break;
                                case 5: // NumberRange
                                    tempData = {
                                        beginValue: tempData.startValue ? tempData.startValue : null,
                                        endValue: tempData.endValue ? tempData.endValue : null
                                    }; // tempData.value;
                                    break;
                                case 6: // SingleNumber
                                    tempData = tempData.numValue;
                                    break;
                                case 7: // SingleYear
                                    tempData = tempData.yearValue;
                                    break;
                                case 8: // BoolCheck
                                    tempData = tempData.value && tempData.value.length ? tempData.value[0] : null;
                                    break;
                                case 9: // DateTimeRange
                                    tempData = {
                                        beginValue: tempData.startTime ? tempData.startTime : null,
                                        endValue: tempData.endTime ? tempData.endTime : null
                                    }; // tempData.value;
                                    break;
                                case 10: // SingleMonth
                                    tempData = tempData.monthValue;
                                    break;
                                case 12: // SingleDateTime
                                    tempData = tempData.datetimeValue;
                                    break;
                                default:
                                    break;
                            }
                            /** @type {?} */
                            var cacheObject = entityData;
                            if (tempDataField && tempDataField.indexOf(';') >= 0) {
                                /** @type {?} */
                                var fields1 = tempDataField.split(';')[0].split('.');
                                /** @type {?} */
                                var fields2 = tempDataField.split(';')[1].split('.');
                                if (tempData['beginValue'] != null && tempData['beginValue'] !== undefined) {
                                    _this.setEntityData(fields1, cacheObject, tempData['beginValue']);
                                }
                                if (tempData['endValue'] != null && tempData['endValue'] !== undefined) {
                                    _this.setEntityData(fields2, cacheObject, tempData['endValue']);
                                }
                            }
                            else {
                                /** @type {?} */
                                var fields = tempDataField.split('.');
                                if (tempData != null && tempData !== undefined) {
                                    _this.setEntityData(fields, cacheObject, tempData);
                                }
                            }
                        }
                    }));
                }
                // const queryIdArray = queryId.split(';'); // 支持一个查询索引跳转多个查询结果的情况
                // queryIdArray.forEach(queryIdInfo => {
                //   this.cacheService.set(queryIdInfo, entityData);
                // });
                this.cacheService.set(common.RtfServices.getTabId(queryId), entityData);
                this.filterManagerService.isFilterQDP.next(true);
            };
        /**
         * @private
         * @param {?} fields
         * @param {?} cacheObject
         * @param {?} tempData
         * @return {?}
         */
        QueryIndexService.prototype.setEntityData = /**
         * @private
         * @param {?} fields
         * @param {?} cacheObject
         * @param {?} tempData
         * @return {?}
         */
            function (fields, cacheObject, tempData) {
                if (fields.length && fields.length > 1) {
                    for (var i = 0; i < fields.length; i++) {
                        if (i === 0) {
                            cacheObject = this.getEntityData(fields[i], cacheObject);
                        }
                        else {
                            cacheObject = this.getEntityData(fields[i], cacheObject[fields[i - 1]]);
                        }
                        if ((i + 1) === fields.length) {
                            cacheObject[fields[i]] = tempData;
                        }
                    }
                }
                else {
                    cacheObject[fields[0]] = tempData;
                }
            };
        /**
         * @private
         * @param {?} key
         * @param {?} entityData
         * @return {?}
         */
        QueryIndexService.prototype.getEntityData = /**
         * @private
         * @param {?} key
         * @param {?} entityData
         * @return {?}
         */
            function (key, entityData) {
                if (entityData.hasOwnProperty(key)) {
                    return entityData;
                }
                else {
                    entityData[key] = {};
                    return entityData;
                }
            };
        /**
         * @private
         * @param {?} field
         * @param {?} data
         * @param {?=} safe
         * @return {?}
         */
        QueryIndexService.prototype.getValue = /**
         * @private
         * @param {?} field
         * @param {?} data
         * @param {?=} safe
         * @return {?}
         */
            function (field, data, safe) {
                if (safe === void 0) {
                    safe = false;
                }
                if (!data) {
                    return '';
                }
                /** @type {?} */
                var resultVal = '';
                if (field.indexOf('.') === -1) {
                    resultVal = data[field];
                }
                else {
                    resultVal = field.split('.').reduce((( /**
                     * @param {?} obj
                     * @param {?} key
                     * @return {?}
                     */function (obj, key) {
                        if (obj) {
                            return obj[key];
                        }
                        else {
                            return null;
                        }
                    })), data);
                }
                if (safe) {
                    return this.formatterValue(resultVal);
                }
                else {
                    return resultVal;
                }
            };
        /**
         * @private
         * @param {?} val
         * @return {?}
         */
        QueryIndexService.prototype.formatterValue = /**
         * @private
         * @param {?} val
         * @return {?}
         */
            function (val) {
                if (val === null || val === undefined || val === '') {
                    return '';
                }
                if (typeof val === 'string') {
                    return this.escapeHtml(val);
                }
                return val;
            };
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        QueryIndexService.prototype.escapeHtml = /**
         * @private
         * @param {?} str
         * @return {?}
         */
            function (str) {
                if (str === null || str === undefined) {
                    return '';
                }
                return str
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/\"/g, '&quot;')
                    .replace(/\'/g, '&#39;')
                    .replace(/\//g, '&#x2F;');
            };
        QueryIndexService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        QueryIndexService.ctorParameters = function () {
            return [
                { type: devkit.Repository },
                { type: cafCommon.CacheService },
                { type: router.Router },
                { type: rtfCommon.FrameworkService },
                { type: common.FilterManagerService }
            ];
        };
        return QueryIndexService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FinishEventService = /** @class */ (function () {
        function FinishEventService(finishLoadService) {
            this.finishLoadService = finishLoadService;
        }
        /**
         * @return {?}
         */
        FinishEventService.prototype.SendEvent = /**
         * @return {?}
         */
            function () {
                this.finishLoadService.finish.next('finished');
            };
        FinishEventService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FinishEventService.ctorParameters = function () {
            return [
                { type: conditionSchema.FinishLoadService }
            ];
        };
        return FinishEventService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var QDP_COMMAND_SERVICE_PROVIDERS = [
        QueryIndexService,
        FinishEventService
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.QueryIndexService = QueryIndexService;
    exports.FinishEventService = FinishEventService;
    exports.QDP_COMMAND_SERVICE_PROVIDERS = QDP_COMMAND_SERVICE_PROVIDERS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=qdp-command-services.umd.js.map