{"version":3,"sources":["ng://@qdp/command-services/lib/queryindex.service.ts","ng://@qdp/command-services/lib/condition-schema/finish-event.service.ts","ng://@qdp/command-services/lib/index.ts"],"names":["QueryIndexService","repository","cacheService","router","frameworkService","filterManagerService","this","window","isFilterQDP","prototype","route","queryId","path","params","entitys","entityCollection","getAllEntities","length","toJSON","set","RtfServices","getTabId","p","navigateByUrl","routeEx","appType","appId","appEntrance","funcId","tabId","EventBus","guid","options","cacheKey","getFuncId","menuSwitchControl","Object","assign","getMenuSwitchControlParameter","openMenu","queryRefresh","next","filterQDP","filterCondition","_this","self","entityData","id","forEach","condition","tempDataField","fieldCode","tempData","value","dateValue","numValue","yearValue","startTime","endTime","startValue","endValue","monthValue","datetimeValue","control","getControlType","helpValues_1","el","isInputText","push","getValue","valueField","join","dropDownValues_1","beginValue","cacheObject","indexOf","fields1","split","fields2","undefined","setEntityData","fields","i","getEntityData","key","hasOwnProperty","field","data","safe","resultVal","reduce","obj","formatterValue","val","escapeHtml","str","replace","Injectable","Repository","CacheService","Router","FrameworkService","FilterManagerService","FinishEventService","finishLoadService","SendEvent","finish","FinishLoadService","QDP_COMMAND_SERVICE_PROVIDERS"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Repository } from '@farris/devkit';\r\nimport { CacheService } from '@ecp-caf/caf-common';\r\nimport { Router } from '@angular/router';\r\nimport { FrameworkService } from '@gsp-sys/rtf-common';\r\nimport { FilterManagerService, EventBus } from '@qdp/common';\r\nimport { RtfServices } from '@qdp/common';\r\n\r\n@Injectable()\r\nexport class QueryIndexService {\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private cacheService: CacheService,\r\n    private router: Router,\r\n    private frameworkService: FrameworkService,\r\n    private filterManagerService: FilterManagerService\r\n  ) {\r\n    window['excuteQDPQuery'] = this.filterManagerService.isFilterQDP;\r\n  }\r\n\r\n  route(queryId: any, path?: any) {\r\n    const entitys = this.repository.entityCollection.getAllEntities();\r\n    let params;\r\n    if (entitys && entitys.length) {\r\n      params = entitys[0].toJSON();\r\n      // const queryIdArray = queryId.split(';'); // æ¯æä¸ä¸ªæ¥è¯¢ç´¢å¼è·³è½¬å¤ä¸ªæ¥è¯¢ç»æçæåµ\r\n      // queryIdArray.forEach(queryIdInfo => {\r\n      //   this.cacheService.set(queryIdInfo, params);\r\n      // });\r\n      this.cacheService.set(RtfServices.getTabId(queryId), params);\r\n      let p = 'qdpview';\r\n      if (path) {\r\n        p = path;\r\n      }\r\n      // const url = this.router.createUrlTree([this.router.url, p]).toString();\r\n      this.router.navigateByUrl(p);\r\n    }\r\n  }\r\n\r\n  routeEx(queryId: any, appType: any, appId?: any, appEntrance?: any, funcId?: any) {\r\n    const entitys = this.repository.entityCollection.getAllEntities();\r\n    let params;\r\n    if (entitys && entitys.length) {\r\n      const tabId = EventBus.guid();\r\n      params = entitys[0].toJSON();\r\n      const options: any = { 'appType': appType, 'appId': appId, 'appEntrance': appEntrance, 'funcId': funcId, 'tabId': tabId };\r\n      const cacheKey = RtfServices.getFuncId(options);\r\n      this.cacheService.set(cacheKey + 'renderMode', 'queryIndex'); // ç´¢å¼é¡µçæ¥è¯¢åæ°ä»¥åè½IDä¸ºç¼å­keyè¿è¡ç¼å­ï¼è§£å³æå¼å¤ä¸ªç»æé¡µæ¥è¯¢è¦çé®é¢\r\n      this.cacheService.set(cacheKey, params);\r\n      const menuSwitchControl = Object.assign({}, RtfServices.getMenuSwitchControlParameter(cacheKey));\r\n      options['entityParams'] = menuSwitchControl;\r\n      this.frameworkService.openMenu(options);\r\n    }\r\n  }\r\n\r\n  queryRefresh() {\r\n    this.filterManagerService.isFilterQDP.next(true);\r\n  }\r\n\r\n  // æ¥è¯¢è¿æ»¤\r\n  filterQDP(queryId: any, filterCondition: any) {\r\n    const self = this;\r\n    filterCondition = this['context']['eventParam'];\r\n    const entityData: any = { 'id': 'undefined_null' };\r\n    if (filterCondition) {\r\n      filterCondition.forEach(condition => {\r\n        const tempDataField = condition.fieldCode;\r\n        let tempData = condition.value;\r\n        if (tempData && (tempData.dateValue || tempData.value || tempData.numValue || tempData.yearValue || tempData.startTime || tempData.endTime || tempData.startValue || tempData.endValue || tempData.monthValue || tempData.datetimeValue)) {\r\n          const tempDataType = condition.control.getControlType();\r\n          switch (tempDataType) {\r\n            case 0: // Text\r\n            case 14: // Radio\r\n            case 15: // åªè½è¾å¥æ¡\r\n              if (typeof tempData.value + '' === 'string') {\r\n                tempData = tempData.value;\r\n              }\r\n              break;\r\n            case 1: // SingleDate\r\n              tempData = tempData.dateValue;\r\n              break;\r\n            case 2: // SmartHelp\r\n              if (tempData && tempData.value && tempData.value.length) {\r\n                const helpValues: any = [];\r\n                tempData.value.forEach((el: any) => {\r\n                  if (tempData.isInputText) {\r\n                    helpValues.push(el);\r\n                  } else {\r\n                    helpValues.push(self.getValue(tempData.valueField, el));\r\n                  }\r\n                });\r\n                tempData = helpValues.join(',');\r\n              } else {\r\n                tempData = null;\r\n              }\r\n              break;\r\n            case 3: // DropDownList\r\n              if (tempData && tempData.value && tempData.value.length) {\r\n                const dropDownValues: any = [];\r\n                tempData.value.forEach((el: any) => {\r\n                  dropDownValues.push(el.value);\r\n                });\r\n                tempData = dropDownValues.join(',');\r\n              } else {\r\n                tempData = null;\r\n              }\r\n              break;\r\n            case 4: // DateRange\r\n            case 11: // MonthRange\r\n              tempData = {\r\n                beginValue: tempData.startTime ? tempData.startTime : null,\r\n                endValue: tempData.endTime ? tempData.endTime : null\r\n              }; // tempData.value;\r\n              break;\r\n            case 5: // NumberRange\r\n              tempData = {\r\n                beginValue: tempData.startValue ? tempData.startValue : null,\r\n                endValue: tempData.endValue ? tempData.endValue : null\r\n              }; // tempData.value;\r\n              break;\r\n            case 6: // SingleNumber\r\n              tempData = tempData.numValue;\r\n              break;\r\n            case 7: // SingleYear\r\n              tempData = tempData.yearValue;\r\n              break;\r\n            case 8: // BoolCheck\r\n              tempData = tempData.value && tempData.value.length ? tempData.value[0] : null;\r\n              break;\r\n            case 9: // DateTimeRange\r\n              tempData = {\r\n                beginValue: tempData.startTime ? tempData.startTime : null,\r\n                endValue: tempData.endTime ? tempData.endTime : null\r\n              }; // tempData.value;\r\n              break;\r\n            case 10: // SingleMonth\r\n              tempData = tempData.monthValue;\r\n              break;\r\n            case 12: // SingleDateTime\r\n              tempData = tempData.datetimeValue;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          const cacheObject = entityData;\r\n          if (tempDataField && tempDataField.indexOf(';') >= 0) {\r\n            const fields1 = tempDataField.split(';')[0].split('.');\r\n            const fields2 = tempDataField.split(';')[1].split('.');\r\n            if (tempData['beginValue'] != null && tempData['beginValue'] !== undefined) {\r\n              this.setEntityData(fields1, cacheObject, tempData['beginValue']);\r\n            }\r\n            if (tempData['endValue'] != null && tempData['endValue'] !== undefined) {\r\n              this.setEntityData(fields2, cacheObject, tempData['endValue']);\r\n            }\r\n          } else {\r\n            const fields = tempDataField.split('.');\r\n            if (tempData != null && tempData !== undefined) {\r\n              this.setEntityData(fields, cacheObject, tempData);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // const queryIdArray = queryId.split(';'); // æ¯æä¸ä¸ªæ¥è¯¢ç´¢å¼è·³è½¬å¤ä¸ªæ¥è¯¢ç»æçæåµ\r\n    // queryIdArray.forEach(queryIdInfo => {\r\n    //   this.cacheService.set(queryIdInfo, entityData);\r\n    // });\r\n    this.cacheService.set(RtfServices.getTabId(queryId), entityData);\r\n    this.filterManagerService.isFilterQDP.next(true);\r\n  }\r\n\r\n  private setEntityData(fields: any[], cacheObject: any, tempData: any) {\r\n    if (fields.length && fields.length > 1) {\r\n      for (let i = 0; i < fields.length; i++) {\r\n        if (i === 0) {\r\n          cacheObject = this.getEntityData(fields[i], cacheObject);\r\n        } else {\r\n          cacheObject = this.getEntityData(fields[i], cacheObject[fields[i - 1]]);\r\n        }\r\n        if ((i + 1) === fields.length) {\r\n          cacheObject[fields[i]] = tempData;\r\n        }\r\n      }\r\n    } else {\r\n      cacheObject[fields[0]] = tempData;\r\n    }\r\n  }\r\n\r\n  private getEntityData(key: string, entityData: any): any {\r\n    if (entityData.hasOwnProperty(key)) {\r\n      return entityData;\r\n    } else {\r\n      entityData[key] = {};\r\n      return entityData;\r\n    }\r\n  }\r\n\r\n  private getValue(field, data, safe = false) {\r\n    if (!data) {\r\n      return '';\r\n    }\r\n    let resultVal = '';\r\n    if (field.indexOf('.') === -1) {\r\n      resultVal = data[field];\r\n    } else {\r\n      resultVal = field.split('.').reduce((\r\n        (obj, key) => {\r\n          if (obj) {\r\n            return obj[key];\r\n          } else {\r\n            return null;\r\n          }\r\n        }), data);\r\n    }\r\n    if (safe) {\r\n      return this.formatterValue(resultVal);\r\n    } else {\r\n      return resultVal;\r\n    }\r\n  }\r\n\r\n  private formatterValue(val) {\r\n    if (val === null || val === undefined || val === '') {\r\n      return '';\r\n    }\r\n    if (typeof val === 'string') {\r\n      return this.escapeHtml(val);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  private escapeHtml(str) {\r\n    if (str === null || str === undefined) {\r\n      return '';\r\n    }\r\n    return str\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\\\"/g, '&quot;')\r\n      .replace(/\\'/g, '&#39;')\r\n      .replace(/\\//g, '&#x2F;');\r\n  }\r\n\r\n  // private unescapeHtml(str) {\r\n  //   if (str === null || str === undefined) {\r\n  //     return '';\r\n  //   }\r\n  //   return str\r\n  //     .replace(/&amp;/g, '&')\r\n  //     .replace(/&lt;/g, '<')\r\n  //     .replace(/&gt;/g, '>')\r\n  //     .replace(/&quot;/g, '\"')\r\n  //     .replace(/&#39;/g, '\\'')\r\n  //     .replace(/&#x2F;/g, '/');\r\n  // }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FinishLoadService } from '@qdp/condition-schema';\r\n\r\n@Injectable()\r\nexport class FinishEventService {\r\n  constructor(private finishLoadService: FinishLoadService) { }\r\n\r\n  public SendEvent() {\r\n    this.finishLoadService.finish.next('finished');\r\n  }\r\n}\r\n","\r\nimport { Provider } from '@angular/core';\r\nimport { QueryIndexService } from './queryindex.service';\r\nimport { FinishEventService } from './condition-schema/finish-event.service';\r\n\r\nconst QDP_COMMAND_SERVICE_PROVIDERS: Provider[] = [\r\n  QueryIndexService,\r\n  FinishEventService\r\n];\r\n\r\nexport {\r\n  QueryIndexService,\r\n  FinishEventService,\r\n  QDP_COMMAND_SERVICE_PROVIDERS\r\n};\r\n"]}